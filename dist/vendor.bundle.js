webpackJsonp([4,5],[
/* 0 */,
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_rxjs_Observable__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_rxjs_Observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_rxjs_Observable__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs_observable_merge__ = __webpack_require__(193);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs_observable_merge___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_rxjs_observable_merge__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_operator_share__ = __webpack_require__(207);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_operator_share___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_rxjs_operator_share__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_symbol_observable__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_symbol_observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_rxjs_symbol_observable__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs_Subject__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs_Subject___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_rxjs_Subject__);
/* unused harmony export createPlatform */
/* unused harmony export assertPlatform */
/* unused harmony export destroyPlatform */
/* unused harmony export getPlatform */
/* unused harmony export PlatformRef */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "D", function() { return ApplicationRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return enableProdMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return isDevMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Y", function() { return createPlatformFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "G", function() { return NgProbeToken; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "P", function() { return APP_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_101", function() { return PACKAGE_ROOT_URL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "W", function() { return PLATFORM_INITIALIZER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "V", function() { return PLATFORM_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "K", function() { return APP_BOOTSTRAP_LISTENER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "N", function() { return APP_INITIALIZER; });
/* unused harmony export ApplicationInitStatus */
/* unused harmony export DebugElement */
/* unused harmony export DebugNode */
/* unused harmony export asNativeElements */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "R", function() { return getDebugNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return Testability; });
/* unused harmony export TestabilityRegistry */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "O", function() { return setTestabilityGetter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_138", function() { return TRANSLATIONS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_68", function() { return TRANSLATIONS_FORMAT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_3", function() { return LOCALE_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_97", function() { return MissingTranslationStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_2", function() { return ApplicationModule; });
/* unused harmony export wtfCreateScope */
/* unused harmony export wtfLeave */
/* unused harmony export wtfStartTimeRange */
/* unused harmony export wtfEndTimeRange */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_108", function() { return Type; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return EventEmitter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_0", function() { return ErrorHandler; });
/* unused harmony export AnimationPlayer */
/* unused harmony export AnimationStyles */
/* unused harmony export AnimationKeyframe */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "X", function() { return Sanitizer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "U", function() { return SecurityContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "J", function() { return ANALYZE_FOR_ENTRY_COMPONENTS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "r", function() { return Attribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_124", function() { return ContentChild; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "y", function() { return ContentChildren; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_103", function() { return Query; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_125", function() { return ViewChild; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_126", function() { return ViewChildren; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return Component; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return Directive; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "w", function() { return HostBinding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "v", function() { return HostListener; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "u", function() { return Input; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "A", function() { return Output; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_9", function() { return Pipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_111", function() { return CUSTOM_ELEMENTS_SCHEMA; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_110", function() { return NO_ERRORS_SCHEMA; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return NgModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Q", function() { return ViewEncapsulation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return Version; });
/* unused harmony export VERSION */
/* unused harmony export Class */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_10", function() { return forwardRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_102", function() { return resolveForwardRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return Injector; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return ReflectiveInjector; });
/* unused harmony export ResolvedReflectiveFactory */
/* unused harmony export ReflectiveKey */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return InjectionToken; });
/* unused harmony export OpaqueToken */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "I", function() { return Inject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "E", function() { return Optional; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "B", function() { return Injectable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_11", function() { return Self; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "H", function() { return SkipSelf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_7", function() { return Host; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return NgZone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_19", function() { return RenderComponentType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "s", function() { return RendererV1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_1", function() { return RendererFactoryV2; });
/* unused harmony export RendererV2 */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "T", function() { return RootRenderer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_12", function() { return COMPILER_OPTIONS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return Compiler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_139", function() { return CompilerFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_135", function() { return ModuleWithComponentFactories; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_23", function() { return ComponentFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_25", function() { return ComponentRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return ComponentFactoryResolver; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "t", function() { return ElementRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_26", function() { return NgModuleFactory; });
/* unused harmony export NgModuleRef */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "C", function() { return NgModuleFactoryLoader; });
/* unused harmony export getModuleFactory */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_20", function() { return QueryList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F", function() { return SystemJsNgModuleLoader; });
/* unused harmony export SystemJsNgModuleLoaderConfig */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_6", function() { return TemplateRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "z", function() { return ViewContainerRef; });
/* unused harmony export EmbeddedViewRef */
/* unused harmony export ViewRef */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_14", function() { return ChangeDetectionStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "x", function() { return ChangeDetectorRef; });
/* unused harmony export DefaultIterableDiffer */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_4", function() { return IterableDiffers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_5", function() { return KeyValueDiffers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return SimpleChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_8", function() { return WrappedValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Z", function() { return platformCore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_99", function() { return ANY_STATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_122", function() { return DEFAULT_STATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_105", function() { return EMPTY_STATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_100", function() { return FILL_STYLE_FLAG; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_61", function() { return AnimationGroupPlayer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_59", function() { return AnimationKeyframe; });
/* unused harmony export ɵAnimationPlayer */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "L", function() { return NoOpAnimationPlayer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_62", function() { return AnimationSequencePlayer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_64", function() { return balanceAnimationKeyframes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_65", function() { return clearStyles; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_67", function() { return collectAndResolveStyles; });
/* unused harmony export ɵflattenStyles */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_63", function() { return prepareFinalAnimationStyles; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_66", function() { return renderStyles; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_60", function() { return AnimationStyles; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_71", function() { return AnimationTransition; });
/* unused harmony export ɵALLOW_MULTIPLE_PLATFORMS */
/* unused harmony export ɵAPP_ID_RANDOM_PROVIDER */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_29", function() { return ValueUnwrapper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_41", function() { return devModeEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_33", function() { return ChangeDetectorStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_112", function() { return isDefaultChangeDetectionStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_98", function() { return Console; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "S", function() { return DebugDomRootRenderer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_109", function() { return ERROR_COMPONENT_TYPE; });
/* unused harmony export ɵComponentFactory */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_22", function() { return CodegenComponentFactoryResolver; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_32", function() { return DebugContext$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_31", function() { return StaticNodeDebugInfo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_16", function() { return AppView; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_17", function() { return DebugAppView; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_18", function() { return ViewContainer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_30", function() { return ViewType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_107", function() { return LIFECYCLE_HOOKS_VALUES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_106", function() { return LifecycleHooks; });
/* unused harmony export ɵViewMetadata */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_137", function() { return Reflector; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_13", function() { return reflector; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_123", function() { return ReflectionCapabilities; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_104", function() { return ReflectorReader; });
/* unused harmony export ɵRenderDebugInfo */
/* unused harmony export ɵmakeDecorator */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return isObservable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return isPromise; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_24", function() { return ComponentRef_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_27", function() { return NgModuleInjector; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_28", function() { return registerModuleFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_21", function() { return TemplateRef_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_45", function() { return EMPTY_ARRAY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_76", function() { return EMPTY_INLINE_ARRAY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_46", function() { return EMPTY_MAP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_75", function() { return InlineArray16; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_72", function() { return InlineArray2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_73", function() { return InlineArray4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_74", function() { return InlineArray8; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_77", function() { return InlineArrayDynamic; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_15", function() { return ViewUtils; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_44", function() { return castByValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_34", function() { return checkBinding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_35", function() { return checkBindingChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_38", function() { return checkRenderAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_39", function() { return checkRenderClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_37", function() { return checkRenderProperty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_40", function() { return checkRenderStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_36", function() { return checkRenderText; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_79", function() { return createRenderComponentType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_47", function() { return createRenderElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_136", function() { return getComponentFactoryViewClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_42", function() { return inlineInterpolate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_43", function() { return interpolate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_80", function() { return noop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_49", function() { return pureProxy1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_58", function() { return pureProxy10; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_50", function() { return pureProxy2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_51", function() { return pureProxy3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_52", function() { return pureProxy4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_53", function() { return pureProxy5; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_54", function() { return pureProxy6; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_55", function() { return pureProxy7; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_56", function() { return pureProxy8; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_57", function() { return pureProxy9; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_48", function() { return selectOrCreateRenderHostElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_69", function() { return setBindingDebugInfo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_70", function() { return setBindingDebugInfoForChanges; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_78", function() { return subscribeToRenderElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_121", function() { return ArgumentType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_120", function() { return BindingType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_119", function() { return DepFlags; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_114", function() { return NodeFlags; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_118", function() { return ProviderType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_113", function() { return QueryBindingType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_117", function() { return QueryValueType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_115", function() { return ViewFlags; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_83", function() { return anchorDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_96", function() { return createComponentFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_95", function() { return createRendererTypeV2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_85", function() { return directiveDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_82", function() { return elementDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_116", function() { return elementEventFullName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_93", function() { return ngContentDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_92", function() { return nodeValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_91", function() { return pipeDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_86", function() { return providerDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_88", function() { return pureArrayDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_89", function() { return pureObjectDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_90", function() { return purePipeDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_87", function() { return queryDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_84", function() { return textDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_94", function() { return unwrapValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_81", function() { return viewDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "M", function() { return AUTO_STYLE$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_127", function() { return trigger$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_131", function() { return animate$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_134", function() { return group$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_133", function() { return sequence$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_130", function() { return style$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_128", function() { return state$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_132", function() { return keyframes$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_129", function() { return transition$1; });
/* unused harmony export ɵz */
/* unused harmony export ɵbc */
/* unused harmony export ɵbd */
/* unused harmony export ɵbh */
/* unused harmony export ɵbe */
/* unused harmony export ɵbg */
/* unused harmony export ɵbf */
/* unused harmony export ɵbi */
/* unused harmony export ɵbb */
/* unused harmony export ɵp */
/* unused harmony export ɵm */
/* unused harmony export ɵn */
/* unused harmony export ɵo */
/* unused harmony export ɵf */
/* unused harmony export ɵg */
/* unused harmony export ɵh */
/* unused harmony export ɵi */
/* unused harmony export ɵk */
/* unused harmony export ɵl */
/* unused harmony export ɵc */
/* unused harmony export ɵd */
/* unused harmony export ɵe */
/* unused harmony export ɵj */
/* unused harmony export ɵq */
/* unused harmony export ɵs */
/* unused harmony export ɵr */
/* unused harmony export ɵv */
/* unused harmony export ɵt */
/* unused harmony export ɵu */
/* unused harmony export ɵa */
/* unused harmony export ɵb */
/* unused harmony export ɵx */
/* unused harmony export ɵy */
var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i["return"])_i["return"]();}finally{if(_d)throw _e;}}return _arr;}return function(arr,i){if(Array.isArray(arr)){return arr;}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i);}else{throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();var _get=function get(object,property,receiver){if(object===null)object=Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc===undefined){var parent=Object.getPrototypeOf(object);if(parent===null){return undefined;}else{return get(parent,property,receiver);}}else if("value"in desc){return desc.value;}else{var getter=desc.get;if(getter===undefined){return undefined;}return getter.call(receiver);}};var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++){arr2[i]=arr[i];}return arr2;}else{return Array.from(arr);}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}/**
 * @license Angular v4.0.0-rc.1
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 *//**
 * Creates a token that can be used in a DI Provider.
 *
 * ### Example ([live demo](http://plnkr.co/edit/Ys9ezXpj2Mnoy3Uc8KBp?p=preview))
 *
 * ```typescript
 * var t = new OpaqueToken("value");
 *
 * var injector = Injector.resolveAndCreate([
 *   {provide: t, useValue: "bindingValue"}
 * ]);
 *
 * expect(injector.get(t)).toEqual("bindingValue");
 * ```
 *
 * Using an `OpaqueToken` is preferable to using strings as tokens because of possible collisions
 * caused by multiple providers using the same string as two different tokens.
 *
 * Using an `OpaqueToken` is preferable to using an `Object` as tokens because it provides better
 * error messages.
 * @deprecated since v4.0.0 because it does not support type information, use `InjectionToken<?>`
 * instead.
 */var OpaqueToken=function(){/**
     * @param {?} _desc
     */function OpaqueToken(_desc){_classCallCheck(this,OpaqueToken);this._desc=_desc;}/**
     * @return {?}
     */_createClass(OpaqueToken,[{key:'toString',value:function toString(){return'Token '+this._desc;}}]);return OpaqueToken;}();/**
 * Creates a token that can be used in a DI Provider.
 *
 * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a
 * runtime representation) such as when injecting an interface, callable type, array or
 * parametrized type.
 *
 * `InjectionToken` is parametrize on `T` which is the type of object which will be returned by the
 * `Injector`. This provides additional level of type safety.
 *
 * ```
 * interface MyInterface {...}
 * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));
 * // myInterface is inferred to be MyInterface.
 * ```
 *
 * ### Example
 *
 * {\@example core/di/ts/injector_spec.ts region='Injector'}
 *
 * \@stable
 */var InjectionToken=function(_OpaqueToken){_inherits(InjectionToken,_OpaqueToken);/**
     * @param {?} desc
     */function InjectionToken(desc){_classCallCheck(this,InjectionToken);return _possibleConstructorReturn(this,(InjectionToken.__proto__||Object.getPrototypeOf(InjectionToken)).call(this,desc));}/**
     * @return {?}
     */_createClass(InjectionToken,[{key:'toString',value:function toString(){return'InjectionToken '+this._desc;}}]);return InjectionToken;}(OpaqueToken);/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */var/** @type {?} */globalScope=void 0;if(typeof window==='undefined'){if(typeof WorkerGlobalScope!=='undefined'&&self instanceof WorkerGlobalScope){// TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
globalScope=self;}else{globalScope=global;}}else{globalScope=window;}/**
 * @param {?} fn
 * @return {?}
 */function scheduleMicroTask(fn){Zone.current.scheduleMicroTask('scheduleMicrotask',fn);}// Need to declare a new variable for global here since TypeScript
// exports the original value of the symbol.
var/** @type {?} */global$1=globalScope;/**
 * @param {?} type
 * @return {?}
 */function getTypeNameForDebugging(type){return type['name']||(typeof type==='undefined'?'undefined':_typeof(type));}// TODO: remove calls to assert in production environment
// Note: Can't just export this and import in in other files
// as `assert` is a reserved keyword in Dart
global$1.assert=function assert(condition){// TODO: to be fixed properly via #2830, noop for now
};/**
 * @param {?} obj
 * @return {?}
 */function isPresent(obj){return obj!=null;}/**
 * @param {?} obj
 * @return {?}
 */function isBlank(obj){return obj==null;}/**
 * @param {?} token
 * @return {?}
 */function stringify(token){if(typeof token==='string'){return token;}if(token==null){return''+token;}if(token.overriddenName){return''+token.overriddenName;}if(token.name){return''+token.name;}var/** @type {?} */res=token.toString();var/** @type {?} */newLineIndex=res.indexOf('\n');return newLineIndex===-1?res:res.substring(0,newLineIndex);}/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */function looseIdentical(a,b){return a===b||typeof a==='number'&&typeof b==='number'&&isNaN(a)&&isNaN(b);}/**
 * @param {?} o
 * @return {?}
 */function isJsObject(o){return o!==null&&(typeof o==='function'||(typeof o==='undefined'?'undefined':_typeof(o))==='object');}/**
 * @param {?} obj
 * @return {?}
 */function print(obj){// tslint:disable-next-line:no-console
console.log(obj);}/**
 * @param {?} obj
 * @return {?}
 */function _warn(obj){console.warn(obj);}var/** @type {?} */_symbolIterator=null;/**
 * @return {?}
 */function getSymbolIterator(){if(!_symbolIterator){if(globalScope.Symbol&&Symbol.iterator){_symbolIterator=Symbol.iterator;}else{// es6-shim specific logic
var/** @type {?} */keys=Object.getOwnPropertyNames(Map.prototype);for(var/** @type {?} */i=0;i<keys.length;++i){var/** @type {?} */key=keys[i];if(key!=='entries'&&key!=='size'&&Map.prototype[key]===Map.prototype['entries']){_symbolIterator=key;}}}}return _symbolIterator;}/**
 * @param {?} obj
 * @return {?}
 */function isPrimitive(obj){return!isJsObject(obj);}var/** @type {?} */_nextClassId=0;var/** @type {?} */Reflect=global$1.Reflect;/**
 * @param {?} annotation
 * @return {?}
 */function extractAnnotation(annotation){if(typeof annotation==='function'&&annotation.hasOwnProperty('annotation')){// it is a decorator, extract annotation
annotation=annotation.annotation;}return annotation;}/**
 * @param {?} fnOrArray
 * @param {?} key
 * @return {?}
 */function applyParams(fnOrArray,key){if(fnOrArray===Object||fnOrArray===String||fnOrArray===Function||fnOrArray===Number||fnOrArray===Array){throw new Error('Can not use native '+stringify(fnOrArray)+' as constructor');}if(typeof fnOrArray==='function'){return fnOrArray;}if(Array.isArray(fnOrArray)){var/** @type {?} */annotations=fnOrArray;var/** @type {?} */annoLength=annotations.length-1;var/** @type {?} */fn=fnOrArray[annoLength];if(typeof fn!=='function'){throw new Error('Last position of Class method array must be Function in key '+key+' was \''+stringify(fn)+'\'');}if(annoLength!=fn.length){throw new Error('Number of annotations ('+annoLength+') does not match number of arguments ('+fn.length+') in the function: '+stringify(fn));}var/** @type {?} */paramsAnnotations=[];for(var/** @type {?} */i=0,/** @type {?} */ii=annotations.length-1;i<ii;i++){var/** @type {?} */paramAnnotations=[];paramsAnnotations.push(paramAnnotations);var/** @type {?} */annotation=annotations[i];if(Array.isArray(annotation)){for(var/** @type {?} */j=0;j<annotation.length;j++){paramAnnotations.push(extractAnnotation(annotation[j]));}}else if(typeof annotation==='function'){paramAnnotations.push(extractAnnotation(annotation));}else{paramAnnotations.push(annotation);}}Reflect.defineMetadata('parameters',paramsAnnotations,fn);return fn;}throw new Error('Only Function or Array is supported in Class definition for key \''+key+'\' is \''+stringify(fnOrArray)+'\'');}/**
 * Provides a way for expressing ES6 classes with parameter annotations in ES5.
 *
 * ## Basic Example
 *
 * ```
 * var Greeter = ng.Class({
 *   constructor: function(name) {
 *     this.name = name;
 *   },
 *
 *   greet: function() {
 *     alert('Hello ' + this.name + '!');
 *   }
 * });
 * ```
 *
 * is equivalent to ES6:
 *
 * ```
 * class Greeter {
 *   constructor(name) {
 *     this.name = name;
 *   }
 *
 *   greet() {
 *     alert('Hello ' + this.name + '!');
 *   }
 * }
 * ```
 *
 * or equivalent to ES5:
 *
 * ```
 * var Greeter = function (name) {
 *   this.name = name;
 * }
 *
 * Greeter.prototype.greet = function () {
 *   alert('Hello ' + this.name + '!');
 * }
 * ```
 *
 * ### Example with parameter annotations
 *
 * ```
 * var MyService = ng.Class({
 *   constructor: [String, [new Optional(), Service], function(name, myService) {
 *     ...
 *   }]
 * });
 * ```
 *
 * is equivalent to ES6:
 *
 * ```
 * class MyService {
 *   constructor(name: string, \@Optional() myService: Service) {
 *     ...
 *   }
 * }
 * ```
 *
 * ### Example with inheritance
 *
 * ```
 * var Shape = ng.Class({
 *   constructor: (color) {
 *     this.color = color;
 *   }
 * });
 *
 * var Square = ng.Class({
 *   extends: Shape,
 *   constructor: function(color, size) {
 *     Shape.call(this, color);
 *     this.size = size;
 *   }
 * });
 * ```
 * @suppress {globalThis}
 * \@stable
 * @param {?} clsDef
 * @return {?}
 */function Class(clsDef){var/** @type {?} */constructor=applyParams(clsDef.hasOwnProperty('constructor')?clsDef.constructor:undefined,'constructor');var/** @type {?} */proto=constructor.prototype;if(clsDef.hasOwnProperty('extends')){if(typeof clsDef.extends==='function'){constructor.prototype=proto=Object.create(clsDef.extends.prototype);}else{throw new Error('Class definition \'extends\' property must be a constructor function was: '+stringify(clsDef.extends));}}for(var/** @type {?} */key in clsDef){if(key!=='extends'&&key!=='prototype'&&clsDef.hasOwnProperty(key)){proto[key]=applyParams(clsDef[key],key);}}if(this&&this.annotations instanceof Array){Reflect.defineMetadata('annotations',this.annotations,constructor);}var/** @type {?} */constructorName=constructor['name'];if(!constructorName||constructorName==='constructor'){constructor['overriddenName']='class'+_nextClassId++;}return constructor;}/**
 * @suppress {globalThis}
 * @param {?} name
 * @param {?} props
 * @param {?=} parentClass
 * @param {?=} chainFn
 * @return {?}
 */function makeDecorator(name,props,parentClass){var chainFn=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var/** @type {?} */metaCtor=makeMetadataCtor([props]);/**
     * @param {?} objOrType
     * @return {?}
     */function DecoratorFactory(objOrType){if(!(Reflect&&Reflect.getOwnMetadata)){throw'reflect-metadata shim is required when using class decorators';}if(this instanceof DecoratorFactory){metaCtor.call(this,objOrType);return this;}var/** @type {?} */annotationInstance=new DecoratorFactory(objOrType);var/** @type {?} */chainAnnotation=typeof this==='function'&&Array.isArray(this.annotations)?this.annotations:[];chainAnnotation.push(annotationInstance);var/** @type {?} */TypeDecorator=function TypeDecorator(cls){var/** @type {?} */annotations=Reflect.getOwnMetadata('annotations',cls)||[];annotations.push(annotationInstance);Reflect.defineMetadata('annotations',annotations,cls);return cls;};TypeDecorator.annotations=chainAnnotation;TypeDecorator.Class=Class;if(chainFn)chainFn(TypeDecorator);return TypeDecorator;}if(parentClass){DecoratorFactory.prototype=Object.create(parentClass.prototype);}DecoratorFactory.prototype.toString=function(){return'@'+name;};DecoratorFactory.annotationCls=DecoratorFactory;return DecoratorFactory;}/**
 * @param {?} props
 * @return {?}
 */function makeMetadataCtor(props){return function ctor(){var _this2=this;for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}props.forEach(function(prop,i){var/** @type {?} */argVal=args[i];if(Array.isArray(prop)){// plain parameter
_this2[prop[0]]=argVal===undefined?prop[1]:argVal;}else{for(var/** @type {?} */propName in prop){_this2[propName]=argVal&&argVal.hasOwnProperty(propName)?argVal[propName]:prop[propName];}}});};}/**
 * @param {?} name
 * @param {?} props
 * @param {?=} parentClass
 * @return {?}
 */function makeParamDecorator(name,props,parentClass){var/** @type {?} */metaCtor=makeMetadataCtor(props);/**
     * @param {...?} args
     * @return {?}
     */function ParamDecoratorFactory(){for(var _len2=arguments.length,args=Array(_len2),_key2=0;_key2<_len2;_key2++){args[_key2]=arguments[_key2];}if(this instanceof ParamDecoratorFactory){metaCtor.apply(this,args);return this;}var/** @type {?} */annotationInstance=new(Function.prototype.bind.apply(ParamDecoratorFactory,[null].concat(args)))();ParamDecorator.annotation=annotationInstance;return ParamDecorator;/**
         * @param {?} cls
         * @param {?} unusedKey
         * @param {?} index
         * @return {?}
         */function ParamDecorator(cls,unusedKey,index){var/** @type {?} */parameters=Reflect.getOwnMetadata('parameters',cls)||[];// there might be gaps if some in between parameters do not have annotations.
// we pad with nulls.
while(parameters.length<=index){parameters.push(null);}parameters[index]=parameters[index]||[];parameters[index].push(annotationInstance);Reflect.defineMetadata('parameters',parameters,cls);return cls;}}if(parentClass){ParamDecoratorFactory.prototype=Object.create(parentClass.prototype);}ParamDecoratorFactory.prototype.toString=function(){return'@'+name;};ParamDecoratorFactory.annotationCls=ParamDecoratorFactory;return ParamDecoratorFactory;}/**
 * @param {?} name
 * @param {?} props
 * @param {?=} parentClass
 * @return {?}
 */function makePropDecorator(name,props,parentClass){var/** @type {?} */metaCtor=makeMetadataCtor(props);/**
     * @param {...?} args
     * @return {?}
     */function PropDecoratorFactory(){for(var _len3=arguments.length,args=Array(_len3),_key3=0;_key3<_len3;_key3++){args[_key3]=arguments[_key3];}if(this instanceof PropDecoratorFactory){metaCtor.apply(this,args);return this;}var/** @type {?} */decoratorInstance=new(Function.prototype.bind.apply(PropDecoratorFactory,[null].concat(args)))();return function PropDecorator(target,name){var/** @type {?} */meta=Reflect.getOwnMetadata('propMetadata',target.constructor)||{};meta[name]=meta.hasOwnProperty(name)&&meta[name]||[];meta[name].unshift(decoratorInstance);Reflect.defineMetadata('propMetadata',meta,target.constructor);};}if(parentClass){PropDecoratorFactory.prototype=Object.create(parentClass.prototype);}PropDecoratorFactory.prototype.toString=function(){return'@'+name;};PropDecoratorFactory.annotationCls=PropDecoratorFactory;return PropDecoratorFactory;}/**
 * This token can be used to create a virtual provider that will populate the
 * `entryComponents` fields of components and ng modules based on its `useValue`.
 * All components that are referenced in the `useValue` value (either directly
 * or in a nested array or map) will be added to the `entryComponents` property.
 *
 * ### Example
 * The following example shows how the router can populate the `entryComponents`
 * field of an NgModule based on the router configuration which refers
 * to components.
 *
 * ```typescript
 * // helper function inside the router
 * function provideRoutes(routes) {
 *   return [
 *     {provide: ROUTES, useValue: routes},
 *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}
 *   ];
 * }
 *
 * // user code
 * let routes = [
 *   {path: '/root', component: RootComp},
 *   {path: '/teams', component: TeamsComp}
 * ];
 *
 * @NgModule({
 *   providers: [provideRoutes(routes)]
 * })
 * class ModuleWithRoutes {}
 * ```
 *
 * @experimental
 */var/** @type {?} */ANALYZE_FOR_ENTRY_COMPONENTS=new InjectionToken('AnalyzeForEntryComponents');/**
 * Attribute decorator and metadata.
 *
 * @stable
 * @Annotation
 */var/** @type {?} */Attribute=makeParamDecorator('Attribute',[['attributeName',undefined]]);/**
 * Base class for query metadata.
 *
 * See {\@link ContentChildren}, {\@link ContentChild}, {\@link ViewChildren}, {\@link ViewChild} for
 * more information.
 *
 * \@stable
 * @abstract
 */var Query=function Query(){_classCallCheck(this,Query);};/**
 * ContentChildren decorator and metadata.
 *
 *  @stable
 *  @Annotation
 */var/** @type {?} */ContentChildren=makePropDecorator('ContentChildren',[['selector',undefined],{first:false,isViewQuery:false,descendants:false,read:undefined}],Query);/**
 * ContentChild decorator and metadata.
 *
 * @stable
 * @Annotation
 */var/** @type {?} */ContentChild=makePropDecorator('ContentChild',[['selector',undefined],{first:true,isViewQuery:false,descendants:true,read:undefined}],Query);/**
 * ViewChildren decorator and metadata.
 *
 * @stable
 * @Annotation
 */var/** @type {?} */ViewChildren=makePropDecorator('ViewChildren',[['selector',undefined],{first:false,isViewQuery:true,descendants:true,read:undefined}],Query);/**
 * ViewChild decorator and metadata.
 *
 * @stable
 * @Annotation
 */var/** @type {?} */ViewChild=makePropDecorator('ViewChild',[['selector',undefined],{first:true,isViewQuery:true,descendants:true,read:undefined}],Query);var ChangeDetectionStrategy={};ChangeDetectionStrategy.OnPush=0;ChangeDetectionStrategy.Default=1;ChangeDetectionStrategy[ChangeDetectionStrategy.OnPush]="OnPush";ChangeDetectionStrategy[ChangeDetectionStrategy.Default]="Default";var ChangeDetectorStatus={};ChangeDetectorStatus.CheckOnce=0;ChangeDetectorStatus.Checked=1;ChangeDetectorStatus.CheckAlways=2;ChangeDetectorStatus.Detached=3;ChangeDetectorStatus.Errored=4;ChangeDetectorStatus.Destroyed=5;ChangeDetectorStatus[ChangeDetectorStatus.CheckOnce]="CheckOnce";ChangeDetectorStatus[ChangeDetectorStatus.Checked]="Checked";ChangeDetectorStatus[ChangeDetectorStatus.CheckAlways]="CheckAlways";ChangeDetectorStatus[ChangeDetectorStatus.Detached]="Detached";ChangeDetectorStatus[ChangeDetectorStatus.Errored]="Errored";ChangeDetectorStatus[ChangeDetectorStatus.Destroyed]="Destroyed";/**
 * @param {?} changeDetectionStrategy
 * @return {?}
 */function isDefaultChangeDetectionStrategy(changeDetectionStrategy){return isBlank(changeDetectionStrategy)||changeDetectionStrategy===ChangeDetectionStrategy.Default;}/**
 * Directive decorator and metadata.
 *
 * @stable
 * @Annotation
 */var/** @type {?} */Directive=makeDecorator('Directive',{selector:undefined,inputs:undefined,outputs:undefined,host:undefined,providers:undefined,exportAs:undefined,queries:undefined});/**
 * Component decorator and metadata.
 *
 * @stable
 * @Annotation
 */var/** @type {?} */Component=makeDecorator('Component',{selector:undefined,inputs:undefined,outputs:undefined,host:undefined,exportAs:undefined,moduleId:undefined,providers:undefined,viewProviders:undefined,changeDetection:ChangeDetectionStrategy.Default,queries:undefined,templateUrl:undefined,template:undefined,styleUrls:undefined,styles:undefined,animations:undefined,encapsulation:undefined,interpolation:undefined,entryComponents:undefined},Directive);/**
 * Pipe decorator and metadata.
 *
 * @stable
 * @Annotation
 */var/** @type {?} */Pipe=makeDecorator('Pipe',{name:undefined,pure:true});/**
 * Input decorator and metadata.
 *
 * @stable
 * @Annotation
 */var/** @type {?} */Input=makePropDecorator('Input',[['bindingPropertyName',undefined]]);/**
 * Output decorator and metadata.
 *
 * @stable
 * @Annotation
 */var/** @type {?} */Output=makePropDecorator('Output',[['bindingPropertyName',undefined]]);/**
 * HostBinding decorator and metadata.
 *
 * @stable
 * @Annotation
 */var/** @type {?} */HostBinding=makePropDecorator('HostBinding',[['hostPropertyName',undefined]]);/**
 * HostListener decorator and metadata.
 *
 * @stable
 * @Annotation
 */var/** @type {?} */HostListener=makePropDecorator('HostListener',[['eventName',undefined],['args',[]]]);/**
 * Defines a schema that will allow:
 * - any non-Angular elements with a `-` in their name,
 * - any properties on elements with a `-` in their name which is the common rule for custom
 * elements.
 *
 * @stable
 */var/** @type {?} */CUSTOM_ELEMENTS_SCHEMA={name:'custom-elements'};/**
 * Defines a schema that will allow any property on any element.
 *
 * @experimental
 */var/** @type {?} */NO_ERRORS_SCHEMA={name:'no-errors-schema'};/**
 * NgModule decorator and metadata.
 *
 * @stable
 * @Annotation
 */var/** @type {?} */NgModule=makeDecorator('NgModule',{providers:undefined,declarations:undefined,imports:undefined,exports:undefined,entryComponents:undefined,bootstrap:undefined,schemas:undefined,id:undefined});/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */var ViewEncapsulation={};ViewEncapsulation.Emulated=0;ViewEncapsulation.Native=1;ViewEncapsulation.None=2;ViewEncapsulation[ViewEncapsulation.Emulated]="Emulated";ViewEncapsulation[ViewEncapsulation.Native]="Native";ViewEncapsulation[ViewEncapsulation.None]="None";/**
 * Metadata properties available for configuring Views.
 *
 * For details on the `\@Component` annotation, see {\@link Component}.
 *
 * ### Example
 *
 * ```
 * \@Component({
 *   selector: 'greet',
 *   template: 'Hello {{name}}!',
 * })
 * class Greet {
 *   name: string;
 *
 *   constructor() {
 *     this.name = 'World';
 *   }
 * }
 * ```
 *
 * @deprecated Use Component instead.
 *
 * {\@link Component}
 */var ViewMetadata=/**
     * @param {?=} __0
     */function ViewMetadata(){var _ref=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},templateUrl=_ref.templateUrl,template=_ref.template,encapsulation=_ref.encapsulation,styles=_ref.styles,styleUrls=_ref.styleUrls,animations=_ref.animations,interpolation=_ref.interpolation;_classCallCheck(this,ViewMetadata);this.templateUrl=templateUrl;this.template=template;this.styleUrls=styleUrls;this.styles=styles;this.encapsulation=encapsulation;this.animations=animations;this.interpolation=interpolation;};/**
 * \@whatItDoes Represents the version of Angular
 *
 * \@stable
 */var Version=function(){/**
     * @param {?} full
     */function Version(full){_classCallCheck(this,Version);this.full=full;}/**
     * @return {?}
     */_createClass(Version,[{key:'major',get:function get(){return this.full.split('.')[0];}/**
     * @return {?}
     */},{key:'minor',get:function get(){return this.full.split('.')[1];}/**
     * @return {?}
     */},{key:'patch',get:function get(){return this.full.split('.').slice(2).join('.');}}]);return Version;}();/**
 * @stable
 */var/** @type {?} */VERSION=new Version('4.0.0-rc.1');/**
 * Inject decorator and metadata.
 *
 * @stable
 * @Annotation
 */var/** @type {?} */Inject=makeParamDecorator('Inject',[['token',undefined]]);/**
 * Optional decorator and metadata.
 *
 * @stable
 * @Annotation
 */var/** @type {?} */Optional=makeParamDecorator('Optional',[]);/**
 * Injectable decorator and metadata.
 *
 * @stable
 * @Annotation
 */var/** @type {?} */Injectable=makeDecorator('Injectable',[]);/**
 * Self decorator and metadata.
 *
 * @stable
 * @Annotation
 */var/** @type {?} */Self=makeParamDecorator('Self',[]);/**
 * SkipSelf decorator and metadata.
 *
 * @stable
 * @Annotation
 */var/** @type {?} */SkipSelf=makeParamDecorator('SkipSelf',[]);/**
 * Host decorator and metadata.
 *
 * @stable
 * @Annotation
 */var/** @type {?} */Host=makeParamDecorator('Host',[]);/**
 * Allows to refer to references which are not yet defined.
 *
 * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of
 * DI is declared,
 * but not yet defined. It is also used when the `token` which we use when creating a query is not
 * yet defined.
 *
 * ### Example
 * {\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}
 * \@experimental
 * @param {?} forwardRefFn
 * @return {?}
 */function forwardRef(forwardRefFn){forwardRefFn.__forward_ref__=forwardRef;forwardRefFn.toString=function(){return stringify(this());};return forwardRefFn;}/**
 * Lazily retrieves the reference value from a forwardRef.
 *
 * Acts as the identity function when given a non-forward-ref value.
 *
 * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))
 *
 * {\@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}
 *
 * See: {\@link forwardRef}
 * \@experimental
 * @param {?} type
 * @return {?}
 */function resolveForwardRef(type){if(typeof type==='function'&&type.hasOwnProperty('__forward_ref__')&&type.__forward_ref__===forwardRef){return type();}else{return type;}}var/** @type {?} */_THROW_IF_NOT_FOUND=new Object();var/** @type {?} */THROW_IF_NOT_FOUND=_THROW_IF_NOT_FOUND;var _NullInjector=function(){function _NullInjector(){_classCallCheck(this,_NullInjector);}_createClass(_NullInjector,[{key:'get',/**
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */value:function get(token){var notFoundValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:_THROW_IF_NOT_FOUND;if(notFoundValue===_THROW_IF_NOT_FOUND){throw new Error('No provider for '+stringify(token)+'!');}return notFoundValue;}}]);return _NullInjector;}();/**
 * \@whatItDoes Injector interface
 * \@howToUse
 * ```
 * const injector: Injector = ...;
 * injector.get(...);
 * ```
 *
 * \@description
 * For more details, see the {\@linkDocs guide/dependency-injection "Dependency Injection Guide"}.
 *
 * ### Example
 *
 * {\@example core/di/ts/injector_spec.ts region='Injector'}
 *
 * `Injector` returns itself when given `Injector` as a token:
 * {\@example core/di/ts/injector_spec.ts region='injectInjector'}
 *
 * \@stable
 * @abstract
 */var Injector=function(){function Injector(){_classCallCheck(this,Injector);}_createClass(Injector,[{key:'get',/**
     * Retrieves an instance from the injector based on the provided token.
     * If not found:
     * - Throws {\@link NoProviderError} if no `notFoundValue` that is not equal to
     * Injector.THROW_IF_NOT_FOUND is given
     * - Returns the `notFoundValue` otherwise
     * @abstract
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */value:function get(token,notFoundValue){}/**
     * @deprecated from v4.0.0 use Type<T> or InjectToken<T>
     * @suppress {duplicate}
     * @abstract
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */},{key:'get',value:function get(token,notFoundValue){}}]);return Injector;}();Injector.THROW_IF_NOT_FOUND=_THROW_IF_NOT_FOUND;Injector.NULL=new _NullInjector();/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */var/** @type {?} */ERROR_TYPE='ngType';var/** @type {?} */ERROR_COMPONENT_TYPE='ngComponentType';var/** @type {?} */ERROR_DEBUG_CONTEXT='ngDebugContext';var/** @type {?} */ERROR_ORIGINAL_ERROR='ngOriginalError';/**
 * @param {?} error
 * @return {?}
 */function getType(error){return error[ERROR_TYPE];}/**
 * @param {?} error
 * @return {?}
 */function getDebugContext(error){return error[ERROR_DEBUG_CONTEXT];}/**
 * @param {?} error
 * @return {?}
 */function getOriginalError(error){return error[ERROR_ORIGINAL_ERROR];}/**
 * \@whatItDoes Provides a hook for centralized exception handling.
 *
 * \@description
 *
 * The default implementation of `ErrorHandler` prints error messages to the `console`. To
 * intercept error handling, write a custom exception handler that replaces this default as
 * appropriate for your app.
 *
 * ### Example
 *
 * ```
 * class MyErrorHandler implements ErrorHandler {
 *   handleError(error) {
 *     // do something with the exception
 *   }
 * }
 *
 * \@NgModule({
 *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]
 * })
 * class MyModule {}
 * ```
 *
 * \@stable
 */var ErrorHandler=function(){/**
     * @param {?=} rethrowError
     */function ErrorHandler(){var rethrowError=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;_classCallCheck(this,ErrorHandler);/**
         * @internal
         */this._console=console;this.rethrowError=rethrowError;}/**
     * @param {?} error
     * @return {?}
     */_createClass(ErrorHandler,[{key:'handleError',value:function handleError(error){this._console.error('EXCEPTION: '+this._extractMessage(error));if(error instanceof Error){var/** @type {?} */originalError=this._findOriginalError(error);var/** @type {?} */originalStack=this._findOriginalStack(error);var/** @type {?} */context=this._findContext(error);if(originalError){this._console.error('ORIGINAL EXCEPTION: '+this._extractMessage(originalError));}if(originalStack){this._console.error('ORIGINAL STACKTRACE:');this._console.error(originalStack);}if(context){this._console.error('ERROR CONTEXT:');this._console.error(context);}}// We rethrow exceptions, so operations like 'bootstrap' will result in an error
// when an error happens. If we do not rethrow, bootstrap will always succeed.
if(this.rethrowError)throw error;}/**
     * \@internal
     * @param {?} error
     * @return {?}
     */},{key:'_extractMessage',value:function _extractMessage(error){return error instanceof Error?error.message:error.toString();}/**
     * \@internal
     * @param {?} error
     * @return {?}
     */},{key:'_findContext',value:function _findContext(error){if(error){return getDebugContext(error)?getDebugContext(error):this._findContext(getOriginalError(error));}return null;}/**
     * \@internal
     * @param {?} error
     * @return {?}
     */},{key:'_findOriginalError',value:function _findOriginalError(error){var/** @type {?} */e=getOriginalError(error);while(e&&getOriginalError(e)){e=getOriginalError(e);}return e;}/**
     * \@internal
     * @param {?} error
     * @return {?}
     */},{key:'_findOriginalStack',value:function _findOriginalStack(error){var/** @type {?} */e=error;var/** @type {?} */stack=e.stack;while(e instanceof Error&&getOriginalError(e)){e=getOriginalError(e);if(e instanceof Error&&e.stack){stack=e.stack;}}return stack;}}]);return ErrorHandler;}();/**
 * @param {?} message
 * @param {?} originalError
 * @return {?}
 */function wrappedError(message,originalError){var/** @type {?} */msg=message+' caused by: '+(originalError instanceof Error?originalError.message:originalError);var/** @type {?} */error=Error(msg);error[ERROR_ORIGINAL_ERROR]=originalError;return error;}/**
 * @param {?} keys
 * @return {?}
 */function findFirstClosedCycle(keys){var/** @type {?} */res=[];for(var/** @type {?} */i=0;i<keys.length;++i){if(res.indexOf(keys[i])>-1){res.push(keys[i]);return res;}res.push(keys[i]);}return res;}/**
 * @param {?} keys
 * @return {?}
 */function constructResolvingPath(keys){if(keys.length>1){var/** @type {?} */reversed=findFirstClosedCycle(keys.slice().reverse());var/** @type {?} */tokenStrs=reversed.map(function(k){return stringify(k.token);});return' ('+tokenStrs.join(' -> ')+')';}return'';}/**
 * @param {?} injector
 * @param {?} key
 * @param {?} constructResolvingMessage
 * @param {?=} originalError
 * @return {?}
 */function injectionError(injector,key,constructResolvingMessage,originalError){var/** @type {?} */error=originalError?wrappedError('',originalError):Error();error.addKey=addKey;error.keys=[key];error.injectors=[injector];error.constructResolvingMessage=constructResolvingMessage;error.message=error.constructResolvingMessage();error[ERROR_ORIGINAL_ERROR]=originalError;return error;}/**
 * @this {?}
 * @param {?} injector
 * @param {?} key
 * @return {?}
 */function addKey(injector,key){this.injectors.push(injector);this.keys.push(key);this.message=this.constructResolvingMessage();}/**
 * Thrown when trying to retrieve a dependency by key from {\@link Injector}, but the
 * {\@link Injector} does not have a {\@link Provider} for the given key.
 *
 * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))
 *
 * ```typescript
 * class A {
 *   constructor(b:B) {}
 * }
 *
 * expect(() => Injector.resolveAndCreate([A])).toThrowError();
 * ```
 * @param {?} injector
 * @param {?} key
 * @return {?}
 */function noProviderError(injector,key){return injectionError(injector,key,function(){var/** @type {?} */first=stringify(this.keys[0].token);return'No provider for '+first+'!'+constructResolvingPath(this.keys);});}/**
 * Thrown when dependencies form a cycle.
 *
 * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))
 *
 * ```typescript
 * var injector = Injector.resolveAndCreate([
 *   {provide: "one", useFactory: (two) => "two", deps: [[new Inject("two")]]},
 *   {provide: "two", useFactory: (one) => "one", deps: [[new Inject("one")]]}
 * ]);
 *
 * expect(() => injector.get("one")).toThrowError();
 * ```
 *
 * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.
 * @param {?} injector
 * @param {?} key
 * @return {?}
 */function cyclicDependencyError(injector,key){return injectionError(injector,key,function(){return'Cannot instantiate cyclic dependency!'+constructResolvingPath(this.keys);});}/**
 * Thrown when a constructing type returns with an Error.
 *
 * The `InstantiationError` class contains the original error plus the dependency graph which caused
 * this object to be instantiated.
 *
 * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))
 *
 * ```typescript
 * class A {
 *   constructor() {
 *     throw new Error('message');
 *   }
 * }
 *
 * var injector = Injector.resolveAndCreate([A]);
 * try {
 *   injector.get(A);
 * } catch (e) {
 *   expect(e instanceof InstantiationError).toBe(true);
 *   expect(e.originalException.message).toEqual("message");
 *   expect(e.originalStack).toBeDefined();
 * }
 * ```
 * @param {?} injector
 * @param {?} originalException
 * @param {?} originalStack
 * @param {?} key
 * @return {?}
 */function instantiationError(injector,originalException,originalStack,key){return injectionError(injector,key,function(){var/** @type {?} */first=stringify(this.keys[0].token);return getOriginalError(this).message+': Error during instantiation of '+first+'!'+constructResolvingPath(this.keys)+'.';},originalException);}/**
 * Thrown when an object other then {\@link Provider} (or `Type`) is passed to {\@link Injector}
 * creation.
 *
 * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))
 *
 * ```typescript
 * expect(() => Injector.resolveAndCreate(["not a type"])).toThrowError();
 * ```
 * @param {?} provider
 * @return {?}
 */function invalidProviderError(provider){return Error('Invalid provider - only instances of Provider and Type are allowed, got: '+provider);}/**
 * Thrown when the class has no annotation information.
 *
 * Lack of annotation information prevents the {\@link Injector} from determining which dependencies
 * need to be injected into the constructor.
 *
 * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))
 *
 * ```typescript
 * class A {
 *   constructor(b) {}
 * }
 *
 * expect(() => Injector.resolveAndCreate([A])).toThrowError();
 * ```
 *
 * This error is also thrown when the class not marked with {\@link Injectable} has parameter types.
 *
 * ```typescript
 * class B {}
 *
 * class A {
 *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.
 * }
 *
 * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();
 * ```
 * \@stable
 * @param {?} typeOrFunc
 * @param {?} params
 * @return {?}
 */function noAnnotationError(typeOrFunc,params){var/** @type {?} */signature=[];for(var/** @type {?} */i=0,/** @type {?} */ii=params.length;i<ii;i++){var/** @type {?} */parameter=params[i];if(!parameter||parameter.length==0){signature.push('?');}else{signature.push(parameter.map(stringify).join(' '));}}return Error('Cannot resolve all parameters for \''+stringify(typeOrFunc)+'\'('+signature.join(', ')+'). '+'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \''+stringify(typeOrFunc)+'\' is decorated with Injectable.');}/**
 * Thrown when getting an object by index.
 *
 * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))
 *
 * ```typescript
 * class A {}
 *
 * var injector = Injector.resolveAndCreate([A]);
 *
 * expect(() => injector.getAt(100)).toThrowError();
 * ```
 * \@stable
 * @param {?} index
 * @return {?}
 */function outOfBoundsError(index){return Error('Index '+index+' is out-of-bounds.');}/**
 * Thrown when a multi provider and a regular provider are bound to the same token.
 *
 * ### Example
 *
 * ```typescript
 * expect(() => Injector.resolveAndCreate([
 *   { provide: "Strings", useValue: "string1", multi: true},
 *   { provide: "Strings", useValue: "string2", multi: false}
 * ])).toThrowError();
 * ```
 * @param {?} provider1
 * @param {?} provider2
 * @return {?}
 */function mixingMultiProvidersWithRegularProvidersError(provider1,provider2){return Error('Cannot mix multi providers and regular providers, got: '+provider1+' '+provider2);}/**
 * A unique object used for retrieving items from the {\@link ReflectiveInjector}.
 *
 * Keys have:
 * - a system-wide unique `id`.
 * - a `token`.
 *
 * `Key` is used internally by {\@link ReflectiveInjector} because its system-wide unique `id` allows
 * the
 * injector to store created objects in a more efficient way.
 *
 * `Key` should not be created directly. {\@link ReflectiveInjector} creates keys automatically when
 * resolving
 * providers.
 * \@experimental
 */var ReflectiveKey=function(){/**
     * Private
     * @param {?} token
     * @param {?} id
     */function ReflectiveKey(token,id){_classCallCheck(this,ReflectiveKey);this.token=token;this.id=id;if(!token){throw new Error('Token must be defined!');}}/**
     * Returns a stringified token.
     * @return {?}
     */_createClass(ReflectiveKey,[{key:'displayName',get:function get(){return stringify(this.token);}/**
     * Retrieves a `Key` for a token.
     * @param {?} token
     * @return {?}
     */}],[{key:'get',value:function get(token){return _globalKeyRegistry.get(resolveForwardRef(token));}/**
     * @return {?} the number of keys registered in the system.
     */},{key:'numberOfKeys',get:function get(){return _globalKeyRegistry.numberOfKeys;}}]);return ReflectiveKey;}();/**
 * \@internal
 */var KeyRegistry=function(){function KeyRegistry(){_classCallCheck(this,KeyRegistry);this._allKeys=new Map();}/**
     * @param {?} token
     * @return {?}
     */_createClass(KeyRegistry,[{key:'get',value:function get(token){if(token instanceof ReflectiveKey)return token;if(this._allKeys.has(token)){return this._allKeys.get(token);}var/** @type {?} */newKey=new ReflectiveKey(token,ReflectiveKey.numberOfKeys);this._allKeys.set(token,newKey);return newKey;}/**
     * @return {?}
     */},{key:'numberOfKeys',get:function get(){return this._allKeys.size;}}]);return KeyRegistry;}();var/** @type {?} */_globalKeyRegistry=new KeyRegistry();/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 *//**
 * @whatItDoes Represents a type that a Component or other object is instances of.
 *
 * @description
 *
 * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by
 * the `MyCustomComponent` constructor function.
 *
 * @stable
 *//**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */var/** @type {?} */Type=Function;/**
 * @param {?} v
 * @return {?}
 */function isType(v){return typeof v==='function';}/**
 * Attention: This regex has to hold even if the code is minified!
 */var/** @type {?} */DELEGATE_CTOR=/^function\s+\S+\(\)\s*{\s*("use strict";)?\s*(return\s+)?(\S+\s+!==\s+null\s+&&\s+)?\S+\.apply\(this,\s*arguments\)/;var ReflectionCapabilities=function(){/**
     * @param {?=} reflect
     */function ReflectionCapabilities(reflect){_classCallCheck(this,ReflectionCapabilities);this._reflect=reflect||global$1.Reflect;}/**
     * @return {?}
     */_createClass(ReflectionCapabilities,[{key:'isReflectionEnabled',value:function isReflectionEnabled(){return true;}/**
     * @param {?} t
     * @return {?}
     */},{key:'factory',value:function factory(t){return function(){for(var _len4=arguments.length,args=Array(_len4),_key4=0;_key4<_len4;_key4++){args[_key4]=arguments[_key4];}return new(Function.prototype.bind.apply(t,[null].concat(args)))();};}/**
     * \@internal
     * @param {?} paramTypes
     * @param {?} paramAnnotations
     * @return {?}
     */},{key:'_zipTypesAndAnnotations',value:function _zipTypesAndAnnotations(paramTypes,paramAnnotations){var/** @type {?} */result=void 0;if(typeof paramTypes==='undefined'){result=new Array(paramAnnotations.length);}else{result=new Array(paramTypes.length);}for(var/** @type {?} */i=0;i<result.length;i++){// TS outputs Object for parameters without types, while Traceur omits
// the annotations. For now we preserve the Traceur behavior to aid
// migration, but this can be revisited.
if(typeof paramTypes==='undefined'){result[i]=[];}else if(paramTypes[i]!=Object){result[i]=[paramTypes[i]];}else{result[i]=[];}if(paramAnnotations&&isPresent(paramAnnotations[i])){result[i]=result[i].concat(paramAnnotations[i]);}}return result;}/**
     * @param {?} type
     * @param {?} parentCtor
     * @return {?}
     */},{key:'_ownParameters',value:function _ownParameters(type,parentCtor){// If we have no decorators, we only have function.length as metadata.
// In that case, to detect whether a child class declared an own constructor or not,
// we need to look inside of that constructor to check whether it is
// just calling the parent.
// This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439
// that sets 'design:paramtypes' to []
// if a class inherits from another class but has no ctor declared itself.
if(DELEGATE_CTOR.exec(type.toString())){return null;}// Prefer the direct API.
if(type.parameters&&type.parameters!==parentCtor.parameters){return type.parameters;}// API of tsickle for lowering decorators to properties on the class.
var/** @type {?} */tsickleCtorParams=type.ctorParameters;if(tsickleCtorParams&&tsickleCtorParams!==parentCtor.ctorParameters){// Newer tsickle uses a function closure
// Retain the non-function case for compatibility with older tsickle
var/** @type {?} */ctorParameters=typeof tsickleCtorParams==='function'?tsickleCtorParams():tsickleCtorParams;var/** @type {?} */paramTypes=ctorParameters.map(function(ctorParam){return ctorParam&&ctorParam.type;});var/** @type {?} */paramAnnotations=ctorParameters.map(function(ctorParam){return ctorParam&&convertTsickleDecoratorIntoMetadata(ctorParam.decorators);});return this._zipTypesAndAnnotations(paramTypes,paramAnnotations);}// API for metadata created by invoking the decorators.
if(isPresent(this._reflect)&&isPresent(this._reflect.getOwnMetadata)){var/** @type {?} */_paramAnnotations=this._reflect.getOwnMetadata('parameters',type);var/** @type {?} */_paramTypes=this._reflect.getOwnMetadata('design:paramtypes',type);if(_paramTypes||_paramAnnotations){return this._zipTypesAndAnnotations(_paramTypes,_paramAnnotations);}}// If a class has no decorators, at least create metadata
// based on function.length.
// Note: We know that this is a real constructor as we checked
// the content of the constructor above.
return new Array(type.length).fill(undefined);}/**
     * @param {?} type
     * @return {?}
     */},{key:'parameters',value:function parameters(type){// Note: only report metadata if we have at least one class decorator
// to stay in sync with the static reflector.
if(!isType(type)){return[];}var/** @type {?} */parentCtor=getParentCtor(type);var/** @type {?} */parameters=this._ownParameters(type,parentCtor);if(!parameters&&parentCtor!==Object){parameters=this.parameters(parentCtor);}return parameters||[];}/**
     * @param {?} typeOrFunc
     * @param {?} parentCtor
     * @return {?}
     */},{key:'_ownAnnotations',value:function _ownAnnotations(typeOrFunc,parentCtor){// Prefer the direct API.
if(typeOrFunc.annotations&&typeOrFunc.annotations!==parentCtor.annotations){var/** @type {?} */annotations=typeOrFunc.annotations;if(typeof annotations==='function'&&annotations.annotations){annotations=annotations.annotations;}return annotations;}// API of tsickle for lowering decorators to properties on the class.
if(typeOrFunc.decorators&&typeOrFunc.decorators!==parentCtor.decorators){return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);}// API for metadata created by invoking the decorators.
if(this._reflect&&this._reflect.getOwnMetadata){return this._reflect.getOwnMetadata('annotations',typeOrFunc);}}/**
     * @param {?} typeOrFunc
     * @return {?}
     */},{key:'annotations',value:function annotations(typeOrFunc){if(!isType(typeOrFunc)){return[];}var/** @type {?} */parentCtor=getParentCtor(typeOrFunc);var/** @type {?} */ownAnnotations=this._ownAnnotations(typeOrFunc,parentCtor)||[];var/** @type {?} */parentAnnotations=parentCtor!==Object?this.annotations(parentCtor):[];return parentAnnotations.concat(ownAnnotations);}/**
     * @param {?} typeOrFunc
     * @param {?} parentCtor
     * @return {?}
     */},{key:'_ownPropMetadata',value:function _ownPropMetadata(typeOrFunc,parentCtor){// Prefer the direct API.
if(typeOrFunc.propMetadata&&typeOrFunc.propMetadata!==parentCtor.propMetadata){var/** @type {?} */propMetadata=typeOrFunc.propMetadata;if(typeof propMetadata==='function'&&propMetadata.propMetadata){propMetadata=propMetadata.propMetadata;}return propMetadata;}// API of tsickle for lowering decorators to properties on the class.
if(typeOrFunc.propDecorators&&typeOrFunc.propDecorators!==parentCtor.propDecorators){var/** @type {?} */propDecorators=typeOrFunc.propDecorators;var/** @type {?} */_propMetadata={};Object.keys(propDecorators).forEach(function(prop){_propMetadata[prop]=convertTsickleDecoratorIntoMetadata(propDecorators[prop]);});return _propMetadata;}// API for metadata created by invoking the decorators.
if(this._reflect&&this._reflect.getOwnMetadata){return this._reflect.getOwnMetadata('propMetadata',typeOrFunc);}}/**
     * @param {?} typeOrFunc
     * @return {?}
     */},{key:'propMetadata',value:function propMetadata(typeOrFunc){if(!isType(typeOrFunc)){return{};}var/** @type {?} */parentCtor=getParentCtor(typeOrFunc);var/** @type {?} */propMetadata={};if(parentCtor!==Object){var/** @type {?} */parentPropMetadata=this.propMetadata(parentCtor);Object.keys(parentPropMetadata).forEach(function(propName){propMetadata[propName]=parentPropMetadata[propName];});}var/** @type {?} */ownPropMetadata=this._ownPropMetadata(typeOrFunc,parentCtor);if(ownPropMetadata){Object.keys(ownPropMetadata).forEach(function(propName){var/** @type {?} */decorators=[];if(propMetadata.hasOwnProperty(propName)){decorators.push.apply(decorators,_toConsumableArray(propMetadata[propName]));}decorators.push.apply(decorators,_toConsumableArray(ownPropMetadata[propName]));propMetadata[propName]=decorators;});}return propMetadata;}/**
     * @param {?} type
     * @param {?} lcProperty
     * @return {?}
     */},{key:'hasLifecycleHook',value:function hasLifecycleHook(type,lcProperty){return type instanceof Type&&lcProperty in type.prototype;}/**
     * @param {?} name
     * @return {?}
     */},{key:'getter',value:function getter(name){return new Function('o','return o.'+name+';');}/**
     * @param {?} name
     * @return {?}
     */},{key:'setter',value:function setter(name){return new Function('o','v','return o.'+name+' = v;');}/**
     * @param {?} name
     * @return {?}
     */},{key:'method',value:function method(name){var/** @type {?} */functionBody='if (!o.'+name+') throw new Error(\'"'+name+'" is undefined\');\n        return o.'+name+'.apply(o, args);';return new Function('o','args',functionBody);}/**
     * @param {?} type
     * @return {?}
     */},{key:'importUri',value:function importUri(type){// StaticSymbol
if((typeof type==='undefined'?'undefined':_typeof(type))==='object'&&type['filePath']){return type['filePath'];}// Runtime type
return'./'+stringify(type);}/**
     * @param {?} name
     * @param {?} moduleUrl
     * @param {?} members
     * @param {?} runtime
     * @return {?}
     */},{key:'resolveIdentifier',value:function resolveIdentifier(name,moduleUrl,members,runtime){return runtime;}/**
     * @param {?} enumIdentifier
     * @param {?} name
     * @return {?}
     */},{key:'resolveEnum',value:function resolveEnum(enumIdentifier,name){return enumIdentifier[name];}}]);return ReflectionCapabilities;}();/**
 * @param {?} decoratorInvocations
 * @return {?}
 */function convertTsickleDecoratorIntoMetadata(decoratorInvocations){if(!decoratorInvocations){return[];}return decoratorInvocations.map(function(decoratorInvocation){var/** @type {?} */decoratorType=decoratorInvocation.type;var/** @type {?} */annotationCls=decoratorType.annotationCls;var/** @type {?} */annotationArgs=decoratorInvocation.args?decoratorInvocation.args:[];return new(Function.prototype.bind.apply(annotationCls,[null].concat(_toConsumableArray(annotationArgs))))();});}/**
 * @param {?} ctor
 * @return {?}
 */function getParentCtor(ctor){var/** @type {?} */parentProto=Object.getPrototypeOf(ctor.prototype);var/** @type {?} */parentCtor=parentProto?parentProto.constructor:null;// Note: We always use `Object` as the null value
// to simplify checking later on.
return parentCtor||Object;}/**
 * Provides read-only access to reflection data about symbols. Used internally by Angular
 * to power dependency injection and compilation.
 * @abstract
 */var ReflectorReader=function(){function ReflectorReader(){_classCallCheck(this,ReflectorReader);}_createClass(ReflectorReader,[{key:'parameters',/**
     * @abstract
     * @param {?} typeOrFunc
     * @return {?}
     */value:function parameters(typeOrFunc){}/**
     * @abstract
     * @param {?} typeOrFunc
     * @return {?}
     */},{key:'annotations',value:function annotations(typeOrFunc){}/**
     * @abstract
     * @param {?} typeOrFunc
     * @return {?}
     */},{key:'propMetadata',value:function propMetadata(typeOrFunc){}/**
     * @abstract
     * @param {?} typeOrFunc
     * @return {?}
     */},{key:'importUri',value:function importUri(typeOrFunc){}/**
     * @abstract
     * @param {?} name
     * @param {?} moduleUrl
     * @param {?} members
     * @param {?} runtime
     * @return {?}
     */},{key:'resolveIdentifier',value:function resolveIdentifier(name,moduleUrl,members,runtime){}/**
     * @abstract
     * @param {?} identifier
     * @param {?} name
     * @return {?}
     */},{key:'resolveEnum',value:function resolveEnum(identifier,name){}}]);return ReflectorReader;}();/**
 * Provides access to reflection data about symbols. Used internally by Angular
 * to power dependency injection and compilation.
 */var Reflector=function(_ReflectorReader){_inherits(Reflector,_ReflectorReader);/**
     * @param {?} reflectionCapabilities
     */function Reflector(reflectionCapabilities){_classCallCheck(this,Reflector);var _this3=_possibleConstructorReturn(this,(Reflector.__proto__||Object.getPrototypeOf(Reflector)).call(this));_this3.reflectionCapabilities=reflectionCapabilities;return _this3;}/**
     * @param {?} caps
     * @return {?}
     */_createClass(Reflector,[{key:'updateCapabilities',value:function updateCapabilities(caps){this.reflectionCapabilities=caps;}/**
     * @param {?} type
     * @return {?}
     */},{key:'factory',value:function factory(type){return this.reflectionCapabilities.factory(type);}/**
     * @param {?} typeOrFunc
     * @return {?}
     */},{key:'parameters',value:function parameters(typeOrFunc){return this.reflectionCapabilities.parameters(typeOrFunc);}/**
     * @param {?} typeOrFunc
     * @return {?}
     */},{key:'annotations',value:function annotations(typeOrFunc){return this.reflectionCapabilities.annotations(typeOrFunc);}/**
     * @param {?} typeOrFunc
     * @return {?}
     */},{key:'propMetadata',value:function propMetadata(typeOrFunc){return this.reflectionCapabilities.propMetadata(typeOrFunc);}/**
     * @param {?} type
     * @param {?} lcProperty
     * @return {?}
     */},{key:'hasLifecycleHook',value:function hasLifecycleHook(type,lcProperty){return this.reflectionCapabilities.hasLifecycleHook(type,lcProperty);}/**
     * @param {?} name
     * @return {?}
     */},{key:'getter',value:function getter(name){return this.reflectionCapabilities.getter(name);}/**
     * @param {?} name
     * @return {?}
     */},{key:'setter',value:function setter(name){return this.reflectionCapabilities.setter(name);}/**
     * @param {?} name
     * @return {?}
     */},{key:'method',value:function method(name){return this.reflectionCapabilities.method(name);}/**
     * @param {?} type
     * @return {?}
     */},{key:'importUri',value:function importUri(type){return this.reflectionCapabilities.importUri(type);}/**
     * @param {?} name
     * @param {?} moduleUrl
     * @param {?} members
     * @param {?} runtime
     * @return {?}
     */},{key:'resolveIdentifier',value:function resolveIdentifier(name,moduleUrl,members,runtime){return this.reflectionCapabilities.resolveIdentifier(name,moduleUrl,members,runtime);}/**
     * @param {?} identifier
     * @param {?} name
     * @return {?}
     */},{key:'resolveEnum',value:function resolveEnum(identifier,name){return this.reflectionCapabilities.resolveEnum(identifier,name);}}]);return Reflector;}(ReflectorReader);/**
 * The {@link Reflector} used internally in Angular to access metadata
 * about symbols.
 */var/** @type {?} */reflector=new Reflector(new ReflectionCapabilities());/**
 * `Dependency` is used by the framework to extend DI.
 * This is internal to Angular and should not be used directly.
 */var ReflectiveDependency=function(){/**
     * @param {?} key
     * @param {?} optional
     * @param {?} visibility
     */function ReflectiveDependency(key,optional,visibility){_classCallCheck(this,ReflectiveDependency);this.key=key;this.optional=optional;this.visibility=visibility;}/**
     * @param {?} key
     * @return {?}
     */_createClass(ReflectiveDependency,null,[{key:'fromKey',value:function fromKey(key){return new ReflectiveDependency(key,false,null);}}]);return ReflectiveDependency;}();var/** @type {?} */_EMPTY_LIST=[];var ResolvedReflectiveProvider_=function(){/**
     * @param {?} key
     * @param {?} resolvedFactories
     * @param {?} multiProvider
     */function ResolvedReflectiveProvider_(key,resolvedFactories,multiProvider){_classCallCheck(this,ResolvedReflectiveProvider_);this.key=key;this.resolvedFactories=resolvedFactories;this.multiProvider=multiProvider;}/**
     * @return {?}
     */_createClass(ResolvedReflectiveProvider_,[{key:'resolvedFactory',get:function get(){return this.resolvedFactories[0];}}]);return ResolvedReflectiveProvider_;}();/**
 * An internal resolved representation of a factory function created by resolving {\@link
 * Provider}.
 * \@experimental
 */var ResolvedReflectiveFactory=/**
     * @param {?} factory
     * @param {?} dependencies
     */function ResolvedReflectiveFactory(factory,dependencies){_classCallCheck(this,ResolvedReflectiveFactory);this.factory=factory;this.dependencies=dependencies;};/**
 * Resolve a single provider.
 * @param {?} provider
 * @return {?}
 */function resolveReflectiveFactory(provider){var/** @type {?} */factoryFn=void 0;var/** @type {?} */resolvedDeps=void 0;if(provider.useClass){var/** @type {?} */useClass=resolveForwardRef(provider.useClass);factoryFn=reflector.factory(useClass);resolvedDeps=_dependenciesFor(useClass);}else if(provider.useExisting){factoryFn=function factoryFn(aliasInstance){return aliasInstance;};resolvedDeps=[ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];}else if(provider.useFactory){factoryFn=provider.useFactory;resolvedDeps=constructDependencies(provider.useFactory,provider.deps);}else{factoryFn=function factoryFn(){return provider.useValue;};resolvedDeps=_EMPTY_LIST;}return new ResolvedReflectiveFactory(factoryFn,resolvedDeps);}/**
 * Converts the {\@link Provider} into {\@link ResolvedProvider}.
 *
 * {\@link Injector} internally only uses {\@link ResolvedProvider}, {\@link Provider} contains
 * convenience provider syntax.
 * @param {?} provider
 * @return {?}
 */function resolveReflectiveProvider(provider){return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide),[resolveReflectiveFactory(provider)],provider.multi);}/**
 * Resolve a list of Providers.
 * @param {?} providers
 * @return {?}
 */function resolveReflectiveProviders(providers){var/** @type {?} */normalized=_normalizeProviders(providers,[]);var/** @type {?} */resolved=normalized.map(resolveReflectiveProvider);var/** @type {?} */resolvedProviderMap=mergeResolvedReflectiveProviders(resolved,new Map());return Array.from(resolvedProviderMap.values());}/**
 * Merges a list of ResolvedProviders into a list where
 * each key is contained exactly once and multi providers
 * have been merged.
 * @param {?} providers
 * @param {?} normalizedProvidersMap
 * @return {?}
 */function mergeResolvedReflectiveProviders(providers,normalizedProvidersMap){for(var/** @type {?} */i=0;i<providers.length;i++){var/** @type {?} */provider=providers[i];var/** @type {?} */existing=normalizedProvidersMap.get(provider.key.id);if(existing){if(provider.multiProvider!==existing.multiProvider){throw mixingMultiProvidersWithRegularProvidersError(existing,provider);}if(provider.multiProvider){for(var/** @type {?} */j=0;j<provider.resolvedFactories.length;j++){existing.resolvedFactories.push(provider.resolvedFactories[j]);}}else{normalizedProvidersMap.set(provider.key.id,provider);}}else{var/** @type {?} */resolvedProvider=void 0;if(provider.multiProvider){resolvedProvider=new ResolvedReflectiveProvider_(provider.key,provider.resolvedFactories.slice(),provider.multiProvider);}else{resolvedProvider=provider;}normalizedProvidersMap.set(provider.key.id,resolvedProvider);}}return normalizedProvidersMap;}/**
 * @param {?} providers
 * @param {?} res
 * @return {?}
 */function _normalizeProviders(providers,res){providers.forEach(function(b){if(b instanceof Type){res.push({provide:b,useClass:b});}else if(b&&(typeof b==='undefined'?'undefined':_typeof(b))=='object'&&b.provide!==undefined){res.push(/** @type {?} */b);}else if(b instanceof Array){_normalizeProviders(b,res);}else{throw invalidProviderError(b);}});return res;}/**
 * @param {?} typeOrFunc
 * @param {?} dependencies
 * @return {?}
 */function constructDependencies(typeOrFunc,dependencies){if(!dependencies){return _dependenciesFor(typeOrFunc);}else{var/** @type {?} */params=dependencies.map(function(t){return[t];});return dependencies.map(function(t){return _extractToken(typeOrFunc,t,params);});}}/**
 * @param {?} typeOrFunc
 * @return {?}
 */function _dependenciesFor(typeOrFunc){var/** @type {?} */params=reflector.parameters(typeOrFunc);if(!params)return[];if(params.some(function(p){return p==null;})){throw noAnnotationError(typeOrFunc,params);}return params.map(function(p){return _extractToken(typeOrFunc,p,params);});}/**
 * @param {?} typeOrFunc
 * @param {?} metadata
 * @param {?} params
 * @return {?}
 */function _extractToken(typeOrFunc,metadata,params){var/** @type {?} */token=null;var/** @type {?} */optional=false;if(!Array.isArray(metadata)){if(metadata instanceof Inject){return _createDependency(metadata['token'],optional,null);}else{return _createDependency(metadata,optional,null);}}var/** @type {?} */visibility=null;for(var/** @type {?} */i=0;i<metadata.length;++i){var/** @type {?} */paramMetadata=metadata[i];if(paramMetadata instanceof Type){token=paramMetadata;}else if(paramMetadata instanceof Inject){token=paramMetadata['token'];}else if(paramMetadata instanceof Optional){optional=true;}else if(paramMetadata instanceof Self||paramMetadata instanceof SkipSelf){visibility=paramMetadata;}else if(paramMetadata instanceof InjectionToken){token=paramMetadata;}}token=resolveForwardRef(token);if(token!=null){return _createDependency(token,optional,visibility);}else{throw noAnnotationError(typeOrFunc,params);}}/**
 * @param {?} token
 * @param {?} optional
 * @param {?} visibility
 * @return {?}
 */function _createDependency(token,optional,visibility){return new ReflectiveDependency(ReflectiveKey.get(token),optional,visibility);}// Threshold for the dynamic version
var/** @type {?} */UNDEFINED=new Object();/**
 * A ReflectiveDependency injection container used for instantiating objects and resolving
 * dependencies.
 *
 * An `Injector` is a replacement for a `new` operator, which can automatically resolve the
 * constructor dependencies.
 *
 * In typical use, application code asks for the dependencies in the constructor and they are
 * resolved by the `Injector`.
 *
 * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))
 *
 * The following example creates an `Injector` configured to create `Engine` and `Car`.
 *
 * ```typescript
 * \@Injectable()
 * class Engine {
 * }
 *
 * \@Injectable()
 * class Car {
 *   constructor(public engine:Engine) {}
 * }
 *
 * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
 * var car = injector.get(Car);
 * expect(car instanceof Car).toBe(true);
 * expect(car.engine instanceof Engine).toBe(true);
 * ```
 *
 * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`
 * resolve all of the object's dependencies automatically.
 *
 * \@stable
 * @abstract
 */var ReflectiveInjector=function(){function ReflectiveInjector(){_classCallCheck(this,ReflectiveInjector);}_createClass(ReflectiveInjector,[{key:'parent',/**
     * Parent of this injector.
     *
     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
     * -->
     *
     * ### Example ([live demo](http://plnkr.co/edit/eosMGo?p=preview))
     *
     * ```typescript
     * var parent = ReflectiveInjector.resolveAndCreate([]);
     * var child = parent.resolveAndCreateChild([]);
     * expect(child.parent).toBe(parent);
     * ```
     * @abstract
     * @return {?}
     */value:function parent(){}/**
     * Resolves an array of providers and creates a child injector from those providers.
     *
     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
     * -->
     *
     * The passed-in providers can be an array of `Type`, {\@link Provider},
     * or a recursive array of more providers.
     *
     * ### Example ([live demo](http://plnkr.co/edit/opB3T4?p=preview))
     *
     * ```typescript
     * class ParentProvider {}
     * class ChildProvider {}
     *
     * var parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);
     * var child = parent.resolveAndCreateChild([ChildProvider]);
     *
     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
     * ```
     *
     * This function is slower than the corresponding `createChildFromResolved`
     * because it needs to resolve the passed-in providers first.
     * See {\@link Injector#resolve} and {\@link Injector#createChildFromResolved}.
     * @abstract
     * @param {?} providers
     * @return {?}
     */},{key:'resolveAndCreateChild',value:function resolveAndCreateChild(providers){}/**
     * Creates a child injector from previously resolved providers.
     *
     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
     * -->
     *
     * This API is the recommended way to construct injectors in performance-sensitive parts.
     *
     * ### Example ([live demo](http://plnkr.co/edit/VhyfjN?p=preview))
     *
     * ```typescript
     * class ParentProvider {}
     * class ChildProvider {}
     *
     * var parentProviders = ReflectiveInjector.resolve([ParentProvider]);
     * var childProviders = ReflectiveInjector.resolve([ChildProvider]);
     *
     * var parent = ReflectiveInjector.fromResolvedProviders(parentProviders);
     * var child = parent.createChildFromResolved(childProviders);
     *
     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
     * ```
     * @abstract
     * @param {?} providers
     * @return {?}
     */},{key:'createChildFromResolved',value:function createChildFromResolved(providers){}/**
     * Resolves a provider and instantiates an object in the context of the injector.
     *
     * The created object does not get cached by the injector.
     *
     * ### Example ([live demo](http://plnkr.co/edit/yvVXoB?p=preview))
     *
     * ```typescript
     * \@Injectable()
     * class Engine {
     * }
     *
     * \@Injectable()
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var injector = ReflectiveInjector.resolveAndCreate([Engine]);
     *
     * var car = injector.resolveAndInstantiate(Car);
     * expect(car.engine).toBe(injector.get(Engine));
     * expect(car).not.toBe(injector.resolveAndInstantiate(Car));
     * ```
     * @abstract
     * @param {?} provider
     * @return {?}
     */},{key:'resolveAndInstantiate',value:function resolveAndInstantiate(provider){}/**
     * Instantiates an object using a resolved provider in the context of the injector.
     *
     * The created object does not get cached by the injector.
     *
     * ### Example ([live demo](http://plnkr.co/edit/ptCImQ?p=preview))
     *
     * ```typescript
     * \@Injectable()
     * class Engine {
     * }
     *
     * \@Injectable()
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var injector = ReflectiveInjector.resolveAndCreate([Engine]);
     * var carProvider = ReflectiveInjector.resolve([Car])[0];
     * var car = injector.instantiateResolved(carProvider);
     * expect(car.engine).toBe(injector.get(Engine));
     * expect(car).not.toBe(injector.instantiateResolved(carProvider));
     * ```
     * @abstract
     * @param {?} provider
     * @return {?}
     */},{key:'instantiateResolved',value:function instantiateResolved(provider){}/**
     * @abstract
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */},{key:'get',value:function get(token,notFoundValue){}}],[{key:'resolve',/**
     * Turns an array of provider definitions into an array of resolved providers.
     *
     * A resolution is a process of flattening multiple nested arrays and converting individual
     * providers into an array of {\@link ResolvedReflectiveProvider}s.
     *
     * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))
     *
     * ```typescript
     * \@Injectable()
     * class Engine {
     * }
     *
     * \@Injectable()
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);
     *
     * expect(providers.length).toEqual(2);
     *
     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);
     * expect(providers[0].key.displayName).toBe("Car");
     * expect(providers[0].dependencies.length).toEqual(1);
     * expect(providers[0].factory).toBeDefined();
     *
     * expect(providers[1].key.displayName).toBe("Engine");
     * });
     * ```
     *
     * See {\@link ReflectiveInjector#fromResolvedProviders} for more info.
     * @param {?} providers
     * @return {?}
     */value:function resolve(providers){return resolveReflectiveProviders(providers);}/**
     * Resolves an array of providers and creates an injector from those providers.
     *
     * The passed-in providers can be an array of `Type`, {\@link Provider},
     * or a recursive array of more providers.
     *
     * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))
     *
     * ```typescript
     * \@Injectable()
     * class Engine {
     * }
     *
     * \@Injectable()
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
     * expect(injector.get(Car) instanceof Car).toBe(true);
     * ```
     *
     * This function is slower than the corresponding `fromResolvedProviders`
     * because it needs to resolve the passed-in providers first.
     * See {\@link Injector#resolve} and {\@link Injector#fromResolvedProviders}.
     * @param {?} providers
     * @param {?=} parent
     * @return {?}
     */},{key:'resolveAndCreate',value:function resolveAndCreate(providers){var parent=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var/** @type {?} */ResolvedReflectiveProviders=ReflectiveInjector.resolve(providers);return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders,parent);}/**
     * Creates an injector from previously resolved providers.
     *
     * This API is the recommended way to construct injectors in performance-sensitive parts.
     *
     * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))
     *
     * ```typescript
     * \@Injectable()
     * class Engine {
     * }
     *
     * \@Injectable()
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var providers = ReflectiveInjector.resolve([Car, Engine]);
     * var injector = ReflectiveInjector.fromResolvedProviders(providers);
     * expect(injector.get(Car) instanceof Car).toBe(true);
     * ```
     * \@experimental
     * @param {?} providers
     * @param {?=} parent
     * @return {?}
     */},{key:'fromResolvedProviders',value:function fromResolvedProviders(providers){var parent=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return new ReflectiveInjector_(providers,parent);}}]);return ReflectiveInjector;}();var ReflectiveInjector_=function(){/**
     * Private
     * @param {?} _providers
     * @param {?=} _parent
     */function ReflectiveInjector_(_providers){var _parent=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;_classCallCheck(this,ReflectiveInjector_);/** @internal */this._constructionCounter=0;this._providers=_providers;this._parent=_parent;var len=_providers.length;this.keyIds=new Array(len);this.objs=new Array(len);for(var i=0;i<len;i++){this.keyIds[i]=_providers[i].key.id;this.objs[i]=UNDEFINED;}}/**
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */_createClass(ReflectiveInjector_,[{key:'get',value:function get(token){var notFoundValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:THROW_IF_NOT_FOUND;return this._getByKey(ReflectiveKey.get(token),null,notFoundValue);}/**
     * @return {?}
     */},{key:'resolveAndCreateChild',/**
     * @param {?} providers
     * @return {?}
     */value:function resolveAndCreateChild(providers){var/** @type {?} */ResolvedReflectiveProviders=ReflectiveInjector.resolve(providers);return this.createChildFromResolved(ResolvedReflectiveProviders);}/**
     * @param {?} providers
     * @return {?}
     */},{key:'createChildFromResolved',value:function createChildFromResolved(providers){var/** @type {?} */inj=new ReflectiveInjector_(providers);inj._parent=this;return inj;}/**
     * @param {?} provider
     * @return {?}
     */},{key:'resolveAndInstantiate',value:function resolveAndInstantiate(provider){return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);}/**
     * @param {?} provider
     * @return {?}
     */},{key:'instantiateResolved',value:function instantiateResolved(provider){return this._instantiateProvider(provider);}/**
     * @param {?} index
     * @return {?}
     */},{key:'getProviderAtIndex',value:function getProviderAtIndex(index){if(index<0||index>=this._providers.length){throw outOfBoundsError(index);}return this._providers[index];}/**
     * \@internal
     * @param {?} provider
     * @return {?}
     */},{key:'_new',value:function _new(provider){if(this._constructionCounter++>this._getMaxNumberOfObjects()){throw cyclicDependencyError(this,provider.key);}return this._instantiateProvider(provider);}/**
     * @return {?}
     */},{key:'_getMaxNumberOfObjects',value:function _getMaxNumberOfObjects(){return this.objs.length;}/**
     * @param {?} provider
     * @return {?}
     */},{key:'_instantiateProvider',value:function _instantiateProvider(provider){if(provider.multiProvider){var/** @type {?} */res=new Array(provider.resolvedFactories.length);for(var/** @type {?} */i=0;i<provider.resolvedFactories.length;++i){res[i]=this._instantiate(provider,provider.resolvedFactories[i]);}return res;}else{return this._instantiate(provider,provider.resolvedFactories[0]);}}/**
     * @param {?} provider
     * @param {?} ResolvedReflectiveFactory
     * @return {?}
     */},{key:'_instantiate',value:function _instantiate(provider,ResolvedReflectiveFactory){var _this4=this;var/** @type {?} */factory=ResolvedReflectiveFactory.factory;var/** @type {?} */deps=void 0;try{deps=ResolvedReflectiveFactory.dependencies.map(function(dep){return _this4._getByReflectiveDependency(dep);});}catch(e){if(e.addKey){e.addKey(this,provider.key);}throw e;}var/** @type {?} */obj=void 0;try{obj=factory.apply(undefined,_toConsumableArray(deps));}catch(e){throw instantiationError(this,e,e.stack,provider.key);}return obj;}/**
     * @param {?} dep
     * @return {?}
     */},{key:'_getByReflectiveDependency',value:function _getByReflectiveDependency(dep){return this._getByKey(dep.key,dep.visibility,dep.optional?null:THROW_IF_NOT_FOUND);}/**
     * @param {?} key
     * @param {?} visibility
     * @param {?} notFoundValue
     * @return {?}
     */},{key:'_getByKey',value:function _getByKey(key,visibility,notFoundValue){if(key===INJECTOR_KEY){return this;}if(visibility instanceof Self){return this._getByKeySelf(key,notFoundValue);}else{return this._getByKeyDefault(key,notFoundValue,visibility);}}/**
     * @param {?} keyId
     * @return {?}
     */},{key:'_getObjByKeyId',value:function _getObjByKeyId(keyId){for(var/** @type {?} */i=0;i<this.keyIds.length;i++){if(this.keyIds[i]===keyId){if(this.objs[i]===UNDEFINED){this.objs[i]=this._new(this._providers[i]);}return this.objs[i];}}return UNDEFINED;}/**
     * \@internal
     * @param {?} key
     * @param {?} notFoundValue
     * @return {?}
     */},{key:'_throwOrNull',value:function _throwOrNull(key,notFoundValue){if(notFoundValue!==THROW_IF_NOT_FOUND){return notFoundValue;}else{throw noProviderError(this,key);}}/**
     * \@internal
     * @param {?} key
     * @param {?} notFoundValue
     * @return {?}
     */},{key:'_getByKeySelf',value:function _getByKeySelf(key,notFoundValue){var/** @type {?} */obj=this._getObjByKeyId(key.id);return obj!==UNDEFINED?obj:this._throwOrNull(key,notFoundValue);}/**
     * \@internal
     * @param {?} key
     * @param {?} notFoundValue
     * @param {?} visibility
     * @return {?}
     */},{key:'_getByKeyDefault',value:function _getByKeyDefault(key,notFoundValue,visibility){var/** @type {?} */inj=void 0;if(visibility instanceof SkipSelf){inj=this._parent;}else{inj=this;}while(inj instanceof ReflectiveInjector_){var/** @type {?} */inj_=inj;var/** @type {?} */obj=inj_._getObjByKeyId(key.id);if(obj!==UNDEFINED)return obj;inj=inj_._parent;}if(inj!==null){return inj.get(key.token,notFoundValue);}else{return this._throwOrNull(key,notFoundValue);}}/**
     * @return {?}
     */},{key:'toString',/**
     * @return {?}
     */value:function toString(){return this.displayName;}},{key:'parent',get:function get(){return this._parent;}},{key:'displayName',get:function get(){var/** @type {?} */providers=_mapProviders(this,function(b){return' "'+b.key.displayName+'" ';}).join(', ');return'ReflectiveInjector(providers: ['+providers+'])';}}]);return ReflectiveInjector_;}();var/** @type {?} */INJECTOR_KEY=ReflectiveKey.get(Injector);/**
 * @param {?} injector
 * @param {?} fn
 * @return {?}
 */function _mapProviders(injector,fn){var/** @type {?} */res=new Array(injector._providers.length);for(var/** @type {?} */i=0;i<injector._providers.length;++i){res[i]=fn(injector.getProviderAtIndex(i));}return res;}/**
 * Wraps Javascript Objects
 */var StringMapWrapper=function(){function StringMapWrapper(){_classCallCheck(this,StringMapWrapper);}_createClass(StringMapWrapper,null,[{key:'merge',/**
     * @param {?} m1
     * @param {?} m2
     * @return {?}
     */value:function merge(m1,m2){var/** @type {?} */m={};var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=Object.keys(m1)[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var k=_step.value;m[k]=m1[k];}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return();}}finally{if(_didIteratorError){throw _iteratorError;}}}var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=Object.keys(m2)[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=true){var _k=_step2.value;m[_k]=m2[_k];}}catch(err){_didIteratorError2=true;_iteratorError2=err;}finally{try{if(!_iteratorNormalCompletion2&&_iterator2.return){_iterator2.return();}}finally{if(_didIteratorError2){throw _iteratorError2;}}}return m;}/**
     * @param {?} m1
     * @param {?} m2
     * @return {?}
     */},{key:'equals',value:function equals(m1,m2){var/** @type {?} */k1=Object.keys(m1);var/** @type {?} */k2=Object.keys(m2);if(k1.length!=k2.length){return false;}for(var/** @type {?} */i=0;i<k1.length;i++){var/** @type {?} */key=k1[i];if(m1[key]!==m2[key]){return false;}}return true;}}]);return StringMapWrapper;}();var ListWrapper=function(){function ListWrapper(){_classCallCheck(this,ListWrapper);}_createClass(ListWrapper,null,[{key:'findLast',/**
     * @param {?} arr
     * @param {?} condition
     * @return {?}
     */value:function findLast(arr,condition){for(var/** @type {?} */i=arr.length-1;i>=0;i--){if(condition(arr[i])){return arr[i];}}return null;}/**
     * @param {?} list
     * @param {?} items
     * @return {?}
     */},{key:'removeAll',value:function removeAll(list,items){for(var/** @type {?} */i=0;i<items.length;++i){var/** @type {?} */index=list.indexOf(items[i]);if(index>-1){list.splice(index,1);}}}/**
     * @param {?} list
     * @param {?} el
     * @return {?}
     */},{key:'remove',value:function remove(list,el){var/** @type {?} */index=list.indexOf(el);if(index>-1){list.splice(index,1);return true;}return false;}/**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */},{key:'equals',value:function equals(a,b){if(a.length!=b.length)return false;for(var/** @type {?} */i=0;i<a.length;++i){if(a[i]!==b[i])return false;}return true;}/**
     * @param {?} list
     * @return {?}
     */},{key:'flatten',value:function flatten(list){return list.reduce(function(flat,item){var/** @type {?} */flatItem=Array.isArray(item)?ListWrapper.flatten(item):item;return flat.concat(flatItem);},[]);}}]);return ListWrapper;}();/**
 * @param {?} obj
 * @return {?}
 */function isListLikeIterable(obj){if(!isJsObject(obj))return false;return Array.isArray(obj)||!(obj instanceof Map)&&getSymbolIterator()in obj;// JS Iterable have a Symbol.iterator prop
}/**
 * @param {?} a
 * @param {?} b
 * @param {?} comparator
 * @return {?}
 */function areIterablesEqual(a,b,comparator){var/** @type {?} */iterator1=a[getSymbolIterator()]();var/** @type {?} */iterator2=b[getSymbolIterator()]();while(true){var/** @type {?} */item1=iterator1.next();var/** @type {?} */item2=iterator2.next();if(item1.done&&item2.done)return true;if(item1.done||item2.done)return false;if(!comparator(item1.value,item2.value))return false;}}/**
 * @param {?} obj
 * @param {?} fn
 * @return {?}
 */function iterateListLike(obj,fn){if(Array.isArray(obj)){for(var/** @type {?} */i=0;i<obj.length;i++){fn(obj[i]);}}else{var/** @type {?} */iterator=obj[getSymbolIterator()]();var/** @type {?} */item=void 0;while(!(item=iterator.next()).done){fn(item.value);}}}/**
 * Determine if the argument is shaped like a Promise
 * @param {?} obj
 * @return {?}
 */function isPromise(obj){// allow any Promise/A+ compliant thenable.
// It's up to the caller to ensure that obj.then conforms to the spec
return!!obj&&typeof obj.then==='function';}/**
 * Determine if the argument is an Observable
 * @param {?} obj
 * @return {?}
 */function isObservable(obj){return!!(obj&&obj[__WEBPACK_IMPORTED_MODULE_3_rxjs_symbol_observable__["$$observable"]]);}/**
 * A function that will be executed when an application is initialized.
 * @experimental
 */var/** @type {?} */APP_INITIALIZER=new InjectionToken('Application Initializer');/**
 * A class that reflects the state of running {\@link APP_INITIALIZER}s.
 *
 * \@experimental
 */var ApplicationInitStatus=function(){/**
     * @param {?} appInits
     */function ApplicationInitStatus(appInits){var _this5=this;_classCallCheck(this,ApplicationInitStatus);this._done=false;var asyncInitPromises=[];if(appInits){for(var i=0;i<appInits.length;i++){var initResult=appInits[i]();if(isPromise(initResult)){asyncInitPromises.push(initResult);}}}this._donePromise=Promise.all(asyncInitPromises).then(function(){_this5._done=true;});if(asyncInitPromises.length===0){this._done=true;}}/**
     * @return {?}
     */_createClass(ApplicationInitStatus,[{key:'done',get:function get(){return this._done;}/**
     * @return {?}
     */},{key:'donePromise',get:function get(){return this._donePromise;}}]);return ApplicationInitStatus;}();ApplicationInitStatus.decorators=[{type:Injectable}];/** @nocollapse */ApplicationInitStatus.ctorParameters=function(){return[{type:Array,decorators:[{type:Inject,args:[APP_INITIALIZER]},{type:Optional}]}];};/**
 * A DI Token representing a unique string id assigned to the application by Angular and used
 * primarily for prefixing application attributes and CSS styles when
 * {@link ViewEncapsulation#Emulated} is being used.
 *
 * If you need to avoid randomly generated value to be used as an application id, you can provide
 * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}
 * using this token.
 * @experimental
 */var/** @type {?} */APP_ID=new InjectionToken('AppId');/**
 * @return {?}
 */function _appIdRandomProviderFactory(){return''+_randomChar()+_randomChar()+_randomChar();}/**
 * Providers that will generate a random APP_ID_TOKEN.
 * @experimental
 */var/** @type {?} */APP_ID_RANDOM_PROVIDER={provide:APP_ID,useFactory:_appIdRandomProviderFactory,deps:/** @type {?} */[]};/**
 * @return {?}
 */function _randomChar(){return String.fromCharCode(97+Math.floor(Math.random()*25));}/**
 * A function that will be executed when a platform is initialized.
 * @experimental
 */var/** @type {?} */PLATFORM_INITIALIZER=new InjectionToken('Platform Initializer');/**
 * A token that indicates an opaque platform id.
 * @experimental
 */var/** @type {?} */PLATFORM_ID=new InjectionToken('Platform ID');/**
 * All callbacks provided via this token will be called for every component that is bootstrapped.
 * Signature of the callback:
 *
 * `(componentRef: ComponentRef) => void`.
 *
 * @experimental
 */var/** @type {?} */APP_BOOTSTRAP_LISTENER=new InjectionToken('appBootstrapListener');/**
 * A token which indicates the root directory of the application
 * @experimental
 */var/** @type {?} */PACKAGE_ROOT_URL=new InjectionToken('Application Packages Root URL');var Console=function(){function Console(){_classCallCheck(this,Console);}_createClass(Console,[{key:'log',/**
     * @param {?} message
     * @return {?}
     */value:function log(message){print(message);}/**
     * @param {?} message
     * @return {?}
     */},{key:'warn',value:function warn(message){_warn(message);}}]);return Console;}();Console.decorators=[{type:Injectable}];/** @nocollapse */Console.ctorParameters=function(){return[];};/**
 * Combination of NgModuleFactory and ComponentFactorys.
 *
 * \@experimental
 */var ModuleWithComponentFactories=/**
     * @param {?} ngModuleFactory
     * @param {?} componentFactories
     */function ModuleWithComponentFactories(ngModuleFactory,componentFactories){_classCallCheck(this,ModuleWithComponentFactories);this.ngModuleFactory=ngModuleFactory;this.componentFactories=componentFactories;};/**
 * @return {?}
 */function _throwError(){throw new Error('Runtime compiler is not loaded');}/**
 * Low-level service for running the angular compiler during runtime
 * to create {\@link ComponentFactory}s, which
 * can later be used to create and render a Component instance.
 *
 * Each `\@NgModule` provides an own `Compiler` to its injector,
 * that will use the directives/pipes of the ng module for compilation
 * of components.
 * \@stable
 */var Compiler=function(){function Compiler(){_classCallCheck(this,Compiler);}_createClass(Compiler,[{key:'compileModuleSync',/**
     * Compiles the given NgModule and all of its components. All templates of the components listed
     * in `entryComponents` have to be inlined.
     * @param {?} moduleType
     * @return {?}
     */value:function compileModuleSync(moduleType){throw _throwError();}/**
     * Compiles the given NgModule and all of its components
     * @param {?} moduleType
     * @return {?}
     */},{key:'compileModuleAsync',value:function compileModuleAsync(moduleType){throw _throwError();}/**
     * Same as {\@link compileModuleSync} but also creates ComponentFactories for all components.
     * @param {?} moduleType
     * @return {?}
     */},{key:'compileModuleAndAllComponentsSync',value:function compileModuleAndAllComponentsSync(moduleType){throw _throwError();}/**
     * Same as {\@link compileModuleAsync} but also creates ComponentFactories for all components.
     * @param {?} moduleType
     * @return {?}
     */},{key:'compileModuleAndAllComponentsAsync',value:function compileModuleAndAllComponentsAsync(moduleType){throw _throwError();}/**
     * Exposes the CSS-style selectors that have been used in `ngContent` directives within
     * the template of the given component.
     * This is used by the `upgrade` library to compile the appropriate transclude content
     * in the AngularJS wrapper component.
     * @param {?} component
     * @return {?}
     */},{key:'getNgContentSelectors',value:function getNgContentSelectors(component){throw _throwError();}/**
     * Clears all caches.
     * @return {?}
     */},{key:'clearCache',value:function clearCache(){}/**
     * Clears the cache for the given component/ngModule.
     * @param {?} type
     * @return {?}
     */},{key:'clearCacheFor',value:function clearCacheFor(type){}}]);return Compiler;}();Compiler.decorators=[{type:Injectable}];/** @nocollapse */Compiler.ctorParameters=function(){return[];};/**
 * Token to provide CompilerOptions in the platform injector.
 *
 * @experimental
 */var/** @type {?} */COMPILER_OPTIONS=new InjectionToken('compilerOptions');/**
 * A factory for creating a Compiler
 *
 * \@experimental
 * @abstract
 */var CompilerFactory=function(){function CompilerFactory(){_classCallCheck(this,CompilerFactory);}_createClass(CompilerFactory,[{key:'createCompiler',/**
     * @abstract
     * @param {?=} options
     * @return {?}
     */value:function createCompiler(options){}}]);return CompilerFactory;}();var ElementRef=/**
     * @param {?} nativeElement
     */function ElementRef(nativeElement){_classCallCheck(this,ElementRef);this.nativeElement=nativeElement;};/**
 * Use by directives and components to emit custom Events.
 *
 * ### Examples
 *
 * In the following example, `Zippy` alternatively emits `open` and `close` events when its
 * title gets clicked:
 *
 * ```
 * \@Component({
 *   selector: 'zippy',
 *   template: `
 *   <div class="zippy">
 *     <div (click)="toggle()">Toggle</div>
 *     <div [hidden]="!visible">
 *       <ng-content></ng-content>
 *     </div>
 *  </div>`})
 * export class Zippy {
 *   visible: boolean = true;
 *   \@Output() open: EventEmitter<any> = new EventEmitter();
 *   \@Output() close: EventEmitter<any> = new EventEmitter();
 *
 *   toggle() {
 *     this.visible = !this.visible;
 *     if (this.visible) {
 *       this.open.emit(null);
 *     } else {
 *       this.close.emit(null);
 *     }
 *   }
 * }
 * ```
 *
 * The events payload can be accessed by the parameter `$event` on the components output event
 * handler:
 *
 * ```
 * <zippy (open)="onOpen($event)" (close)="onClose($event)"></zippy>
 * ```
 *
 * Uses Rx.Observable but provides an adapter to make it work as specified here:
 * https://github.com/jhusain/observable-spec
 *
 * Once a reference implementation of the spec is available, switch to it.
 * \@stable
 */var EventEmitter=function(_Subject){_inherits(EventEmitter,_Subject);/**
     * Creates an instance of [EventEmitter], which depending on [isAsync],
     * delivers events synchronously or asynchronously.
     * @param {?=} isAsync
     */function EventEmitter(){var isAsync=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;_classCallCheck(this,EventEmitter);var _this6=_possibleConstructorReturn(this,(EventEmitter.__proto__||Object.getPrototypeOf(EventEmitter)).call(this));_this6.__isAsync=isAsync;return _this6;}/**
     * @param {?=} value
     * @return {?}
     */_createClass(EventEmitter,[{key:'emit',value:function emit(value){_get(EventEmitter.prototype.__proto__||Object.getPrototypeOf(EventEmitter.prototype),'next',this).call(this,value);}/**
     * @param {?=} generatorOrNext
     * @param {?=} error
     * @param {?=} complete
     * @return {?}
     */},{key:'subscribe',value:function subscribe(generatorOrNext,error,complete){var/** @type {?} */schedulerFn=void 0;var/** @type {?} */errorFn=function errorFn(err){return null;};var/** @type {?} */completeFn=function completeFn(){return null;};if(generatorOrNext&&(typeof generatorOrNext==='undefined'?'undefined':_typeof(generatorOrNext))==='object'){schedulerFn=this.__isAsync?function(value){setTimeout(function(){return generatorOrNext.next(value);});}:function(value){generatorOrNext.next(value);};if(generatorOrNext.error){errorFn=this.__isAsync?function(err){setTimeout(function(){return generatorOrNext.error(err);});}:function(err){generatorOrNext.error(err);};}if(generatorOrNext.complete){completeFn=this.__isAsync?function(){setTimeout(function(){return generatorOrNext.complete();});}:function(){generatorOrNext.complete();};}}else{schedulerFn=this.__isAsync?function(value){setTimeout(function(){return generatorOrNext(value);});}:function(value){generatorOrNext(value);};if(error){errorFn=this.__isAsync?function(err){setTimeout(function(){return error(err);});}:function(err){error(err);};}if(complete){completeFn=this.__isAsync?function(){setTimeout(function(){return complete();});}:function(){complete();};}}return _get(EventEmitter.prototype.__proto__||Object.getPrototypeOf(EventEmitter.prototype),'subscribe',this).call(this,schedulerFn,errorFn,completeFn);}}]);return EventEmitter;}(__WEBPACK_IMPORTED_MODULE_4_rxjs_Subject__["Subject"]);/**
 * An injectable service for executing work inside or outside of the Angular zone.
 *
 * The most common use of this service is to optimize performance when starting a work consisting of
 * one or more asynchronous tasks that don't require UI updates or error handling to be handled by
 * Angular. Such tasks can be kicked off via {\@link runOutsideAngular} and if needed, these tasks
 * can reenter the Angular zone via {\@link run}.
 *
 * <!-- TODO: add/fix links to:
 *   - docs explaining zones and the use of zones in Angular and change-detection
 *   - link to runOutsideAngular/run (throughout this file!)
 *   -->
 *
 * ### Example
 *
 * ```
 * import {Component, NgZone} from '\@angular/core';
 * import {NgIf} from '\@angular/common';
 *
 * \@Component({
 *   selector: 'ng-zone-demo'.
 *   template: `
 *     <h2>Demo: NgZone</h2>
 *
 *     <p>Progress: {{progress}}%</p>
 *     <p *ngIf="progress >= 100">Done processing {{label}} of Angular zone!</p>
 *
 *     <button (click)="processWithinAngularZone()">Process within Angular zone</button>
 *     <button (click)="processOutsideOfAngularZone()">Process outside of Angular zone</button>
 *   `,
 * })
 * export class NgZoneDemo {
 *   progress: number = 0;
 *   label: string;
 *
 *   constructor(private _ngZone: NgZone) {}
 *
 *   // Loop inside the Angular zone
 *   // so the UI DOES refresh after each setTimeout cycle
 *   processWithinAngularZone() {
 *     this.label = 'inside';
 *     this.progress = 0;
 *     this._increaseProgress(() => console.log('Inside Done!'));
 *   }
 *
 *   // Loop outside of the Angular zone
 *   // so the UI DOES NOT refresh after each setTimeout cycle
 *   processOutsideOfAngularZone() {
 *     this.label = 'outside';
 *     this.progress = 0;
 *     this._ngZone.runOutsideAngular(() => {
 *       this._increaseProgress(() => {
 *       // reenter the Angular zone and display done
 *       this._ngZone.run(() => {console.log('Outside Done!') });
 *     }}));
 *   }
 *
 *   _increaseProgress(doneCallback: () => void) {
 *     this.progress += 1;
 *     console.log(`Current progress: ${this.progress}%`);
 *
 *     if (this.progress < 100) {
 *       window.setTimeout(() => this._increaseProgress(doneCallback)), 10)
 *     } else {
 *       doneCallback();
 *     }
 *   }
 * }
 * ```
 *
 * \@experimental
 */var NgZone=function(){/**
     * @param {?} __0
     */function NgZone(_ref2){var _ref2$enableLongStack=_ref2.enableLongStackTrace,enableLongStackTrace=_ref2$enableLongStack===undefined?false:_ref2$enableLongStack;_classCallCheck(this,NgZone);this._hasPendingMicrotasks=false;this._hasPendingMacrotasks=false;this._isStable=true;this._nesting=0;this._onUnstable=new EventEmitter(false);this._onMicrotaskEmpty=new EventEmitter(false);this._onStable=new EventEmitter(false);this._onErrorEvents=new EventEmitter(false);if(typeof Zone=='undefined'){throw new Error('Angular requires Zone.js prolyfill.');}Zone.assertZonePatched();this.outer=this.inner=Zone.current;if(Zone['wtfZoneSpec']){this.inner=this.inner.fork(Zone['wtfZoneSpec']);}if(enableLongStackTrace&&Zone['longStackTraceZoneSpec']){this.inner=this.inner.fork(Zone['longStackTraceZoneSpec']);}this.forkInnerZoneWithAngularBehavior();}/**
     * @return {?}
     */_createClass(NgZone,[{key:'run',/**
     * Executes the `fn` function synchronously within the Angular zone and returns value returned by
     * the function.
     *
     * Running functions via `run` allows you to reenter Angular zone from a task that was executed
     * outside of the Angular zone (typically started via {\@link runOutsideAngular}).
     *
     * Any future tasks or microtasks scheduled from within this function will continue executing from
     * within the Angular zone.
     *
     * If a synchronous error happens it will be rethrown and not reported via `onError`.
     * @param {?} fn
     * @return {?}
     */value:function run(fn){return this.inner.run(fn);}/**
     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not
     * rethrown.
     * @param {?} fn
     * @return {?}
     */},{key:'runGuarded',value:function runGuarded(fn){return this.inner.runGuarded(fn);}/**
     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
     * the function.
     *
     * Running functions via `runOutsideAngular` allows you to escape Angular's zone and do work that
     * doesn't trigger Angular change-detection or is subject to Angular's error handling.
     *
     * Any future tasks or microtasks scheduled from within this function will continue executing from
     * outside of the Angular zone.
     *
     * Use {\@link run} to reenter the Angular zone and do work that updates the application model.
     * @param {?} fn
     * @return {?}
     */},{key:'runOutsideAngular',value:function runOutsideAngular(fn){return this.outer.run(fn);}/**
     * Notifies when code enters Angular Zone. This gets fired first on VM Turn.
     * @return {?}
     */},{key:'checkStable',/**
     * @return {?}
     */value:function checkStable(){var _this7=this;if(this._nesting==0&&!this._hasPendingMicrotasks&&!this._isStable){try{this._nesting++;this._onMicrotaskEmpty.emit(null);}finally{this._nesting--;if(!this._hasPendingMicrotasks){try{this.runOutsideAngular(function(){return _this7._onStable.emit(null);});}finally{this._isStable=true;}}}}}/**
     * @return {?}
     */},{key:'forkInnerZoneWithAngularBehavior',value:function forkInnerZoneWithAngularBehavior(){var _this8=this;this.inner=this.inner.fork({name:'angular',properties:/** @type {?} */{'isAngularZone':true},onInvokeTask:function onInvokeTask(delegate,current,target,task,applyThis,applyArgs){try{_this8.onEnter();return delegate.invokeTask(target,task,applyThis,applyArgs);}finally{_this8.onLeave();}},onInvoke:function onInvoke(delegate,current,target,callback,applyThis,applyArgs,source){try{_this8.onEnter();return delegate.invoke(target,callback,applyThis,applyArgs,source);}finally{_this8.onLeave();}},onHasTask:function onHasTask(delegate,current,target,hasTaskState){delegate.hasTask(target,hasTaskState);if(current===target){// We are only interested in hasTask events which originate from our zone
// (A child hasTask event is not interesting to us)
if(hasTaskState.change=='microTask'){_this8.setHasMicrotask(hasTaskState.microTask);}else if(hasTaskState.change=='macroTask'){_this8.setHasMacrotask(hasTaskState.macroTask);}}},onHandleError:function onHandleError(delegate,current,target,error){delegate.handleError(target,error);_this8.triggerError(error);return false;}});}/**
     * @return {?}
     */},{key:'onEnter',value:function onEnter(){this._nesting++;if(this._isStable){this._isStable=false;this._onUnstable.emit(null);}}/**
     * @return {?}
     */},{key:'onLeave',value:function onLeave(){this._nesting--;this.checkStable();}/**
     * @param {?} hasMicrotasks
     * @return {?}
     */},{key:'setHasMicrotask',value:function setHasMicrotask(hasMicrotasks){this._hasPendingMicrotasks=hasMicrotasks;this.checkStable();}/**
     * @param {?} hasMacrotasks
     * @return {?}
     */},{key:'setHasMacrotask',value:function setHasMacrotask(hasMacrotasks){this._hasPendingMacrotasks=hasMacrotasks;}/**
     * @param {?} error
     * @return {?}
     */},{key:'triggerError',value:function triggerError(error){this._onErrorEvents.emit(error);}},{key:'onUnstable',get:function get(){return this._onUnstable;}/**
     * Notifies when there is no more microtasks enqueue in the current VM Turn.
     * This is a hint for Angular to do change detection, which may enqueue more microtasks.
     * For this reason this event can fire multiple times per VM Turn.
     * @return {?}
     */},{key:'onMicrotaskEmpty',get:function get(){return this._onMicrotaskEmpty;}/**
     * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which
     * implies we are about to relinquish VM turn.
     * This event gets called just once.
     * @return {?}
     */},{key:'onStable',get:function get(){return this._onStable;}/**
     * Notify that an error has been delivered.
     * @return {?}
     */},{key:'onError',get:function get(){return this._onErrorEvents;}/**
     * Whether there are no outstanding microtasks or macrotasks.
     * @return {?}
     */},{key:'isStable',get:function get(){return this._isStable;}/**
     * @return {?}
     */},{key:'hasPendingMicrotasks',get:function get(){return this._hasPendingMicrotasks;}/**
     * @return {?}
     */},{key:'hasPendingMacrotasks',get:function get(){return this._hasPendingMacrotasks;}}],[{key:'isInAngularZone',value:function isInAngularZone(){return Zone.current.get('isAngularZone')===true;}/**
     * @return {?}
     */},{key:'assertInAngularZone',value:function assertInAngularZone(){if(!NgZone.isInAngularZone()){throw new Error('Expected to be in Angular Zone, but it is not!');}}/**
     * @return {?}
     */},{key:'assertNotInAngularZone',value:function assertNotInAngularZone(){if(NgZone.isInAngularZone()){throw new Error('Expected to not be in Angular Zone, but it is!');}}}]);return NgZone;}();var AnimationQueue=function(){/**
     * @param {?} _zone
     */function AnimationQueue(_zone){_classCallCheck(this,AnimationQueue);this._zone=_zone;this.entries=[];}/**
     * @param {?} player
     * @return {?}
     */_createClass(AnimationQueue,[{key:'enqueue',value:function enqueue(player){this.entries.push(player);}/**
     * @return {?}
     */},{key:'flush',value:function flush(){var _this9=this;// given that each animation player may set aside
// microtasks and rely on DOM-based events, this
// will cause Angular to run change detection after
// each request. This sidesteps the issue. If a user
// hooks into an animation via (@anim.start) or (@anim.done)
// then those methods will automatically trigger change
// detection by wrapping themselves inside of a zone
if(this.entries.length){this._zone.runOutsideAngular(function(){// this code is wrapped into a single promise such that the
// onStart and onDone player callbacks are triggered outside
// of the digest cycle of animations
Promise.resolve(null).then(function(){return _this9._triggerAnimations();});});}}/**
     * @return {?}
     */},{key:'_triggerAnimations',value:function _triggerAnimations(){NgZone.assertNotInAngularZone();while(this.entries.length){var/** @type {?} */player=this.entries.shift();// in the event that an animation throws an error then we do
// not want to re-run animations on any previous animations
// if they have already been kicked off beforehand
if(!player.hasStarted()){player.play();}}}}]);return AnimationQueue;}();AnimationQueue.decorators=[{type:Injectable}];/** @nocollapse */AnimationQueue.ctorParameters=function(){return[{type:NgZone}];};var DefaultIterableDifferFactory=function(){function DefaultIterableDifferFactory(){_classCallCheck(this,DefaultIterableDifferFactory);}/**
     * @param {?} obj
     * @return {?}
     */_createClass(DefaultIterableDifferFactory,[{key:'supports',value:function supports(obj){return isListLikeIterable(obj);}/**
     * @deprecated v4.0.0 - ChangeDetectorRef is not used and is no longer a parameter
     * @param {?=} cdRefOrTrackBy
     * @param {?=} trackByFn
     * @return {?}
     */},{key:'create',value:function create(cdRefOrTrackBy,trackByFn){return new DefaultIterableDiffer(trackByFn||cdRefOrTrackBy);}}]);return DefaultIterableDifferFactory;}();var/** @type {?} */trackByIdentity=function trackByIdentity(index,item){return item;};/**
 * @deprecated v4.0.0 - Should not be part of public API.
 */var DefaultIterableDiffer=function(){/**
     * @param {?=} _trackByFn
     */function DefaultIterableDiffer(_trackByFn){_classCallCheck(this,DefaultIterableDiffer);this._trackByFn=_trackByFn;this._length=null;this._collection=null;this._linkedRecords=null;this._unlinkedRecords=null;this._previousItHead=null;this._itHead=null;this._itTail=null;this._additionsHead=null;this._additionsTail=null;this._movesHead=null;this._movesTail=null;this._removalsHead=null;this._removalsTail=null;this._identityChangesHead=null;this._identityChangesTail=null;this._trackByFn=this._trackByFn||trackByIdentity;}/**
     * @return {?}
     */_createClass(DefaultIterableDiffer,[{key:'forEachItem',/**
     * @param {?} fn
     * @return {?}
     */value:function forEachItem(fn){var/** @type {?} */record=void 0;for(record=this._itHead;record!==null;record=record._next){fn(record);}}/**
     * @param {?} fn
     * @return {?}
     */},{key:'forEachOperation',value:function forEachOperation(fn){var/** @type {?} */nextIt=this._itHead;var/** @type {?} */nextRemove=this._removalsHead;var/** @type {?} */addRemoveOffset=0;var/** @type {?} */moveOffsets=null;while(nextIt||nextRemove){// Figure out which is the next record to process
// Order: remove, add, move
var/** @type {?} */record=!nextRemove||nextIt&&nextIt.currentIndex<getPreviousIndex(nextRemove,addRemoveOffset,moveOffsets)?nextIt:nextRemove;var/** @type {?} */adjPreviousIndex=getPreviousIndex(record,addRemoveOffset,moveOffsets);var/** @type {?} */currentIndex=record.currentIndex;// consume the item, and adjust the addRemoveOffset and update moveDistance if necessary
if(record===nextRemove){addRemoveOffset--;nextRemove=nextRemove._nextRemoved;}else{nextIt=nextIt._next;if(record.previousIndex==null){addRemoveOffset++;}else{// INVARIANT:  currentIndex < previousIndex
if(!moveOffsets)moveOffsets=[];var/** @type {?} */localMovePreviousIndex=adjPreviousIndex-addRemoveOffset;var/** @type {?} */localCurrentIndex=currentIndex-addRemoveOffset;if(localMovePreviousIndex!=localCurrentIndex){for(var/** @type {?} */i=0;i<localMovePreviousIndex;i++){var/** @type {?} */offset=i<moveOffsets.length?moveOffsets[i]:moveOffsets[i]=0;var/** @type {?} */index=offset+i;if(localCurrentIndex<=index&&index<localMovePreviousIndex){moveOffsets[i]=offset+1;}}var/** @type {?} */previousIndex=record.previousIndex;moveOffsets[previousIndex]=localCurrentIndex-localMovePreviousIndex;}}}if(adjPreviousIndex!==currentIndex){fn(record,adjPreviousIndex,currentIndex);}}}/**
     * @param {?} fn
     * @return {?}
     */},{key:'forEachPreviousItem',value:function forEachPreviousItem(fn){var/** @type {?} */record=void 0;for(record=this._previousItHead;record!==null;record=record._nextPrevious){fn(record);}}/**
     * @param {?} fn
     * @return {?}
     */},{key:'forEachAddedItem',value:function forEachAddedItem(fn){var/** @type {?} */record=void 0;for(record=this._additionsHead;record!==null;record=record._nextAdded){fn(record);}}/**
     * @param {?} fn
     * @return {?}
     */},{key:'forEachMovedItem',value:function forEachMovedItem(fn){var/** @type {?} */record=void 0;for(record=this._movesHead;record!==null;record=record._nextMoved){fn(record);}}/**
     * @param {?} fn
     * @return {?}
     */},{key:'forEachRemovedItem',value:function forEachRemovedItem(fn){var/** @type {?} */record=void 0;for(record=this._removalsHead;record!==null;record=record._nextRemoved){fn(record);}}/**
     * @param {?} fn
     * @return {?}
     */},{key:'forEachIdentityChange',value:function forEachIdentityChange(fn){var/** @type {?} */record=void 0;for(record=this._identityChangesHead;record!==null;record=record._nextIdentityChange){fn(record);}}/**
     * @param {?} collection
     * @return {?}
     */},{key:'diff',value:function diff(collection){if(isBlank(collection))collection=[];if(!isListLikeIterable(collection)){throw new Error('Error trying to diff \''+collection+'\'');}if(this.check(collection)){return this;}else{return null;}}/**
     * @return {?}
     */},{key:'onDestroy',value:function onDestroy(){}/**
     * @param {?} collection
     * @return {?}
     */},{key:'check',value:function check(collection){var _this10=this;this._reset();var/** @type {?} */record=this._itHead;var/** @type {?} */mayBeDirty=false;var/** @type {?} */index=void 0;var/** @type {?} */item=void 0;var/** @type {?} */itemTrackBy=void 0;if(Array.isArray(collection)){this._length=collection.length;for(var/** @type {?} */_index2=0;_index2<this._length;_index2++){item=collection[_index2];itemTrackBy=this._trackByFn(_index2,item);if(record===null||!looseIdentical(record.trackById,itemTrackBy)){record=this._mismatch(record,item,itemTrackBy,_index2);mayBeDirty=true;}else{if(mayBeDirty){// TODO(misko): can we limit this to duplicates only?
record=this._verifyReinsertion(record,item,itemTrackBy,_index2);}if(!looseIdentical(record.item,item))this._addIdentityChange(record,item);}record=record._next;}}else{index=0;iterateListLike(collection,function(item){itemTrackBy=_this10._trackByFn(index,item);if(record===null||!looseIdentical(record.trackById,itemTrackBy)){record=_this10._mismatch(record,item,itemTrackBy,index);mayBeDirty=true;}else{if(mayBeDirty){// TODO(misko): can we limit this to duplicates only?
record=_this10._verifyReinsertion(record,item,itemTrackBy,index);}if(!looseIdentical(record.item,item))_this10._addIdentityChange(record,item);}record=record._next;index++;});this._length=index;}this._truncate(record);this._collection=collection;return this.isDirty;}/**
     * @return {?}
     */},{key:'_reset',/**
     * Reset the state of the change objects to show no changes. This means set previousKey to
     * currentKey, and clear all of the queues (additions, moves, removals).
     * Set the previousIndexes of moved and added items to their currentIndexes
     * Reset the list of additions, moves and removals
     *
     * \@internal
     * @return {?}
     */value:function _reset(){if(this.isDirty){var/** @type {?} */record=void 0;var/** @type {?} */nextRecord=void 0;for(record=this._previousItHead=this._itHead;record!==null;record=record._next){record._nextPrevious=record._next;}for(record=this._additionsHead;record!==null;record=record._nextAdded){record.previousIndex=record.currentIndex;}this._additionsHead=this._additionsTail=null;for(record=this._movesHead;record!==null;record=nextRecord){record.previousIndex=record.currentIndex;nextRecord=record._nextMoved;}this._movesHead=this._movesTail=null;this._removalsHead=this._removalsTail=null;this._identityChangesHead=this._identityChangesTail=null;}}/**
     * This is the core function which handles differences between collections.
     *
     * - `record` is the record which we saw at this position last time. If null then it is a new
     *   item.
     * - `item` is the current item in the collection
     * - `index` is the position of the item in the collection
     *
     * \@internal
     * @param {?} record
     * @param {?} item
     * @param {?} itemTrackBy
     * @param {?} index
     * @return {?}
     */},{key:'_mismatch',value:function _mismatch(record,item,itemTrackBy,index){// The previous record after which we will append the current one.
var/** @type {?} */previousRecord=void 0;if(record===null){previousRecord=this._itTail;}else{previousRecord=record._prev;// Remove the record from the collection since we know it does not match the item.
this._remove(record);}// Attempt to see if we have seen the item before.
record=this._linkedRecords===null?null:this._linkedRecords.get(itemTrackBy,index);if(record!==null){// We have seen this before, we need to move it forward in the collection.
// But first we need to check if identity changed, so we can update in view if necessary
if(!looseIdentical(record.item,item))this._addIdentityChange(record,item);this._moveAfter(record,previousRecord,index);}else{// Never seen it, check evicted list.
record=this._unlinkedRecords===null?null:this._unlinkedRecords.get(itemTrackBy);if(record!==null){// It is an item which we have evicted earlier: reinsert it back into the list.
// But first we need to check if identity changed, so we can update in view if necessary
if(!looseIdentical(record.item,item))this._addIdentityChange(record,item);this._reinsertAfter(record,previousRecord,index);}else{// It is a new item: add it.
record=this._addAfter(new IterableChangeRecord_(item,itemTrackBy),previousRecord,index);}}return record;}/**
     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
     *
     * Use case: `[a, a]` => `[b, a, a]`
     *
     * If we did not have this check then the insertion of `b` would:
     *   1) evict first `a`
     *   2) insert `b` at `0` index.
     *   3) leave `a` at index `1` as is. <-- this is wrong!
     *   3) reinsert `a` at index 2. <-- this is wrong!
     *
     * The correct behavior is:
     *   1) evict first `a`
     *   2) insert `b` at `0` index.
     *   3) reinsert `a` at index 1.
     *   3) move `a` at from `1` to `2`.
     *
     *
     * Double check that we have not evicted a duplicate item. We need to check if the item type may
     * have already been removed:
     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
     * at the end.
     *
     * \@internal
     * @param {?} record
     * @param {?} item
     * @param {?} itemTrackBy
     * @param {?} index
     * @return {?}
     */},{key:'_verifyReinsertion',value:function _verifyReinsertion(record,item,itemTrackBy,index){var/** @type {?} */reinsertRecord=this._unlinkedRecords===null?null:this._unlinkedRecords.get(itemTrackBy);if(reinsertRecord!==null){record=this._reinsertAfter(reinsertRecord,record._prev,index);}else if(record.currentIndex!=index){record.currentIndex=index;this._addToMoves(record,index);}return record;}/**
     * Get rid of any excess {\@link IterableChangeRecord_}s from the previous collection
     *
     * - `record` The first excess {\@link IterableChangeRecord_}.
     *
     * \@internal
     * @param {?} record
     * @return {?}
     */},{key:'_truncate',value:function _truncate(record){// Anything after that needs to be removed;
while(record!==null){var/** @type {?} */nextRecord=record._next;this._addToRemovals(this._unlink(record));record=nextRecord;}if(this._unlinkedRecords!==null){this._unlinkedRecords.clear();}if(this._additionsTail!==null){this._additionsTail._nextAdded=null;}if(this._movesTail!==null){this._movesTail._nextMoved=null;}if(this._itTail!==null){this._itTail._next=null;}if(this._removalsTail!==null){this._removalsTail._nextRemoved=null;}if(this._identityChangesTail!==null){this._identityChangesTail._nextIdentityChange=null;}}/**
     * \@internal
     * @param {?} record
     * @param {?} prevRecord
     * @param {?} index
     * @return {?}
     */},{key:'_reinsertAfter',value:function _reinsertAfter(record,prevRecord,index){if(this._unlinkedRecords!==null){this._unlinkedRecords.remove(record);}var/** @type {?} */prev=record._prevRemoved;var/** @type {?} */next=record._nextRemoved;if(prev===null){this._removalsHead=next;}else{prev._nextRemoved=next;}if(next===null){this._removalsTail=prev;}else{next._prevRemoved=prev;}this._insertAfter(record,prevRecord,index);this._addToMoves(record,index);return record;}/**
     * \@internal
     * @param {?} record
     * @param {?} prevRecord
     * @param {?} index
     * @return {?}
     */},{key:'_moveAfter',value:function _moveAfter(record,prevRecord,index){this._unlink(record);this._insertAfter(record,prevRecord,index);this._addToMoves(record,index);return record;}/**
     * \@internal
     * @param {?} record
     * @param {?} prevRecord
     * @param {?} index
     * @return {?}
     */},{key:'_addAfter',value:function _addAfter(record,prevRecord,index){this._insertAfter(record,prevRecord,index);if(this._additionsTail===null){// todo(vicb)
// assert(this._additionsHead === null);
this._additionsTail=this._additionsHead=record;}else{// todo(vicb)
// assert(_additionsTail._nextAdded === null);
// assert(record._nextAdded === null);
this._additionsTail=this._additionsTail._nextAdded=record;}return record;}/**
     * \@internal
     * @param {?} record
     * @param {?} prevRecord
     * @param {?} index
     * @return {?}
     */},{key:'_insertAfter',value:function _insertAfter(record,prevRecord,index){// todo(vicb)
// assert(record != prevRecord);
// assert(record._next === null);
// assert(record._prev === null);
var/** @type {?} */next=prevRecord===null?this._itHead:prevRecord._next;// todo(vicb)
// assert(next != record);
// assert(prevRecord != record);
record._next=next;record._prev=prevRecord;if(next===null){this._itTail=record;}else{next._prev=record;}if(prevRecord===null){this._itHead=record;}else{prevRecord._next=record;}if(this._linkedRecords===null){this._linkedRecords=new _DuplicateMap();}this._linkedRecords.put(record);record.currentIndex=index;return record;}/**
     * \@internal
     * @param {?} record
     * @return {?}
     */},{key:'_remove',value:function _remove(record){return this._addToRemovals(this._unlink(record));}/**
     * \@internal
     * @param {?} record
     * @return {?}
     */},{key:'_unlink',value:function _unlink(record){if(this._linkedRecords!==null){this._linkedRecords.remove(record);}var/** @type {?} */prev=record._prev;var/** @type {?} */next=record._next;// todo(vicb)
// assert((record._prev = null) === null);
// assert((record._next = null) === null);
if(prev===null){this._itHead=next;}else{prev._next=next;}if(next===null){this._itTail=prev;}else{next._prev=prev;}return record;}/**
     * \@internal
     * @param {?} record
     * @param {?} toIndex
     * @return {?}
     */},{key:'_addToMoves',value:function _addToMoves(record,toIndex){// todo(vicb)
// assert(record._nextMoved === null);
if(record.previousIndex===toIndex){return record;}if(this._movesTail===null){// todo(vicb)
// assert(_movesHead === null);
this._movesTail=this._movesHead=record;}else{// todo(vicb)
// assert(_movesTail._nextMoved === null);
this._movesTail=this._movesTail._nextMoved=record;}return record;}/**
     * @param {?} record
     * @return {?}
     */},{key:'_addToRemovals',value:function _addToRemovals(record){if(this._unlinkedRecords===null){this._unlinkedRecords=new _DuplicateMap();}this._unlinkedRecords.put(record);record.currentIndex=null;record._nextRemoved=null;if(this._removalsTail===null){// todo(vicb)
// assert(_removalsHead === null);
this._removalsTail=this._removalsHead=record;record._prevRemoved=null;}else{// todo(vicb)
// assert(_removalsTail._nextRemoved === null);
// assert(record._nextRemoved === null);
record._prevRemoved=this._removalsTail;this._removalsTail=this._removalsTail._nextRemoved=record;}return record;}/**
     * \@internal
     * @param {?} record
     * @param {?} item
     * @return {?}
     */},{key:'_addIdentityChange',value:function _addIdentityChange(record,item){record.item=item;if(this._identityChangesTail===null){this._identityChangesTail=this._identityChangesHead=record;}else{this._identityChangesTail=this._identityChangesTail._nextIdentityChange=record;}return record;}/**
     * @return {?}
     */},{key:'toString',value:function toString(){var/** @type {?} */list=[];this.forEachItem(function(record){return list.push(record);});var/** @type {?} */previous=[];this.forEachPreviousItem(function(record){return previous.push(record);});var/** @type {?} */additions=[];this.forEachAddedItem(function(record){return additions.push(record);});var/** @type {?} */moves=[];this.forEachMovedItem(function(record){return moves.push(record);});var/** @type {?} */removals=[];this.forEachRemovedItem(function(record){return removals.push(record);});var/** @type {?} */identityChanges=[];this.forEachIdentityChange(function(record){return identityChanges.push(record);});return'collection: '+list.join(', ')+'\n'+'previous: '+previous.join(', ')+'\n'+'additions: '+additions.join(', ')+'\n'+'moves: '+moves.join(', ')+'\n'+'removals: '+removals.join(', ')+'\n'+'identityChanges: '+identityChanges.join(', ')+'\n';}},{key:'collection',get:function get(){return this._collection;}/**
     * @return {?}
     */},{key:'length',get:function get(){return this._length;}},{key:'isDirty',get:function get(){return this._additionsHead!==null||this._movesHead!==null||this._removalsHead!==null||this._identityChangesHead!==null;}}]);return DefaultIterableDiffer;}();/**
 * \@stable
 */var IterableChangeRecord_=function(){/**
     * @param {?} item
     * @param {?} trackById
     */function IterableChangeRecord_(item,trackById){_classCallCheck(this,IterableChangeRecord_);this.item=item;this.trackById=trackById;this.currentIndex=null;this.previousIndex=null;/** @internal */this._nextPrevious=null;/** @internal */this._prev=null;/** @internal */this._next=null;/** @internal */this._prevDup=null;/** @internal */this._nextDup=null;/** @internal */this._prevRemoved=null;/** @internal */this._nextRemoved=null;/** @internal */this._nextAdded=null;/** @internal */this._nextMoved=null;/** @internal */this._nextIdentityChange=null;}/**
     * @return {?}
     */_createClass(IterableChangeRecord_,[{key:'toString',value:function toString(){return this.previousIndex===this.currentIndex?stringify(this.item):stringify(this.item)+'['+stringify(this.previousIndex)+'->'+stringify(this.currentIndex)+']';}}]);return IterableChangeRecord_;}();var _DuplicateItemRecordList=function(){function _DuplicateItemRecordList(){_classCallCheck(this,_DuplicateItemRecordList);/** @internal */this._head=null;/** @internal */this._tail=null;}/**
     * Append the record to the list of duplicates.
     *
     * Note: by design all records in the list of duplicates hold the same value in record.item.
     * @param {?} record
     * @return {?}
     */_createClass(_DuplicateItemRecordList,[{key:'add',value:function add(record){if(this._head===null){this._head=this._tail=record;record._nextDup=null;record._prevDup=null;}else{// todo(vicb)
// assert(record.item ==  _head.item ||
//       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);
this._tail._nextDup=record;record._prevDup=this._tail;record._nextDup=null;this._tail=record;}}/**
     * @param {?} trackById
     * @param {?} afterIndex
     * @return {?}
     */},{key:'get',value:function get(trackById,afterIndex){var/** @type {?} */record=void 0;for(record=this._head;record!==null;record=record._nextDup){if((afterIndex===null||afterIndex<record.currentIndex)&&looseIdentical(record.trackById,trackById)){return record;}}return null;}/**
     * Remove one {\@link IterableChangeRecord_} from the list of duplicates.
     *
     * Returns whether the list of duplicates is empty.
     * @param {?} record
     * @return {?}
     */},{key:'remove',value:function remove(record){// todo(vicb)
// assert(() {
//  // verify that the record being removed is in the list.
//  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {
//    if (identical(cursor, record)) return true;
//  }
//  return false;
//});
var/** @type {?} */prev=record._prevDup;var/** @type {?} */next=record._nextDup;if(prev===null){this._head=next;}else{prev._nextDup=next;}if(next===null){this._tail=prev;}else{next._prevDup=prev;}return this._head===null;}}]);return _DuplicateItemRecordList;}();var _DuplicateMap=function(){function _DuplicateMap(){_classCallCheck(this,_DuplicateMap);this.map=new Map();}/**
     * @param {?} record
     * @return {?}
     */_createClass(_DuplicateMap,[{key:'put',value:function put(record){var/** @type {?} */key=record.trackById;var/** @type {?} */duplicates=this.map.get(key);if(!duplicates){duplicates=new _DuplicateItemRecordList();this.map.set(key,duplicates);}duplicates.add(record);}/**
     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we
     * have already iterated over, we use the afterIndex to pretend it is not there.
     *
     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
     * have any more `a`s needs to return the last `a` not the first or second.
     * @param {?} trackById
     * @param {?=} afterIndex
     * @return {?}
     */},{key:'get',value:function get(trackById){var afterIndex=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var/** @type {?} */key=trackById;var/** @type {?} */recordList=this.map.get(key);return recordList?recordList.get(trackById,afterIndex):null;}/**
     * Removes a {\@link IterableChangeRecord_} from the list of duplicates.
     *
     * The list of duplicates also is removed from the map if it gets empty.
     * @param {?} record
     * @return {?}
     */},{key:'remove',value:function remove(record){var/** @type {?} */key=record.trackById;var/** @type {?} */recordList=this.map.get(key);// Remove the list of duplicates when it gets empty
if(recordList.remove(record)){this.map.delete(key);}return record;}/**
     * @return {?}
     */},{key:'clear',/**
     * @return {?}
     */value:function clear(){this.map.clear();}/**
     * @return {?}
     */},{key:'toString',value:function toString(){return'_DuplicateMap('+stringify(this.map)+')';}},{key:'isEmpty',get:function get(){return this.map.size===0;}}]);return _DuplicateMap;}();/**
 * @param {?} item
 * @param {?} addRemoveOffset
 * @param {?} moveOffsets
 * @return {?}
 */function getPreviousIndex(item,addRemoveOffset,moveOffsets){var/** @type {?} */previousIndex=item.previousIndex;if(previousIndex===null)return previousIndex;var/** @type {?} */moveOffset=0;if(moveOffsets&&previousIndex<moveOffsets.length){moveOffset=moveOffsets[previousIndex];}return previousIndex+addRemoveOffset+moveOffset;}var DefaultKeyValueDifferFactory=function(){function DefaultKeyValueDifferFactory(){_classCallCheck(this,DefaultKeyValueDifferFactory);}/**
     * @param {?} obj
     * @return {?}
     */_createClass(DefaultKeyValueDifferFactory,[{key:'supports',value:function supports(obj){return obj instanceof Map||isJsObject(obj);}/**
     * @deprecated v4.0.0 - ChangeDetectorRef is not used and is no longer a parameter
     * @param {?=} cd
     * @return {?}
     */},{key:'create',value:function create(cd){return new DefaultKeyValueDiffer();}}]);return DefaultKeyValueDifferFactory;}();var DefaultKeyValueDiffer=function(){function DefaultKeyValueDiffer(){_classCallCheck(this,DefaultKeyValueDiffer);this._records=new Map();this._mapHead=null;this._previousMapHead=null;this._changesHead=null;this._changesTail=null;this._additionsHead=null;this._additionsTail=null;this._removalsHead=null;this._removalsTail=null;}/**
     * @return {?}
     */_createClass(DefaultKeyValueDiffer,[{key:'forEachItem',/**
     * @param {?} fn
     * @return {?}
     */value:function forEachItem(fn){var/** @type {?} */record=void 0;for(record=this._mapHead;record!==null;record=record._next){fn(record);}}/**
     * @param {?} fn
     * @return {?}
     */},{key:'forEachPreviousItem',value:function forEachPreviousItem(fn){var/** @type {?} */record=void 0;for(record=this._previousMapHead;record!==null;record=record._nextPrevious){fn(record);}}/**
     * @param {?} fn
     * @return {?}
     */},{key:'forEachChangedItem',value:function forEachChangedItem(fn){var/** @type {?} */record=void 0;for(record=this._changesHead;record!==null;record=record._nextChanged){fn(record);}}/**
     * @param {?} fn
     * @return {?}
     */},{key:'forEachAddedItem',value:function forEachAddedItem(fn){var/** @type {?} */record=void 0;for(record=this._additionsHead;record!==null;record=record._nextAdded){fn(record);}}/**
     * @param {?} fn
     * @return {?}
     */},{key:'forEachRemovedItem',value:function forEachRemovedItem(fn){var/** @type {?} */record=void 0;for(record=this._removalsHead;record!==null;record=record._nextRemoved){fn(record);}}/**
     * @param {?} map
     * @return {?}
     */},{key:'diff',value:function diff(map){if(!map){map=new Map();}else if(!(map instanceof Map||isJsObject(map))){throw new Error('Error trying to diff \''+map+'\'');}return this.check(map)?this:null;}/**
     * @return {?}
     */},{key:'onDestroy',value:function onDestroy(){}/**
     * @param {?} map
     * @return {?}
     */},{key:'check',value:function check(map){var _this11=this;this._reset();var/** @type {?} */records=this._records;var/** @type {?} */oldSeqRecord=this._mapHead;var/** @type {?} */lastOldSeqRecord=null;var/** @type {?} */lastNewSeqRecord=null;var/** @type {?} */seqChanged=false;this._forEach(map,function(value,key){var/** @type {?} */newSeqRecord=void 0;if(oldSeqRecord&&key===oldSeqRecord.key){newSeqRecord=oldSeqRecord;_this11._maybeAddToChanges(newSeqRecord,value);}else{seqChanged=true;if(oldSeqRecord!==null){_this11._removeFromSeq(lastOldSeqRecord,oldSeqRecord);_this11._addToRemovals(oldSeqRecord);}if(records.has(key)){newSeqRecord=records.get(key);_this11._maybeAddToChanges(newSeqRecord,value);}else{newSeqRecord=new KeyValueChangeRecord_(key);records.set(key,newSeqRecord);newSeqRecord.currentValue=value;_this11._addToAdditions(newSeqRecord);}}if(seqChanged){if(_this11._isInRemovals(newSeqRecord)){_this11._removeFromRemovals(newSeqRecord);}if(lastNewSeqRecord==null){_this11._mapHead=newSeqRecord;}else{lastNewSeqRecord._next=newSeqRecord;}}lastOldSeqRecord=oldSeqRecord;lastNewSeqRecord=newSeqRecord;oldSeqRecord=oldSeqRecord&&oldSeqRecord._next;});this._truncate(lastOldSeqRecord,oldSeqRecord);return this.isDirty;}/**
     * \@internal
     * @return {?}
     */},{key:'_reset',value:function _reset(){if(this.isDirty){var/** @type {?} */record=void 0;// Record the state of the mapping
for(record=this._previousMapHead=this._mapHead;record!==null;record=record._next){record._nextPrevious=record._next;}for(record=this._changesHead;record!==null;record=record._nextChanged){record.previousValue=record.currentValue;}for(record=this._additionsHead;record!=null;record=record._nextAdded){record.previousValue=record.currentValue;}this._changesHead=this._changesTail=null;this._additionsHead=this._additionsTail=null;this._removalsHead=this._removalsTail=null;}}/**
     * @param {?} lastRecord
     * @param {?} record
     * @return {?}
     */},{key:'_truncate',value:function _truncate(lastRecord,record){while(record!==null){if(lastRecord===null){this._mapHead=null;}else{lastRecord._next=null;}var/** @type {?} */nextRecord=record._next;this._addToRemovals(record);lastRecord=record;record=nextRecord;}for(var/** @type {?} */rec=this._removalsHead;rec!==null;rec=rec._nextRemoved){rec.previousValue=rec.currentValue;rec.currentValue=null;this._records.delete(rec.key);}}/**
     * @param {?} record
     * @param {?} newValue
     * @return {?}
     */},{key:'_maybeAddToChanges',value:function _maybeAddToChanges(record,newValue){if(!looseIdentical(newValue,record.currentValue)){record.previousValue=record.currentValue;record.currentValue=newValue;this._addToChanges(record);}}/**
     * @param {?} record
     * @return {?}
     */},{key:'_isInRemovals',value:function _isInRemovals(record){return record===this._removalsHead||record._nextRemoved!==null||record._prevRemoved!==null;}/**
     * @param {?} record
     * @return {?}
     */},{key:'_addToRemovals',value:function _addToRemovals(record){if(this._removalsHead===null){this._removalsHead=this._removalsTail=record;}else{this._removalsTail._nextRemoved=record;record._prevRemoved=this._removalsTail;this._removalsTail=record;}}/**
     * @param {?} prev
     * @param {?} record
     * @return {?}
     */},{key:'_removeFromSeq',value:function _removeFromSeq(prev,record){var/** @type {?} */next=record._next;if(prev===null){this._mapHead=next;}else{prev._next=next;}record._next=null;}/**
     * @param {?} record
     * @return {?}
     */},{key:'_removeFromRemovals',value:function _removeFromRemovals(record){var/** @type {?} */prev=record._prevRemoved;var/** @type {?} */next=record._nextRemoved;if(prev===null){this._removalsHead=next;}else{prev._nextRemoved=next;}if(next===null){this._removalsTail=prev;}else{next._prevRemoved=prev;}record._prevRemoved=record._nextRemoved=null;}/**
     * @param {?} record
     * @return {?}
     */},{key:'_addToAdditions',value:function _addToAdditions(record){if(this._additionsHead===null){this._additionsHead=this._additionsTail=record;}else{this._additionsTail._nextAdded=record;this._additionsTail=record;}}/**
     * @param {?} record
     * @return {?}
     */},{key:'_addToChanges',value:function _addToChanges(record){if(this._changesHead===null){this._changesHead=this._changesTail=record;}else{this._changesTail._nextChanged=record;this._changesTail=record;}}/**
     * @return {?}
     */},{key:'toString',value:function toString(){var/** @type {?} */items=[];var/** @type {?} */previous=[];var/** @type {?} */changes=[];var/** @type {?} */additions=[];var/** @type {?} */removals=[];var/** @type {?} */record=void 0;for(record=this._mapHead;record!==null;record=record._next){items.push(stringify(record));}for(record=this._previousMapHead;record!==null;record=record._nextPrevious){previous.push(stringify(record));}for(record=this._changesHead;record!==null;record=record._nextChanged){changes.push(stringify(record));}for(record=this._additionsHead;record!==null;record=record._nextAdded){additions.push(stringify(record));}for(record=this._removalsHead;record!==null;record=record._nextRemoved){removals.push(stringify(record));}return'map: '+items.join(', ')+'\n'+'previous: '+previous.join(', ')+'\n'+'additions: '+additions.join(', ')+'\n'+'changes: '+changes.join(', ')+'\n'+'removals: '+removals.join(', ')+'\n';}/**
     * \@internal
     * @param {?} obj
     * @param {?} fn
     * @return {?}
     */},{key:'_forEach',value:function _forEach(obj,fn){if(obj instanceof Map){obj.forEach(fn);}else{Object.keys(obj).forEach(function(k){return fn(obj[k],k);});}}},{key:'isDirty',get:function get(){return this._additionsHead!==null||this._changesHead!==null||this._removalsHead!==null;}}]);return DefaultKeyValueDiffer;}();/**
 * \@stable
 */var KeyValueChangeRecord_=function(){/**
     * @param {?} key
     */function KeyValueChangeRecord_(key){_classCallCheck(this,KeyValueChangeRecord_);this.key=key;this.previousValue=null;this.currentValue=null;/** @internal */this._nextPrevious=null;/** @internal */this._next=null;/** @internal */this._nextAdded=null;/** @internal */this._nextRemoved=null;/** @internal */this._prevRemoved=null;/** @internal */this._nextChanged=null;}/**
     * @return {?}
     */_createClass(KeyValueChangeRecord_,[{key:'toString',value:function toString(){return looseIdentical(this.previousValue,this.currentValue)?stringify(this.key):stringify(this.key)+'['+stringify(this.previousValue)+'->'+stringify(this.currentValue)+']';}}]);return KeyValueChangeRecord_;}();/**
 * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.
 * \@stable
 */var IterableDiffers=function(){/**
     * @param {?} factories
     */function IterableDiffers(factories){_classCallCheck(this,IterableDiffers);this.factories=factories;}/**
     * @param {?} factories
     * @param {?=} parent
     * @return {?}
     */_createClass(IterableDiffers,[{key:'find',/**
     * @param {?} iterable
     * @return {?}
     */value:function find(iterable){var/** @type {?} */factory=this.factories.find(function(f){return f.supports(iterable);});if(isPresent(factory)){return factory;}else{throw new Error('Cannot find a differ supporting object \''+iterable+'\' of type \''+getTypeNameForDebugging(iterable)+'\'');}}}],[{key:'create',value:function create(factories,parent){if(isPresent(parent)){var/** @type {?} */copied=parent.factories.slice();factories=factories.concat(copied);return new IterableDiffers(factories);}else{return new IterableDiffers(factories);}}/**
     * Takes an array of {\@link IterableDifferFactory} and returns a provider used to extend the
     * inherited {\@link IterableDiffers} instance with the provided factories and return a new
     * {\@link IterableDiffers} instance.
     *
     * The following example shows how to extend an existing list of factories,
     * which will only be applied to the injector for this component and its children.
     * This step is all that's required to make a new {\@link IterableDiffer} available.
     *
     * ### Example
     *
     * ```
     * \@Component({
     *   viewProviders: [
     *     IterableDiffers.extend([new ImmutableListDiffer()])
     *   ]
     * })
     * ```
     * @param {?} factories
     * @return {?}
     */},{key:'extend',value:function extend(factories){return{provide:IterableDiffers,useFactory:function useFactory(parent){if(!parent){// Typically would occur when calling IterableDiffers.extend inside of dependencies passed
// to
// bootstrap(), which would override default pipes instead of extending them.
throw new Error('Cannot extend IterableDiffers without a parent injector');}return IterableDiffers.create(factories,parent);},// Dependency technically isn't optional, but we can provide a better error message this way.
deps:[[IterableDiffers,new SkipSelf(),new Optional()]]};}}]);return IterableDiffers;}();/**
 * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.
 * \@stable
 */var KeyValueDiffers=function(){/**
     * @param {?} factories
     */function KeyValueDiffers(factories){_classCallCheck(this,KeyValueDiffers);this.factories=factories;}/**
     * @param {?} factories
     * @param {?=} parent
     * @return {?}
     */_createClass(KeyValueDiffers,[{key:'find',/**
     * @param {?} kv
     * @return {?}
     */value:function find(kv){var/** @type {?} */factory=this.factories.find(function(f){return f.supports(kv);});if(factory){return factory;}throw new Error('Cannot find a differ supporting object \''+kv+'\'');}}],[{key:'create',value:function create(factories,parent){if(parent){var/** @type {?} */copied=parent.factories.slice();factories=factories.concat(copied);}return new KeyValueDiffers(factories);}/**
     * Takes an array of {\@link KeyValueDifferFactory} and returns a provider used to extend the
     * inherited {\@link KeyValueDiffers} instance with the provided factories and return a new
     * {\@link KeyValueDiffers} instance.
     *
     * The following example shows how to extend an existing list of factories,
     * which will only be applied to the injector for this component and its children.
     * This step is all that's required to make a new {\@link KeyValueDiffer} available.
     *
     * ### Example
     *
     * ```
     * \@Component({
     *   viewProviders: [
     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
     *   ]
     * })
     * ```
     * @param {?} factories
     * @return {?}
     */},{key:'extend',value:function extend(factories){return{provide:KeyValueDiffers,useFactory:function useFactory(parent){if(!parent){// Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed
// to bootstrap(), which would override default pipes instead of extending them.
throw new Error('Cannot extend KeyValueDiffers without a parent injector');}return KeyValueDiffers.create(factories,parent);},// Dependency technically isn't optional, but we can provide a better error message this way.
deps:[[KeyValueDiffers,new SkipSelf(),new Optional()]]};}}]);return KeyValueDiffers;}();/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */function devModeEqual(a,b){if(isListLikeIterable(a)&&isListLikeIterable(b)){return areIterablesEqual(a,b,devModeEqual);}else if(!isListLikeIterable(a)&&!isPrimitive(a)&&!isListLikeIterable(b)&&!isPrimitive(b)){return true;}else{return looseIdentical(a,b);}}/**
 * Indicates that the result of a {\@link Pipe} transformation has changed even though the
 * reference
 * has not changed.
 *
 * The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.
 *
 * Example:
 *
 * ```
 * if (this._latestValue === this._latestReturnedValue) {
 *    return this._latestReturnedValue;
 *  } else {
 *    this._latestReturnedValue = this._latestValue;
 *    return WrappedValue.wrap(this._latestValue); // this will force update
 *  }
 * ```
 * \@stable
 */var WrappedValue=function(){/**
     * @param {?} wrapped
     */function WrappedValue(wrapped){_classCallCheck(this,WrappedValue);this.wrapped=wrapped;}/**
     * @param {?} value
     * @return {?}
     */_createClass(WrappedValue,null,[{key:'wrap',value:function wrap(value){return new WrappedValue(value);}}]);return WrappedValue;}();/**
 * Helper class for unwrapping WrappedValue s
 */var ValueUnwrapper=function(){function ValueUnwrapper(){_classCallCheck(this,ValueUnwrapper);this.hasWrappedValue=false;}/**
     * @param {?} value
     * @return {?}
     */_createClass(ValueUnwrapper,[{key:'unwrap',value:function unwrap(value){if(value instanceof WrappedValue){this.hasWrappedValue=true;return value.wrapped;}return value;}/**
     * @return {?}
     */},{key:'reset',value:function reset(){this.hasWrappedValue=false;}}]);return ValueUnwrapper;}();/**
 * Represents a basic change from a previous to a new value.
 * \@stable
 */var SimpleChange=function(){/**
     * @param {?} previousValue
     * @param {?} currentValue
     * @param {?} firstChange
     */function SimpleChange(previousValue,currentValue,firstChange){_classCallCheck(this,SimpleChange);this.previousValue=previousValue;this.currentValue=currentValue;this.firstChange=firstChange;}/**
     * Check whether the new value is the first value assigned.
     * @return {?}
     */_createClass(SimpleChange,[{key:'isFirstChange',value:function isFirstChange(){return this.firstChange;}}]);return SimpleChange;}();/**
 * \@stable
 * @abstract
 */var ChangeDetectorRef=function(){function ChangeDetectorRef(){_classCallCheck(this,ChangeDetectorRef);}_createClass(ChangeDetectorRef,[{key:'markForCheck',/**
     * Marks all {\@link ChangeDetectionStrategy#OnPush} ancestors as to be checked.
     *
     * <!-- TODO: Add a link to a chapter on OnPush components -->
     *
     * ### Example ([live demo](http://plnkr.co/edit/GC512b?p=preview))
     *
     * ```typescript
     * \@Component({
     *   selector: 'cmp',
     *   changeDetection: ChangeDetectionStrategy.OnPush,
     *   template: `Number of ticks: {{numberOfTicks}}`
     * })
     * class Cmp {
     *   numberOfTicks = 0;
     *
     *   constructor(ref: ChangeDetectorRef) {
     *     setInterval(() => {
     *       this.numberOfTicks ++
     *       // the following is required, otherwise the view will not be updated
     *       this.ref.markForCheck();
     *     }, 1000);
     *   }
     * }
     *
     * \@Component({
     *   selector: 'app',
     *   changeDetection: ChangeDetectionStrategy.OnPush,
     *   template: `
     *     <cmp><cmp>
     *   `,
     * })
     * class App {
     * }
     * ```
     * @abstract
     * @return {?}
     */value:function markForCheck(){}/**
     * Detaches the change detector from the change detector tree.
     *
     * The detached change detector will not be checked until it is reattached.
     *
     * This can also be used in combination with {\@link ChangeDetectorRef#detectChanges} to implement
     * local change
     * detection checks.
     *
     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
     *
     * ### Example
     *
     * The following example defines a component with a large list of readonly data.
     * Imagine the data changes constantly, many times per second. For performance reasons,
     * we want to check and update the list every five seconds. We can do that by detaching
     * the component's change detector and doing a local check every five seconds.
     *
     * ```typescript
     * class DataProvider {
     *   // in a real application the returned data will be different every time
     *   get data() {
     *     return [1,2,3,4,5];
     *   }
     * }
     *
     * \@Component({
     *   selector: 'giant-list',
     *   template: `
     *     <li *ngFor="let d of dataProvider.data">Data {{d}}</lig>
     *   `,
     * })
     * class GiantList {
     *   constructor(private ref: ChangeDetectorRef, private dataProvider:DataProvider) {
     *     ref.detach();
     *     setInterval(() => {
     *       this.ref.detectChanges();
     *     }, 5000);
     *   }
     * }
     *
     * \@Component({
     *   selector: 'app',
     *   providers: [DataProvider],
     *   template: `
     *     <giant-list><giant-list>
     *   `,
     * })
     * class App {
     * }
     * ```
     * @abstract
     * @return {?}
     */},{key:'detach',value:function detach(){}/**
     * Checks the change detector and its children.
     *
     * This can also be used in combination with {\@link ChangeDetectorRef#detach} to implement local
     * change detection
     * checks.
     *
     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
     *
     * ### Example
     *
     * The following example defines a component with a large list of readonly data.
     * Imagine, the data changes constantly, many times per second. For performance reasons,
     * we want to check and update the list every five seconds.
     *
     * We can do that by detaching the component's change detector and doing a local change detection
     * check
     * every five seconds.
     *
     * See {\@link ChangeDetectorRef#detach} for more information.
     * @abstract
     * @return {?}
     */},{key:'detectChanges',value:function detectChanges(){}/**
     * Checks the change detector and its children, and throws if any changes are detected.
     *
     * This is used in development mode to verify that running change detection doesn't introduce
     * other changes.
     * @abstract
     * @return {?}
     */},{key:'checkNoChanges',value:function checkNoChanges(){}/**
     * Reattach the change detector to the change detector tree.
     *
     * This also marks OnPush ancestors as to be checked. This reattached change detector will be
     * checked during the next change detection run.
     *
     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
     *
     * ### Example ([live demo](http://plnkr.co/edit/aUhZha?p=preview))
     *
     * The following example creates a component displaying `live` data. The component will detach
     * its change detector from the main change detector tree when the component's live property
     * is set to false.
     *
     * ```typescript
     * class DataProvider {
     *   data = 1;
     *
     *   constructor() {
     *     setInterval(() => {
     *       this.data = this.data * 2;
     *     }, 500);
     *   }
     * }
     *
     * \@Component({
     *   selector: 'live-data',
     *   inputs: ['live'],
     *   template: 'Data: {{dataProvider.data}}'
     * })
     * class LiveData {
     *   constructor(private ref: ChangeDetectorRef, private dataProvider:DataProvider) {}
     *
     *   set live(value) {
     *     if (value)
     *       this.ref.reattach();
     *     else
     *       this.ref.detach();
     *   }
     * }
     *
     * \@Component({
     *   selector: 'app',
     *   providers: [DataProvider],
     *   template: `
     *     Live Update: <input type="checkbox" [(ngModel)]="live">
     *     <live-data [live]="live"><live-data>
     *   `,
     * })
     * class App {
     *   live = true;
     * }
     * ```
     * @abstract
     * @return {?}
     */},{key:'reattach',value:function reattach(){}}]);return ChangeDetectorRef;}();/**
 * Structural diffing for `Object`s and `Map`s.
 */var/** @type {?} */keyValDiff=[new DefaultKeyValueDifferFactory()];/**
 * Structural diffing for `Iterable` types such as `Array`s.
 */var/** @type {?} */iterableDiff=[new DefaultIterableDifferFactory()];var/** @type {?} */defaultIterableDiffers=new IterableDiffers(iterableDiff);var/** @type {?} */defaultKeyValueDiffers=new KeyValueDiffers(keyValDiff);/**
 * @deprecated Use `RendererTypeV2` (and `RendererV2`) instead.
 */var RenderComponentType=/**
     * @param {?} id
     * @param {?} templateUrl
     * @param {?} slotCount
     * @param {?} encapsulation
     * @param {?} styles
     * @param {?} animations
     */function RenderComponentType(id,templateUrl,slotCount,encapsulation,styles,animations){_classCallCheck(this,RenderComponentType);this.id=id;this.templateUrl=templateUrl;this.slotCount=slotCount;this.encapsulation=encapsulation;this.styles=styles;this.animations=animations;};/**
 * @deprecated Debug info is handeled internally in the view engine now.
 * @abstract
 */var RenderDebugInfo=function(){function RenderDebugInfo(){_classCallCheck(this,RenderDebugInfo);}_createClass(RenderDebugInfo,[{key:'injector',/**
     * @abstract
     * @return {?}
     */value:function injector(){}/**
     * @abstract
     * @return {?}
     */},{key:'component',value:function component(){}/**
     * @abstract
     * @return {?}
     */},{key:'providerTokens',value:function providerTokens(){}/**
     * @abstract
     * @return {?}
     */},{key:'references',value:function references(){}/**
     * @abstract
     * @return {?}
     */},{key:'context',value:function context(){}/**
     * @abstract
     * @return {?}
     */},{key:'source',value:function source(){}}]);return RenderDebugInfo;}();/**
 * @deprecated Use the `RendererV2` instead.
 * @abstract
 */var RendererV1=function(){function RendererV1(){_classCallCheck(this,RendererV1);}_createClass(RendererV1,[{key:'selectRootElement',/**
     * @abstract
     * @param {?} selectorOrNode
     * @param {?=} debugInfo
     * @return {?}
     */value:function selectRootElement(selectorOrNode,debugInfo){}/**
     * @abstract
     * @param {?} parentElement
     * @param {?} name
     * @param {?=} debugInfo
     * @return {?}
     */},{key:'createElement',value:function createElement(parentElement,name,debugInfo){}/**
     * @abstract
     * @param {?} hostElement
     * @return {?}
     */},{key:'createViewRoot',value:function createViewRoot(hostElement){}/**
     * @abstract
     * @param {?} parentElement
     * @param {?=} debugInfo
     * @return {?}
     */},{key:'createTemplateAnchor',value:function createTemplateAnchor(parentElement,debugInfo){}/**
     * @abstract
     * @param {?} parentElement
     * @param {?} value
     * @param {?=} debugInfo
     * @return {?}
     */},{key:'createText',value:function createText(parentElement,value,debugInfo){}/**
     * @abstract
     * @param {?} parentElement
     * @param {?} nodes
     * @return {?}
     */},{key:'projectNodes',value:function projectNodes(parentElement,nodes){}/**
     * @abstract
     * @param {?} node
     * @param {?} viewRootNodes
     * @return {?}
     */},{key:'attachViewAfter',value:function attachViewAfter(node,viewRootNodes){}/**
     * @abstract
     * @param {?} viewRootNodes
     * @return {?}
     */},{key:'detachView',value:function detachView(viewRootNodes){}/**
     * @abstract
     * @param {?} hostElement
     * @param {?} viewAllNodes
     * @return {?}
     */},{key:'destroyView',value:function destroyView(hostElement,viewAllNodes){}/**
     * @abstract
     * @param {?} renderElement
     * @param {?} name
     * @param {?} callback
     * @return {?}
     */},{key:'listen',value:function listen(renderElement,name,callback){}/**
     * @abstract
     * @param {?} target
     * @param {?} name
     * @param {?} callback
     * @return {?}
     */},{key:'listenGlobal',value:function listenGlobal(target,name,callback){}/**
     * @abstract
     * @param {?} renderElement
     * @param {?} propertyName
     * @param {?} propertyValue
     * @return {?}
     */},{key:'setElementProperty',value:function setElementProperty(renderElement,propertyName,propertyValue){}/**
     * @abstract
     * @param {?} renderElement
     * @param {?} attributeName
     * @param {?} attributeValue
     * @return {?}
     */},{key:'setElementAttribute',value:function setElementAttribute(renderElement,attributeName,attributeValue){}/**
     * Used only in debug mode to serialize property changes to dom nodes as attributes.
     * @abstract
     * @param {?} renderElement
     * @param {?} propertyName
     * @param {?} propertyValue
     * @return {?}
     */},{key:'setBindingDebugInfo',value:function setBindingDebugInfo(renderElement,propertyName,propertyValue){}/**
     * @abstract
     * @param {?} renderElement
     * @param {?} className
     * @param {?} isAdd
     * @return {?}
     */},{key:'setElementClass',value:function setElementClass(renderElement,className,isAdd){}/**
     * @abstract
     * @param {?} renderElement
     * @param {?} styleName
     * @param {?} styleValue
     * @return {?}
     */},{key:'setElementStyle',value:function setElementStyle(renderElement,styleName,styleValue){}/**
     * @abstract
     * @param {?} renderElement
     * @param {?} methodName
     * @param {?=} args
     * @return {?}
     */},{key:'invokeElementMethod',value:function invokeElementMethod(renderElement,methodName,args){}/**
     * @abstract
     * @param {?} renderNode
     * @param {?} text
     * @return {?}
     */},{key:'setText',value:function setText(renderNode,text){}/**
     * @abstract
     * @param {?} element
     * @param {?} startingStyles
     * @param {?} keyframes
     * @param {?} duration
     * @param {?} delay
     * @param {?} easing
     * @param {?=} previousPlayers
     * @return {?}
     */},{key:'animate',value:function animate(element,startingStyles,keyframes,duration,delay,easing,previousPlayers){}}]);return RendererV1;}();var/** @type {?} */RendererV2Interceptor=new InjectionToken('RendererV2Interceptor');/**
 * Injectable service that provides a low-level interface for modifying the UI.
 *
 * Use this service to bypass Angular's templating and make custom UI changes that can't be
 * expressed declaratively. For example if you need to set a property or an attribute whose name is
 * not statically known, use {\@link #setElementProperty} or {\@link #setElementAttribute}
 * respectively.
 *
 * If you are implementing a custom renderer, you must implement this interface.
 *
 * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.
 *
 * @deprecated Use `RendererFactoryV2` instead.
 * @abstract
 */var RootRenderer=function(){function RootRenderer(){_classCallCheck(this,RootRenderer);}_createClass(RootRenderer,[{key:'renderComponent',/**
     * @abstract
     * @param {?} componentType
     * @return {?}
     */value:function renderComponent(componentType){}}]);return RootRenderer;}();/**
 * \@experimental
 * @abstract
 */var RendererFactoryV2=function(){function RendererFactoryV2(){_classCallCheck(this,RendererFactoryV2);}_createClass(RendererFactoryV2,[{key:'createRenderer',/**
     * @abstract
     * @param {?} hostElement
     * @param {?} type
     * @return {?}
     */value:function createRenderer(hostElement,type){}}]);return RendererFactoryV2;}();/**
 * \@experimental
 * @abstract
 */var RendererV2=function(){function RendererV2(){_classCallCheck(this,RendererV2);}_createClass(RendererV2,[{key:'data',/**
     * This field can be used to store arbitrary data on this renderer instance.
     * This is useful for renderers that delegate to other renderers.
     * @abstract
     * @return {?}
     */value:function data(){}/**
     * @abstract
     * @return {?}
     */},{key:'destroy',value:function destroy(){}/**
     * @abstract
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */},{key:'createElement',value:function createElement(name,namespace){}/**
     * @abstract
     * @param {?} value
     * @return {?}
     */},{key:'createComment',value:function createComment(value){}/**
     * @abstract
     * @param {?} value
     * @return {?}
     */},{key:'createText',value:function createText(value){}/**
     * @abstract
     * @param {?} parent
     * @param {?} newChild
     * @return {?}
     */},{key:'appendChild',value:function appendChild(parent,newChild){}/**
     * @abstract
     * @param {?} parent
     * @param {?} newChild
     * @param {?} refChild
     * @return {?}
     */},{key:'insertBefore',value:function insertBefore(parent,newChild,refChild){}/**
     * @abstract
     * @param {?} parent
     * @param {?} oldChild
     * @return {?}
     */},{key:'removeChild',value:function removeChild(parent,oldChild){}/**
     * @abstract
     * @param {?} selectorOrNode
     * @return {?}
     */},{key:'selectRootElement',value:function selectRootElement(selectorOrNode){}/**
     * Attention: On WebWorkers, this will always return a value,
     * as we are asking for a result synchronously. I.e.
     * the caller can't rely on checking whether this is null or not.
     * @abstract
     * @param {?} node
     * @return {?}
     */},{key:'parentNode',value:function parentNode(node){}/**
     * Attention: On WebWorkers, this will always return a value,
     * as we are asking for a result synchronously. I.e.
     * the caller can't rely on checking whether this is null or not.
     * @abstract
     * @param {?} node
     * @return {?}
     */},{key:'nextSibling',value:function nextSibling(node){}/**
     * @abstract
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @param {?=} namespace
     * @return {?}
     */},{key:'setAttribute',value:function setAttribute(el,name,value,namespace){}/**
     * @abstract
     * @param {?} el
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */},{key:'removeAttribute',value:function removeAttribute(el,name,namespace){}/**
     * @abstract
     * @param {?} el
     * @param {?} name
     * @return {?}
     */},{key:'addClass',value:function addClass(el,name){}/**
     * @abstract
     * @param {?} el
     * @param {?} name
     * @return {?}
     */},{key:'removeClass',value:function removeClass(el,name){}/**
     * @abstract
     * @param {?} el
     * @param {?} style
     * @param {?} value
     * @param {?} hasVendorPrefix
     * @param {?} hasImportant
     * @return {?}
     */},{key:'setStyle',value:function setStyle(el,style,value,hasVendorPrefix,hasImportant){}/**
     * @abstract
     * @param {?} el
     * @param {?} style
     * @param {?} hasVendorPrefix
     * @return {?}
     */},{key:'removeStyle',value:function removeStyle(el,style,hasVendorPrefix){}/**
     * @abstract
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @return {?}
     */},{key:'setProperty',value:function setProperty(el,name,value){}/**
     * @abstract
     * @param {?} node
     * @param {?} value
     * @return {?}
     */},{key:'setValue',value:function setValue(node,value){}/**
     * @abstract
     * @param {?} target
     * @param {?} eventName
     * @param {?} callback
     * @return {?}
     */},{key:'listen',value:function listen(target,eventName,callback){}}]);return RendererV2;}();var SecurityContext={};SecurityContext.NONE=0;SecurityContext.HTML=1;SecurityContext.STYLE=2;SecurityContext.SCRIPT=3;SecurityContext.URL=4;SecurityContext.RESOURCE_URL=5;SecurityContext[SecurityContext.NONE]="NONE";SecurityContext[SecurityContext.HTML]="HTML";SecurityContext[SecurityContext.STYLE]="STYLE";SecurityContext[SecurityContext.SCRIPT]="SCRIPT";SecurityContext[SecurityContext.URL]="URL";SecurityContext[SecurityContext.RESOURCE_URL]="RESOURCE_URL";/**
 * Sanitizer is used by the views to sanitize potentially dangerous values.
 *
 * \@stable
 * @abstract
 */var Sanitizer=function(){function Sanitizer(){_classCallCheck(this,Sanitizer);}_createClass(Sanitizer,[{key:'sanitize',/**
     * @abstract
     * @param {?} context
     * @param {?} value
     * @return {?}
     */value:function sanitize(context,value){}}]);return Sanitizer;}();/**
 * An error thrown if application changes model breaking the top-down data flow.
 *
 * This exception is only thrown in dev mode.
 *
 * <!-- TODO: Add a link once the dev mode option is configurable -->
 *
 * ### Example
 *
 * ```typescript
 * \@Component({
 *   selector: 'parent',
 *   template: '<child [prop]="parentProp"></child>',
 * })
 * class Parent {
 *   parentProp = 'init';
 * }
 *
 * \@Directive({selector: 'child', inputs: ['prop']})
 * class Child {
 *   constructor(public parent: Parent) {}
 *
 *   set prop(v) {
 *     // this updates the parent property, which is disallowed during change detection
 *     // this will result in ExpressionChangedAfterItHasBeenCheckedError
 *     this.parent.parentProp = 'updated';
 *   }
 * }
 * ```
 * @param {?} oldValue
 * @param {?} currValue
 * @param {?} isFirstCheck
 * @return {?}
 */function expressionChangedAfterItHasBeenCheckedError(oldValue,currValue,isFirstCheck){var/** @type {?} */msg='Expression has changed after it was checked. Previous value: \''+oldValue+'\'. Current value: \''+currValue+'\'.';if(isFirstCheck){msg+=' It seems like the view has been created after its parent and its children have been dirty checked.'+' Has it been created in a change detection hook ?';}var/** @type {?} */error=Error(msg);error[ERROR_TYPE]=expressionChangedAfterItHasBeenCheckedError;return error;}/**
 * Thrown when an exception was raised during view creation, change detection or destruction.
 *
 * This error wraps the original exception to attach additional contextual information that can
 * be useful for debugging.
 * @param {?} originalError
 * @param {?} context
 * @return {?}
 */function viewWrappedError(originalError,context){var/** @type {?} */error=wrappedError('Error in '+context.source,originalError);error[ERROR_DEBUG_CONTEXT]=context;error[ERROR_TYPE]=viewWrappedError;return error;}/**
 * Thrown when a destroyed view is used.
 *
 * This error indicates a bug in the framework.
 *
 * This is an internal Angular error.
 * @param {?} details
 * @return {?}
 */function viewDestroyedError(details){return Error('Attempt to use a destroyed view: '+details);}var ViewUtils=function(){/**
     * @param {?} _renderer
     * @param {?} sanitizer
     * @param {?} animationQueue
     */function ViewUtils(_renderer,sanitizer,animationQueue){_classCallCheck(this,ViewUtils);this._renderer=_renderer;this.animationQueue=animationQueue;this.sanitizer=sanitizer;}/**
     * \@internal
     * @param {?} renderComponentType
     * @return {?}
     */_createClass(ViewUtils,[{key:'renderComponent',value:function renderComponent(renderComponentType){return this._renderer.renderComponent(renderComponentType);}}]);return ViewUtils;}();ViewUtils.decorators=[{type:Injectable}];/** @nocollapse */ViewUtils.ctorParameters=function(){return[{type:RootRenderer},{type:Sanitizer},{type:AnimationQueue}];};var/** @type {?} */nextRenderComponentTypeId=0;/**
 * @param {?} templateUrl
 * @param {?} slotCount
 * @param {?} encapsulation
 * @param {?} styles
 * @param {?} animations
 * @return {?}
 */function createRenderComponentType(templateUrl,slotCount,encapsulation,styles,animations){return new RenderComponentType(''+nextRenderComponentTypeId++,templateUrl,slotCount,encapsulation,styles,animations);}/**
 * @param {?} e
 * @param {?} array
 * @return {?}
 */function addToArray(e,array){array.push(e);}/**
 * @param {?} valueCount
 * @param {?} constAndInterp
 * @return {?}
 */function interpolate(valueCount,constAndInterp){var/** @type {?} */result='';for(var/** @type {?} */i=0;i<valueCount*2;i=i+2){result=result+constAndInterp[i]+_toStringWithNull(constAndInterp[i+1]);}return result+constAndInterp[valueCount*2];}/**
 * @param {?} valueCount
 * @param {?} c0
 * @param {?} a1
 * @param {?} c1
 * @param {?=} a2
 * @param {?=} c2
 * @param {?=} a3
 * @param {?=} c3
 * @param {?=} a4
 * @param {?=} c4
 * @param {?=} a5
 * @param {?=} c5
 * @param {?=} a6
 * @param {?=} c6
 * @param {?=} a7
 * @param {?=} c7
 * @param {?=} a8
 * @param {?=} c8
 * @param {?=} a9
 * @param {?=} c9
 * @return {?}
 */function inlineInterpolate(valueCount,c0,a1,c1,a2,c2,a3,c3,a4,c4,a5,c5,a6,c6,a7,c7,a8,c8,a9,c9){switch(valueCount){case 1:return c0+_toStringWithNull(a1)+c1;case 2:return c0+_toStringWithNull(a1)+c1+_toStringWithNull(a2)+c2;case 3:return c0+_toStringWithNull(a1)+c1+_toStringWithNull(a2)+c2+_toStringWithNull(a3)+c3;case 4:return c0+_toStringWithNull(a1)+c1+_toStringWithNull(a2)+c2+_toStringWithNull(a3)+c3+_toStringWithNull(a4)+c4;case 5:return c0+_toStringWithNull(a1)+c1+_toStringWithNull(a2)+c2+_toStringWithNull(a3)+c3+_toStringWithNull(a4)+c4+_toStringWithNull(a5)+c5;case 6:return c0+_toStringWithNull(a1)+c1+_toStringWithNull(a2)+c2+_toStringWithNull(a3)+c3+_toStringWithNull(a4)+c4+_toStringWithNull(a5)+c5+_toStringWithNull(a6)+c6;case 7:return c0+_toStringWithNull(a1)+c1+_toStringWithNull(a2)+c2+_toStringWithNull(a3)+c3+_toStringWithNull(a4)+c4+_toStringWithNull(a5)+c5+_toStringWithNull(a6)+c6+_toStringWithNull(a7)+c7;case 8:return c0+_toStringWithNull(a1)+c1+_toStringWithNull(a2)+c2+_toStringWithNull(a3)+c3+_toStringWithNull(a4)+c4+_toStringWithNull(a5)+c5+_toStringWithNull(a6)+c6+_toStringWithNull(a7)+c7+_toStringWithNull(a8)+c8;case 9:return c0+_toStringWithNull(a1)+c1+_toStringWithNull(a2)+c2+_toStringWithNull(a3)+c3+_toStringWithNull(a4)+c4+_toStringWithNull(a5)+c5+_toStringWithNull(a6)+c6+_toStringWithNull(a7)+c7+_toStringWithNull(a8)+c8+_toStringWithNull(a9)+c9;default:throw new Error('Does not support more than 9 expressions');}}/**
 * @param {?} v
 * @return {?}
 */function _toStringWithNull(v){return v!=null?v.toString():'';}/**
 * @param {?} view
 * @param {?} oldValue
 * @param {?} newValue
 * @param {?} forceUpdate
 * @return {?}
 */function checkBinding(view,oldValue,newValue,forceUpdate){var/** @type {?} */isFirstCheck=view.numberOfChecks===0;if(view.throwOnChange){if(isFirstCheck||!devModeEqual(oldValue,newValue)){throw expressionChangedAfterItHasBeenCheckedError(oldValue,newValue,isFirstCheck);}return false;}else{return isFirstCheck||forceUpdate||!looseIdentical(oldValue,newValue);}}/**
 * @param {?} view
 * @param {?} oldValue
 * @param {?} newValue
 * @param {?} forceUpdate
 * @return {?}
 */function checkBindingChange(view,oldValue,newValue,forceUpdate){if(checkBinding(view,oldValue,newValue,forceUpdate)){return new SimpleChange(oldValue,newValue,view.numberOfChecks===0);}}/**
 * @param {?} view
 * @param {?} renderElement
 * @param {?} oldValue
 * @param {?} newValue
 * @param {?} forceUpdate
 * @return {?}
 */function checkRenderText(view,renderElement,oldValue,newValue,forceUpdate){if(checkBinding(view,oldValue,newValue,forceUpdate)){view.renderer.setText(renderElement,newValue);}}/**
 * @param {?} view
 * @param {?} renderElement
 * @param {?} propName
 * @param {?} oldValue
 * @param {?} newValue
 * @param {?} forceUpdate
 * @param {?} securityContext
 * @return {?}
 */function checkRenderProperty(view,renderElement,propName,oldValue,newValue,forceUpdate,securityContext){if(checkBinding(view,oldValue,newValue,forceUpdate)){var/** @type {?} */renderValue=securityContext?view.viewUtils.sanitizer.sanitize(securityContext,newValue):newValue;view.renderer.setElementProperty(renderElement,propName,renderValue);}}/**
 * @param {?} view
 * @param {?} renderElement
 * @param {?} attrName
 * @param {?} oldValue
 * @param {?} newValue
 * @param {?} forceUpdate
 * @param {?} securityContext
 * @return {?}
 */function checkRenderAttribute(view,renderElement,attrName,oldValue,newValue,forceUpdate,securityContext){if(checkBinding(view,oldValue,newValue,forceUpdate)){var/** @type {?} */renderValue=securityContext?view.viewUtils.sanitizer.sanitize(securityContext,newValue):newValue;renderValue=renderValue!=null?renderValue.toString():null;view.renderer.setElementAttribute(renderElement,attrName,renderValue);}}/**
 * @param {?} view
 * @param {?} renderElement
 * @param {?} className
 * @param {?} oldValue
 * @param {?} newValue
 * @param {?} forceUpdate
 * @return {?}
 */function checkRenderClass(view,renderElement,className,oldValue,newValue,forceUpdate){if(checkBinding(view,oldValue,newValue,forceUpdate)){view.renderer.setElementClass(renderElement,className,newValue);}}/**
 * @param {?} view
 * @param {?} renderElement
 * @param {?} styleName
 * @param {?} unit
 * @param {?} oldValue
 * @param {?} newValue
 * @param {?} forceUpdate
 * @param {?} securityContext
 * @return {?}
 */function checkRenderStyle(view,renderElement,styleName,unit,oldValue,newValue,forceUpdate,securityContext){if(checkBinding(view,oldValue,newValue,forceUpdate)){var/** @type {?} */renderValue=securityContext?view.viewUtils.sanitizer.sanitize(securityContext,newValue):newValue;if(renderValue!=null){renderValue=renderValue.toString();if(unit!=null){renderValue=renderValue+unit;}}else{renderValue=null;}view.renderer.setElementStyle(renderElement,styleName,renderValue);}}/**
 * @param {?} input
 * @param {?} value
 * @return {?}
 */function castByValue(input,value){return input;}var/** @type {?} */EMPTY_ARRAY=[];var/** @type {?} */EMPTY_MAP={};/**
 * @param {?} fn
 * @return {?}
 */function pureProxy1(fn){var/** @type {?} */numberOfChecks=0;var/** @type {?} */result=void 0;var/** @type {?} */v0=void 0;return function(p0){if(!numberOfChecks++||!looseIdentical(v0,p0)){v0=p0;result=fn(p0);}return result;};}/**
 * @param {?} fn
 * @return {?}
 */function pureProxy2(fn){var/** @type {?} */numberOfChecks=0;var/** @type {?} */result=void 0;var/** @type {?} */v0=void 0;var/** @type {?} */v1=void 0;return function(p0,p1){if(!numberOfChecks++||!looseIdentical(v0,p0)||!looseIdentical(v1,p1)){v0=p0;v1=p1;result=fn(p0,p1);}return result;};}/**
 * @param {?} fn
 * @return {?}
 */function pureProxy3(fn){var/** @type {?} */numberOfChecks=0;var/** @type {?} */result=void 0;var/** @type {?} */v0=void 0;var/** @type {?} */v1=void 0;var/** @type {?} */v2=void 0;return function(p0,p1,p2){if(!numberOfChecks++||!looseIdentical(v0,p0)||!looseIdentical(v1,p1)||!looseIdentical(v2,p2)){v0=p0;v1=p1;v2=p2;result=fn(p0,p1,p2);}return result;};}/**
 * @param {?} fn
 * @return {?}
 */function pureProxy4(fn){var/** @type {?} */numberOfChecks=0;var/** @type {?} */result=void 0;var/** @type {?} */v0=void 0,/** @type {?} */v1=void 0,/** @type {?} */v2=void 0,/** @type {?} */v3=void 0;v0=v1=v2=v3;return function(p0,p1,p2,p3){if(!numberOfChecks++||!looseIdentical(v0,p0)||!looseIdentical(v1,p1)||!looseIdentical(v2,p2)||!looseIdentical(v3,p3)){v0=p0;v1=p1;v2=p2;v3=p3;result=fn(p0,p1,p2,p3);}return result;};}/**
 * @param {?} fn
 * @return {?}
 */function pureProxy5(fn){var/** @type {?} */numberOfChecks=0;var/** @type {?} */result=void 0;var/** @type {?} */v0=void 0,/** @type {?} */v1=void 0,/** @type {?} */v2=void 0,/** @type {?} */v3=void 0,/** @type {?} */v4=void 0;v0=v1=v2=v3=v4;return function(p0,p1,p2,p3,p4){if(!numberOfChecks++||!looseIdentical(v0,p0)||!looseIdentical(v1,p1)||!looseIdentical(v2,p2)||!looseIdentical(v3,p3)||!looseIdentical(v4,p4)){v0=p0;v1=p1;v2=p2;v3=p3;v4=p4;result=fn(p0,p1,p2,p3,p4);}return result;};}/**
 * @param {?} fn
 * @return {?}
 */function pureProxy6(fn){var/** @type {?} */numberOfChecks=0;var/** @type {?} */result=void 0;var/** @type {?} */v0=void 0,/** @type {?} */v1=void 0,/** @type {?} */v2=void 0,/** @type {?} */v3=void 0,/** @type {?} */v4=void 0,/** @type {?} */v5=void 0;v0=v1=v2=v3=v4=v5;return function(p0,p1,p2,p3,p4,p5){if(!numberOfChecks++||!looseIdentical(v0,p0)||!looseIdentical(v1,p1)||!looseIdentical(v2,p2)||!looseIdentical(v3,p3)||!looseIdentical(v4,p4)||!looseIdentical(v5,p5)){v0=p0;v1=p1;v2=p2;v3=p3;v4=p4;v5=p5;result=fn(p0,p1,p2,p3,p4,p5);}return result;};}/**
 * @param {?} fn
 * @return {?}
 */function pureProxy7(fn){var/** @type {?} */numberOfChecks=0;var/** @type {?} */result=void 0;var/** @type {?} */v0=void 0,/** @type {?} */v1=void 0,/** @type {?} */v2=void 0,/** @type {?} */v3=void 0,/** @type {?} */v4=void 0,/** @type {?} */v5=void 0,/** @type {?} */v6=void 0;v0=v1=v2=v3=v4=v5=v6;return function(p0,p1,p2,p3,p4,p5,p6){if(!numberOfChecks++||!looseIdentical(v0,p0)||!looseIdentical(v1,p1)||!looseIdentical(v2,p2)||!looseIdentical(v3,p3)||!looseIdentical(v4,p4)||!looseIdentical(v5,p5)||!looseIdentical(v6,p6)){v0=p0;v1=p1;v2=p2;v3=p3;v4=p4;v5=p5;v6=p6;result=fn(p0,p1,p2,p3,p4,p5,p6);}return result;};}/**
 * @param {?} fn
 * @return {?}
 */function pureProxy8(fn){var/** @type {?} */numberOfChecks=0;var/** @type {?} */result=void 0;var/** @type {?} */v0=void 0,/** @type {?} */v1=void 0,/** @type {?} */v2=void 0,/** @type {?} */v3=void 0,/** @type {?} */v4=void 0,/** @type {?} */v5=void 0,/** @type {?} */v6=void 0,/** @type {?} */v7=void 0;v0=v1=v2=v3=v4=v5=v6=v7;return function(p0,p1,p2,p3,p4,p5,p6,p7){if(!numberOfChecks++||!looseIdentical(v0,p0)||!looseIdentical(v1,p1)||!looseIdentical(v2,p2)||!looseIdentical(v3,p3)||!looseIdentical(v4,p4)||!looseIdentical(v5,p5)||!looseIdentical(v6,p6)||!looseIdentical(v7,p7)){v0=p0;v1=p1;v2=p2;v3=p3;v4=p4;v5=p5;v6=p6;v7=p7;result=fn(p0,p1,p2,p3,p4,p5,p6,p7);}return result;};}/**
 * @param {?} fn
 * @return {?}
 */function pureProxy9(fn){var/** @type {?} */numberOfChecks=0;var/** @type {?} */result=void 0;var/** @type {?} */v0=void 0,/** @type {?} */v1=void 0,/** @type {?} */v2=void 0,/** @type {?} */v3=void 0,/** @type {?} */v4=void 0,/** @type {?} */v5=void 0,/** @type {?} */v6=void 0,/** @type {?} */v7=void 0,/** @type {?} */v8=void 0;v0=v1=v2=v3=v4=v5=v6=v7=v8;return function(p0,p1,p2,p3,p4,p5,p6,p7,p8){if(!numberOfChecks++||!looseIdentical(v0,p0)||!looseIdentical(v1,p1)||!looseIdentical(v2,p2)||!looseIdentical(v3,p3)||!looseIdentical(v4,p4)||!looseIdentical(v5,p5)||!looseIdentical(v6,p6)||!looseIdentical(v7,p7)||!looseIdentical(v8,p8)){v0=p0;v1=p1;v2=p2;v3=p3;v4=p4;v5=p5;v6=p6;v7=p7;v8=p8;result=fn(p0,p1,p2,p3,p4,p5,p6,p7,p8);}return result;};}/**
 * @param {?} fn
 * @return {?}
 */function pureProxy10(fn){var/** @type {?} */numberOfChecks=0;var/** @type {?} */result=void 0;var/** @type {?} */v0=void 0,/** @type {?} */v1=void 0,/** @type {?} */v2=void 0,/** @type {?} */v3=void 0,/** @type {?} */v4=void 0,/** @type {?} */v5=void 0,/** @type {?} */v6=void 0,/** @type {?} */v7=void 0,/** @type {?} */v8=void 0,/** @type {?} */v9=void 0;v0=v1=v2=v3=v4=v5=v6=v7=v8=v9;return function(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9){if(!numberOfChecks++||!looseIdentical(v0,p0)||!looseIdentical(v1,p1)||!looseIdentical(v2,p2)||!looseIdentical(v3,p3)||!looseIdentical(v4,p4)||!looseIdentical(v5,p5)||!looseIdentical(v6,p6)||!looseIdentical(v7,p7)||!looseIdentical(v8,p8)||!looseIdentical(v9,p9)){v0=p0;v1=p1;v2=p2;v3=p3;v4=p4;v5=p5;v6=p6;v7=p7;v8=p8;v9=p9;result=fn(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9);}return result;};}/**
 * @param {?} renderer
 * @param {?} el
 * @param {?} changes
 * @return {?}
 */function setBindingDebugInfoForChanges(renderer,el,changes){Object.keys(changes).forEach(function(propName){setBindingDebugInfo(renderer,el,propName,changes[propName].currentValue);});}/**
 * @param {?} renderer
 * @param {?} el
 * @param {?} propName
 * @param {?} value
 * @return {?}
 */function setBindingDebugInfo(renderer,el,propName,value){try{renderer.setBindingDebugInfo(el,'ng-reflect-'+camelCaseToDashCase(propName),value?value.toString():null);}catch(e){renderer.setBindingDebugInfo(el,'ng-reflect-'+camelCaseToDashCase(propName),'[ERROR] Exception while trying to serialize the value');}}var/** @type {?} */CAMEL_CASE_REGEXP=/([A-Z])/g;/**
 * @param {?} input
 * @return {?}
 */function camelCaseToDashCase(input){return input.replace(CAMEL_CASE_REGEXP,function(){for(var _len5=arguments.length,m=Array(_len5),_key5=0;_key5<_len5;_key5++){m[_key5]=arguments[_key5];}return'-'+m[1].toLowerCase();});}/**
 * @param {?} renderer
 * @param {?} parentElement
 * @param {?} name
 * @param {?} attrs
 * @param {?=} debugInfo
 * @return {?}
 */function createRenderElement(renderer,parentElement,name,attrs,debugInfo){var/** @type {?} */el=renderer.createElement(parentElement,name,debugInfo);for(var/** @type {?} */i=0;i<attrs.length;i+=2){renderer.setElementAttribute(el,attrs.get(i),attrs.get(i+1));}return el;}/**
 * @param {?} renderer
 * @param {?} elementName
 * @param {?} attrs
 * @param {?} rootSelectorOrNode
 * @param {?=} debugInfo
 * @return {?}
 */function selectOrCreateRenderHostElement(renderer,elementName,attrs,rootSelectorOrNode,debugInfo){var/** @type {?} */hostElement=void 0;if(isPresent(rootSelectorOrNode)){hostElement=renderer.selectRootElement(rootSelectorOrNode,debugInfo);for(var/** @type {?} */i=0;i<attrs.length;i+=2){renderer.setElementAttribute(hostElement,attrs.get(i),attrs.get(i+1));}renderer.setElementAttribute(hostElement,'ng-version',VERSION.full);}else{hostElement=createRenderElement(renderer,null,elementName,attrs,debugInfo);}return hostElement;}/**
 * @param {?} view
 * @param {?} element
 * @param {?} eventNamesAndTargets
 * @param {?} listener
 * @return {?}
 */function subscribeToRenderElement(view,element,eventNamesAndTargets,listener){var/** @type {?} */disposables=createEmptyInlineArray(eventNamesAndTargets.length/2);for(var/** @type {?} */i=0;i<eventNamesAndTargets.length;i+=2){var/** @type {?} */eventName=eventNamesAndTargets.get(i);var/** @type {?} */eventTarget=eventNamesAndTargets.get(i+1);var/** @type {?} */disposable=void 0;if(eventTarget){disposable=view.renderer.listenGlobal(eventTarget,eventName,listener.bind(view,eventTarget+':'+eventName));}else{disposable=view.renderer.listen(element,eventName,listener.bind(view,eventName));}disposables.set(i/2,disposable);}return disposeInlineArray.bind(null,disposables);}/**
 * @param {?} disposables
 * @return {?}
 */function disposeInlineArray(disposables){for(var/** @type {?} */i=0;i<disposables.length;i++){disposables.get(i)();}}/**
 * @return {?}
 */function noop(){}/**
 * @param {?} length
 * @return {?}
 */function createEmptyInlineArray(length){var/** @type {?} */ctor=void 0;if(length<=2){ctor=InlineArray2;}else if(length<=4){ctor=InlineArray4;}else if(length<=8){ctor=InlineArray8;}else if(length<=16){ctor=InlineArray16;}else{ctor=InlineArrayDynamic;}return new ctor(length);}var InlineArray0=function(){function InlineArray0(){_classCallCheck(this,InlineArray0);this.length=0;}/**
     * @param {?} index
     * @return {?}
     */_createClass(InlineArray0,[{key:'get',value:function get(index){return undefined;}/**
     * @param {?} index
     * @param {?} value
     * @return {?}
     */},{key:'set',value:function set(index,value){}}]);return InlineArray0;}();var InlineArray2=function(){/**
     * @param {?} length
     * @param {?=} _v0
     * @param {?=} _v1
     */function InlineArray2(length,_v0,_v1){_classCallCheck(this,InlineArray2);this.length=length;this._v0=_v0;this._v1=_v1;}/**
     * @param {?} index
     * @return {?}
     */_createClass(InlineArray2,[{key:'get',value:function get(index){switch(index){case 0:return this._v0;case 1:return this._v1;default:return undefined;}}/**
     * @param {?} index
     * @param {?} value
     * @return {?}
     */},{key:'set',value:function set(index,value){switch(index){case 0:this._v0=value;break;case 1:this._v1=value;break;}}}]);return InlineArray2;}();var InlineArray4=function(){/**
     * @param {?} length
     * @param {?=} _v0
     * @param {?=} _v1
     * @param {?=} _v2
     * @param {?=} _v3
     */function InlineArray4(length,_v0,_v1,_v2,_v3){_classCallCheck(this,InlineArray4);this.length=length;this._v0=_v0;this._v1=_v1;this._v2=_v2;this._v3=_v3;}/**
     * @param {?} index
     * @return {?}
     */_createClass(InlineArray4,[{key:'get',value:function get(index){switch(index){case 0:return this._v0;case 1:return this._v1;case 2:return this._v2;case 3:return this._v3;default:return undefined;}}/**
     * @param {?} index
     * @param {?} value
     * @return {?}
     */},{key:'set',value:function set(index,value){switch(index){case 0:this._v0=value;break;case 1:this._v1=value;break;case 2:this._v2=value;break;case 3:this._v3=value;break;}}}]);return InlineArray4;}();var InlineArray8=function(){/**
     * @param {?} length
     * @param {?=} _v0
     * @param {?=} _v1
     * @param {?=} _v2
     * @param {?=} _v3
     * @param {?=} _v4
     * @param {?=} _v5
     * @param {?=} _v6
     * @param {?=} _v7
     */function InlineArray8(length,_v0,_v1,_v2,_v3,_v4,_v5,_v6,_v7){_classCallCheck(this,InlineArray8);this.length=length;this._v0=_v0;this._v1=_v1;this._v2=_v2;this._v3=_v3;this._v4=_v4;this._v5=_v5;this._v6=_v6;this._v7=_v7;}/**
     * @param {?} index
     * @return {?}
     */_createClass(InlineArray8,[{key:'get',value:function get(index){switch(index){case 0:return this._v0;case 1:return this._v1;case 2:return this._v2;case 3:return this._v3;case 4:return this._v4;case 5:return this._v5;case 6:return this._v6;case 7:return this._v7;default:return undefined;}}/**
     * @param {?} index
     * @param {?} value
     * @return {?}
     */},{key:'set',value:function set(index,value){switch(index){case 0:this._v0=value;break;case 1:this._v1=value;break;case 2:this._v2=value;break;case 3:this._v3=value;break;case 4:this._v4=value;break;case 5:this._v5=value;break;case 6:this._v6=value;break;case 7:this._v7=value;break;}}}]);return InlineArray8;}();var InlineArray16=function(){/**
     * @param {?} length
     * @param {?=} _v0
     * @param {?=} _v1
     * @param {?=} _v2
     * @param {?=} _v3
     * @param {?=} _v4
     * @param {?=} _v5
     * @param {?=} _v6
     * @param {?=} _v7
     * @param {?=} _v8
     * @param {?=} _v9
     * @param {?=} _v10
     * @param {?=} _v11
     * @param {?=} _v12
     * @param {?=} _v13
     * @param {?=} _v14
     * @param {?=} _v15
     */function InlineArray16(length,_v0,_v1,_v2,_v3,_v4,_v5,_v6,_v7,_v8,_v9,_v10,_v11,_v12,_v13,_v14,_v15){_classCallCheck(this,InlineArray16);this.length=length;this._v0=_v0;this._v1=_v1;this._v2=_v2;this._v3=_v3;this._v4=_v4;this._v5=_v5;this._v6=_v6;this._v7=_v7;this._v8=_v8;this._v9=_v9;this._v10=_v10;this._v11=_v11;this._v12=_v12;this._v13=_v13;this._v14=_v14;this._v15=_v15;}/**
     * @param {?} index
     * @return {?}
     */_createClass(InlineArray16,[{key:'get',value:function get(index){switch(index){case 0:return this._v0;case 1:return this._v1;case 2:return this._v2;case 3:return this._v3;case 4:return this._v4;case 5:return this._v5;case 6:return this._v6;case 7:return this._v7;case 8:return this._v8;case 9:return this._v9;case 10:return this._v10;case 11:return this._v11;case 12:return this._v12;case 13:return this._v13;case 14:return this._v14;case 15:return this._v15;default:return undefined;}}/**
     * @param {?} index
     * @param {?} value
     * @return {?}
     */},{key:'set',value:function set(index,value){switch(index){case 0:this._v0=value;break;case 1:this._v1=value;break;case 2:this._v2=value;break;case 3:this._v3=value;break;case 4:this._v4=value;break;case 5:this._v5=value;break;case 6:this._v6=value;break;case 7:this._v7=value;break;case 8:this._v8=value;break;case 9:this._v9=value;break;case 10:this._v10=value;break;case 11:this._v11=value;break;case 12:this._v12=value;break;case 13:this._v13=value;break;case 14:this._v14=value;break;case 15:this._v15=value;break;}}}]);return InlineArray16;}();var InlineArrayDynamic=function(){/**
     * @param {?} length
     * @param {...?} values
     */function InlineArrayDynamic(length){_classCallCheck(this,InlineArrayDynamic);this.length=length;for(var _len6=arguments.length,values=Array(_len6>1?_len6-1:0),_key6=1;_key6<_len6;_key6++){values[_key6-1]=arguments[_key6];}this._values=values;}/**
     * @param {?} index
     * @return {?}
     */_createClass(InlineArrayDynamic,[{key:'get',value:function get(index){return this._values[index];}/**
     * @param {?} index
     * @param {?} value
     * @return {?}
     */},{key:'set',value:function set(index,value){this._values[index]=value;}}]);return InlineArrayDynamic;}();var/** @type {?} */EMPTY_INLINE_ARRAY=new InlineArray0();/**
 * This is a private API only used by the compiler to read the view class.
 * @param {?} componentFactory
 * @return {?}
 */function getComponentFactoryViewClass(componentFactory){return componentFactory._viewClass;}/**
 * Represents an instance of a Component created via a {\@link ComponentFactory}.
 *
 * `ComponentRef` provides access to the Component Instance as well other objects related to this
 * Component Instance and allows you to destroy the Component Instance via the {\@link #destroy}
 * method.
 * \@stable
 * @abstract
 */var ComponentRef=function(){function ComponentRef(){_classCallCheck(this,ComponentRef);}_createClass(ComponentRef,[{key:'location',/**
     * Location of the Host Element of this Component Instance.
     * @abstract
     * @return {?}
     */value:function location(){}/**
     * The injector on which the component instance exists.
     * @abstract
     * @return {?}
     */},{key:'injector',value:function injector(){}/**
     * The instance of the Component.
     * @abstract
     * @return {?}
     */},{key:'instance',value:function instance(){}/**
     * The {\@link ViewRef} of the Host View of this Component instance.
     * @abstract
     * @return {?}
     */},{key:'hostView',value:function hostView(){}/**
     * The {\@link ChangeDetectorRef} of the Component instance.
     * @abstract
     * @return {?}
     */},{key:'changeDetectorRef',value:function changeDetectorRef(){}/**
     * The component type.
     * @abstract
     * @return {?}
     */},{key:'componentType',value:function componentType(){}/**
     * Destroys the component instance and all of the data structures associated with it.
     * @abstract
     * @return {?}
     */},{key:'destroy',value:function destroy(){}/**
     * Allows to register a callback that will be called when the component is destroyed.
     * @abstract
     * @param {?} callback
     * @return {?}
     */},{key:'onDestroy',value:function onDestroy(callback){}}]);return ComponentRef;}();/**
 * workaround https://github.com/angular/tsickle/issues/350
 * @suppress {checkTypes}
 */var ComponentRef_=function(_ComponentRef){_inherits(ComponentRef_,_ComponentRef);/**
     * @param {?} _index
     * @param {?} _parentView
     * @param {?} _nativeElement
     * @param {?} _component
     */function ComponentRef_(_index,_parentView,_nativeElement,_component){_classCallCheck(this,ComponentRef_);var _this12=_possibleConstructorReturn(this,(ComponentRef_.__proto__||Object.getPrototypeOf(ComponentRef_)).call(this));_this12._index=_index;_this12._parentView=_parentView;_this12._nativeElement=_nativeElement;_this12._component=_component;return _this12;}/**
     * @return {?}
     */_createClass(ComponentRef_,[{key:'destroy',/**
     * @return {?}
     */value:function destroy(){this._parentView.detachAndDestroy();}/**
     * @param {?} callback
     * @return {?}
     */},{key:'onDestroy',value:function onDestroy(callback){this.hostView.onDestroy(callback);}},{key:'location',get:function get(){return new ElementRef(this._nativeElement);}/**
     * @return {?}
     */},{key:'injector',get:function get(){return this._parentView.injector(this._index);}/**
     * @return {?}
     */},{key:'instance',get:function get(){return this._component;}},{key:'hostView',/**
     * @return {?}
     */get:function get(){return this._parentView.ref;}},{key:'changeDetectorRef',/**
     * @return {?}
     */get:function get(){return this._parentView.ref;}},{key:'componentType',/**
     * @return {?}
     */get:function get(){return this._component.constructor;}}]);return ComponentRef_;}(ComponentRef);/**
 * \@stable
 */var ComponentFactory=function(){/**
     * @param {?} selector
     * @param {?} _viewClass
     * @param {?} componentType
     */function ComponentFactory(selector,_viewClass,componentType){_classCallCheck(this,ComponentFactory);this.selector=selector;this.componentType=componentType;this._viewClass=_viewClass;}/**
     * Creates a new component.
     * @param {?} injector
     * @param {?=} projectableNodes
     * @param {?=} rootSelectorOrNode
     * @return {?}
     */_createClass(ComponentFactory,[{key:'create',value:function create(injector){var projectableNodes=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var rootSelectorOrNode=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var/** @type {?} */vu=injector.get(ViewUtils);if(!projectableNodes){projectableNodes=[];}var/** @type {?} */hostView=new this._viewClass(vu,null,null,null);return hostView.createHostView(rootSelectorOrNode,injector,projectableNodes);}}]);return ComponentFactory;}();/**
 * @param {?} component
 * @return {?}
 */function noComponentFactoryError(component){var/** @type {?} */error=Error('No component factory found for '+stringify(component)+'. Did you add it to @NgModule.entryComponents?');error[ERROR_COMPONENT]=component;return error;}var/** @type {?} */ERROR_COMPONENT='ngComponent';var _NullComponentFactoryResolver=function(){function _NullComponentFactoryResolver(){_classCallCheck(this,_NullComponentFactoryResolver);}_createClass(_NullComponentFactoryResolver,[{key:'resolveComponentFactory',/**
     * @param {?} component
     * @return {?}
     */value:function resolveComponentFactory(component){throw noComponentFactoryError(component);}}]);return _NullComponentFactoryResolver;}();/**
 * \@stable
 * @abstract
 */var ComponentFactoryResolver=function(){function ComponentFactoryResolver(){_classCallCheck(this,ComponentFactoryResolver);}_createClass(ComponentFactoryResolver,[{key:'resolveComponentFactory',/**
     * @abstract
     * @param {?} component
     * @return {?}
     */value:function resolveComponentFactory(component){}}]);return ComponentFactoryResolver;}();ComponentFactoryResolver.NULL=new _NullComponentFactoryResolver();var CodegenComponentFactoryResolver=function(){/**
     * @param {?} factories
     * @param {?} _parent
     */function CodegenComponentFactoryResolver(factories,_parent){_classCallCheck(this,CodegenComponentFactoryResolver);this._parent=_parent;this._factories=new Map();for(var i=0;i<factories.length;i++){var factory=factories[i];this._factories.set(factory.componentType,factory);}}/**
     * @param {?} component
     * @return {?}
     */_createClass(CodegenComponentFactoryResolver,[{key:'resolveComponentFactory',value:function resolveComponentFactory(component){var/** @type {?} */result=this._factories.get(component);if(!result){result=this._parent.resolveComponentFactory(component);}return result;}}]);return CodegenComponentFactoryResolver;}();var/** @type {?} */trace=void 0;var/** @type {?} */events=void 0;/**
 * @return {?}
 */function detectWTF(){var/** @type {?} */wtf=global$1[/** TODO #9100 */'wtf'];if(wtf){trace=wtf['trace'];if(trace){events=trace['events'];return true;}}return false;}/**
 * @param {?} signature
 * @param {?=} flags
 * @return {?}
 */function createScope(signature){var flags=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return events.createScope(signature,flags);}/**
 * @param {?} scope
 * @param {?=} returnValue
 * @return {?}
 */function leave(scope,returnValue){trace.leaveScope(scope,returnValue);return returnValue;}/**
 * @param {?} rangeType
 * @param {?} action
 * @return {?}
 */function startTimeRange(rangeType,action){return trace.beginTimeRange(rangeType,action);}/**
 * @param {?} range
 * @return {?}
 */function endTimeRange(range){trace.endTimeRange(range);}/**
 * True if WTF is enabled.
 */var/** @type {?} */wtfEnabled=detectWTF();/**
 * @param {?=} arg0
 * @param {?=} arg1
 * @return {?}
 */function noopScope(arg0,arg1){return null;}/**
 * Create trace scope.
 *
 * Scopes must be strictly nested and are analogous to stack frames, but
 * do not have to follow the stack frames. Instead it is recommended that they follow logical
 * nesting. You may want to use
 * [Event
 * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)
 * as they are defined in WTF.
 *
 * Used to mark scope entry. The return value is used to leave the scope.
 *
 *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');
 *
 *     someMethod() {
 *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI
 *        // DO SOME WORK HERE
 *        return wtfLeave(s, 123); // Return value 123
 *     }
 *
 * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can
 * negatively impact the performance of your application. For this reason we recommend that
 * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and
 * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to
 * exception, will produce incorrect trace, but presence of exception signifies logic error which
 * needs to be fixed before the app should be profiled. Add try-finally only when you expect that
 * an exception is expected during normal execution while profiling.
 *
 * @experimental
 */var/** @type {?} */wtfCreateScope=wtfEnabled?createScope:function(signature,flags){return noopScope;};/**
 * Used to mark end of Scope.
 *
 * - `scope` to end.
 * - `returnValue` (optional) to be passed to the WTF.
 *
 * Returns the `returnValue for easy chaining.
 * @experimental
 */var/** @type {?} */wtfLeave=wtfEnabled?leave:function(s,r){return r;};/**
 * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.
 * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been
 * enabled.
 *
 *     someMethod() {
 *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');
 *        var future = new Future.delay(5).then((_) {
 *          wtfEndTimeRange(s);
 *        });
 *     }
 * @experimental
 */var/** @type {?} */wtfStartTimeRange=wtfEnabled?startTimeRange:function(rangeType,action){return null;};/**
 * Ends a async time range operation.
 * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been
 * enabled.
 * @experimental
 */var/** @type {?} */wtfEndTimeRange=wtfEnabled?endTimeRange:function(r){return null;};/**
 * The Testability service provides testing hooks that can be accessed from
 * the browser and by services such as Protractor. Each bootstrapped Angular
 * application on the page will have an instance of Testability.
 * \@experimental
 */var Testability=function(){/**
     * @param {?} _ngZone
     */function Testability(_ngZone){_classCallCheck(this,Testability);this._ngZone=_ngZone;/** @internal */this._pendingCount=0;/** @internal */this._isZoneStable=true;/**
         * Whether any work was done since the last 'whenStable' callback. This is
         * useful to detect if this could have potentially destabilized another
         * component while it is stabilizing.
         * @internal
         */this._didWork=false;/** @internal */this._callbacks=[];this._watchAngularEvents();}/**
     * \@internal
     * @return {?}
     */_createClass(Testability,[{key:'_watchAngularEvents',value:function _watchAngularEvents(){var _this13=this;this._ngZone.onUnstable.subscribe({next:function next(){_this13._didWork=true;_this13._isZoneStable=false;}});this._ngZone.runOutsideAngular(function(){_this13._ngZone.onStable.subscribe({next:function next(){NgZone.assertNotInAngularZone();scheduleMicroTask(function(){_this13._isZoneStable=true;_this13._runCallbacksIfReady();});}});});}/**
     * @return {?}
     */},{key:'increasePendingRequestCount',value:function increasePendingRequestCount(){this._pendingCount+=1;this._didWork=true;return this._pendingCount;}/**
     * @return {?}
     */},{key:'decreasePendingRequestCount',value:function decreasePendingRequestCount(){this._pendingCount-=1;if(this._pendingCount<0){throw new Error('pending async requests below zero');}this._runCallbacksIfReady();return this._pendingCount;}/**
     * @return {?}
     */},{key:'isStable',value:function isStable(){return this._isZoneStable&&this._pendingCount==0&&!this._ngZone.hasPendingMacrotasks;}/**
     * \@internal
     * @return {?}
     */},{key:'_runCallbacksIfReady',value:function _runCallbacksIfReady(){var _this14=this;if(this.isStable()){// Schedules the call backs in a new frame so that it is always async.
scheduleMicroTask(function(){while(_this14._callbacks.length!==0){_this14._callbacks.pop()(_this14._didWork);}_this14._didWork=false;});}else{// Not Ready
this._didWork=true;}}/**
     * @param {?} callback
     * @return {?}
     */},{key:'whenStable',value:function whenStable(callback){this._callbacks.push(callback);this._runCallbacksIfReady();}/**
     * @return {?}
     */},{key:'getPendingRequestCount',value:function getPendingRequestCount(){return this._pendingCount;}/**
     * @deprecated use findProviders
     * @param {?} using
     * @param {?} provider
     * @param {?} exactMatch
     * @return {?}
     */},{key:'findBindings',value:function findBindings(using,provider,exactMatch){// TODO(juliemr): implement.
return[];}/**
     * @param {?} using
     * @param {?} provider
     * @param {?} exactMatch
     * @return {?}
     */},{key:'findProviders',value:function findProviders(using,provider,exactMatch){// TODO(juliemr): implement.
return[];}}]);return Testability;}();Testability.decorators=[{type:Injectable}];/** @nocollapse */Testability.ctorParameters=function(){return[{type:NgZone}];};/**
 * A global registry of {\@link Testability} instances for specific elements.
 * \@experimental
 */var TestabilityRegistry=function(){function TestabilityRegistry(){_classCallCheck(this,TestabilityRegistry);/** @internal */this._applications=new Map();_testabilityGetter.addToWindow(this);}/**
     * @param {?} token
     * @param {?} testability
     * @return {?}
     */_createClass(TestabilityRegistry,[{key:'registerApplication',value:function registerApplication(token,testability){this._applications.set(token,testability);}/**
     * @param {?} elem
     * @return {?}
     */},{key:'getTestability',value:function getTestability(elem){return this._applications.get(elem);}/**
     * @return {?}
     */},{key:'getAllTestabilities',value:function getAllTestabilities(){return Array.from(this._applications.values());}/**
     * @return {?}
     */},{key:'getAllRootElements',value:function getAllRootElements(){return Array.from(this._applications.keys());}/**
     * @param {?} elem
     * @param {?=} findInAncestors
     * @return {?}
     */},{key:'findTestabilityInTree',value:function findTestabilityInTree(elem){var findInAncestors=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;return _testabilityGetter.findTestabilityInTree(this,elem,findInAncestors);}}]);return TestabilityRegistry;}();TestabilityRegistry.decorators=[{type:Injectable}];/** @nocollapse */TestabilityRegistry.ctorParameters=function(){return[];};var _NoopGetTestability=function(){function _NoopGetTestability(){_classCallCheck(this,_NoopGetTestability);}_createClass(_NoopGetTestability,[{key:'addToWindow',/**
     * @param {?} registry
     * @return {?}
     */value:function addToWindow(registry){}/**
     * @param {?} registry
     * @param {?} elem
     * @param {?} findInAncestors
     * @return {?}
     */},{key:'findTestabilityInTree',value:function findTestabilityInTree(registry,elem,findInAncestors){return null;}}]);return _NoopGetTestability;}();/**
 * Set the {\@link GetTestability} implementation used by the Angular testing framework.
 * \@experimental
 * @param {?} getter
 * @return {?}
 */function setTestabilityGetter(getter){_testabilityGetter=getter;}var/** @type {?} */_testabilityGetter=new _NoopGetTestability();var/** @type {?} */_devMode=true;var/** @type {?} */_runModeLocked=false;var/** @type {?} */_platform=void 0;var/** @type {?} */ALLOW_MULTIPLE_PLATFORMS=new InjectionToken('AllowMultipleToken');/**
 * Disable Angular's development mode, which turns off assertions and other
 * checks within the framework.
 *
 * One important assertion this disables verifies that a change detection pass
 * does not result in additional changes to any bindings (also known as
 * unidirectional data flow).
 *
 * \@stable
 * @return {?}
 */function enableProdMode(){if(_runModeLocked){throw new Error('Cannot enable prod mode after platform setup.');}_devMode=false;}/**
 * Returns whether Angular is in development mode. After called once,
 * the value is locked and won't change any more.
 *
 * By default, this is true, unless a user calls `enableProdMode` before calling this.
 *
 * \@experimental APIs related to application bootstrap are currently under review.
 * @return {?}
 */function isDevMode(){_runModeLocked=true;return _devMode;}/**
 * A token for third-party components that can register themselves with NgProbe.
 *
 * \@experimental
 */var NgProbeToken=/**
     * @param {?} name
     * @param {?} token
     */function NgProbeToken(name,token){_classCallCheck(this,NgProbeToken);this.name=name;this.token=token;};/**
 * Creates a platform.
 * Platforms have to be eagerly created via this function.
 *
 * \@experimental APIs related to application bootstrap are currently under review.
 * @param {?} injector
 * @return {?}
 */function createPlatform(injector){if(_platform&&!_platform.destroyed&&!_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS,false)){throw new Error('There can be only one platform. Destroy the previous one to create a new one.');}_platform=injector.get(PlatformRef);var/** @type {?} */inits=injector.get(PLATFORM_INITIALIZER,null);if(inits)inits.forEach(function(init){return init();});return _platform;}/**
 * Creates a factory for a platform
 *
 * \@experimental APIs related to application bootstrap are currently under review.
 * @param {?} parentPlatformFactory
 * @param {?} name
 * @param {?=} providers
 * @return {?}
 */function createPlatformFactory(parentPlatformFactory,name){var providers=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];var/** @type {?} */marker=new InjectionToken('Platform: '+name);return function(){var extraProviders=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var/** @type {?} */platform=getPlatform();if(!platform||platform.injector.get(ALLOW_MULTIPLE_PLATFORMS,false)){if(parentPlatformFactory){parentPlatformFactory(providers.concat(extraProviders).concat({provide:marker,useValue:true}));}else{createPlatform(ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders).concat({provide:marker,useValue:true})));}}return assertPlatform(marker);};}/**
 * Checks that there currently is a platform which contains the given token as a provider.
 *
 * \@experimental APIs related to application bootstrap are currently under review.
 * @param {?} requiredToken
 * @return {?}
 */function assertPlatform(requiredToken){var/** @type {?} */platform=getPlatform();if(!platform){throw new Error('No platform exists!');}if(!platform.injector.get(requiredToken,null)){throw new Error('A platform with a different configuration has been created. Please destroy it first.');}return platform;}/**
 * Destroy the existing platform.
 *
 * \@experimental APIs related to application bootstrap are currently under review.
 * @return {?}
 */function destroyPlatform(){if(_platform&&!_platform.destroyed){_platform.destroy();}}/**
 * Returns the current platform.
 *
 * \@experimental APIs related to application bootstrap are currently under review.
 * @return {?}
 */function getPlatform(){return _platform&&!_platform.destroyed?_platform:null;}/**
 * The Angular platform is the entry point for Angular on a web page. Each page
 * has exactly one platform, and services (such as reflection) which are common
 * to every Angular application running on the page are bound in its scope.
 *
 * A page's platform is initialized implicitly when {\@link bootstrap}() is called, or
 * explicitly by calling {\@link createPlatform}().
 *
 * \@stable
 * @abstract
 */var PlatformRef=function(){function PlatformRef(){_classCallCheck(this,PlatformRef);}_createClass(PlatformRef,[{key:'bootstrapModuleFactory',/**
     * Creates an instance of an `\@NgModule` for the given platform
     * for offline compilation.
     *
     * ## Simple Example
     *
     * ```typescript
     * my_module.ts:
     *
     * \@NgModule({
     *   imports: [BrowserModule]
     * })
     * class MyModule {}
     *
     * main.ts:
     * import {MyModuleNgFactory} from './my_module.ngfactory';
     * import {platformBrowser} from '\@angular/platform-browser';
     *
     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);
     * ```
     *
     * \@experimental APIs related to application bootstrap are currently under review.
     * @abstract
     * @param {?} moduleFactory
     * @return {?}
     */value:function bootstrapModuleFactory(moduleFactory){}/**
     * Creates an instance of an `\@NgModule` for a given platform using the given runtime compiler.
     *
     * ## Simple Example
     *
     * ```typescript
     * \@NgModule({
     *   imports: [BrowserModule]
     * })
     * class MyModule {}
     *
     * let moduleRef = platformBrowser().bootstrapModule(MyModule);
     * ```
     * \@stable
     * @abstract
     * @param {?} moduleType
     * @param {?=} compilerOptions
     * @return {?}
     */},{key:'bootstrapModule',value:function bootstrapModule(moduleType,compilerOptions){}/**
     * Register a listener to be called when the platform is disposed.
     * @abstract
     * @param {?} callback
     * @return {?}
     */},{key:'onDestroy',value:function onDestroy(callback){}/**
     * Retrieve the platform {\@link Injector}, which is the parent injector for
     * every Angular application on the page and provides singleton providers.
     * @abstract
     * @return {?}
     */},{key:'injector',value:function injector(){}/**
     * Destroy the Angular platform and all Angular applications on the page.
     * @abstract
     * @return {?}
     */},{key:'destroy',value:function destroy(){}/**
     * @abstract
     * @return {?}
     */},{key:'destroyed',value:function destroyed(){}}]);return PlatformRef;}();/**
 * @param {?} errorHandler
 * @param {?} callback
 * @return {?}
 */function _callAndReportToErrorHandler(errorHandler,callback){try{var/** @type {?} */result=callback();if(isPromise(result)){return result.catch(function(e){errorHandler.handleError(e);// rethrow as the exception handler might not do it
throw e;});}return result;}catch(e){errorHandler.handleError(e);// rethrow as the exception handler might not do it
throw e;}}/**
 * workaround https://github.com/angular/tsickle/issues/350
 * @suppress {checkTypes}
 */var PlatformRef_=function(_PlatformRef){_inherits(PlatformRef_,_PlatformRef);/**
     * @param {?} _injector
     */function PlatformRef_(_injector){_classCallCheck(this,PlatformRef_);var _this15=_possibleConstructorReturn(this,(PlatformRef_.__proto__||Object.getPrototypeOf(PlatformRef_)).call(this));_this15._injector=_injector;_this15._modules=[];_this15._destroyListeners=[];_this15._destroyed=false;return _this15;}/**
     * @param {?} callback
     * @return {?}
     */_createClass(PlatformRef_,[{key:'onDestroy',value:function onDestroy(callback){this._destroyListeners.push(callback);}/**
     * @return {?}
     */},{key:'destroy',/**
     * @return {?}
     */value:function destroy(){if(this._destroyed){throw new Error('The platform has already been destroyed!');}this._modules.slice().forEach(function(module){return module.destroy();});this._destroyListeners.forEach(function(listener){return listener();});this._destroyed=true;}/**
     * @param {?} moduleFactory
     * @return {?}
     */},{key:'bootstrapModuleFactory',value:function bootstrapModuleFactory(moduleFactory){return this._bootstrapModuleFactoryWithZone(moduleFactory,null);}/**
     * @param {?} moduleFactory
     * @param {?} ngZone
     * @return {?}
     */},{key:'_bootstrapModuleFactoryWithZone',value:function _bootstrapModuleFactoryWithZone(moduleFactory,ngZone){var _this16=this;// Note: We need to create the NgZone _before_ we instantiate the module,
// as instantiating the module creates some providers eagerly.
// So we create a mini parent injector that just contains the new NgZone and
// pass that as parent to the NgModuleFactory.
if(!ngZone)ngZone=new NgZone({enableLongStackTrace:isDevMode()});// Attention: Don't use ApplicationRef.run here,
// as we want to be sure that all possible constructor calls are inside `ngZone.run`!
return ngZone.run(function(){var/** @type {?} */ngZoneInjector=ReflectiveInjector.resolveAndCreate([{provide:NgZone,useValue:ngZone}],_this16.injector);var/** @type {?} */moduleRef=moduleFactory.create(ngZoneInjector);var/** @type {?} */exceptionHandler=moduleRef.injector.get(ErrorHandler,null);if(!exceptionHandler){throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');}moduleRef.onDestroy(function(){return ListWrapper.remove(_this16._modules,moduleRef);});ngZone.onError.subscribe({next:function next(error){exceptionHandler.handleError(error);}});return _callAndReportToErrorHandler(exceptionHandler,function(){var/** @type {?} */initStatus=moduleRef.injector.get(ApplicationInitStatus);return initStatus.donePromise.then(function(){_this16._moduleDoBootstrap(moduleRef);return moduleRef;});});});}/**
     * @param {?} moduleType
     * @param {?=} compilerOptions
     * @return {?}
     */},{key:'bootstrapModule',value:function bootstrapModule(moduleType){var compilerOptions=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];return this._bootstrapModuleWithZone(moduleType,compilerOptions,null);}/**
     * @param {?} moduleType
     * @param {?=} compilerOptions
     * @param {?=} ngZone
     * @return {?}
     */},{key:'_bootstrapModuleWithZone',value:function _bootstrapModuleWithZone(moduleType){var _this17=this;var compilerOptions=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];var ngZone=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var/** @type {?} */compilerFactory=this.injector.get(CompilerFactory);var/** @type {?} */compiler=compilerFactory.createCompiler(Array.isArray(compilerOptions)?compilerOptions:[compilerOptions]);return compiler.compileModuleAsync(moduleType).then(function(moduleFactory){return _this17._bootstrapModuleFactoryWithZone(moduleFactory,ngZone);});}/**
     * @param {?} moduleRef
     * @return {?}
     */},{key:'_moduleDoBootstrap',value:function _moduleDoBootstrap(moduleRef){var/** @type {?} */appRef=moduleRef.injector.get(ApplicationRef);if(moduleRef.bootstrapFactories.length>0){moduleRef.bootstrapFactories.forEach(function(compFactory){return appRef.bootstrap(compFactory);});}else if(moduleRef.instance.ngDoBootstrap){moduleRef.instance.ngDoBootstrap(appRef);}else{throw new Error('The module '+stringify(moduleRef.instance.constructor)+' was bootstrapped, but it does not declare "@NgModule.bootstrap" components nor a "ngDoBootstrap" method. '+'Please define one of these.');}this._modules.push(moduleRef);}},{key:'injector',get:function get(){return this._injector;}/**
     * @return {?}
     */},{key:'destroyed',get:function get(){return this._destroyed;}}]);return PlatformRef_;}(PlatformRef);PlatformRef_.decorators=[{type:Injectable}];/** @nocollapse */PlatformRef_.ctorParameters=function(){return[{type:Injector}];};/**
 * A reference to an Angular application running on a page.
 *
 * For more about Angular applications, see the documentation for {\@link bootstrap}.
 *
 * \@stable
 * @abstract
 */var ApplicationRef=function(){function ApplicationRef(){_classCallCheck(this,ApplicationRef);}_createClass(ApplicationRef,[{key:'bootstrap',/**
     * Bootstrap a new component at the root level of the application.
     *
     * ### Bootstrap process
     *
     * When bootstrapping a new root component into an application, Angular mounts the
     * specified application component onto DOM elements identified by the [componentType]'s
     * selector and kicks off automatic change detection to finish initializing the component.
     *
     * ### Example
     * {\@example core/ts/platform/platform.ts region='longform'}
     * @abstract
     * @param {?} componentFactory
     * @return {?}
     */value:function bootstrap(componentFactory){}/**
     * Invoke this method to explicitly process change detection and its side-effects.
     *
     * In development mode, `tick()` also performs a second change detection cycle to ensure that no
     * further changes are detected. If additional changes are picked up during this second cycle,
     * bindings in the app have side-effects that cannot be resolved in a single change detection
     * pass.
     * In this case, Angular throws an error, since an Angular application can only have one change
     * detection pass during which all change detection must complete.
     * @abstract
     * @return {?}
     */},{key:'tick',value:function tick(){}/**
     * Get a list of component types registered to this application.
     * This list is populated even before the component is created.
     * @abstract
     * @return {?}
     */},{key:'componentTypes',value:function componentTypes(){}/**
     * Get a list of components registered to this application.
     * @abstract
     * @return {?}
     */},{key:'components',value:function components(){}/**
     * Attaches a view so that it will be dirty checked.
     * The view will be automatically detached when it is destroyed.
     * This will throw if the view is already attached to a ViewContainer.
     * @abstract
     * @param {?} view
     * @return {?}
     */},{key:'attachView',value:function attachView(view){}/**
     * Detaches a view from dirty checking again.
     * @abstract
     * @param {?} view
     * @return {?}
     */},{key:'detachView',value:function detachView(view){}/**
     * Returns the number of attached views.
     * @abstract
     * @return {?}
     */},{key:'viewCount',value:function viewCount(){}/**
     * Returns an Observable that indicates when the application is stable or unstable.
     * @abstract
     * @return {?}
     */},{key:'isStable',value:function isStable(){}}]);return ApplicationRef;}();/**
 * workaround https://github.com/angular/tsickle/issues/350
 * @suppress {checkTypes}
 */var ApplicationRef_=function(_ApplicationRef){_inherits(ApplicationRef_,_ApplicationRef);/**
     * @param {?} _zone
     * @param {?} _console
     * @param {?} _injector
     * @param {?} _exceptionHandler
     * @param {?} _componentFactoryResolver
     * @param {?} _initStatus
     * @param {?} _testabilityRegistry
     * @param {?} _testability
     */function ApplicationRef_(_zone,_console,_injector,_exceptionHandler,_componentFactoryResolver,_initStatus,_testabilityRegistry,_testability){_classCallCheck(this,ApplicationRef_);var _this18=_possibleConstructorReturn(this,(ApplicationRef_.__proto__||Object.getPrototypeOf(ApplicationRef_)).call(this));_this18._zone=_zone;_this18._console=_console;_this18._injector=_injector;_this18._exceptionHandler=_exceptionHandler;_this18._componentFactoryResolver=_componentFactoryResolver;_this18._initStatus=_initStatus;_this18._testabilityRegistry=_testabilityRegistry;_this18._testability=_testability;_this18._bootstrapListeners=[];_this18._rootComponents=[];_this18._rootComponentTypes=[];_this18._views=[];_this18._runningTick=false;_this18._enforceNoNewChanges=false;_this18._stable=true;_this18._enforceNoNewChanges=isDevMode();_this18._zone.onMicrotaskEmpty.subscribe({next:function next(){_this18._zone.run(function(){_this18.tick();});}});var isCurrentlyStable=new __WEBPACK_IMPORTED_MODULE_0_rxjs_Observable__["Observable"](function(observer){_this18._stable=_this18._zone.isStable&&!_this18._zone.hasPendingMacrotasks&&!_this18._zone.hasPendingMicrotasks;_this18._zone.runOutsideAngular(function(){observer.next(_this18._stable);observer.complete();});});var isStable=new __WEBPACK_IMPORTED_MODULE_0_rxjs_Observable__["Observable"](function(observer){var stableSub=_this18._zone.onStable.subscribe(function(){NgZone.assertNotInAngularZone();// Check whether there are no pending macro/micro tasks in the next tick
// to allow for NgZone to update the state.
scheduleMicroTask(function(){if(!_this18._stable&&!_this18._zone.hasPendingMacrotasks&&!_this18._zone.hasPendingMicrotasks){_this18._stable=true;observer.next(true);}});});var unstableSub=_this18._zone.onUnstable.subscribe(function(){NgZone.assertInAngularZone();if(_this18._stable){_this18._stable=false;_this18._zone.runOutsideAngular(function(){observer.next(false);});}});return function(){stableSub.unsubscribe();unstableSub.unsubscribe();};});_this18._isStable=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_rxjs_observable_merge__["merge"])(isCurrentlyStable,__WEBPACK_IMPORTED_MODULE_2_rxjs_operator_share__["share"].call(isStable));return _this18;}/**
     * @param {?} viewRef
     * @return {?}
     */_createClass(ApplicationRef_,[{key:'attachView',value:function attachView(viewRef){var/** @type {?} */view=viewRef;this._views.push(view);view.attachToAppRef(this);}/**
     * @param {?} viewRef
     * @return {?}
     */},{key:'detachView',value:function detachView(viewRef){var/** @type {?} */view=viewRef;ListWrapper.remove(this._views,view);view.detachFromAppRef();}/**
     * @param {?} componentOrFactory
     * @return {?}
     */},{key:'bootstrap',value:function bootstrap(componentOrFactory){var _this19=this;if(!this._initStatus.done){throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');}var/** @type {?} */componentFactory=void 0;if(componentOrFactory instanceof ComponentFactory){componentFactory=componentOrFactory;}else{componentFactory=this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);}this._rootComponentTypes.push(componentFactory.componentType);var/** @type {?} */compRef=componentFactory.create(this._injector,[],componentFactory.selector);compRef.onDestroy(function(){_this19._unloadComponent(compRef);});var/** @type {?} */testability=compRef.injector.get(Testability,null);if(testability){compRef.injector.get(TestabilityRegistry).registerApplication(compRef.location.nativeElement,testability);}this._loadComponent(compRef);if(isDevMode()){this._console.log('Angular is running in the development mode. Call enableProdMode() to enable the production mode.');}return compRef;}/**
     * @param {?} componentRef
     * @return {?}
     */},{key:'_loadComponent',value:function _loadComponent(componentRef){this.attachView(componentRef.hostView);this.tick();this._rootComponents.push(componentRef);// Get the listeners lazily to prevent DI cycles.
var/** @type {?} */listeners=this._injector.get(APP_BOOTSTRAP_LISTENER,[]).concat(this._bootstrapListeners);listeners.forEach(function(listener){return listener(componentRef);});}/**
     * @param {?} componentRef
     * @return {?}
     */},{key:'_unloadComponent',value:function _unloadComponent(componentRef){this.detachView(componentRef.hostView);ListWrapper.remove(this._rootComponents,componentRef);}/**
     * @return {?}
     */},{key:'tick',value:function tick(){if(this._runningTick){throw new Error('ApplicationRef.tick is called recursively');}var/** @type {?} */scope=ApplicationRef_._tickScope();try{this._runningTick=true;this._views.forEach(function(view){return view.detectChanges();});if(this._enforceNoNewChanges){this._views.forEach(function(view){return view.checkNoChanges();});}}finally{this._runningTick=false;wtfLeave(scope);}}/**
     * @return {?}
     */},{key:'ngOnDestroy',value:function ngOnDestroy(){// TODO(alxhub): Dispose of the NgZone.
this._views.slice().forEach(function(view){return view.destroy();});}/**
     * @return {?}
     */},{key:'viewCount',get:function get(){return this._views.length;}/**
     * @return {?}
     */},{key:'componentTypes',get:function get(){return this._rootComponentTypes;}/**
     * @return {?}
     */},{key:'components',get:function get(){return this._rootComponents;}/**
     * @return {?}
     */},{key:'isStable',get:function get(){return this._isStable;}}]);return ApplicationRef_;}(ApplicationRef);/** @internal */ApplicationRef_._tickScope=wtfCreateScope('ApplicationRef#tick()');ApplicationRef_.decorators=[{type:Injectable}];/** @nocollapse */ApplicationRef_.ctorParameters=function(){return[{type:NgZone},{type:Console},{type:Injector},{type:ErrorHandler},{type:ComponentFactoryResolver},{type:ApplicationInitStatus},{type:TestabilityRegistry,decorators:[{type:Optional}]},{type:Testability,decorators:[{type:Optional}]}];};/**
 * Represents an instance of an NgModule created via a {\@link NgModuleFactory}.
 *
 * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this
 * NgModule Instance.
 *
 * \@stable
 * @abstract
 */var NgModuleRef=function(){function NgModuleRef(){_classCallCheck(this,NgModuleRef);}_createClass(NgModuleRef,[{key:'injector',/**
     * The injector that contains all of the providers of the NgModule.
     * @abstract
     * @return {?}
     */value:function injector(){}/**
     * The ComponentFactoryResolver to get hold of the ComponentFactories
     * declared in the `entryComponents` property of the module.
     * @abstract
     * @return {?}
     */},{key:'componentFactoryResolver',value:function componentFactoryResolver(){}/**
     * The NgModule instance.
     * @abstract
     * @return {?}
     */},{key:'instance',value:function instance(){}/**
     * Destroys the module instance and all of the data structures associated with it.
     * @abstract
     * @return {?}
     */},{key:'destroy',value:function destroy(){}/**
     * Allows to register a callback that will be called when the module is destroyed.
     * @abstract
     * @param {?} callback
     * @return {?}
     */},{key:'onDestroy',value:function onDestroy(callback){}}]);return NgModuleRef;}();/**
 * \@experimental
 */var NgModuleFactory=function(){/**
     * @param {?} _injectorClass
     * @param {?} _moduleType
     */function NgModuleFactory(_injectorClass,_moduleType){_classCallCheck(this,NgModuleFactory);this._injectorClass=_injectorClass;this._moduleType=_moduleType;}/**
     * @return {?}
     */_createClass(NgModuleFactory,[{key:'create',/**
     * @param {?} parentInjector
     * @return {?}
     */value:function create(parentInjector){if(!parentInjector){parentInjector=Injector.NULL;}var/** @type {?} */instance=new this._injectorClass(parentInjector);instance.create();return instance;}},{key:'moduleType',get:function get(){return this._moduleType;}}]);return NgModuleFactory;}();var/** @type {?} */_UNDEFINED=new Object();/**
 * @abstract
 */var NgModuleInjector=function(_CodegenComponentFact){_inherits(NgModuleInjector,_CodegenComponentFact);/**
     * @param {?} parent
     * @param {?} factories
     * @param {?} bootstrapFactories
     */function NgModuleInjector(parent,factories,bootstrapFactories){_classCallCheck(this,NgModuleInjector);var _this20=_possibleConstructorReturn(this,(NgModuleInjector.__proto__||Object.getPrototypeOf(NgModuleInjector)).call(this,factories,parent.get(ComponentFactoryResolver,ComponentFactoryResolver.NULL)));_this20.parent=parent;_this20.bootstrapFactories=bootstrapFactories;_this20._destroyListeners=[];_this20._destroyed=false;return _this20;}/**
     * @return {?}
     */_createClass(NgModuleInjector,[{key:'create',value:function create(){this.instance=this.createInternal();}/**
     * @abstract
     * @return {?}
     */},{key:'createInternal',value:function createInternal(){}/**
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */},{key:'get',value:function get(token){var notFoundValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:THROW_IF_NOT_FOUND;if(token===Injector||token===ComponentFactoryResolver){return this;}var/** @type {?} */result=this.getInternal(token,_UNDEFINED);return result===_UNDEFINED?this.parent.get(token,notFoundValue):result;}/**
     * @abstract
     * @param {?} token
     * @param {?} notFoundValue
     * @return {?}
     */},{key:'getInternal',value:function getInternal(token,notFoundValue){}/**
     * @return {?}
     */},{key:'destroy',/**
     * @return {?}
     */value:function destroy(){if(this._destroyed){throw new Error('The ng module '+stringify(this.instance.constructor)+' has already been destroyed.');}this._destroyed=true;this.destroyInternal();this._destroyListeners.forEach(function(listener){return listener();});}/**
     * @param {?} callback
     * @return {?}
     */},{key:'onDestroy',value:function onDestroy(callback){this._destroyListeners.push(callback);}/**
     * @abstract
     * @return {?}
     */},{key:'destroyInternal',value:function destroyInternal(){}},{key:'injector',get:function get(){return this;}/**
     * @return {?}
     */},{key:'componentFactoryResolver',get:function get(){return this;}}]);return NgModuleInjector;}(CodegenComponentFactoryResolver);/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 *//**
 * Used to load ng module factories.
 * \@stable
 * @abstract
 */var NgModuleFactoryLoader=function(){function NgModuleFactoryLoader(){_classCallCheck(this,NgModuleFactoryLoader);}_createClass(NgModuleFactoryLoader,[{key:'load',/**
     * @abstract
     * @param {?} path
     * @return {?}
     */value:function load(path){}}]);return NgModuleFactoryLoader;}();var/** @type {?} */moduleFactories=new Map();/**
 * Registers a loaded module. Should only be called from generated NgModuleFactory code.
 * \@experimental
 * @param {?} id
 * @param {?} factory
 * @return {?}
 */function registerModuleFactory(id,factory){var/** @type {?} */existing=moduleFactories.get(id);if(existing){throw new Error('Duplicate module registered for '+id+' - '+existing.moduleType.name+' vs '+factory.moduleType.name);}moduleFactories.set(id,factory);}/**
 * Returns the NgModuleFactory with the given id, if it exists and has been loaded.
 * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module
 * cannot be found.
 * \@experimental
 * @param {?} id
 * @return {?}
 */function getModuleFactory(id){var/** @type {?} */factory=moduleFactories.get(id);if(!factory)throw new Error('No module with ID '+id+' loaded');return factory;}/**
 * An unmodifiable list of items that Angular keeps up to date when the state
 * of the application changes.
 *
 * The type of object that {\@link Query} and {\@link ViewQueryMetadata} provide.
 *
 * Implements an iterable interface, therefore it can be used in both ES6
 * javascript `for (var i of items)` loops as well as in Angular templates with
 * `*ngFor="let i of myList"`.
 *
 * Changes can be observed by subscribing to the changes `Observable`.
 *
 * NOTE: In the future this class will implement an `Observable` interface.
 *
 * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))
 * ```typescript
 * \@Component({...})
 * class Container {
 *   \@ViewChildren(Item) items:QueryList<Item>;
 * }
 * ```
 * \@stable
 */var QueryList=function(){function QueryList(){_classCallCheck(this,QueryList);this._dirty=true;this._results=[];this._emitter=new EventEmitter();}/**
     * @return {?}
     */_createClass(QueryList,[{key:'map',/**
     * See
     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
     * @param {?} fn
     * @return {?}
     */value:function map(fn){return this._results.map(fn);}/**
     * See
     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
     * @param {?} fn
     * @return {?}
     */},{key:'filter',value:function filter(fn){return this._results.filter(fn);}/**
     * See
     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)
     * @param {?} fn
     * @return {?}
     */},{key:'find',value:function find(fn){return this._results.find(fn);}/**
     * See
     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)
     * @param {?} fn
     * @param {?} init
     * @return {?}
     */},{key:'reduce',value:function reduce(fn,init){return this._results.reduce(fn,init);}/**
     * See
     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
     * @param {?} fn
     * @return {?}
     */},{key:'forEach',value:function forEach(fn){this._results.forEach(fn);}/**
     * See
     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)
     * @param {?} fn
     * @return {?}
     */},{key:'some',value:function some(fn){return this._results.some(fn);}/**
     * @return {?}
     */},{key:'toArray',value:function toArray(){return this._results.slice();}/**
     * @return {?}
     */},{key:getSymbolIterator(),value:function value(){return this._results[getSymbolIterator()]();}/**
     * @return {?}
     */},{key:'toString',value:function toString(){return this._results.toString();}/**
     * @param {?} res
     * @return {?}
     */},{key:'reset',value:function reset(res){this._results=ListWrapper.flatten(res);this._dirty=false;}/**
     * @return {?}
     */},{key:'notifyOnChanges',value:function notifyOnChanges(){this._emitter.emit(this);}/**
     * internal
     * @return {?}
     */},{key:'setDirty',value:function setDirty(){this._dirty=true;}/**
     * internal
     * @return {?}
     */},{key:'changes',get:function get(){return this._emitter;}/**
     * @return {?}
     */},{key:'length',get:function get(){return this._results.length;}/**
     * @return {?}
     */},{key:'first',get:function get(){return this._results[0];}/**
     * @return {?}
     */},{key:'last',get:function get(){return this._results[this.length-1];}},{key:'dirty',get:function get(){return this._dirty;}}]);return QueryList;}();var/** @type {?} */_SEPARATOR='#';var/** @type {?} */FACTORY_CLASS_SUFFIX='NgFactory';/**
 * Configuration for SystemJsNgModuleLoader.
 * token.
 *
 * \@experimental
 * @abstract
 */var SystemJsNgModuleLoaderConfig=function SystemJsNgModuleLoaderConfig(){_classCallCheck(this,SystemJsNgModuleLoaderConfig);};var/** @type {?} */DEFAULT_CONFIG={factoryPathPrefix:'',factoryPathSuffix:'.ngfactory'};/**
 * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory
 * \@experimental
 */var SystemJsNgModuleLoader=function(){/**
     * @param {?} _compiler
     * @param {?=} config
     */function SystemJsNgModuleLoader(_compiler,config){_classCallCheck(this,SystemJsNgModuleLoader);this._compiler=_compiler;this._config=config||DEFAULT_CONFIG;}/**
     * @param {?} path
     * @return {?}
     */_createClass(SystemJsNgModuleLoader,[{key:'load',value:function load(path){var/** @type {?} */offlineMode=this._compiler instanceof Compiler;return offlineMode?this.loadFactory(path):this.loadAndCompile(path);}/**
     * @param {?} path
     * @return {?}
     */},{key:'loadAndCompile',value:function loadAndCompile(path){var _this21=this;var _path$split=path.split(_SEPARATOR),_path$split2=_slicedToArray(_path$split,2),module=_path$split2[0],exportName=_path$split2[1];if(exportName===undefined){exportName='default';}return __webpack_require__(84)(module).then(function(module){return module[exportName];}).then(function(type){return checkNotEmpty(type,module,exportName);}).then(function(type){return _this21._compiler.compileModuleAsync(type);});}/**
     * @param {?} path
     * @return {?}
     */},{key:'loadFactory',value:function loadFactory(path){var _path$split3=path.split(_SEPARATOR),_path$split4=_slicedToArray(_path$split3,2),module=_path$split4[0],exportName=_path$split4[1];var/** @type {?} */factoryClassSuffix=FACTORY_CLASS_SUFFIX;if(exportName===undefined){exportName='default';factoryClassSuffix='';}return __webpack_require__(84)(this._config.factoryPathPrefix+module+this._config.factoryPathSuffix).then(function(module){return module[exportName+factoryClassSuffix];}).then(function(factory){return checkNotEmpty(factory,module,exportName);});}}]);return SystemJsNgModuleLoader;}();SystemJsNgModuleLoader.decorators=[{type:Injectable}];/** @nocollapse */SystemJsNgModuleLoader.ctorParameters=function(){return[{type:Compiler},{type:SystemJsNgModuleLoaderConfig,decorators:[{type:Optional}]}];};/**
 * @param {?} value
 * @param {?} modulePath
 * @param {?} exportName
 * @return {?}
 */function checkNotEmpty(value,modulePath,exportName){if(!value){throw new Error('Cannot find \''+exportName+'\' in \''+modulePath+'\'');}return value;}/**
 * Represents an Embedded Template that can be used to instantiate Embedded Views.
 *
 * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<ng-template>` element
 * (or directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into
 * the constructor of the directive using the `TemplateRef` Token. Alternatively you can query for
 * the `TemplateRef` from a Component or a Directive via {\@link Query}.
 *
 * To instantiate Embedded Views based on a Template, use
 * {\@link ViewContainerRef#createEmbeddedView}, which will create the View and attach it to the
 * View Container.
 * \@stable
 * @abstract
 */var TemplateRef=function(){function TemplateRef(){_classCallCheck(this,TemplateRef);}_createClass(TemplateRef,[{key:'elementRef',/**
     * @abstract
     * @return {?}
     */value:function elementRef(){}/**
     * @abstract
     * @param {?} context
     * @return {?}
     */},{key:'createEmbeddedView',value:function createEmbeddedView(context){}}]);return TemplateRef;}();/**
 * workaround https://github.com/angular/tsickle/issues/350
 * @suppress {checkTypes}
 */var TemplateRef_=function(_TemplateRef){_inherits(TemplateRef_,_TemplateRef);/**
     * @param {?} _parentView
     * @param {?} _nodeIndex
     * @param {?} _nativeElement
     */function TemplateRef_(_parentView,_nodeIndex,_nativeElement){_classCallCheck(this,TemplateRef_);var _this22=_possibleConstructorReturn(this,(TemplateRef_.__proto__||Object.getPrototypeOf(TemplateRef_)).call(this));_this22._parentView=_parentView;_this22._nodeIndex=_nodeIndex;_this22._nativeElement=_nativeElement;return _this22;}/**
     * @param {?} context
     * @return {?}
     */_createClass(TemplateRef_,[{key:'createEmbeddedView',value:function createEmbeddedView(context){var/** @type {?} */view=this._parentView.createEmbeddedViewInternal(this._nodeIndex);view.create(context||{});return view.ref;}/**
     * @return {?}
     */},{key:'elementRef',get:function get(){return new ElementRef(this._nativeElement);}}]);return TemplateRef_;}(TemplateRef);/**
 * Represents a container where one or more Views can be attached.
 *
 * The container can contain two kinds of Views. Host Views, created by instantiating a
 * {\@link Component} via {\@link #createComponent}, and Embedded Views, created by instantiating an
 * {\@link TemplateRef Embedded Template} via {\@link #createEmbeddedView}.
 *
 * The location of the View Container within the containing View is specified by the Anchor
 * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only
 * have a single View Container.
 *
 * Root elements of Views attached to this container become siblings of the Anchor Element in
 * the Rendered View.
 *
 * To access a `ViewContainerRef` of an Element, you can either place a {\@link Directive} injected
 * with `ViewContainerRef` on the Element, or you obtain it via a {\@link ViewChild} query.
 * \@stable
 * @abstract
 */var ViewContainerRef=function(){function ViewContainerRef(){_classCallCheck(this,ViewContainerRef);}_createClass(ViewContainerRef,[{key:'element',/**
     * Anchor element that specifies the location of this container in the containing View.
     * <!-- TODO: rename to anchorElement -->
     * @abstract
     * @return {?}
     */value:function element(){}/**
     * @abstract
     * @return {?}
     */},{key:'injector',value:function injector(){}/**
     * @abstract
     * @return {?}
     */},{key:'parentInjector',value:function parentInjector(){}/**
     * Destroys all Views in this container.
     * @abstract
     * @return {?}
     */},{key:'clear',value:function clear(){}/**
     * Returns the {\@link ViewRef} for the View located in this container at the specified index.
     * @abstract
     * @param {?} index
     * @return {?}
     */},{key:'get',value:function get(index){}/**
     * Returns the number of Views currently attached to this container.
     * @abstract
     * @return {?}
     */},{key:'length',value:function length(){}/**
     * Instantiates an Embedded View based on the {\@link TemplateRef `templateRef`} and inserts it
     * into this container at the specified `index`.
     *
     * If `index` is not specified, the new View will be inserted as the last View in the container.
     *
     * Returns the {\@link ViewRef} for the newly created View.
     * @abstract
     * @param {?} templateRef
     * @param {?=} context
     * @param {?=} index
     * @return {?}
     */},{key:'createEmbeddedView',value:function createEmbeddedView(templateRef,context,index){}/**
     * Instantiates a single {\@link Component} and inserts its Host View into this container at the
     * specified `index`.
     *
     * The component is instantiated using its {\@link ComponentFactory} which can be
     * obtained via {\@link ComponentFactoryResolver#resolveComponentFactory}.
     *
     * If `index` is not specified, the new View will be inserted as the last View in the container.
     *
     * You can optionally specify the {\@link Injector} that will be used as parent for the Component.
     *
     * Returns the {\@link ComponentRef} of the Host View created for the newly instantiated Component.
     * @abstract
     * @param {?} componentFactory
     * @param {?=} index
     * @param {?=} injector
     * @param {?=} projectableNodes
     * @return {?}
     */},{key:'createComponent',value:function createComponent(componentFactory,index,injector,projectableNodes){}/**
     * Inserts a View identified by a {\@link ViewRef} into the container at the specified `index`.
     *
     * If `index` is not specified, the new View will be inserted as the last View in the container.
     *
     * Returns the inserted {\@link ViewRef}.
     * @abstract
     * @param {?} viewRef
     * @param {?=} index
     * @return {?}
     */},{key:'insert',value:function insert(viewRef,index){}/**
     * Moves a View identified by a {\@link ViewRef} into the container at the specified `index`.
     *
     * Returns the inserted {\@link ViewRef}.
     * @abstract
     * @param {?} viewRef
     * @param {?} currentIndex
     * @return {?}
     */},{key:'move',value:function move(viewRef,currentIndex){}/**
     * Returns the index of the View, specified via {\@link ViewRef}, within the current container or
     * `-1` if this container doesn't contain the View.
     * @abstract
     * @param {?} viewRef
     * @return {?}
     */},{key:'indexOf',value:function indexOf(viewRef){}/**
     * Destroys a View attached to this container at the specified `index`.
     *
     * If `index` is not specified, the last View in the container will be removed.
     * @abstract
     * @param {?=} index
     * @return {?}
     */},{key:'remove',value:function remove(index){}/**
     * Use along with {\@link #insert} to move a View within the current container.
     *
     * If the `index` param is omitted, the last {\@link ViewRef} is detached.
     * @abstract
     * @param {?=} index
     * @return {?}
     */},{key:'detach',value:function detach(index){}}]);return ViewContainerRef;}();var ViewContainerRef_=function(){/**
     * @param {?} _element
     */function ViewContainerRef_(_element){_classCallCheck(this,ViewContainerRef_);this._element=_element;/** @internal */this._createComponentInContainerScope=wtfCreateScope('ViewContainerRef#createComponent()');/** @internal */this._insertScope=wtfCreateScope('ViewContainerRef#insert()');/** @internal */this._removeScope=wtfCreateScope('ViewContainerRef#remove()');/** @internal */this._detachScope=wtfCreateScope('ViewContainerRef#detach()');}/**
     * @param {?} index
     * @return {?}
     */_createClass(ViewContainerRef_,[{key:'get',value:function get(index){return this._element.nestedViews[index].ref;}/**
     * @return {?}
     */},{key:'createEmbeddedView',/**
     * @param {?} templateRef
     * @param {?=} context
     * @param {?=} index
     * @return {?}
     */value:function createEmbeddedView(templateRef){var context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var index=arguments.length>2&&arguments[2]!==undefined?arguments[2]:-1;var/** @type {?} */viewRef=templateRef.createEmbeddedView(context);this.insert(viewRef,index);return viewRef;}/**
     * @param {?} componentFactory
     * @param {?=} index
     * @param {?=} injector
     * @param {?=} projectableNodes
     * @return {?}
     */},{key:'createComponent',value:function createComponent(componentFactory){var index=arguments.length>1&&arguments[1]!==undefined?arguments[1]:-1;var injector=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var projectableNodes=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var/** @type {?} */s=this._createComponentInContainerScope();var/** @type {?} */contextInjector=injector||this._element.parentInjector;var/** @type {?} */componentRef=componentFactory.create(contextInjector,projectableNodes);this.insert(componentRef.hostView,index);return wtfLeave(s,componentRef);}/**
     * @param {?} viewRef
     * @param {?=} index
     * @return {?}
     */},{key:'insert',value:function insert(viewRef){var index=arguments.length>1&&arguments[1]!==undefined?arguments[1]:-1;var/** @type {?} */s=this._insertScope();if(index==-1)index=this.length;var/** @type {?} */viewRef_=viewRef;this._element.attachView(viewRef_.internalView,index);return wtfLeave(s,viewRef_);}/**
     * @param {?} viewRef
     * @param {?} currentIndex
     * @return {?}
     */},{key:'move',value:function move(viewRef,currentIndex){var/** @type {?} */s=this._insertScope();if(currentIndex==-1)return;var/** @type {?} */viewRef_=viewRef;this._element.moveView(viewRef_.internalView,currentIndex);return wtfLeave(s,viewRef_);}/**
     * @param {?} viewRef
     * @return {?}
     */},{key:'indexOf',value:function indexOf(viewRef){return this.length?this._element.nestedViews.indexOf(viewRef.internalView):-1;}/**
     * @param {?=} index
     * @return {?}
     */},{key:'remove',value:function remove(){var index=arguments.length>0&&arguments[0]!==undefined?arguments[0]:-1;var/** @type {?} */s=this._removeScope();if(index==-1)index=this.length-1;var/** @type {?} */view=this._element.detachView(index);view.destroy();// view is intentionally not returned to the client.
wtfLeave(s);}/**
     * @param {?=} index
     * @return {?}
     */},{key:'detach',value:function detach(){var index=arguments.length>0&&arguments[0]!==undefined?arguments[0]:-1;var/** @type {?} */s=this._detachScope();if(index==-1)index=this.length-1;var/** @type {?} */view=this._element.detachView(index);return wtfLeave(s,view.ref);}/**
     * @return {?}
     */},{key:'clear',value:function clear(){for(var/** @type {?} */i=this.length-1;i>=0;i--){this.remove(i);}}},{key:'length',get:function get(){var/** @type {?} */views=this._element.nestedViews;return views?views.length:0;}/**
     * @return {?}
     */},{key:'element',get:function get(){return this._element.elementRef;}/**
     * @return {?}
     */},{key:'injector',get:function get(){return this._element.injector;}/**
     * @return {?}
     */},{key:'parentInjector',get:function get(){return this._element.parentInjector;}}]);return ViewContainerRef_;}();/**
 * \@stable
 * @abstract
 */var ViewRef=function(_ChangeDetectorRef){_inherits(ViewRef,_ChangeDetectorRef);function ViewRef(){_classCallCheck(this,ViewRef);return _possibleConstructorReturn(this,(ViewRef.__proto__||Object.getPrototypeOf(ViewRef)).apply(this,arguments));}_createClass(ViewRef,[{key:'destroy',/**
     * Destroys the view and all of the data structures associated with it.
     * @abstract
     * @return {?}
     */value:function destroy(){}/**
     * @abstract
     * @return {?}
     */},{key:'destroyed',value:function destroyed(){}/**
     * @abstract
     * @param {?} callback
     * @return {?}
     */},{key:'onDestroy',value:function onDestroy(callback){}}]);return ViewRef;}(ChangeDetectorRef);/**
 * Represents an Angular View.
 *
 * <!-- TODO: move the next two paragraphs to the dev guide -->
 * A View is a fundamental building block of the application UI. It is the smallest grouping of
 * Elements which are created and destroyed together.
 *
 * Properties of elements in a View can change, but the structure (number and order) of elements in
 * a View cannot. Changing the structure of Elements can only be done by inserting, moving or
 * removing nested Views via a {\@link ViewContainerRef}. Each View can contain many View Containers.
 * <!-- /TODO -->
 *
 * ### Example
 *
 * Given this template...
 *
 * ```
 * Count: {{items.length}}
 * <ul>
 *   <li *ngFor="let  item of items">{{item}}</li>
 * </ul>
 * ```
 *
 * We have two {\@link TemplateRef}s:
 *
 * Outer {\@link TemplateRef}:
 * ```
 * Count: {{items.length}}
 * <ul>
 *   <ng-template ngFor let-item [ngForOf]="items"></ng-template>
 * </ul>
 * ```
 *
 * Inner {\@link TemplateRef}:
 * ```
 *   <li>{{item}}</li>
 * ```
 *
 * Notice that the original template is broken down into two separate {\@link TemplateRef}s.
 *
 * The outer/inner {\@link TemplateRef}s are then assembled into views like so:
 *
 * ```
 * <!-- ViewRef: outer-0 -->
 * Count: 2
 * <ul>
 *   <ng-template view-container-ref></ng-template>
 *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->
 *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->
 * </ul>
 * <!-- /ViewRef: outer-0 -->
 * ```
 * \@experimental
 * @abstract
 */var EmbeddedViewRef=function(_ViewRef){_inherits(EmbeddedViewRef,_ViewRef);function EmbeddedViewRef(){_classCallCheck(this,EmbeddedViewRef);return _possibleConstructorReturn(this,(EmbeddedViewRef.__proto__||Object.getPrototypeOf(EmbeddedViewRef)).apply(this,arguments));}_createClass(EmbeddedViewRef,[{key:'context',/**
     * @abstract
     * @return {?}
     */value:function context(){}/**
     * @abstract
     * @return {?}
     */},{key:'rootNodes',value:function rootNodes(){}}]);return EmbeddedViewRef;}(ViewRef);var ViewRef_=function(){/**
     * @param {?} _view
     * @param {?} animationQueue
     */function ViewRef_(_view,animationQueue){_classCallCheck(this,ViewRef_);this._view=_view;this.animationQueue=animationQueue;this._view=_view;this._originalMode=this._view.cdMode;}/**
     * @return {?}
     */_createClass(ViewRef_,[{key:'markForCheck',/**
     * @return {?}
     */value:function markForCheck(){this._view.markPathToRootAsCheckOnce();}/**
     * @return {?}
     */},{key:'detach',value:function detach(){this._view.cdMode=ChangeDetectorStatus.Detached;}/**
     * @return {?}
     */},{key:'detectChanges',value:function detectChanges(){this._view.detectChanges(false);this.animationQueue.flush();}/**
     * @return {?}
     */},{key:'checkNoChanges',value:function checkNoChanges(){this._view.detectChanges(true);}/**
     * @return {?}
     */},{key:'reattach',value:function reattach(){this._view.cdMode=this._originalMode;this.markForCheck();}/**
     * @param {?} callback
     * @return {?}
     */},{key:'onDestroy',value:function onDestroy(callback){if(!this._view.disposables){this._view.disposables=[];}this._view.disposables.push(callback);}/**
     * @return {?}
     */},{key:'destroy',value:function destroy(){this._view.detachAndDestroy();}/**
     * @return {?}
     */},{key:'detachFromAppRef',value:function detachFromAppRef(){this._view.detach();}/**
     * @param {?} appRef
     * @return {?}
     */},{key:'attachToAppRef',value:function attachToAppRef(appRef){this._view.attachToAppRef(appRef);}},{key:'internalView',get:function get(){return this._view;}/**
     * @return {?}
     */},{key:'rootNodes',get:function get(){return this._view.flatRootNodes;}/**
     * @return {?}
     */},{key:'context',get:function get(){return this._view.context;}/**
     * @return {?}
     */},{key:'destroyed',get:function get(){return this._view.destroyed;}}]);return ViewRef_;}();/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */var EventListener=/**
     * @param {?} name
     * @param {?} callback
     */function EventListener(name,callback){_classCallCheck(this,EventListener);this.name=name;this.callback=callback;};/**
 * \@experimental All debugging apis are currently experimental.
 */var DebugNode=function(){/**
     * @param {?} nativeNode
     * @param {?} parent
     * @param {?} _debugInfo
     */function DebugNode(nativeNode,parent,_debugInfo){_classCallCheck(this,DebugNode);this._debugInfo=_debugInfo;this.nativeNode=nativeNode;if(parent&&parent instanceof DebugElement){parent.addChild(this);}else{this.parent=null;}this.listeners=[];}/**
     * @return {?}
     */_createClass(DebugNode,[{key:'injector',get:function get(){return this._debugInfo?this._debugInfo.injector:null;}/**
     * @return {?}
     */},{key:'componentInstance',get:function get(){return this._debugInfo?this._debugInfo.component:null;}/**
     * @return {?}
     */},{key:'context',get:function get(){return this._debugInfo?this._debugInfo.context:null;}/**
     * @return {?}
     */},{key:'references',get:function get(){return this._debugInfo?this._debugInfo.references:null;}/**
     * @return {?}
     */},{key:'providerTokens',get:function get(){return this._debugInfo?this._debugInfo.providerTokens:null;}/**
     * @return {?}
     */},{key:'source',get:function get(){return this._debugInfo?this._debugInfo.source:null;}}]);return DebugNode;}();/**
 * \@experimental All debugging apis are currently experimental.
 */var DebugElement=function(_DebugNode){_inherits(DebugElement,_DebugNode);/**
     * @param {?} nativeNode
     * @param {?} parent
     * @param {?} _debugInfo
     */function DebugElement(nativeNode,parent,_debugInfo){_classCallCheck(this,DebugElement);var _this25=_possibleConstructorReturn(this,(DebugElement.__proto__||Object.getPrototypeOf(DebugElement)).call(this,nativeNode,parent,_debugInfo));_this25.properties={};_this25.attributes={};_this25.classes={};_this25.styles={};_this25.childNodes=[];_this25.nativeElement=nativeNode;return _this25;}/**
     * @param {?} child
     * @return {?}
     */_createClass(DebugElement,[{key:'addChild',value:function addChild(child){if(child){this.childNodes.push(child);child.parent=this;}}/**
     * @param {?} child
     * @return {?}
     */},{key:'removeChild',value:function removeChild(child){var/** @type {?} */childIndex=this.childNodes.indexOf(child);if(childIndex!==-1){child.parent=null;this.childNodes.splice(childIndex,1);}}/**
     * @param {?} child
     * @param {?} newChildren
     * @return {?}
     */},{key:'insertChildrenAfter',value:function insertChildrenAfter(child,newChildren){var _this26=this;var/** @type {?} */siblingIndex=this.childNodes.indexOf(child);if(siblingIndex!==-1){var _childNodes;(_childNodes=this.childNodes).splice.apply(_childNodes,[siblingIndex+1,0].concat(_toConsumableArray(newChildren)));newChildren.forEach(function(c){if(c.parent){c.parent.removeChild(c);}c.parent=_this26;});}}/**
     * @param {?} refChild
     * @param {?} newChild
     * @return {?}
     */},{key:'insertBefore',value:function insertBefore(refChild,newChild){var/** @type {?} */refIndex=this.childNodes.indexOf(refChild);if(refIndex===-1){this.addChild(newChild);}else{if(newChild.parent){newChild.parent.removeChild(newChild);}newChild.parent=this;this.childNodes.splice(refIndex,0,newChild);}}/**
     * @param {?} predicate
     * @return {?}
     */},{key:'query',value:function query(predicate){var/** @type {?} */results=this.queryAll(predicate);return results[0]||null;}/**
     * @param {?} predicate
     * @return {?}
     */},{key:'queryAll',value:function queryAll(predicate){var/** @type {?} */matches=[];_queryElementChildren(this,predicate,matches);return matches;}/**
     * @param {?} predicate
     * @return {?}
     */},{key:'queryAllNodes',value:function queryAllNodes(predicate){var/** @type {?} */matches=[];_queryNodeChildren(this,predicate,matches);return matches;}/**
     * @return {?}
     */},{key:'triggerEventHandler',/**
     * @param {?} eventName
     * @param {?} eventObj
     * @return {?}
     */value:function triggerEventHandler(eventName,eventObj){this.listeners.forEach(function(listener){if(listener.name==eventName){listener.callback(eventObj);}});}},{key:'children',get:function get(){return this.childNodes.filter(function(node){return node instanceof DebugElement;});}}]);return DebugElement;}(DebugNode);/**
 * \@experimental
 * @param {?} debugEls
 * @return {?}
 */function asNativeElements(debugEls){return debugEls.map(function(el){return el.nativeElement;});}/**
 * @param {?} element
 * @param {?} predicate
 * @param {?} matches
 * @return {?}
 */function _queryElementChildren(element,predicate,matches){element.childNodes.forEach(function(node){if(node instanceof DebugElement){if(predicate(node)){matches.push(node);}_queryElementChildren(node,predicate,matches);}});}/**
 * @param {?} parentNode
 * @param {?} predicate
 * @param {?} matches
 * @return {?}
 */function _queryNodeChildren(parentNode,predicate,matches){if(parentNode instanceof DebugElement){parentNode.childNodes.forEach(function(node){if(predicate(node)){matches.push(node);}if(node instanceof DebugElement){_queryNodeChildren(node,predicate,matches);}});}}// Need to keep the nodes in a global Map so that multiple angular apps are supported.
var/** @type {?} */_nativeNodeToDebugNode=new Map();/**
 * \@experimental
 * @param {?} nativeNode
 * @return {?}
 */function getDebugNode(nativeNode){return _nativeNodeToDebugNode.get(nativeNode);}/**
 * @param {?} node
 * @return {?}
 */function indexDebugNode(node){_nativeNodeToDebugNode.set(node.nativeNode,node);}/**
 * @param {?} node
 * @return {?}
 */function removeDebugNodeFromIndex(node){_nativeNodeToDebugNode.delete(node.nativeNode);}/**
 * @return {?}
 */function _reflector(){return reflector;}var/** @type {?} */_CORE_PLATFORM_PROVIDERS=[// Set a default platform name for platforms that don't set it explicitly.
{provide:PLATFORM_ID,useValue:'unknown'},PlatformRef_,{provide:PlatformRef,useExisting:PlatformRef_},{provide:Reflector,useFactory:_reflector,deps:[]},{provide:ReflectorReader,useExisting:Reflector},TestabilityRegistry,Console];/**
 * This platform has to be included in any other platform
 *
 * @experimental
 */var/** @type {?} */platformCore=createPlatformFactory(null,'core',_CORE_PLATFORM_PROVIDERS);/**
 * @experimental i18n support is experimental.
 */var/** @type {?} */LOCALE_ID=new InjectionToken('LocaleId');/**
 * @experimental i18n support is experimental.
 */var/** @type {?} */TRANSLATIONS=new InjectionToken('Translations');/**
 * @experimental i18n support is experimental.
 */var/** @type {?} */TRANSLATIONS_FORMAT=new InjectionToken('TranslationsFormat');var MissingTranslationStrategy={};MissingTranslationStrategy.Error=0;MissingTranslationStrategy.Warning=1;MissingTranslationStrategy.Ignore=2;MissingTranslationStrategy[MissingTranslationStrategy.Error]="Error";MissingTranslationStrategy[MissingTranslationStrategy.Warning]="Warning";MissingTranslationStrategy[MissingTranslationStrategy.Ignore]="Ignore";/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */var ArgumentType={};ArgumentType.Inline=0;ArgumentType.Dynamic=1;ArgumentType[ArgumentType.Inline]="Inline";ArgumentType[ArgumentType.Dynamic]="Dynamic";var ViewFlags={};ViewFlags.None=0;ViewFlags.OnPush=2;ViewFlags[ViewFlags.None]="None";ViewFlags[ViewFlags.OnPush]="OnPush";var NodeType={};NodeType.Element=0;NodeType.Text=1;NodeType.Directive=2;NodeType.Provider=3;NodeType.Pipe=4;NodeType.PureExpression=5;NodeType.Query=6;NodeType.NgContent=7;NodeType[NodeType.Element]="Element";NodeType[NodeType.Text]="Text";NodeType[NodeType.Directive]="Directive";NodeType[NodeType.Provider]="Provider";NodeType[NodeType.Pipe]="Pipe";NodeType[NodeType.PureExpression]="PureExpression";NodeType[NodeType.Query]="Query";NodeType[NodeType.NgContent]="NgContent";var NodeFlags={};NodeFlags.None=0;NodeFlags.OnInit=1;NodeFlags.OnDestroy=2;NodeFlags.DoCheck=4;NodeFlags.OnChanges=8;NodeFlags.AfterContentInit=16;NodeFlags.AfterContentChecked=32;NodeFlags.AfterViewInit=64;NodeFlags.AfterViewChecked=128;NodeFlags.HasEmbeddedViews=256;NodeFlags.HasComponent=512;NodeFlags.IsComponent=1024;NodeFlags.HasContentQuery=2048;NodeFlags.HasStaticQuery=4096;NodeFlags.HasDynamicQuery=8192;NodeFlags.HasViewQuery=16384;NodeFlags.LazyProvider=32768;NodeFlags.PrivateProvider=65536;NodeFlags[NodeFlags.None]="None";NodeFlags[NodeFlags.OnInit]="OnInit";NodeFlags[NodeFlags.OnDestroy]="OnDestroy";NodeFlags[NodeFlags.DoCheck]="DoCheck";NodeFlags[NodeFlags.OnChanges]="OnChanges";NodeFlags[NodeFlags.AfterContentInit]="AfterContentInit";NodeFlags[NodeFlags.AfterContentChecked]="AfterContentChecked";NodeFlags[NodeFlags.AfterViewInit]="AfterViewInit";NodeFlags[NodeFlags.AfterViewChecked]="AfterViewChecked";NodeFlags[NodeFlags.HasEmbeddedViews]="HasEmbeddedViews";NodeFlags[NodeFlags.HasComponent]="HasComponent";NodeFlags[NodeFlags.IsComponent]="IsComponent";NodeFlags[NodeFlags.HasContentQuery]="HasContentQuery";NodeFlags[NodeFlags.HasStaticQuery]="HasStaticQuery";NodeFlags[NodeFlags.HasDynamicQuery]="HasDynamicQuery";NodeFlags[NodeFlags.HasViewQuery]="HasViewQuery";NodeFlags[NodeFlags.LazyProvider]="LazyProvider";NodeFlags[NodeFlags.PrivateProvider]="PrivateProvider";var BindingType={};BindingType.ElementAttribute=0;BindingType.ElementClass=1;BindingType.ElementStyle=2;BindingType.ElementProperty=3;BindingType.ComponentHostProperty=4;BindingType.DirectiveProperty=5;BindingType.TextInterpolation=6;BindingType.PureExpressionProperty=7;BindingType[BindingType.ElementAttribute]="ElementAttribute";BindingType[BindingType.ElementClass]="ElementClass";BindingType[BindingType.ElementStyle]="ElementStyle";BindingType[BindingType.ElementProperty]="ElementProperty";BindingType[BindingType.ComponentHostProperty]="ComponentHostProperty";BindingType[BindingType.DirectiveProperty]="DirectiveProperty";BindingType[BindingType.TextInterpolation]="TextInterpolation";BindingType[BindingType.PureExpressionProperty]="PureExpressionProperty";var OutputType={};OutputType.ElementOutput=0;OutputType.DirectiveOutput=1;OutputType[OutputType.ElementOutput]="ElementOutput";OutputType[OutputType.DirectiveOutput]="DirectiveOutput";var QueryValueType={};QueryValueType.ElementRef=0;QueryValueType.RenderElement=1;QueryValueType.TemplateRef=2;QueryValueType.ViewContainerRef=3;QueryValueType.Provider=4;QueryValueType[QueryValueType.ElementRef]="ElementRef";QueryValueType[QueryValueType.RenderElement]="RenderElement";QueryValueType[QueryValueType.TemplateRef]="TemplateRef";QueryValueType[QueryValueType.ViewContainerRef]="ViewContainerRef";QueryValueType[QueryValueType.Provider]="Provider";var ProviderType={};ProviderType.Value=0;ProviderType.Class=1;ProviderType.Factory=2;ProviderType.UseExisting=3;ProviderType[ProviderType.Value]="Value";ProviderType[ProviderType.Class]="Class";ProviderType[ProviderType.Factory]="Factory";ProviderType[ProviderType.UseExisting]="UseExisting";var DepFlags={};DepFlags.None=0;DepFlags.SkipSelf=1;DepFlags.Optional=2;DepFlags.Value=8;DepFlags[DepFlags.None]="None";DepFlags[DepFlags.SkipSelf]="SkipSelf";DepFlags[DepFlags.Optional]="Optional";DepFlags[DepFlags.Value]="Value";var PureExpressionType={};PureExpressionType.Array=0;PureExpressionType.Object=1;PureExpressionType.Pipe=2;PureExpressionType[PureExpressionType.Array]="Array";PureExpressionType[PureExpressionType.Object]="Object";PureExpressionType[PureExpressionType.Pipe]="Pipe";var QueryBindingType={};QueryBindingType.First=0;QueryBindingType.All=1;QueryBindingType[QueryBindingType.First]="First";QueryBindingType[QueryBindingType.All]="All";var ViewState={};ViewState.FirstCheck=1;ViewState.ChecksEnabled=2;ViewState.Errored=4;ViewState.Destroyed=8;ViewState[ViewState.FirstCheck]="FirstCheck";ViewState[ViewState.ChecksEnabled]="ChecksEnabled";ViewState[ViewState.Errored]="Errored";ViewState[ViewState.Destroyed]="Destroyed";/**
 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
 * @param {?} view
 * @param {?} index
 * @return {?}
 */function asTextData(view,index){return view.nodes[index];}/**
 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
 * @param {?} view
 * @param {?} index
 * @return {?}
 */function asElementData(view,index){return view.nodes[index];}/**
 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
 * @param {?} view
 * @param {?} index
 * @return {?}
 */function asProviderData(view,index){return view.nodes[index];}/**
 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
 * @param {?} view
 * @param {?} index
 * @return {?}
 */function asPureExpressionData(view,index){return view.nodes[index];}/**
 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
 * @param {?} view
 * @param {?} index
 * @return {?}
 */function asQueryList(view,index){return view.nodes[index];}var CheckType={};CheckType.CheckAndUpdate=0;CheckType.CheckNoChanges=1;CheckType[CheckType.CheckAndUpdate]="CheckAndUpdate";CheckType[CheckType.CheckNoChanges]="CheckNoChanges";/**
 * This object is used to prevent cycles in the source files and to have a place where
 * debug mode can hook it. It is lazily filled when `isDevMode` is known.
 */var/** @type {?} */Services={setCurrentNode:undefined,createRootView:undefined,createEmbeddedView:undefined,checkAndUpdateView:undefined,checkNoChangesView:undefined,destroyView:undefined,resolveDep:undefined,createDebugContext:undefined,handleEvent:undefined,updateDirectives:undefined,updateRenderer:undefined,dirtyParentQueries:undefined};/**
 * @param {?} context
 * @param {?} oldValue
 * @param {?} currValue
 * @param {?} isFirstCheck
 * @return {?}
 */function expressionChangedAfterItHasBeenCheckedError$1(context,oldValue,currValue,isFirstCheck){var/** @type {?} */msg='ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: \''+oldValue+'\'. Current value: \''+currValue+'\'.';if(isFirstCheck){msg+=' It seems like the view has been created after its parent and its children have been dirty checked.'+' Has it been created in a change detection hook ?';}return viewDebugError(msg,context);}/**
 * @param {?} originalError
 * @param {?} context
 * @return {?}
 */function viewWrappedDebugError(originalError,context){var/** @type {?} */err=viewDebugError(originalError.message,context);err[ERROR_ORIGINAL_ERROR]=originalError;return err;}/**
 * @param {?} msg
 * @param {?} context
 * @return {?}
 */function viewDebugError(msg,context){var/** @type {?} */err=new Error(msg);err[ERROR_DEBUG_CONTEXT]=context;err.stack=context.source;return err;}/**
 * @param {?} err
 * @return {?}
 */function isViewDebugError(err){return!!getDebugContext(err);}/**
 * @param {?} action
 * @return {?}
 */function viewDestroyedError$1(action){return new Error('ViewDestroyedError: Attempt to use a destroyed view: '+action);}var/** @type {?} */_tokenKeyCache=new Map();/**
 * @param {?} token
 * @return {?}
 */function tokenKey(token){var/** @type {?} */key=_tokenKeyCache.get(token);if(!key){key=stringify(token)+'_'+_tokenKeyCache.size;_tokenKeyCache.set(token,key);}return key;}var/** @type {?} */unwrapCounter=0;/**
 * @param {?} value
 * @return {?}
 */function unwrapValue(value){if(value instanceof WrappedValue){value=value.wrapped;unwrapCounter++;}return value;}var/** @type {?} */_renderCompCount=0;/**
 * @param {?} values
 * @return {?}
 */function createRendererTypeV2(values){var/** @type {?} */isFilled=values&&(values.encapsulation!==ViewEncapsulation.None||values.styles.length||Object.keys(values.data).length);if(isFilled){var/** @type {?} */id='c'+_renderCompCount++;return{id:id,styles:values.styles,encapsulation:values.encapsulation,data:values.data};}else{return null;}}/**
 * @param {?} view
 * @param {?} def
 * @param {?} bindingIdx
 * @param {?} value
 * @return {?}
 */function checkBinding$1(view,def,bindingIdx,value){var/** @type {?} */oldValues=view.oldValues;if(unwrapCounter>0||!!(view.state&ViewState.FirstCheck)||!looseIdentical(oldValues[def.bindingIndex+bindingIdx],value)){unwrapCounter=0;return true;}return false;}/**
 * @param {?} view
 * @param {?} def
 * @param {?} bindingIdx
 * @param {?} value
 * @return {?}
 */function checkAndUpdateBinding(view,def,bindingIdx,value){if(checkBinding$1(view,def,bindingIdx,value)){view.oldValues[def.bindingIndex+bindingIdx]=value;return true;}return false;}/**
 * @param {?} view
 * @param {?} def
 * @param {?} bindingIdx
 * @param {?} value
 * @return {?}
 */function checkBindingNoChanges(view,def,bindingIdx,value){var/** @type {?} */oldValue=view.oldValues[def.bindingIndex+bindingIdx];if(unwrapCounter||view.state&ViewState.FirstCheck||!devModeEqual(oldValue,value)){unwrapCounter=0;throw expressionChangedAfterItHasBeenCheckedError$1(Services.createDebugContext(view,def.index),oldValue,value,(view.state&ViewState.FirstCheck)!==0);}}/**
 * @param {?} view
 * @return {?}
 */function markParentViewsForCheck(view){var/** @type {?} */currView=view;while(currView){if(currView.def.flags&ViewFlags.OnPush){currView.state|=ViewState.ChecksEnabled;}currView=currView.viewContainerParent||currView.parent;}}/**
 * @param {?} view
 * @param {?} nodeIndex
 * @param {?} eventName
 * @param {?} event
 * @return {?}
 */function dispatchEvent(view,nodeIndex,eventName,event){markParentViewsForCheck(view);return Services.handleEvent(view,nodeIndex,eventName,event);}/**
 * @param {?} view
 * @return {?}
 */function declaredViewContainer(view){if(view.parent){var/** @type {?} */parentView=view.parent;return asElementData(parentView,view.parentNodeDef.index);}return undefined;}/**
 * for component views, this is the host element.
 * for embedded views, this is the index of the parent node
 * that contains the view container.
 * @param {?} view
 * @return {?}
 */function viewParentEl(view){var/** @type {?} */parentView=view.parent;if(parentView){return view.parentNodeDef.parent;}else{return null;}}/**
 * @param {?} view
 * @param {?} def
 * @return {?}
 */function renderNode(view,def){switch(def.type){case NodeType.Element:return asElementData(view,def.index).renderElement;case NodeType.Text:return asTextData(view,def.index).renderText;}}/**
 * @param {?} target
 * @param {?} name
 * @return {?}
 */function elementEventFullName(target,name){return target?target+':'+name:name;}/**
 * @param {?} view
 * @return {?}
 */function isComponentView(view){return view.component===view.context&&!!view.parent;}/**
 * @param {?} view
 * @return {?}
 */function isEmbeddedView(view){return view.component!==view.context&&!!view.parent;}/**
 * @param {?} queryId
 * @return {?}
 */function filterQueryId(queryId){return 1<<queryId%32;}/**
 * @param {?} matchedQueriesDsl
 * @return {?}
 */function splitMatchedQueriesDsl(matchedQueriesDsl){var/** @type {?} */matchedQueries={};var/** @type {?} */matchedQueryIds=0;var/** @type {?} */references={};if(matchedQueriesDsl){matchedQueriesDsl.forEach(function(_ref3){var _ref4=_slicedToArray(_ref3,2),queryId=_ref4[0],valueType=_ref4[1];if(typeof queryId==='number'){matchedQueries[queryId]=valueType;matchedQueryIds|=filterQueryId(queryId);}else{references[queryId]=valueType;}});}return{matchedQueries:matchedQueries,references:references,matchedQueryIds:matchedQueryIds};}/**
 * @param {?} view
 * @param {?} renderHost
 * @param {?} def
 * @return {?}
 */function getParentRenderElement(view,renderHost,def){var/** @type {?} */renderParent=def.renderParent;if(renderParent){if(renderParent.type!==NodeType.Element||(renderParent.flags&NodeFlags.HasComponent)===0||renderParent.element.componentRendererType&&renderParent.element.componentRendererType.encapsulation===ViewEncapsulation.Native){// only children of non components, or children of components with native encapsulation should
// be attached.
return asElementData(view,def.renderParent.index).renderElement;}}else{return renderHost;}}var/** @type {?} */VIEW_DEFINITION_CACHE=new WeakMap();/**
 * @param {?} factory
 * @return {?}
 */function resolveViewDefinition(factory){var/** @type {?} */value=VIEW_DEFINITION_CACHE.get(factory);if(!value){value=factory();VIEW_DEFINITION_CACHE.set(factory,value);}return value;}/**
 * @param {?} start
 * @param {?} end
 * @return {?}
 */function sliceErrorStack(start,end){var/** @type {?} */err=void 0;try{throw new Error();}catch(e){err=e;}var/** @type {?} */stack=err.stack||'';var/** @type {?} */lines=stack.split('\n');if(lines[0].startsWith('Error')){// Chrome always adds the message to the stack as well...
start++;end++;}return lines.slice(start,end).join('\n');}/**
 * @param {?} view
 * @return {?}
 */function rootRenderNodes(view){var/** @type {?} */renderNodes=[];visitRootRenderNodes(view,RenderNodeAction.Collect,undefined,undefined,renderNodes);return renderNodes;}var RenderNodeAction={};RenderNodeAction.Collect=0;RenderNodeAction.AppendChild=1;RenderNodeAction.InsertBefore=2;RenderNodeAction.RemoveChild=3;RenderNodeAction[RenderNodeAction.Collect]="Collect";RenderNodeAction[RenderNodeAction.AppendChild]="AppendChild";RenderNodeAction[RenderNodeAction.InsertBefore]="InsertBefore";RenderNodeAction[RenderNodeAction.RemoveChild]="RemoveChild";/**
 * @param {?} view
 * @param {?} action
 * @param {?} parentNode
 * @param {?} nextSibling
 * @param {?} target
 * @return {?}
 */function visitRootRenderNodes(view,action,parentNode,nextSibling,target){// We need to re-compute the parent node in case the nodes have been moved around manually
if(action===RenderNodeAction.RemoveChild){parentNode=view.renderer.parentNode(renderNode(view,view.def.lastRenderRootNode));}visitSiblingRenderNodes(view,action,0,view.def.nodes.length-1,parentNode,nextSibling,target);}/**
 * @param {?} view
 * @param {?} action
 * @param {?} startIndex
 * @param {?} endIndex
 * @param {?} parentNode
 * @param {?} nextSibling
 * @param {?} target
 * @return {?}
 */function visitSiblingRenderNodes(view,action,startIndex,endIndex,parentNode,nextSibling,target){for(var/** @type {?} */i=startIndex;i<=endIndex;i++){var/** @type {?} */nodeDef=view.def.nodes[i];if(nodeDef.type===NodeType.Element||nodeDef.type===NodeType.Text||nodeDef.type===NodeType.NgContent){visitRenderNode(view,nodeDef,action,parentNode,nextSibling,target);}// jump to next sibling
i+=nodeDef.childCount;}}/**
 * @param {?} view
 * @param {?} ngContentIndex
 * @param {?} action
 * @param {?} parentNode
 * @param {?} nextSibling
 * @param {?} target
 * @return {?}
 */function visitProjectedRenderNodes(view,ngContentIndex,action,parentNode,nextSibling,target){var/** @type {?} */compView=view;while(compView&&!isComponentView(compView)){compView=compView.parent;}var/** @type {?} */hostView=compView.parent;var/** @type {?} */hostElDef=viewParentEl(compView);var/** @type {?} */startIndex=hostElDef.index+1;var/** @type {?} */endIndex=hostElDef.index+hostElDef.childCount;for(var/** @type {?} */i=startIndex;i<=endIndex;i++){var/** @type {?} */nodeDef=hostView.def.nodes[i];if(nodeDef.ngContentIndex===ngContentIndex){visitRenderNode(hostView,nodeDef,action,parentNode,nextSibling,target);}// jump to next sibling
i+=nodeDef.childCount;}if(!hostView.parent){// a root view
var/** @type {?} */projectedNodes=view.root.projectableNodes[ngContentIndex];if(projectedNodes){for(var/** @type {?} */_i=0;_i<projectedNodes.length;_i++){execRenderNodeAction(view,projectedNodes[_i],action,parentNode,nextSibling,target);}}}}/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} action
 * @param {?} parentNode
 * @param {?} nextSibling
 * @param {?} target
 * @return {?}
 */function visitRenderNode(view,nodeDef,action,parentNode,nextSibling,target){if(nodeDef.type===NodeType.NgContent){visitProjectedRenderNodes(view,nodeDef.ngContent.index,action,parentNode,nextSibling,target);}else{var/** @type {?} */rn=renderNode(view,nodeDef);execRenderNodeAction(view,rn,action,parentNode,nextSibling,target);if(nodeDef.flags&NodeFlags.HasEmbeddedViews){var/** @type {?} */embeddedViews=asElementData(view,nodeDef.index).embeddedViews;if(embeddedViews){for(var/** @type {?} */k=0;k<embeddedViews.length;k++){visitRootRenderNodes(embeddedViews[k],action,parentNode,nextSibling,target);}}}if(nodeDef.type===NodeType.Element&&!nodeDef.element.name){visitSiblingRenderNodes(view,action,nodeDef.index+1,nodeDef.index+nodeDef.childCount,parentNode,nextSibling,target);}}}/**
 * @param {?} view
 * @param {?} renderNode
 * @param {?} action
 * @param {?} parentNode
 * @param {?} nextSibling
 * @param {?} target
 * @return {?}
 */function execRenderNodeAction(view,renderNode,action,parentNode,nextSibling,target){var/** @type {?} */renderer=view.renderer;switch(action){case RenderNodeAction.AppendChild:renderer.appendChild(parentNode,renderNode);break;case RenderNodeAction.InsertBefore:renderer.insertBefore(parentNode,renderNode,nextSibling);break;case RenderNodeAction.RemoveChild:renderer.removeChild(parentNode,renderNode);break;case RenderNodeAction.Collect:target.push(renderNode);break;}}var/** @type {?} */NS_PREFIX_RE=/^:([^:]+):(.+)$/;/**
 * @param {?} name
 * @return {?}
 */function splitNamespace(name){if(name[0]===':'){var/** @type {?} */match=name.match(NS_PREFIX_RE);return[match[1],match[2]];}return['',name];}var/** @type {?} */NOOP=function NOOP(){};/**
 * @param {?} flags
 * @param {?} matchedQueriesDsl
 * @param {?} ngContentIndex
 * @param {?} childCount
 * @param {?=} handleEvent
 * @param {?=} templateFactory
 * @return {?}
 */function anchorDef(flags,matchedQueriesDsl,ngContentIndex,childCount,handleEvent,templateFactory){if(!handleEvent){handleEvent=NOOP;}var _splitMatchedQueriesD=splitMatchedQueriesDsl(matchedQueriesDsl),matchedQueries=_splitMatchedQueriesD.matchedQueries,references=_splitMatchedQueriesD.references,matchedQueryIds=_splitMatchedQueriesD.matchedQueryIds;// skip the call to sliceErrorStack itself + the call to this function.
var/** @type {?} */source=isDevMode()?sliceErrorStack(2,3):'';var/** @type {?} */template=templateFactory?resolveViewDefinition(templateFactory):null;return{type:NodeType.Element,// will bet set by the view definition
index:undefined,reverseChildIndex:undefined,parent:undefined,renderParent:undefined,bindingIndex:undefined,outputIndex:undefined,// regular values
flags:flags,childFlags:0,childMatchedQueries:0,matchedQueries:matchedQueries,matchedQueryIds:matchedQueryIds,references:references,ngContentIndex:ngContentIndex,childCount:childCount,bindings:[],outputs:[],element:{ns:undefined,name:undefined,attrs:undefined,template:template,source:source,componentProvider:undefined,componentView:undefined,componentRendererType:undefined,publicProviders:undefined,allProviders:undefined,handleEvent:handleEvent},provider:undefined,text:undefined,pureExpression:undefined,query:undefined,ngContent:undefined};}/**
 * @param {?} flags
 * @param {?} matchedQueriesDsl
 * @param {?} ngContentIndex
 * @param {?} childCount
 * @param {?} namespaceAndName
 * @param {?=} fixedAttrs
 * @param {?=} bindings
 * @param {?=} outputs
 * @param {?=} handleEvent
 * @param {?=} componentView
 * @param {?=} componentRendererType
 * @return {?}
 */function elementDef(flags,matchedQueriesDsl,ngContentIndex,childCount,namespaceAndName){var fixedAttrs=arguments.length>5&&arguments[5]!==undefined?arguments[5]:[];var bindings=arguments[6];var outputs=arguments[7];var handleEvent=arguments[8];var componentView=arguments[9];var componentRendererType=arguments[10];if(!handleEvent){handleEvent=NOOP;}// skip the call to sliceErrorStack itself + the call to this function.
var/** @type {?} */source=isDevMode()?sliceErrorStack(2,3):'';var _splitMatchedQueriesD2=splitMatchedQueriesDsl(matchedQueriesDsl),matchedQueries=_splitMatchedQueriesD2.matchedQueries,references=_splitMatchedQueriesD2.references,matchedQueryIds=_splitMatchedQueriesD2.matchedQueryIds;var/** @type {?} */ns=void 0;var/** @type {?} */name=void 0;if(namespaceAndName){var _splitNamespace=splitNamespace(namespaceAndName);var _splitNamespace2=_slicedToArray(_splitNamespace,2);ns=_splitNamespace2[0];name=_splitNamespace2[1];}bindings=bindings||[];var/** @type {?} */bindingDefs=new Array(bindings.length);for(var/** @type {?} */i=0;i<bindings.length;i++){var/** @type {?} */entry=bindings[i];var/** @type {?} */bindingDef=void 0;var/** @type {?} */bindingType=entry[0];var _splitNamespace3=splitNamespace(entry[1]),_splitNamespace4=_slicedToArray(_splitNamespace3,2),_ns=_splitNamespace4[0],_name=_splitNamespace4[1];var/** @type {?} */securityContext=void 0;var/** @type {?} */suffix=void 0;switch(bindingType){case BindingType.ElementStyle:suffix=entry[2];break;case BindingType.ElementAttribute:case BindingType.ElementProperty:case BindingType.ComponentHostProperty:securityContext=entry[2];break;}bindingDefs[i]={type:bindingType,ns:_ns,name:_name,nonMinifiedName:_name,securityContext:securityContext,suffix:suffix};}outputs=outputs||[];var/** @type {?} */outputDefs=new Array(outputs.length);for(var/** @type {?} */_i2=0;_i2<outputs.length;_i2++){var _outputs$_i=_slicedToArray(outputs[_i2],2),target=_outputs$_i[0],eventName=_outputs$_i[1];outputDefs[_i2]={type:OutputType.ElementOutput,target:/** @type {?} */target,eventName:eventName,propName:undefined};}fixedAttrs=fixedAttrs||[];var/** @type {?} */attrs=fixedAttrs.map(function(_ref5){var _ref6=_slicedToArray(_ref5,2),namespaceAndName=_ref6[0],value=_ref6[1];var _splitNamespace5=splitNamespace(namespaceAndName),_splitNamespace6=_slicedToArray(_splitNamespace5,2),ns=_splitNamespace6[0],name=_splitNamespace6[1];return[ns,name,value];});// This is needed as the jit compiler always uses an empty hash as default RendererTypeV2,
// which is not filled for host views.
if(componentRendererType&&componentRendererType.encapsulation==null){componentRendererType=null;}if(componentView){flags|=NodeFlags.HasComponent;}return{type:NodeType.Element,// will bet set by the view definition
index:undefined,reverseChildIndex:undefined,parent:undefined,renderParent:undefined,bindingIndex:undefined,outputIndex:undefined,// regular values
flags:flags,childFlags:0,childMatchedQueries:0,matchedQueries:matchedQueries,matchedQueryIds:matchedQueryIds,references:references,ngContentIndex:ngContentIndex,childCount:childCount,bindings:bindingDefs,outputs:outputDefs,element:{ns:ns,name:name,attrs:attrs,source:source,template:undefined,// will bet set by the view definition
componentProvider:undefined,componentView:componentView,componentRendererType:componentRendererType,publicProviders:undefined,allProviders:undefined,handleEvent:handleEvent},provider:undefined,text:undefined,pureExpression:undefined,query:undefined,ngContent:undefined};}/**
 * @param {?} view
 * @param {?} renderHost
 * @param {?} def
 * @return {?}
 */function createElement(view,renderHost,def){var/** @type {?} */elDef=def.element;var/** @type {?} */rootSelectorOrNode=view.root.selectorOrNode;var/** @type {?} */renderer=view.renderer;var/** @type {?} */el=void 0;if(view.parent||!rootSelectorOrNode){if(elDef.name){el=renderer.createElement(elDef.name,elDef.ns);}else{el=renderer.createComment('');}var/** @type {?} */parentEl=getParentRenderElement(view,renderHost,def);if(parentEl){renderer.appendChild(parentEl,el);}}else{el=renderer.selectRootElement(rootSelectorOrNode);}if(elDef.attrs){for(var/** @type {?} */i=0;i<elDef.attrs.length;i++){var _elDef$attrs$i=_slicedToArray(elDef.attrs[i],3),ns=_elDef$attrs$i[0],name=_elDef$attrs$i[1],value=_elDef$attrs$i[2];renderer.setAttribute(el,name,value,ns);}}return el;}/**
 * @param {?} view
 * @param {?} compView
 * @param {?} def
 * @param {?} el
 * @return {?}
 */function listenToElementOutputs(view,compView,def,el){for(var/** @type {?} */i=0;i<def.outputs.length;i++){var/** @type {?} */output=def.outputs[i];var/** @type {?} */handleEventClosure=renderEventHandlerClosure(view,def.index,elementEventFullName(output.target,output.eventName));var/** @type {?} */listenTarget=output.target;var/** @type {?} */listenerView=view;if(output.target==='component'){listenTarget=null;listenerView=compView;}var/** @type {?} */disposable=listenerView.renderer.listen(listenTarget||el,output.eventName,handleEventClosure);view.disposables[def.outputIndex+i]=disposable;}}/**
 * @param {?} view
 * @param {?} index
 * @param {?} eventName
 * @return {?}
 */function renderEventHandlerClosure(view,index,eventName){return function(event){return dispatchEvent(view,index,eventName,event);};}/**
 * @param {?} view
 * @param {?} def
 * @param {?} v0
 * @param {?} v1
 * @param {?} v2
 * @param {?} v3
 * @param {?} v4
 * @param {?} v5
 * @param {?} v6
 * @param {?} v7
 * @param {?} v8
 * @param {?} v9
 * @return {?}
 */function checkAndUpdateElementInline(view,def,v0,v1,v2,v3,v4,v5,v6,v7,v8,v9){var/** @type {?} */bindLen=def.bindings.length;var/** @type {?} */changed=false;if(bindLen>0&&checkAndUpdateElementValue(view,def,0,v0))changed=true;if(bindLen>1&&checkAndUpdateElementValue(view,def,1,v1))changed=true;if(bindLen>2&&checkAndUpdateElementValue(view,def,2,v2))changed=true;if(bindLen>3&&checkAndUpdateElementValue(view,def,3,v3))changed=true;if(bindLen>4&&checkAndUpdateElementValue(view,def,4,v4))changed=true;if(bindLen>5&&checkAndUpdateElementValue(view,def,5,v5))changed=true;if(bindLen>6&&checkAndUpdateElementValue(view,def,6,v6))changed=true;if(bindLen>7&&checkAndUpdateElementValue(view,def,7,v7))changed=true;if(bindLen>8&&checkAndUpdateElementValue(view,def,8,v8))changed=true;if(bindLen>9&&checkAndUpdateElementValue(view,def,9,v9))changed=true;return changed;}/**
 * @param {?} view
 * @param {?} def
 * @param {?} values
 * @return {?}
 */function checkAndUpdateElementDynamic(view,def,values){var/** @type {?} */changed=false;for(var/** @type {?} */i=0;i<values.length;i++){if(checkAndUpdateElementValue(view,def,i,values[i]))changed=true;}return changed;}/**
 * @param {?} view
 * @param {?} def
 * @param {?} bindingIdx
 * @param {?} value
 * @return {?}
 */function checkAndUpdateElementValue(view,def,bindingIdx,value){if(!checkAndUpdateBinding(view,def,bindingIdx,value)){return false;}var/** @type {?} */binding=def.bindings[bindingIdx];var/** @type {?} */elData=asElementData(view,def.index);var/** @type {?} */renderNode=elData.renderElement;var/** @type {?} */name=binding.name;switch(binding.type){case BindingType.ElementAttribute:setElementAttribute(view,binding,renderNode,binding.ns,name,value);break;case BindingType.ElementClass:setElementClass(view,renderNode,name,value);break;case BindingType.ElementStyle:setElementStyle(view,binding,renderNode,name,value);break;case BindingType.ElementProperty:setElementProperty(view,binding,renderNode,name,value);break;case BindingType.ComponentHostProperty:setElementProperty(elData.componentView,binding,renderNode,name,value);break;}return true;}/**
 * @param {?} view
 * @param {?} binding
 * @param {?} renderNode
 * @param {?} ns
 * @param {?} name
 * @param {?} value
 * @return {?}
 */function setElementAttribute(view,binding,renderNode,ns,name,value){var/** @type {?} */securityContext=binding.securityContext;var/** @type {?} */renderValue=securityContext?view.root.sanitizer.sanitize(securityContext,value):value;renderValue=renderValue!=null?renderValue.toString():null;var/** @type {?} */renderer=view.renderer;if(value!=null){renderer.setAttribute(renderNode,name,renderValue,ns);}else{renderer.removeAttribute(renderNode,name,ns);}}/**
 * @param {?} view
 * @param {?} renderNode
 * @param {?} name
 * @param {?} value
 * @return {?}
 */function setElementClass(view,renderNode,name,value){var/** @type {?} */renderer=view.renderer;if(value){renderer.addClass(renderNode,name);}else{renderer.removeClass(renderNode,name);}}/**
 * @param {?} view
 * @param {?} binding
 * @param {?} renderNode
 * @param {?} name
 * @param {?} value
 * @return {?}
 */function setElementStyle(view,binding,renderNode,name,value){var/** @type {?} */renderValue=view.root.sanitizer.sanitize(SecurityContext.STYLE,value);if(renderValue!=null){renderValue=renderValue.toString();var/** @type {?} */unit=binding.suffix;if(unit!=null){renderValue=renderValue+unit;}}else{renderValue=null;}var/** @type {?} */renderer=view.renderer;if(renderValue!=null){renderer.setStyle(renderNode,name,renderValue,false,false);}else{renderer.removeStyle(renderNode,name,false);}}/**
 * @param {?} view
 * @param {?} binding
 * @param {?} renderNode
 * @param {?} name
 * @param {?} value
 * @return {?}
 */function setElementProperty(view,binding,renderNode,name,value){var/** @type {?} */securityContext=binding.securityContext;var/** @type {?} */renderValue=securityContext?view.root.sanitizer.sanitize(securityContext,value):value;view.renderer.setProperty(renderNode,name,renderValue);}/**
 * @param {?} ngContentIndex
 * @param {?} index
 * @return {?}
 */function ngContentDef(ngContentIndex,index){return{type:NodeType.NgContent,// will bet set by the view definition
index:undefined,reverseChildIndex:undefined,parent:undefined,renderParent:undefined,bindingIndex:undefined,outputIndex:undefined,// regular values
flags:0,childFlags:0,childMatchedQueries:0,matchedQueries:{},matchedQueryIds:0,references:{},ngContentIndex:ngContentIndex,childCount:0,bindings:[],outputs:[],element:undefined,provider:undefined,text:undefined,pureExpression:undefined,query:undefined,ngContent:{index:index}};}/**
 * @param {?} view
 * @param {?} renderHost
 * @param {?} def
 * @return {?}
 */function appendNgContent(view,renderHost,def){var/** @type {?} */parentEl=getParentRenderElement(view,renderHost,def);if(!parentEl){// Nothing to do if there is no parent element.
return;}var/** @type {?} */ngContentIndex=def.ngContent.index;visitProjectedRenderNodes(view,ngContentIndex,RenderNodeAction.AppendChild,parentEl,undefined,undefined);}/**
 * \@experimental Animation support is experimental.
 * @abstract
 */var AnimationPlayer=function(){function AnimationPlayer(){_classCallCheck(this,AnimationPlayer);}_createClass(AnimationPlayer,[{key:'onDone',/**
     * @abstract
     * @param {?} fn
     * @return {?}
     */value:function onDone(fn){}/**
     * @abstract
     * @param {?} fn
     * @return {?}
     */},{key:'onStart',value:function onStart(fn){}/**
     * @abstract
     * @param {?} fn
     * @return {?}
     */},{key:'onDestroy',value:function onDestroy(fn){}/**
     * @abstract
     * @return {?}
     */},{key:'init',value:function init(){}/**
     * @abstract
     * @return {?}
     */},{key:'hasStarted',value:function hasStarted(){}/**
     * @abstract
     * @return {?}
     */},{key:'play',value:function play(){}/**
     * @abstract
     * @return {?}
     */},{key:'pause',value:function pause(){}/**
     * @abstract
     * @return {?}
     */},{key:'restart',value:function restart(){}/**
     * @abstract
     * @return {?}
     */},{key:'finish',value:function finish(){}/**
     * @abstract
     * @return {?}
     */},{key:'destroy',value:function destroy(){}/**
     * @abstract
     * @return {?}
     */},{key:'reset',value:function reset(){}/**
     * @abstract
     * @param {?} p
     * @return {?}
     */},{key:'setPosition',value:function setPosition(p){}/**
     * @abstract
     * @return {?}
     */},{key:'getPosition',value:function getPosition(){}/**
     * @return {?}
     */},{key:'parentPlayer',get:function get(){throw new Error('NOT IMPLEMENTED: Base Class');}/**
     * @param {?} player
     * @return {?}
     */,set:function set(player){throw new Error('NOT IMPLEMENTED: Base Class');}}]);return AnimationPlayer;}();var NoOpAnimationPlayer=function(){function NoOpAnimationPlayer(){var _this27=this;_classCallCheck(this,NoOpAnimationPlayer);this._onDoneFns=[];this._onStartFns=[];this._onDestroyFns=[];this._started=false;this._destroyed=false;this._finished=false;this.parentPlayer=null;scheduleMicroTask(function(){return _this27._onFinish();});}/**
     * @return {?}
     */_createClass(NoOpAnimationPlayer,[{key:'_onFinish',value:function _onFinish(){if(!this._finished){this._finished=true;this._onDoneFns.forEach(function(fn){return fn();});this._onDoneFns=[];}}/**
     * @param {?} fn
     * @return {?}
     */},{key:'onStart',value:function onStart(fn){this._onStartFns.push(fn);}/**
     * @param {?} fn
     * @return {?}
     */},{key:'onDone',value:function onDone(fn){this._onDoneFns.push(fn);}/**
     * @param {?} fn
     * @return {?}
     */},{key:'onDestroy',value:function onDestroy(fn){this._onDestroyFns.push(fn);}/**
     * @return {?}
     */},{key:'hasStarted',value:function hasStarted(){return this._started;}/**
     * @return {?}
     */},{key:'init',value:function init(){}/**
     * @return {?}
     */},{key:'play',value:function play(){if(!this.hasStarted()){this._onStartFns.forEach(function(fn){return fn();});this._onStartFns=[];}this._started=true;}/**
     * @return {?}
     */},{key:'pause',value:function pause(){}/**
     * @return {?}
     */},{key:'restart',value:function restart(){}/**
     * @return {?}
     */},{key:'finish',value:function finish(){this._onFinish();}/**
     * @return {?}
     */},{key:'destroy',value:function destroy(){if(!this._destroyed){this._destroyed=true;this.finish();this._onDestroyFns.forEach(function(fn){return fn();});this._onDestroyFns=[];}}/**
     * @return {?}
     */},{key:'reset',value:function reset(){}/**
     * @param {?} p
     * @return {?}
     */},{key:'setPosition',value:function setPosition(p){}/**
     * @return {?}
     */},{key:'getPosition',value:function getPosition(){return 0;}}]);return NoOpAnimationPlayer;}();/**
 * @param {?} parentView
 * @param {?} elementData
 * @param {?} viewIndex
 * @param {?} view
 * @return {?}
 */function attachEmbeddedView(parentView,elementData,viewIndex,view){var/** @type {?} */embeddedViews=elementData.embeddedViews;if(viewIndex==null){viewIndex=embeddedViews.length;}view.viewContainerParent=parentView;addToArray$1(embeddedViews,viewIndex,view);var/** @type {?} */dvcElementData=declaredViewContainer(view);if(dvcElementData&&dvcElementData!==elementData){var/** @type {?} */projectedViews=dvcElementData.projectedViews;if(!projectedViews){projectedViews=dvcElementData.projectedViews=[];}projectedViews.push(view);}Services.dirtyParentQueries(view);var/** @type {?} */prevView=viewIndex>0?embeddedViews[viewIndex-1]:null;renderAttachEmbeddedView(elementData,prevView,view);}/**
 * @param {?} elementData
 * @param {?} viewIndex
 * @return {?}
 */function detachEmbeddedView(elementData,viewIndex){var/** @type {?} */embeddedViews=elementData.embeddedViews;if(viewIndex==null||viewIndex>=embeddedViews.length){viewIndex=embeddedViews.length-1;}if(viewIndex<0){return null;}var/** @type {?} */view=embeddedViews[viewIndex];view.viewContainerParent=undefined;removeFromArray(embeddedViews,viewIndex);var/** @type {?} */dvcElementData=declaredViewContainer(view);if(dvcElementData&&dvcElementData!==elementData){var/** @type {?} */projectedViews=dvcElementData.projectedViews;removeFromArray(projectedViews,projectedViews.indexOf(view));}Services.dirtyParentQueries(view);renderDetachView(view);return view;}/**
 * @param {?} elementData
 * @param {?} oldViewIndex
 * @param {?} newViewIndex
 * @return {?}
 */function moveEmbeddedView(elementData,oldViewIndex,newViewIndex){var/** @type {?} */embeddedViews=elementData.embeddedViews;var/** @type {?} */view=embeddedViews[oldViewIndex];removeFromArray(embeddedViews,oldViewIndex);if(newViewIndex==null){newViewIndex=embeddedViews.length;}addToArray$1(embeddedViews,newViewIndex,view);// Note: Don't need to change projectedViews as the order in there
// as always invalid...
Services.dirtyParentQueries(view);renderDetachView(view);var/** @type {?} */prevView=newViewIndex>0?embeddedViews[newViewIndex-1]:null;renderAttachEmbeddedView(elementData,prevView,view);return view;}/**
 * @param {?} elementData
 * @param {?} prevView
 * @param {?} view
 * @return {?}
 */function renderAttachEmbeddedView(elementData,prevView,view){var/** @type {?} */prevRenderNode=prevView?renderNode(prevView,prevView.def.lastRenderRootNode):elementData.renderElement;var/** @type {?} */parentNode=view.renderer.parentNode(prevRenderNode);var/** @type {?} */nextSibling=view.renderer.nextSibling(prevRenderNode);// Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!
// However, browsers automatically do `appendChild` when there is no `nextSibling`.
visitRootRenderNodes(view,RenderNodeAction.InsertBefore,parentNode,nextSibling,undefined);}/**
 * @param {?} view
 * @return {?}
 */function renderDetachView(view){visitRootRenderNodes(view,RenderNodeAction.RemoveChild,null,null,undefined);}/**
 * @param {?} arr
 * @param {?} index
 * @param {?} value
 * @return {?}
 */function addToArray$1(arr,index,value){// perf: array.push is faster than array.splice!
if(index>=arr.length){arr.push(value);}else{arr.splice(index,0,value);}}/**
 * @param {?} arr
 * @param {?} index
 * @return {?}
 */function removeFromArray(arr,index){// perf: array.pop is faster than array.splice!
if(index>=arr.length-1){arr.pop();}else{arr.splice(index,1);}}var/** @type {?} */EMPTY_CONTEXT=new Object();/**
 * @param {?} selector
 * @param {?} componentType
 * @param {?} viewDefFactory
 * @return {?}
 */function createComponentFactory(selector,componentType,viewDefFactory){return new ComponentFactory_(selector,componentType,viewDefFactory);}var ComponentFactory_=function(_ComponentFactory){_inherits(ComponentFactory_,_ComponentFactory);/**
     * @param {?} selector
     * @param {?} componentType
     * @param {?} viewDefFactory
     */function ComponentFactory_(selector,componentType,viewDefFactory){_classCallCheck(this,ComponentFactory_);return _possibleConstructorReturn(this,(ComponentFactory_.__proto__||Object.getPrototypeOf(ComponentFactory_)).call(this,selector,viewDefFactory,componentType));}/**
     * Creates a new component.
     * @param {?} injector
     * @param {?=} projectableNodes
     * @param {?=} rootSelectorOrNode
     * @return {?}
     */_createClass(ComponentFactory_,[{key:'create',value:function create(injector){var projectableNodes=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var rootSelectorOrNode=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var/** @type {?} */viewDef=resolveViewDefinition(this._viewClass);var/** @type {?} */componentNodeIndex=viewDef.nodes[0].element.componentProvider.index;var/** @type {?} */view=Services.createRootView(injector,projectableNodes||[],rootSelectorOrNode,viewDef,EMPTY_CONTEXT);var/** @type {?} */component=asProviderData(view,componentNodeIndex).instance;view.renderer.setAttribute(asElementData(view,0).renderElement,'ng-version',VERSION.full);return new ComponentRef_$1(view,new ViewRef_$1(view),component);}}]);return ComponentFactory_;}(ComponentFactory);var ComponentRef_$1=function(_ComponentRef2){_inherits(ComponentRef_$1,_ComponentRef2);/**
     * @param {?} _view
     * @param {?} _viewRef
     * @param {?} _component
     */function ComponentRef_$1(_view,_viewRef,_component){_classCallCheck(this,ComponentRef_$1);var _this29=_possibleConstructorReturn(this,(ComponentRef_$1.__proto__||Object.getPrototypeOf(ComponentRef_$1)).call(this));_this29._view=_view;_this29._viewRef=_viewRef;_this29._component=_component;_this29._elDef=_this29._view.def.nodes[0];return _this29;}/**
     * @return {?}
     */_createClass(ComponentRef_$1,[{key:'destroy',/**
     * @return {?}
     */value:function destroy(){this._viewRef.destroy();}/**
     * @param {?} callback
     * @return {?}
     */},{key:'onDestroy',value:function onDestroy(callback){this._viewRef.onDestroy(callback);}},{key:'location',get:function get(){return new ElementRef(asElementData(this._view,this._elDef.index).renderElement);}/**
     * @return {?}
     */},{key:'injector',get:function get(){return new Injector_(this._view,this._elDef);}/**
     * @return {?}
     */},{key:'instance',get:function get(){return this._component;}},{key:'hostView',/**
     * @return {?}
     */get:function get(){return this._viewRef;}},{key:'changeDetectorRef',/**
     * @return {?}
     */get:function get(){return this._viewRef;}},{key:'componentType',/**
     * @return {?}
     */get:function get(){return this._component.constructor;}}]);return ComponentRef_$1;}(ComponentRef);/**
 * @param {?} view
 * @param {?} elDef
 * @return {?}
 */function createViewContainerRef(view,elDef){return new ViewContainerRef_$1(view,elDef);}var ViewContainerRef_$1=function(){/**
     * @param {?} _view
     * @param {?} _elDef
     */function ViewContainerRef_$1(_view,_elDef){_classCallCheck(this,ViewContainerRef_$1);this._view=_view;this._elDef=_elDef;this._data=asElementData(_view,_elDef.index);}/**
     * @return {?}
     */_createClass(ViewContainerRef_$1,[{key:'clear',/**
     * @return {?}
     */value:function clear(){var/** @type {?} */len=this._data.embeddedViews.length;for(var/** @type {?} */i=len-1;i>=0;i--){var/** @type {?} */view=detachEmbeddedView(this._data,i);Services.destroyView(view);}}/**
     * @param {?} index
     * @return {?}
     */},{key:'get',value:function get(index){var/** @type {?} */view=this._data.embeddedViews[index];if(view){var/** @type {?} */ref=new ViewRef_$1(view);ref.attachToViewContainerRef(this);return ref;}return null;}/**
     * @return {?}
     */},{key:'createEmbeddedView',/**
     * @param {?} templateRef
     * @param {?=} context
     * @param {?=} index
     * @return {?}
     */value:function createEmbeddedView(templateRef,context,index){var/** @type {?} */viewRef=templateRef.createEmbeddedView(context||{});this.insert(viewRef,index);return viewRef;}/**
     * @param {?} componentFactory
     * @param {?=} index
     * @param {?=} injector
     * @param {?=} projectableNodes
     * @return {?}
     */},{key:'createComponent',value:function createComponent(componentFactory,index,injector,projectableNodes){var/** @type {?} */contextInjector=injector||this.parentInjector;var/** @type {?} */componentRef=componentFactory.create(contextInjector,projectableNodes);this.insert(componentRef.hostView,index);return componentRef;}/**
     * @param {?} viewRef
     * @param {?=} index
     * @return {?}
     */},{key:'insert',value:function insert(viewRef,index){var/** @type {?} */viewRef_=viewRef;var/** @type {?} */viewData=viewRef_._view;attachEmbeddedView(this._view,this._data,index,viewData);viewRef_.attachToViewContainerRef(this);return viewRef;}/**
     * @param {?} viewRef
     * @param {?} currentIndex
     * @return {?}
     */},{key:'move',value:function move(viewRef,currentIndex){var/** @type {?} */previousIndex=this._data.embeddedViews.indexOf(viewRef._view);moveEmbeddedView(this._data,previousIndex,currentIndex);return viewRef;}/**
     * @param {?} viewRef
     * @return {?}
     */},{key:'indexOf',value:function indexOf(viewRef){return this._data.embeddedViews.indexOf(viewRef._view);}/**
     * @param {?=} index
     * @return {?}
     */},{key:'remove',value:function remove(index){var/** @type {?} */viewData=detachEmbeddedView(this._data,index);if(viewData){Services.destroyView(viewData);}}/**
     * @param {?=} index
     * @return {?}
     */},{key:'detach',value:function detach(index){var/** @type {?} */view=detachEmbeddedView(this._data,index);return view?new ViewRef_$1(view):null;}},{key:'element',get:function get(){return new ElementRef(this._data.renderElement);}/**
     * @return {?}
     */},{key:'injector',get:function get(){return new Injector_(this._view,this._elDef);}/**
     * @return {?}
     */},{key:'parentInjector',get:function get(){var/** @type {?} */view=this._view;var/** @type {?} */elDef=this._elDef.parent;while(!elDef&&view){elDef=viewParentEl(view);view=view.parent;}return view?new Injector_(view,elDef):this._view.root.injector;}},{key:'length',get:function get(){return this._data.embeddedViews.length;}}]);return ViewContainerRef_$1;}();/**
 * @param {?} view
 * @return {?}
 */function createChangeDetectorRef(view){return new ViewRef_$1(view);}var ViewRef_$1=function(){/**
     * @param {?} _view
     */function ViewRef_$1(_view){_classCallCheck(this,ViewRef_$1);this._view=_view;this._viewContainerRef=null;this._appRef=null;}/**
     * @return {?}
     */_createClass(ViewRef_$1,[{key:'markForCheck',/**
     * @return {?}
     */value:function markForCheck(){markParentViewsForCheck(this._view);}/**
     * @return {?}
     */},{key:'detach',value:function detach(){this._view.state&=~ViewState.ChecksEnabled;}/**
     * @return {?}
     */},{key:'detectChanges',value:function detectChanges(){Services.checkAndUpdateView(this._view);}/**
     * @return {?}
     */},{key:'checkNoChanges',value:function checkNoChanges(){Services.checkNoChangesView(this._view);}/**
     * @return {?}
     */},{key:'reattach',value:function reattach(){this._view.state|=ViewState.ChecksEnabled;}/**
     * @param {?} callback
     * @return {?}
     */},{key:'onDestroy',value:function onDestroy(callback){if(!this._view.disposables){this._view.disposables=[];}this._view.disposables.push(/** @type {?} */callback);}/**
     * @return {?}
     */},{key:'destroy',value:function destroy(){if(this._appRef){this._appRef.detachView(this);}else if(this._viewContainerRef){this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));}Services.destroyView(this._view);}/**
     * @return {?}
     */},{key:'detachFromAppRef',value:function detachFromAppRef(){this._appRef=null;renderDetachView(this._view);Services.dirtyParentQueries(this._view);}/**
     * @param {?} appRef
     * @return {?}
     */},{key:'attachToAppRef',value:function attachToAppRef(appRef){if(this._viewContainerRef){throw new Error('This view is already attached to a ViewContainer!');}this._appRef=appRef;}/**
     * @param {?} vcRef
     * @return {?}
     */},{key:'attachToViewContainerRef',value:function attachToViewContainerRef(vcRef){if(this._appRef){throw new Error('This view is already attached directly to the ApplicationRef!');}this._viewContainerRef=vcRef;}},{key:'rootNodes',get:function get(){return rootRenderNodes(this._view);}/**
     * @return {?}
     */},{key:'context',get:function get(){return this._view.context;}/**
     * @return {?}
     */},{key:'destroyed',get:function get(){return(this._view.state&ViewState.Destroyed)!==0;}}]);return ViewRef_$1;}();/**
 * @param {?} view
 * @param {?} def
 * @return {?}
 */function createTemplateRef(view,def){return new TemplateRef_$1(view,def);}var TemplateRef_$1=function(_TemplateRef2){_inherits(TemplateRef_$1,_TemplateRef2);/**
     * @param {?} _parentView
     * @param {?} _def
     */function TemplateRef_$1(_parentView,_def){_classCallCheck(this,TemplateRef_$1);var _this30=_possibleConstructorReturn(this,(TemplateRef_$1.__proto__||Object.getPrototypeOf(TemplateRef_$1)).call(this));_this30._parentView=_parentView;_this30._def=_def;return _this30;}/**
     * @param {?} context
     * @return {?}
     */_createClass(TemplateRef_$1,[{key:'createEmbeddedView',value:function createEmbeddedView(context){return new ViewRef_$1(Services.createEmbeddedView(this._parentView,this._def,context));}/**
     * @return {?}
     */},{key:'elementRef',get:function get(){return new ElementRef(asElementData(this._parentView,this._def.index).renderElement);}}]);return TemplateRef_$1;}(TemplateRef);/**
 * @param {?} view
 * @param {?} elDef
 * @return {?}
 */function createInjector(view,elDef){return new Injector_(view,elDef);}var Injector_=function(){/**
     * @param {?} view
     * @param {?} elDef
     */function Injector_(view,elDef){_classCallCheck(this,Injector_);this.view=view;this.elDef=elDef;}/**
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */_createClass(Injector_,[{key:'get',value:function get(token){var notFoundValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:Injector.THROW_IF_NOT_FOUND;var/** @type {?} */allowPrivateServices=(this.elDef.flags&NodeFlags.HasComponent)!==0;return Services.resolveDep(this.view,this.elDef,allowPrivateServices,{flags:DepFlags.None,token:token,tokenKey:tokenKey(token)},notFoundValue);}}]);return Injector_;}();/**
 * @param {?} view
 * @param {?} index
 * @return {?}
 */function nodeValue(view,index){var/** @type {?} */def=view.def.nodes[index];switch(def.type){case NodeType.Element:if(def.element.template){return createTemplateRef(view,def);}else{return asElementData(view,def.index).renderElement;}case NodeType.Text:return asTextData(view,def.index).renderText;case NodeType.Directive:case NodeType.Pipe:case NodeType.Provider:return asProviderData(view,def.index).instance;}return undefined;}/**
 * @param {?} view
 * @return {?}
 */function createRendererV1(view){return new RendererAdapter(view.renderer);}var RendererAdapter=function(){/**
     * @param {?} delegate
     */function RendererAdapter(delegate){_classCallCheck(this,RendererAdapter);this.delegate=delegate;}/**
     * @param {?} selectorOrNode
     * @return {?}
     */_createClass(RendererAdapter,[{key:'selectRootElement',value:function selectRootElement(selectorOrNode){return this.delegate.selectRootElement(selectorOrNode);}/**
     * @param {?} parent
     * @param {?} namespaceAndName
     * @return {?}
     */},{key:'createElement',value:function createElement(parent,namespaceAndName){var _splitNamespace7=splitNamespace(namespaceAndName),_splitNamespace8=_slicedToArray(_splitNamespace7,2),ns=_splitNamespace8[0],name=_splitNamespace8[1];var/** @type {?} */el=this.delegate.createElement(name,ns);if(parent){this.delegate.appendChild(parent,el);}return el;}/**
     * @param {?} hostElement
     * @return {?}
     */},{key:'createViewRoot',value:function createViewRoot(hostElement){return hostElement;}/**
     * @param {?} parentElement
     * @return {?}
     */},{key:'createTemplateAnchor',value:function createTemplateAnchor(parentElement){var/** @type {?} */comment=this.delegate.createComment('');if(parentElement){this.delegate.appendChild(parentElement,comment);}return comment;}/**
     * @param {?} parentElement
     * @param {?} value
     * @return {?}
     */},{key:'createText',value:function createText(parentElement,value){var/** @type {?} */node=this.delegate.createText(value);if(parentElement){this.delegate.appendChild(parentElement,node);}return node;}/**
     * @param {?} parentElement
     * @param {?} nodes
     * @return {?}
     */},{key:'projectNodes',value:function projectNodes(parentElement,nodes){for(var/** @type {?} */i=0;i<nodes.length;i++){this.delegate.appendChild(parentElement,nodes[i]);}}/**
     * @param {?} node
     * @param {?} viewRootNodes
     * @return {?}
     */},{key:'attachViewAfter',value:function attachViewAfter(node,viewRootNodes){var/** @type {?} */parentElement=this.delegate.parentNode(node);var/** @type {?} */nextSibling=this.delegate.nextSibling(node);for(var/** @type {?} */i=0;i<viewRootNodes.length;i++){this.delegate.insertBefore(parentElement,viewRootNodes[i],nextSibling);}}/**
     * @param {?} viewRootNodes
     * @return {?}
     */},{key:'detachView',value:function detachView(viewRootNodes){for(var/** @type {?} */i=0;i<viewRootNodes.length;i++){var/** @type {?} */node=viewRootNodes[i];var/** @type {?} */parentElement=this.delegate.parentNode(node);this.delegate.removeChild(parentElement,node);}}/**
     * @param {?} hostElement
     * @param {?} viewAllNodes
     * @return {?}
     */},{key:'destroyView',value:function destroyView(hostElement,viewAllNodes){for(var/** @type {?} */i=0;i<viewAllNodes.length;i++){this.delegate.destroyNode(viewAllNodes[i]);}}/**
     * @param {?} renderElement
     * @param {?} name
     * @param {?} callback
     * @return {?}
     */},{key:'listen',value:function listen(renderElement,name,callback){return this.delegate.listen(renderElement,name,/** @type {?} */callback);}/**
     * @param {?} target
     * @param {?} name
     * @param {?} callback
     * @return {?}
     */},{key:'listenGlobal',value:function listenGlobal(target,name,callback){return this.delegate.listen(target,name,/** @type {?} */callback);}/**
     * @param {?} renderElement
     * @param {?} propertyName
     * @param {?} propertyValue
     * @return {?}
     */},{key:'setElementProperty',value:function setElementProperty(renderElement,propertyName,propertyValue){this.delegate.setProperty(renderElement,propertyName,propertyValue);}/**
     * @param {?} renderElement
     * @param {?} namespaceAndName
     * @param {?} attributeValue
     * @return {?}
     */},{key:'setElementAttribute',value:function setElementAttribute(renderElement,namespaceAndName,attributeValue){var _splitNamespace9=splitNamespace(namespaceAndName),_splitNamespace10=_slicedToArray(_splitNamespace9,2),ns=_splitNamespace10[0],name=_splitNamespace10[1];if(attributeValue!=null){this.delegate.setAttribute(renderElement,name,attributeValue,ns);}else{this.delegate.removeAttribute(renderElement,name,ns);}}/**
     * @param {?} renderElement
     * @param {?} propertyName
     * @param {?} propertyValue
     * @return {?}
     */},{key:'setBindingDebugInfo',value:function setBindingDebugInfo(renderElement,propertyName,propertyValue){}/**
     * @param {?} renderElement
     * @param {?} className
     * @param {?} isAdd
     * @return {?}
     */},{key:'setElementClass',value:function setElementClass(renderElement,className,isAdd){if(isAdd){this.delegate.addClass(renderElement,className);}else{this.delegate.removeClass(renderElement,className);}}/**
     * @param {?} renderElement
     * @param {?} styleName
     * @param {?} styleValue
     * @return {?}
     */},{key:'setElementStyle',value:function setElementStyle(renderElement,styleName,styleValue){if(styleValue!=null){this.delegate.setStyle(renderElement,styleName,styleValue,false,false);}else{this.delegate.removeStyle(renderElement,styleName,false);}}/**
     * @param {?} renderElement
     * @param {?} methodName
     * @param {?} args
     * @return {?}
     */},{key:'invokeElementMethod',value:function invokeElementMethod(renderElement,methodName,args){renderElement[methodName].apply(renderElement,args);}/**
     * @param {?} renderNode
     * @param {?} text
     * @return {?}
     */},{key:'setText',value:function setText(renderNode,text){this.delegate.setValue(renderNode,text);}/**
     * @return {?}
     */},{key:'animate',value:function animate(){return new NoOpAnimationPlayer();}}]);return RendererAdapter;}();var/** @type {?} */RendererV1TokenKey=tokenKey(RendererV1);var/** @type {?} */RendererV2TokenKey=tokenKey(RendererV2);var/** @type {?} */ElementRefTokenKey=tokenKey(ElementRef);var/** @type {?} */ViewContainerRefTokenKey=tokenKey(ViewContainerRef);var/** @type {?} */TemplateRefTokenKey=tokenKey(TemplateRef);var/** @type {?} */ChangeDetectorRefTokenKey=tokenKey(ChangeDetectorRef);var/** @type {?} */InjectorRefTokenKey=tokenKey(Injector);var/** @type {?} */NOT_CREATED=new Object();/**
 * @param {?} flags
 * @param {?} matchedQueries
 * @param {?} childCount
 * @param {?} ctor
 * @param {?} deps
 * @param {?=} props
 * @param {?=} outputs
 * @return {?}
 */function directiveDef(flags,matchedQueries,childCount,ctor,deps,props,outputs){var/** @type {?} */bindings=[];if(props){for(var/** @type {?} */prop in props){var _props$prop=_slicedToArray(props[prop],2),bindingIndex=_props$prop[0],nonMinifiedName=_props$prop[1];bindings[bindingIndex]={type:BindingType.DirectiveProperty,name:prop,nonMinifiedName:nonMinifiedName,ns:undefined,securityContext:undefined,suffix:undefined};}}var/** @type {?} */outputDefs=[];if(outputs){for(var/** @type {?} */propName in outputs){outputDefs.push({type:OutputType.DirectiveOutput,propName:propName,target:null,eventName:outputs[propName]});}}return _def(NodeType.Directive,flags,matchedQueries,childCount,ProviderType.Class,ctor,ctor,deps,bindings,outputDefs);}/**
 * @param {?} flags
 * @param {?} ctor
 * @param {?} deps
 * @return {?}
 */function pipeDef(flags,ctor,deps){return _def(NodeType.Pipe,flags,null,0,ProviderType.Class,ctor,ctor,deps);}/**
 * @param {?} flags
 * @param {?} matchedQueries
 * @param {?} type
 * @param {?} token
 * @param {?} value
 * @param {?} deps
 * @return {?}
 */function providerDef(flags,matchedQueries,type,token,value,deps){return _def(NodeType.Provider,flags,matchedQueries,0,type,token,value,deps);}/**
 * @param {?} type
 * @param {?} flags
 * @param {?} matchedQueriesDsl
 * @param {?} childCount
 * @param {?} providerType
 * @param {?} token
 * @param {?} value
 * @param {?} deps
 * @param {?=} bindings
 * @param {?=} outputs
 * @return {?}
 */function _def(type,flags,matchedQueriesDsl,childCount,providerType,token,value,deps,bindings,outputs){var _splitMatchedQueriesD3=splitMatchedQueriesDsl(matchedQueriesDsl),matchedQueries=_splitMatchedQueriesD3.matchedQueries,references=_splitMatchedQueriesD3.references,matchedQueryIds=_splitMatchedQueriesD3.matchedQueryIds;if(!outputs){outputs=[];}if(!bindings){bindings=[];}var/** @type {?} */depDefs=deps.map(function(value){var/** @type {?} */token=void 0;var/** @type {?} */flags=void 0;if(Array.isArray(value)){var _value=_slicedToArray(value,2);flags=_value[0];token=_value[1];}else{flags=DepFlags.None;token=value;}return{flags:flags,token:token,tokenKey:tokenKey(token)};});return{type:type,// will bet set by the view definition
index:undefined,reverseChildIndex:undefined,parent:undefined,renderParent:undefined,bindingIndex:undefined,outputIndex:undefined,// regular values
flags:flags,childFlags:0,childMatchedQueries:0,matchedQueries:matchedQueries,matchedQueryIds:matchedQueryIds,references:references,ngContentIndex:undefined,childCount:childCount,bindings:bindings,outputs:outputs,element:undefined,provider:{type:providerType,token:token,tokenKey:tokenKey(token),value:value,deps:depDefs},text:undefined,pureExpression:undefined,query:undefined,ngContent:undefined};}/**
 * @param {?} view
 * @param {?} def
 * @return {?}
 */function createProviderInstance(view,def){return def.flags&NodeFlags.LazyProvider?NOT_CREATED:_createProviderInstance(view,def);}/**
 * @param {?} view
 * @param {?} def
 * @return {?}
 */function createPipeInstance(view,def){// deps are looked up from component.
var/** @type {?} */compView=view;while(compView.parent&&!isComponentView(compView)){compView=compView.parent;}// pipes can see the private services of the component
var/** @type {?} */allowPrivateServices=true;// pipes are always eager and classes!
return createClass(compView.parent,viewParentEl(compView),allowPrivateServices,def.provider.value,def.provider.deps);}/**
 * @param {?} view
 * @param {?} def
 * @return {?}
 */function createDirectiveInstance(view,def){// components can see other private services, other directives can't.
var/** @type {?} */allowPrivateServices=(def.flags&NodeFlags.IsComponent)>0;var/** @type {?} */providerDef=def.provider;// directives are always eager and classes!
var/** @type {?} */instance=createClass(view,def.parent,allowPrivateServices,def.provider.value,def.provider.deps);if(def.outputs.length){for(var/** @type {?} */i=0;i<def.outputs.length;i++){var/** @type {?} */output=def.outputs[i];var/** @type {?} */subscription=instance[output.propName].subscribe(eventHandlerClosure(view,def.parent.index,output.eventName));view.disposables[def.outputIndex+i]=subscription.unsubscribe.bind(subscription);}}return instance;}/**
 * @param {?} view
 * @param {?} index
 * @param {?} eventName
 * @return {?}
 */function eventHandlerClosure(view,index,eventName){return function(event){return dispatchEvent(view,index,eventName,event);};}/**
 * @param {?} view
 * @param {?} def
 * @param {?} v0
 * @param {?} v1
 * @param {?} v2
 * @param {?} v3
 * @param {?} v4
 * @param {?} v5
 * @param {?} v6
 * @param {?} v7
 * @param {?} v8
 * @param {?} v9
 * @return {?}
 */function checkAndUpdateDirectiveInline(view,def,v0,v1,v2,v3,v4,v5,v6,v7,v8,v9){var/** @type {?} */providerData=asProviderData(view,def.index);var/** @type {?} */directive=providerData.instance;var/** @type {?} */changed=false;var/** @type {?} */changes=void 0;var/** @type {?} */bindLen=def.bindings.length;if(bindLen>0&&checkBinding$1(view,def,0,v0)){changed=true;changes=updateProp(view,providerData,def,0,v0,changes);};if(bindLen>1&&checkBinding$1(view,def,1,v1)){changed=true;changes=updateProp(view,providerData,def,1,v1,changes);};if(bindLen>2&&checkBinding$1(view,def,2,v2)){changed=true;changes=updateProp(view,providerData,def,2,v2,changes);};if(bindLen>3&&checkBinding$1(view,def,3,v3)){changed=true;changes=updateProp(view,providerData,def,3,v3,changes);};if(bindLen>4&&checkBinding$1(view,def,4,v4)){changed=true;changes=updateProp(view,providerData,def,4,v4,changes);};if(bindLen>5&&checkBinding$1(view,def,5,v5)){changed=true;changes=updateProp(view,providerData,def,5,v5,changes);};if(bindLen>6&&checkBinding$1(view,def,6,v6)){changed=true;changes=updateProp(view,providerData,def,6,v6,changes);};if(bindLen>7&&checkBinding$1(view,def,7,v7)){changed=true;changes=updateProp(view,providerData,def,7,v7,changes);};if(bindLen>8&&checkBinding$1(view,def,8,v8)){changed=true;changes=updateProp(view,providerData,def,8,v8,changes);};if(bindLen>9&&checkBinding$1(view,def,9,v9)){changed=true;changes=updateProp(view,providerData,def,9,v9,changes);};if(changes){directive.ngOnChanges(changes);}if(view.state&ViewState.FirstCheck&&def.flags&NodeFlags.OnInit){directive.ngOnInit();}if(def.flags&NodeFlags.DoCheck){directive.ngDoCheck();}return changed;}/**
 * @param {?} view
 * @param {?} def
 * @param {?} values
 * @return {?}
 */function checkAndUpdateDirectiveDynamic(view,def,values){var/** @type {?} */providerData=asProviderData(view,def.index);var/** @type {?} */directive=providerData.instance;var/** @type {?} */changed=false;var/** @type {?} */changes=void 0;for(var/** @type {?} */i=0;i<values.length;i++){if(checkBinding$1(view,def,i,values[i])){changed=true;changes=updateProp(view,providerData,def,i,values[i],changes);}}if(changes){directive.ngOnChanges(changes);}if(view.state&ViewState.FirstCheck&&def.flags&NodeFlags.OnInit){directive.ngOnInit();}if(def.flags&NodeFlags.DoCheck){directive.ngDoCheck();}return changed;}/**
 * @param {?} view
 * @param {?} def
 * @return {?}
 */function _createProviderInstance(view,def){// private services can see other private services
var/** @type {?} */allowPrivateServices=(def.flags&NodeFlags.PrivateProvider)>0;var/** @type {?} */providerDef=def.provider;var/** @type {?} */injectable=void 0;switch(providerDef.type){case ProviderType.Class:injectable=createClass(view,def.parent,allowPrivateServices,providerDef.value,providerDef.deps);break;case ProviderType.Factory:injectable=callFactory(view,def.parent,allowPrivateServices,providerDef.value,providerDef.deps);break;case ProviderType.UseExisting:injectable=resolveDep(view,def.parent,allowPrivateServices,providerDef.deps[0]);break;case ProviderType.Value:injectable=providerDef.value;break;}return injectable;}/**
 * @param {?} view
 * @param {?} elDef
 * @param {?} allowPrivateServices
 * @param {?} ctor
 * @param {?} deps
 * @return {?}
 */function createClass(view,elDef,allowPrivateServices,ctor,deps){var/** @type {?} */len=deps.length;var/** @type {?} */injectable=void 0;switch(len){case 0:injectable=new ctor();break;case 1:injectable=new ctor(resolveDep(view,elDef,allowPrivateServices,deps[0]));break;case 2:injectable=new ctor(resolveDep(view,elDef,allowPrivateServices,deps[0]),resolveDep(view,elDef,allowPrivateServices,deps[1]));break;case 3:injectable=new ctor(resolveDep(view,elDef,allowPrivateServices,deps[0]),resolveDep(view,elDef,allowPrivateServices,deps[1]),resolveDep(view,elDef,allowPrivateServices,deps[2]));break;default:var/** @type {?} */depValues=new Array(len);for(var/** @type {?} */i=0;i<len;i++){depValues[i]=resolveDep(view,elDef,allowPrivateServices,deps[i]);}injectable=new(Function.prototype.bind.apply(ctor,[null].concat(depValues)))();}return injectable;}/**
 * @param {?} view
 * @param {?} elDef
 * @param {?} allowPrivateServices
 * @param {?} factory
 * @param {?} deps
 * @return {?}
 */function callFactory(view,elDef,allowPrivateServices,factory,deps){var/** @type {?} */len=deps.length;var/** @type {?} */injectable=void 0;switch(len){case 0:injectable=factory();break;case 1:injectable=factory(resolveDep(view,elDef,allowPrivateServices,deps[0]));break;case 2:injectable=factory(resolveDep(view,elDef,allowPrivateServices,deps[0]),resolveDep(view,elDef,allowPrivateServices,deps[1]));break;case 3:injectable=factory(resolveDep(view,elDef,allowPrivateServices,deps[0]),resolveDep(view,elDef,allowPrivateServices,deps[1]),resolveDep(view,elDef,allowPrivateServices,deps[2]));break;default:var/** @type {?} */depValues=Array(len);for(var/** @type {?} */i=0;i<len;i++){depValues[i]=resolveDep(view,elDef,allowPrivateServices,deps[i]);}injectable=factory.apply(undefined,_toConsumableArray(depValues));}return injectable;}/**
 * @param {?} view
 * @param {?} elDef
 * @param {?} allowPrivateServices
 * @param {?} depDef
 * @param {?=} notFoundValue
 * @return {?}
 */function resolveDep(view,elDef,allowPrivateServices,depDef){var notFoundValue=arguments.length>4&&arguments[4]!==undefined?arguments[4]:Injector.THROW_IF_NOT_FOUND;if(depDef.flags&DepFlags.Value){return depDef.token;}var/** @type {?} */startView=view;if(depDef.flags&DepFlags.Optional){notFoundValue=null;}var/** @type {?} */tokenKey=depDef.tokenKey;if(depDef.flags&DepFlags.SkipSelf){allowPrivateServices=false;elDef=elDef.parent;}while(view){if(elDef){switch(tokenKey){case RendererV1TokenKey:{var/** @type {?} */compView=findCompView(view,elDef,allowPrivateServices);return createRendererV1(compView);}case RendererV2TokenKey:{var/** @type {?} */_compView=findCompView(view,elDef,allowPrivateServices);return _compView.renderer;}case ElementRefTokenKey:return new ElementRef(asElementData(view,elDef.index).renderElement);case ViewContainerRefTokenKey:return createViewContainerRef(view,elDef);case TemplateRefTokenKey:{if(elDef.element.template){return createTemplateRef(view,elDef);}break;}case ChangeDetectorRefTokenKey:{var/** @type {?} */cdView=findCompView(view,elDef,allowPrivateServices);return createChangeDetectorRef(cdView);}case InjectorRefTokenKey:return createInjector(view,elDef);default:var/** @type {?} */_providerDef=(allowPrivateServices?elDef.element.allProviders:elDef.element.publicProviders)[tokenKey];if(_providerDef){var/** @type {?} */providerData=asProviderData(view,_providerDef.index);if(providerData.instance===NOT_CREATED){providerData.instance=_createProviderInstance(view,_providerDef);}return providerData.instance;}}}allowPrivateServices=isComponentView(view);elDef=viewParentEl(view);view=view.parent;}return startView.root.injector.get(depDef.token,notFoundValue);}/**
 * @param {?} view
 * @param {?} elDef
 * @param {?} allowPrivateServices
 * @return {?}
 */function findCompView(view,elDef,allowPrivateServices){var/** @type {?} */compView=void 0;if(allowPrivateServices){compView=asElementData(view,elDef.index).componentView;}else{compView=view;while(compView.parent&&!isComponentView(compView)){compView=compView.parent;}}return compView;}/**
 * @param {?} view
 * @param {?} providerData
 * @param {?} def
 * @param {?} bindingIdx
 * @param {?} value
 * @param {?} changes
 * @return {?}
 */function updateProp(view,providerData,def,bindingIdx,value,changes){if(def.flags&NodeFlags.IsComponent){var/** @type {?} */compView=asElementData(view,def.parent.index).componentView;if(compView.def.flags&ViewFlags.OnPush){compView.state|=ViewState.ChecksEnabled;}}var/** @type {?} */binding=def.bindings[bindingIdx];var/** @type {?} */propName=binding.name;// Note: This is still safe with Closure Compiler as
// the user passed in the property name as an object has to `providerDef`,
// so Closure Compiler will have renamed the property correctly already.
providerData.instance[propName]=value;if(def.flags&NodeFlags.OnChanges){changes=changes||{};var/** @type {?} */oldValue=view.oldValues[def.bindingIndex+bindingIdx];var/** @type {?} */_binding=def.bindings[bindingIdx];changes[_binding.nonMinifiedName]=new SimpleChange(oldValue,value,(view.state&ViewState.FirstCheck)!==0);}view.oldValues[def.bindingIndex+bindingIdx]=value;return changes;}/**
 * @param {?} view
 * @param {?} lifecycles
 * @return {?}
 */function callLifecycleHooksChildrenFirst(view,lifecycles){if(!(view.def.nodeFlags&lifecycles)){return;}var/** @type {?} */len=view.def.nodes.length;for(var/** @type {?} */i=0;i<len;i++){// We use the reverse child oreder to call providers of children first.
var/** @type {?} */nodeDef=view.def.reverseChildNodes[i];var/** @type {?} */nodeIndex=nodeDef.index;if(nodeDef.flags&lifecycles){// a leaf
Services.setCurrentNode(view,nodeIndex);callProviderLifecycles(asProviderData(view,nodeIndex).instance,nodeDef.flags&lifecycles);}else if((nodeDef.childFlags&lifecycles)===0){// a parent with leafs
// no child matches one of the lifecycles,
// then skip the children
i+=nodeDef.childCount;}}}/**
 * @param {?} provider
 * @param {?} lifecycles
 * @return {?}
 */function callProviderLifecycles(provider,lifecycles){if(lifecycles&NodeFlags.AfterContentInit){provider.ngAfterContentInit();}if(lifecycles&NodeFlags.AfterContentChecked){provider.ngAfterContentChecked();}if(lifecycles&NodeFlags.AfterViewInit){provider.ngAfterViewInit();}if(lifecycles&NodeFlags.AfterViewChecked){provider.ngAfterViewChecked();}if(lifecycles&NodeFlags.OnDestroy){provider.ngOnDestroy();}}/**
 * @param {?} argCount
 * @return {?}
 */function purePipeDef(argCount){// argCount + 1 to include the pipe as first arg
return _pureExpressionDef(PureExpressionType.Pipe,new Array(argCount+1));}/**
 * @param {?} argCount
 * @return {?}
 */function pureArrayDef(argCount){return _pureExpressionDef(PureExpressionType.Array,new Array(argCount));}/**
 * @param {?} propertyNames
 * @return {?}
 */function pureObjectDef(propertyNames){return _pureExpressionDef(PureExpressionType.Object,propertyNames);}/**
 * @param {?} type
 * @param {?} propertyNames
 * @return {?}
 */function _pureExpressionDef(type,propertyNames){var/** @type {?} */bindings=new Array(propertyNames.length);for(var/** @type {?} */i=0;i<propertyNames.length;i++){var/** @type {?} */prop=propertyNames[i];bindings[i]={type:BindingType.PureExpressionProperty,name:prop,ns:undefined,nonMinifiedName:prop,securityContext:undefined,suffix:undefined};}return{type:NodeType.PureExpression,// will bet set by the view definition
index:undefined,reverseChildIndex:undefined,parent:undefined,renderParent:undefined,bindingIndex:undefined,outputIndex:undefined,// regular values
flags:0,childFlags:0,childMatchedQueries:0,matchedQueries:{},matchedQueryIds:0,references:{},ngContentIndex:undefined,childCount:0,bindings:bindings,outputs:[],element:undefined,provider:undefined,text:undefined,pureExpression:{type:type},query:undefined,ngContent:undefined};}/**
 * @param {?} view
 * @param {?} def
 * @return {?}
 */function createPureExpression(view,def){return{value:undefined};}/**
 * @param {?} view
 * @param {?} def
 * @param {?} v0
 * @param {?} v1
 * @param {?} v2
 * @param {?} v3
 * @param {?} v4
 * @param {?} v5
 * @param {?} v6
 * @param {?} v7
 * @param {?} v8
 * @param {?} v9
 * @return {?}
 */function checkAndUpdatePureExpressionInline(view,def,v0,v1,v2,v3,v4,v5,v6,v7,v8,v9){var/** @type {?} */bindings=def.bindings;var/** @type {?} */changed=false;var/** @type {?} */bindLen=bindings.length;if(bindLen>0&&checkAndUpdateBinding(view,def,0,v0))changed=true;if(bindLen>1&&checkAndUpdateBinding(view,def,1,v1))changed=true;if(bindLen>2&&checkAndUpdateBinding(view,def,2,v2))changed=true;if(bindLen>3&&checkAndUpdateBinding(view,def,3,v3))changed=true;if(bindLen>4&&checkAndUpdateBinding(view,def,4,v4))changed=true;if(bindLen>5&&checkAndUpdateBinding(view,def,5,v5))changed=true;if(bindLen>6&&checkAndUpdateBinding(view,def,6,v6))changed=true;if(bindLen>7&&checkAndUpdateBinding(view,def,7,v7))changed=true;if(bindLen>8&&checkAndUpdateBinding(view,def,8,v8))changed=true;if(bindLen>9&&checkAndUpdateBinding(view,def,9,v9))changed=true;if(changed){var/** @type {?} */data=asPureExpressionData(view,def.index);var/** @type {?} */value=void 0;switch(def.pureExpression.type){case PureExpressionType.Array:value=new Array(bindings.length);if(bindLen>0)value[0]=v0;if(bindLen>1)value[1]=v1;if(bindLen>2)value[2]=v2;if(bindLen>3)value[3]=v3;if(bindLen>4)value[4]=v4;if(bindLen>5)value[5]=v5;if(bindLen>6)value[6]=v6;if(bindLen>7)value[7]=v7;if(bindLen>8)value[8]=v8;if(bindLen>9)value[9]=v9;break;case PureExpressionType.Object:value={};if(bindLen>0)value[bindings[0].name]=v0;if(bindLen>1)value[bindings[1].name]=v1;if(bindLen>2)value[bindings[2].name]=v2;if(bindLen>3)value[bindings[3].name]=v3;if(bindLen>4)value[bindings[4].name]=v4;if(bindLen>5)value[bindings[5].name]=v5;if(bindLen>6)value[bindings[6].name]=v6;if(bindLen>7)value[bindings[7].name]=v7;if(bindLen>8)value[bindings[8].name]=v8;if(bindLen>9)value[bindings[9].name]=v9;break;case PureExpressionType.Pipe:var/** @type {?} */pipe=v0;switch(bindLen){case 1:value=pipe.transform(v0);break;case 2:value=pipe.transform(v1);break;case 3:value=pipe.transform(v1,v2);break;case 4:value=pipe.transform(v1,v2,v3);break;case 5:value=pipe.transform(v1,v2,v3,v4);break;case 6:value=pipe.transform(v1,v2,v3,v4,v5);break;case 7:value=pipe.transform(v1,v2,v3,v4,v5,v6);break;case 8:value=pipe.transform(v1,v2,v3,v4,v5,v6,v7);break;case 9:value=pipe.transform(v1,v2,v3,v4,v5,v6,v7,v8);break;case 10:value=pipe.transform(v1,v2,v3,v4,v5,v6,v7,v8,v9);break;}break;}data.value=value;}return changed;}/**
 * @param {?} view
 * @param {?} def
 * @param {?} values
 * @return {?}
 */function checkAndUpdatePureExpressionDynamic(view,def,values){var/** @type {?} */bindings=def.bindings;var/** @type {?} */changed=false;for(var/** @type {?} */i=0;i<values.length;i++){// Note: We need to loop over all values, so that
// the old values are updates as well!
if(checkAndUpdateBinding(view,def,i,values[i])){changed=true;}}if(changed){var/** @type {?} */data=asPureExpressionData(view,def.index);var/** @type {?} */value=void 0;switch(def.pureExpression.type){case PureExpressionType.Array:value=values;break;case PureExpressionType.Object:value={};for(var/** @type {?} */_i3=0;_i3<values.length;_i3++){value[bindings[_i3].name]=values[_i3];}break;case PureExpressionType.Pipe:var/** @type {?} */pipe=values[0];var/** @type {?} */params=values.slice(1);value=pipe.transform.apply(pipe,_toConsumableArray(params));break;}data.value=value;}return changed;}/**
 * @param {?} flags
 * @param {?} id
 * @param {?} bindings
 * @return {?}
 */function queryDef(flags,id,bindings){var/** @type {?} */bindingDefs=[];for(var/** @type {?} */propName in bindings){var/** @type {?} */bindingType=bindings[propName];bindingDefs.push({propName:propName,bindingType:bindingType});}return{type:NodeType.Query,// will bet set by the view definition
index:undefined,reverseChildIndex:undefined,parent:undefined,renderParent:undefined,bindingIndex:undefined,outputIndex:undefined,// regular values
flags:flags,childFlags:0,childMatchedQueries:0,ngContentIndex:undefined,matchedQueries:{},matchedQueryIds:0,references:{},childCount:0,bindings:[],outputs:[],element:undefined,provider:undefined,text:undefined,pureExpression:undefined,query:{id:id,filterId:filterQueryId(id),bindings:bindingDefs},ngContent:undefined};}/**
 * @return {?}
 */function createQuery(){return new QueryList();}/**
 * @param {?} view
 * @return {?}
 */function dirtyParentQueries(view){var/** @type {?} */queryIds=view.def.nodeMatchedQueries;while(view.parent&&isEmbeddedView(view)){var/** @type {?} */tplDef=view.parentNodeDef;view=view.parent;// content queries
var/** @type {?} */end=tplDef.index+tplDef.childCount;for(var/** @type {?} */i=0;i<=end;i++){var/** @type {?} */nodeDef=view.def.nodes[i];if(nodeDef.flags&NodeFlags.HasContentQuery&&nodeDef.flags&NodeFlags.HasDynamicQuery&&(nodeDef.query.filterId&queryIds)===nodeDef.query.filterId){asQueryList(view,i).setDirty();}if(nodeDef.type===NodeType.Element&&i+nodeDef.childCount<tplDef.index||!(nodeDef.childFlags&NodeFlags.HasContentQuery)||!(nodeDef.childFlags&NodeFlags.HasDynamicQuery)){// skip elements that don't contain the template element or no query.
i+=nodeDef.childCount;}}}// view queries
if(view.def.nodeFlags&NodeFlags.HasViewQuery){for(var/** @type {?} */_i4=0;_i4<view.def.nodes.length;_i4++){var/** @type {?} */_nodeDef=view.def.nodes[_i4];if(_nodeDef.flags&NodeFlags.HasViewQuery&&_nodeDef.flags&NodeFlags.HasDynamicQuery){asQueryList(view,_i4).setDirty();}// only visit the root nodes
_i4+=_nodeDef.childCount;}}}/**
 * @param {?} view
 * @param {?} nodeDef
 * @return {?}
 */function checkAndUpdateQuery(view,nodeDef){var/** @type {?} */queryList=asQueryList(view,nodeDef.index);if(!queryList.dirty){return;}var/** @type {?} */directiveInstance=void 0;var/** @type {?} */newValues=void 0;if(nodeDef.flags&NodeFlags.HasContentQuery){var/** @type {?} */_elementDef=nodeDef.parent.parent;newValues=calcQueryValues(view,_elementDef.index,_elementDef.index+_elementDef.childCount,nodeDef.query,[]);directiveInstance=asProviderData(view,nodeDef.parent.index).instance;}else if(nodeDef.flags&NodeFlags.HasViewQuery){newValues=calcQueryValues(view,0,view.def.nodes.length-1,nodeDef.query,[]);directiveInstance=view.component;}queryList.reset(newValues);var/** @type {?} */bindings=nodeDef.query.bindings;var/** @type {?} */notify=false;for(var/** @type {?} */i=0;i<bindings.length;i++){var/** @type {?} */binding=bindings[i];var/** @type {?} */boundValue=void 0;switch(binding.bindingType){case QueryBindingType.First:boundValue=queryList.first;break;case QueryBindingType.All:boundValue=queryList;notify=true;break;}directiveInstance[binding.propName]=boundValue;}if(notify){queryList.notifyOnChanges();}}/**
 * @param {?} view
 * @param {?} startIndex
 * @param {?} endIndex
 * @param {?} queryDef
 * @param {?} values
 * @return {?}
 */function calcQueryValues(view,startIndex,endIndex,queryDef,values){for(var/** @type {?} */i=startIndex;i<=endIndex;i++){var/** @type {?} */nodeDef=view.def.nodes[i];var/** @type {?} */valueType=nodeDef.matchedQueries[queryDef.id];if(valueType!=null){values.push(getQueryValue(view,nodeDef,valueType));}if(nodeDef.type===NodeType.Element&&nodeDef.element.template&&(nodeDef.element.template.nodeMatchedQueries&queryDef.filterId)===queryDef.filterId){// check embedded views that were attached at the place of their template.
var/** @type {?} */elementData=asElementData(view,i);var/** @type {?} */embeddedViews=elementData.embeddedViews;if(embeddedViews){for(var/** @type {?} */k=0;k<embeddedViews.length;k++){var/** @type {?} */embeddedView=embeddedViews[k];var/** @type {?} */dvc=declaredViewContainer(embeddedView);if(dvc&&dvc===elementData){calcQueryValues(embeddedView,0,embeddedView.def.nodes.length-1,queryDef,values);}}}var/** @type {?} */projectedViews=elementData.projectedViews;if(projectedViews){for(var/** @type {?} */_k2=0;_k2<projectedViews.length;_k2++){var/** @type {?} */projectedView=projectedViews[_k2];calcQueryValues(projectedView,0,projectedView.def.nodes.length-1,queryDef,values);}}}if((nodeDef.childMatchedQueries&queryDef.filterId)!==queryDef.filterId){// if no child matches the query, skip the children.
i+=nodeDef.childCount;}}return values;}/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} queryValueType
 * @return {?}
 */function getQueryValue(view,nodeDef,queryValueType){if(queryValueType!=null){// a match
var/** @type {?} */value=void 0;switch(queryValueType){case QueryValueType.RenderElement:value=asElementData(view,nodeDef.index).renderElement;break;case QueryValueType.ElementRef:value=new ElementRef(asElementData(view,nodeDef.index).renderElement);break;case QueryValueType.TemplateRef:value=createTemplateRef(view,nodeDef);break;case QueryValueType.ViewContainerRef:value=createViewContainerRef(view,nodeDef);break;case QueryValueType.Provider:value=asProviderData(view,nodeDef.index).instance;break;}return value;}}/**
 * @param {?} ngContentIndex
 * @param {?} constants
 * @return {?}
 */function textDef(ngContentIndex,constants){// skip the call to sliceErrorStack itself + the call to this function.
var/** @type {?} */source=isDevMode()?sliceErrorStack(2,3):'';var/** @type {?} */bindings=new Array(constants.length-1);for(var/** @type {?} */i=1;i<constants.length;i++){bindings[i-1]={type:BindingType.TextInterpolation,name:undefined,ns:undefined,nonMinifiedName:undefined,securityContext:undefined,suffix:constants[i]};}return{type:NodeType.Text,// will bet set by the view definition
index:undefined,reverseChildIndex:undefined,parent:undefined,renderParent:undefined,bindingIndex:undefined,outputIndex:undefined,// regular values
flags:0,childFlags:0,childMatchedQueries:0,matchedQueries:{},matchedQueryIds:0,references:{},ngContentIndex:ngContentIndex,childCount:0,bindings:bindings,outputs:[],element:undefined,provider:undefined,text:{prefix:constants[0],source:source},pureExpression:undefined,query:undefined,ngContent:undefined};}/**
 * @param {?} view
 * @param {?} renderHost
 * @param {?} def
 * @return {?}
 */function createText(view,renderHost,def){var/** @type {?} */renderNode=void 0;var/** @type {?} */renderer=view.renderer;renderNode=renderer.createText(def.text.prefix);var/** @type {?} */parentEl=getParentRenderElement(view,renderHost,def);if(parentEl){renderer.appendChild(parentEl,renderNode);}return{renderText:renderNode};}/**
 * @param {?} view
 * @param {?} def
 * @param {?} v0
 * @param {?} v1
 * @param {?} v2
 * @param {?} v3
 * @param {?} v4
 * @param {?} v5
 * @param {?} v6
 * @param {?} v7
 * @param {?} v8
 * @param {?} v9
 * @return {?}
 */function checkAndUpdateTextInline(view,def,v0,v1,v2,v3,v4,v5,v6,v7,v8,v9){var/** @type {?} */changed=false;var/** @type {?} */bindings=def.bindings;var/** @type {?} */bindLen=bindings.length;if(bindLen>0&&checkAndUpdateBinding(view,def,0,v0))changed=true;if(bindLen>1&&checkAndUpdateBinding(view,def,1,v1))changed=true;if(bindLen>2&&checkAndUpdateBinding(view,def,2,v2))changed=true;if(bindLen>3&&checkAndUpdateBinding(view,def,3,v3))changed=true;if(bindLen>4&&checkAndUpdateBinding(view,def,4,v4))changed=true;if(bindLen>5&&checkAndUpdateBinding(view,def,5,v5))changed=true;if(bindLen>6&&checkAndUpdateBinding(view,def,6,v6))changed=true;if(bindLen>7&&checkAndUpdateBinding(view,def,7,v7))changed=true;if(bindLen>8&&checkAndUpdateBinding(view,def,8,v8))changed=true;if(bindLen>9&&checkAndUpdateBinding(view,def,9,v9))changed=true;if(changed){var/** @type {?} */value=def.text.prefix;if(bindLen>0)value+=_addInterpolationPart(v0,bindings[0]);if(bindLen>1)value+=_addInterpolationPart(v1,bindings[1]);if(bindLen>2)value+=_addInterpolationPart(v2,bindings[2]);if(bindLen>3)value+=_addInterpolationPart(v3,bindings[3]);if(bindLen>4)value+=_addInterpolationPart(v4,bindings[4]);if(bindLen>5)value+=_addInterpolationPart(v5,bindings[5]);if(bindLen>6)value+=_addInterpolationPart(v6,bindings[6]);if(bindLen>7)value+=_addInterpolationPart(v7,bindings[7]);if(bindLen>8)value+=_addInterpolationPart(v8,bindings[8]);if(bindLen>9)value+=_addInterpolationPart(v9,bindings[9]);var/** @type {?} */_renderNode=asTextData(view,def.index).renderText;view.renderer.setValue(_renderNode,value);}return changed;}/**
 * @param {?} view
 * @param {?} def
 * @param {?} values
 * @return {?}
 */function checkAndUpdateTextDynamic(view,def,values){var/** @type {?} */bindings=def.bindings;var/** @type {?} */changed=false;for(var/** @type {?} */i=0;i<values.length;i++){// Note: We need to loop over all values, so that
// the old values are updates as well!
if(checkAndUpdateBinding(view,def,i,values[i])){changed=true;}}if(changed){var/** @type {?} */value='';for(var/** @type {?} */_i5=0;_i5<values.length;_i5++){value=value+_addInterpolationPart(values[_i5],bindings[_i5]);}value=def.text.prefix+value;var/** @type {?} */_renderNode2=asTextData(view,def.index).renderText;view.renderer.setValue(_renderNode2,value);}return changed;}/**
 * @param {?} value
 * @param {?} binding
 * @return {?}
 */function _addInterpolationPart(value,binding){var/** @type {?} */valueStr=value!=null?value.toString():'';return valueStr+binding.suffix;}var/** @type {?} */NOOP$1=function NOOP$1(){return undefined;};/**
 * @param {?} flags
 * @param {?} nodes
 * @param {?=} updateDirectives
 * @param {?=} updateRenderer
 * @return {?}
 */function viewDef(flags,nodes,updateDirectives,updateRenderer){// clone nodes and set auto calculated values
if(nodes.length===0){throw new Error('Illegal State: Views without nodes are not allowed!');}var/** @type {?} */reverseChildNodes=new Array(nodes.length);var/** @type {?} */viewBindingCount=0;var/** @type {?} */viewDisposableCount=0;var/** @type {?} */viewNodeFlags=0;var/** @type {?} */viewMatchedQueries=0;var/** @type {?} */currentParent=null;var/** @type {?} */currentElementHasPublicProviders=false;var/** @type {?} */currentElementHasPrivateProviders=false;var/** @type {?} */lastRenderRootNode=null;for(var/** @type {?} */i=0;i<nodes.length;i++){while(currentParent&&i>currentParent.index+currentParent.childCount){var/** @type {?} */newParent=currentParent.parent;if(newParent){newParent.childFlags|=currentParent.childFlags;newParent.childMatchedQueries|=currentParent.childMatchedQueries;}currentParent=newParent;}var/** @type {?} */node=nodes[i];node.index=i;node.parent=currentParent;node.bindingIndex=viewBindingCount;node.outputIndex=viewDisposableCount;node.reverseChildIndex=calculateReverseChildIndex(currentParent,i,node.childCount,nodes.length);// renderParent needs to account for ng-container!
var/** @type {?} */currentRenderParent=void 0;if(currentParent&&currentParent.type===NodeType.Element&&!currentParent.element.name){currentRenderParent=currentParent.renderParent;}else{currentRenderParent=currentParent;}node.renderParent=currentRenderParent;if(node.element){var/** @type {?} */elDef=node.element;elDef.publicProviders=currentParent?currentParent.element.publicProviders:Object.create(null);elDef.allProviders=elDef.publicProviders;// Note: We assume that all providers of an element are before any child element!
currentElementHasPublicProviders=false;currentElementHasPrivateProviders=false;}reverseChildNodes[node.reverseChildIndex]=node;validateNode(currentParent,node,nodes.length);viewNodeFlags|=node.flags;viewMatchedQueries|=node.matchedQueryIds;if(node.element&&node.element.template){viewMatchedQueries|=node.element.template.nodeMatchedQueries;}if(currentParent){currentParent.childFlags|=node.flags;currentParent.childMatchedQueries|=node.matchedQueryIds;if(node.element&&node.element.template){currentParent.childMatchedQueries|=node.element.template.nodeMatchedQueries;}}viewBindingCount+=node.bindings.length;viewDisposableCount+=node.outputs.length;if(!currentRenderParent&&(node.type===NodeType.Element||node.type===NodeType.Text)){lastRenderRootNode=node;}if(node.type===NodeType.Provider||node.type===NodeType.Directive){if(!currentElementHasPublicProviders){currentElementHasPublicProviders=true;// Use protoypical inheritance to not get O(n^2) complexity...
currentParent.element.publicProviders=Object.create(currentParent.element.publicProviders);currentParent.element.allProviders=currentParent.element.publicProviders;}var/** @type {?} */isPrivateService=(node.flags&NodeFlags.PrivateProvider)!==0;var/** @type {?} */isComponent=(node.flags&NodeFlags.IsComponent)!==0;if(!isPrivateService||isComponent){currentParent.element.publicProviders[node.provider.tokenKey]=node;}else{if(!currentElementHasPrivateProviders){currentElementHasPrivateProviders=true;// Use protoypical inheritance to not get O(n^2) complexity...
currentParent.element.allProviders=Object.create(currentParent.element.publicProviders);}currentParent.element.allProviders[node.provider.tokenKey]=node;}if(isComponent){currentParent.element.componentProvider=node;}}if(node.childCount){currentParent=node;}}while(currentParent){var/** @type {?} */_newParent=currentParent.parent;if(_newParent){_newParent.childFlags|=currentParent.childFlags;_newParent.childMatchedQueries|=currentParent.childMatchedQueries;}currentParent=_newParent;}var/** @type {?} */handleEvent=function handleEvent(view,nodeIndex,eventName,event){return nodes[nodeIndex].element.handleEvent(view,eventName,event);};return{nodeFlags:viewNodeFlags,nodeMatchedQueries:viewMatchedQueries,flags:flags,nodes:nodes,reverseChildNodes:reverseChildNodes,updateDirectives:updateDirectives||NOOP$1,updateRenderer:updateRenderer||NOOP$1,handleEvent:handleEvent||NOOP$1,bindingCount:viewBindingCount,outputCount:viewDisposableCount,lastRenderRootNode:lastRenderRootNode};}/**
 * @param {?} currentParent
 * @param {?} i
 * @param {?} childCount
 * @param {?} nodeCount
 * @return {?}
 */function calculateReverseChildIndex(currentParent,i,childCount,nodeCount){// Notes about reverse child order:
// - Every node is directly before its children, in dfs and reverse child order.
// - node.childCount contains all children, in dfs and reverse child order.
// - In dfs order, every node is before its first child
// - In reverse child order, every node is before its last child
// Algorithm, main idea:
// - In reverse child order, the ranges for each child + its transitive children are mirrored
//   regarding their position inside of their parent
// Visualization:
// Given the following tree:
// Nodes: n0
//             n1         n2
//                n11 n12    n21 n22
// dfs:    0   1   2   3  4   5   6
// result: 0   4   6   5  1   3   2
//
// Example:
// Current node = 1
// 1) lastChildIndex = 3
// 2) lastChildOffsetRelativeToParentInDfsOrder = 2
// 3) parentEndIndexInReverseChildOrder = 6
// 4) result = 4
var/** @type {?} */lastChildOffsetRelativeToParentInDfsOrder=void 0;var/** @type {?} */parentEndIndexInReverseChildOrder=void 0;if(currentParent){var/** @type {?} */lastChildIndex=i+childCount;lastChildOffsetRelativeToParentInDfsOrder=lastChildIndex-currentParent.index-1;parentEndIndexInReverseChildOrder=currentParent.reverseChildIndex+currentParent.childCount;}else{lastChildOffsetRelativeToParentInDfsOrder=i+childCount;parentEndIndexInReverseChildOrder=nodeCount-1;}return parentEndIndexInReverseChildOrder-lastChildOffsetRelativeToParentInDfsOrder;}/**
 * @param {?} parent
 * @param {?} node
 * @param {?} nodeCount
 * @return {?}
 */function validateNode(parent,node,nodeCount){var/** @type {?} */template=node.element&&node.element.template;if(template){if(template.lastRenderRootNode&&template.lastRenderRootNode.flags&NodeFlags.HasEmbeddedViews){throw new Error('Illegal State: Last root node of a template can\'t have embedded views, at index '+node.index+'!');}}if(node.type===NodeType.Provider||node.type===NodeType.Directive){var/** @type {?} */parentType=parent?parent.type:null;if(parentType!==NodeType.Element){throw new Error('Illegal State: Provider/Directive nodes need to be children of elements or anchors, at index '+node.index+'!');}}if(node.query){if(node.flags&NodeFlags.HasContentQuery&&(!parent||parent.type!==NodeType.Directive)){throw new Error('Illegal State: Content Query nodes need to be children of directives, at index '+node.index+'!');}if(node.flags&NodeFlags.HasViewQuery&&parent){throw new Error('Illegal State: View Query nodes have to be top level nodes, at index '+node.index+'!');}}if(node.childCount){var/** @type {?} */parentEnd=parent?parent.index+parent.childCount:nodeCount-1;if(node.index<=parentEnd&&node.index+node.childCount>parentEnd){throw new Error('Illegal State: childCount of node leads outside of parent, at index '+node.index+'!');}}}/**
 * @param {?} parent
 * @param {?} anchorDef
 * @param {?=} context
 * @return {?}
 */function createEmbeddedView(parent,anchorDef,context){// embedded views are seen as siblings to the anchor, so we need
// to get the parent of the anchor and use it as parentIndex.
var/** @type {?} */view=createView(parent.root,parent.renderer,parent,anchorDef,anchorDef.element.template);initView(view,parent.component,context);createViewNodes(view);return view;}/**
 * @param {?} root
 * @param {?} def
 * @param {?=} context
 * @return {?}
 */function createRootView(root,def,context){var/** @type {?} */view=createView(root,root.renderer,null,null,def);initView(view,context,context);createViewNodes(view);return view;}/**
 * @param {?} root
 * @param {?} renderer
 * @param {?} parent
 * @param {?} parentNodeDef
 * @param {?} def
 * @return {?}
 */function createView(root,renderer,parent,parentNodeDef,def){var/** @type {?} */nodes=new Array(def.nodes.length);var/** @type {?} */disposables=def.outputCount?new Array(def.outputCount):undefined;var/** @type {?} */view={def:def,parent:parent,viewContainerParent:undefined,parentNodeDef:parentNodeDef,context:undefined,component:undefined,nodes:nodes,state:ViewState.FirstCheck|ViewState.ChecksEnabled,root:root,renderer:renderer,oldValues:new Array(def.bindingCount),disposables:disposables};return view;}/**
 * @param {?} view
 * @param {?} component
 * @param {?} context
 * @return {?}
 */function initView(view,component,context){view.component=component;view.context=context;}/**
 * @param {?} view
 * @return {?}
 */function createViewNodes(view){var/** @type {?} */renderHost=void 0;if(isComponentView(view)){var/** @type {?} */hostDef=view.parentNodeDef;renderHost=asElementData(view.parent,hostDef.parent.index).renderElement;}var/** @type {?} */def=view.def;var/** @type {?} */nodes=view.nodes;for(var/** @type {?} */i=0;i<def.nodes.length;i++){var/** @type {?} */nodeDef=def.nodes[i];Services.setCurrentNode(view,i);var/** @type {?} */nodeData=void 0;switch(nodeDef.type){case NodeType.Element:var/** @type {?} */el=createElement(view,renderHost,nodeDef);var/** @type {?} */componentView=void 0;if(nodeDef.flags&NodeFlags.HasComponent){var/** @type {?} */compViewDef=resolveViewDefinition(nodeDef.element.componentView);var/** @type {?} */rendererType=nodeDef.element.componentRendererType;var/** @type {?} */compRenderer=void 0;if(!rendererType){compRenderer=view.root.renderer;}else{compRenderer=view.root.rendererFactory.createRenderer(el,rendererType);}componentView=createView(view.root,compRenderer,view,nodeDef.element.componentProvider,compViewDef);}listenToElementOutputs(view,componentView,nodeDef,el);nodeData={renderElement:el,componentView:componentView,embeddedViews:nodeDef.flags&NodeFlags.HasEmbeddedViews?[]:undefined,projectedViews:undefined};break;case NodeType.Text:nodeData=createText(view,renderHost,nodeDef);break;case NodeType.Provider:{var/** @type {?} */instance=createProviderInstance(view,nodeDef);nodeData={instance:instance};break;}case NodeType.Pipe:{var/** @type {?} */_instance=createPipeInstance(view,nodeDef);nodeData={instance:_instance};break;}case NodeType.Directive:{var/** @type {?} */_instance2=createDirectiveInstance(view,nodeDef);nodeData={instance:_instance2};if(nodeDef.flags&NodeFlags.IsComponent){var/** @type {?} */compView=asElementData(view,nodeDef.parent.index).componentView;initView(compView,_instance2,_instance2);}break;}case NodeType.PureExpression:nodeData=createPureExpression(view,nodeDef);break;case NodeType.Query:nodeData=createQuery();break;case NodeType.NgContent:appendNgContent(view,renderHost,nodeDef);// no runtime data needed for NgContent...
nodeData=undefined;break;}nodes[i]=nodeData;}// Create the ViewData.nodes of component views after we created everything else,
// so that e.g. ng-content works
execComponentViewsAction(view,ViewAction.CreateViewNodes);// fill static content and view queries
execQueriesAction(view,NodeFlags.HasContentQuery|NodeFlags.HasViewQuery,NodeFlags.HasStaticQuery,CheckType.CheckAndUpdate);}/**
 * @param {?} view
 * @return {?}
 */function checkNoChangesView(view){Services.updateDirectives(view,CheckType.CheckNoChanges);execEmbeddedViewsAction(view,ViewAction.CheckNoChanges);execQueriesAction(view,NodeFlags.HasContentQuery,NodeFlags.HasDynamicQuery,CheckType.CheckNoChanges);Services.updateRenderer(view,CheckType.CheckNoChanges);execComponentViewsAction(view,ViewAction.CheckNoChanges);execQueriesAction(view,NodeFlags.HasViewQuery,NodeFlags.HasDynamicQuery,CheckType.CheckNoChanges);}/**
 * @param {?} view
 * @return {?}
 */function checkAndUpdateView(view){Services.updateDirectives(view,CheckType.CheckAndUpdate);execEmbeddedViewsAction(view,ViewAction.CheckAndUpdate);execQueriesAction(view,NodeFlags.HasContentQuery,NodeFlags.HasDynamicQuery,CheckType.CheckAndUpdate);callLifecycleHooksChildrenFirst(view,NodeFlags.AfterContentChecked|(view.state&ViewState.FirstCheck?NodeFlags.AfterContentInit:0));Services.updateRenderer(view,CheckType.CheckAndUpdate);execComponentViewsAction(view,ViewAction.CheckAndUpdate);execQueriesAction(view,NodeFlags.HasViewQuery,NodeFlags.HasDynamicQuery,CheckType.CheckAndUpdate);callLifecycleHooksChildrenFirst(view,NodeFlags.AfterViewChecked|(view.state&ViewState.FirstCheck?NodeFlags.AfterViewInit:0));if(view.def.flags&ViewFlags.OnPush){view.state&=~ViewState.ChecksEnabled;}view.state&=~ViewState.FirstCheck;}/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} argStyle
 * @param {?=} v0
 * @param {?=} v1
 * @param {?=} v2
 * @param {?=} v3
 * @param {?=} v4
 * @param {?=} v5
 * @param {?=} v6
 * @param {?=} v7
 * @param {?=} v8
 * @param {?=} v9
 * @return {?}
 */function checkAndUpdateNode(view,nodeDef,argStyle,v0,v1,v2,v3,v4,v5,v6,v7,v8,v9){if(argStyle===ArgumentType.Inline){return checkAndUpdateNodeInline(view,nodeDef,v0,v1,v2,v3,v4,v5,v6,v7,v8,v9);}else{return checkAndUpdateNodeDynamic(view,nodeDef,v0);}}/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?=} v0
 * @param {?=} v1
 * @param {?=} v2
 * @param {?=} v3
 * @param {?=} v4
 * @param {?=} v5
 * @param {?=} v6
 * @param {?=} v7
 * @param {?=} v8
 * @param {?=} v9
 * @return {?}
 */function checkAndUpdateNodeInline(view,nodeDef,v0,v1,v2,v3,v4,v5,v6,v7,v8,v9){var/** @type {?} */changed=false;switch(nodeDef.type){case NodeType.Element:changed=checkAndUpdateElementInline(view,nodeDef,v0,v1,v2,v3,v4,v5,v6,v7,v8,v9);break;case NodeType.Text:changed=checkAndUpdateTextInline(view,nodeDef,v0,v1,v2,v3,v4,v5,v6,v7,v8,v9);break;case NodeType.Directive:changed=checkAndUpdateDirectiveInline(view,nodeDef,v0,v1,v2,v3,v4,v5,v6,v7,v8,v9);break;case NodeType.PureExpression:changed=checkAndUpdatePureExpressionInline(view,nodeDef,v0,v1,v2,v3,v4,v5,v6,v7,v8,v9);break;}return changed;}/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} values
 * @return {?}
 */function checkAndUpdateNodeDynamic(view,nodeDef,values){var/** @type {?} */changed=false;switch(nodeDef.type){case NodeType.Element:changed=checkAndUpdateElementDynamic(view,nodeDef,values);break;case NodeType.Text:changed=checkAndUpdateTextDynamic(view,nodeDef,values);break;case NodeType.Directive:changed=checkAndUpdateDirectiveDynamic(view,nodeDef,values);break;case NodeType.PureExpression:changed=checkAndUpdatePureExpressionDynamic(view,nodeDef,values);break;}if(changed){// Update oldValues after all bindings have been updated,
// as a setter for a property might update other properties.
var/** @type {?} */bindLen=nodeDef.bindings.length;var/** @type {?} */bindingStart=nodeDef.bindingIndex;var/** @type {?} */oldValues=view.oldValues;for(var/** @type {?} */i=0;i<bindLen;i++){oldValues[bindingStart+i]=values[i];}}return changed;}/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} argStyle
 * @param {?=} v0
 * @param {?=} v1
 * @param {?=} v2
 * @param {?=} v3
 * @param {?=} v4
 * @param {?=} v5
 * @param {?=} v6
 * @param {?=} v7
 * @param {?=} v8
 * @param {?=} v9
 * @return {?}
 */function checkNoChangesNode(view,nodeDef,argStyle,v0,v1,v2,v3,v4,v5,v6,v7,v8,v9){if(argStyle===ArgumentType.Inline){checkNoChangesNodeInline(view,nodeDef,v0,v1,v2,v3,v4,v5,v6,v7,v8,v9);}else{checkNoChangesNodeDynamic(view,nodeDef,v0);}// Returning false is ok here as we would have thrown in case of a change.
return false;}/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} v0
 * @param {?} v1
 * @param {?} v2
 * @param {?} v3
 * @param {?} v4
 * @param {?} v5
 * @param {?} v6
 * @param {?} v7
 * @param {?} v8
 * @param {?} v9
 * @return {?}
 */function checkNoChangesNodeInline(view,nodeDef,v0,v1,v2,v3,v4,v5,v6,v7,v8,v9){var/** @type {?} */bindLen=nodeDef.bindings.length;if(bindLen>0)checkBindingNoChanges(view,nodeDef,0,v0);if(bindLen>1)checkBindingNoChanges(view,nodeDef,1,v1);if(bindLen>2)checkBindingNoChanges(view,nodeDef,2,v2);if(bindLen>3)checkBindingNoChanges(view,nodeDef,3,v3);if(bindLen>4)checkBindingNoChanges(view,nodeDef,4,v4);if(bindLen>5)checkBindingNoChanges(view,nodeDef,5,v5);if(bindLen>6)checkBindingNoChanges(view,nodeDef,6,v6);if(bindLen>7)checkBindingNoChanges(view,nodeDef,7,v7);if(bindLen>8)checkBindingNoChanges(view,nodeDef,8,v8);if(bindLen>9)checkBindingNoChanges(view,nodeDef,9,v9);}/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} values
 * @return {?}
 */function checkNoChangesNodeDynamic(view,nodeDef,values){for(var/** @type {?} */i=0;i<values.length;i++){checkBindingNoChanges(view,nodeDef,i,values[i]);}}/**
 * @param {?} view
 * @param {?} nodeDef
 * @return {?}
 */function checkNoChangesQuery(view,nodeDef){var/** @type {?} */queryList=asQueryList(view,nodeDef.index);if(queryList.dirty){throw expressionChangedAfterItHasBeenCheckedError$1(Services.createDebugContext(view,nodeDef.index),'Query '+nodeDef.query.id+' not dirty','Query '+nodeDef.query.id+' dirty',(view.state&ViewState.FirstCheck)!==0);}}/**
 * @param {?} view
 * @return {?}
 */function destroyView(view){if(view.state&ViewState.Destroyed){return;}execEmbeddedViewsAction(view,ViewAction.Destroy);execComponentViewsAction(view,ViewAction.Destroy);callLifecycleHooksChildrenFirst(view,NodeFlags.OnDestroy);if(view.disposables){for(var/** @type {?} */i=0;i<view.disposables.length;i++){view.disposables[i]();}}if(view.renderer.destroyNode){destroyViewNodes(view);}if(isComponentView(view)){view.renderer.destroy();}view.state|=ViewState.Destroyed;}/**
 * @param {?} view
 * @return {?}
 */function destroyViewNodes(view){var/** @type {?} */len=view.def.nodes.length;for(var/** @type {?} */i=0;i<len;i++){var/** @type {?} */def=view.def.nodes[i];if(def.type===NodeType.Element){view.renderer.destroyNode(asElementData(view,i).renderElement);}else if(def.type===NodeType.Text){view.renderer.destroyNode(asTextData(view,i).renderText);}}}var ViewAction={};ViewAction.CreateViewNodes=0;ViewAction.CheckNoChanges=1;ViewAction.CheckAndUpdate=2;ViewAction.Destroy=3;ViewAction[ViewAction.CreateViewNodes]="CreateViewNodes";ViewAction[ViewAction.CheckNoChanges]="CheckNoChanges";ViewAction[ViewAction.CheckAndUpdate]="CheckAndUpdate";ViewAction[ViewAction.Destroy]="Destroy";/**
 * @param {?} view
 * @param {?} action
 * @return {?}
 */function execComponentViewsAction(view,action){var/** @type {?} */def=view.def;if(!(def.nodeFlags&NodeFlags.HasComponent)){return;}for(var/** @type {?} */i=0;i<def.nodes.length;i++){var/** @type {?} */nodeDef=def.nodes[i];if(nodeDef.flags&NodeFlags.HasComponent){// a leaf
callViewAction(asElementData(view,i).componentView,action);}else if((nodeDef.childFlags&NodeFlags.HasComponent)===0){// a parent with leafs
// no child is a component,
// then skip the children
i+=nodeDef.childCount;}}}/**
 * @param {?} view
 * @param {?} action
 * @return {?}
 */function execEmbeddedViewsAction(view,action){var/** @type {?} */def=view.def;if(!(def.nodeFlags&NodeFlags.HasEmbeddedViews)){return;}for(var/** @type {?} */i=0;i<def.nodes.length;i++){var/** @type {?} */nodeDef=def.nodes[i];if(nodeDef.flags&NodeFlags.HasEmbeddedViews){// a leaf
var/** @type {?} */embeddedViews=asElementData(view,i).embeddedViews;if(embeddedViews){for(var/** @type {?} */k=0;k<embeddedViews.length;k++){callViewAction(embeddedViews[k],action);}}}else if((nodeDef.childFlags&NodeFlags.HasEmbeddedViews)===0){// a parent with leafs
// no child is a component,
// then skip the children
i+=nodeDef.childCount;}}}/**
 * @param {?} view
 * @param {?} action
 * @return {?}
 */function callViewAction(view,action){var/** @type {?} */viewState=view.state;switch(action){case ViewAction.CheckNoChanges:if(viewState&ViewState.ChecksEnabled&&(viewState&(ViewState.Errored|ViewState.Destroyed))===0){checkNoChangesView(view);}break;case ViewAction.CheckAndUpdate:if(viewState&ViewState.ChecksEnabled&&(viewState&(ViewState.Errored|ViewState.Destroyed))===0){checkAndUpdateView(view);}break;case ViewAction.Destroy:destroyView(view);break;case ViewAction.CreateViewNodes:createViewNodes(view);break;}}/**
 * @param {?} view
 * @param {?} queryFlags
 * @param {?} staticDynamicQueryFlag
 * @param {?} checkType
 * @return {?}
 */function execQueriesAction(view,queryFlags,staticDynamicQueryFlag,checkType){if(!(view.def.nodeFlags&queryFlags)||!(view.def.nodeFlags&staticDynamicQueryFlag)){return;}var/** @type {?} */nodeCount=view.def.nodes.length;for(var/** @type {?} */i=0;i<nodeCount;i++){var/** @type {?} */nodeDef=view.def.nodes[i];if(nodeDef.flags&queryFlags&&nodeDef.flags&staticDynamicQueryFlag){Services.setCurrentNode(view,nodeDef.index);switch(checkType){case CheckType.CheckAndUpdate:checkAndUpdateQuery(view,nodeDef);break;case CheckType.CheckNoChanges:checkNoChangesQuery(view,nodeDef);break;}}if(!(nodeDef.childFlags&queryFlags)||!(nodeDef.childFlags&staticDynamicQueryFlag)){// no child has a matching query
// then skip the children
i+=nodeDef.childCount;}}}var/** @type {?} */initialized=false;/**
 * @return {?}
 */function initServicesIfNeeded(){if(initialized){return;}initialized=true;var/** @type {?} */services=isDevMode()?createDebugServices():createProdServices();Services.setCurrentNode=services.setCurrentNode;Services.createRootView=services.createRootView;Services.createEmbeddedView=services.createEmbeddedView;Services.checkAndUpdateView=services.checkAndUpdateView;Services.checkNoChangesView=services.checkNoChangesView;Services.destroyView=services.destroyView;Services.resolveDep=resolveDep;Services.createDebugContext=services.createDebugContext;Services.handleEvent=services.handleEvent;Services.updateDirectives=services.updateDirectives;Services.updateRenderer=services.updateRenderer;Services.dirtyParentQueries=dirtyParentQueries;}/**
 * @return {?}
 */function createProdServices(){return{setCurrentNode:function setCurrentNode(){},createRootView:createProdRootView,createEmbeddedView:createEmbeddedView,checkAndUpdateView:checkAndUpdateView,checkNoChangesView:checkNoChangesView,destroyView:destroyView,createDebugContext:function createDebugContext(view,nodeIndex){return new DebugContext_(view,nodeIndex);},handleEvent:function handleEvent(view,nodeIndex,eventName,event){return view.def.handleEvent(view,nodeIndex,eventName,event);},updateDirectives:function updateDirectives(view,checkType){return view.def.updateDirectives(checkType===CheckType.CheckAndUpdate?prodCheckAndUpdateNode:prodCheckNoChangesNode,view);},updateRenderer:function updateRenderer(view,checkType){return view.def.updateRenderer(checkType===CheckType.CheckAndUpdate?prodCheckAndUpdateNode:prodCheckNoChangesNode,view);}};}/**
 * @return {?}
 */function createDebugServices(){return{setCurrentNode:debugSetCurrentNode,createRootView:debugCreateRootView,createEmbeddedView:debugCreateEmbeddedView,checkAndUpdateView:debugCheckAndUpdateView,checkNoChangesView:debugCheckNoChangesView,destroyView:debugDestroyView,createDebugContext:function createDebugContext(view,nodeIndex){return new DebugContext_(view,nodeIndex);},handleEvent:debugHandleEvent,updateDirectives:debugUpdateDirectives,updateRenderer:debugUpdateRenderer};}/**
 * @param {?} injector
 * @param {?} projectableNodes
 * @param {?} rootSelectorOrNode
 * @param {?} def
 * @param {?=} context
 * @return {?}
 */function createProdRootView(injector,projectableNodes,rootSelectorOrNode,def,context){var/** @type {?} */rendererFactory=injector.get(RendererFactoryV2);return createRootView(createRootData(injector,rendererFactory,projectableNodes,rootSelectorOrNode),def,context);}/**
 * @param {?} injector
 * @param {?} projectableNodes
 * @param {?} rootSelectorOrNode
 * @param {?} def
 * @param {?=} context
 * @return {?}
 */function debugCreateRootView(injector,projectableNodes,rootSelectorOrNode,def,context){var/** @type {?} */rendererFactory=injector.get(RendererFactoryV2);var/** @type {?} */root=createRootData(injector,new DebugRendererFactoryV2(rendererFactory),projectableNodes,rootSelectorOrNode);return callWithDebugContext(DebugAction.create,createRootView,null,[root,def,context]);}/**
 * @param {?} injector
 * @param {?} rendererFactory
 * @param {?} projectableNodes
 * @param {?} rootSelectorOrNode
 * @return {?}
 */function createRootData(injector,rendererFactory,projectableNodes,rootSelectorOrNode){var/** @type {?} */sanitizer=injector.get(Sanitizer);var/** @type {?} */renderer=rendererFactory.createRenderer(null,null);return{injector:injector,projectableNodes:projectableNodes,selectorOrNode:rootSelectorOrNode,sanitizer:sanitizer,rendererFactory:rendererFactory,renderer:renderer};}/**
 * @param {?} view
 * @param {?} nodeIndex
 * @param {?} argStyle
 * @param {?=} v0
 * @param {?=} v1
 * @param {?=} v2
 * @param {?=} v3
 * @param {?=} v4
 * @param {?=} v5
 * @param {?=} v6
 * @param {?=} v7
 * @param {?=} v8
 * @param {?=} v9
 * @return {?}
 */function prodCheckAndUpdateNode(view,nodeIndex,argStyle,v0,v1,v2,v3,v4,v5,v6,v7,v8,v9){var/** @type {?} */nodeDef=view.def.nodes[nodeIndex];checkAndUpdateNode(view,nodeDef,argStyle,v0,v1,v2,v3,v4,v5,v6,v7,v8,v9);return nodeDef.type===NodeType.PureExpression?asPureExpressionData(view,nodeIndex).value:undefined;}/**
 * @param {?} view
 * @param {?} nodeIndex
 * @param {?} argStyle
 * @param {?=} v0
 * @param {?=} v1
 * @param {?=} v2
 * @param {?=} v3
 * @param {?=} v4
 * @param {?=} v5
 * @param {?=} v6
 * @param {?=} v7
 * @param {?=} v8
 * @param {?=} v9
 * @return {?}
 */function prodCheckNoChangesNode(view,nodeIndex,argStyle,v0,v1,v2,v3,v4,v5,v6,v7,v8,v9){var/** @type {?} */nodeDef=view.def.nodes[nodeIndex];checkNoChangesNode(view,nodeDef,argStyle,v0,v1,v2,v3,v4,v5,v6,v7,v8,v9);return nodeDef.type===NodeType.PureExpression?asPureExpressionData(view,nodeIndex).value:undefined;}/**
 * @param {?} parent
 * @param {?} anchorDef
 * @param {?=} context
 * @return {?}
 */function debugCreateEmbeddedView(parent,anchorDef,context){return callWithDebugContext(DebugAction.create,createEmbeddedView,null,[parent,anchorDef,context]);}/**
 * @param {?} view
 * @return {?}
 */function debugCheckAndUpdateView(view){return callWithDebugContext(DebugAction.detectChanges,checkAndUpdateView,null,[view]);}/**
 * @param {?} view
 * @return {?}
 */function debugCheckNoChangesView(view){return callWithDebugContext(DebugAction.checkNoChanges,checkNoChangesView,null,[view]);}/**
 * @param {?} view
 * @return {?}
 */function debugDestroyView(view){return callWithDebugContext(DebugAction.destroy,destroyView,null,[view]);}var DebugAction={};DebugAction.create=0;DebugAction.detectChanges=1;DebugAction.checkNoChanges=2;DebugAction.destroy=3;DebugAction.handleEvent=4;DebugAction[DebugAction.create]="create";DebugAction[DebugAction.detectChanges]="detectChanges";DebugAction[DebugAction.checkNoChanges]="checkNoChanges";DebugAction[DebugAction.destroy]="destroy";DebugAction[DebugAction.handleEvent]="handleEvent";var/** @type {?} */_currentAction=void 0;var/** @type {?} */_currentView=void 0;var/** @type {?} */_currentNodeIndex=void 0;/**
 * @param {?} view
 * @param {?} nodeIndex
 * @return {?}
 */function debugSetCurrentNode(view,nodeIndex){_currentView=view;_currentNodeIndex=nodeIndex;}/**
 * @param {?} view
 * @param {?} nodeIndex
 * @param {?} eventName
 * @param {?} event
 * @return {?}
 */function debugHandleEvent(view,nodeIndex,eventName,event){debugSetCurrentNode(view,nodeIndex);return callWithDebugContext(DebugAction.handleEvent,view.def.handleEvent,null,[view,nodeIndex,eventName,event]);}/**
 * @param {?} view
 * @param {?} checkType
 * @return {?}
 */function debugUpdateDirectives(view,checkType){if(view.state&ViewState.Destroyed){throw viewDestroyedError$1(DebugAction[_currentAction]);}debugSetCurrentNode(view,nextDirectiveWithBinding(view,0));return view.def.updateDirectives(debugCheckDirectivesFn,view);/**
     * @param {?} view
     * @param {?} nodeIndex
     * @param {?} argStyle
     * @param {...?} values
     * @return {?}
     */function debugCheckDirectivesFn(view,nodeIndex,argStyle){var/** @type {?} */nodeDef=view.def.nodes[nodeIndex];for(var _len7=arguments.length,values=Array(_len7>3?_len7-3:0),_key7=3;_key7<_len7;_key7++){values[_key7-3]=arguments[_key7];}if(checkType===CheckType.CheckAndUpdate){debugCheckAndUpdateNode(view,nodeDef,argStyle,values);}else{debugCheckNoChangesNode(view,nodeDef,argStyle,values);}if(nodeDef.type===NodeType.Directive){debugSetCurrentNode(view,nextDirectiveWithBinding(view,nodeIndex));}return nodeDef.type===NodeType.PureExpression?asPureExpressionData(view,nodeDef.index).value:undefined;};}/**
 * @param {?} view
 * @param {?} checkType
 * @return {?}
 */function debugUpdateRenderer(view,checkType){if(view.state&ViewState.Destroyed){throw viewDestroyedError$1(DebugAction[_currentAction]);}debugSetCurrentNode(view,nextRenderNodeWithBinding(view,0));return view.def.updateRenderer(debugCheckRenderNodeFn,view);/**
     * @param {?} view
     * @param {?} nodeIndex
     * @param {?} argStyle
     * @param {...?} values
     * @return {?}
     */function debugCheckRenderNodeFn(view,nodeIndex,argStyle){var/** @type {?} */nodeDef=view.def.nodes[nodeIndex];for(var _len8=arguments.length,values=Array(_len8>3?_len8-3:0),_key8=3;_key8<_len8;_key8++){values[_key8-3]=arguments[_key8];}if(checkType===CheckType.CheckAndUpdate){debugCheckAndUpdateNode(view,nodeDef,argStyle,values);}else{debugCheckNoChangesNode(view,nodeDef,argStyle,values);}if(nodeDef.type===NodeType.Element||nodeDef.type===NodeType.Text){debugSetCurrentNode(view,nextRenderNodeWithBinding(view,nodeIndex));}return nodeDef.type===NodeType.PureExpression?asPureExpressionData(view,nodeDef.index).value:undefined;}}/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} argStyle
 * @param {?} givenValues
 * @return {?}
 */function debugCheckAndUpdateNode(view,nodeDef,argStyle,givenValues){var/** @type {?} */changed=checkAndUpdateNode.apply(undefined,[view,nodeDef,argStyle].concat(_toConsumableArray(givenValues)));if(changed){var/** @type {?} */values=argStyle===ArgumentType.Dynamic?givenValues[0]:givenValues;if(nodeDef.type===NodeType.Directive||nodeDef.type===NodeType.Element){var/** @type {?} */bindingValues={};for(var/** @type {?} */i=0;i<nodeDef.bindings.length;i++){var/** @type {?} */binding=nodeDef.bindings[i];var/** @type {?} */value=values[i];if(binding.type===BindingType.ElementProperty||binding.type===BindingType.ComponentHostProperty||binding.type===BindingType.DirectiveProperty){bindingValues[normalizeDebugBindingName(binding.nonMinifiedName)]=normalizeDebugBindingValue(value);}}var/** @type {?} */elDef=nodeDef.type===NodeType.Directive?nodeDef.parent:nodeDef;var/** @type {?} */el=asElementData(view,elDef.index).renderElement;if(!elDef.element.name){// a comment.
view.renderer.setValue(el,'bindings='+JSON.stringify(bindingValues,null,2));}else{// a regular element.
for(var/** @type {?} */attr in bindingValues){var/** @type {?} */_value2=bindingValues[attr];if(_value2!=null){view.renderer.setAttribute(el,attr,_value2);}else{view.renderer.removeAttribute(el,attr);}}}}}}/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} argStyle
 * @param {?} values
 * @return {?}
 */function debugCheckNoChangesNode(view,nodeDef,argStyle,values){checkNoChangesNode.apply(undefined,[view,nodeDef,argStyle].concat(_toConsumableArray(values)));}/**
 * @param {?} name
 * @return {?}
 */function normalizeDebugBindingName(name){// Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers
name=camelCaseToDashCase$1(name.replace(/[$@]/g,'_'));return'ng-reflect-'+name;}var/** @type {?} */CAMEL_CASE_REGEXP$1=/([A-Z])/g;/**
 * @param {?} input
 * @return {?}
 */function camelCaseToDashCase$1(input){return input.replace(CAMEL_CASE_REGEXP$1,function(){for(var _len9=arguments.length,m=Array(_len9),_key9=0;_key9<_len9;_key9++){m[_key9]=arguments[_key9];}return'-'+m[1].toLowerCase();});}/**
 * @param {?} value
 * @return {?}
 */function normalizeDebugBindingValue(value){try{// Limit the size of the value as otherwise the DOM just gets polluted.
return value?value.toString().slice(0,30):value;}catch(e){return'[ERROR] Exception while trying to serialize the value';}}/**
 * @param {?} view
 * @param {?} nodeIndex
 * @return {?}
 */function nextDirectiveWithBinding(view,nodeIndex){for(var/** @type {?} */i=nodeIndex;i<view.def.nodes.length;i++){var/** @type {?} */nodeDef=view.def.nodes[i];if(nodeDef.type===NodeType.Directive&&nodeDef.bindings&&nodeDef.bindings.length){return i;}}return undefined;}/**
 * @param {?} view
 * @param {?} nodeIndex
 * @return {?}
 */function nextRenderNodeWithBinding(view,nodeIndex){for(var/** @type {?} */i=nodeIndex;i<view.def.nodes.length;i++){var/** @type {?} */nodeDef=view.def.nodes[i];if((nodeDef.type===NodeType.Element||nodeDef.type===NodeType.Text)&&nodeDef.bindings&&nodeDef.bindings.length){return i;}}return undefined;}var DebugContext_=function(){/**
     * @param {?} view
     * @param {?} nodeIndex
     */function DebugContext_(view,nodeIndex){_classCallCheck(this,DebugContext_);this.view=view;this.nodeIndex=nodeIndex;if(nodeIndex==null){this.nodeIndex=nodeIndex=0;}this.nodeDef=view.def.nodes[nodeIndex];var elDef=this.nodeDef;var elView=view;while(elDef&&elDef.type!==NodeType.Element){elDef=elDef.parent;}if(!elDef){while(!elDef&&elView){elDef=viewParentEl(elView);elView=elView.parent;}}this.elDef=elDef;this.elView=elView;}/**
     * @return {?}
     */_createClass(DebugContext_,[{key:'elOrCompView',get:function get(){// Has to be done lazily as we use the DebugContext also during creation of elements...
return asElementData(this.elView,this.elDef.index).componentView||this.view;}/**
     * @return {?}
     */},{key:'injector',get:function get(){return createInjector(this.elView,this.elDef);}/**
     * @return {?}
     */},{key:'component',get:function get(){return this.elOrCompView.component;}/**
     * @return {?}
     */},{key:'context',get:function get(){return this.elOrCompView.context;}/**
     * @return {?}
     */},{key:'providerTokens',get:function get(){var/** @type {?} */tokens=[];if(this.elDef){for(var/** @type {?} */i=this.elDef.index+1;i<=this.elDef.index+this.elDef.childCount;i++){var/** @type {?} */childDef=this.elView.def.nodes[i];if(childDef.type===NodeType.Provider||childDef.type===NodeType.Directive){tokens.push(childDef.provider.token);}i+=childDef.childCount;}}return tokens;}/**
     * @return {?}
     */},{key:'references',get:function get(){var/** @type {?} */references={};if(this.elDef){collectReferences(this.elView,this.elDef,references);for(var/** @type {?} */i=this.elDef.index+1;i<=this.elDef.index+this.elDef.childCount;i++){var/** @type {?} */childDef=this.elView.def.nodes[i];if(childDef.type===NodeType.Provider||childDef.type===NodeType.Directive){collectReferences(this.elView,childDef,references);}i+=childDef.childCount;}}return references;}/**
     * @return {?}
     */},{key:'source',get:function get(){if(this.nodeDef.type===NodeType.Text){return this.nodeDef.text.source;}else{return this.elDef.element.source;}}/**
     * @return {?}
     */},{key:'componentRenderElement',get:function get(){var/** @type {?} */elData=findHostElement(this.elOrCompView);return elData?elData.renderElement:undefined;}/**
     * @return {?}
     */},{key:'renderNode',get:function get(){return this.nodeDef.type===NodeType.Text?renderNode(this.view,this.nodeDef):renderNode(this.elView,this.elDef);}}]);return DebugContext_;}();/**
 * @param {?} view
 * @return {?}
 */function findHostElement(view){while(view&&!isComponentView(view)){view=view.parent;}if(view.parent){return asElementData(view.parent,viewParentEl(view).index);}return undefined;}/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} references
 * @return {?}
 */function collectReferences(view,nodeDef,references){for(var/** @type {?} */refName in nodeDef.references){references[refName]=getQueryValue(view,nodeDef,nodeDef.references[refName]);}}/**
 * @param {?} action
 * @param {?} fn
 * @param {?} self
 * @param {?} args
 * @return {?}
 */function callWithDebugContext(action,fn,self,args){var/** @type {?} */oldAction=_currentAction;var/** @type {?} */oldView=_currentView;var/** @type {?} */oldNodeIndex=_currentNodeIndex;try{_currentAction=action;var/** @type {?} */result=fn.apply(self,args);_currentView=oldView;_currentNodeIndex=oldNodeIndex;_currentAction=oldAction;return result;}catch(e){if(isViewDebugError(e)||!_currentView){throw e;}_currentView.state|=ViewState.Errored;throw viewWrappedDebugError(e,getCurrentDebugContext());}}/**
 * @return {?}
 */function getCurrentDebugContext(){return new DebugContext_(_currentView,_currentNodeIndex);}var DebugRendererFactoryV2=function(){/**
     * @param {?} delegate
     */function DebugRendererFactoryV2(delegate){_classCallCheck(this,DebugRendererFactoryV2);this.delegate=delegate;}/**
     * @param {?} element
     * @param {?} renderData
     * @return {?}
     */_createClass(DebugRendererFactoryV2,[{key:'createRenderer',value:function createRenderer(element,renderData){return new DebugRendererV2(this.delegate.createRenderer(element,renderData));}}]);return DebugRendererFactoryV2;}();var DebugRendererV2=function(){/**
     * @param {?} delegate
     */function DebugRendererV2(delegate){_classCallCheck(this,DebugRendererV2);this.delegate=delegate;}/**
     * @return {?}
     */_createClass(DebugRendererV2,[{key:'destroyNode',/**
     * @param {?} node
     * @return {?}
     */value:function destroyNode(node){removeDebugNodeFromIndex(getDebugNode(node));if(this.delegate.destroyNode){this.delegate.destroyNode(node);}}/**
     * @return {?}
     */},{key:'destroy',value:function destroy(){this.delegate.destroy();}/**
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */},{key:'createElement',value:function createElement(name,namespace){var/** @type {?} */el=this.delegate.createElement(name,namespace);var/** @type {?} */debugEl=new DebugElement(el,null,getCurrentDebugContext());debugEl.name=name;indexDebugNode(debugEl);return el;}/**
     * @param {?} value
     * @return {?}
     */},{key:'createComment',value:function createComment(value){var/** @type {?} */comment=this.delegate.createComment(value);var/** @type {?} */debugEl=new DebugNode(comment,null,getCurrentDebugContext());indexDebugNode(debugEl);return comment;}/**
     * @param {?} value
     * @return {?}
     */},{key:'createText',value:function createText(value){var/** @type {?} */text=this.delegate.createText(value);var/** @type {?} */debugEl=new DebugNode(text,null,getCurrentDebugContext());indexDebugNode(debugEl);return text;}/**
     * @param {?} parent
     * @param {?} newChild
     * @return {?}
     */},{key:'appendChild',value:function appendChild(parent,newChild){var/** @type {?} */debugEl=getDebugNode(parent);var/** @type {?} */debugChildEl=getDebugNode(newChild);if(debugEl&&debugChildEl&&debugEl instanceof DebugElement){debugEl.addChild(debugChildEl);}this.delegate.appendChild(parent,newChild);}/**
     * @param {?} parent
     * @param {?} newChild
     * @param {?} refChild
     * @return {?}
     */},{key:'insertBefore',value:function insertBefore(parent,newChild,refChild){var/** @type {?} */debugEl=getDebugNode(parent);var/** @type {?} */debugChildEl=getDebugNode(newChild);var/** @type {?} */debugRefEl=getDebugNode(refChild);if(debugEl&&debugChildEl&&debugEl instanceof DebugElement){debugEl.insertBefore(debugRefEl,debugChildEl);}this.delegate.insertBefore(parent,newChild,refChild);}/**
     * @param {?} parent
     * @param {?} oldChild
     * @return {?}
     */},{key:'removeChild',value:function removeChild(parent,oldChild){var/** @type {?} */debugEl=getDebugNode(parent);var/** @type {?} */debugChildEl=getDebugNode(oldChild);if(debugEl&&debugChildEl&&debugEl instanceof DebugElement){debugEl.removeChild(debugChildEl);}this.delegate.removeChild(parent,oldChild);}/**
     * @param {?} selectorOrNode
     * @return {?}
     */},{key:'selectRootElement',value:function selectRootElement(selectorOrNode){var/** @type {?} */el=this.delegate.selectRootElement(selectorOrNode);var/** @type {?} */debugEl=new DebugElement(el,null,getCurrentDebugContext());indexDebugNode(debugEl);return el;}/**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @param {?=} namespace
     * @return {?}
     */},{key:'setAttribute',value:function setAttribute(el,name,value,namespace){var/** @type {?} */debugEl=getDebugNode(el);if(debugEl&&debugEl instanceof DebugElement){var/** @type {?} */fullName=namespace?namespace+':'+name:name;debugEl.attributes[fullName]=value;}this.delegate.setAttribute(el,name,value,namespace);}/**
     * @param {?} el
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */},{key:'removeAttribute',value:function removeAttribute(el,name,namespace){var/** @type {?} */debugEl=getDebugNode(el);if(debugEl&&debugEl instanceof DebugElement){var/** @type {?} */fullName=namespace?namespace+':'+name:name;debugEl.attributes[fullName]=null;}this.delegate.removeAttribute(el,name,namespace);}/**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */},{key:'addClass',value:function addClass(el,name){var/** @type {?} */debugEl=getDebugNode(el);if(debugEl&&debugEl instanceof DebugElement){debugEl.classes[name]=true;}this.delegate.addClass(el,name);}/**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */},{key:'removeClass',value:function removeClass(el,name){var/** @type {?} */debugEl=getDebugNode(el);if(debugEl&&debugEl instanceof DebugElement){debugEl.classes[name]=false;}this.delegate.removeClass(el,name);}/**
     * @param {?} el
     * @param {?} style
     * @param {?} value
     * @param {?} hasVendorPrefix
     * @param {?} hasImportant
     * @return {?}
     */},{key:'setStyle',value:function setStyle(el,style,value,hasVendorPrefix,hasImportant){var/** @type {?} */debugEl=getDebugNode(el);if(debugEl&&debugEl instanceof DebugElement){debugEl.styles[style]=value;}this.delegate.setStyle(el,style,value,hasVendorPrefix,hasImportant);}/**
     * @param {?} el
     * @param {?} style
     * @param {?} hasVendorPrefix
     * @return {?}
     */},{key:'removeStyle',value:function removeStyle(el,style,hasVendorPrefix){var/** @type {?} */debugEl=getDebugNode(el);if(debugEl&&debugEl instanceof DebugElement){debugEl.styles[style]=null;}this.delegate.removeStyle(el,style,hasVendorPrefix);}/**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @return {?}
     */},{key:'setProperty',value:function setProperty(el,name,value){var/** @type {?} */debugEl=getDebugNode(el);if(debugEl&&debugEl instanceof DebugElement){debugEl.properties[name]=value;}this.delegate.setProperty(el,name,value);}/**
     * @param {?} target
     * @param {?} eventName
     * @param {?} callback
     * @return {?}
     */},{key:'listen',value:function listen(target,eventName,callback){if(typeof target!=='string'){var/** @type {?} */debugEl=getDebugNode(target);if(debugEl){debugEl.listeners.push(new EventListener(eventName,callback));}}return this.delegate.listen(target,eventName,callback);}/**
     * @param {?} node
     * @return {?}
     */},{key:'parentNode',value:function parentNode(node){return this.delegate.parentNode(node);}/**
     * @param {?} node
     * @return {?}
     */},{key:'nextSibling',value:function nextSibling(node){return this.delegate.nextSibling(node);}/**
     * @param {?} node
     * @param {?} value
     * @return {?}
     */},{key:'setValue',value:function setValue(node,value){return this.delegate.setValue(node,value);}},{key:'data',get:function get(){return this.delegate.data;}}]);return DebugRendererV2;}();/**
 * @return {?}
 */function _iterableDiffersFactory(){return defaultIterableDiffers;}/**
 * @return {?}
 */function _keyValueDiffersFactory(){return defaultKeyValueDiffers;}/**
 * @param {?=} locale
 * @return {?}
 */function _localeFactory(locale){return locale||'en-US';}/**
 * @return {?}
 */function _initViewEngine(){initServicesIfNeeded();}/**
 * This module includes the providers of \@angular/core that are needed
 * to bootstrap components via `ApplicationRef`.
 *
 * \@experimental
 */var ApplicationModule=function ApplicationModule(){_classCallCheck(this,ApplicationModule);};ApplicationModule.decorators=[{type:NgModule,args:[{providers:[ApplicationRef_,{provide:ApplicationRef,useExisting:ApplicationRef_},ApplicationInitStatus,Compiler,APP_ID_RANDOM_PROVIDER,ViewUtils,AnimationQueue,{provide:IterableDiffers,useFactory:_iterableDiffersFactory},{provide:KeyValueDiffers,useFactory:_keyValueDiffersFactory},{provide:LOCALE_ID,useFactory:_localeFactory,deps:[[new Inject(LOCALE_ID),new Optional(),new SkipSelf()]]},{provide:APP_INITIALIZER,useValue:_initViewEngine,multi:true}]}]}];/** @nocollapse */ApplicationModule.ctorParameters=function(){return[];};/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 *//**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */var/** @type {?} */FILL_STYLE_FLAG='true';// TODO (matsko): change to boolean
// TODO (matsko): change to boolean
var/** @type {?} */ANY_STATE='*';var/** @type {?} */DEFAULT_STATE='*';var/** @type {?} */EMPTY_STATE='void';var AnimationGroupPlayer=function(){/**
     * @param {?} _players
     */function AnimationGroupPlayer(_players){var _this31=this;_classCallCheck(this,AnimationGroupPlayer);this._players=_players;this._onDoneFns=[];this._onStartFns=[];this._finished=false;this._started=false;this._destroyed=false;this._onDestroyFns=[];this.parentPlayer=null;var count=0;var total=this._players.length;if(total==0){scheduleMicroTask(function(){return _this31._onFinish();});}else{this._players.forEach(function(player){player.parentPlayer=_this31;player.onDone(function(){if(++count>=total){_this31._onFinish();}});});}}/**
     * @return {?}
     */_createClass(AnimationGroupPlayer,[{key:'_onFinish',value:function _onFinish(){if(!this._finished){this._finished=true;this._onDoneFns.forEach(function(fn){return fn();});this._onDoneFns=[];}}/**
     * @return {?}
     */},{key:'init',value:function init(){this._players.forEach(function(player){return player.init();});}/**
     * @param {?} fn
     * @return {?}
     */},{key:'onStart',value:function onStart(fn){this._onStartFns.push(fn);}/**
     * @param {?} fn
     * @return {?}
     */},{key:'onDone',value:function onDone(fn){this._onDoneFns.push(fn);}/**
     * @param {?} fn
     * @return {?}
     */},{key:'onDestroy',value:function onDestroy(fn){this._onDestroyFns.push(fn);}/**
     * @return {?}
     */},{key:'hasStarted',value:function hasStarted(){return this._started;}/**
     * @return {?}
     */},{key:'play',value:function play(){if(!isPresent(this.parentPlayer)){this.init();}if(!this.hasStarted()){this._onStartFns.forEach(function(fn){return fn();});this._onStartFns=[];this._started=true;}this._players.forEach(function(player){return player.play();});}/**
     * @return {?}
     */},{key:'pause',value:function pause(){this._players.forEach(function(player){return player.pause();});}/**
     * @return {?}
     */},{key:'restart',value:function restart(){this._players.forEach(function(player){return player.restart();});}/**
     * @return {?}
     */},{key:'finish',value:function finish(){this._onFinish();this._players.forEach(function(player){return player.finish();});}/**
     * @return {?}
     */},{key:'destroy',value:function destroy(){if(!this._destroyed){this._onFinish();this._players.forEach(function(player){return player.destroy();});this._destroyed=true;this._onDestroyFns.forEach(function(fn){return fn();});this._onDestroyFns=[];}}/**
     * @return {?}
     */},{key:'reset',value:function reset(){this._players.forEach(function(player){return player.reset();});this._destroyed=false;this._finished=false;this._started=false;}/**
     * @param {?} p
     * @return {?}
     */},{key:'setPosition',value:function setPosition(p){this._players.forEach(function(player){player.setPosition(p);});}/**
     * @return {?}
     */},{key:'getPosition',value:function getPosition(){var/** @type {?} */min=0;this._players.forEach(function(player){var/** @type {?} */p=player.getPosition();min=Math.min(p,min);});return min;}/**
     * @return {?}
     */},{key:'players',get:function get(){return this._players;}}]);return AnimationGroupPlayer;}();/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 *//**
 * `AnimationKeyframe` consists of a series of styles (contained within {\@link AnimationStyles
 * `AnimationStyles`})
 * and an offset value indicating when those styles are applied within the `duration/delay/easing`
 * timings.
 * `AnimationKeyframe` is mostly an internal class which is designed to be used alongside {\@link
 * Renderer#animate-anchor `Renderer.animate`}.
 *
 * \@experimental Animation support is experimental
 */var AnimationKeyframe=/**
     * @param {?} offset
     * @param {?} styles
     */function AnimationKeyframe(offset,styles){_classCallCheck(this,AnimationKeyframe);this.offset=offset;this.styles=styles;};var AnimationSequencePlayer=function(){/**
     * @param {?} _players
     */function AnimationSequencePlayer(_players){var _this32=this;_classCallCheck(this,AnimationSequencePlayer);this._players=_players;this._currentIndex=0;this._onDoneFns=[];this._onStartFns=[];this._onDestroyFns=[];this._finished=false;this._started=false;this._destroyed=false;this.parentPlayer=null;this._players.forEach(function(player){player.parentPlayer=_this32;});this._onNext(false);}/**
     * @param {?} start
     * @return {?}
     */_createClass(AnimationSequencePlayer,[{key:'_onNext',value:function _onNext(start){var _this33=this;if(this._finished)return;if(this._players.length==0){this._activePlayer=new NoOpAnimationPlayer();scheduleMicroTask(function(){return _this33._onFinish();});}else if(this._currentIndex>=this._players.length){this._activePlayer=new NoOpAnimationPlayer();this._onFinish();}else{var/** @type {?} */player=this._players[this._currentIndex++];player.onDone(function(){return _this33._onNext(true);});this._activePlayer=player;if(start){player.play();}}}/**
     * @return {?}
     */},{key:'_onFinish',value:function _onFinish(){if(!this._finished){this._finished=true;this._onDoneFns.forEach(function(fn){return fn();});this._onDoneFns=[];}}/**
     * @return {?}
     */},{key:'init',value:function init(){this._players.forEach(function(player){return player.init();});}/**
     * @param {?} fn
     * @return {?}
     */},{key:'onStart',value:function onStart(fn){this._onStartFns.push(fn);}/**
     * @param {?} fn
     * @return {?}
     */},{key:'onDone',value:function onDone(fn){this._onDoneFns.push(fn);}/**
     * @param {?} fn
     * @return {?}
     */},{key:'onDestroy',value:function onDestroy(fn){this._onDestroyFns.push(fn);}/**
     * @return {?}
     */},{key:'hasStarted',value:function hasStarted(){return this._started;}/**
     * @return {?}
     */},{key:'play',value:function play(){if(!isPresent(this.parentPlayer)){this.init();}if(!this.hasStarted()){this._onStartFns.forEach(function(fn){return fn();});this._onStartFns=[];this._started=true;}this._activePlayer.play();}/**
     * @return {?}
     */},{key:'pause',value:function pause(){this._activePlayer.pause();}/**
     * @return {?}
     */},{key:'restart',value:function restart(){this.reset();if(this._players.length>0){this._players[0].restart();}}/**
     * @return {?}
     */},{key:'reset',value:function reset(){this._players.forEach(function(player){return player.reset();});this._destroyed=false;this._finished=false;this._started=false;}/**
     * @return {?}
     */},{key:'finish',value:function finish(){this._onFinish();this._players.forEach(function(player){return player.finish();});}/**
     * @return {?}
     */},{key:'destroy',value:function destroy(){if(!this._destroyed){this._onFinish();this._players.forEach(function(player){return player.destroy();});this._destroyed=true;this._activePlayer=new NoOpAnimationPlayer();this._onDestroyFns.forEach(function(fn){return fn();});this._onDestroyFns=[];}}/**
     * @param {?} p
     * @return {?}
     */},{key:'setPosition',value:function setPosition(p){this._players[0].setPosition(p);}/**
     * @return {?}
     */},{key:'getPosition',value:function getPosition(){return this._players[0].getPosition();}/**
     * @return {?}
     */},{key:'players',get:function get(){return this._players;}}]);return AnimationSequencePlayer;}();/**
 * @experimental Animation support is experimental.
 */var/** @type {?} */AUTO_STYLE='*';/**
 * @param {?} previousStyles
 * @param {?} newStyles
 * @param {?=} nullValue
 * @return {?}
 */function prepareFinalAnimationStyles(previousStyles,newStyles){var nullValue=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var/** @type {?} */finalStyles={};Object.keys(newStyles).forEach(function(prop){var/** @type {?} */value=newStyles[prop];finalStyles[prop]=value==AUTO_STYLE?nullValue:value.toString();});Object.keys(previousStyles).forEach(function(prop){if(!isPresent(finalStyles[prop])){finalStyles[prop]=nullValue;}});return finalStyles;}/**
 * @param {?} collectedStyles
 * @param {?} finalStateStyles
 * @param {?} keyframes
 * @return {?}
 */function balanceAnimationKeyframes(collectedStyles,finalStateStyles,keyframes){var/** @type {?} */limit=keyframes.length-1;var/** @type {?} */firstKeyframe=keyframes[0];// phase 1: copy all the styles from the first keyframe into the lookup map
var/** @type {?} */flatenedFirstKeyframeStyles=flattenStyles(firstKeyframe.styles.styles);var/** @type {?} */extraFirstKeyframeStyles={};var/** @type {?} */hasExtraFirstStyles=false;Object.keys(collectedStyles).forEach(function(prop){var/** @type {?} */value=collectedStyles[prop];// if the style is already defined in the first keyframe then
// we do not replace it.
if(!flatenedFirstKeyframeStyles[prop]){flatenedFirstKeyframeStyles[prop]=value;extraFirstKeyframeStyles[prop]=value;hasExtraFirstStyles=true;}});var/** @type {?} */keyframeCollectedStyles=StringMapWrapper.merge({},flatenedFirstKeyframeStyles);// phase 2: normalize the final keyframe
var/** @type {?} */finalKeyframe=keyframes[limit];finalKeyframe.styles.styles.unshift(finalStateStyles);var/** @type {?} */flatenedFinalKeyframeStyles=flattenStyles(finalKeyframe.styles.styles);var/** @type {?} */extraFinalKeyframeStyles={};var/** @type {?} */hasExtraFinalStyles=false;Object.keys(keyframeCollectedStyles).forEach(function(prop){if(!isPresent(flatenedFinalKeyframeStyles[prop])){extraFinalKeyframeStyles[prop]=AUTO_STYLE;hasExtraFinalStyles=true;}});if(hasExtraFinalStyles){finalKeyframe.styles.styles.push(extraFinalKeyframeStyles);}Object.keys(flatenedFinalKeyframeStyles).forEach(function(prop){if(!isPresent(flatenedFirstKeyframeStyles[prop])){extraFirstKeyframeStyles[prop]=AUTO_STYLE;hasExtraFirstStyles=true;}});if(hasExtraFirstStyles){firstKeyframe.styles.styles.push(extraFirstKeyframeStyles);}collectAndResolveStyles(collectedStyles,[finalStateStyles]);return keyframes;}/**
 * @param {?} styles
 * @return {?}
 */function clearStyles(styles){var/** @type {?} */finalStyles={};Object.keys(styles).forEach(function(key){finalStyles[key]=null;});return finalStyles;}/**
 * @param {?} collection
 * @param {?} styles
 * @return {?}
 */function collectAndResolveStyles(collection,styles){return styles.map(function(entry){var/** @type {?} */stylesObj={};Object.keys(entry).forEach(function(prop){var/** @type {?} */value=entry[prop];if(value==FILL_STYLE_FLAG){value=collection[prop];if(!isPresent(value)){value=AUTO_STYLE;}}collection[prop]=value;stylesObj[prop]=value;});return stylesObj;});}/**
 * @param {?} element
 * @param {?} renderer
 * @param {?} styles
 * @return {?}
 */function renderStyles(element,renderer,styles){Object.keys(styles).forEach(function(prop){renderer.setElementStyle(element,prop,styles[prop]);});}/**
 * @param {?} styles
 * @return {?}
 */function flattenStyles(styles){var/** @type {?} */finalStyles={};styles.forEach(function(entry){Object.keys(entry).forEach(function(prop){finalStyles[prop]=entry[prop];});});return finalStyles;}/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 *//**
 * `AnimationStyles` consists of a collection of key/value maps containing CSS-based style data
 * that can either be used as initial styling data or apart of a series of keyframes within an
 * animation.
 * This class is mostly internal, and it is designed to be used alongside
 * {\@link AnimationKeyframe `AnimationKeyframe`} and {\@link Renderer#animate-anchor
 * `Renderer.animate`}.
 *
 * \@experimental Animation support is experimental
 */var AnimationStyles=/**
     * @param {?} styles
     */function AnimationStyles(styles){_classCallCheck(this,AnimationStyles);this.styles=styles;};/**
 * An instance of this class is returned as an event parameter when an animation
 * callback is captured for an animation either during the start or done phase.
 *
 * ```typescript
 * \@Component({
 *   host: {
 *     '[\@myAnimationTrigger]': 'someExpression',
 *     '(\@myAnimationTrigger.start)': 'captureStartEvent($event)',
 *     '(\@myAnimationTrigger.done)': 'captureDoneEvent($event)',
 *   },
 *   animations: [
 *     trigger("myAnimationTrigger", [
 *        // ...
 *     ])
 *   ]
 * })
 * class MyComponent {
 *   someExpression: any = false;
 *   captureStartEvent(event: AnimationTransitionEvent) {
 *     // the toState, fromState and totalTime data is accessible from the event variable
 *   }
 *
 *   captureDoneEvent(event: AnimationTransitionEvent) {
 *     // the toState, fromState and totalTime data is accessible from the event variable
 *   }
 * }
 * ```
 *
 * \@experimental Animation support is experimental.
 */var AnimationTransitionEvent=/**
     * @param {?} __0
     */function AnimationTransitionEvent(_ref7){var fromState=_ref7.fromState,toState=_ref7.toState,totalTime=_ref7.totalTime,phaseName=_ref7.phaseName,element=_ref7.element,triggerName=_ref7.triggerName;_classCallCheck(this,AnimationTransitionEvent);this.fromState=fromState;this.toState=toState;this.totalTime=totalTime;this.phaseName=phaseName;this.element=new ElementRef(element);this.triggerName=triggerName;};var AnimationTransition=function(){/**
     * @param {?} _player
     * @param {?} _element
     * @param {?} _triggerName
     * @param {?} _fromState
     * @param {?} _toState
     * @param {?} _totalTime
     */function AnimationTransition(_player,_element,_triggerName,_fromState,_toState,_totalTime){_classCallCheck(this,AnimationTransition);this._player=_player;this._element=_element;this._triggerName=_triggerName;this._fromState=_fromState;this._toState=_toState;this._totalTime=_totalTime;}/**
     * @param {?} phaseName
     * @return {?}
     */_createClass(AnimationTransition,[{key:'_createEvent',value:function _createEvent(phaseName){return new AnimationTransitionEvent({fromState:this._fromState,toState:this._toState,totalTime:this._totalTime,phaseName:phaseName,element:this._element,triggerName:this._triggerName});}/**
     * @param {?} callback
     * @return {?}
     */},{key:'onStart',value:function onStart(callback){var _this34=this;var/** @type {?} */fn=Zone.current.wrap(function(){return callback(_this34._createEvent('start'));},'player.onStart');this._player.onStart(fn);}/**
     * @param {?} callback
     * @return {?}
     */},{key:'onDone',value:function onDone(callback){var _this35=this;var/** @type {?} */fn=Zone.current.wrap(function(){return callback(_this35._createEvent('done'));},'player.onDone');this._player.onDone(fn);}}]);return AnimationTransition;}();var DebugDomRootRenderer=function(){/**
     * @param {?} _delegate
     */function DebugDomRootRenderer(_delegate){_classCallCheck(this,DebugDomRootRenderer);this._delegate=_delegate;throw new Error('RootRenderer is no longer supported. Please use the `RendererFactoryV2` instead!');}/**
     * @param {?} componentProto
     * @return {?}
     */_createClass(DebugDomRootRenderer,[{key:'renderComponent',value:function renderComponent(componentProto){return new DebugDomRenderer(this._delegate.renderComponent(componentProto));}}]);return DebugDomRootRenderer;}();var DebugDomRenderer=function(){/**
     * @param {?} _delegate
     */function DebugDomRenderer(_delegate){_classCallCheck(this,DebugDomRenderer);this._delegate=_delegate;}/**
     * @param {?} selectorOrNode
     * @param {?=} debugInfo
     * @return {?}
     */_createClass(DebugDomRenderer,[{key:'selectRootElement',value:function selectRootElement(selectorOrNode,debugInfo){var/** @type {?} */nativeEl=this._delegate.selectRootElement(selectorOrNode,debugInfo);var/** @type {?} */debugEl=new DebugElement(nativeEl,null,debugInfo);indexDebugNode(debugEl);return nativeEl;}/**
     * @param {?} parentElement
     * @param {?} name
     * @param {?=} debugInfo
     * @return {?}
     */},{key:'createElement',value:function createElement(parentElement,name,debugInfo){var/** @type {?} */nativeEl=this._delegate.createElement(parentElement,name,debugInfo);var/** @type {?} */debugEl=new DebugElement(nativeEl,getDebugNode(parentElement),debugInfo);debugEl.name=name;indexDebugNode(debugEl);return nativeEl;}/**
     * @param {?} hostElement
     * @return {?}
     */},{key:'createViewRoot',value:function createViewRoot(hostElement){return this._delegate.createViewRoot(hostElement);}/**
     * @param {?} parentElement
     * @param {?=} debugInfo
     * @return {?}
     */},{key:'createTemplateAnchor',value:function createTemplateAnchor(parentElement,debugInfo){var/** @type {?} */comment=this._delegate.createTemplateAnchor(parentElement,debugInfo);var/** @type {?} */debugEl=new DebugNode(comment,getDebugNode(parentElement),debugInfo);indexDebugNode(debugEl);return comment;}/**
     * @param {?} parentElement
     * @param {?} value
     * @param {?=} debugInfo
     * @return {?}
     */},{key:'createText',value:function createText(parentElement,value,debugInfo){var/** @type {?} */text=this._delegate.createText(parentElement,value,debugInfo);var/** @type {?} */debugEl=new DebugNode(text,getDebugNode(parentElement),debugInfo);indexDebugNode(debugEl);return text;}/**
     * @param {?} parentElement
     * @param {?} nodes
     * @return {?}
     */},{key:'projectNodes',value:function projectNodes(parentElement,nodes){var/** @type {?} */debugParent=getDebugNode(parentElement);if(isPresent(debugParent)&&debugParent instanceof DebugElement){var/** @type {?} */debugElement=debugParent;nodes.forEach(function(node){debugElement.addChild(getDebugNode(node));});}this._delegate.projectNodes(parentElement,nodes);}/**
     * @param {?} node
     * @param {?} viewRootNodes
     * @return {?}
     */},{key:'attachViewAfter',value:function attachViewAfter(node,viewRootNodes){var/** @type {?} */debugNode=getDebugNode(node);if(isPresent(debugNode)){var/** @type {?} */debugParent=debugNode.parent;if(viewRootNodes.length>0&&isPresent(debugParent)){var/** @type {?} */debugViewRootNodes=[];viewRootNodes.forEach(function(rootNode){return debugViewRootNodes.push(getDebugNode(rootNode));});debugParent.insertChildrenAfter(debugNode,debugViewRootNodes);}}this._delegate.attachViewAfter(node,viewRootNodes);}/**
     * @param {?} viewRootNodes
     * @return {?}
     */},{key:'detachView',value:function detachView(viewRootNodes){viewRootNodes.forEach(function(node){var/** @type {?} */debugNode=getDebugNode(node);if(debugNode&&debugNode.parent){debugNode.parent.removeChild(debugNode);}});this._delegate.detachView(viewRootNodes);}/**
     * @param {?} hostElement
     * @param {?} viewAllNodes
     * @return {?}
     */},{key:'destroyView',value:function destroyView(hostElement,viewAllNodes){viewAllNodes=viewAllNodes||[];viewAllNodes.forEach(function(node){removeDebugNodeFromIndex(getDebugNode(node));});this._delegate.destroyView(hostElement,viewAllNodes);}/**
     * @param {?} renderElement
     * @param {?} name
     * @param {?} callback
     * @return {?}
     */},{key:'listen',value:function listen(renderElement,name,callback){var/** @type {?} */debugEl=getDebugNode(renderElement);if(isPresent(debugEl)){debugEl.listeners.push(new EventListener(name,callback));}return this._delegate.listen(renderElement,name,callback);}/**
     * @param {?} target
     * @param {?} name
     * @param {?} callback
     * @return {?}
     */},{key:'listenGlobal',value:function listenGlobal(target,name,callback){return this._delegate.listenGlobal(target,name,callback);}/**
     * @param {?} renderElement
     * @param {?} propertyName
     * @param {?} propertyValue
     * @return {?}
     */},{key:'setElementProperty',value:function setElementProperty(renderElement,propertyName,propertyValue){var/** @type {?} */debugEl=getDebugNode(renderElement);if(isPresent(debugEl)&&debugEl instanceof DebugElement){debugEl.properties[propertyName]=propertyValue;}this._delegate.setElementProperty(renderElement,propertyName,propertyValue);}/**
     * @param {?} renderElement
     * @param {?} attributeName
     * @param {?} attributeValue
     * @return {?}
     */},{key:'setElementAttribute',value:function setElementAttribute(renderElement,attributeName,attributeValue){var/** @type {?} */debugEl=getDebugNode(renderElement);if(isPresent(debugEl)&&debugEl instanceof DebugElement){debugEl.attributes[attributeName]=attributeValue;}this._delegate.setElementAttribute(renderElement,attributeName,attributeValue);}/**
     * @param {?} renderElement
     * @param {?} propertyName
     * @param {?} propertyValue
     * @return {?}
     */},{key:'setBindingDebugInfo',value:function setBindingDebugInfo(renderElement,propertyName,propertyValue){this._delegate.setBindingDebugInfo(renderElement,propertyName,propertyValue);}/**
     * @param {?} renderElement
     * @param {?} className
     * @param {?} isAdd
     * @return {?}
     */},{key:'setElementClass',value:function setElementClass(renderElement,className,isAdd){var/** @type {?} */debugEl=getDebugNode(renderElement);if(isPresent(debugEl)&&debugEl instanceof DebugElement){debugEl.classes[className]=isAdd;}this._delegate.setElementClass(renderElement,className,isAdd);}/**
     * @param {?} renderElement
     * @param {?} styleName
     * @param {?} styleValue
     * @return {?}
     */},{key:'setElementStyle',value:function setElementStyle(renderElement,styleName,styleValue){var/** @type {?} */debugEl=getDebugNode(renderElement);if(isPresent(debugEl)&&debugEl instanceof DebugElement){debugEl.styles[styleName]=styleValue;}this._delegate.setElementStyle(renderElement,styleName,styleValue);}/**
     * @param {?} renderElement
     * @param {?} methodName
     * @param {?=} args
     * @return {?}
     */},{key:'invokeElementMethod',value:function invokeElementMethod(renderElement,methodName,args){this._delegate.invokeElementMethod(renderElement,methodName,args);}/**
     * @param {?} renderNode
     * @param {?} text
     * @return {?}
     */},{key:'setText',value:function setText(renderNode,text){this._delegate.setText(renderNode,text);}/**
     * @param {?} element
     * @param {?} startingStyles
     * @param {?} keyframes
     * @param {?} duration
     * @param {?} delay
     * @param {?} easing
     * @param {?=} previousPlayers
     * @return {?}
     */},{key:'animate',value:function animate(element,startingStyles,keyframes,duration,delay,easing){var previousPlayers=arguments.length>6&&arguments[6]!==undefined?arguments[6]:[];return this._delegate.animate(element,startingStyles,keyframes,duration,delay,easing,previousPlayers);}}]);return DebugDomRenderer;}();var ViewType={};ViewType.HOST=0;ViewType.COMPONENT=1;ViewType.EMBEDDED=2;ViewType[ViewType.HOST]="HOST";ViewType[ViewType.COMPONENT]="COMPONENT";ViewType[ViewType.EMBEDDED]="EMBEDDED";var StaticNodeDebugInfo=/**
     * @param {?} providerTokens
     * @param {?} componentToken
     * @param {?} refTokens
     */function StaticNodeDebugInfo(providerTokens,componentToken,refTokens){_classCallCheck(this,StaticNodeDebugInfo);this.providerTokens=providerTokens;this.componentToken=componentToken;this.refTokens=refTokens;};var DebugContext$1=function(){/**
     * @param {?} _view
     * @param {?} _nodeIndex
     * @param {?} _tplRow
     * @param {?} _tplCol
     */function DebugContext$1(_view,_nodeIndex,_tplRow,_tplCol){_classCallCheck(this,DebugContext$1);this._view=_view;this._nodeIndex=_nodeIndex;this._tplRow=_tplRow;this._tplCol=_tplCol;}/**
     * @return {?}
     */_createClass(DebugContext$1,[{key:'_staticNodeInfo',get:function get(){return isPresent(this._nodeIndex)?this._view.staticNodeDebugInfos[this._nodeIndex]:null;}/**
     * @return {?}
     */},{key:'context',get:function get(){return this._view.context;}/**
     * @return {?}
     */},{key:'component',get:function get(){var/** @type {?} */staticNodeInfo=this._staticNodeInfo;if(isPresent(staticNodeInfo)&&isPresent(staticNodeInfo.componentToken)){return this.injector.get(staticNodeInfo.componentToken);}return null;}/**
     * @return {?}
     */},{key:'componentRenderElement',get:function get(){var/** @type {?} */componentView=this._view;while(isPresent(componentView.parentView)&&componentView.type!==ViewType.COMPONENT){componentView=componentView.parentView;}return componentView.parentElement;}/**
     * @return {?}
     */},{key:'injector',get:function get(){return this._view.injector(this._nodeIndex);}/**
     * @return {?}
     */},{key:'renderNode',get:function get(){if(isPresent(this._nodeIndex)&&this._view.allNodes){return this._view.allNodes[this._nodeIndex];}else{return null;}}/**
     * @return {?}
     */},{key:'providerTokens',get:function get(){var/** @type {?} */staticNodeInfo=this._staticNodeInfo;return isPresent(staticNodeInfo)?staticNodeInfo.providerTokens:null;}/**
     * @return {?}
     */},{key:'source',get:function get(){return this._view.componentType.templateUrl+':'+this._tplRow+':'+this._tplCol;}/**
     * @return {?}
     */},{key:'references',get:function get(){var _this36=this;var/** @type {?} */varValues={};var/** @type {?} */staticNodeInfo=this._staticNodeInfo;if(isPresent(staticNodeInfo)){var/** @type {?} */refs=staticNodeInfo.refTokens;Object.keys(refs).forEach(function(refName){var/** @type {?} */refToken=refs[refName];var/** @type {?} */varValue=void 0;if(isBlank(refToken)){varValue=_this36._view.allNodes?_this36._view.allNodes[_this36._nodeIndex]:null;}else{varValue=_this36._view.injectorGet(refToken,_this36._nodeIndex,null);}varValues[refName]=varValue;});}return varValues;}}]);return DebugContext$1;}();var ViewAnimationMap=function(){function ViewAnimationMap(){_classCallCheck(this,ViewAnimationMap);this._map=new Map();this._allPlayers=[];}/**
     * @param {?} element
     * @param {?} animationName
     * @return {?}
     */_createClass(ViewAnimationMap,[{key:'find',value:function find(element,animationName){var/** @type {?} */playersByAnimation=this._map.get(element);if(isPresent(playersByAnimation)){return playersByAnimation[animationName];}}/**
     * @param {?} element
     * @return {?}
     */},{key:'findAllPlayersByElement',value:function findAllPlayersByElement(element){var/** @type {?} */el=this._map.get(element);return el?Object.keys(el).map(function(k){return el[k];}):[];}/**
     * @param {?} element
     * @param {?} animationName
     * @param {?} player
     * @return {?}
     */},{key:'set',value:function set(element,animationName,player){var/** @type {?} */playersByAnimation=this._map.get(element);if(!isPresent(playersByAnimation)){playersByAnimation={};}var/** @type {?} */existingEntry=playersByAnimation[animationName];if(isPresent(existingEntry)){this.remove(element,animationName);}playersByAnimation[animationName]=player;this._allPlayers.push(player);this._map.set(element,playersByAnimation);}/**
     * @return {?}
     */},{key:'getAllPlayers',value:function getAllPlayers(){return this._allPlayers;}/**
     * @param {?} element
     * @param {?} animationName
     * @param {?=} targetPlayer
     * @return {?}
     */},{key:'remove',value:function remove(element,animationName){var targetPlayer=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var/** @type {?} */playersByAnimation=this._map.get(element);if(playersByAnimation){var/** @type {?} */player=playersByAnimation[animationName];if(!targetPlayer||player===targetPlayer){delete playersByAnimation[animationName];var/** @type {?} */index=this._allPlayers.indexOf(player);this._allPlayers.splice(index,1);if(Object.keys(playersByAnimation).length===0){this._map.delete(element);}}}}}]);return ViewAnimationMap;}();var AnimationViewContext=function(){/**
     * @param {?} _animationQueue
     */function AnimationViewContext(_animationQueue){_classCallCheck(this,AnimationViewContext);this._animationQueue=_animationQueue;this._players=new ViewAnimationMap();}/**
     * @param {?} callback
     * @return {?}
     */_createClass(AnimationViewContext,[{key:'onAllActiveAnimationsDone',value:function onAllActiveAnimationsDone(callback){var/** @type {?} */activeAnimationPlayers=this._players.getAllPlayers();// we check for the length to avoid having GroupAnimationPlayer
// issue an unnecessary microtask when zero players are passed in
if(activeAnimationPlayers.length){new AnimationGroupPlayer(activeAnimationPlayers).onDone(function(){return callback();});}else{callback();}}/**
     * @param {?} element
     * @param {?} animationName
     * @param {?} player
     * @return {?}
     */},{key:'queueAnimation',value:function queueAnimation(element,animationName,player){var _this37=this;this._animationQueue.enqueue(player);this._players.set(element,animationName,player);player.onDone(function(){return _this37._players.remove(element,animationName,player);});}/**
     * @param {?} element
     * @param {?=} animationName
     * @return {?}
     */},{key:'getAnimationPlayers',value:function getAnimationPlayers(element){var animationName=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var/** @type {?} */players=[];if(animationName){var/** @type {?} */currentPlayer=this._players.find(element,animationName);if(currentPlayer){_recursePlayers(currentPlayer,players);}}else{this._players.findAllPlayersByElement(element).forEach(function(player){return _recursePlayers(player,players);});}return players;}}]);return AnimationViewContext;}();/**
 * @param {?} player
 * @param {?} collectedPlayers
 * @return {?}
 */function _recursePlayers(player,collectedPlayers){if(player instanceof AnimationGroupPlayer||player instanceof AnimationSequencePlayer){player.players.forEach(function(player){return _recursePlayers(player,collectedPlayers);});}else{collectedPlayers.push(player);}}var ElementInjector=function(_Injector){_inherits(ElementInjector,_Injector);/**
     * @param {?} _view
     * @param {?} _nodeIndex
     */function ElementInjector(_view,_nodeIndex){_classCallCheck(this,ElementInjector);var _this38=_possibleConstructorReturn(this,(ElementInjector.__proto__||Object.getPrototypeOf(ElementInjector)).call(this));_this38._view=_view;_this38._nodeIndex=_nodeIndex;return _this38;}/**
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */_createClass(ElementInjector,[{key:'get',value:function get(token){var notFoundValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:THROW_IF_NOT_FOUND;return this._view.injectorGet(token,this._nodeIndex,notFoundValue);}}]);return ElementInjector;}(Injector);var/** @type {?} */_scope_check=wtfCreateScope('AppView#check(ascii id)');/**
 * @experimental
 */var/** @type {?} */EMPTY_CONTEXT$1=new Object();var/** @type {?} */UNDEFINED$1=new Object();/**
 * Cost of making objects: http://jsperf.com/instantiate-size-of-object
 *
 * @abstract
 */var AppView=function(){/**
     * @param {?} clazz
     * @param {?} componentType
     * @param {?} type
     * @param {?} viewUtils
     * @param {?} parentView
     * @param {?} parentIndex
     * @param {?} parentElement
     * @param {?} cdMode
     * @param {?=} declaredViewContainer
     */function AppView(clazz,componentType,type,viewUtils,parentView,parentIndex,parentElement,cdMode){var declaredViewContainer=arguments.length>8&&arguments[8]!==undefined?arguments[8]:null;_classCallCheck(this,AppView);this.clazz=clazz;this.componentType=componentType;this.type=type;this.viewUtils=viewUtils;this.parentView=parentView;this.parentIndex=parentIndex;this.parentElement=parentElement;this.cdMode=cdMode;this.declaredViewContainer=declaredViewContainer;this.numberOfChecks=0;this.throwOnChange=false;this.ref=new ViewRef_(this,viewUtils.animationQueue);if(type===ViewType.COMPONENT||type===ViewType.HOST){this.renderer=viewUtils.renderComponent(componentType);}else{this.renderer=parentView.renderer;}this._directRenderer=this.renderer.directRenderer;}/**
     * @return {?}
     */_createClass(AppView,[{key:'create',/**
     * @param {?} context
     * @return {?}
     */value:function create(context){this.context=context;return this.createInternal(null);}/**
     * @param {?} rootSelectorOrNode
     * @param {?} hostInjector
     * @param {?} projectableNodes
     * @return {?}
     */},{key:'createHostView',value:function createHostView(rootSelectorOrNode,hostInjector,projectableNodes){this.context=EMPTY_CONTEXT$1;this._hasExternalHostElement=isPresent(rootSelectorOrNode);this._hostInjector=hostInjector;this._hostProjectableNodes=projectableNodes;return this.createInternal(rootSelectorOrNode);}/**
     * Overwritten by implementations.
     * Returns the ComponentRef for the host element for ViewType.HOST.
     * @param {?} rootSelectorOrNode
     * @return {?}
     */},{key:'createInternal',value:function createInternal(rootSelectorOrNode){return null;}/**
     * Overwritten by implementations.
     * @param {?} templateNodeIndex
     * @return {?}
     */},{key:'createEmbeddedViewInternal',value:function createEmbeddedViewInternal(templateNodeIndex){return null;}/**
     * @param {?} lastRootNode
     * @param {?} allNodes
     * @param {?} disposables
     * @return {?}
     */},{key:'init',value:function init(lastRootNode,allNodes,disposables){this.lastRootNode=lastRootNode;this.allNodes=allNodes;this.disposables=disposables;if(this.type===ViewType.COMPONENT){this.dirtyParentQueriesInternal();}}/**
     * @param {?} token
     * @param {?} nodeIndex
     * @param {?=} notFoundValue
     * @return {?}
     */},{key:'injectorGet',value:function injectorGet(token,nodeIndex){var notFoundValue=arguments.length>2&&arguments[2]!==undefined?arguments[2]:THROW_IF_NOT_FOUND;var/** @type {?} */result=UNDEFINED$1;var/** @type {?} */view=this;while(result===UNDEFINED$1){if(isPresent(nodeIndex)){result=view.injectorGetInternal(token,nodeIndex,UNDEFINED$1);}if(result===UNDEFINED$1&&view.type===ViewType.HOST){result=view._hostInjector.get(token,notFoundValue);}nodeIndex=view.parentIndex;view=view.parentView;}return result;}/**
     * Overwritten by implementations
     * @param {?} token
     * @param {?} nodeIndex
     * @param {?} notFoundResult
     * @return {?}
     */},{key:'injectorGetInternal',value:function injectorGetInternal(token,nodeIndex,notFoundResult){return notFoundResult;}/**
     * @param {?} nodeIndex
     * @return {?}
     */},{key:'injector',value:function injector(nodeIndex){return new ElementInjector(this,nodeIndex);}/**
     * @return {?}
     */},{key:'detachAndDestroy',value:function detachAndDestroy(){if(this.viewContainer){this.viewContainer.detachView(this.viewContainer.nestedViews.indexOf(this));}else if(this.appRef){this.appRef.detachView(this.ref);}else if(this._hasExternalHostElement){this.detach();}this.destroy();}/**
     * @return {?}
     */},{key:'destroy',value:function destroy(){var _this39=this;if(this.cdMode===ChangeDetectorStatus.Destroyed){return;}var/** @type {?} */hostElement=this.type===ViewType.COMPONENT?this.parentElement:null;if(this.disposables){for(var/** @type {?} */i=0;i<this.disposables.length;i++){this.disposables[i]();}}this.destroyInternal();this.dirtyParentQueriesInternal();if(this._animationContext){this._animationContext.onAllActiveAnimationsDone(function(){return _this39.renderer.destroyView(hostElement,_this39.allNodes);});}else{this.renderer.destroyView(hostElement,this.allNodes);}this.cdMode=ChangeDetectorStatus.Destroyed;}/**
     * Overwritten by implementations
     * @return {?}
     */},{key:'destroyInternal',value:function destroyInternal(){}/**
     * Overwritten by implementations
     * @return {?}
     */},{key:'detachInternal',value:function detachInternal(){}/**
     * @return {?}
     */},{key:'detach',value:function detach(){var _this40=this;this.detachInternal();if(this._animationContext){this._animationContext.onAllActiveAnimationsDone(function(){return _this40._renderDetach();});}else{this._renderDetach();}if(this.declaredViewContainer&&this.declaredViewContainer!==this.viewContainer&&this.declaredViewContainer.projectedViews){var/** @type {?} */projectedViews=this.declaredViewContainer.projectedViews;var/** @type {?} */index=projectedViews.indexOf(this);// perf: pop is faster than splice!
if(index>=projectedViews.length-1){projectedViews.pop();}else{projectedViews.splice(index,1);}}this.appRef=null;this.viewContainer=null;this.dirtyParentQueriesInternal();}/**
     * @return {?}
     */},{key:'_renderDetach',value:function _renderDetach(){if(this._directRenderer){this.visitRootNodesInternal(this._directRenderer.remove,null);}else{this.renderer.detachView(this.flatRootNodes);}}/**
     * @param {?} appRef
     * @return {?}
     */},{key:'attachToAppRef',value:function attachToAppRef(appRef){if(this.viewContainer){throw new Error('This view is already attached to a ViewContainer!');}this.appRef=appRef;this.dirtyParentQueriesInternal();}/**
     * @param {?} viewContainer
     * @param {?} prevView
     * @return {?}
     */},{key:'attachAfter',value:function attachAfter(viewContainer,prevView){if(this.appRef){throw new Error('This view is already attached directly to the ApplicationRef!');}this._renderAttach(viewContainer,prevView);this.viewContainer=viewContainer;if(this.declaredViewContainer&&this.declaredViewContainer!==viewContainer){if(!this.declaredViewContainer.projectedViews){this.declaredViewContainer.projectedViews=[];}this.declaredViewContainer.projectedViews.push(this);}this.dirtyParentQueriesInternal();}/**
     * @param {?} viewContainer
     * @param {?} prevView
     * @return {?}
     */},{key:'moveAfter',value:function moveAfter(viewContainer,prevView){this._renderAttach(viewContainer,prevView);this.dirtyParentQueriesInternal();}/**
     * @param {?} viewContainer
     * @param {?} prevView
     * @return {?}
     */},{key:'_renderAttach',value:function _renderAttach(viewContainer,prevView){var/** @type {?} */prevNode=prevView?prevView.lastRootNode:viewContainer.nativeElement;if(this._directRenderer){var/** @type {?} */nextSibling=this._directRenderer.nextSibling(prevNode);if(nextSibling){this.visitRootNodesInternal(this._directRenderer.insertBefore,nextSibling);}else{var/** @type {?} */parentElement=this._directRenderer.parentElement(prevNode);if(parentElement){this.visitRootNodesInternal(this._directRenderer.appendChild,parentElement);}}}else{this.renderer.attachViewAfter(prevNode,this.flatRootNodes);}}/**
     * @return {?}
     */},{key:'projectNodes',/**
     * @param {?} parentElement
     * @param {?} ngContentIndex
     * @return {?}
     */value:function projectNodes(parentElement,ngContentIndex){if(this._directRenderer){this.visitProjectedNodes(ngContentIndex,this._directRenderer.appendChild,parentElement);}else{var/** @type {?} */nodes=[];this.visitProjectedNodes(ngContentIndex,addToArray,nodes);this.renderer.projectNodes(parentElement,nodes);}}/**
     * @param {?} ngContentIndex
     * @param {?} cb
     * @param {?} c
     * @return {?}
     */},{key:'visitProjectedNodes',value:function visitProjectedNodes(ngContentIndex,cb,c){switch(this.type){case ViewType.EMBEDDED:this.parentView.visitProjectedNodes(ngContentIndex,cb,c);break;case ViewType.COMPONENT:if(this.parentView.type===ViewType.HOST){var/** @type {?} */nodes=this.parentView._hostProjectableNodes[ngContentIndex]||[];for(var/** @type {?} */i=0;i<nodes.length;i++){cb(nodes[i],c);}}else{this.parentView.visitProjectableNodesInternal(this.parentIndex,ngContentIndex,cb,c);}break;}}/**
     * Overwritten by implementations
     * @param {?} cb
     * @param {?} c
     * @return {?}
     */},{key:'visitRootNodesInternal',value:function visitRootNodesInternal(cb,c){}/**
     * Overwritten by implementations
     * @param {?} nodeIndex
     * @param {?} ngContentIndex
     * @param {?} cb
     * @param {?} c
     * @return {?}
     */},{key:'visitProjectableNodesInternal',value:function visitProjectableNodesInternal(nodeIndex,ngContentIndex,cb,c){}/**
     * Overwritten by implementations
     * @return {?}
     */},{key:'dirtyParentQueriesInternal',value:function dirtyParentQueriesInternal(){}/**
     * @param {?} throwOnChange
     * @return {?}
     */},{key:'internalDetectChanges',value:function internalDetectChanges(throwOnChange){if(this.cdMode!==ChangeDetectorStatus.Detached){this.detectChanges(throwOnChange);}}/**
     * @param {?} throwOnChange
     * @return {?}
     */},{key:'detectChanges',value:function detectChanges(throwOnChange){var/** @type {?} */s=_scope_check(this.clazz);if(this.cdMode===ChangeDetectorStatus.Checked||this.cdMode===ChangeDetectorStatus.Errored)return;if(this.cdMode===ChangeDetectorStatus.Destroyed){this.throwDestroyedError('detectChanges');}this.throwOnChange=throwOnChange;this.detectChangesInternal();if(this.cdMode===ChangeDetectorStatus.CheckOnce)this.cdMode=ChangeDetectorStatus.Checked;this.numberOfChecks++;wtfLeave(s);}/**
     * Overwritten by implementations
     * @return {?}
     */},{key:'detectChangesInternal',value:function detectChangesInternal(){}/**
     * @return {?}
     */},{key:'markAsCheckOnce',value:function markAsCheckOnce(){this.cdMode=ChangeDetectorStatus.CheckOnce;}/**
     * @return {?}
     */},{key:'markPathToRootAsCheckOnce',value:function markPathToRootAsCheckOnce(){var/** @type {?} */c=this;while(isPresent(c)&&c.cdMode!==ChangeDetectorStatus.Detached){if(c.cdMode===ChangeDetectorStatus.Checked){c.cdMode=ChangeDetectorStatus.CheckOnce;}if(c.type===ViewType.COMPONENT){c=c.parentView;}else{c=c.viewContainer?c.viewContainer.parentView:null;}}}/**
     * @param {?} cb
     * @return {?}
     */},{key:'eventHandler',value:function eventHandler(cb){return cb;}/**
     * @param {?} details
     * @return {?}
     */},{key:'throwDestroyedError',value:function throwDestroyedError(details){throw viewDestroyedError(details);}},{key:'animationContext',get:function get(){if(!this._animationContext){this._animationContext=new AnimationViewContext(this.viewUtils.animationQueue);}return this._animationContext;}/**
     * @return {?}
     */},{key:'destroyed',get:function get(){return this.cdMode===ChangeDetectorStatus.Destroyed;}},{key:'changeDetectorRef',get:function get(){return this.ref;}/**
     * @return {?}
     */},{key:'flatRootNodes',get:function get(){var/** @type {?} */nodes=[];this.visitRootNodesInternal(addToArray,nodes);return nodes;}}]);return AppView;}();var DebugAppView=function(_AppView){_inherits(DebugAppView,_AppView);/**
     * @param {?} clazz
     * @param {?} componentType
     * @param {?} type
     * @param {?} viewUtils
     * @param {?} parentView
     * @param {?} parentIndex
     * @param {?} parentNode
     * @param {?} cdMode
     * @param {?} staticNodeDebugInfos
     * @param {?=} declaredViewContainer
     */function DebugAppView(clazz,componentType,type,viewUtils,parentView,parentIndex,parentNode,cdMode,staticNodeDebugInfos){var declaredViewContainer=arguments.length>9&&arguments[9]!==undefined?arguments[9]:null;_classCallCheck(this,DebugAppView);var _this41=_possibleConstructorReturn(this,(DebugAppView.__proto__||Object.getPrototypeOf(DebugAppView)).call(this,clazz,componentType,type,viewUtils,parentView,parentIndex,parentNode,cdMode,declaredViewContainer));_this41.staticNodeDebugInfos=staticNodeDebugInfos;_this41._currentDebugContext=null;return _this41;}/**
     * @param {?} context
     * @return {?}
     */_createClass(DebugAppView,[{key:'create',value:function create(context){this._resetDebug();try{return _get(DebugAppView.prototype.__proto__||Object.getPrototypeOf(DebugAppView.prototype),'create',this).call(this,context);}catch(e){this._rethrowWithContext(e);throw e;}}/**
     * @param {?} rootSelectorOrNode
     * @param {?} injector
     * @param {?=} projectableNodes
     * @return {?}
     */},{key:'createHostView',value:function createHostView(rootSelectorOrNode,injector){var projectableNodes=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;this._resetDebug();try{return _get(DebugAppView.prototype.__proto__||Object.getPrototypeOf(DebugAppView.prototype),'createHostView',this).call(this,rootSelectorOrNode,injector,projectableNodes);}catch(e){this._rethrowWithContext(e);throw e;}}/**
     * @param {?} token
     * @param {?} nodeIndex
     * @param {?=} notFoundResult
     * @return {?}
     */},{key:'injectorGet',value:function injectorGet(token,nodeIndex,notFoundResult){this._resetDebug();try{return _get(DebugAppView.prototype.__proto__||Object.getPrototypeOf(DebugAppView.prototype),'injectorGet',this).call(this,token,nodeIndex,notFoundResult);}catch(e){this._rethrowWithContext(e);throw e;}}/**
     * @return {?}
     */},{key:'detach',value:function detach(){this._resetDebug();try{_get(DebugAppView.prototype.__proto__||Object.getPrototypeOf(DebugAppView.prototype),'detach',this).call(this);}catch(e){this._rethrowWithContext(e);throw e;}}/**
     * @return {?}
     */},{key:'destroy',value:function destroy(){this._resetDebug();try{_get(DebugAppView.prototype.__proto__||Object.getPrototypeOf(DebugAppView.prototype),'destroy',this).call(this);}catch(e){this._rethrowWithContext(e);throw e;}}/**
     * @param {?} throwOnChange
     * @return {?}
     */},{key:'detectChanges',value:function detectChanges(throwOnChange){this._resetDebug();try{_get(DebugAppView.prototype.__proto__||Object.getPrototypeOf(DebugAppView.prototype),'detectChanges',this).call(this,throwOnChange);}catch(e){this._rethrowWithContext(e);throw e;}}/**
     * @return {?}
     */},{key:'_resetDebug',value:function _resetDebug(){this._currentDebugContext=null;}/**
     * @param {?} nodeIndex
     * @param {?} rowNum
     * @param {?} colNum
     * @return {?}
     */},{key:'debug',value:function debug(nodeIndex,rowNum,colNum){return this._currentDebugContext=new DebugContext$1(this,nodeIndex,rowNum,colNum);}/**
     * @param {?} e
     * @return {?}
     */},{key:'_rethrowWithContext',value:function _rethrowWithContext(e){if(!(getType(e)==viewWrappedError)){if(!(getType(e)==expressionChangedAfterItHasBeenCheckedError)){this.cdMode=ChangeDetectorStatus.Errored;}if(isPresent(this._currentDebugContext)){throw viewWrappedError(e,this._currentDebugContext);}}}/**
     * @param {?} cb
     * @return {?}
     */},{key:'eventHandler',value:function eventHandler(cb){var _this42=this;var/** @type {?} */superHandler=_get(DebugAppView.prototype.__proto__||Object.getPrototypeOf(DebugAppView.prototype),'eventHandler',this).call(this,cb);return function(eventName,event){_this42._resetDebug();try{return superHandler.call(_this42,eventName,event);}catch(e){_this42._rethrowWithContext(e);throw e;}};}}]);return DebugAppView;}(AppView);/**
 * A ViewContainer is created for elements that have a ViewContainerRef
 * to keep track of the nested views.
 */var ViewContainer=function(){/**
     * @param {?} index
     * @param {?} parentIndex
     * @param {?} parentView
     * @param {?} nativeElement
     */function ViewContainer(index,parentIndex,parentView,nativeElement){_classCallCheck(this,ViewContainer);this.index=index;this.parentIndex=parentIndex;this.parentView=parentView;this.nativeElement=nativeElement;}/**
     * @return {?}
     */_createClass(ViewContainer,[{key:'detectChangesInNestedViews',/**
     * @param {?} throwOnChange
     * @return {?}
     */value:function detectChangesInNestedViews(throwOnChange){if(this.nestedViews){for(var/** @type {?} */i=0;i<this.nestedViews.length;i++){this.nestedViews[i].detectChanges(throwOnChange);}}}/**
     * @return {?}
     */},{key:'destroyNestedViews',value:function destroyNestedViews(){if(this.nestedViews){for(var/** @type {?} */i=0;i<this.nestedViews.length;i++){this.nestedViews[i].destroy();}}}/**
     * @param {?} cb
     * @param {?} c
     * @return {?}
     */},{key:'visitNestedViewRootNodes',value:function visitNestedViewRootNodes(cb,c){if(this.nestedViews){for(var/** @type {?} */i=0;i<this.nestedViews.length;i++){this.nestedViews[i].visitRootNodesInternal(cb,c);}}}/**
     * @param {?} nestedViewClass
     * @param {?} callback
     * @return {?}
     */},{key:'mapNestedViews',value:function mapNestedViews(nestedViewClass,callback){var/** @type {?} */result=[];if(this.nestedViews){for(var/** @type {?} */i=0;i<this.nestedViews.length;i++){var/** @type {?} */nestedView=this.nestedViews[i];if(nestedView.clazz===nestedViewClass){result.push(callback(nestedView));}}}if(this.projectedViews){for(var/** @type {?} */_i6=0;_i6<this.projectedViews.length;_i6++){var/** @type {?} */projectedView=this.projectedViews[_i6];if(projectedView.clazz===nestedViewClass){result.push(callback(projectedView));}}}return result;}/**
     * @param {?} view
     * @param {?} toIndex
     * @return {?}
     */},{key:'moveView',value:function moveView(view,toIndex){var/** @type {?} */fromIndex=this.nestedViews.indexOf(view);if(view.type===ViewType.COMPONENT){throw new Error('Component views can\'t be moved!');}var/** @type {?} */nestedViews=this.nestedViews;if(nestedViews==null){nestedViews=[];this.nestedViews=nestedViews;}nestedViews.splice(fromIndex,1);nestedViews.splice(toIndex,0,view);var/** @type {?} */prevView=toIndex>0?nestedViews[toIndex-1]:null;view.moveAfter(this,prevView);}/**
     * @param {?} view
     * @param {?} viewIndex
     * @return {?}
     */},{key:'attachView',value:function attachView(view,viewIndex){if(view.type===ViewType.COMPONENT){throw new Error('Component views can\'t be moved!');}var/** @type {?} */nestedViews=this.nestedViews;if(nestedViews==null){nestedViews=[];this.nestedViews=nestedViews;}// perf: array.push is faster than array.splice!
if(viewIndex>=nestedViews.length){nestedViews.push(view);}else{nestedViews.splice(viewIndex,0,view);}var/** @type {?} */prevView=viewIndex>0?nestedViews[viewIndex-1]:null;view.attachAfter(this,prevView);}/**
     * @param {?} viewIndex
     * @return {?}
     */},{key:'detachView',value:function detachView(viewIndex){var/** @type {?} */view=this.nestedViews[viewIndex];// perf: array.pop is faster than array.splice!
if(viewIndex>=this.nestedViews.length-1){this.nestedViews.pop();}else{this.nestedViews.splice(viewIndex,1);}if(view.type===ViewType.COMPONENT){throw new Error('Component views can\'t be moved!');}view.detach();return view;}},{key:'elementRef',get:function get(){return new ElementRef(this.nativeElement);}/**
     * @return {?}
     */},{key:'vcRef',get:function get(){return new ViewContainerRef_(this);}/**
     * @return {?}
     */},{key:'parentInjector',get:function get(){return this.parentView.injector(this.parentIndex);}/**
     * @return {?}
     */},{key:'injector',get:function get(){return this.parentView.injector(this.index);}}]);return ViewContainer;}();/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */var LifecycleHooks={};LifecycleHooks.OnInit=0;LifecycleHooks.OnDestroy=1;LifecycleHooks.DoCheck=2;LifecycleHooks.OnChanges=3;LifecycleHooks.AfterContentInit=4;LifecycleHooks.AfterContentChecked=5;LifecycleHooks.AfterViewInit=6;LifecycleHooks.AfterViewChecked=7;LifecycleHooks[LifecycleHooks.OnInit]="OnInit";LifecycleHooks[LifecycleHooks.OnDestroy]="OnDestroy";LifecycleHooks[LifecycleHooks.DoCheck]="DoCheck";LifecycleHooks[LifecycleHooks.OnChanges]="OnChanges";LifecycleHooks[LifecycleHooks.AfterContentInit]="AfterContentInit";LifecycleHooks[LifecycleHooks.AfterContentChecked]="AfterContentChecked";LifecycleHooks[LifecycleHooks.AfterViewInit]="AfterViewInit";LifecycleHooks[LifecycleHooks.AfterViewChecked]="AfterViewChecked";var/** @type {?} */LIFECYCLE_HOOKS_VALUES=[LifecycleHooks.OnInit,LifecycleHooks.OnDestroy,LifecycleHooks.DoCheck,LifecycleHooks.OnChanges,LifecycleHooks.AfterContentInit,LifecycleHooks.AfterContentChecked,LifecycleHooks.AfterViewInit,LifecycleHooks.AfterViewChecked];/**
 * `trigger` is an animation-specific function that is designed to be used inside of Angular2's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations-anchor component animations metadata page} to gain a better understanding of
 * how animations in Angular2 are used.
 *
 * `trigger` Creates an animation trigger which will a list of {\@link state state} and {\@link
 * transition transition} entries that will be evaluated when the expression bound to the trigger
 * changes.
 *
 * Triggers are registered within the component annotation data under the {\@link
 * Component#animations-anchor animations section}. An animation trigger can be placed on an element
 * within a template by referencing the name of the trigger followed by the expression value that the
 * trigger is bound to (in the form of `[\@triggerName]="expression"`.
 *
 * ### Usage
 *
 * `trigger` will create an animation trigger reference based on the provided `name` value. The
 * provided `animation` value is expected to be an array consisting of {\@link state state} and {\@link
 * transition transition} declarations.
 *
 * ```typescript
 * \@Component({
 *   selector: 'my-component',
 *   templateUrl: 'my-component-tpl.html',
 *   animations: [
 *     trigger("myAnimationTrigger", [
 *       state(...),
 *       state(...),
 *       transition(...),
 *       transition(...)
 *     ])
 *   ]
 * })
 * class MyComponent {
 *   myStatusExp = "something";
 * }
 * ```
 *
 * The template associated with this component will make use of the `myAnimationTrigger` animation
 * trigger by binding to an element within its template code.
 *
 * ```html
 * <!-- somewhere inside of my-component-tpl.html -->
 * <div [\@myAnimationTrigger]="myStatusExp">...</div>
 * tools/gulp-tasks/validate-commit-message.js ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} name
 * @param {?} definitions
 * @return {?}
 */function trigger$2(name,definitions){return{name:name,definitions:definitions};}/**
 * `animate` is an animation-specific function that is designed to be used inside of Angular2's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations-anchor component animations metadata page} to gain a better understanding of
 * how animations in Angular2 are used.
 *
 * `animate` specifies an animation step that will apply the provided `styles` data for a given
 * amount of time based on the provided `timing` expression value. Calls to `animate` are expected
 * to be used within {\@link sequence an animation sequence}, {\@link group group}, or {\@link
 * transition transition}.
 *
 * ### Usage
 *
 * The `animate` function accepts two input parameters: `timing` and `styles`:
 *
 * - `timing` is a string based value that can be a combination of a duration with optional delay
 * and easing values. The format for the expression breaks down to `duration delay easing`
 * (therefore a value such as `1s 100ms ease-out` will be parse itself into `duration=1000,
 * delay=100, easing=ease-out`. If a numeric value is provided then that will be used as the
 * `duration` value in millisecond form.
 * - `styles` is the style input data which can either be a call to {\@link style style} or {\@link
 * keyframes keyframes}. If left empty then the styles from the destination state will be collected
 * and used (this is useful when describing an animation step that will complete an animation by
 * {\@link transition#the-final-animate-call animating to the final state}).
 *
 * ```typescript
 * // various functions for specifying timing data
 * animate(500, style(...))
 * animate("1s", style(...))
 * animate("100ms 0.5s", style(...))
 * animate("5s ease", style(...))
 * animate("5s 10ms cubic-bezier(.17,.67,.88,.1)", style(...))
 *
 * // either style() of keyframes() can be used
 * animate(500, style({ background: "red" }))
 * animate(500, keyframes([
 *   style({ background: "blue" })),
 *   style({ background: "red" }))
 * ])
 * ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} timings
 * @param {?=} styles
 * @return {?}
 */function animate$2(timings){var styles=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return{type:4/* Animate */,styles:styles,timings:timings};}/**
 * `group` is an animation-specific function that is designed to be used inside of Angular2's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations-anchor component animations metadata page} to gain a better understanding of
 * how animations in Angular2 are used.
 *
 * `group` specifies a list of animation steps that are all run in parallel. Grouped animations are
 * useful when a series of styles must be animated/closed off at different statrting/ending times.
 *
 * The `group` function can either be used within a {\@link sequence sequence} or a {\@link transition
 * transition} and it will only continue to the next instruction once all of the inner animation
 * steps have completed.
 *
 * ### Usage
 *
 * The `steps` data that is passed into the `group` animation function can either consist of {\@link
 * style style} or {\@link animate animate} function calls. Each call to `style()` or `animate()`
 * within a group will be executed instantly (use {\@link keyframes keyframes} or a {\@link
 * animate#usage animate() with a delay value} to offset styles to be applied at a later time).
 *
 * ```typescript
 * group([
 *   animate("1s", { background: "black" }))
 *   animate("2s", { color: "white" }))
 * ])
 * ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} steps
 * @return {?}
 */function group$2(steps){return{type:3/* Group */,steps:steps};}/**
 * `sequence` is an animation-specific function that is designed to be used inside of Angular2's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations-anchor component animations metadata page} to gain a better understanding of
 * how animations in Angular2 are used.
 *
 * `sequence` Specifies a list of animation steps that are run one by one. (`sequence` is used by
 * default when an array is passed as animation data into {\@link transition transition}.)
 *
 * The `sequence` function can either be used within a {\@link group group} or a {\@link transition
 * transition} and it will only continue to the next instruction once each of the inner animation
 * steps have completed.
 *
 * To perform animation styling in parallel with other animation steps then have a look at the
 * {\@link group group} animation function.
 *
 * ### Usage
 *
 * The `steps` data that is passed into the `sequence` animation function can either consist of
 * {\@link style style} or {\@link animate animate} function calls. A call to `style()` will apply the
 * provided styling data immediately while a call to `animate()` will apply its styling data over a
 * given time depending on its timing data.
 *
 * ```typescript
 * sequence([
 *   style({ opacity: 0 })),
 *   animate("1s", { opacity: 1 }))
 * ])
 * ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} steps
 * @return {?}
 */function sequence$2(steps){return{type:2/* Sequence */,steps:steps};}/**
 * `style` is an animation-specific function that is designed to be used inside of Angular2's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations-anchor component animations metadata page} to gain a better understanding of
 * how animations in Angular2 are used.
 *
 * `style` declares a key/value object containing CSS properties/styles that can then be used for
 * {\@link state animation states}, within an {\@link sequence animation sequence}, or as styling data
 * for both {\@link animate animate} and {\@link keyframes keyframes}.
 *
 * ### Usage
 *
 * `style` takes in a key/value string map as data and expects one or more CSS property/value pairs
 * to be defined.
 *
 * ```typescript
 * // string values are used for css properties
 * style({ background: "red", color: "blue" })
 *
 * // numerical (pixel) values are also supported
 * style({ width: 100, height: 0 })
 * ```
 *
 * #### Auto-styles (using `*`)
 *
 * When an asterix (`*`) character is used as a value then it will be detected from the element
 * being animated and applied as animation data when the animation starts.
 *
 * This feature proves useful for a state depending on layout and/or environment factors; in such
 * cases the styles are calculated just before the animation starts.
 *
 * ```typescript
 * // the steps below will animate from 0 to the
 * // actual height of the element
 * style({ height: 0 }),
 * animate("1s", style({ height: "*" }))
 * ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} tokens
 * @return {?}
 */function style$2(tokens){var/** @type {?} */input=void 0;var/** @type {?} */offset=null;if(Array.isArray(tokens)){input=tokens;}else{input=[/** @type {?} */tokens];}input.forEach(function(entry){var/** @type {?} */entryOffset=entry['offset'];if(entryOffset!=null){offset=offset==null?parseFloat(/** @type {?} */entryOffset):offset;}});return _style(offset,input);}/**
 * @param {?} offset
 * @param {?} styles
 * @return {?}
 */function _style(offset,styles){return{type:6/* Style */,styles:styles,offset:offset};}/**
 * `state` is an animation-specific function that is designed to be used inside of Angular2's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations-anchor component animations metadata page} to gain a better understanding of
 * how animations in Angular2 are used.
 *
 * `state` declares an animation state within the given trigger. When a state is active within a
 * component then its associated styles will persist on the element that the trigger is attached to
 * (even when the animation ends).
 *
 * To animate between states, have a look at the animation {\@link transition transition} DSL
 * function. To register states to an animation trigger please have a look at the {\@link trigger
 * trigger} function.
 *
 * #### The `void` state
 *
 * The `void` state value is a reserved word that angular uses to determine when the element is not
 * apart of the application anymore (e.g. when an `ngIf` evaluates to false then the state of the
 * associated element is void).
 *
 * #### The `*` (default) state
 *
 * The `*` state (when styled) is a fallback state that will be used if the state that is being
 * animated is not declared within the trigger.
 *
 * ### Usage
 *
 * `state` will declare an animation state with its associated styles
 * within the given trigger.
 *
 * - `stateNameExpr` can be one or more state names separated by commas.
 * - `styles` refers to the {\@link style styling data} that will be persisted on the element once
 * the state has been reached.
 *
 * ```typescript
 * // "void" is a reserved name for a state and is used to represent
 * // the state in which an element is detached from from the application.
 * state("void", style({ height: 0 }))
 *
 * // user-defined states
 * state("closed", style({ height: 0 }))
 * state("open, visible", style({ height: "*" }))
 * ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} name
 * @param {?} styles
 * @return {?}
 */function state$2(name,styles){return{type:0/* State */,name:name,styles:styles};}/**
 * `keyframes` is an animation-specific function that is designed to be used inside of Angular2's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations-anchor component animations metadata page} to gain a better understanding of
 * how animations in Angular2 are used.
 *
 * `keyframes` specifies a collection of {\@link style style} entries each optionally characterized
 * by an `offset` value.
 *
 * ### Usage
 *
 * The `keyframes` animation function is designed to be used alongside the {\@link animate animate}
 * animation function. Instead of applying animations from where they are currently to their
 * destination, keyframes can describe how each style entry is applied and at what point within the
 * animation arc (much like CSS Keyframe Animations do).
 *
 * For each `style()` entry an `offset` value can be set. Doing so allows to specifiy at what
 * percentage of the animate time the styles will be applied.
 *
 * ```typescript
 * // the provided offset values describe when each backgroundColor value is applied.
 * animate("5s", keyframes([
 *   style({ backgroundColor: "red", offset: 0 }),
 *   style({ backgroundColor: "blue", offset: 0.2 }),
 *   style({ backgroundColor: "orange", offset: 0.3 }),
 *   style({ backgroundColor: "black", offset: 1 })
 * ]))
 * ```
 *
 * Alternatively, if there are no `offset` values used within the style entries then the offsets
 * will be calculated automatically.
 *
 * ```typescript
 * animate("5s", keyframes([
 *   style({ backgroundColor: "red" }) // offset = 0
 *   style({ backgroundColor: "blue" }) // offset = 0.33
 *   style({ backgroundColor: "orange" }) // offset = 0.66
 *   style({ backgroundColor: "black" }) // offset = 1
 * ]))
 * ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} steps
 * @return {?}
 */function keyframes$2(steps){return{type:5/* KeyframeSequence */,steps:steps};}/**
 * `transition` is an animation-specific function that is designed to be used inside of Angular2's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations-anchor component animations metadata page} to gain a better understanding of
 * how animations in Angular2 are used.
 *
 * `transition` declares the {\@link sequence sequence of animation steps} that will be run when the
 * provided `stateChangeExpr` value is satisfied. The `stateChangeExpr` consists of a `state1 =>
 * state2` which consists of two known states (use an asterix (`*`) to refer to a dynamic starting
 * and/or ending state).
 *
 * A function can also be provided as the `stateChangeExpr` argument for a transition and this
 * function will be executed each time a state change occurs. If the value returned within the
 * function is true then the associated animation will be run.
 *
 * Animation transitions are placed within an {\@link trigger animation trigger}. For an transition
 * to animate to a state value and persist its styles then one or more {\@link state animation
 * states} is expected to be defined.
 *
 * ### Usage
 *
 * An animation transition is kicked off the `stateChangeExpr` predicate evaluates to true based on
 * what the previous state is and what the current state has become. In other words, if a transition
 * is defined that matches the old/current state criteria then the associated animation will be
 * triggered.
 *
 * ```typescript
 * // all transition/state changes are defined within an animation trigger
 * trigger("myAnimationTrigger", [
 *   // if a state is defined then its styles will be persisted when the
 *   // animation has fully completed itself
 *   state("on", style({ background: "green" })),
 *   state("off", style({ background: "grey" })),
 *
 *   // a transition animation that will be kicked off when the state value
 *   // bound to "myAnimationTrigger" changes from "on" to "off"
 *   transition("on => off", animate(500)),
 *
 *   // it is also possible to do run the same animation for both directions
 *   transition("on <=> off", animate(500)),
 *
 *   // or to define multiple states pairs separated by commas
 *   transition("on => off, off => void", animate(500)),
 *
 *   // this is a catch-all state change for when an element is inserted into
 *   // the page and the destination state is unknown
 *   transition("void => *", [
 *     style({ opacity: 0 }),
 *     animate(500)
 *   ]),
 *
 *   // this will capture a state change between any states
 *   transition("* => *", animate("1s 0s")),
 *
 *   // you can also go full out and include a function
 *   transition((fromState, toState) => {
 *     // when `true` then it will allow the animation below to be invoked
 *     return fromState == "off" && toState == "on";
 *   }, animate("1s 0s"))
 * ])
 * ```
 *
 * The template associated with this component will make use of the `myAnimationTrigger` animation
 * trigger by binding to an element within its template code.
 *
 * ```html
 * <!-- somewhere inside of my-component-tpl.html -->
 * <div [\@myAnimationTrigger]="myStatusExp">...</div>
 * ```
 *
 * #### The final `animate` call
 *
 * If the final step within the transition steps is a call to `animate()` that **only** uses a
 * timing value with **no style data** then it will be automatically used as the final animation arc
 * for the element to animate itself to the final state. This involves an automatic mix of
 * adding/removing CSS styles so that the element will be in the exact state it should be for the
 * applied state to be presented correctly.
 *
 * ```
 * // start off by hiding the element, but make sure that it animates properly to whatever state
 * // is currently active for "myAnimationTrigger"
 * transition("void => *", [
 *   style({ opacity: 0 }),
 *   animate(500)
 * ])
 * ```
 *
 * ### Transition Aliases (`:enter` and `:leave`)
 *
 * Given that enter (insertion) and leave (removal) animations are so common, the `transition`
 * function accepts both `:enter` and `:leave` values which are aliases for the `void => *` and `*
 * => void` state changes.
 *
 * ```
 * transition(":enter", [
 *   style({ opacity: 0 }),
 *   animate(500, style({ opacity: 1 }))
 * ])
 * transition(":leave", [
 *   animate(500, style({ opacity: 0 }))
 * ])
 * ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} stateChangeExpr
 * @param {?} steps
 * @return {?}
 */function transition$2(stateChangeExpr,steps){return{type:1/* Transition */,expr:stateChangeExpr,animation:Array.isArray(steps)?sequence$2(steps):steps};}/**
 * @deprecated This symbol has moved. Please Import from @angular/animations instead!
 */var/** @type {?} */AUTO_STYLE$1='*';/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @param {?} name
 * @param {?} definitions
 * @return {?}
 */function trigger$1(name,definitions){return trigger$2(name,definitions);}/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @param {?} timings
 * @param {?=} styles
 * @return {?}
 */function animate$1(timings){var styles=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return animate$2(timings,styles);}/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @param {?} steps
 * @return {?}
 */function group$1(steps){return group$2(steps);}/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @param {?} steps
 * @return {?}
 */function sequence$1(steps){return sequence$2(steps);}/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @param {?} tokens
 * @return {?}
 */function style$1(tokens){return style$2(tokens);}/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @param {?} name
 * @param {?} styles
 * @return {?}
 */function state$1(name,styles){return state$2(name,styles);}/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @param {?} steps
 * @return {?}
 */function keyframes$1(steps){return keyframes$2(steps);}/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @param {?} stateChangeExpr
 * @param {?} steps
 * @return {?}
 */function transition$1(stateChangeExpr,steps){return transition$2(stateChangeExpr,steps);}

/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(16)))

/***/ }),
/* 2 */,
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var root_1 = __webpack_require__(13);
var toSubscriber_1 = __webpack_require__(210);
var observable_1 = __webpack_require__(32);
/**
 * A representation of any set of values over any amount of time. This the most basic building block
 * of RxJS.
 *
 * @class Observable<T>
 */
var Observable = (function () {
    /**
     * @constructor
     * @param {Function} subscribe the function that is  called when the Observable is
     * initially subscribed to. This function is given a Subscriber, to which new values
     * can be `next`ed, or an `error` method can be called to raise an error, or
     * `complete` can be called to notify of a successful completion.
     */
    function Observable(subscribe) {
        this._isScalar = false;
        if (subscribe) {
            this._subscribe = subscribe;
        }
    }
    /**
     * Creates a new Observable, with this Observable as the source, and the passed
     * operator defined as the new observable's operator.
     * @method lift
     * @param {Operator} operator the operator defining the operation to take on the observable
     * @return {Observable} a new observable with the Operator applied
     */
    Observable.prototype.lift = function (operator) {
        var observable = new Observable();
        observable.source = this;
        observable.operator = operator;
        return observable;
    };
    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
        var operator = this.operator;
        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
        if (operator) {
            operator.call(sink, this.source);
        }
        else {
            sink.add(this._trySubscribe(sink));
        }
        if (sink.syncErrorThrowable) {
            sink.syncErrorThrowable = false;
            if (sink.syncErrorThrown) {
                throw sink.syncErrorValue;
            }
        }
        return sink;
    };
    Observable.prototype._trySubscribe = function (sink) {
        try {
            return this._subscribe(sink);
        }
        catch (err) {
            sink.syncErrorThrown = true;
            sink.syncErrorValue = err;
            sink.error(err);
        }
    };
    /**
     * @method forEach
     * @param {Function} next a handler for each value emitted by the observable
     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise
     * @return {Promise} a promise that either resolves on observable completion or
     *  rejects with the handled error
     */
    Observable.prototype.forEach = function (next, PromiseCtor) {
        var _this = this;
        if (!PromiseCtor) {
            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
                PromiseCtor = root_1.root.Rx.config.Promise;
            }
            else if (root_1.root.Promise) {
                PromiseCtor = root_1.root.Promise;
            }
        }
        if (!PromiseCtor) {
            throw new Error('no Promise impl found');
        }
        return new PromiseCtor(function (resolve, reject) {
            var subscription = _this.subscribe(function (value) {
                if (subscription) {
                    // if there is a subscription, then we can surmise
                    // the next handling is asynchronous. Any errors thrown
                    // need to be rejected explicitly and unsubscribe must be
                    // called manually
                    try {
                        next(value);
                    }
                    catch (err) {
                        reject(err);
                        subscription.unsubscribe();
                    }
                }
                else {
                    // if there is NO subscription, then we're getting a nexted
                    // value synchronously during subscription. We can just call it.
                    // If it errors, Observable's `subscribe` will ensure the
                    // unsubscription logic is called, then synchronously rethrow the error.
                    // After that, Promise will trap the error and send it
                    // down the rejection path.
                    next(value);
                }
            }, reject, resolve);
        });
    };
    Observable.prototype._subscribe = function (subscriber) {
        return this.source.subscribe(subscriber);
    };
    /**
     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
     * @method Symbol.observable
     * @return {Observable} this instance of the observable
     */
    Observable.prototype[observable_1.$$observable] = function () {
        return this;
    };
    // HACK: Since TypeScript inherits static properties too, we have to
    // fight against TypeScript here so Subject can have a different static create signature
    /**
     * Creates a new cold Observable by calling the Observable constructor
     * @static true
     * @owner Observable
     * @method create
     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
     * @return {Observable} a new cold observable
     */
    Observable.create = function (subscribe) {
        return new Observable(subscribe);
    };
    return Observable;
}());
exports.Observable = Observable;
//# sourceMappingURL=Observable.js.map

/***/ }),
/* 4 */,
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isFunction_1 = __webpack_require__(79);
var Subscription_1 = __webpack_require__(31);
var Observer_1 = __webpack_require__(69);
var rxSubscriber_1 = __webpack_require__(54);
/**
 * Implements the {@link Observer} interface and extends the
 * {@link Subscription} class. While the {@link Observer} is the public API for
 * consuming the values of an {@link Observable}, all Observers get converted to
 * a Subscriber, in order to provide Subscription-like capabilities such as
 * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for
 * implementing operators, but it is rarely used as a public API.
 *
 * @class Subscriber<T>
 */
var Subscriber = (function (_super) {
    __extends(Subscriber, _super);
    /**
     * @param {Observer|function(value: T): void} [destinationOrNext] A partially
     * defined Observer or a `next` callback function.
     * @param {function(e: ?any): void} [error] The `error` callback of an
     * Observer.
     * @param {function(): void} [complete] The `complete` callback of an
     * Observer.
     */
    function Subscriber(destinationOrNext, error, complete) {
        _super.call(this);
        this.syncErrorValue = null;
        this.syncErrorThrown = false;
        this.syncErrorThrowable = false;
        this.isStopped = false;
        switch (arguments.length) {
            case 0:
                this.destination = Observer_1.empty;
                break;
            case 1:
                if (!destinationOrNext) {
                    this.destination = Observer_1.empty;
                    break;
                }
                if (typeof destinationOrNext === 'object') {
                    if (destinationOrNext instanceof Subscriber) {
                        this.destination = destinationOrNext;
                        this.destination.add(this);
                    }
                    else {
                        this.syncErrorThrowable = true;
                        this.destination = new SafeSubscriber(this, destinationOrNext);
                    }
                    break;
                }
            default:
                this.syncErrorThrowable = true;
                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
                break;
        }
    }
    Subscriber.prototype[rxSubscriber_1.$$rxSubscriber] = function () { return this; };
    /**
     * A static factory for a Subscriber, given a (potentially partial) definition
     * of an Observer.
     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.
     * @param {function(e: ?any): void} [error] The `error` callback of an
     * Observer.
     * @param {function(): void} [complete] The `complete` callback of an
     * Observer.
     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)
     * Observer represented by the given arguments.
     */
    Subscriber.create = function (next, error, complete) {
        var subscriber = new Subscriber(next, error, complete);
        subscriber.syncErrorThrowable = false;
        return subscriber;
    };
    /**
     * The {@link Observer} callback to receive notifications of type `next` from
     * the Observable, with a value. The Observable may call this method 0 or more
     * times.
     * @param {T} [value] The `next` value.
     * @return {void}
     */
    Subscriber.prototype.next = function (value) {
        if (!this.isStopped) {
            this._next(value);
        }
    };
    /**
     * The {@link Observer} callback to receive notifications of type `error` from
     * the Observable, with an attached {@link Error}. Notifies the Observer that
     * the Observable has experienced an error condition.
     * @param {any} [err] The `error` exception.
     * @return {void}
     */
    Subscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            this.isStopped = true;
            this._error(err);
        }
    };
    /**
     * The {@link Observer} callback to receive a valueless notification of type
     * `complete` from the Observable. Notifies the Observer that the Observable
     * has finished sending push-based notifications.
     * @return {void}
     */
    Subscriber.prototype.complete = function () {
        if (!this.isStopped) {
            this.isStopped = true;
            this._complete();
        }
    };
    Subscriber.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.isStopped = true;
        _super.prototype.unsubscribe.call(this);
    };
    Subscriber.prototype._next = function (value) {
        this.destination.next(value);
    };
    Subscriber.prototype._error = function (err) {
        this.destination.error(err);
        this.unsubscribe();
    };
    Subscriber.prototype._complete = function () {
        this.destination.complete();
        this.unsubscribe();
    };
    Subscriber.prototype._unsubscribeAndRecycle = function () {
        var _a = this, _parent = _a._parent, _parents = _a._parents;
        this._parent = null;
        this._parents = null;
        this.unsubscribe();
        this.closed = false;
        this.isStopped = false;
        this._parent = _parent;
        this._parents = _parents;
        return this;
    };
    return Subscriber;
}(Subscription_1.Subscription));
exports.Subscriber = Subscriber;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SafeSubscriber = (function (_super) {
    __extends(SafeSubscriber, _super);
    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
        _super.call(this);
        this._parentSubscriber = _parentSubscriber;
        var next;
        var context = this;
        if (isFunction_1.isFunction(observerOrNext)) {
            next = observerOrNext;
        }
        else if (observerOrNext) {
            context = observerOrNext;
            next = observerOrNext.next;
            error = observerOrNext.error;
            complete = observerOrNext.complete;
            if (isFunction_1.isFunction(context.unsubscribe)) {
                this.add(context.unsubscribe.bind(context));
            }
            context.unsubscribe = this.unsubscribe.bind(this);
        }
        this._context = context;
        this._next = next;
        this._error = error;
        this._complete = complete;
    }
    SafeSubscriber.prototype.next = function (value) {
        if (!this.isStopped && this._next) {
            var _parentSubscriber = this._parentSubscriber;
            if (!_parentSubscriber.syncErrorThrowable) {
                this.__tryOrUnsub(this._next, value);
            }
            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            if (this._error) {
                if (!_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(this._error, err);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, this._error, err);
                    this.unsubscribe();
                }
            }
            else if (!_parentSubscriber.syncErrorThrowable) {
                this.unsubscribe();
                throw err;
            }
            else {
                _parentSubscriber.syncErrorValue = err;
                _parentSubscriber.syncErrorThrown = true;
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.complete = function () {
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            if (this._complete) {
                if (!_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(this._complete);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, this._complete);
                    this.unsubscribe();
                }
            }
            else {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            this.unsubscribe();
            throw err;
        }
    };
    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            parent.syncErrorValue = err;
            parent.syncErrorThrown = true;
            return true;
        }
        return false;
    };
    SafeSubscriber.prototype._unsubscribe = function () {
        var _parentSubscriber = this._parentSubscriber;
        this._context = null;
        this._parentSubscriber = null;
        _parentSubscriber.unsubscribe();
    };
    return SafeSubscriber;
}(Subscriber));
//# sourceMappingURL=Subscriber.js.map

/***/ }),
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function() {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		var result = [];
		for(var i = 0; i < this.length; i++) {
			var item = this[i];
			if(item[2]) {
				result.push("@media " + item[2] + "{" + item[1] + "}");
			} else {
				result.push(item[1]);
			}
		}
		return result.join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {
/**
 * window: browser in DOM main thread
 * self: browser in WebWorker
 * global: Node.js/other
 */
exports.root = (typeof window == 'object' && window.window === window && window
    || typeof self == 'object' && self.self === self && self
    || typeof global == 'object' && global.global === global && global);
if (!exports.root) {
    throw new Error('RxJS could not find any global context (window, self, global)');
}
//# sourceMappingURL=root.js.map
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(16)))

/***/ }),
/* 14 */,
/* 15 */,
/* 16 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(3);
var Subscriber_1 = __webpack_require__(5);
var Subscription_1 = __webpack_require__(31);
var ObjectUnsubscribedError_1 = __webpack_require__(75);
var SubjectSubscription_1 = __webpack_require__(187);
var rxSubscriber_1 = __webpack_require__(54);
/**
 * @class SubjectSubscriber<T>
 */
var SubjectSubscriber = (function (_super) {
    __extends(SubjectSubscriber, _super);
    function SubjectSubscriber(destination) {
        _super.call(this, destination);
        this.destination = destination;
    }
    return SubjectSubscriber;
}(Subscriber_1.Subscriber));
exports.SubjectSubscriber = SubjectSubscriber;
/**
 * @class Subject<T>
 */
var Subject = (function (_super) {
    __extends(Subject, _super);
    function Subject() {
        _super.call(this);
        this.observers = [];
        this.closed = false;
        this.isStopped = false;
        this.hasError = false;
        this.thrownError = null;
    }
    Subject.prototype[rxSubscriber_1.$$rxSubscriber] = function () {
        return new SubjectSubscriber(this);
    };
    Subject.prototype.lift = function (operator) {
        var subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
    };
    Subject.prototype.next = function (value) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        if (!this.isStopped) {
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].next(value);
            }
        }
    };
    Subject.prototype.error = function (err) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        this.hasError = true;
        this.thrownError = err;
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].error(err);
        }
        this.observers.length = 0;
    };
    Subject.prototype.complete = function () {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].complete();
        }
        this.observers.length = 0;
    };
    Subject.prototype.unsubscribe = function () {
        this.isStopped = true;
        this.closed = true;
        this.observers = null;
    };
    Subject.prototype._trySubscribe = function (subscriber) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        else {
            return _super.prototype._trySubscribe.call(this, subscriber);
        }
    };
    Subject.prototype._subscribe = function (subscriber) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        else if (this.hasError) {
            subscriber.error(this.thrownError);
            return Subscription_1.Subscription.EMPTY;
        }
        else if (this.isStopped) {
            subscriber.complete();
            return Subscription_1.Subscription.EMPTY;
        }
        else {
            this.observers.push(subscriber);
            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);
        }
    };
    Subject.prototype.asObservable = function () {
        var observable = new Observable_1.Observable();
        observable.source = this;
        return observable;
    };
    Subject.create = function (destination, source) {
        return new AnonymousSubject(destination, source);
    };
    return Subject;
}(Observable_1.Observable));
exports.Subject = Subject;
/**
 * @class AnonymousSubject<T>
 */
var AnonymousSubject = (function (_super) {
    __extends(AnonymousSubject, _super);
    function AnonymousSubject(destination, source) {
        _super.call(this);
        this.destination = destination;
        this.source = source;
    }
    AnonymousSubject.prototype.next = function (value) {
        var destination = this.destination;
        if (destination && destination.next) {
            destination.next(value);
        }
    };
    AnonymousSubject.prototype.error = function (err) {
        var destination = this.destination;
        if (destination && destination.error) {
            this.destination.error(err);
        }
    };
    AnonymousSubject.prototype.complete = function () {
        var destination = this.destination;
        if (destination && destination.complete) {
            this.destination.complete();
        }
    };
    AnonymousSubject.prototype._subscribe = function (subscriber) {
        var source = this.source;
        if (source) {
            return this.source.subscribe(subscriber);
        }
        else {
            return Subscription_1.Subscription.EMPTY;
        }
    };
    return AnonymousSubject;
}(Subject));
exports.AnonymousSubject = AnonymousSubject;
//# sourceMappingURL=Subject.js.map

/***/ }),
/* 18 */,
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(1);
/* unused harmony export ɵf */
/* unused harmony export ɵe */
/* unused harmony export ɵc */
/* unused harmony export ɵa */
/* unused harmony export ɵd */
/* unused harmony export ɵb */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return downgradeComponent; });
/* unused harmony export downgradeInjectable */
/* unused harmony export VERSION */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return UpgradeComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return UpgradeModule; });


/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */var $COMPILE = '$compile';
var $CONTROLLER = '$controller';
var $DELEGATE = '$delegate';
var $HTTP_BACKEND = '$httpBackend';
var $INJECTOR = '$injector';
var $PARSE = '$parse';
var $PROVIDE = '$provide';
var $SCOPE = '$scope';
var $TEMPLATE_CACHE = '$templateCache';
var $$TESTABILITY = '$$testability';
var INJECTOR_KEY = '$$angularInjector';
var REQUIRE_INJECTOR = '?^^' + INJECTOR_KEY;
var REQUIRE_NG_MODEL = '?ngModel';
var UPGRADE_MODULE_NAME = '$$UpgradeModule';

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A `PropertyBinding` represents a mapping between a property name
 * and an attribute name. It is parsed from a string of the form
 * `"prop: attr"`; or simply `"propAndAttr" where the property
 * and attribute have the same identifier.
 */
var PropertyBinding = function () {
    function PropertyBinding(binding) {
        this.binding = binding;
        this.parseBinding();
    }
    PropertyBinding.prototype.parseBinding = function () {
        var parts = this.binding.split(':');
        this.prop = parts[0].trim();
        this.attr = (parts[1] || this.prop).trim();
        this.bracketAttr = "[" + this.attr + "]";
        this.parenAttr = "(" + this.attr + ")";
        this.bracketParenAttr = "[(" + this.attr + ")]";
        var capitalAttr = this.attr.charAt(0).toUpperCase() + this.attr.substr(1);
        this.onAttr = "on" + capitalAttr;
        this.bindAttr = "bind" + capitalAttr;
        this.bindonAttr = "bindon" + capitalAttr;
    };
    return PropertyBinding;
}();

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ContentProjectionHelper = function () {
    function ContentProjectionHelper() {}
    ContentProjectionHelper.prototype.groupProjectableNodes = function ($injector, component, nodes) {
        // By default, do not support multi-slot projection,
        // as `upgrade/static` does not support it yet.
        return [nodes];
    };
    return ContentProjectionHelper;
}();

function controllerKey(name) {
    return '$' + name + 'Controller';
}
function getComponentName(component) {
    // Return the name of the component or the first line of its stringified version.
    return component.overriddenName || component.name || component.toString().split('\n')[0];
}
/**
 * @return Whether the passed-in component implements the subset of the
 *     `ControlValueAccessor` interface needed for AngularJS `ng-model`
 *     compatibility.
 */
function supportsNgModel(component) {
    return typeof component.writeValue === 'function' && typeof component.registerOnChange === 'function';
}
/**
 * Glue the AngularJS `NgModelController` (if it exists) to the component
 * (if it implements the needed subset of the `ControlValueAccessor` interface).
 */
function hookupNgModel(ngModel, component) {
    if (ngModel && supportsNgModel(component)) {
        ngModel.$render = function () {
            component.writeValue(ngModel.$viewValue);
        };
        component.registerOnChange(ngModel.$setViewValue.bind(ngModel));
    }
}

var INITIAL_VALUE = {
    __UNINITIALIZED__: true
};
var DowngradeComponentAdapter = function () {
    function DowngradeComponentAdapter(id, info, element, attrs, scope, ngModel, parentInjector, $injector, $compile, $parse, componentFactory) {
        this.id = id;
        this.info = info;
        this.element = element;
        this.attrs = attrs;
        this.scope = scope;
        this.ngModel = ngModel;
        this.parentInjector = parentInjector;
        this.$injector = $injector;
        this.$compile = $compile;
        this.$parse = $parse;
        this.componentFactory = componentFactory;
        this.inputChangeCount = 0;
        this.inputChanges = null;
        this.componentRef = null;
        this.component = null;
        this.changeDetector = null;
        this.element[0].id = id;
        this.componentScope = scope.$new();
    }
    DowngradeComponentAdapter.prototype.compileContents = function () {
        var _this = this;
        var compiledProjectableNodes = [];
        // The projected content has to be grouped, before it is compiled.
        var projectionHelper = this.parentInjector.get(ContentProjectionHelper);
        var projectableNodes = projectionHelper.groupProjectableNodes(this.$injector, this.info.component, this.element.contents());
        var linkFns = projectableNodes.map(function (nodes) {
            return _this.$compile(nodes);
        });
        this.element.empty();
        linkFns.forEach(function (linkFn) {
            linkFn(_this.scope, function (clone) {
                compiledProjectableNodes.push(clone);
                _this.element.append(clone);
            });
        });
        return compiledProjectableNodes;
    };
    DowngradeComponentAdapter.prototype.createComponent = function (projectableNodes) {
        var childInjector = __WEBPACK_IMPORTED_MODULE_0__angular_core__["c" /* ReflectiveInjector */].resolveAndCreate([{ provide: $SCOPE, useValue: this.componentScope }], this.parentInjector);
        this.componentRef = this.componentFactory.create(childInjector, projectableNodes, this.element[0]);
        this.changeDetector = this.componentRef.changeDetectorRef;
        this.component = this.componentRef.instance;
        hookupNgModel(this.ngModel, this.component);
    };
    DowngradeComponentAdapter.prototype.setupInputs = function () {
        var _this = this;
        var attrs = this.attrs;
        var inputs = this.info.inputs || [];
        for (var i = 0; i < inputs.length; i++) {
            var input = new PropertyBinding(inputs[i]);
            var expr = null;
            if (attrs.hasOwnProperty(input.attr)) {
                var observeFn = function (prop) {
                    var prevValue = INITIAL_VALUE;
                    return function (currValue) {
                        if (prevValue === INITIAL_VALUE) {
                            prevValue = currValue;
                        }
                        _this.updateInput(prop, prevValue, currValue);
                        prevValue = currValue;
                    };
                }(input.prop);
                attrs.$observe(input.attr, observeFn);
            } else if (attrs.hasOwnProperty(input.bindAttr)) {
                expr = attrs /** TODO #9100 */[input.bindAttr];
            } else if (attrs.hasOwnProperty(input.bracketAttr)) {
                expr = attrs /** TODO #9100 */[input.bracketAttr];
            } else if (attrs.hasOwnProperty(input.bindonAttr)) {
                expr = attrs /** TODO #9100 */[input.bindonAttr];
            } else if (attrs.hasOwnProperty(input.bracketParenAttr)) {
                expr = attrs /** TODO #9100 */[input.bracketParenAttr];
            }
            if (expr != null) {
                var watchFn = function (prop) {
                    return function (currValue, prevValue) {
                        return _this.updateInput(prop, prevValue, currValue);
                    };
                }(input.prop);
                this.componentScope.$watch(expr, watchFn);
            }
        }
        var prototype = this.info.component.prototype;
        if (prototype && prototype.ngOnChanges) {
            // Detect: OnChanges interface
            this.inputChanges = {};
            this.componentScope.$watch(function () {
                return _this.inputChangeCount;
            }, function () {
                var inputChanges = _this.inputChanges;
                _this.inputChanges = {};
                _this.component.ngOnChanges(inputChanges);
            });
        }
        this.componentScope.$watch(function () {
            return _this.changeDetector && _this.changeDetector.detectChanges();
        });
    };
    DowngradeComponentAdapter.prototype.setupOutputs = function () {
        var _this = this;
        var attrs = this.attrs;
        var outputs = this.info.outputs || [];
        for (var j = 0; j < outputs.length; j++) {
            var output = new PropertyBinding(outputs[j]);
            var expr = null;
            var assignExpr = false;
            var bindonAttr = output.bindonAttr ? output.bindonAttr.substring(0, output.bindonAttr.length - 6) : null;
            var bracketParenAttr = output.bracketParenAttr ? "[(" + output.bracketParenAttr.substring(2, output.bracketParenAttr.length - 8) + ")]" : null;
            if (attrs.hasOwnProperty(output.onAttr)) {
                expr = attrs /** TODO #9100 */[output.onAttr];
            } else if (attrs.hasOwnProperty(output.parenAttr)) {
                expr = attrs /** TODO #9100 */[output.parenAttr];
            } else if (attrs.hasOwnProperty(bindonAttr)) {
                expr = attrs /** TODO #9100 */[bindonAttr];
                assignExpr = true;
            } else if (attrs.hasOwnProperty(bracketParenAttr)) {
                expr = attrs /** TODO #9100 */[bracketParenAttr];
                assignExpr = true;
            }
            if (expr != null && assignExpr != null) {
                var getter = this.$parse(expr);
                var setter = getter.assign;
                if (assignExpr && !setter) {
                    throw new Error("Expression '" + expr + "' is not assignable!");
                }
                var emitter = this.component[output.prop];
                if (emitter) {
                    emitter.subscribe({
                        next: assignExpr ? function (setter) {
                            return function (v /** TODO #9100 */) {
                                return setter(_this.scope, v);
                            };
                        }(setter) : function (getter) {
                            return function (v /** TODO #9100 */) {
                                return getter(_this.scope, { $event: v });
                            };
                        }(getter)
                    });
                } else {
                    throw new Error("Missing emitter '" + output.prop + "' on component '" + getComponentName(this.info.component) + "'!");
                }
            }
        }
    };
    DowngradeComponentAdapter.prototype.registerCleanup = function () {
        var _this = this;
        this.element.bind('$destroy', function () {
            _this.componentScope.$destroy();
            _this.componentRef.destroy();
        });
    };
    DowngradeComponentAdapter.prototype.getInjector = function () {
        return this.componentRef && this.componentRef.injector;
    };
    DowngradeComponentAdapter.prototype.updateInput = function (prop, prevValue, currValue) {
        if (this.inputChanges) {
            this.inputChangeCount++;
            this.inputChanges[prop] = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["d" /* SimpleChange */](prevValue, currValue, prevValue === currValue);
        }
        this.component[prop] = currValue;
    };
    return DowngradeComponentAdapter;
}();

var downgradeCount = 0;
/**
 * @whatItDoes
 *
 * *Part of the [upgrade/static](/docs/ts/latest/api/#!?query=upgrade%2Fstatic)
 * library for hybrid upgrade apps that support AoT compilation*
 *
 * Allows an Angular component to be used from AngularJS.
 *
 * @howToUse
 *
 * Let's assume that you have an Angular component called `ng2Heroes` that needs
 * to be made available in AngularJS templates.
 *
 * {@example upgrade/static/ts/module.ts region="ng2-heroes"}
 *
 * We must create an AngularJS [directive](https://docs.angularjs.org/guide/directive)
 * that will make this Angular component available inside AngularJS templates.
 * The `downgradeComponent()` function returns a factory function that we
 * can use to define the AngularJS directive that wraps the "downgraded" component.
 *
 * {@example upgrade/static/ts/module.ts region="ng2-heroes-wrapper"}
 *
 * In this example you can see that we must provide information about the component being
 * "downgraded". This is because once the AoT compiler has run, all metadata about the
 * component has been removed from the code, and so cannot be inferred.
 *
 * We must do the following:
 * * specify the Angular component class that is to be downgraded
 * * specify all inputs and outputs that the AngularJS component expects
 *
 * @description
 *
 * A helper function that returns a factory function to be used for registering an
 * AngularJS wrapper directive for "downgrading" an Angular component.
 *
 * The parameter contains information about the Component that is being downgraded:
 *
 * * `component: Type<any>`: The type of the Component that will be downgraded
 * * `inputs: string[]`: A collection of strings that specify what inputs the component accepts.
 * * `outputs: string[]`: A collection of strings that specify what outputs the component emits.
 *
 * The `inputs` and `outputs` are strings that map the names of properties to camelCased
 * attribute names. They are of the form `"prop: attr"`; or simply `"propAndAttr" where the
 * property and attribute have the same identifier.
 *
 * @experimental
 */
function downgradeComponent(info) {
    var idPrefix = "NG2_UPGRADE_" + downgradeCount++ + "_";
    var idCount = 0;
    var directiveFactory = function ($compile, $injector, $parse) {
        return {
            restrict: 'E',
            terminal: true,
            require: [REQUIRE_INJECTOR, REQUIRE_NG_MODEL],
            link: function (scope, element, attrs, required) {
                // We might have to compile the contents asynchronously, because this might have been
                // triggered by `UpgradeNg1ComponentAdapterBuilder`, before the Angular templates have
                // been compiled.
                var parentInjector = required[0] || $injector.get(INJECTOR_KEY);
                var ngModel = required[1];
                var downgradeFn = function (injector) {
                    var componentFactoryResolver = injector.get(__WEBPACK_IMPORTED_MODULE_0__angular_core__["e" /* ComponentFactoryResolver */]);
                    var componentFactory = componentFactoryResolver.resolveComponentFactory(info.component);
                    if (!componentFactory) {
                        throw new Error('Expecting ComponentFactory for: ' + getComponentName(info.component));
                    }
                    var id = idPrefix + idCount++;
                    var injectorPromise = new ParentInjectorPromise(element);
                    var facade = new DowngradeComponentAdapter(id, info, element, attrs, scope, ngModel, injector, $injector, $compile, $parse, componentFactory);
                    var projectableNodes = facade.compileContents();
                    facade.createComponent(projectableNodes);
                    facade.setupInputs();
                    facade.setupOutputs();
                    facade.registerCleanup();
                    injectorPromise.resolve(facade.getInjector());
                };
                if (parentInjector instanceof ParentInjectorPromise) {
                    parentInjector.then(downgradeFn);
                } else {
                    downgradeFn(parentInjector);
                }
            }
        };
    };
    // bracket-notation because of closure - see #14441
    directiveFactory['$inject'] = [$COMPILE, $INJECTOR, $PARSE];
    return directiveFactory;
}
/**
 * Synchronous promise-like object to wrap parent injectors,
 * to preserve the synchronous nature of Angular 1's $compile.
 */
var ParentInjectorPromise = function () {
    function ParentInjectorPromise(element) {
        this.element = element;
        this.injectorKey = controllerKey(INJECTOR_KEY);
        this.callbacks = [];
        // Store the promise on the element.
        element.data(this.injectorKey, this);
    }
    ParentInjectorPromise.prototype.then = function (callback) {
        if (this.injector) {
            callback(this.injector);
        } else {
            this.callbacks.push(callback);
        }
    };
    ParentInjectorPromise.prototype.resolve = function (injector) {
        this.injector = injector;
        // Store the real injector on the element.
        this.element.data(this.injectorKey, injector);
        // Release the element to prevent memory leaks.
        this.element = null;
        // Run the queued callbacks.
        this.callbacks.forEach(function (callback) {
            return callback(injector);
        });
        this.callbacks.length = 0;
    };
    return ParentInjectorPromise;
}();

/**
 * @whatItDoes
 *
 * *Part of the [upgrade/static](/docs/ts/latest/api/#!?query=upgrade%2Fstatic)
 * library for hybrid upgrade apps that support AoT compilation*
 *
 * Allow an Angular service to be accessible from AngularJS.
 *
 * @howToUse
 *
 * First ensure that the service to be downgraded is provided in an {@link NgModule}
 * that will be part of the upgrade application. For example, let's assume we have
 * defined `HeroesService`
 *
 * {@example upgrade/static/ts/module.ts region="ng2-heroes-service"}
 *
 * and that we have included this in our upgrade app {@link NgModule}
 *
 * {@example upgrade/static/ts/module.ts region="ng2-module"}
 *
 * Now we can register the `downgradeInjectable` factory function for the service
 * on an AngularJS module.
 *
 * {@example upgrade/static/ts/module.ts region="downgrade-ng2-heroes-service"}
 *
 * Inside an AngularJS component's controller we can get hold of the
 * downgraded service via the name we gave when downgrading.
 *
 * {@example upgrade/static/ts/module.ts region="example-app"}
 *
 * @description
 *
 * Takes a `token` that identifies a service provided from Angular.
 *
 * Returns a [factory function](https://docs.angularjs.org/guide/di) that can be
 * used to register the service on an AngularJS module.
 *
 * The factory function provides access to the Angular service that
 * is identified by the `token` parameter.
 *
 * @experimental
 */
function downgradeInjectable(token) {
    var factory = function (i) {
        return i.get(token);
    };
    factory.$inject = [INJECTOR_KEY];
    return factory;
}

/**
 * @stable
 */
var VERSION = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["f" /* Version */]('4.0.0-rc.1');

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function noNg() {
    throw new Error('AngularJS v1.x is not loaded!');
}
var angular = {
    bootstrap: noNg,
    module: noNg,
    element: noNg,
    version: noNg,
    resumeBootstrap: noNg,
    getTestability: noNg
};
try {
    if (window.hasOwnProperty('angular')) {
        angular = window.angular;
    }
} catch (e) {}
var bootstrap = angular.bootstrap;
var module$1 = angular.module;
var element = angular.element;

// JS has NaN !== NaN
function looseIdentical(a, b) {
    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
}

var REQUIRE_PREFIX_RE = /^(\^\^?)?(\?)?(\^\^?)?/;
var NOT_SUPPORTED = 'NOT_SUPPORTED';
var INITIAL_VALUE$1 = {
    __UNINITIALIZED__: true
};
var Bindings = function () {
    function Bindings() {
        this.twoWayBoundProperties = [];
        this.twoWayBoundLastValues = [];
        this.expressionBoundProperties = [];
        this.propertyToOutputMap = {};
    }
    return Bindings;
}();
/**
 * @whatItDoes
 *
 * *Part of the [upgrade/static](/docs/ts/latest/api/#!?query=upgrade%2Fstatic)
 * library for hybrid upgrade apps that support AoT compilation*
 *
 * Allows an AngularJS component to be used from Angular.
 *
 * @howToUse
 *
 * Let's assume that you have an AngularJS component called `ng1Hero` that needs
 * to be made available in Angular templates.
 *
 * {@example upgrade/static/ts/module.ts region="ng1-hero"}
 *
 * We must create a {@link Directive} that will make this AngularJS component
 * available inside Angular templates.
 *
 * {@example upgrade/static/ts/module.ts region="ng1-hero-wrapper"}
 *
 * In this example you can see that we must derive from the {@link UpgradeComponent}
 * base class but also provide an {@link Directive `@Directive`} decorator. This is
 * because the AoT compiler requires that this information is statically available at
 * compile time.
 *
 * Note that we must do the following:
 * * specify the directive's selector (`ng1-hero`)
 * * specify all inputs and outputs that the AngularJS component expects
 * * derive from `UpgradeComponent`
 * * call the base class from the constructor, passing
 *   * the AngularJS name of the component (`ng1Hero`)
 *   * the {@link ElementRef} and {@link Injector} for the component wrapper
 *
 * @description
 *
 * A helper class that should be used as a base class for creating Angular directives
 * that wrap AngularJS components that need to be "upgraded".
 *
 * @experimental
 */
var UpgradeComponent = function () {
    /**
     * Create a new `UpgradeComponent` instance. You should not normally need to do this.
     * Instead you should derive a new class from this one and call the super constructor
     * from the base class.
     *
     * {@example upgrade/static/ts/module.ts region="ng1-hero-wrapper" }
     *
     * * The `name` parameter should be the name of the AngularJS directive.
     * * The `elementRef` and `injector` parameters should be acquired from Angular by dependency
     *   injection into the base class constructor.
     *
     * Note that we must manually implement lifecycle hooks that call through to the super class.
     * This is because, at the moment, the AoT compiler is not able to tell that the
     * `UpgradeComponent`
     * already implements them and so does not wire up calls to them at runtime.
     */
    function UpgradeComponent(name, elementRef, injector) {
        this.name = name;
        this.elementRef = elementRef;
        this.injector = injector;
        this.controllerInstance = null;
        this.bindingDestination = null;
        this.$injector = injector.get($INJECTOR);
        this.$compile = this.$injector.get($COMPILE);
        this.$templateCache = this.$injector.get($TEMPLATE_CACHE);
        this.$httpBackend = this.$injector.get($HTTP_BACKEND);
        this.$controller = this.$injector.get($CONTROLLER);
        this.element = elementRef.nativeElement;
        this.$element = element(this.element);
        this.directive = this.getDirective(name);
        this.bindings = this.initializeBindings(this.directive);
        this.linkFn = this.compileTemplate(this.directive);
        // We ask for the AngularJS scope from the Angular injector, since
        // we will put the new component scope onto the new injector for each component
        var $parentScope = injector.get($SCOPE);
        // QUESTION 1: Should we create an isolated scope if the scope is only true?
        // QUESTION 2: Should we make the scope accessible through `$element.scope()/isolateScope()`?
        this.$componentScope = $parentScope.$new(!!this.directive.scope);
        var controllerType = this.directive.controller;
        var bindToController = this.directive.bindToController;
        if (controllerType) {
            this.controllerInstance = this.buildController(controllerType, this.$componentScope, this.$element, this.directive.controllerAs);
        } else if (bindToController) {
            throw new Error("Upgraded directive '" + name + "' specifies 'bindToController' but no controller.");
        }
        this.bindingDestination = bindToController ? this.controllerInstance : this.$componentScope;
        this.setupOutputs();
    }
    UpgradeComponent.prototype.ngOnInit = function () {
        var _this = this;
        var attrs = NOT_SUPPORTED;
        var transcludeFn = NOT_SUPPORTED;
        var directiveRequire = this.getDirectiveRequire(this.directive);
        var requiredControllers = this.resolveRequire(this.directive.name, this.$element, directiveRequire);
        if (this.directive.bindToController && isMap(directiveRequire)) {
            var requiredControllersMap_1 = requiredControllers;
            Object.keys(requiredControllersMap_1).forEach(function (key) {
                _this.controllerInstance[key] = requiredControllersMap_1[key];
            });
        }
        if (this.controllerInstance && isFunction(this.controllerInstance.$onInit)) {
            this.controllerInstance.$onInit();
        }
        if (this.controllerInstance && isFunction(this.controllerInstance.$doCheck)) {
            var callDoCheck = function () {
                return _this.controllerInstance.$doCheck();
            };
            this.unregisterDoCheckWatcher = this.$componentScope.$parent.$watch(callDoCheck);
            callDoCheck();
        }
        var link = this.directive.link;
        var preLink = typeof link == 'object' && link.pre;
        var postLink = typeof link == 'object' ? link.post : link;
        if (preLink) {
            preLink(this.$componentScope, this.$element, attrs, requiredControllers, transcludeFn);
        }
        var childNodes = [];
        var childNode;
        while (childNode = this.element.firstChild) {
            this.element.removeChild(childNode);
            childNodes.push(childNode);
        }
        var attachElement = function (clonedElements, scope) {
            _this.$element.append(clonedElements);
        };
        var attachChildNodes = function (scope, cloneAttach) {
            return cloneAttach(childNodes);
        };
        this.linkFn(this.$componentScope, attachElement, { parentBoundTranscludeFn: attachChildNodes });
        if (postLink) {
            postLink(this.$componentScope, this.$element, attrs, requiredControllers, transcludeFn);
        }
        if (this.controllerInstance && isFunction(this.controllerInstance.$postLink)) {
            this.controllerInstance.$postLink();
        }
    };
    UpgradeComponent.prototype.ngOnChanges = function (changes) {
        var _this = this;
        // Forward input changes to `bindingDestination`
        Object.keys(changes).forEach(function (propName) {
            return _this.bindingDestination[propName] = changes[propName].currentValue;
        });
        if (isFunction(this.bindingDestination.$onChanges)) {
            this.bindingDestination.$onChanges(changes);
        }
    };
    UpgradeComponent.prototype.ngDoCheck = function () {
        var _this = this;
        var twoWayBoundProperties = this.bindings.twoWayBoundProperties;
        var twoWayBoundLastValues = this.bindings.twoWayBoundLastValues;
        var propertyToOutputMap = this.bindings.propertyToOutputMap;
        twoWayBoundProperties.forEach(function (propName, idx) {
            var newValue = _this.bindingDestination[propName];
            var oldValue = twoWayBoundLastValues[idx];
            if (!looseIdentical(newValue, oldValue)) {
                var outputName = propertyToOutputMap[propName];
                var eventEmitter = _this[outputName];
                eventEmitter.emit(newValue);
                twoWayBoundLastValues[idx] = newValue;
            }
        });
    };
    UpgradeComponent.prototype.ngOnDestroy = function () {
        if (isFunction(this.unregisterDoCheckWatcher)) {
            this.unregisterDoCheckWatcher();
        }
        if (this.controllerInstance && isFunction(this.controllerInstance.$onDestroy)) {
            this.controllerInstance.$onDestroy();
        }
        this.$componentScope.$destroy();
    };
    UpgradeComponent.prototype.getDirective = function (name) {
        var directives = this.$injector.get(name + 'Directive');
        if (directives.length > 1) {
            throw new Error('Only support single directive definition for: ' + this.name);
        }
        var directive = directives[0];
        if (directive.replace) this.notSupported('replace');
        if (directive.terminal) this.notSupported('terminal');
        if (directive.compile) this.notSupported('compile');
        var link = directive.link;
        // QUESTION: why not support link.post?
        if (typeof link == 'object') {
            if (link.post) this.notSupported('link.post');
        }
        return directive;
    };
    UpgradeComponent.prototype.getDirectiveRequire = function (directive) {
        var require = directive.require || directive.controller && directive.name;
        if (isMap(require)) {
            Object.keys(require).forEach(function (key) {
                var value = require[key];
                var match = value.match(REQUIRE_PREFIX_RE);
                var name = value.substring(match[0].length);
                if (!name) {
                    require[key] = match[0] + key;
                }
            });
        }
        return require;
    };
    UpgradeComponent.prototype.initializeBindings = function (directive) {
        var _this = this;
        var btcIsObject = typeof directive.bindToController === 'object';
        if (btcIsObject && Object.keys(directive.scope).length) {
            throw new Error("Binding definitions on scope and controller at the same time is not supported.");
        }
        var context = btcIsObject ? directive.bindToController : directive.scope;
        var bindings = new Bindings();
        if (typeof context == 'object') {
            Object.keys(context).forEach(function (propName) {
                var definition = context[propName];
                var bindingType = definition.charAt(0);
                // QUESTION: What about `=*`? Ignore? Throw? Support?
                switch (bindingType) {
                    case '@':
                    case '<':
                        // We don't need to do anything special. They will be defined as inputs on the
                        // upgraded component facade and the change propagation will be handled by
                        // `ngOnChanges()`.
                        break;
                    case '=':
                        bindings.twoWayBoundProperties.push(propName);
                        bindings.twoWayBoundLastValues.push(INITIAL_VALUE$1);
                        bindings.propertyToOutputMap[propName] = propName + 'Change';
                        break;
                    case '&':
                        bindings.expressionBoundProperties.push(propName);
                        bindings.propertyToOutputMap[propName] = propName;
                        break;
                    default:
                        var json = JSON.stringify(context);
                        throw new Error("Unexpected mapping '" + bindingType + "' in '" + json + "' in '" + _this.name + "' directive.");
                }
            });
        }
        return bindings;
    };
    UpgradeComponent.prototype.compileTemplate = function (directive) {
        if (this.directive.template !== undefined) {
            return this.compileHtml(getOrCall(this.directive.template));
        } else if (this.directive.templateUrl) {
            var url = getOrCall(this.directive.templateUrl);
            var html = this.$templateCache.get(url);
            if (html !== undefined) {
                return this.compileHtml(html);
            } else {
                throw new Error('loading directive templates asynchronously is not supported');
            }
        } else {
            throw new Error("Directive '" + this.name + "' is not a component, it is missing template.");
        }
    };
    UpgradeComponent.prototype.buildController = function (controllerType, $scope, $element, controllerAs) {
        // TODO: Document that we do not pre-assign bindings on the controller instance
        var locals = { $scope: $scope, $element: $element };
        var controller = this.$controller(controllerType, locals, null, controllerAs);
        $element.data(controllerKey(this.directive.name), controller);
        return controller;
    };
    UpgradeComponent.prototype.resolveRequire = function (directiveName, $element, require) {
        var _this = this;
        if (!require) {
            return null;
        } else if (Array.isArray(require)) {
            return require.map(function (req) {
                return _this.resolveRequire(directiveName, $element, req);
            });
        } else if (typeof require === 'object') {
            var value_1 = {};
            Object.keys(require).forEach(function (key) {
                return value_1[key] = _this.resolveRequire(directiveName, $element, require[key]);
            });
            return value_1;
        } else if (typeof require === 'string') {
            var match = require.match(REQUIRE_PREFIX_RE);
            var inheritType = match[1] || match[3];
            var name_1 = require.substring(match[0].length);
            var isOptional = !!match[2];
            var searchParents = !!inheritType;
            var startOnParent = inheritType === '^^';
            var ctrlKey = controllerKey(name_1);
            if (startOnParent) {
                $element = $element.parent();
            }
            var value = searchParents ? $element.inheritedData(ctrlKey) : $element.data(ctrlKey);
            if (!value && !isOptional) {
                throw new Error("Unable to find required '" + require + "' in upgraded directive '" + directiveName + "'.");
            }
            return value;
        } else {
            throw new Error("Unrecognized require syntax on upgraded directive '" + directiveName + "': " + require);
        }
    };
    UpgradeComponent.prototype.setupOutputs = function () {
        var _this = this;
        // Set up the outputs for `=` bindings
        this.bindings.twoWayBoundProperties.forEach(function (propName) {
            var outputName = _this.bindings.propertyToOutputMap[propName];
            _this[outputName] = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["g" /* EventEmitter */]();
        });
        // Set up the outputs for `&` bindings
        this.bindings.expressionBoundProperties.forEach(function (propName) {
            var outputName = _this.bindings.propertyToOutputMap[propName];
            var emitter = _this[outputName] = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["g" /* EventEmitter */]();
            // QUESTION: Do we want the ng1 component to call the function with `<value>` or with
            //           `{$event: <value>}`. The former is closer to ng2, the latter to ng1.
            _this.bindingDestination[propName] = function (value) {
                return emitter.emit(value);
            };
        });
    };
    UpgradeComponent.prototype.notSupported = function (feature) {
        throw new Error("Upgraded directive '" + this.name + "' contains unsupported feature: '" + feature + "'.");
    };
    UpgradeComponent.prototype.compileHtml = function (html) {
        var div = document.createElement('div');
        div.innerHTML = html;
        return this.$compile(div.childNodes);
    };
    return UpgradeComponent;
}();
function getOrCall(property) {
    return isFunction(property) ? property() : property;
}
function isFunction(value) {
    return typeof value === 'function';
}
// NOTE: Only works for `typeof T !== 'object'`.
function isMap(value) {
    return value && !Array.isArray(value) && typeof value === 'object';
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// We have to do a little dance to get the ng1 injector into the module injector.
// We store the ng1 injector so that the provider in the module injector can access it
// Then we "get" the ng1 injector from the module injector, which triggers the provider to read
// the stored injector and release the reference to it.
var tempInjectorRef;
function setTempInjectorRef(injector) {
    tempInjectorRef = injector;
}
function injectorFactory() {
    var injector = tempInjectorRef;
    tempInjectorRef = null; // clear the value to prevent memory leaks
    return injector;
}
function rootScopeFactory(i) {
    return i.get('$rootScope');
}
function compileFactory(i) {
    return i.get('$compile');
}
function parseFactory(i) {
    return i.get('$parse');
}
var angular1Providers = [
// We must use exported named functions for the ng2 factories to keep the compiler happy:
// > Metadata collected contains an error that will be reported at runtime:
// >   Function calls are not supported.
// >   Consider replacing the function or lambda with a reference to an exported function
{ provide: '$injector', useFactory: injectorFactory }, { provide: '$rootScope', useFactory: rootScopeFactory, deps: ['$injector'] }, { provide: '$compile', useFactory: compileFactory, deps: ['$injector'] }, { provide: '$parse', useFactory: parseFactory, deps: ['$injector'] }];

/**
 * @whatItDoes
 *
 * *Part of the [upgrade/static](/docs/ts/latest/api/#!?query=upgrade%2Fstatic)
 * library for hybrid upgrade apps that support AoT compilation*
 *
 * Allows AngularJS and Angular components to be used together inside a hybrid upgrade
 * application, which supports AoT compilation.
 *
 * Specifically, the classes and functions in the `upgrade/static` module allow the following:
 * 1. Creation of an Angular directive that wraps and exposes an AngularJS component so
 *    that it can be used in an Angular template. See {@link UpgradeComponent}.
 * 2. Creation of an AngularJS directive that wraps and exposes an Angular component so
 *    that it can be used in an AngularJS template. See {@link downgradeComponent}.
 * 3. Creation of an Angular root injector provider that wraps and exposes an AngularJS
 *    service so that it can be injected into an Angular context. See
 *    {@link UpgradeModule#upgrading-an-angular-1-service Upgrading an AngularJS service} below.
 * 4. Creation of an AngularJS service that wraps and exposes an Angular injectable
 *    so that it can be injected into an AngularJS context. See {@link downgradeInjectable}.
 * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks
 *    coexisting in a single application. See the
 *    {@link UpgradeModule#example example} below.
 *
 * ## Mental Model
 *
 * When reasoning about how a hybrid application works it is useful to have a mental model which
 * describes what is happening and explains what is happening at the lowest level.
 *
 * 1. There are two independent frameworks running in a single application, each framework treats
 *    the other as a black box.
 * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework
 *    instantiated the element is the owner. Each framework only updates/interacts with its own
 *    DOM elements and ignores others.
 * 3. AngularJS directives always execute inside the AngularJS framework codebase regardless of
 *    where they are instantiated.
 * 4. Angular components always execute inside the Angular framework codebase regardless of
 *    where they are instantiated.
 * 5. An AngularJS component can be "upgraded"" to an Angular component. This is achieved by
 *    defining an Angular directive, which bootstraps the AngularJS component at its location
 *    in the DOM. See {@link UpgradeComponent}.
 * 6. An Angular component can be "downgraded"" to an AngularJS component. This is achieved by
 *    defining an AngularJS directive, which bootstraps the Angular component at its location
 *    in the DOM. See {@link downgradeComponent}.
 * 7. Whenever an "upgraded"/"downgraded" component is instantiated the host element is owned by
 *    the framework doing the instantiation. The other framework then instantiates and owns the
 *    view for that component.
 *    a. This implies that the component bindings will always follow the semantics of the
 *       instantiation framework.
 *    b. The DOM attributes are parsed by the framework that owns the current template. So
 * attributes
 *       in AngularJS templates must use kebab-case, while AngularJS templates must use camelCase.
 *    c. However the template binding syntax will always use the Angular style, e.g. square
 *       brackets (`[...]`) for property binding.
 * 8. AngularJS is always bootstrapped first and owns the root component.
 * 9. The new application is running in an Angular zone, and therefore it no longer needs calls
 * to
 *    `$apply()`.
 *
 * @howToUse
 *
 * `import {UpgradeModule} from '@angular/upgrade/static';`
 *
 * ## Example
 * Import the {@link UpgradeModule} into your top level {@link NgModule Angular `NgModule`}.
 *
 * {@example upgrade/static/ts/module.ts region='ng2-module'}
 *
 * Then bootstrap the hybrid upgrade app's module, get hold of the {@link UpgradeModule} instance
 * and use it to bootstrap the top level [AngularJS
 * module](https://docs.angularjs.org/api/ng/type/angular.Module).
 *
 * {@example upgrade/static/ts/module.ts region='bootstrap'}
 *
 *
 * ## Upgrading an AngularJS service
 *
 * There is no specific API for upgrading an AngularJS service. Instead you should just follow the
 * following recipe:
 *
 * Let's say you have an AngularJS service:
 *
 * {@example upgrade/static/ts/module.ts region="ng1-title-case-service"}
 *
 * Then you should define an Angular provider to be included in your {@link NgModule} `providers`
 * property.
 *
 * {@example upgrade/static/ts/module.ts region="upgrade-ng1-service"}
 *
 * Then you can use the "upgraded" AngularJS service by injecting it into an Angular component
 * or service.
 *
 * {@example upgrade/static/ts/module.ts region="use-ng1-upgraded-service"}
 *
 * @description
 *
 * This class is an `NgModule`, which you import to provide AngularJS core services,
 * and has an instance method used to bootstrap the hybrid upgrade application.
 *
 * ## Core AngularJS services
 * Importing this {@link NgModule} will add providers for the core
 * [AngularJS services](https://docs.angularjs.org/api/ng/service) to the root injector.
 *
 * ## Bootstrap
 * The runtime instance of this class contains a {@link UpgradeModule#bootstrap `bootstrap()`}
 * method, which you use to bootstrap the top level AngularJS module onto an element in the
 * DOM for the hybrid upgrade app.
 *
 * It also contains properties to access the {@link UpgradeModule#injector root injector}, the
 * bootstrap {@link NgZone} and the
 * [AngularJS $injector](https://docs.angularjs.org/api/auto/service/$injector).
 *
 * @experimental
 */
var UpgradeModule = function () {
    function UpgradeModule(
    /** The root {@link Injector} for the upgrade application. */
    injector,
    /** The bootstrap zone for the upgrade application */
    ngZone) {
        this.injector = injector;
        this.ngZone = ngZone;
    }
    /**
     * Bootstrap an AngularJS application from this NgModule
     * @param element the element on which to bootstrap the AngularJS application
     * @param [modules] the AngularJS modules to bootstrap for this application
     * @param [config] optional extra AngularJS bootstrap configuration
     */
    UpgradeModule.prototype.bootstrap = function (element$$, modules, config /*angular.IAngularBootstrapConfig*/) {
        var _this = this;
        if (modules === void 0) {
            modules = [];
        }
        var INIT_MODULE_NAME = UPGRADE_MODULE_NAME + '.init';
        // Create an ng1 module to bootstrap
        var initModule = module$1(INIT_MODULE_NAME, []).value(INJECTOR_KEY, this.injector).config([$PROVIDE, $INJECTOR, function ($provide, $injector) {
            if ($injector.has($$TESTABILITY)) {
                $provide.decorator($$TESTABILITY, [$DELEGATE, function (testabilityDelegate) {
                    var originalWhenStable = testabilityDelegate.whenStable;
                    var injector = _this.injector;
                    // Cannot use arrow function below because we need the context
                    var newWhenStable = function (callback) {
                        originalWhenStable.call(testabilityDelegate, function () {
                            var ng2Testability = injector.get(__WEBPACK_IMPORTED_MODULE_0__angular_core__["h" /* Testability */]);
                            if (ng2Testability.isStable()) {
                                callback();
                            } else {
                                ng2Testability.whenStable(newWhenStable.bind(testabilityDelegate, callback));
                            }
                        });
                    };
                    testabilityDelegate.whenStable = newWhenStable;
                    return testabilityDelegate;
                }]);
            }
        }]).run([$INJECTOR, function ($injector) {
            _this.$injector = $injector;
            // Initialize the ng1 $injector provider
            setTempInjectorRef($injector);
            _this.injector.get($INJECTOR);
            // Put the injector on the DOM, so that it can be "required"
            element(element$$).data(controllerKey(INJECTOR_KEY), _this.injector);
            // Wire up the ng1 rootScope to run a digest cycle whenever the zone settles
            // We need to do this in the next tick so that we don't prevent the bootup
            // stabilizing
            setTimeout(function () {
                var $rootScope = $injector.get('$rootScope');
                var subscription = _this.ngZone.onMicrotaskEmpty.subscribe(function () {
                    return $rootScope.$digest();
                });
                $rootScope.$on('$destroy', function () {
                    subscription.unsubscribe();
                });
            }, 0);
        }]);
        var upgradeModule = module$1(UPGRADE_MODULE_NAME, [INIT_MODULE_NAME].concat(modules));
        // Make sure resumeBootstrap() only exists if the current bootstrap is deferred
        var windowAngular = window /** TODO #???? */['angular'];
        windowAngular.resumeBootstrap = undefined;
        // Bootstrap the AngularJS application inside our zone
        this.ngZone.run(function () {
            bootstrap(element$$, [upgradeModule.name], config);
        });
        // Patch resumeBootstrap() to run inside the ngZone
        if (windowAngular.resumeBootstrap) {
            var originalResumeBootstrap_1 = windowAngular.resumeBootstrap;
            var ngZone_1 = this.ngZone;
            windowAngular.resumeBootstrap = function () {
                var _this = this;
                var args = arguments;
                windowAngular.resumeBootstrap = originalResumeBootstrap_1;
                ngZone_1.run(function () {
                    windowAngular.resumeBootstrap.apply(_this, args);
                });
            };
        }
    };
    return UpgradeModule;
}();
UpgradeModule.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["i" /* NgModule */], args: [{ providers: [angular1Providers, ContentProjectionHelper] }] }];
/** @nocollapse */
UpgradeModule.ctorParameters = function () {
    return [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["j" /* Injector */] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["k" /* NgZone */] }];
};




/***/ }),
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_common__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_core__ = __webpack_require__(1);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BrowserModule; });
/* unused harmony export platformBrowser */
/* unused harmony export Meta */
/* unused harmony export Title */
/* unused harmony export disableDebugTools */
/* unused harmony export enableDebugTools */
/* unused harmony export AnimationDriver */
/* unused harmony export By */
/* unused harmony export NgProbeToken */
/* unused harmony export DOCUMENT */
/* unused harmony export EVENT_MANAGER_PLUGINS */
/* unused harmony export EventManager */
/* unused harmony export HAMMER_GESTURE_CONFIG */
/* unused harmony export HammerGestureConfig */
/* unused harmony export DomSanitizer */
/* unused harmony export VERSION */
/* unused harmony export ɵBROWSER_SANITIZATION_PROVIDERS */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return INTERNAL_BROWSER_PLATFORM_PROVIDERS; });
/* unused harmony export ɵinitDomAdapter */
/* unused harmony export ɵBrowserDomAdapter */
/* unused harmony export ɵBrowserPlatformLocation */
/* unused harmony export ɵTRANSITION_ID */
/* unused harmony export ɵBrowserGetTestability */
/* unused harmony export ɵELEMENT_PROBE_PROVIDERS */
/* unused harmony export ɵDomAdapter */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return getDOM; });
/* unused harmony export ɵsetRootDomAdapter */
/* unused harmony export ɵDomRendererFactoryV2 */
/* unused harmony export ɵDomRootRenderer */
/* unused harmony export ɵDomRootRenderer_ */
/* unused harmony export ɵNAMESPACE_URIS */
/* unused harmony export ɵflattenStyles */
/* unused harmony export ɵisNamespaced */
/* unused harmony export ɵshimContentAttribute */
/* unused harmony export ɵshimHostAttribute */
/* unused harmony export ɵsplitNamespace */
/* unused harmony export ɵDomEventsPlugin */
/* unused harmony export ɵHammerGesturesPlugin */
/* unused harmony export ɵKeyEventsPlugin */
/* unused harmony export ɵDomSharedStylesHost */
/* unused harmony export ɵSharedStylesHost */
/* unused harmony export ɵWebAnimationsDriver */
/* unused harmony export ɵb */
/* unused harmony export ɵc */
/* unused harmony export ɵa */
/* unused harmony export ɵi */
/* unused harmony export ɵh */
/* unused harmony export ɵg */
/* unused harmony export ɵd */
/* unused harmony export ɵe */
/* unused harmony export ɵf */
var _get=function get(object,property,receiver){if(object===null)object=Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc===undefined){var parent=Object.getPrototypeOf(object);if(parent===null){return undefined;}else{return get(parent,property,receiver);}}else if("value"in desc){return desc.value;}else{var getter=desc.get;if(getter===undefined){return undefined;}return getter.call(receiver);}};var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i["return"])_i["return"]();}finally{if(_d)throw _e;}}return _arr;}return function(arr,i){if(Array.isArray(arr)){return arr;}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i);}else{throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++){arr2[i]=arr[i];}return arr2;}else{return Array.from(arr);}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}/**
 * @license Angular v4.0.0-rc.1
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 *//**
 * \@experimental
 */var NoOpAnimationDriver=function(){function NoOpAnimationDriver(){_classCallCheck(this,NoOpAnimationDriver);}_createClass(NoOpAnimationDriver,[{key:'animate',/**
     * @param {?} element
     * @param {?} startingStyles
     * @param {?} keyframes
     * @param {?} duration
     * @param {?} delay
     * @param {?} easing
     * @param {?=} previousPlayers
     * @return {?}
     */value:function animate(element,startingStyles,keyframes,duration,delay,easing){var previousPlayers=arguments.length>6&&arguments[6]!==undefined?arguments[6]:[];return new __WEBPACK_IMPORTED_MODULE_1__angular_core__["L" /* ɵNoOpAnimationPlayer */]();}}]);return NoOpAnimationDriver;}();/**
 * \@experimental
 * @abstract
 */var AnimationDriver=function(){function AnimationDriver(){_classCallCheck(this,AnimationDriver);}_createClass(AnimationDriver,[{key:'animate',/**
     * @abstract
     * @param {?} element
     * @param {?} startingStyles
     * @param {?} keyframes
     * @param {?} duration
     * @param {?} delay
     * @param {?} easing
     * @param {?=} previousPlayers
     * @return {?}
     */value:function animate(element,startingStyles,keyframes,duration,delay,easing,previousPlayers){}}]);return AnimationDriver;}();AnimationDriver.NOOP=new NoOpAnimationDriver();/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */var/** @type {?} */globalScope=void 0;if(typeof window==='undefined'){if(typeof WorkerGlobalScope!=='undefined'&&self instanceof WorkerGlobalScope){// TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
globalScope=self;}else{globalScope=global;}}else{globalScope=window;}// Need to declare a new variable for global here since TypeScript
// exports the original value of the symbol.
var/** @type {?} */global$1=globalScope;// TODO: remove calls to assert in production environment
// Note: Can't just export this and import in in other files
// as `assert` is a reserved keyword in Dart
global$1.assert=function assert(condition){// TODO: to be fixed properly via #2830, noop for now
};/**
 * @param {?} obj
 * @return {?}
 */function isPresent(obj){return obj!=null;}/**
 * @param {?} obj
 * @return {?}
 */function isBlank(obj){return obj==null;}/**
 * @param {?} token
 * @return {?}
 */function stringify(token){if(typeof token==='string'){return token;}if(token==null){return''+token;}if(token.overriddenName){return''+token.overriddenName;}if(token.name){return''+token.name;}var/** @type {?} */res=token.toString();var/** @type {?} */newLineIndex=res.indexOf('\n');return newLineIndex===-1?res:res.substring(0,newLineIndex);}/**
 * @param {?} global
 * @param {?} path
 * @param {?} value
 * @return {?}
 */function setValueOnPath(global,path,value){var/** @type {?} */parts=path.split('.');var/** @type {?} */obj=global;while(parts.length>1){var/** @type {?} */name=parts.shift();if(obj.hasOwnProperty(name)&&obj[name]!=null){obj=obj[name];}else{obj=obj[name]={};}}if(obj===undefined||obj===null){obj={};}obj[parts.shift()]=value;}/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */var/** @type {?} */_DOM=null;/**
 * @return {?}
 */function getDOM(){return _DOM;}/**
 * @param {?} adapter
 * @return {?}
 */function setRootDomAdapter(adapter){if(!_DOM){_DOM=adapter;}}/**
 * Provides DOM operations in an environment-agnostic way.
 *
 * \@security Tread carefully! Interacting with the DOM directly is dangerous and
 * can introduce XSS risks.
 * @abstract
 */var DomAdapter=function(){function DomAdapter(){_classCallCheck(this,DomAdapter);this.resourceLoaderType=null;}/**
     * @abstract
     * @param {?} element
     * @param {?} name
     * @return {?}
     */_createClass(DomAdapter,[{key:'hasProperty',value:function hasProperty(element,name){}/**
     * @abstract
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @return {?}
     */},{key:'setProperty',value:function setProperty(el,name,value){}/**
     * @abstract
     * @param {?} el
     * @param {?} name
     * @return {?}
     */},{key:'getProperty',value:function getProperty(el,name){}/**
     * @abstract
     * @param {?} el
     * @param {?} methodName
     * @param {?} args
     * @return {?}
     */},{key:'invoke',value:function invoke(el,methodName,args){}/**
     * @abstract
     * @param {?} error
     * @return {?}
     */},{key:'logError',value:function logError(error){}/**
     * @abstract
     * @param {?} error
     * @return {?}
     */},{key:'log',value:function log(error){}/**
     * @abstract
     * @param {?} error
     * @return {?}
     */},{key:'logGroup',value:function logGroup(error){}/**
     * @abstract
     * @return {?}
     */},{key:'logGroupEnd',value:function logGroupEnd(){}/**
     * Maps attribute names to their corresponding property names for cases
     * where attribute name doesn't match property name.
     * @return {?}
     */},{key:'parse',/**
     * @abstract
     * @param {?} templateHtml
     * @return {?}
     */value:function parse(templateHtml){}/**
     * @abstract
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */},{key:'querySelector',value:function querySelector(el,selector){}/**
     * @abstract
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */},{key:'querySelectorAll',value:function querySelectorAll(el,selector){}/**
     * @abstract
     * @param {?} el
     * @param {?} evt
     * @param {?} listener
     * @return {?}
     */},{key:'on',value:function on(el,evt,listener){}/**
     * @abstract
     * @param {?} el
     * @param {?} evt
     * @param {?} listener
     * @return {?}
     */},{key:'onAndCancel',value:function onAndCancel(el,evt,listener){}/**
     * @abstract
     * @param {?} el
     * @param {?} evt
     * @return {?}
     */},{key:'dispatchEvent',value:function dispatchEvent(el,evt){}/**
     * @abstract
     * @param {?} eventType
     * @return {?}
     */},{key:'createMouseEvent',value:function createMouseEvent(eventType){}/**
     * @abstract
     * @param {?} eventType
     * @return {?}
     */},{key:'createEvent',value:function createEvent(eventType){}/**
     * @abstract
     * @param {?} evt
     * @return {?}
     */},{key:'preventDefault',value:function preventDefault(evt){}/**
     * @abstract
     * @param {?} evt
     * @return {?}
     */},{key:'isPrevented',value:function isPrevented(evt){}/**
     * @abstract
     * @param {?} el
     * @return {?}
     */},{key:'getInnerHTML',value:function getInnerHTML(el){}/**
     * Returns content if el is a <template> element, null otherwise.
     * @abstract
     * @param {?} el
     * @return {?}
     */},{key:'getTemplateContent',value:function getTemplateContent(el){}/**
     * @abstract
     * @param {?} el
     * @return {?}
     */},{key:'getOuterHTML',value:function getOuterHTML(el){}/**
     * @abstract
     * @param {?} node
     * @return {?}
     */},{key:'nodeName',value:function nodeName(node){}/**
     * @abstract
     * @param {?} node
     * @return {?}
     */},{key:'nodeValue',value:function nodeValue(node){}/**
     * @abstract
     * @param {?} node
     * @return {?}
     */},{key:'type',value:function type(node){}/**
     * @abstract
     * @param {?} node
     * @return {?}
     */},{key:'content',value:function content(node){}/**
     * @abstract
     * @param {?} el
     * @return {?}
     */},{key:'firstChild',value:function firstChild(el){}/**
     * @abstract
     * @param {?} el
     * @return {?}
     */},{key:'nextSibling',value:function nextSibling(el){}/**
     * @abstract
     * @param {?} el
     * @return {?}
     */},{key:'parentElement',value:function parentElement(el){}/**
     * @abstract
     * @param {?} el
     * @return {?}
     */},{key:'childNodes',value:function childNodes(el){}/**
     * @abstract
     * @param {?} el
     * @return {?}
     */},{key:'childNodesAsList',value:function childNodesAsList(el){}/**
     * @abstract
     * @param {?} el
     * @return {?}
     */},{key:'clearNodes',value:function clearNodes(el){}/**
     * @abstract
     * @param {?} el
     * @param {?} node
     * @return {?}
     */},{key:'appendChild',value:function appendChild(el,node){}/**
     * @abstract
     * @param {?} el
     * @param {?} node
     * @return {?}
     */},{key:'removeChild',value:function removeChild(el,node){}/**
     * @abstract
     * @param {?} el
     * @param {?} newNode
     * @param {?} oldNode
     * @return {?}
     */},{key:'replaceChild',value:function replaceChild(el,newNode,oldNode){}/**
     * @abstract
     * @param {?} el
     * @return {?}
     */},{key:'remove',value:function remove(el){}/**
     * @abstract
     * @param {?} parent
     * @param {?} ref
     * @param {?} node
     * @return {?}
     */},{key:'insertBefore',value:function insertBefore(parent,ref,node){}/**
     * @abstract
     * @param {?} parent
     * @param {?} ref
     * @param {?} nodes
     * @return {?}
     */},{key:'insertAllBefore',value:function insertAllBefore(parent,ref,nodes){}/**
     * @abstract
     * @param {?} parent
     * @param {?} el
     * @param {?} node
     * @return {?}
     */},{key:'insertAfter',value:function insertAfter(parent,el,node){}/**
     * @abstract
     * @param {?} el
     * @param {?} value
     * @return {?}
     */},{key:'setInnerHTML',value:function setInnerHTML(el,value){}/**
     * @abstract
     * @param {?} el
     * @return {?}
     */},{key:'getText',value:function getText(el){}/**
     * @abstract
     * @param {?} el
     * @param {?} value
     * @return {?}
     */},{key:'setText',value:function setText(el,value){}/**
     * @abstract
     * @param {?} el
     * @return {?}
     */},{key:'getValue',value:function getValue(el){}/**
     * @abstract
     * @param {?} el
     * @param {?} value
     * @return {?}
     */},{key:'setValue',value:function setValue(el,value){}/**
     * @abstract
     * @param {?} el
     * @return {?}
     */},{key:'getChecked',value:function getChecked(el){}/**
     * @abstract
     * @param {?} el
     * @param {?} value
     * @return {?}
     */},{key:'setChecked',value:function setChecked(el,value){}/**
     * @abstract
     * @param {?} text
     * @return {?}
     */},{key:'createComment',value:function createComment(text){}/**
     * @abstract
     * @param {?} html
     * @return {?}
     */},{key:'createTemplate',value:function createTemplate(html){}/**
     * @abstract
     * @param {?} tagName
     * @param {?=} doc
     * @return {?}
     */},{key:'createElement',value:function createElement(tagName,doc){}/**
     * @abstract
     * @param {?} ns
     * @param {?} tagName
     * @param {?=} doc
     * @return {?}
     */},{key:'createElementNS',value:function createElementNS(ns,tagName,doc){}/**
     * @abstract
     * @param {?} text
     * @param {?=} doc
     * @return {?}
     */},{key:'createTextNode',value:function createTextNode(text,doc){}/**
     * @abstract
     * @param {?} attrName
     * @param {?} attrValue
     * @param {?=} doc
     * @return {?}
     */},{key:'createScriptTag',value:function createScriptTag(attrName,attrValue,doc){}/**
     * @abstract
     * @param {?} css
     * @param {?=} doc
     * @return {?}
     */},{key:'createStyleElement',value:function createStyleElement(css,doc){}/**
     * @abstract
     * @param {?} el
     * @return {?}
     */},{key:'createShadowRoot',value:function createShadowRoot(el){}/**
     * @abstract
     * @param {?} el
     * @return {?}
     */},{key:'getShadowRoot',value:function getShadowRoot(el){}/**
     * @abstract
     * @param {?} el
     * @return {?}
     */},{key:'getHost',value:function getHost(el){}/**
     * @abstract
     * @param {?} el
     * @return {?}
     */},{key:'getDistributedNodes',value:function getDistributedNodes(el){}/**
     * @abstract
     * @param {?} node
     * @return {?}
     */},{key:'clone',value:function clone(/*<T extends Node>*/node){}/**
     * @abstract
     * @param {?} element
     * @param {?} name
     * @return {?}
     */},{key:'getElementsByClassName',value:function getElementsByClassName(element,name){}/**
     * @abstract
     * @param {?} element
     * @param {?} name
     * @return {?}
     */},{key:'getElementsByTagName',value:function getElementsByTagName(element,name){}/**
     * @abstract
     * @param {?} element
     * @return {?}
     */},{key:'classList',value:function classList(element){}/**
     * @abstract
     * @param {?} element
     * @param {?} className
     * @return {?}
     */},{key:'addClass',value:function addClass(element,className){}/**
     * @abstract
     * @param {?} element
     * @param {?} className
     * @return {?}
     */},{key:'removeClass',value:function removeClass(element,className){}/**
     * @abstract
     * @param {?} element
     * @param {?} className
     * @return {?}
     */},{key:'hasClass',value:function hasClass(element,className){}/**
     * @abstract
     * @param {?} element
     * @param {?} styleName
     * @param {?} styleValue
     * @return {?}
     */},{key:'setStyle',value:function setStyle(element,styleName,styleValue){}/**
     * @abstract
     * @param {?} element
     * @param {?} styleName
     * @return {?}
     */},{key:'removeStyle',value:function removeStyle(element,styleName){}/**
     * @abstract
     * @param {?} element
     * @param {?} styleName
     * @return {?}
     */},{key:'getStyle',value:function getStyle(element,styleName){}/**
     * @abstract
     * @param {?} element
     * @param {?} styleName
     * @param {?=} styleValue
     * @return {?}
     */},{key:'hasStyle',value:function hasStyle(element,styleName,styleValue){}/**
     * @abstract
     * @param {?} element
     * @return {?}
     */},{key:'tagName',value:function tagName(element){}/**
     * @abstract
     * @param {?} element
     * @return {?}
     */},{key:'attributeMap',value:function attributeMap(element){}/**
     * @abstract
     * @param {?} element
     * @param {?} attribute
     * @return {?}
     */},{key:'hasAttribute',value:function hasAttribute(element,attribute){}/**
     * @abstract
     * @param {?} element
     * @param {?} ns
     * @param {?} attribute
     * @return {?}
     */},{key:'hasAttributeNS',value:function hasAttributeNS(element,ns,attribute){}/**
     * @abstract
     * @param {?} element
     * @param {?} attribute
     * @return {?}
     */},{key:'getAttribute',value:function getAttribute(element,attribute){}/**
     * @abstract
     * @param {?} element
     * @param {?} ns
     * @param {?} attribute
     * @return {?}
     */},{key:'getAttributeNS',value:function getAttributeNS(element,ns,attribute){}/**
     * @abstract
     * @param {?} element
     * @param {?} name
     * @param {?} value
     * @return {?}
     */},{key:'setAttribute',value:function setAttribute(element,name,value){}/**
     * @abstract
     * @param {?} element
     * @param {?} ns
     * @param {?} name
     * @param {?} value
     * @return {?}
     */},{key:'setAttributeNS',value:function setAttributeNS(element,ns,name,value){}/**
     * @abstract
     * @param {?} element
     * @param {?} attribute
     * @return {?}
     */},{key:'removeAttribute',value:function removeAttribute(element,attribute){}/**
     * @abstract
     * @param {?} element
     * @param {?} ns
     * @param {?} attribute
     * @return {?}
     */},{key:'removeAttributeNS',value:function removeAttributeNS(element,ns,attribute){}/**
     * @abstract
     * @param {?} el
     * @return {?}
     */},{key:'templateAwareRoot',value:function templateAwareRoot(el){}/**
     * @abstract
     * @return {?}
     */},{key:'createHtmlDocument',value:function createHtmlDocument(){}/**
     * @abstract
     * @param {?} el
     * @return {?}
     */},{key:'getBoundingClientRect',value:function getBoundingClientRect(el){}/**
     * @abstract
     * @param {?} doc
     * @return {?}
     */},{key:'getTitle',value:function getTitle(doc){}/**
     * @abstract
     * @param {?} doc
     * @param {?} newTitle
     * @return {?}
     */},{key:'setTitle',value:function setTitle(doc,newTitle){}/**
     * @abstract
     * @param {?} n
     * @param {?} selector
     * @return {?}
     */},{key:'elementMatches',value:function elementMatches(n,selector){}/**
     * @abstract
     * @param {?} el
     * @return {?}
     */},{key:'isTemplateElement',value:function isTemplateElement(el){}/**
     * @abstract
     * @param {?} node
     * @return {?}
     */},{key:'isTextNode',value:function isTextNode(node){}/**
     * @abstract
     * @param {?} node
     * @return {?}
     */},{key:'isCommentNode',value:function isCommentNode(node){}/**
     * @abstract
     * @param {?} node
     * @return {?}
     */},{key:'isElementNode',value:function isElementNode(node){}/**
     * @abstract
     * @param {?} node
     * @return {?}
     */},{key:'hasShadowRoot',value:function hasShadowRoot(node){}/**
     * @abstract
     * @param {?} node
     * @return {?}
     */},{key:'isShadowRoot',value:function isShadowRoot(node){}/**
     * @abstract
     * @param {?} node
     * @return {?}
     */},{key:'importIntoDoc',value:function importIntoDoc(/*<T extends Node>*/node){}/**
     * @abstract
     * @param {?} node
     * @return {?}
     */},{key:'adoptNode',value:function adoptNode(/*<T extends Node>*/node){}/**
     * @abstract
     * @param {?} element
     * @return {?}
     */},{key:'getHref',value:function getHref(element){}/**
     * @abstract
     * @param {?} event
     * @return {?}
     */},{key:'getEventKey',value:function getEventKey(event){}/**
     * @abstract
     * @param {?} element
     * @param {?} baseUrl
     * @param {?} href
     * @return {?}
     */},{key:'resolveAndSetHref',value:function resolveAndSetHref(element,baseUrl,href){}/**
     * @abstract
     * @return {?}
     */},{key:'supportsDOMEvents',value:function supportsDOMEvents(){}/**
     * @abstract
     * @return {?}
     */},{key:'supportsNativeShadowDOM',value:function supportsNativeShadowDOM(){}/**
     * @abstract
     * @param {?} doc
     * @param {?} target
     * @return {?}
     */},{key:'getGlobalEventTarget',value:function getGlobalEventTarget(doc,target){}/**
     * @abstract
     * @return {?}
     */},{key:'getHistory',value:function getHistory(){}/**
     * @abstract
     * @return {?}
     */},{key:'getLocation',value:function getLocation(){}/**
     * @abstract
     * @param {?} doc
     * @return {?}
     */},{key:'getBaseHref',value:function getBaseHref(doc){}/**
     * @abstract
     * @return {?}
     */},{key:'resetBaseElement',value:function resetBaseElement(){}/**
     * @abstract
     * @return {?}
     */},{key:'getUserAgent',value:function getUserAgent(){}/**
     * @abstract
     * @param {?} element
     * @param {?} name
     * @param {?} value
     * @return {?}
     */},{key:'setData',value:function setData(element,name,value){}/**
     * @abstract
     * @param {?} element
     * @return {?}
     */},{key:'getComputedStyle',value:function getComputedStyle(element){}/**
     * @abstract
     * @param {?} element
     * @param {?} name
     * @return {?}
     */},{key:'getData',value:function getData(element,name){}/**
     * @abstract
     * @param {?} name
     * @param {?} value
     * @return {?}
     */},{key:'setGlobalVar',value:function setGlobalVar(name,value){}/**
     * @abstract
     * @return {?}
     */},{key:'supportsWebAnimation',value:function supportsWebAnimation(){}/**
     * @abstract
     * @return {?}
     */},{key:'performanceNow',value:function performanceNow(){}/**
     * @abstract
     * @return {?}
     */},{key:'getAnimationPrefix',value:function getAnimationPrefix(){}/**
     * @abstract
     * @return {?}
     */},{key:'getTransitionEnd',value:function getTransitionEnd(){}/**
     * @abstract
     * @return {?}
     */},{key:'supportsAnimation',value:function supportsAnimation(){}/**
     * @abstract
     * @return {?}
     */},{key:'supportsCookies',value:function supportsCookies(){}/**
     * @abstract
     * @param {?} name
     * @return {?}
     */},{key:'getCookie',value:function getCookie(name){}/**
     * @abstract
     * @param {?} name
     * @param {?} value
     * @return {?}
     */},{key:'setCookie',value:function setCookie(name,value){}},{key:'attrToPropMap',get:function get(){return this._attrToPropMap;},/**
     * @param {?} value
     * @return {?}
     */set:function set(value){this._attrToPropMap=value;}}]);return DomAdapter;}();var WebAnimationsPlayer=function(){/**
     * @param {?} element
     * @param {?} keyframes
     * @param {?} options
     * @param {?=} previousPlayers
     */function WebAnimationsPlayer(element,keyframes,options){var _this=this;var previousPlayers=arguments.length>3&&arguments[3]!==undefined?arguments[3]:[];_classCallCheck(this,WebAnimationsPlayer);this.element=element;this.keyframes=keyframes;this.options=options;this._onDoneFns=[];this._onStartFns=[];this._onDestroyFns=[];this._initialized=false;this._finished=false;this._started=false;this._destroyed=false;this.parentPlayer=null;this._duration=options['duration'];this.previousStyles={};previousPlayers.forEach(function(player){var styles=player._captureStyles();Object.keys(styles).forEach(function(prop){return _this.previousStyles[prop]=styles[prop];});});}/**
     * @return {?}
     */_createClass(WebAnimationsPlayer,[{key:'_onFinish',value:function _onFinish(){if(!this._finished){this._finished=true;this._onDoneFns.forEach(function(fn){return fn();});this._onDoneFns=[];}}/**
     * @return {?}
     */},{key:'init',value:function init(){var _this2=this;if(this._initialized)return;this._initialized=true;var/** @type {?} */keyframes=this.keyframes.map(function(styles){var/** @type {?} */formattedKeyframe={};Object.keys(styles).forEach(function(prop,index){var/** @type {?} */value=styles[prop];if(value==__WEBPACK_IMPORTED_MODULE_1__angular_core__["M" /* AUTO_STYLE */]){value=_computeStyle(_this2.element,prop);}if(value!=undefined){formattedKeyframe[prop]=value;}});return formattedKeyframe;});var/** @type {?} */previousStyleProps=Object.keys(this.previousStyles);if(previousStyleProps.length){var/** @type {?} */startingKeyframe=keyframes[0];var/** @type {?} */missingStyleProps=[];previousStyleProps.forEach(function(prop){if(!isPresent(startingKeyframe[prop])){missingStyleProps.push(prop);}startingKeyframe[prop]=_this2.previousStyles[prop];});if(missingStyleProps.length){var i;(function(){var/** @type {?} */self=_this2;// tslint:disable-next-line
var _loop=function _loop(){var/** @type {?} */kf=keyframes[i];// tslint:disable-next-line
missingStyleProps.forEach(function(prop){kf[prop]=_computeStyle(self.element,prop);});};for(/** @type {?} */i=1;i<keyframes.length;i++){_loop();}})();}}this._player=this._triggerWebAnimation(this.element,keyframes,this.options);this._finalKeyframe=_copyKeyframeStyles(keyframes[keyframes.length-1]);// this is required so that the player doesn't start to animate right away
this._resetDomPlayerState();this._player.addEventListener('finish',function(){return _this2._onFinish();});}/**
     * \@internal
     * @param {?} element
     * @param {?} keyframes
     * @param {?} options
     * @return {?}
     */},{key:'_triggerWebAnimation',value:function _triggerWebAnimation(element,keyframes,options){// jscompiler doesn't seem to know animate is a native property because it's not fully
// supported yet across common browsers (we polyfill it for Edge/Safari) [CL #143630929]
return element['animate'](keyframes,options);}/**
     * @return {?}
     */},{key:'onStart',/**
     * @param {?} fn
     * @return {?}
     */value:function onStart(fn){this._onStartFns.push(fn);}/**
     * @param {?} fn
     * @return {?}
     */},{key:'onDone',value:function onDone(fn){this._onDoneFns.push(fn);}/**
     * @param {?} fn
     * @return {?}
     */},{key:'onDestroy',value:function onDestroy(fn){this._onDestroyFns.push(fn);}/**
     * @return {?}
     */},{key:'play',value:function play(){this.init();if(!this.hasStarted()){this._onStartFns.forEach(function(fn){return fn();});this._onStartFns=[];this._started=true;}this._player.play();}/**
     * @return {?}
     */},{key:'pause',value:function pause(){this.init();this._player.pause();}/**
     * @return {?}
     */},{key:'finish',value:function finish(){this.init();this._onFinish();this._player.finish();}/**
     * @return {?}
     */},{key:'reset',value:function reset(){this._resetDomPlayerState();this._destroyed=false;this._finished=false;this._started=false;}/**
     * @return {?}
     */},{key:'_resetDomPlayerState',value:function _resetDomPlayerState(){if(this._player){this._player.cancel();}}/**
     * @return {?}
     */},{key:'restart',value:function restart(){this.reset();this.play();}/**
     * @return {?}
     */},{key:'hasStarted',value:function hasStarted(){return this._started;}/**
     * @return {?}
     */},{key:'destroy',value:function destroy(){if(!this._destroyed){this._resetDomPlayerState();this._onFinish();this._destroyed=true;this._onDestroyFns.forEach(function(fn){return fn();});this._onDestroyFns=[];}}/**
     * @return {?}
     */},{key:'setPosition',/**
     * @param {?} p
     * @return {?}
     */value:function setPosition(p){this._player.currentTime=p*this.totalTime;}/**
     * @return {?}
     */},{key:'getPosition',value:function getPosition(){return this._player.currentTime/this.totalTime;}/**
     * @return {?}
     */},{key:'_captureStyles',value:function _captureStyles(){var _this3=this;var/** @type {?} */styles={};if(this.hasStarted()){Object.keys(this._finalKeyframe).forEach(function(prop){if(prop!='offset'){styles[prop]=_this3._finished?_this3._finalKeyframe[prop]:_computeStyle(_this3.element,prop);}});}return styles;}},{key:'domPlayer',get:function get(){return this._player;}},{key:'totalTime',get:function get(){return this._duration;}}]);return WebAnimationsPlayer;}();/**
 * @param {?} element
 * @param {?} prop
 * @return {?}
 */function _computeStyle(element,prop){return getDOM().getComputedStyle(element)[prop];}/**
 * @param {?} styles
 * @return {?}
 */function _copyKeyframeStyles(styles){var/** @type {?} */newStyles={};Object.keys(styles).forEach(function(prop){if(prop!='offset'){newStyles[prop]=styles[prop];}});return newStyles;}var WebAnimationsDriver=function(){function WebAnimationsDriver(){_classCallCheck(this,WebAnimationsDriver);}_createClass(WebAnimationsDriver,[{key:'animate',/**
     * @param {?} element
     * @param {?} startingStyles
     * @param {?} keyframes
     * @param {?} duration
     * @param {?} delay
     * @param {?} easing
     * @param {?=} previousPlayers
     * @return {?}
     */value:function animate(element,startingStyles,keyframes,duration,delay,easing){var previousPlayers=arguments.length>6&&arguments[6]!==undefined?arguments[6]:[];var/** @type {?} */formattedSteps=[];var/** @type {?} */startingStyleLookup={};if(isPresent(startingStyles)){startingStyleLookup=_populateStyles(startingStyles,{});}keyframes.forEach(function(keyframe){var/** @type {?} */data=_populateStyles(keyframe.styles,startingStyleLookup);data['offset']=Math.max(0,Math.min(1,keyframe.offset));formattedSteps.push(data);});// Styling passed into element.animate() must always be balanced.
// The special cases below can occur if only style() calls exist
// within an animation or when a style() calls are used prior
// to a group() animation being issued or if the renderer is
// invoked by the user directly.
if(formattedSteps.length==0){formattedSteps=[startingStyleLookup,startingStyleLookup];}else if(formattedSteps.length==1){var/** @type {?} */start=startingStyleLookup;var/** @type {?} */end=formattedSteps[0];end['offset']=null;formattedSteps=[start,end];}var/** @type {?} */playerOptions={'duration':duration,'delay':delay,'fill':'both'// we use `both` because it allows for styling at 0% to work with `delay`
};// we check for this to avoid having a null|undefined value be present
// for the easing (which results in an error for certain browsers #9752)
if(easing){playerOptions['easing']=easing;}// there may be a chance a NoOp player is returned depending
// on when the previous animation was cancelled
previousPlayers=previousPlayers.filter(filterWebAnimationPlayerFn);return new WebAnimationsPlayer(element,formattedSteps,playerOptions,/** @type {?} */previousPlayers);}}]);return WebAnimationsDriver;}();/**
 * @param {?} styles
 * @param {?} defaultStyles
 * @return {?}
 */function _populateStyles(styles,defaultStyles){var/** @type {?} */data={};styles.styles.forEach(function(entry){Object.keys(entry).forEach(function(prop){data[prop]=entry[prop];});});Object.keys(defaultStyles).forEach(function(prop){if(!isPresent(data[prop])){data[prop]=defaultStyles[prop];}});return data;}/**
 * @param {?} player
 * @return {?}
 */function filterWebAnimationPlayerFn(player){return player instanceof WebAnimationsPlayer;}/**
 * Provides DOM operations in any browser environment.
 *
 * \@security Tread carefully! Interacting with the DOM directly is dangerous and
 * can introduce XSS risks.
 * @abstract
 */var GenericBrowserDomAdapter=function(_DomAdapter){_inherits(GenericBrowserDomAdapter,_DomAdapter);function GenericBrowserDomAdapter(){_classCallCheck(this,GenericBrowserDomAdapter);var _this4=_possibleConstructorReturn(this,(GenericBrowserDomAdapter.__proto__||Object.getPrototypeOf(GenericBrowserDomAdapter)).call(this));_this4._animationPrefix=null;_this4._transitionEnd=null;try{var element=_this4.createElement('div',document);if(isPresent(_this4.getStyle(element,'animationName'))){_this4._animationPrefix='';}else{var domPrefixes=['Webkit','Moz','O','ms'];for(var i=0;i<domPrefixes.length;i++){if(isPresent(_this4.getStyle(element,domPrefixes[i]+'AnimationName'))){_this4._animationPrefix='-'+domPrefixes[i].toLowerCase()+'-';break;}}}var transEndEventNames={WebkitTransition:'webkitTransitionEnd',MozTransition:'transitionend',OTransition:'oTransitionEnd otransitionend',transition:'transitionend'};Object.keys(transEndEventNames).forEach(function(key){if(isPresent(_this4.getStyle(element,key))){_this4._transitionEnd=transEndEventNames[key];}});}catch(e){_this4._animationPrefix=null;_this4._transitionEnd=null;}return _this4;}/**
     * @param {?} el
     * @return {?}
     */_createClass(GenericBrowserDomAdapter,[{key:'getDistributedNodes',value:function getDistributedNodes(el){return el.getDistributedNodes();}/**
     * @param {?} el
     * @param {?} baseUrl
     * @param {?} href
     * @return {?}
     */},{key:'resolveAndSetHref',value:function resolveAndSetHref(el,baseUrl,href){el.href=href==null?baseUrl:baseUrl+'/../'+href;}/**
     * @return {?}
     */},{key:'supportsDOMEvents',value:function supportsDOMEvents(){return true;}/**
     * @return {?}
     */},{key:'supportsNativeShadowDOM',value:function supportsNativeShadowDOM(){return typeof document.body.createShadowRoot==='function';}/**
     * @return {?}
     */},{key:'getAnimationPrefix',value:function getAnimationPrefix(){return this._animationPrefix?this._animationPrefix:'';}/**
     * @return {?}
     */},{key:'getTransitionEnd',value:function getTransitionEnd(){return this._transitionEnd?this._transitionEnd:'';}/**
     * @return {?}
     */},{key:'supportsAnimation',value:function supportsAnimation(){return isPresent(this._animationPrefix)&&isPresent(this._transitionEnd);}}]);return GenericBrowserDomAdapter;}(DomAdapter);var/** @type {?} */_attrToPropMap={'class':'className','innerHtml':'innerHTML','readonly':'readOnly','tabindex':'tabIndex'};var/** @type {?} */DOM_KEY_LOCATION_NUMPAD=3;// Map to convert some key or keyIdentifier values to what will be returned by getEventKey
var/** @type {?} */_keyMap={// The following values are here for cross-browser compatibility and to match the W3C standard
// cf http://www.w3.org/TR/DOM-Level-3-Events-key/
'\b':'Backspace','\t':'Tab','\x7F':'Delete','\x1B':'Escape','Del':'Delete','Esc':'Escape','Left':'ArrowLeft','Right':'ArrowRight','Up':'ArrowUp','Down':'ArrowDown','Menu':'ContextMenu','Scroll':'ScrollLock','Win':'OS'};// There is a bug in Chrome for numeric keypad keys:
// https://code.google.com/p/chromium/issues/detail?id=155654
// 1, 2, 3 ... are reported as A, B, C ...
var/** @type {?} */_chromeNumKeyPadMap={'A':'1','B':'2','C':'3','D':'4','E':'5','F':'6','G':'7','H':'8','I':'9','J':'*','K':'+','M':'-','N':'.','O':'/','\x60':'0','\x90':'NumLock'};var BrowserDomAdapter=function(_GenericBrowserDomAda){_inherits(BrowserDomAdapter,_GenericBrowserDomAda);function BrowserDomAdapter(){_classCallCheck(this,BrowserDomAdapter);return _possibleConstructorReturn(this,(BrowserDomAdapter.__proto__||Object.getPrototypeOf(BrowserDomAdapter)).apply(this,arguments));}_createClass(BrowserDomAdapter,[{key:'parse',/**
     * @param {?} templateHtml
     * @return {?}
     */value:function parse(templateHtml){throw new Error('parse not implemented');}/**
     * @return {?}
     */},{key:'hasProperty',/**
     * @param {?} element
     * @param {?} name
     * @return {?}
     */value:function hasProperty(element,name){return name in element;}/**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @return {?}
     */},{key:'setProperty',value:function setProperty(el,name,value){el[name]=value;}/**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */},{key:'getProperty',value:function getProperty(el,name){return el[name];}/**
     * @param {?} el
     * @param {?} methodName
     * @param {?} args
     * @return {?}
     */},{key:'invoke',value:function invoke(el,methodName,args){el[methodName].apply(el,_toConsumableArray(args));}/**
     * @param {?} error
     * @return {?}
     */},{key:'logError',value:function logError(error){if(window.console){if(console.error){console.error(error);}else{console.log(error);}}}/**
     * @param {?} error
     * @return {?}
     */},{key:'log',value:function log(error){if(window.console){window.console.log&&window.console.log(error);}}/**
     * @param {?} error
     * @return {?}
     */},{key:'logGroup',value:function logGroup(error){if(window.console){window.console.group&&window.console.group(error);}}/**
     * @return {?}
     */},{key:'logGroupEnd',value:function logGroupEnd(){if(window.console){window.console.groupEnd&&window.console.groupEnd();}}/**
     * @return {?}
     */},{key:'querySelector',/**
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */value:function querySelector(el,selector){return el.querySelector(selector);}/**
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */},{key:'querySelectorAll',value:function querySelectorAll(el,selector){return el.querySelectorAll(selector);}/**
     * @param {?} el
     * @param {?} evt
     * @param {?} listener
     * @return {?}
     */},{key:'on',value:function on(el,evt,listener){el.addEventListener(evt,listener,false);}/**
     * @param {?} el
     * @param {?} evt
     * @param {?} listener
     * @return {?}
     */},{key:'onAndCancel',value:function onAndCancel(el,evt,listener){el.addEventListener(evt,listener,false);// Needed to follow Dart's subscription semantic, until fix of
// https://code.google.com/p/dart/issues/detail?id=17406
return function(){el.removeEventListener(evt,listener,false);};}/**
     * @param {?} el
     * @param {?} evt
     * @return {?}
     */},{key:'dispatchEvent',value:function dispatchEvent(el,evt){el.dispatchEvent(evt);}/**
     * @param {?} eventType
     * @return {?}
     */},{key:'createMouseEvent',value:function createMouseEvent(eventType){var/** @type {?} */evt=document.createEvent('MouseEvent');evt.initEvent(eventType,true,true);return evt;}/**
     * @param {?} eventType
     * @return {?}
     */},{key:'createEvent',value:function createEvent(eventType){var/** @type {?} */evt=document.createEvent('Event');evt.initEvent(eventType,true,true);return evt;}/**
     * @param {?} evt
     * @return {?}
     */},{key:'preventDefault',value:function preventDefault(evt){evt.preventDefault();evt.returnValue=false;}/**
     * @param {?} evt
     * @return {?}
     */},{key:'isPrevented',value:function isPrevented(evt){return evt.defaultPrevented||isPresent(evt.returnValue)&&!evt.returnValue;}/**
     * @param {?} el
     * @return {?}
     */},{key:'getInnerHTML',value:function getInnerHTML(el){return el.innerHTML;}/**
     * @param {?} el
     * @return {?}
     */},{key:'getTemplateContent',value:function getTemplateContent(el){return'content'in el&&el instanceof HTMLTemplateElement?el.content:null;}/**
     * @param {?} el
     * @return {?}
     */},{key:'getOuterHTML',value:function getOuterHTML(el){return el.outerHTML;}/**
     * @param {?} node
     * @return {?}
     */},{key:'nodeName',value:function nodeName(node){return node.nodeName;}/**
     * @param {?} node
     * @return {?}
     */},{key:'nodeValue',value:function nodeValue(node){return node.nodeValue;}/**
     * @param {?} node
     * @return {?}
     */},{key:'type',value:function type(node){return node.type;}/**
     * @param {?} node
     * @return {?}
     */},{key:'content',value:function content(node){if(this.hasProperty(node,'content')){return node.content;}else{return node;}}/**
     * @param {?} el
     * @return {?}
     */},{key:'firstChild',value:function firstChild(el){return el.firstChild;}/**
     * @param {?} el
     * @return {?}
     */},{key:'nextSibling',value:function nextSibling(el){return el.nextSibling;}/**
     * @param {?} el
     * @return {?}
     */},{key:'parentElement',value:function parentElement(el){return el.parentNode;}/**
     * @param {?} el
     * @return {?}
     */},{key:'childNodes',value:function childNodes(el){return el.childNodes;}/**
     * @param {?} el
     * @return {?}
     */},{key:'childNodesAsList',value:function childNodesAsList(el){var/** @type {?} */childNodes=el.childNodes;var/** @type {?} */res=new Array(childNodes.length);for(var/** @type {?} */i=0;i<childNodes.length;i++){res[i]=childNodes[i];}return res;}/**
     * @param {?} el
     * @return {?}
     */},{key:'clearNodes',value:function clearNodes(el){while(el.firstChild){el.removeChild(el.firstChild);}}/**
     * @param {?} el
     * @param {?} node
     * @return {?}
     */},{key:'appendChild',value:function appendChild(el,node){el.appendChild(node);}/**
     * @param {?} el
     * @param {?} node
     * @return {?}
     */},{key:'removeChild',value:function removeChild(el,node){el.removeChild(node);}/**
     * @param {?} el
     * @param {?} newChild
     * @param {?} oldChild
     * @return {?}
     */},{key:'replaceChild',value:function replaceChild(el,newChild,oldChild){el.replaceChild(newChild,oldChild);}/**
     * @param {?} node
     * @return {?}
     */},{key:'remove',value:function remove(node){if(node.parentNode){node.parentNode.removeChild(node);}return node;}/**
     * @param {?} parent
     * @param {?} ref
     * @param {?} node
     * @return {?}
     */},{key:'insertBefore',value:function insertBefore(parent,ref,node){parent.insertBefore(node,ref);}/**
     * @param {?} parent
     * @param {?} ref
     * @param {?} nodes
     * @return {?}
     */},{key:'insertAllBefore',value:function insertAllBefore(parent,ref,nodes){nodes.forEach(function(n){return parent.insertBefore(n,ref);});}/**
     * @param {?} parent
     * @param {?} ref
     * @param {?} node
     * @return {?}
     */},{key:'insertAfter',value:function insertAfter(parent,ref,node){parent.insertBefore(node,ref.nextSibling);}/**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */},{key:'setInnerHTML',value:function setInnerHTML(el,value){el.innerHTML=value;}/**
     * @param {?} el
     * @return {?}
     */},{key:'getText',value:function getText(el){return el.textContent;}/**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */},{key:'setText',value:function setText(el,value){el.textContent=value;}/**
     * @param {?} el
     * @return {?}
     */},{key:'getValue',value:function getValue(el){return el.value;}/**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */},{key:'setValue',value:function setValue(el,value){el.value=value;}/**
     * @param {?} el
     * @return {?}
     */},{key:'getChecked',value:function getChecked(el){return el.checked;}/**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */},{key:'setChecked',value:function setChecked(el,value){el.checked=value;}/**
     * @param {?} text
     * @return {?}
     */},{key:'createComment',value:function createComment(text){return document.createComment(text);}/**
     * @param {?} html
     * @return {?}
     */},{key:'createTemplate',value:function createTemplate(html){var/** @type {?} */t=document.createElement('template');t.innerHTML=html;return t;}/**
     * @param {?} tagName
     * @param {?=} doc
     * @return {?}
     */},{key:'createElement',value:function createElement(tagName){var doc=arguments.length>1&&arguments[1]!==undefined?arguments[1]:document;return doc.createElement(tagName);}/**
     * @param {?} ns
     * @param {?} tagName
     * @param {?=} doc
     * @return {?}
     */},{key:'createElementNS',value:function createElementNS(ns,tagName){var doc=arguments.length>2&&arguments[2]!==undefined?arguments[2]:document;return doc.createElementNS(ns,tagName);}/**
     * @param {?} text
     * @param {?=} doc
     * @return {?}
     */},{key:'createTextNode',value:function createTextNode(text){var doc=arguments.length>1&&arguments[1]!==undefined?arguments[1]:document;return doc.createTextNode(text);}/**
     * @param {?} attrName
     * @param {?} attrValue
     * @param {?=} doc
     * @return {?}
     */},{key:'createScriptTag',value:function createScriptTag(attrName,attrValue){var doc=arguments.length>2&&arguments[2]!==undefined?arguments[2]:document;var/** @type {?} */el=doc.createElement('SCRIPT');el.setAttribute(attrName,attrValue);return el;}/**
     * @param {?} css
     * @param {?=} doc
     * @return {?}
     */},{key:'createStyleElement',value:function createStyleElement(css){var doc=arguments.length>1&&arguments[1]!==undefined?arguments[1]:document;var/** @type {?} */style=doc.createElement('style');this.appendChild(style,this.createTextNode(css));return style;}/**
     * @param {?} el
     * @return {?}
     */},{key:'createShadowRoot',value:function createShadowRoot(el){return el.createShadowRoot();}/**
     * @param {?} el
     * @return {?}
     */},{key:'getShadowRoot',value:function getShadowRoot(el){return el.shadowRoot;}/**
     * @param {?} el
     * @return {?}
     */},{key:'getHost',value:function getHost(el){return el.host;}/**
     * @param {?} node
     * @return {?}
     */},{key:'clone',value:function clone(node){return node.cloneNode(true);}/**
     * @param {?} element
     * @param {?} name
     * @return {?}
     */},{key:'getElementsByClassName',value:function getElementsByClassName(element,name){return element.getElementsByClassName(name);}/**
     * @param {?} element
     * @param {?} name
     * @return {?}
     */},{key:'getElementsByTagName',value:function getElementsByTagName(element,name){return element.getElementsByTagName(name);}/**
     * @param {?} element
     * @return {?}
     */},{key:'classList',value:function classList(element){return Array.prototype.slice.call(element.classList,0);}/**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */},{key:'addClass',value:function addClass(element,className){element.classList.add(className);}/**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */},{key:'removeClass',value:function removeClass(element,className){element.classList.remove(className);}/**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */},{key:'hasClass',value:function hasClass(element,className){return element.classList.contains(className);}/**
     * @param {?} element
     * @param {?} styleName
     * @param {?} styleValue
     * @return {?}
     */},{key:'setStyle',value:function setStyle(element,styleName,styleValue){element.style[styleName]=styleValue;}/**
     * @param {?} element
     * @param {?} stylename
     * @return {?}
     */},{key:'removeStyle',value:function removeStyle(element,stylename){// IE requires '' instead of null
// see https://github.com/angular/angular/issues/7916
element.style[stylename]='';}/**
     * @param {?} element
     * @param {?} stylename
     * @return {?}
     */},{key:'getStyle',value:function getStyle(element,stylename){return element.style[stylename];}/**
     * @param {?} element
     * @param {?} styleName
     * @param {?=} styleValue
     * @return {?}
     */},{key:'hasStyle',value:function hasStyle(element,styleName){var styleValue=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var/** @type {?} */value=this.getStyle(element,styleName)||'';return styleValue?value==styleValue:value.length>0;}/**
     * @param {?} element
     * @return {?}
     */},{key:'tagName',value:function tagName(element){return element.tagName;}/**
     * @param {?} element
     * @return {?}
     */},{key:'attributeMap',value:function attributeMap(element){var/** @type {?} */res=new Map();var/** @type {?} */elAttrs=element.attributes;for(var/** @type {?} */i=0;i<elAttrs.length;i++){var/** @type {?} */attrib=elAttrs[i];res.set(attrib.name,attrib.value);}return res;}/**
     * @param {?} element
     * @param {?} attribute
     * @return {?}
     */},{key:'hasAttribute',value:function hasAttribute(element,attribute){return element.hasAttribute(attribute);}/**
     * @param {?} element
     * @param {?} ns
     * @param {?} attribute
     * @return {?}
     */},{key:'hasAttributeNS',value:function hasAttributeNS(element,ns,attribute){return element.hasAttributeNS(ns,attribute);}/**
     * @param {?} element
     * @param {?} attribute
     * @return {?}
     */},{key:'getAttribute',value:function getAttribute(element,attribute){return element.getAttribute(attribute);}/**
     * @param {?} element
     * @param {?} ns
     * @param {?} name
     * @return {?}
     */},{key:'getAttributeNS',value:function getAttributeNS(element,ns,name){return element.getAttributeNS(ns,name);}/**
     * @param {?} element
     * @param {?} name
     * @param {?} value
     * @return {?}
     */},{key:'setAttribute',value:function setAttribute(element,name,value){element.setAttribute(name,value);}/**
     * @param {?} element
     * @param {?} ns
     * @param {?} name
     * @param {?} value
     * @return {?}
     */},{key:'setAttributeNS',value:function setAttributeNS(element,ns,name,value){element.setAttributeNS(ns,name,value);}/**
     * @param {?} element
     * @param {?} attribute
     * @return {?}
     */},{key:'removeAttribute',value:function removeAttribute(element,attribute){element.removeAttribute(attribute);}/**
     * @param {?} element
     * @param {?} ns
     * @param {?} name
     * @return {?}
     */},{key:'removeAttributeNS',value:function removeAttributeNS(element,ns,name){element.removeAttributeNS(ns,name);}/**
     * @param {?} el
     * @return {?}
     */},{key:'templateAwareRoot',value:function templateAwareRoot(el){return this.isTemplateElement(el)?this.content(el):el;}/**
     * @return {?}
     */},{key:'createHtmlDocument',value:function createHtmlDocument(){return document.implementation.createHTMLDocument('fakeTitle');}/**
     * @param {?} el
     * @return {?}
     */},{key:'getBoundingClientRect',value:function getBoundingClientRect(el){try{return el.getBoundingClientRect();}catch(e){return{top:0,bottom:0,left:0,right:0,width:0,height:0};}}/**
     * @param {?} doc
     * @return {?}
     */},{key:'getTitle',value:function getTitle(doc){return document.title;}/**
     * @param {?} doc
     * @param {?} newTitle
     * @return {?}
     */},{key:'setTitle',value:function setTitle(doc,newTitle){document.title=newTitle||'';}/**
     * @param {?} n
     * @param {?} selector
     * @return {?}
     */},{key:'elementMatches',value:function elementMatches(n,selector){if(n instanceof HTMLElement){return n.matches&&n.matches(selector)||n.msMatchesSelector&&n.msMatchesSelector(selector)||n.webkitMatchesSelector&&n.webkitMatchesSelector(selector);}return false;}/**
     * @param {?} el
     * @return {?}
     */},{key:'isTemplateElement',value:function isTemplateElement(el){return el instanceof HTMLElement&&el.nodeName=='TEMPLATE';}/**
     * @param {?} node
     * @return {?}
     */},{key:'isTextNode',value:function isTextNode(node){return node.nodeType===Node.TEXT_NODE;}/**
     * @param {?} node
     * @return {?}
     */},{key:'isCommentNode',value:function isCommentNode(node){return node.nodeType===Node.COMMENT_NODE;}/**
     * @param {?} node
     * @return {?}
     */},{key:'isElementNode',value:function isElementNode(node){return node.nodeType===Node.ELEMENT_NODE;}/**
     * @param {?} node
     * @return {?}
     */},{key:'hasShadowRoot',value:function hasShadowRoot(node){return isPresent(node.shadowRoot)&&node instanceof HTMLElement;}/**
     * @param {?} node
     * @return {?}
     */},{key:'isShadowRoot',value:function isShadowRoot(node){return node instanceof DocumentFragment;}/**
     * @param {?} node
     * @return {?}
     */},{key:'importIntoDoc',value:function importIntoDoc(node){return document.importNode(this.templateAwareRoot(node),true);}/**
     * @param {?} node
     * @return {?}
     */},{key:'adoptNode',value:function adoptNode(node){return document.adoptNode(node);}/**
     * @param {?} el
     * @return {?}
     */},{key:'getHref',value:function getHref(el){return el.href;}/**
     * @param {?} event
     * @return {?}
     */},{key:'getEventKey',value:function getEventKey(event){var/** @type {?} */key=event.key;if(isBlank(key)){key=event.keyIdentifier;// keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and
// Safari cf
// http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces
if(isBlank(key)){return'Unidentified';}if(key.startsWith('U+')){key=String.fromCharCode(parseInt(key.substring(2),16));if(event.location===DOM_KEY_LOCATION_NUMPAD&&_chromeNumKeyPadMap.hasOwnProperty(key)){// There is a bug in Chrome for numeric keypad keys:
// https://code.google.com/p/chromium/issues/detail?id=155654
// 1, 2, 3 ... are reported as A, B, C ...
key=_chromeNumKeyPadMap[key];}}}return _keyMap[key]||key;}/**
     * @param {?} doc
     * @param {?} target
     * @return {?}
     */},{key:'getGlobalEventTarget',value:function getGlobalEventTarget(doc,target){if(target==='window'){return window;}if(target==='document'){return document;}if(target==='body'){return document.body;}}/**
     * @return {?}
     */},{key:'getHistory',value:function getHistory(){return window.history;}/**
     * @return {?}
     */},{key:'getLocation',value:function getLocation(){return window.location;}/**
     * @param {?} doc
     * @return {?}
     */},{key:'getBaseHref',value:function getBaseHref(doc){var/** @type {?} */href=getBaseElementHref();return isBlank(href)?null:relativePath(href);}/**
     * @return {?}
     */},{key:'resetBaseElement',value:function resetBaseElement(){baseElement=null;}/**
     * @return {?}
     */},{key:'getUserAgent',value:function getUserAgent(){return window.navigator.userAgent;}/**
     * @param {?} element
     * @param {?} name
     * @param {?} value
     * @return {?}
     */},{key:'setData',value:function setData(element,name,value){this.setAttribute(element,'data-'+name,value);}/**
     * @param {?} element
     * @param {?} name
     * @return {?}
     */},{key:'getData',value:function getData(element,name){return this.getAttribute(element,'data-'+name);}/**
     * @param {?} element
     * @return {?}
     */},{key:'getComputedStyle',value:function(_getComputedStyle){function getComputedStyle(_x4){return _getComputedStyle.apply(this,arguments);}getComputedStyle.toString=function(){return _getComputedStyle.toString();};return getComputedStyle;}(function(element){return getComputedStyle(element);})/**
     * @param {?} path
     * @param {?} value
     * @return {?}
     */},{key:'setGlobalVar',value:function setGlobalVar(path,value){setValueOnPath(global$1,path,value);}/**
     * @return {?}
     */},{key:'supportsWebAnimation',value:function supportsWebAnimation(){return typeof Element.prototype['animate']==='function';}/**
     * @return {?}
     */},{key:'performanceNow',value:function performanceNow(){// performance.now() is not available in all browsers, see
// http://caniuse.com/#search=performance.now
return window.performance&&window.performance.now?window.performance.now():new Date().getTime();}/**
     * @return {?}
     */},{key:'supportsCookies',value:function supportsCookies(){return true;}/**
     * @param {?} name
     * @return {?}
     */},{key:'getCookie',value:function getCookie(name){return parseCookieValue(document.cookie,name);}/**
     * @param {?} name
     * @param {?} value
     * @return {?}
     */},{key:'setCookie',value:function setCookie(name,value){// document.cookie is magical, assigning into it assigns/overrides one cookie value, but does
// not clear other cookies.
document.cookie=encodeURIComponent(name)+'='+encodeURIComponent(value);}},{key:'attrToPropMap',get:function get(){return _attrToPropMap;}}],[{key:'makeCurrent',value:function makeCurrent(){setRootDomAdapter(new BrowserDomAdapter());}}]);return BrowserDomAdapter;}(GenericBrowserDomAdapter);var/** @type {?} */baseElement=null;/**
 * @return {?}
 */function getBaseElementHref(){if(!baseElement){baseElement=document.querySelector('base');if(!baseElement){return null;}}return baseElement.getAttribute('href');}// based on urlUtils.js in AngularJS 1
var/** @type {?} */urlParsingNode=void 0;/**
 * @param {?} url
 * @return {?}
 */function relativePath(url){if(!urlParsingNode){urlParsingNode=document.createElement('a');}urlParsingNode.setAttribute('href',url);return urlParsingNode.pathname.charAt(0)==='/'?urlParsingNode.pathname:'/'+urlParsingNode.pathname;}/**
 * @param {?} cookieStr
 * @param {?} name
 * @return {?}
 */function parseCookieValue(cookieStr,name){name=encodeURIComponent(name);var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=cookieStr.split(';')[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var cookie=_step.value;var/** @type {?} */eqIndex=cookie.indexOf('=');var _ref=eqIndex==-1?[cookie,'']:[cookie.slice(0,eqIndex),cookie.slice(eqIndex+1)],_ref2=_slicedToArray(_ref,2),cookieName=_ref2[0],cookieValue=_ref2[1];if(cookieName.trim()===name){return decodeURIComponent(cookieValue);}}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return();}}finally{if(_didIteratorError){throw _iteratorError;}}}return null;}/**
 * A DI Token representing the main rendering context. In a browser this is the DOM Document.
 *
 * Note: Document might not be available in the Application Context when Application and Rendering
 * Contexts are not the same (e.g. when running the application into a Web Worker).
 *
 * @stable
 */var/** @type {?} */DOCUMENT=new __WEBPACK_IMPORTED_MODULE_1__angular_core__["n" /* InjectionToken */]('DocumentToken');/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 * @return {?}
 */function supportsState(){return!!window.history.pushState;}/**
 * `PlatformLocation` encapsulates all of the direct calls to platform APIs.
 * This class should not be used directly by an application developer. Instead, use
 * {\@link Location}.
 */var BrowserPlatformLocation=function(_PlatformLocation){_inherits(BrowserPlatformLocation,_PlatformLocation);/**
     * @param {?} _doc
     */function BrowserPlatformLocation(_doc){_classCallCheck(this,BrowserPlatformLocation);var _this6=_possibleConstructorReturn(this,(BrowserPlatformLocation.__proto__||Object.getPrototypeOf(BrowserPlatformLocation)).call(this));_this6._doc=_doc;_this6._init();return _this6;}/**
     * \@internal
     * @return {?}
     */_createClass(BrowserPlatformLocation,[{key:'_init',value:function _init(){this._location=getDOM().getLocation();this._history=getDOM().getHistory();}/**
     * @return {?}
     */},{key:'getBaseHrefFromDOM',/**
     * @return {?}
     */value:function getBaseHrefFromDOM(){return getDOM().getBaseHref(this._doc);}/**
     * @param {?} fn
     * @return {?}
     */},{key:'onPopState',value:function onPopState(fn){getDOM().getGlobalEventTarget(this._doc,'window').addEventListener('popstate',fn,false);}/**
     * @param {?} fn
     * @return {?}
     */},{key:'onHashChange',value:function onHashChange(fn){getDOM().getGlobalEventTarget(this._doc,'window').addEventListener('hashchange',fn,false);}/**
     * @return {?}
     */},{key:'pushState',/**
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @return {?}
     */value:function pushState(state,title,url){if(supportsState()){this._history.pushState(state,title,url);}else{this._location.hash=url;}}/**
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @return {?}
     */},{key:'replaceState',value:function replaceState(state,title,url){if(supportsState()){this._history.replaceState(state,title,url);}else{this._location.hash=url;}}/**
     * @return {?}
     */},{key:'forward',value:function forward(){this._history.forward();}/**
     * @return {?}
     */},{key:'back',value:function back(){this._history.back();}},{key:'location',get:function get(){return this._location;}},{key:'pathname',get:function get(){return this._location.pathname;}/**
     * @return {?}
     */,/**
     * @param {?} newPath
     * @return {?}
     */set:function set(newPath){this._location.pathname=newPath;}},{key:'search',get:function get(){return this._location.search;}/**
     * @return {?}
     */},{key:'hash',get:function get(){return this._location.hash;}}]);return BrowserPlatformLocation;}(__WEBPACK_IMPORTED_MODULE_0__angular_common__["c" /* PlatformLocation */]);BrowserPlatformLocation.decorators=[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["B" /* Injectable */]}];/** @nocollapse */BrowserPlatformLocation.ctorParameters=function(){return[{type:undefined,decorators:[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["I" /* Inject */],args:[DOCUMENT]}]}];};/**
 * A service that can be used to get and add meta tags.
 *
 * \@experimental
 */var Meta=function(){/**
     * @param {?} _doc
     */function Meta(_doc){_classCallCheck(this,Meta);this._doc=_doc;this._dom=getDOM();}/**
     * @param {?} tag
     * @param {?=} forceCreation
     * @return {?}
     */_createClass(Meta,[{key:'addTag',value:function addTag(tag){var forceCreation=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(!tag)return null;return this._getOrCreateElement(tag,forceCreation);}/**
     * @param {?} tags
     * @param {?=} forceCreation
     * @return {?}
     */},{key:'addTags',value:function addTags(tags){var _this7=this;var forceCreation=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(!tags)return[];return tags.reduce(function(result,tag){if(tag){result.push(_this7._getOrCreateElement(tag,forceCreation));}return result;},[]);}/**
     * @param {?} attrSelector
     * @return {?}
     */},{key:'getTag',value:function getTag(attrSelector){if(!attrSelector)return null;return this._dom.querySelector(this._doc,'meta['+attrSelector+']');}/**
     * @param {?} attrSelector
     * @return {?}
     */},{key:'getTags',value:function getTags(attrSelector){if(!attrSelector)return[];var/** @type {?} */list/*NodeList*/=this._dom.querySelectorAll(this._doc,'meta['+attrSelector+']');return list?[].slice.call(list):[];}/**
     * @param {?} tag
     * @param {?=} selector
     * @return {?}
     */},{key:'updateTag',value:function updateTag(tag,selector){if(!tag)return null;selector=selector||this._parseSelector(tag);var/** @type {?} */meta=this.getTag(selector);if(meta){return this._setMetaElementAttributes(tag,meta);}return this._getOrCreateElement(tag,true);}/**
     * @param {?} attrSelector
     * @return {?}
     */},{key:'removeTag',value:function removeTag(attrSelector){this.removeTagElement(this.getTag(attrSelector));}/**
     * @param {?} meta
     * @return {?}
     */},{key:'removeTagElement',value:function removeTagElement(meta){if(meta){this._dom.remove(meta);}}/**
     * @param {?} meta
     * @param {?=} forceCreation
     * @return {?}
     */},{key:'_getOrCreateElement',value:function _getOrCreateElement(meta){var forceCreation=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(!forceCreation){var/** @type {?} */selector=this._parseSelector(meta);var/** @type {?} */elem=this.getTag(selector);// It's allowed to have multiple elements with the same name so it's not enough to
// just check that element with the same name already present on the page. We also need to
// check if element has tag attributes
if(elem&&this._containsAttributes(meta,elem))return elem;}var/** @type {?} */element=this._dom.createElement('meta');this._setMetaElementAttributes(meta,element);var/** @type {?} */head=this._dom.getElementsByTagName(this._doc,'head')[0];this._dom.appendChild(head,element);return element;}/**
     * @param {?} tag
     * @param {?} el
     * @return {?}
     */},{key:'_setMetaElementAttributes',value:function _setMetaElementAttributes(tag,el){var _this8=this;Object.keys(tag).forEach(function(prop){return _this8._dom.setAttribute(el,prop,tag[prop]);});return el;}/**
     * @param {?} tag
     * @return {?}
     */},{key:'_parseSelector',value:function _parseSelector(tag){var/** @type {?} */attr=tag.name?'name':'property';return attr+'="'+tag[attr]+'"';}/**
     * @param {?} tag
     * @param {?} elem
     * @return {?}
     */},{key:'_containsAttributes',value:function _containsAttributes(tag,elem){var _this9=this;return Object.keys(tag).every(function(key){return _this9._dom.getAttribute(elem,key)===tag[key];});}}]);return Meta;}();Meta.decorators=[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["B" /* Injectable */]}];/** @nocollapse */Meta.ctorParameters=function(){return[{type:undefined,decorators:[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["I" /* Inject */],args:[DOCUMENT]}]}];};/**
 * An id that identifies a particular application being bootstrapped, that should
 * match across the client/server boundary.
 */var/** @type {?} */TRANSITION_ID=new __WEBPACK_IMPORTED_MODULE_1__angular_core__["n" /* InjectionToken */]('TRANSITION_ID');/**
 * @param {?} transitionId
 * @param {?} document
 * @return {?}
 */function bootstrapListenerFactory(transitionId,document){var/** @type {?} */factory=function factory(){var/** @type {?} */dom=getDOM();var/** @type {?} */styles=Array.prototype.slice.apply(dom.querySelectorAll(document,'style[ng-transition]'));styles.filter(function(el){return dom.getAttribute(el,'ng-transition')===transitionId;}).forEach(function(el){return dom.remove(el);});};return factory;}var/** @type {?} */SERVER_TRANSITION_PROVIDERS=[{provide:__WEBPACK_IMPORTED_MODULE_1__angular_core__["N" /* APP_INITIALIZER */],useFactory:bootstrapListenerFactory,deps:[TRANSITION_ID,DOCUMENT],multi:true}];var BrowserGetTestability=function(){function BrowserGetTestability(){_classCallCheck(this,BrowserGetTestability);}_createClass(BrowserGetTestability,[{key:'addToWindow',/**
     * @param {?} registry
     * @return {?}
     */value:function addToWindow(registry){global$1.getAngularTestability=function(elem){var findInAncestors=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var/** @type {?} */testability=registry.findTestabilityInTree(elem,findInAncestors);if(testability==null){throw new Error('Could not find testability for element.');}return testability;};global$1.getAllAngularTestabilities=function(){return registry.getAllTestabilities();};global$1.getAllAngularRootElements=function(){return registry.getAllRootElements();};var/** @type {?} */whenAllStable=function whenAllStable(callback/** TODO #9100 */){var/** @type {?} */testabilities=global$1.getAllAngularTestabilities();var/** @type {?} */count=testabilities.length;var/** @type {?} */didWork=false;var/** @type {?} */decrement=function decrement(didWork_/** TODO #9100 */){didWork=didWork||didWork_;count--;if(count==0){callback(didWork);}};testabilities.forEach(function(testability/** TODO #9100 */){testability.whenStable(decrement);});};if(!global$1['frameworkStabilizers']){global$1['frameworkStabilizers']=[];}global$1['frameworkStabilizers'].push(whenAllStable);}/**
     * @param {?} registry
     * @param {?} elem
     * @param {?} findInAncestors
     * @return {?}
     */},{key:'findTestabilityInTree',value:function findTestabilityInTree(registry,elem,findInAncestors){if(elem==null){return null;}var/** @type {?} */t=registry.getTestability(elem);if(isPresent(t)){return t;}else if(!findInAncestors){return null;}if(getDOM().isShadowRoot(elem)){return this.findTestabilityInTree(registry,getDOM().getHost(elem),true);}return this.findTestabilityInTree(registry,getDOM().parentElement(elem),true);}}],[{key:'init',/**
     * @return {?}
     */value:function init(){__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["O" /* setTestabilityGetter */])(new BrowserGetTestability());}}]);return BrowserGetTestability;}();/**
 * A service that can be used to get and set the title of a current HTML document.
 *
 * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)
 * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements
 * (representing the `<title>` tag). Instead, this service can be used to set and get the current
 * title value.
 *
 * \@experimental
 */var Title=function(){/**
     * @param {?} _doc
     */function Title(_doc){_classCallCheck(this,Title);this._doc=_doc;}/**
     * Get the title of the current HTML document.
     * @return {?}
     */_createClass(Title,[{key:'getTitle',value:function getTitle(){return getDOM().getTitle(this._doc);}/**
     * Set the title of the current HTML document.
     * @param {?} newTitle
     * @return {?}
     */},{key:'setTitle',value:function setTitle(newTitle){getDOM().setTitle(this._doc,newTitle);}}]);return Title;}();Title.decorators=[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["B" /* Injectable */]}];/** @nocollapse */Title.ctorParameters=function(){return[{type:undefined,decorators:[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["I" /* Inject */],args:[DOCUMENT]}]}];};/**
 * Wraps Javascript Objects
 */var StringMapWrapper=function(){function StringMapWrapper(){_classCallCheck(this,StringMapWrapper);}_createClass(StringMapWrapper,null,[{key:'merge',/**
     * @param {?} m1
     * @param {?} m2
     * @return {?}
     */value:function merge(m1,m2){var/** @type {?} */m={};var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=Object.keys(m1)[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=true){var k=_step2.value;m[k]=m1[k];}}catch(err){_didIteratorError2=true;_iteratorError2=err;}finally{try{if(!_iteratorNormalCompletion2&&_iterator2.return){_iterator2.return();}}finally{if(_didIteratorError2){throw _iteratorError2;}}}var _iteratorNormalCompletion3=true;var _didIteratorError3=false;var _iteratorError3=undefined;try{for(var _iterator3=Object.keys(m2)[Symbol.iterator](),_step3;!(_iteratorNormalCompletion3=(_step3=_iterator3.next()).done);_iteratorNormalCompletion3=true){var _k=_step3.value;m[_k]=m2[_k];}}catch(err){_didIteratorError3=true;_iteratorError3=err;}finally{try{if(!_iteratorNormalCompletion3&&_iterator3.return){_iterator3.return();}}finally{if(_didIteratorError3){throw _iteratorError3;}}}return m;}/**
     * @param {?} m1
     * @param {?} m2
     * @return {?}
     */},{key:'equals',value:function equals(m1,m2){var/** @type {?} */k1=Object.keys(m1);var/** @type {?} */k2=Object.keys(m2);if(k1.length!=k2.length){return false;}for(var/** @type {?} */i=0;i<k1.length;i++){var/** @type {?} */key=k1[i];if(m1[key]!==m2[key]){return false;}}return true;}}]);return StringMapWrapper;}();/**
 * @stable
 */var/** @type {?} */EVENT_MANAGER_PLUGINS=new __WEBPACK_IMPORTED_MODULE_1__angular_core__["n" /* InjectionToken */]('EventManagerPlugins');/**
 * \@stable
 */var EventManager=function(){/**
     * @param {?} plugins
     * @param {?} _zone
     */function EventManager(plugins,_zone){var _this10=this;_classCallCheck(this,EventManager);this._zone=_zone;this._eventNameToPlugin=new Map();plugins.forEach(function(p){return p.manager=_this10;});this._plugins=plugins.slice().reverse();}/**
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */_createClass(EventManager,[{key:'addEventListener',value:function addEventListener(element,eventName,handler){var/** @type {?} */plugin=this._findPluginFor(eventName);return plugin.addEventListener(element,eventName,handler);}/**
     * @param {?} target
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */},{key:'addGlobalEventListener',value:function addGlobalEventListener(target,eventName,handler){var/** @type {?} */plugin=this._findPluginFor(eventName);return plugin.addGlobalEventListener(target,eventName,handler);}/**
     * @return {?}
     */},{key:'getZone',value:function getZone(){return this._zone;}/**
     * \@internal
     * @param {?} eventName
     * @return {?}
     */},{key:'_findPluginFor',value:function _findPluginFor(eventName){var/** @type {?} */plugin=this._eventNameToPlugin.get(eventName);if(plugin){return plugin;}var/** @type {?} */plugins=this._plugins;for(var/** @type {?} */i=0;i<plugins.length;i++){var/** @type {?} */_plugin=plugins[i];if(_plugin.supports(eventName)){this._eventNameToPlugin.set(eventName,_plugin);return _plugin;}}throw new Error('No event manager plugin found for event '+eventName);}}]);return EventManager;}();EventManager.decorators=[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["B" /* Injectable */]}];/** @nocollapse */EventManager.ctorParameters=function(){return[{type:Array,decorators:[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["I" /* Inject */],args:[EVENT_MANAGER_PLUGINS]}]},{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["k" /* NgZone */]}];};/**
 * @abstract
 */var EventManagerPlugin=function(){/**
     * @param {?} _doc
     */function EventManagerPlugin(_doc){_classCallCheck(this,EventManagerPlugin);this._doc=_doc;}/**
     * @abstract
     * @param {?} eventName
     * @return {?}
     */_createClass(EventManagerPlugin,[{key:'supports',value:function supports(eventName){}/**
     * @abstract
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */},{key:'addEventListener',value:function addEventListener(element,eventName,handler){}/**
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */},{key:'addGlobalEventListener',value:function addGlobalEventListener(element,eventName,handler){var/** @type {?} */target=getDOM().getGlobalEventTarget(this._doc,element);if(!target){throw new Error('Unsupported event target '+target+' for event '+eventName);}return this.addEventListener(target,eventName,handler);}}]);return EventManagerPlugin;}();var SharedStylesHost=function(){function SharedStylesHost(){_classCallCheck(this,SharedStylesHost);/** @internal */this._stylesSet=new Set();}/**
     * @param {?} styles
     * @return {?}
     */_createClass(SharedStylesHost,[{key:'addStyles',value:function addStyles(styles){var _this11=this;var/** @type {?} */additions=new Set();styles.forEach(function(style){if(!_this11._stylesSet.has(style)){_this11._stylesSet.add(style);additions.add(style);}});this.onStylesAdded(additions);}/**
     * @param {?} additions
     * @return {?}
     */},{key:'onStylesAdded',value:function onStylesAdded(additions){}/**
     * @return {?}
     */},{key:'getAllStyles',value:function getAllStyles(){return Array.from(this._stylesSet);}}]);return SharedStylesHost;}();SharedStylesHost.decorators=[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["B" /* Injectable */]}];/** @nocollapse */SharedStylesHost.ctorParameters=function(){return[];};var DomSharedStylesHost=function(_SharedStylesHost){_inherits(DomSharedStylesHost,_SharedStylesHost);/**
     * @param {?} _doc
     */function DomSharedStylesHost(_doc){_classCallCheck(this,DomSharedStylesHost);var _this12=_possibleConstructorReturn(this,(DomSharedStylesHost.__proto__||Object.getPrototypeOf(DomSharedStylesHost)).call(this));_this12._doc=_doc;_this12._hostNodes=new Set();_this12._styleNodes=new Set();_this12._hostNodes.add(_doc.head);return _this12;}/**
     * @param {?} styles
     * @param {?} host
     * @return {?}
     */_createClass(DomSharedStylesHost,[{key:'_addStylesToHost',value:function _addStylesToHost(styles,host){var _this13=this;styles.forEach(function(style){var/** @type {?} */styleEl=_this13._doc.createElement('style');styleEl.textContent=style;_this13._styleNodes.add(host.appendChild(styleEl));});}/**
     * @param {?} hostNode
     * @return {?}
     */},{key:'addHost',value:function addHost(hostNode){this._addStylesToHost(this._stylesSet,hostNode);this._hostNodes.add(hostNode);}/**
     * @param {?} hostNode
     * @return {?}
     */},{key:'removeHost',value:function removeHost(hostNode){this._hostNodes.delete(hostNode);}/**
     * @param {?} additions
     * @return {?}
     */},{key:'onStylesAdded',value:function onStylesAdded(additions){var _this14=this;this._hostNodes.forEach(function(hostNode){return _this14._addStylesToHost(additions,hostNode);});}/**
     * @return {?}
     */},{key:'ngOnDestroy',value:function ngOnDestroy(){this._styleNodes.forEach(function(styleNode){return getDOM().remove(styleNode);});}}]);return DomSharedStylesHost;}(SharedStylesHost);DomSharedStylesHost.decorators=[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["B" /* Injectable */]}];/** @nocollapse */DomSharedStylesHost.ctorParameters=function(){return[{type:undefined,decorators:[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["I" /* Inject */],args:[DOCUMENT]}]}];};var/** @type {?} */NAMESPACE_URIS={'xlink':'http://www.w3.org/1999/xlink','svg':'http://www.w3.org/2000/svg','xhtml':'http://www.w3.org/1999/xhtml','xml':'http://www.w3.org/XML/1998/namespace'};var/** @type {?} */TEMPLATE_COMMENT_TEXT='template bindings={}';var/** @type {?} */TEMPLATE_BINDINGS_EXP=/^template bindings=(.*)$/;/**
 * @abstract
 */var DomRootRenderer=function(){/**
     * @param {?} document
     * @param {?} eventManager
     * @param {?} sharedStylesHost
     * @param {?} animationDriver
     * @param {?} appId
     */function DomRootRenderer(document,eventManager,sharedStylesHost,animationDriver,appId){_classCallCheck(this,DomRootRenderer);this.document=document;this.eventManager=eventManager;this.sharedStylesHost=sharedStylesHost;this.animationDriver=animationDriver;this.appId=appId;this.registeredComponents=new Map();}/**
     * @param {?} componentProto
     * @return {?}
     */_createClass(DomRootRenderer,[{key:'renderComponent',value:function renderComponent(componentProto){var/** @type {?} */renderer=this.registeredComponents.get(componentProto.id);if(!renderer){renderer=new DomRenderer(this,componentProto,this.animationDriver,this.appId+'-'+componentProto.id);this.registeredComponents.set(componentProto.id,renderer);}return renderer;}}]);return DomRootRenderer;}();var DomRootRenderer_=function(_DomRootRenderer){_inherits(DomRootRenderer_,_DomRootRenderer);/**
     * @param {?} _document
     * @param {?} _eventManager
     * @param {?} sharedStylesHost
     * @param {?} animationDriver
     * @param {?} appId
     */function DomRootRenderer_(_document,_eventManager,sharedStylesHost,animationDriver,appId){_classCallCheck(this,DomRootRenderer_);var _this15=_possibleConstructorReturn(this,(DomRootRenderer_.__proto__||Object.getPrototypeOf(DomRootRenderer_)).call(this,_document,_eventManager,sharedStylesHost,animationDriver,appId));throw new Error('RootRenderer is no longer supported. Please use the `RendererFactoryV2` instead!');return _this15;}return DomRootRenderer_;}(DomRootRenderer);DomRootRenderer_.decorators=[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["B" /* Injectable */]}];/** @nocollapse */DomRootRenderer_.ctorParameters=function(){return[{type:undefined,decorators:[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["I" /* Inject */],args:[DOCUMENT]}]},{type:EventManager},{type:DomSharedStylesHost},{type:AnimationDriver},{type:undefined,decorators:[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["I" /* Inject */],args:[__WEBPACK_IMPORTED_MODULE_1__angular_core__["P" /* APP_ID */]]}]}];};var/** @type {?} */DIRECT_DOM_RENDERER={/**
     * @param {?} node
     * @return {?}
     */remove:function remove(node){if(node.parentNode){node.parentNode.removeChild(node);}},/**
     * @param {?} node
     * @param {?} parent
     * @return {?}
     */appendChild:function appendChild(node,parent){parent.appendChild(node);},/**
     * @param {?} node
     * @param {?} refNode
     * @return {?}
     */insertBefore:function insertBefore(node,refNode){refNode.parentNode.insertBefore(node,refNode);},/**
     * @param {?} node
     * @return {?}
     */nextSibling:function nextSibling(node){return node.nextSibling;},/**
     * @param {?} node
     * @return {?}
     */parentElement:function parentElement(node){return node.parentNode;}};var DomRenderer=function(){/**
     * @param {?} _rootRenderer
     * @param {?} componentProto
     * @param {?} _animationDriver
     * @param {?} styleShimId
     */function DomRenderer(_rootRenderer,componentProto,_animationDriver,styleShimId){_classCallCheck(this,DomRenderer);this._rootRenderer=_rootRenderer;this.componentProto=componentProto;this._animationDriver=_animationDriver;this.directRenderer=DIRECT_DOM_RENDERER;this._styles=flattenStyles(styleShimId,componentProto.styles,[]);if(componentProto.encapsulation!==__WEBPACK_IMPORTED_MODULE_1__angular_core__["Q" /* ViewEncapsulation */].Native){this._rootRenderer.sharedStylesHost.addStyles(this._styles);}if(this.componentProto.encapsulation===__WEBPACK_IMPORTED_MODULE_1__angular_core__["Q" /* ViewEncapsulation */].Emulated){this._contentAttr=shimContentAttribute(styleShimId);this._hostAttr=shimHostAttribute(styleShimId);}else{this._contentAttr=null;this._hostAttr=null;}}/**
     * @param {?} selectorOrNode
     * @param {?} debugInfo
     * @return {?}
     */_createClass(DomRenderer,[{key:'selectRootElement',value:function selectRootElement(selectorOrNode,debugInfo){var/** @type {?} */el=void 0;if(typeof selectorOrNode==='string'){el=this._rootRenderer.document.querySelector(selectorOrNode);if(!el){throw new Error('The selector "'+selectorOrNode+'" did not match any elements');}}else{el=selectorOrNode;}while(el.firstChild){el.removeChild(el.firstChild);}return el;}/**
     * @param {?} parent
     * @param {?} name
     * @param {?} debugInfo
     * @return {?}
     */},{key:'createElement',value:function createElement(parent,name,debugInfo){var/** @type {?} */el=void 0;if(isNamespaced(name)){var/** @type {?} */nsAndName=splitNamespace(name);el=document.createElementNS(NAMESPACE_URIS[nsAndName[0]],nsAndName[1]);}else{el=document.createElement(name);}if(this._contentAttr){el.setAttribute(this._contentAttr,'');}if(parent){parent.appendChild(el);}return el;}/**
     * @param {?} hostElement
     * @return {?}
     */},{key:'createViewRoot',value:function createViewRoot(hostElement){var/** @type {?} */nodesParent=void 0;if(this.componentProto.encapsulation===__WEBPACK_IMPORTED_MODULE_1__angular_core__["Q" /* ViewEncapsulation */].Native){nodesParent=hostElement.createShadowRoot();this._rootRenderer.sharedStylesHost.addHost(nodesParent);for(var/** @type {?} */i=0;i<this._styles.length;i++){var/** @type {?} */styleEl=document.createElement('style');styleEl.textContent=this._styles[i];nodesParent.appendChild(styleEl);}}else{if(this._hostAttr){hostElement.setAttribute(this._hostAttr,'');}nodesParent=hostElement;}return nodesParent;}/**
     * @param {?} parentElement
     * @param {?} debugInfo
     * @return {?}
     */},{key:'createTemplateAnchor',value:function createTemplateAnchor(parentElement,debugInfo){var/** @type {?} */comment=document.createComment(TEMPLATE_COMMENT_TEXT);if(parentElement){parentElement.appendChild(comment);}return comment;}/**
     * @param {?} parentElement
     * @param {?} value
     * @param {?} debugInfo
     * @return {?}
     */},{key:'createText',value:function createText(parentElement,value,debugInfo){var/** @type {?} */node=document.createTextNode(value);if(parentElement){parentElement.appendChild(node);}return node;}/**
     * @param {?} parentElement
     * @param {?} nodes
     * @return {?}
     */},{key:'projectNodes',value:function projectNodes(parentElement,nodes){if(!parentElement)return;appendNodes(parentElement,nodes);}/**
     * @param {?} node
     * @param {?} viewRootNodes
     * @return {?}
     */},{key:'attachViewAfter',value:function attachViewAfter(node,viewRootNodes){moveNodesAfterSibling(node,viewRootNodes);}/**
     * @param {?} viewRootNodes
     * @return {?}
     */},{key:'detachView',value:function detachView(viewRootNodes){for(var/** @type {?} */i=0;i<viewRootNodes.length;i++){var/** @type {?} */node=viewRootNodes[i];if(node.parentNode){node.parentNode.removeChild(node);}}}/**
     * @param {?} hostElement
     * @param {?} viewAllNodes
     * @return {?}
     */},{key:'destroyView',value:function destroyView(hostElement,viewAllNodes){if(this.componentProto.encapsulation===__WEBPACK_IMPORTED_MODULE_1__angular_core__["Q" /* ViewEncapsulation */].Native&&hostElement){this._rootRenderer.sharedStylesHost.removeHost(hostElement.shadowRoot);}}/**
     * @param {?} renderElement
     * @param {?} name
     * @param {?} callback
     * @return {?}
     */},{key:'listen',value:function listen(renderElement,name,callback){return this._rootRenderer.eventManager.addEventListener(renderElement,name,decoratePreventDefault(callback));}/**
     * @param {?} target
     * @param {?} name
     * @param {?} callback
     * @return {?}
     */},{key:'listenGlobal',value:function listenGlobal(target,name,callback){return this._rootRenderer.eventManager.addGlobalEventListener(target,name,decoratePreventDefault(callback));}/**
     * @param {?} renderElement
     * @param {?} propertyName
     * @param {?} propertyValue
     * @return {?}
     */},{key:'setElementProperty',value:function setElementProperty(renderElement,propertyName,propertyValue){renderElement[propertyName]=propertyValue;}/**
     * @param {?} renderElement
     * @param {?} attributeName
     * @param {?} attributeValue
     * @return {?}
     */},{key:'setElementAttribute',value:function setElementAttribute(renderElement,attributeName,attributeValue){var/** @type {?} */attrNs=void 0;var/** @type {?} */attrNameWithoutNs=attributeName;if(isNamespaced(attributeName)){var/** @type {?} */nsAndName=splitNamespace(attributeName);attrNameWithoutNs=nsAndName[1];attributeName=nsAndName[0]+':'+nsAndName[1];attrNs=NAMESPACE_URIS[nsAndName[0]];}if(isPresent(attributeValue)){if(attrNs){renderElement.setAttributeNS(attrNs,attributeName,attributeValue);}else{renderElement.setAttribute(attributeName,attributeValue);}}else{if(isPresent(attrNs)){renderElement.removeAttributeNS(attrNs,attrNameWithoutNs);}else{renderElement.removeAttribute(attributeName);}}}/**
     * @param {?} renderElement
     * @param {?} propertyName
     * @param {?} propertyValue
     * @return {?}
     */},{key:'setBindingDebugInfo',value:function setBindingDebugInfo(renderElement,propertyName,propertyValue){if(renderElement.nodeType===Node.COMMENT_NODE){var/** @type {?} */existingBindings=renderElement.nodeValue.replace(/\n/g,'').match(TEMPLATE_BINDINGS_EXP);var/** @type {?} */parsedBindings=JSON.parse(existingBindings[1]);parsedBindings[propertyName]=propertyValue;renderElement.nodeValue=TEMPLATE_COMMENT_TEXT.replace('{}',JSON.stringify(parsedBindings,null,2));}else{// Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers
propertyName=propertyName.replace(/\$/g,'_');this.setElementAttribute(renderElement,propertyName,propertyValue);}}/**
     * @param {?} renderElement
     * @param {?} className
     * @param {?} isAdd
     * @return {?}
     */},{key:'setElementClass',value:function setElementClass(renderElement,className,isAdd){if(isAdd){renderElement.classList.add(className);}else{renderElement.classList.remove(className);}}/**
     * @param {?} renderElement
     * @param {?} styleName
     * @param {?} styleValue
     * @return {?}
     */},{key:'setElementStyle',value:function setElementStyle(renderElement,styleName,styleValue){if(isPresent(styleValue)){renderElement.style[styleName]=stringify(styleValue);}else{// IE requires '' instead of null
// see https://github.com/angular/angular/issues/7916
renderElement.style[styleName]='';}}/**
     * @param {?} renderElement
     * @param {?} methodName
     * @param {?} args
     * @return {?}
     */},{key:'invokeElementMethod',value:function invokeElementMethod(renderElement,methodName,args){renderElement[methodName].apply(renderElement,args);}/**
     * @param {?} renderNode
     * @param {?} text
     * @return {?}
     */},{key:'setText',value:function setText(renderNode,text){renderNode.nodeValue=text;}/**
     * @param {?} element
     * @param {?} startingStyles
     * @param {?} keyframes
     * @param {?} duration
     * @param {?} delay
     * @param {?} easing
     * @param {?=} previousPlayers
     * @return {?}
     */},{key:'animate',value:function animate(element,startingStyles,keyframes,duration,delay,easing){var previousPlayers=arguments.length>6&&arguments[6]!==undefined?arguments[6]:[];if(this._rootRenderer.document.body.contains(element)){return this._animationDriver.animate(element,startingStyles,keyframes,duration,delay,easing,previousPlayers);}return new __WEBPACK_IMPORTED_MODULE_1__angular_core__["L" /* ɵNoOpAnimationPlayer */]();}}]);return DomRenderer;}();/**
 * @param {?} sibling
 * @param {?} nodes
 * @return {?}
 */function moveNodesAfterSibling(sibling,nodes){var/** @type {?} */parent=sibling.parentNode;if(nodes.length>0&&parent){var/** @type {?} */nextSibling=sibling.nextSibling;if(nextSibling){for(var/** @type {?} */i=0;i<nodes.length;i++){parent.insertBefore(nodes[i],nextSibling);}}else{for(var/** @type {?} */_i=0;_i<nodes.length;_i++){parent.appendChild(nodes[_i]);}}}}/**
 * @param {?} parent
 * @param {?} nodes
 * @return {?}
 */function appendNodes(parent,nodes){for(var/** @type {?} */i=0;i<nodes.length;i++){parent.appendChild(nodes[i]);}}/**
 * @param {?} eventHandler
 * @return {?}
 */function decoratePreventDefault(eventHandler){return function(event){var/** @type {?} */allowDefaultBehavior=eventHandler(event);if(allowDefaultBehavior===false){// TODO(tbosch): move preventDefault into event plugins...
event.preventDefault();event.returnValue=false;}};}var/** @type {?} */COMPONENT_REGEX=/%COMP%/g;var/** @type {?} */COMPONENT_VARIABLE='%COMP%';var/** @type {?} */HOST_ATTR='_nghost-'+COMPONENT_VARIABLE;var/** @type {?} */CONTENT_ATTR='_ngcontent-'+COMPONENT_VARIABLE;/**
 * @param {?} componentShortId
 * @return {?}
 */function shimContentAttribute(componentShortId){return CONTENT_ATTR.replace(COMPONENT_REGEX,componentShortId);}/**
 * @param {?} componentShortId
 * @return {?}
 */function shimHostAttribute(componentShortId){return HOST_ATTR.replace(COMPONENT_REGEX,componentShortId);}/**
 * @param {?} compId
 * @param {?} styles
 * @param {?} target
 * @return {?}
 */function flattenStyles(compId,styles,target){for(var/** @type {?} */i=0;i<styles.length;i++){var/** @type {?} */style=styles[i];if(Array.isArray(style)){flattenStyles(compId,style,target);}else{style=style.replace(COMPONENT_REGEX,compId);target.push(style);}}return target;}var/** @type {?} */NS_PREFIX_RE=/^:([^:]+):(.+)$/;/**
 * @param {?} name
 * @return {?}
 */function isNamespaced(name){return name[0]===':';}/**
 * @param {?} name
 * @return {?}
 */function splitNamespace(name){var/** @type {?} */match=name.match(NS_PREFIX_RE);return[match[1],match[2]];}var DomRendererFactoryV2=function(){/**
     * @param {?} eventManager
     * @param {?} sharedStylesHost
     */function DomRendererFactoryV2(eventManager,sharedStylesHost){_classCallCheck(this,DomRendererFactoryV2);this.eventManager=eventManager;this.sharedStylesHost=sharedStylesHost;this.rendererByCompId=new Map();this.defaultRenderer=new DefaultDomRendererV2(eventManager);}_createClass(DomRendererFactoryV2,[{key:'createRenderer',/**
     * @param {?} element
     * @param {?} type
     * @return {?}
     */value:function createRenderer(element,type){if(!element||!type){return this.defaultRenderer;}switch(type.encapsulation){case __WEBPACK_IMPORTED_MODULE_1__angular_core__["Q" /* ViewEncapsulation */].Emulated:{var/** @type {?} */renderer=this.rendererByCompId.get(type.id);if(!renderer){renderer=new EmulatedEncapsulationDomRendererV2(this.eventManager,this.sharedStylesHost,type);this.rendererByCompId.set(type.id,renderer);}renderer.applyToHost(element);return renderer;}case __WEBPACK_IMPORTED_MODULE_1__angular_core__["Q" /* ViewEncapsulation */].Native:return new ShadowDomRenderer(this.eventManager,this.sharedStylesHost,element,type);default:{if(!this.rendererByCompId.has(type.id)){var/** @type {?} */styles=flattenStyles(type.id,type.styles,[]);this.sharedStylesHost.addStyles(styles);this.rendererByCompId.set(type.id,this.defaultRenderer);}return this.defaultRenderer;}}}}]);return DomRendererFactoryV2;}();DomRendererFactoryV2.decorators=[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["B" /* Injectable */]}];/** @nocollapse */DomRendererFactoryV2.ctorParameters=function(){return[{type:EventManager},{type:DomSharedStylesHost}];};var DefaultDomRendererV2=function(){/**
     * @param {?} eventManager
     */function DefaultDomRendererV2(eventManager){_classCallCheck(this,DefaultDomRendererV2);this.eventManager=eventManager;this.data=Object.create(null);}/**
     * @return {?}
     */_createClass(DefaultDomRendererV2,[{key:'destroy',value:function destroy(){}/**
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */},{key:'createElement',value:function createElement(name,namespace){if(namespace){return document.createElementNS(NAMESPACE_URIS[namespace],name);}return document.createElement(name);}/**
     * @param {?} value
     * @return {?}
     */},{key:'createComment',value:function createComment(value){return document.createComment(value);}/**
     * @param {?} value
     * @return {?}
     */},{key:'createText',value:function createText(value){return document.createTextNode(value);}/**
     * @param {?} parent
     * @param {?} newChild
     * @return {?}
     */},{key:'appendChild',value:function appendChild(parent,newChild){parent.appendChild(newChild);}/**
     * @param {?} parent
     * @param {?} newChild
     * @param {?} refChild
     * @return {?}
     */},{key:'insertBefore',value:function insertBefore(parent,newChild,refChild){if(parent){parent.insertBefore(newChild,refChild);}}/**
     * @param {?} parent
     * @param {?} oldChild
     * @return {?}
     */},{key:'removeChild',value:function removeChild(parent,oldChild){if(parent){parent.removeChild(oldChild);}}/**
     * @param {?} selectorOrNode
     * @return {?}
     */},{key:'selectRootElement',value:function selectRootElement(selectorOrNode){var/** @type {?} */el=typeof selectorOrNode==='string'?document.querySelector(selectorOrNode):selectorOrNode;if(!el){throw new Error('The selector "'+selectorOrNode+'" did not match any elements');}el.textContent='';return el;}/**
     * @param {?} node
     * @return {?}
     */},{key:'parentNode',value:function parentNode(node){return node.parentNode;}/**
     * @param {?} node
     * @return {?}
     */},{key:'nextSibling',value:function nextSibling(node){return node.nextSibling;}/**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @param {?=} namespace
     * @return {?}
     */},{key:'setAttribute',value:function setAttribute(el,name,value,namespace){if(namespace){el.setAttributeNS(NAMESPACE_URIS[namespace],namespace+':'+name,value);}else{el.setAttribute(name,value);}}/**
     * @param {?} el
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */},{key:'removeAttribute',value:function removeAttribute(el,name,namespace){if(namespace){el.removeAttributeNS(NAMESPACE_URIS[namespace],name);}else{el.removeAttribute(name);}}/**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */},{key:'addClass',value:function addClass(el,name){el.classList.add(name);}/**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */},{key:'removeClass',value:function removeClass(el,name){el.classList.remove(name);}/**
     * @param {?} el
     * @param {?} style
     * @param {?} value
     * @param {?} hasVendorPrefix
     * @param {?} hasImportant
     * @return {?}
     */},{key:'setStyle',value:function setStyle(el,style,value,hasVendorPrefix,hasImportant){if(hasVendorPrefix||hasImportant){el.style.setProperty(style,value,hasImportant?'important':'');}else{el.style[style]=value;}}/**
     * @param {?} el
     * @param {?} style
     * @param {?} hasVendorPrefix
     * @return {?}
     */},{key:'removeStyle',value:function removeStyle(el,style,hasVendorPrefix){if(hasVendorPrefix){el.style.removeProperty(style);}else{// IE requires '' instead of null
// see https://github.com/angular/angular/issues/7916
el.style[style]='';}}/**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @return {?}
     */},{key:'setProperty',value:function setProperty(el,name,value){el[name]=value;}/**
     * @param {?} node
     * @param {?} value
     * @return {?}
     */},{key:'setValue',value:function setValue(node,value){node.nodeValue=value;}/**
     * @param {?} target
     * @param {?} event
     * @param {?} callback
     * @return {?}
     */},{key:'listen',value:function listen(target,event,callback){if(typeof target==='string'){return this.eventManager.addGlobalEventListener(target,event,decoratePreventDefault(callback));}return this.eventManager.addEventListener(target,event,decoratePreventDefault(callback));}}]);return DefaultDomRendererV2;}();var EmulatedEncapsulationDomRendererV2=function(_DefaultDomRendererV){_inherits(EmulatedEncapsulationDomRendererV2,_DefaultDomRendererV);/**
     * @param {?} eventManager
     * @param {?} sharedStylesHost
     * @param {?} component
     */function EmulatedEncapsulationDomRendererV2(eventManager,sharedStylesHost,component){_classCallCheck(this,EmulatedEncapsulationDomRendererV2);var _this16=_possibleConstructorReturn(this,(EmulatedEncapsulationDomRendererV2.__proto__||Object.getPrototypeOf(EmulatedEncapsulationDomRendererV2)).call(this,eventManager));_this16.component=component;var styles=flattenStyles(component.id,component.styles,[]);sharedStylesHost.addStyles(styles);_this16.contentAttr=shimContentAttribute(component.id);_this16.hostAttr=shimHostAttribute(component.id);return _this16;}/**
     * @param {?} element
     * @return {?}
     */_createClass(EmulatedEncapsulationDomRendererV2,[{key:'applyToHost',value:function applyToHost(element){_get(EmulatedEncapsulationDomRendererV2.prototype.__proto__||Object.getPrototypeOf(EmulatedEncapsulationDomRendererV2.prototype),'setAttribute',this).call(this,element,this.hostAttr,'');}/**
     * @param {?} parent
     * @param {?} name
     * @return {?}
     */},{key:'createElement',value:function createElement(parent,name){var/** @type {?} */el=_get(EmulatedEncapsulationDomRendererV2.prototype.__proto__||Object.getPrototypeOf(EmulatedEncapsulationDomRendererV2.prototype),'createElement',this).call(this,parent,name);_get(EmulatedEncapsulationDomRendererV2.prototype.__proto__||Object.getPrototypeOf(EmulatedEncapsulationDomRendererV2.prototype),'setAttribute',this).call(this,el,this.contentAttr,'');return el;}}]);return EmulatedEncapsulationDomRendererV2;}(DefaultDomRendererV2);var ShadowDomRenderer=function(_DefaultDomRendererV2){_inherits(ShadowDomRenderer,_DefaultDomRendererV2);/**
     * @param {?} eventManager
     * @param {?} sharedStylesHost
     * @param {?} hostEl
     * @param {?} component
     */function ShadowDomRenderer(eventManager,sharedStylesHost,hostEl,component){_classCallCheck(this,ShadowDomRenderer);var _this17=_possibleConstructorReturn(this,(ShadowDomRenderer.__proto__||Object.getPrototypeOf(ShadowDomRenderer)).call(this,eventManager));_this17.sharedStylesHost=sharedStylesHost;_this17.hostEl=hostEl;_this17.component=component;_this17.shadowRoot=hostEl.createShadowRoot();_this17.sharedStylesHost.addHost(_this17.shadowRoot);var styles=flattenStyles(component.id,component.styles,[]);for(var i=0;i<styles.length;i++){var styleEl=document.createElement('style');styleEl.textContent=styles[i];_this17.shadowRoot.appendChild(styleEl);}return _this17;}/**
     * @param {?} node
     * @return {?}
     */_createClass(ShadowDomRenderer,[{key:'nodeOrShadowRoot',value:function nodeOrShadowRoot(node){return node===this.hostEl?this.shadowRoot:node;}/**
     * @return {?}
     */},{key:'destroy',value:function destroy(){this.sharedStylesHost.removeHost(this.shadowRoot);}/**
     * @param {?} parent
     * @param {?} newChild
     * @return {?}
     */},{key:'appendChild',value:function appendChild(parent,newChild){return _get(ShadowDomRenderer.prototype.__proto__||Object.getPrototypeOf(ShadowDomRenderer.prototype),'appendChild',this).call(this,this.nodeOrShadowRoot(parent),newChild);}/**
     * @param {?} parent
     * @param {?} newChild
     * @param {?} refChild
     * @return {?}
     */},{key:'insertBefore',value:function insertBefore(parent,newChild,refChild){return _get(ShadowDomRenderer.prototype.__proto__||Object.getPrototypeOf(ShadowDomRenderer.prototype),'insertBefore',this).call(this,this.nodeOrShadowRoot(parent),newChild,refChild);}/**
     * @param {?} parent
     * @param {?} oldChild
     * @return {?}
     */},{key:'removeChild',value:function removeChild(parent,oldChild){return _get(ShadowDomRenderer.prototype.__proto__||Object.getPrototypeOf(ShadowDomRenderer.prototype),'removeChild',this).call(this,this.nodeOrShadowRoot(parent),oldChild);}/**
     * @param {?} node
     * @return {?}
     */},{key:'parentNode',value:function parentNode(node){return this.nodeOrShadowRoot(_get(ShadowDomRenderer.prototype.__proto__||Object.getPrototypeOf(ShadowDomRenderer.prototype),'parentNode',this).call(this,this.nodeOrShadowRoot(node)));}}]);return ShadowDomRenderer;}(DefaultDomRendererV2);var/** @type {?} */CORE_TOKENS={'ApplicationRef':__WEBPACK_IMPORTED_MODULE_1__angular_core__["D" /* ApplicationRef */],'NgZone':__WEBPACK_IMPORTED_MODULE_1__angular_core__["k" /* NgZone */]};var/** @type {?} */INSPECT_GLOBAL_NAME='ng.probe';var/** @type {?} */CORE_TOKENS_GLOBAL_NAME='ng.coreTokens';/**
 * Returns a {\@link DebugElement} for the given native DOM element, or
 * null if the given native element does not have an Angular view associated
 * with it.
 * @param {?} element
 * @return {?}
 */function inspectNativeElement(element){return __WEBPACK_IMPORTED_MODULE_1__angular_core__["R" /* getDebugNode */](element);}/**
 * Deprecated. Use the one from '\@angular/core'.
 * @deprecated
 */var NgProbeToken=/**
     * @param {?} name
     * @param {?} token
     */function NgProbeToken(name,token){_classCallCheck(this,NgProbeToken);this.name=name;this.token=token;};/**
 * @param {?} rootRenderer
 * @param {?} extraTokens
 * @param {?} coreTokens
 * @return {?}
 */function _createConditionalRootRenderer(rootRenderer,extraTokens,coreTokens){return __WEBPACK_IMPORTED_MODULE_1__angular_core__["p" /* isDevMode */]()?_createRootRenderer(rootRenderer,(extraTokens||[]).concat(coreTokens||[])):rootRenderer;}/**
 * @param {?} rootRenderer
 * @param {?} extraTokens
 * @return {?}
 */function _createRootRenderer(rootRenderer,extraTokens){getDOM().setGlobalVar(INSPECT_GLOBAL_NAME,inspectNativeElement);getDOM().setGlobalVar(CORE_TOKENS_GLOBAL_NAME,StringMapWrapper.merge(CORE_TOKENS,_ngProbeTokensToMap(extraTokens||[])));return new __WEBPACK_IMPORTED_MODULE_1__angular_core__["S" /* ɵDebugDomRootRenderer */](rootRenderer);}/**
 * @param {?} tokens
 * @return {?}
 */function _ngProbeTokensToMap(tokens){return tokens.reduce(function(prev,t){return prev[t.name]=t.token,prev;},{});}/**
 * Providers which support debugging Angular applications (e.g. via `ng.probe`).
 */var/** @type {?} */ELEMENT_PROBE_PROVIDERS=[{provide:__WEBPACK_IMPORTED_MODULE_1__angular_core__["T" /* RootRenderer */],useFactory:_createConditionalRootRenderer,deps:[DomRootRenderer,[NgProbeToken,new __WEBPACK_IMPORTED_MODULE_1__angular_core__["E" /* Optional */]()],[__WEBPACK_IMPORTED_MODULE_1__angular_core__["G" /* NgProbeToken */],new __WEBPACK_IMPORTED_MODULE_1__angular_core__["E" /* Optional */]()]]}];var DomEventsPlugin=function(_EventManagerPlugin){_inherits(DomEventsPlugin,_EventManagerPlugin);/**
     * @param {?} doc
     */function DomEventsPlugin(doc){_classCallCheck(this,DomEventsPlugin);return _possibleConstructorReturn(this,(DomEventsPlugin.__proto__||Object.getPrototypeOf(DomEventsPlugin)).call(this,doc));}/**
     * @param {?} eventName
     * @return {?}
     */_createClass(DomEventsPlugin,[{key:'supports',value:function supports(eventName){return true;}/**
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */},{key:'addEventListener',value:function addEventListener(element,eventName,handler){element.addEventListener(eventName,/** @type {?} */handler,false);return function(){return element.removeEventListener(eventName,/** @type {?} */handler,false);};}}]);return DomEventsPlugin;}(EventManagerPlugin);DomEventsPlugin.decorators=[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["B" /* Injectable */]}];/** @nocollapse */DomEventsPlugin.ctorParameters=function(){return[{type:undefined,decorators:[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["I" /* Inject */],args:[DOCUMENT]}]}];};var/** @type {?} */EVENT_NAMES={// pan
'pan':true,'panstart':true,'panmove':true,'panend':true,'pancancel':true,'panleft':true,'panright':true,'panup':true,'pandown':true,// pinch
'pinch':true,'pinchstart':true,'pinchmove':true,'pinchend':true,'pinchcancel':true,'pinchin':true,'pinchout':true,// press
'press':true,'pressup':true,// rotate
'rotate':true,'rotatestart':true,'rotatemove':true,'rotateend':true,'rotatecancel':true,// swipe
'swipe':true,'swipeleft':true,'swiperight':true,'swipeup':true,'swipedown':true,// tap
'tap':true};/**
 * A DI token that you can use to provide{@link HammerGestureConfig} to Angular. Use it to configure
 * Hammer gestures.
 *
 * @experimental
 */var/** @type {?} */HAMMER_GESTURE_CONFIG=new __WEBPACK_IMPORTED_MODULE_1__angular_core__["n" /* InjectionToken */]('HammerGestureConfig');/**
 * \@experimental
 */var HammerGestureConfig=function(){function HammerGestureConfig(){_classCallCheck(this,HammerGestureConfig);this.events=[];this.overrides={};}/**
     * @param {?} element
     * @return {?}
     */_createClass(HammerGestureConfig,[{key:'buildHammer',value:function buildHammer(element){var/** @type {?} */mc=new Hammer(element);mc.get('pinch').set({enable:true});mc.get('rotate').set({enable:true});for(var/** @type {?} */eventName in this.overrides){mc.get(eventName).set(this.overrides[eventName]);}return mc;}}]);return HammerGestureConfig;}();HammerGestureConfig.decorators=[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["B" /* Injectable */]}];/** @nocollapse */HammerGestureConfig.ctorParameters=function(){return[];};var HammerGesturesPlugin=function(_EventManagerPlugin2){_inherits(HammerGesturesPlugin,_EventManagerPlugin2);/**
     * @param {?} doc
     * @param {?} _config
     */function HammerGesturesPlugin(doc,_config){_classCallCheck(this,HammerGesturesPlugin);var _this19=_possibleConstructorReturn(this,(HammerGesturesPlugin.__proto__||Object.getPrototypeOf(HammerGesturesPlugin)).call(this,doc));_this19._config=_config;return _this19;}/**
     * @param {?} eventName
     * @return {?}
     */_createClass(HammerGesturesPlugin,[{key:'supports',value:function supports(eventName){if(!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase())&&!this.isCustomEvent(eventName)){return false;}if(!window.Hammer){throw new Error('Hammer.js is not loaded, can not bind '+eventName+' event');}return true;}/**
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */},{key:'addEventListener',value:function addEventListener(element,eventName,handler){var _this20=this;var/** @type {?} */zone=this.manager.getZone();eventName=eventName.toLowerCase();return zone.runOutsideAngular(function(){// Creating the manager bind events, must be done outside of angular
var/** @type {?} */mc=_this20._config.buildHammer(element);var/** @type {?} */callback=function callback(eventObj){zone.runGuarded(function(){handler(eventObj);});};mc.on(eventName,callback);return function(){return mc.off(eventName,callback);};});}/**
     * @param {?} eventName
     * @return {?}
     */},{key:'isCustomEvent',value:function isCustomEvent(eventName){return this._config.events.indexOf(eventName)>-1;}}]);return HammerGesturesPlugin;}(EventManagerPlugin);HammerGesturesPlugin.decorators=[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["B" /* Injectable */]}];/** @nocollapse */HammerGesturesPlugin.ctorParameters=function(){return[{type:undefined,decorators:[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["I" /* Inject */],args:[DOCUMENT]}]},{type:HammerGestureConfig,decorators:[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["I" /* Inject */],args:[HAMMER_GESTURE_CONFIG]}]}];};var/** @type {?} */MODIFIER_KEYS=['alt','control','meta','shift'];var/** @type {?} */MODIFIER_KEY_GETTERS={'alt':function alt(event){return event.altKey;},'control':function control(event){return event.ctrlKey;},'meta':function meta(event){return event.metaKey;},'shift':function shift(event){return event.shiftKey;}};/**
 * \@experimental
 */var KeyEventsPlugin=function(_EventManagerPlugin3){_inherits(KeyEventsPlugin,_EventManagerPlugin3);/**
     * @param {?} doc
     */function KeyEventsPlugin(doc){_classCallCheck(this,KeyEventsPlugin);return _possibleConstructorReturn(this,(KeyEventsPlugin.__proto__||Object.getPrototypeOf(KeyEventsPlugin)).call(this,doc));}/**
     * @param {?} eventName
     * @return {?}
     */_createClass(KeyEventsPlugin,[{key:'supports',value:function supports(eventName){return KeyEventsPlugin.parseEventName(eventName)!=null;}/**
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */},{key:'addEventListener',value:function addEventListener(element,eventName,handler){var/** @type {?} */parsedEvent=KeyEventsPlugin.parseEventName(eventName);var/** @type {?} */outsideHandler=KeyEventsPlugin.eventCallback(parsedEvent['fullKey'],handler,this.manager.getZone());return this.manager.getZone().runOutsideAngular(function(){return getDOM().onAndCancel(element,parsedEvent['domEventName'],outsideHandler);});}/**
     * @param {?} eventName
     * @return {?}
     */}],[{key:'parseEventName',value:function parseEventName(eventName){var/** @type {?} */parts=eventName.toLowerCase().split('.');var/** @type {?} */domEventName=parts.shift();if(parts.length===0||!(domEventName==='keydown'||domEventName==='keyup')){return null;}var/** @type {?} */key=KeyEventsPlugin._normalizeKey(parts.pop());var/** @type {?} */fullKey='';MODIFIER_KEYS.forEach(function(modifierName){var/** @type {?} */index=parts.indexOf(modifierName);if(index>-1){parts.splice(index,1);fullKey+=modifierName+'.';}});fullKey+=key;if(parts.length!=0||key.length===0){// returning null instead of throwing to let another plugin process the event
return null;}var/** @type {?} */result={};result['domEventName']=domEventName;result['fullKey']=fullKey;return result;}/**
     * @param {?} event
     * @return {?}
     */},{key:'getEventFullKey',value:function getEventFullKey(event){var/** @type {?} */fullKey='';var/** @type {?} */key=getDOM().getEventKey(event);key=key.toLowerCase();if(key===' '){key='space';// for readability
}else if(key==='.'){key='dot';// because '.' is used as a separator in event names
}MODIFIER_KEYS.forEach(function(modifierName){if(modifierName!=key){var/** @type {?} */modifierGetter=MODIFIER_KEY_GETTERS[modifierName];if(modifierGetter(event)){fullKey+=modifierName+'.';}}});fullKey+=key;return fullKey;}/**
     * @param {?} fullKey
     * @param {?} handler
     * @param {?} zone
     * @return {?}
     */},{key:'eventCallback',value:function eventCallback(fullKey,handler,zone){return function(event/** TODO #9100 */){if(KeyEventsPlugin.getEventFullKey(event)===fullKey){zone.runGuarded(function(){return handler(event);});}};}/**
     * \@internal
     * @param {?} keyName
     * @return {?}
     */},{key:'_normalizeKey',value:function _normalizeKey(keyName){// TODO: switch to a Map if the mapping grows too much
switch(keyName){case'esc':return'escape';default:return keyName;}}}]);return KeyEventsPlugin;}(EventManagerPlugin);KeyEventsPlugin.decorators=[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["B" /* Injectable */]}];/** @nocollapse */KeyEventsPlugin.ctorParameters=function(){return[{type:undefined,decorators:[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["I" /* Inject */],args:[DOCUMENT]}]}];};/**
 * A pattern that recognizes a commonly useful subset of URLs that are safe.
 *
 * This regular expression matches a subset of URLs that will not cause script
 * execution if used in URL context within a HTML document. Specifically, this
 * regular expression matches if (comment from here on and regex copied from
 * Soy's EscapingConventions):
 * (1) Either a protocol in a whitelist (http, https, mailto or ftp).
 * (2) or no protocol.  A protocol must be followed by a colon. The below
 *     allows that by allowing colons only after one of the characters [/?#].
 *     A colon after a hash (#) must be in the fragment.
 *     Otherwise, a colon after a (?) must be in a query.
 *     Otherwise, a colon after a single solidus (/) must be in a path.
 *     Otherwise, a colon after a double solidus (//) must be in the authority
 *     (before port).
 *
 * The pattern disallows &, used in HTML entity declarations before
 * one of the characters in [/?#]. This disallows HTML entities used in the
 * protocol name, which should never happen, e.g. "h&#116;tp" for "http".
 * It also disallows HTML entities in the first path part of a relative path,
 * e.g. "foo&lt;bar/baz".  Our existing escaping functions should not produce
 * that. More importantly, it disallows masking of a colon,
 * e.g. "javascript&#58;...".
 *
 * This regular expression was taken from the Closure sanitization library.
 */var/** @type {?} */SAFE_URL_PATTERN=/^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;/** A pattern that matches safe data URLs. Only matches image, video and audio types. */var/** @type {?} */DATA_URL_PATTERN=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;/**
 * @param {?} url
 * @return {?}
 */function sanitizeUrl(url){url=String(url);if(url.match(SAFE_URL_PATTERN)||url.match(DATA_URL_PATTERN))return url;if(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["p" /* isDevMode */])()){getDOM().log('WARNING: sanitizing unsafe URL value '+url+' (see http://g.co/ng/security#xss)');}return'unsafe:'+url;}/**
 * @param {?} srcset
 * @return {?}
 */function sanitizeSrcset(srcset){srcset=String(srcset);return srcset.split(',').map(function(srcset){return sanitizeUrl(srcset.trim());}).join(', ');}/** A <body> element that can be safely used to parse untrusted HTML. Lazily initialized below. */var/** @type {?} */inertElement=null;/** Lazily initialized to make sure the DOM adapter gets set before use. */var/** @type {?} */DOM=null;/**
 * Returns an HTML element that is guaranteed to not execute code when creating elements in it.
 * @return {?}
 */function getInertElement(){if(inertElement)return inertElement;DOM=getDOM();// Prefer using <template> element if supported.
var/** @type {?} */templateEl=DOM.createElement('template');if('content'in templateEl)return templateEl;var/** @type {?} */doc=DOM.createHtmlDocument();inertElement=DOM.querySelector(doc,'body');if(inertElement==null){// usually there should be only one body element in the document, but IE doesn't have any, so we
// need to create one.
var/** @type {?} */html=DOM.createElement('html',doc);inertElement=DOM.createElement('body',doc);DOM.appendChild(html,inertElement);DOM.appendChild(doc,html);}return inertElement;}/**
 * @param {?} tags
 * @return {?}
 */function tagSet(tags){var/** @type {?} */res={};var _iteratorNormalCompletion4=true;var _didIteratorError4=false;var _iteratorError4=undefined;try{for(var _iterator4=tags.split(',')[Symbol.iterator](),_step4;!(_iteratorNormalCompletion4=(_step4=_iterator4.next()).done);_iteratorNormalCompletion4=true){var t=_step4.value;res[t]=true;}}catch(err){_didIteratorError4=true;_iteratorError4=err;}finally{try{if(!_iteratorNormalCompletion4&&_iterator4.return){_iterator4.return();}}finally{if(_didIteratorError4){throw _iteratorError4;}}}return res;}/**
 * @param {...?} sets
 * @return {?}
 */function merge(){var/** @type {?} */res={};for(var _len=arguments.length,sets=Array(_len),_key=0;_key<_len;_key++){sets[_key]=arguments[_key];}var _iteratorNormalCompletion5=true;var _didIteratorError5=false;var _iteratorError5=undefined;try{for(var _iterator5=sets[Symbol.iterator](),_step5;!(_iteratorNormalCompletion5=(_step5=_iterator5.next()).done);_iteratorNormalCompletion5=true){var s=_step5.value;for(var/** @type {?} */v in s){if(s.hasOwnProperty(v))res[v]=true;}}}catch(err){_didIteratorError5=true;_iteratorError5=err;}finally{try{if(!_iteratorNormalCompletion5&&_iterator5.return){_iterator5.return();}}finally{if(_didIteratorError5){throw _iteratorError5;}}}return res;}// Good source of info about elements and attributes
// http://dev.w3.org/html5/spec/Overview.html#semantics
// http://simon.html5.org/html-elements
// Safe Void Elements - HTML5
// http://dev.w3.org/html5/spec/Overview.html#void-elements
var/** @type {?} */VOID_ELEMENTS=tagSet('area,br,col,hr,img,wbr');// Elements that you can, intentionally, leave open (and which close themselves)
// http://dev.w3.org/html5/spec/Overview.html#optional-tags
var/** @type {?} */OPTIONAL_END_TAG_BLOCK_ELEMENTS=tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');var/** @type {?} */OPTIONAL_END_TAG_INLINE_ELEMENTS=tagSet('rp,rt');var/** @type {?} */OPTIONAL_END_TAG_ELEMENTS=merge(OPTIONAL_END_TAG_INLINE_ELEMENTS,OPTIONAL_END_TAG_BLOCK_ELEMENTS);// Safe Block Elements - HTML5
var/** @type {?} */BLOCK_ELEMENTS=merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS,tagSet('address,article,'+'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,'+'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));// Inline Elements - HTML5
var/** @type {?} */INLINE_ELEMENTS=merge(OPTIONAL_END_TAG_INLINE_ELEMENTS,tagSet('a,abbr,acronym,audio,b,'+'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,'+'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));var/** @type {?} */VALID_ELEMENTS=merge(VOID_ELEMENTS,BLOCK_ELEMENTS,INLINE_ELEMENTS,OPTIONAL_END_TAG_ELEMENTS);// Attributes that have href and hence need to be sanitized
var/** @type {?} */URI_ATTRS=tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');// Attributes that have special href set hence need to be sanitized
var/** @type {?} */SRCSET_ATTRS=tagSet('srcset');var/** @type {?} */HTML_ATTRS=tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,'+'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,'+'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,'+'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,'+'valign,value,vspace,width');// NB: This currently conciously doesn't support SVG. SVG sanitization has had several security
// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via
// innerHTML is required, SVG attributes should be added here.
// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those
// can be sanitized, but they increase security surface area without a legitimate use case, so they
// are left out here.
var/** @type {?} */VALID_ATTRS=merge(URI_ATTRS,SRCSET_ATTRS,HTML_ATTRS);/**
 * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe
 * attributes.
 */var SanitizingHtmlSerializer=function(){function SanitizingHtmlSerializer(){_classCallCheck(this,SanitizingHtmlSerializer);this.sanitizedSomething=false;this.buf=[];}/**
     * @param {?} el
     * @return {?}
     */_createClass(SanitizingHtmlSerializer,[{key:'sanitizeChildren',value:function sanitizeChildren(el){// This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.
// However this code never accesses properties off of `document` before deleting its contents
// again, so it shouldn't be vulnerable to DOM clobbering.
var/** @type {?} */current=el.firstChild;while(current){if(DOM.isElementNode(current)){this.startElement(/** @type {?} */current);}else if(DOM.isTextNode(current)){this.chars(DOM.nodeValue(current));}else{// Strip non-element, non-text nodes.
this.sanitizedSomething=true;}if(DOM.firstChild(current)){current=DOM.firstChild(current);continue;}while(current){// Leaving the element. Walk up and to the right, closing tags as we go.
if(DOM.isElementNode(current)){this.endElement(/** @type {?} */current);}if(DOM.nextSibling(current)){current=DOM.nextSibling(current);break;}current=DOM.parentElement(current);}}return this.buf.join('');}/**
     * @param {?} element
     * @return {?}
     */},{key:'startElement',value:function startElement(element){var _this22=this;var/** @type {?} */tagName=DOM.nodeName(element).toLowerCase();if(!VALID_ELEMENTS.hasOwnProperty(tagName)){this.sanitizedSomething=true;return;}this.buf.push('<');this.buf.push(tagName);DOM.attributeMap(element).forEach(function(value,attrName){var/** @type {?} */lower=attrName.toLowerCase();if(!VALID_ATTRS.hasOwnProperty(lower)){_this22.sanitizedSomething=true;return;}// TODO(martinprobst): Special case image URIs for data:image/...
if(URI_ATTRS[lower])value=sanitizeUrl(value);if(SRCSET_ATTRS[lower])value=sanitizeSrcset(value);_this22.buf.push(' ');_this22.buf.push(attrName);_this22.buf.push('="');_this22.buf.push(encodeEntities(value));_this22.buf.push('"');});this.buf.push('>');}/**
     * @param {?} current
     * @return {?}
     */},{key:'endElement',value:function endElement(current){var/** @type {?} */tagName=DOM.nodeName(current).toLowerCase();if(VALID_ELEMENTS.hasOwnProperty(tagName)&&!VOID_ELEMENTS.hasOwnProperty(tagName)){this.buf.push('</');this.buf.push(tagName);this.buf.push('>');}}/**
     * @param {?} chars
     * @return {?}
     */},{key:'chars',value:function chars(_chars/** TODO #9100 */){this.buf.push(encodeEntities(_chars));}}]);return SanitizingHtmlSerializer;}();// Regular Expressions for parsing tags and attributes
var/** @type {?} */SURROGATE_PAIR_REGEXP=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g;// ! to ~ is the ASCII range.
var/** @type {?} */NON_ALPHANUMERIC_REGEXP=/([^\#-~ |!])/g;/**
 * Escapes all potentially dangerous characters, so that the
 * resulting string can be safely inserted into attribute or
 * element text.
 * @param {?} value
 * @return {?}
 */function encodeEntities(value){return value.replace(/&/g,'&amp;').replace(SURROGATE_PAIR_REGEXP,function(match){var/** @type {?} */hi=match.charCodeAt(0);var/** @type {?} */low=match.charCodeAt(1);return'&#'+((hi-0xD800)*0x400+(low-0xDC00)+0x10000)+';';}).replace(NON_ALPHANUMERIC_REGEXP,function(match){return'&#'+match.charCodeAt(0)+';';}).replace(/</g,'&lt;').replace(/>/g,'&gt;');}/**
 * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'
 * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo').
 *
 * This is undesirable since we don't want to allow any of these custom attributes. This method
 * strips them all.
 * @param {?} el
 * @return {?}
 */function stripCustomNsAttrs(el){DOM.attributeMap(el).forEach(function(_,attrName){if(attrName==='xmlns:ns1'||attrName.indexOf('ns1:')===0){DOM.removeAttribute(el,attrName);}});var _iteratorNormalCompletion6=true;var _didIteratorError6=false;var _iteratorError6=undefined;try{for(var _iterator6=DOM.childNodesAsList(el)[Symbol.iterator](),_step6;!(_iteratorNormalCompletion6=(_step6=_iterator6.next()).done);_iteratorNormalCompletion6=true){var n=_step6.value;if(DOM.isElementNode(n))stripCustomNsAttrs(/** @type {?} */n);}}catch(err){_didIteratorError6=true;_iteratorError6=err;}finally{try{if(!_iteratorNormalCompletion6&&_iterator6.return){_iterator6.return();}}finally{if(_didIteratorError6){throw _iteratorError6;}}}}/**
 * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to
 * the DOM in a browser environment.
 * @param {?} defaultDoc
 * @param {?} unsafeHtmlInput
 * @return {?}
 */function sanitizeHtml(defaultDoc,unsafeHtmlInput){try{var/** @type {?} */containerEl=getInertElement();// Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).
var/** @type {?} */unsafeHtml=unsafeHtmlInput?String(unsafeHtmlInput):'';// mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser
// trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.
var/** @type {?} */mXSSAttempts=5;var/** @type {?} */parsedHtml=unsafeHtml;do{if(mXSSAttempts===0){throw new Error('Failed to sanitize html because the input is unstable');}mXSSAttempts--;unsafeHtml=parsedHtml;DOM.setInnerHTML(containerEl,unsafeHtml);if(defaultDoc.documentMode){// strip custom-namespaced attributes on IE<=11
stripCustomNsAttrs(containerEl);}parsedHtml=DOM.getInnerHTML(containerEl);}while(unsafeHtml!==parsedHtml);var/** @type {?} */sanitizer=new SanitizingHtmlSerializer();var/** @type {?} */safeHtml=sanitizer.sanitizeChildren(DOM.getTemplateContent(containerEl)||containerEl);// Clear out the body element.
var/** @type {?} */parent=DOM.getTemplateContent(containerEl)||containerEl;var _iteratorNormalCompletion7=true;var _didIteratorError7=false;var _iteratorError7=undefined;try{for(var _iterator7=DOM.childNodesAsList(parent)[Symbol.iterator](),_step7;!(_iteratorNormalCompletion7=(_step7=_iterator7.next()).done);_iteratorNormalCompletion7=true){var child=_step7.value;DOM.removeChild(parent,child);}}catch(err){_didIteratorError7=true;_iteratorError7=err;}finally{try{if(!_iteratorNormalCompletion7&&_iterator7.return){_iterator7.return();}}finally{if(_didIteratorError7){throw _iteratorError7;}}}if(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["p" /* isDevMode */])()&&sanitizer.sanitizedSomething){DOM.log('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');}return safeHtml;}catch(e){// In case anything goes wrong, clear out inertElement to reset the entire DOM structure.
inertElement=null;throw e;}}/**
 * Regular expression for safe style values.
 *
 * Quotes (" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.
 *
 * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or
 * font-family) and hence could allow multiple values to get injected, but that should pose no risk
 * of XSS.
 *
 * The function expression checks only for XSS safety, not for CSS validity.
 *
 * This regular expression was taken from the Closure sanitization library, and augmented for
 * transformation values.
 */var/** @type {?} */VALUES='[-,."\'%_!# a-zA-Z0-9]+';var/** @type {?} */TRANSFORMATION_FNS='(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';var/** @type {?} */COLOR_FNS='(?:rgb|hsl)a?';var/** @type {?} */GRADIENTS='(?:repeating-)?(?:linear|radial)-gradient';var/** @type {?} */CSS3_FNS='(?:calc|attr)';var/** @type {?} */FN_ARGS='\\([-0-9.%, #a-zA-Z]+\\)';var/** @type {?} */SAFE_STYLE_VALUE=new RegExp('^('+VALUES+'|'+('(?:'+TRANSFORMATION_FNS+'|'+COLOR_FNS+'|'+GRADIENTS+'|'+CSS3_FNS+')')+(FN_ARGS+')$'),'g');/**
 * Matches a `url(...)` value with an arbitrary argument as long as it does
 * not contain parentheses.
 *
 * The URL value still needs to be sanitized separately.
 *
 * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted
 * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.
 * by observing whether scroll bars are displayed, or character ranges used by a font face
 * definition.
 *
 * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that
 * binding a URL value without further cooperation from the page will cause an information leak, and
 * if so, it is just a leak, not a full blown XSS vulnerability.
 *
 * Given the common use case, low likelihood of attack vector, and low impact of an attack, this
 * code is permissive and allows URLs that sanitize otherwise.
 */var/** @type {?} */URL_RE=/^url\(([^)]+)\)$/;/**
 * Checks that quotes (" and ') are properly balanced inside a string. Assumes
 * that neither escape (\) nor any other character that could result in
 * breaking out of a string parsing context are allowed;
 * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.
 *
 * This code was taken from the Closure sanitization library.
 * @param {?} value
 * @return {?}
 */function hasBalancedQuotes(value){var/** @type {?} */outsideSingle=true;var/** @type {?} */outsideDouble=true;for(var/** @type {?} */i=0;i<value.length;i++){var/** @type {?} */c=value.charAt(i);if(c==='\''&&outsideDouble){outsideSingle=!outsideSingle;}else if(c==='"'&&outsideSingle){outsideDouble=!outsideDouble;}}return outsideSingle&&outsideDouble;}/**
 * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single
 * value) and returns a value that is safe to use in a browser environment.
 * @param {?} value
 * @return {?}
 */function sanitizeStyle(value){value=String(value).trim();// Make sure it's actually a string.
if(!value)return'';// Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for
// reasoning behind this.
var/** @type {?} */urlMatch=value.match(URL_RE);if(urlMatch&&sanitizeUrl(urlMatch[1])===urlMatch[1]||value.match(SAFE_STYLE_VALUE)&&hasBalancedQuotes(value)){return value;// Safe style values.
}if(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["p" /* isDevMode */])()){getDOM().log('WARNING: sanitizing unsafe style value '+value+' (see http://g.co/ng/security#xss).');}return'unsafe';}/**
 * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing
 * values to be safe to use in the different DOM contexts.
 *
 * For example, when binding a URL in an `<a [href]="someValue">` hyperlink, `someValue` will be
 * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on
 * the website.
 *
 * In specific situations, it might be necessary to disable sanitization, for example if the
 * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.
 * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`
 * methods, and then binding to that value from the template.
 *
 * These situations should be very rare, and extraordinary care must be taken to avoid creating a
 * Cross Site Scripting (XSS) security bug!
 *
 * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as
 * close as possible to the source of the value, to make it easy to verify no security bug is
 * created by its use.
 *
 * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that
 * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous
 * code. The sanitizer leaves safe values intact.
 *
 * \@security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in
 * sanitization for the value passed in. Carefully check and audit all values and code paths going
 * into this call. Make sure any user data is appropriately escaped for this security context.
 * For more detail, see the [Security Guide](http://g.co/ng/security).
 *
 * \@stable
 * @abstract
 */var DomSanitizer=function(){function DomSanitizer(){_classCallCheck(this,DomSanitizer);}_createClass(DomSanitizer,[{key:'sanitize',/**
     * Sanitizes a value for use in the given SecurityContext.
     *
     * If value is trusted for the context, this method will unwrap the contained safe value and use
     * it directly. Otherwise, value will be sanitized to be safe in the given context, for example
     * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation
     * is responsible to make sure that the value can definitely be safely used in the given context.
     * @abstract
     * @param {?} context
     * @param {?} value
     * @return {?}
     */value:function sanitize(context,value){}/**
     * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML
     * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will
     * leave safe HTML intact, so in most situations this method should not be used.
     *
     * **WARNING:** calling this method with untrusted user data exposes your application to XSS
     * security risks!
     * @abstract
     * @param {?} value
     * @return {?}
     */},{key:'bypassSecurityTrustHtml',value:function bypassSecurityTrustHtml(value){}/**
     * Bypass security and trust the given value to be safe style value (CSS).
     *
     * **WARNING:** calling this method with untrusted user data exposes your application to XSS
     * security risks!
     * @abstract
     * @param {?} value
     * @return {?}
     */},{key:'bypassSecurityTrustStyle',value:function bypassSecurityTrustStyle(value){}/**
     * Bypass security and trust the given value to be safe JavaScript.
     *
     * **WARNING:** calling this method with untrusted user data exposes your application to XSS
     * security risks!
     * @abstract
     * @param {?} value
     * @return {?}
     */},{key:'bypassSecurityTrustScript',value:function bypassSecurityTrustScript(value){}/**
     * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used
     * in hyperlinks or `<img src>`.
     *
     * **WARNING:** calling this method with untrusted user data exposes your application to XSS
     * security risks!
     * @abstract
     * @param {?} value
     * @return {?}
     */},{key:'bypassSecurityTrustUrl',value:function bypassSecurityTrustUrl(value){}/**
     * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may
     * be used to load executable code from, like `<script src>`, or `<iframe src>`.
     *
     * **WARNING:** calling this method with untrusted user data exposes your application to XSS
     * security risks!
     * @abstract
     * @param {?} value
     * @return {?}
     */},{key:'bypassSecurityTrustResourceUrl',value:function bypassSecurityTrustResourceUrl(value){}}]);return DomSanitizer;}();var DomSanitizerImpl=function(_DomSanitizer){_inherits(DomSanitizerImpl,_DomSanitizer);/**
     * @param {?} _doc
     */function DomSanitizerImpl(_doc){_classCallCheck(this,DomSanitizerImpl);var _this23=_possibleConstructorReturn(this,(DomSanitizerImpl.__proto__||Object.getPrototypeOf(DomSanitizerImpl)).call(this));_this23._doc=_doc;return _this23;}/**
     * @param {?} ctx
     * @param {?} value
     * @return {?}
     */_createClass(DomSanitizerImpl,[{key:'sanitize',value:function sanitize(ctx,value){if(value==null)return null;switch(ctx){case __WEBPACK_IMPORTED_MODULE_1__angular_core__["U" /* SecurityContext */].NONE:return value;case __WEBPACK_IMPORTED_MODULE_1__angular_core__["U" /* SecurityContext */].HTML:if(value instanceof SafeHtmlImpl)return value.changingThisBreaksApplicationSecurity;this.checkNotSafeValue(value,'HTML');return sanitizeHtml(this._doc,String(value));case __WEBPACK_IMPORTED_MODULE_1__angular_core__["U" /* SecurityContext */].STYLE:if(value instanceof SafeStyleImpl)return value.changingThisBreaksApplicationSecurity;this.checkNotSafeValue(value,'Style');return sanitizeStyle(value);case __WEBPACK_IMPORTED_MODULE_1__angular_core__["U" /* SecurityContext */].SCRIPT:if(value instanceof SafeScriptImpl)return value.changingThisBreaksApplicationSecurity;this.checkNotSafeValue(value,'Script');throw new Error('unsafe value used in a script context');case __WEBPACK_IMPORTED_MODULE_1__angular_core__["U" /* SecurityContext */].URL:if(value instanceof SafeResourceUrlImpl||value instanceof SafeUrlImpl){// Allow resource URLs in URL contexts, they are strictly more trusted.
return value.changingThisBreaksApplicationSecurity;}this.checkNotSafeValue(value,'URL');return sanitizeUrl(String(value));case __WEBPACK_IMPORTED_MODULE_1__angular_core__["U" /* SecurityContext */].RESOURCE_URL:if(value instanceof SafeResourceUrlImpl){return value.changingThisBreaksApplicationSecurity;}this.checkNotSafeValue(value,'ResourceURL');throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');default:throw new Error('Unexpected SecurityContext '+ctx+' (see http://g.co/ng/security#xss)');}}/**
     * @param {?} value
     * @param {?} expectedType
     * @return {?}
     */},{key:'checkNotSafeValue',value:function checkNotSafeValue(value,expectedType){if(value instanceof SafeValueImpl){throw new Error('Required a safe '+expectedType+', got a '+value.getTypeName()+' '+'(see http://g.co/ng/security#xss)');}}/**
     * @param {?} value
     * @return {?}
     */},{key:'bypassSecurityTrustHtml',value:function bypassSecurityTrustHtml(value){return new SafeHtmlImpl(value);}/**
     * @param {?} value
     * @return {?}
     */},{key:'bypassSecurityTrustStyle',value:function bypassSecurityTrustStyle(value){return new SafeStyleImpl(value);}/**
     * @param {?} value
     * @return {?}
     */},{key:'bypassSecurityTrustScript',value:function bypassSecurityTrustScript(value){return new SafeScriptImpl(value);}/**
     * @param {?} value
     * @return {?}
     */},{key:'bypassSecurityTrustUrl',value:function bypassSecurityTrustUrl(value){return new SafeUrlImpl(value);}/**
     * @param {?} value
     * @return {?}
     */},{key:'bypassSecurityTrustResourceUrl',value:function bypassSecurityTrustResourceUrl(value){return new SafeResourceUrlImpl(value);}}]);return DomSanitizerImpl;}(DomSanitizer);DomSanitizerImpl.decorators=[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["B" /* Injectable */]}];/** @nocollapse */DomSanitizerImpl.ctorParameters=function(){return[{type:undefined,decorators:[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["I" /* Inject */],args:[DOCUMENT]}]}];};/**
 * @abstract
 */var SafeValueImpl=function(){/**
     * @param {?} changingThisBreaksApplicationSecurity
     */function SafeValueImpl(changingThisBreaksApplicationSecurity){_classCallCheck(this,SafeValueImpl);this.changingThisBreaksApplicationSecurity=changingThisBreaksApplicationSecurity;// empty
}/**
     * @abstract
     * @return {?}
     */_createClass(SafeValueImpl,[{key:'getTypeName',value:function getTypeName(){}/**
     * @return {?}
     */},{key:'toString',value:function toString(){return'SafeValue must use [property]=binding: '+this.changingThisBreaksApplicationSecurity+' (see http://g.co/ng/security#xss)';}}]);return SafeValueImpl;}();var SafeHtmlImpl=function(_SafeValueImpl){_inherits(SafeHtmlImpl,_SafeValueImpl);function SafeHtmlImpl(){_classCallCheck(this,SafeHtmlImpl);return _possibleConstructorReturn(this,(SafeHtmlImpl.__proto__||Object.getPrototypeOf(SafeHtmlImpl)).apply(this,arguments));}_createClass(SafeHtmlImpl,[{key:'getTypeName',/**
     * @return {?}
     */value:function getTypeName(){return'HTML';}}]);return SafeHtmlImpl;}(SafeValueImpl);var SafeStyleImpl=function(_SafeValueImpl2){_inherits(SafeStyleImpl,_SafeValueImpl2);function SafeStyleImpl(){_classCallCheck(this,SafeStyleImpl);return _possibleConstructorReturn(this,(SafeStyleImpl.__proto__||Object.getPrototypeOf(SafeStyleImpl)).apply(this,arguments));}_createClass(SafeStyleImpl,[{key:'getTypeName',/**
     * @return {?}
     */value:function getTypeName(){return'Style';}}]);return SafeStyleImpl;}(SafeValueImpl);var SafeScriptImpl=function(_SafeValueImpl3){_inherits(SafeScriptImpl,_SafeValueImpl3);function SafeScriptImpl(){_classCallCheck(this,SafeScriptImpl);return _possibleConstructorReturn(this,(SafeScriptImpl.__proto__||Object.getPrototypeOf(SafeScriptImpl)).apply(this,arguments));}_createClass(SafeScriptImpl,[{key:'getTypeName',/**
     * @return {?}
     */value:function getTypeName(){return'Script';}}]);return SafeScriptImpl;}(SafeValueImpl);var SafeUrlImpl=function(_SafeValueImpl4){_inherits(SafeUrlImpl,_SafeValueImpl4);function SafeUrlImpl(){_classCallCheck(this,SafeUrlImpl);return _possibleConstructorReturn(this,(SafeUrlImpl.__proto__||Object.getPrototypeOf(SafeUrlImpl)).apply(this,arguments));}_createClass(SafeUrlImpl,[{key:'getTypeName',/**
     * @return {?}
     */value:function getTypeName(){return'URL';}}]);return SafeUrlImpl;}(SafeValueImpl);var SafeResourceUrlImpl=function(_SafeValueImpl5){_inherits(SafeResourceUrlImpl,_SafeValueImpl5);function SafeResourceUrlImpl(){_classCallCheck(this,SafeResourceUrlImpl);return _possibleConstructorReturn(this,(SafeResourceUrlImpl.__proto__||Object.getPrototypeOf(SafeResourceUrlImpl)).apply(this,arguments));}_createClass(SafeResourceUrlImpl,[{key:'getTypeName',/**
     * @return {?}
     */value:function getTypeName(){return'ResourceURL';}}]);return SafeResourceUrlImpl;}(SafeValueImpl);var/** @type {?} */INTERNAL_BROWSER_PLATFORM_PROVIDERS=[{provide:__WEBPACK_IMPORTED_MODULE_1__angular_core__["V" /* PLATFORM_ID */],useValue:__WEBPACK_IMPORTED_MODULE_0__angular_common__["g" /* ɵPLATFORM_BROWSER_ID */]},{provide:__WEBPACK_IMPORTED_MODULE_1__angular_core__["W" /* PLATFORM_INITIALIZER */],useValue:initDomAdapter,multi:true},{provide:__WEBPACK_IMPORTED_MODULE_0__angular_common__["c" /* PlatformLocation */],useClass:BrowserPlatformLocation},{provide:DOCUMENT,useFactory:_document,deps:[]}];/**
 * @security Replacing built-in sanitization providers exposes the application to XSS risks.
 * Attacker-controlled data introduced by an unsanitized provider could expose your
 * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).
 * @experimental
 */var/** @type {?} */BROWSER_SANITIZATION_PROVIDERS=[{provide:__WEBPACK_IMPORTED_MODULE_1__angular_core__["X" /* Sanitizer */],useExisting:DomSanitizer},{provide:DomSanitizer,useClass:DomSanitizerImpl}];/**
 * @stable
 */var/** @type {?} */platformBrowser=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["Y" /* createPlatformFactory */])(__WEBPACK_IMPORTED_MODULE_1__angular_core__["Z" /* platformCore */],'browser',INTERNAL_BROWSER_PLATFORM_PROVIDERS);/**
 * @return {?}
 */function initDomAdapter(){BrowserDomAdapter.makeCurrent();BrowserGetTestability.init();}/**
 * @return {?}
 */function errorHandler(){return new __WEBPACK_IMPORTED_MODULE_1__angular_core__["_0" /* ErrorHandler */]();}/**
 * @return {?}
 */function _document(){return document;}/**
 * @return {?}
 */function _resolveDefaultAnimationDriver(){if(getDOM().supportsWebAnimation()){return new WebAnimationsDriver();}return AnimationDriver.NOOP;}/**
 * The ng module for the browser.
 *
 * \@stable
 */var BrowserModule=function(){/**
     * @param {?} parentModule
     */function BrowserModule(parentModule){_classCallCheck(this,BrowserModule);if(parentModule){throw new Error('BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.');}}/**
     * Configures a browser-based application to transition from a server-rendered app, if
     * one is present on the page. The specified parameters must include an application id,
     * which must match between the client and server applications.
     *
     * \@experimental
     * @param {?} params
     * @return {?}
     */_createClass(BrowserModule,null,[{key:'withServerTransition',value:function withServerTransition(params){return{ngModule:BrowserModule,providers:[{provide:__WEBPACK_IMPORTED_MODULE_1__angular_core__["P" /* APP_ID */],useValue:params.appId},{provide:TRANSITION_ID,useExisting:__WEBPACK_IMPORTED_MODULE_1__angular_core__["P" /* APP_ID */]},SERVER_TRANSITION_PROVIDERS]};}}]);return BrowserModule;}();BrowserModule.decorators=[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["i" /* NgModule */],args:[{providers:[BROWSER_SANITIZATION_PROVIDERS,{provide:__WEBPACK_IMPORTED_MODULE_1__angular_core__["_0" /* ErrorHandler */],useFactory:errorHandler,deps:[]},{provide:EVENT_MANAGER_PLUGINS,useClass:DomEventsPlugin,multi:true},{provide:EVENT_MANAGER_PLUGINS,useClass:KeyEventsPlugin,multi:true},{provide:EVENT_MANAGER_PLUGINS,useClass:HammerGesturesPlugin,multi:true},{provide:HAMMER_GESTURE_CONFIG,useClass:HammerGestureConfig},{provide:DomRootRenderer,useClass:DomRootRenderer_},{provide:__WEBPACK_IMPORTED_MODULE_1__angular_core__["T" /* RootRenderer */],useExisting:DomRootRenderer},DomRendererFactoryV2,{provide:__WEBPACK_IMPORTED_MODULE_1__angular_core__["_1" /* RendererFactoryV2 */],useExisting:DomRendererFactoryV2},{provide:SharedStylesHost,useExisting:DomSharedStylesHost},{provide:AnimationDriver,useFactory:_resolveDefaultAnimationDriver},DomSharedStylesHost,__WEBPACK_IMPORTED_MODULE_1__angular_core__["h" /* Testability */],EventManager,ELEMENT_PROBE_PROVIDERS,Meta,Title],exports:[__WEBPACK_IMPORTED_MODULE_0__angular_common__["h" /* CommonModule */],__WEBPACK_IMPORTED_MODULE_1__angular_core__["_2" /* ApplicationModule */]]}]}];/** @nocollapse */BrowserModule.ctorParameters=function(){return[{type:BrowserModule,decorators:[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["E" /* Optional */]},{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["H" /* SkipSelf */]}]}];};/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 *//**
 * JS version of browser APIs. This library can only run in the browser.
 */var/** @type {?} */win=typeof window!=='undefined'&&window||{};var ChangeDetectionPerfRecord=/**
     * @param {?} msPerTick
     * @param {?} numTicks
     */function ChangeDetectionPerfRecord(msPerTick,numTicks){_classCallCheck(this,ChangeDetectionPerfRecord);this.msPerTick=msPerTick;this.numTicks=numTicks;};/**
 * Entry point for all Angular profiling-related debug tools. This object
 * corresponds to the `ng.profiler` in the dev console.
 */var AngularProfiler=function(){/**
     * @param {?} ref
     */function AngularProfiler(ref){_classCallCheck(this,AngularProfiler);this.appRef=ref.injector.get(__WEBPACK_IMPORTED_MODULE_1__angular_core__["D" /* ApplicationRef */]);}/**
     * Exercises change detection in a loop and then prints the average amount of
     * time in milliseconds how long a single round of change detection takes for
     * the current state of the UI. It runs a minimum of 5 rounds for a minimum
     * of 500 milliseconds.
     *
     * Optionally, a user may pass a `config` parameter containing a map of
     * options. Supported options are:
     *
     * `record` (boolean) - causes the profiler to record a CPU profile while
     * it exercises the change detector. Example:
     *
     * ```
     * ng.profiler.timeChangeDetection({record: true})
     * ```
     * @param {?} config
     * @return {?}
     */_createClass(AngularProfiler,[{key:'timeChangeDetection',value:function timeChangeDetection(config){var/** @type {?} */record=config&&config['record'];var/** @type {?} */profileName='Change Detection';// Profiler is not available in Android browsers, nor in IE 9 without dev tools opened
var/** @type {?} */isProfilerAvailable=isPresent(win.console.profile);if(record&&isProfilerAvailable){win.console.profile(profileName);}var/** @type {?} */start=getDOM().performanceNow();var/** @type {?} */numTicks=0;while(numTicks<5||getDOM().performanceNow()-start<500){this.appRef.tick();numTicks++;}var/** @type {?} */end=getDOM().performanceNow();if(record&&isProfilerAvailable){// need to cast to <any> because type checker thinks there's no argument
// while in fact there is:
//
// https://developer.mozilla.org/en-US/docs/Web/API/Console/profileEnd
win.console.profileEnd(profileName);}var/** @type {?} */msPerTick=(end-start)/numTicks;win.console.log('ran '+numTicks+' change detection cycles');win.console.log(msPerTick.toFixed(2)+' ms per check');return new ChangeDetectionPerfRecord(msPerTick,numTicks);}}]);return AngularProfiler;}();var/** @type {?} */PROFILER_GLOBAL_NAME='ng.profiler';/**
 * Enabled Angular debug tools that are accessible via your browser's
 * developer console.
 *
 * Usage:
 *
 * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)
 * 1. Type `ng.` (usually the console will show auto-complete suggestion)
 * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`
 *    then hit Enter.
 *
 * \@experimental All debugging apis are currently experimental.
 * @param {?} ref
 * @return {?}
 */function enableDebugTools(ref){getDOM().setGlobalVar(PROFILER_GLOBAL_NAME,new AngularProfiler(ref));return ref;}/**
 * Disables Angular tools.
 *
 * \@experimental All debugging apis are currently experimental.
 * @return {?}
 */function disableDebugTools(){getDOM().setGlobalVar(PROFILER_GLOBAL_NAME,null);}/**
 * Predicates for use with {\@link DebugElement}'s query functions.
 *
 * \@experimental All debugging apis are currently experimental.
 */var By=function(){function By(){_classCallCheck(this,By);}_createClass(By,null,[{key:'all',/**
     * Match all elements.
     *
     * ## Example
     *
     * {\@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}
     * @return {?}
     */value:function all(){return function(debugElement){return true;};}/**
     * Match elements by the given CSS selector.
     *
     * ## Example
     *
     * {\@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}
     * @param {?} selector
     * @return {?}
     */},{key:'css',value:function css(selector){return function(debugElement){return isPresent(debugElement.nativeElement)?getDOM().elementMatches(debugElement.nativeElement,selector):false;};}/**
     * Match elements that have the given directive present.
     *
     * ## Example
     *
     * {\@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}
     * @param {?} type
     * @return {?}
     */},{key:'directive',value:function directive(type){return function(debugElement){return debugElement.providerTokens.indexOf(type)!==-1;};}}]);return By;}();/**
 * @stable
 */var/** @type {?} */VERSION=new __WEBPACK_IMPORTED_MODULE_1__angular_core__["f" /* Version */]('4.0.0-rc.1');

/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(16)))

/***/ }),
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var isArray_1 = __webpack_require__(77);
var isObject_1 = __webpack_require__(80);
var isFunction_1 = __webpack_require__(79);
var tryCatch_1 = __webpack_require__(211);
var errorObject_1 = __webpack_require__(76);
var UnsubscriptionError_1 = __webpack_require__(209);
/**
 * Represents a disposable resource, such as the execution of an Observable. A
 * Subscription has one important method, `unsubscribe`, that takes no argument
 * and just disposes the resource held by the subscription.
 *
 * Additionally, subscriptions may be grouped together through the `add()`
 * method, which will attach a child Subscription to the current Subscription.
 * When a Subscription is unsubscribed, all its children (and its grandchildren)
 * will be unsubscribed as well.
 *
 * @class Subscription
 */
var Subscription = (function () {
    /**
     * @param {function(): void} [unsubscribe] A function describing how to
     * perform the disposal of resources when the `unsubscribe` method is called.
     */
    function Subscription(unsubscribe) {
        /**
         * A flag to indicate whether this Subscription has already been unsubscribed.
         * @type {boolean}
         */
        this.closed = false;
        this._parent = null;
        this._parents = null;
        this._subscriptions = null;
        if (unsubscribe) {
            this._unsubscribe = unsubscribe;
        }
    }
    /**
     * Disposes the resources held by the subscription. May, for instance, cancel
     * an ongoing Observable execution or cancel any other type of work that
     * started when the Subscription was created.
     * @return {void}
     */
    Subscription.prototype.unsubscribe = function () {
        var hasErrors = false;
        var errors;
        if (this.closed) {
            return;
        }
        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
        this.closed = true;
        this._parent = null;
        this._parents = null;
        // null out _subscriptions first so any child subscriptions that attempt
        // to remove themselves from this subscription will noop
        this._subscriptions = null;
        var index = -1;
        var len = _parents ? _parents.length : 0;
        // if this._parent is null, then so is this._parents, and we
        // don't have to remove ourselves from any parent subscriptions.
        while (_parent) {
            _parent.remove(this);
            // if this._parents is null or index >= len,
            // then _parent is set to null, and the loop exits
            _parent = ++index < len && _parents[index] || null;
        }
        if (isFunction_1.isFunction(_unsubscribe)) {
            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
            if (trial === errorObject_1.errorObject) {
                hasErrors = true;
                errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?
                    flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);
            }
        }
        if (isArray_1.isArray(_subscriptions)) {
            index = -1;
            len = _subscriptions.length;
            while (++index < len) {
                var sub = _subscriptions[index];
                if (isObject_1.isObject(sub)) {
                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
                    if (trial === errorObject_1.errorObject) {
                        hasErrors = true;
                        errors = errors || [];
                        var err = errorObject_1.errorObject.e;
                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));
                        }
                        else {
                            errors.push(err);
                        }
                    }
                }
            }
        }
        if (hasErrors) {
            throw new UnsubscriptionError_1.UnsubscriptionError(errors);
        }
    };
    /**
     * Adds a tear down to be called during the unsubscribe() of this
     * Subscription.
     *
     * If the tear down being added is a subscription that is already
     * unsubscribed, is the same reference `add` is being called on, or is
     * `Subscription.EMPTY`, it will not be added.
     *
     * If this subscription is already in an `closed` state, the passed
     * tear down logic will be executed immediately.
     *
     * @param {TeardownLogic} teardown The additional logic to execute on
     * teardown.
     * @return {Subscription} Returns the Subscription used or created to be
     * added to the inner subscriptions list. This Subscription can be used with
     * `remove()` to remove the passed teardown logic from the inner subscriptions
     * list.
     */
    Subscription.prototype.add = function (teardown) {
        if (!teardown || (teardown === Subscription.EMPTY)) {
            return Subscription.EMPTY;
        }
        if (teardown === this) {
            return this;
        }
        var subscription = teardown;
        switch (typeof teardown) {
            case 'function':
                subscription = new Subscription(teardown);
            case 'object':
                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {
                    return subscription;
                }
                else if (this.closed) {
                    subscription.unsubscribe();
                    return subscription;
                }
                else if (typeof subscription._addParent !== 'function' /* quack quack */) {
                    var tmp = subscription;
                    subscription = new Subscription();
                    subscription._subscriptions = [tmp];
                }
                break;
            default:
                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
        }
        var subscriptions = this._subscriptions || (this._subscriptions = []);
        subscriptions.push(subscription);
        subscription._addParent(this);
        return subscription;
    };
    /**
     * Removes a Subscription from the internal list of subscriptions that will
     * unsubscribe during the unsubscribe process of this Subscription.
     * @param {Subscription} subscription The subscription to remove.
     * @return {void}
     */
    Subscription.prototype.remove = function (subscription) {
        var subscriptions = this._subscriptions;
        if (subscriptions) {
            var subscriptionIndex = subscriptions.indexOf(subscription);
            if (subscriptionIndex !== -1) {
                subscriptions.splice(subscriptionIndex, 1);
            }
        }
    };
    Subscription.prototype._addParent = function (parent) {
        var _a = this, _parent = _a._parent, _parents = _a._parents;
        if (!_parent || _parent === parent) {
            // If we don't have a parent, or the new parent is the same as the
            // current parent, then set this._parent to the new parent.
            this._parent = parent;
        }
        else if (!_parents) {
            // If there's already one parent, but not multiple, allocate an Array to
            // store the rest of the parent Subscriptions.
            this._parents = [parent];
        }
        else if (_parents.indexOf(parent) === -1) {
            // Only add the new parent to the _parents list if it's not already there.
            _parents.push(parent);
        }
    };
    Subscription.EMPTY = (function (empty) {
        empty.closed = true;
        return empty;
    }(new Subscription()));
    return Subscription;
}());
exports.Subscription = Subscription;
function flattenUnsubscriptionErrors(errors) {
    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);
}
//# sourceMappingURL=Subscription.js.map

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var root_1 = __webpack_require__(13);
function getSymbolObservable(context) {
    var $$observable;
    var Symbol = context.Symbol;
    if (typeof Symbol === 'function') {
        if (Symbol.observable) {
            $$observable = Symbol.observable;
        }
        else {
            $$observable = Symbol('observable');
            Symbol.observable = $$observable;
        }
    }
    else {
        $$observable = '@@observable';
    }
    return $$observable;
}
exports.getSymbolObservable = getSymbolObservable;
exports.$$observable = getSymbolObservable(root_1.root);
//# sourceMappingURL=observable.js.map

/***/ }),
/* 33 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(1);
/* unused harmony export NgLocaleLocalization */
/* unused harmony export NgLocalization */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return CommonModule; });
/* unused harmony export NgClass */
/* unused harmony export NgFor */
/* unused harmony export NgForOf */
/* unused harmony export NgIf */
/* unused harmony export NgPlural */
/* unused harmony export NgPluralCase */
/* unused harmony export NgStyle */
/* unused harmony export NgSwitch */
/* unused harmony export NgSwitchCase */
/* unused harmony export NgSwitchDefault */
/* unused harmony export NgTemplateOutlet */
/* unused harmony export NgComponentOutlet */
/* unused harmony export AsyncPipe */
/* unused harmony export DatePipe */
/* unused harmony export I18nPluralPipe */
/* unused harmony export I18nSelectPipe */
/* unused harmony export JsonPipe */
/* unused harmony export LowerCasePipe */
/* unused harmony export CurrencyPipe */
/* unused harmony export DecimalPipe */
/* unused harmony export PercentPipe */
/* unused harmony export SlicePipe */
/* unused harmony export UpperCasePipe */
/* unused harmony export TitleCasePipe */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return PLATFORM_BROWSER_ID; });
/* unused harmony export ɵPLATFORM_SERVER_ID */
/* unused harmony export ɵPLATFORM_WORKER_APP_ID */
/* unused harmony export ɵPLATFORM_WORKER_UI_ID */
/* unused harmony export isPlatformBrowser */
/* unused harmony export isPlatformServer */
/* unused harmony export isPlatformWorkerApp */
/* unused harmony export isPlatformWorkerUi */
/* unused harmony export VERSION */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return PlatformLocation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LocationStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return APP_BASE_HREF; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return HashLocationStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return PathLocationStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return Location; });
/* unused harmony export ɵc */
/* unused harmony export ɵa */
/* unused harmony export ɵb */
/* unused harmony export ɵd */
var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i["return"])_i["return"]();}finally{if(_d)throw _e;}}return _arr;}return function(arr,i){if(Array.isArray(arr)){return arr;}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i);}else{throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++){arr2[i]=arr[i];}return arr2;}else{return Array.from(arr);}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}/**
 * @license Angular v4.0.0-rc.1
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 *//**
 * This class should not be used directly by an application developer. Instead, use
 * {\@link Location}.
 *
 * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform
 * agnostic.
 * This means that we can have different implementation of `PlatformLocation` for the different
 * platforms
 * that angular supports. For example, the default `PlatformLocation` is {\@link
 * BrowserPlatformLocation},
 * however when you run your app in a WebWorker you use {\@link WebWorkerPlatformLocation}.
 *
 * The `PlatformLocation` class is used directly by all implementations of {\@link LocationStrategy}
 * when
 * they need to interact with the DOM apis like pushState, popState, etc...
 *
 * {\@link LocationStrategy} in turn is used by the {\@link Location} service which is used directly
 * by
 * the {\@link Router} in order to navigate between routes. Since all interactions between {\@link
 * Router} /
 * {\@link Location} / {\@link LocationStrategy} and DOM apis flow through the `PlatformLocation`
 * class
 * they are all platform independent.
 *
 * \@stable
 * @abstract
 */var PlatformLocation=function(){function PlatformLocation(){_classCallCheck(this,PlatformLocation);}_createClass(PlatformLocation,[{key:'getBaseHrefFromDOM',/**
     * @abstract
     * @return {?}
     */value:function getBaseHrefFromDOM(){}/**
     * @abstract
     * @param {?} fn
     * @return {?}
     */},{key:'onPopState',value:function onPopState(fn){}/**
     * @abstract
     * @param {?} fn
     * @return {?}
     */},{key:'onHashChange',value:function onHashChange(fn){}/**
     * @return {?}
     */},{key:'replaceState',/**
     * @abstract
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @return {?}
     */value:function replaceState(state,title,url){}/**
     * @abstract
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @return {?}
     */},{key:'pushState',value:function pushState(state,title,url){}/**
     * @abstract
     * @return {?}
     */},{key:'forward',value:function forward(){}/**
     * @abstract
     * @return {?}
     */},{key:'back',value:function back(){}},{key:'pathname',get:function get(){return null;}/**
     * @return {?}
     */},{key:'search',get:function get(){return null;}/**
     * @return {?}
     */},{key:'hash',get:function get(){return null;}}]);return PlatformLocation;}();/**
 * `LocationStrategy` is responsible for representing and reading route state
 * from the browser's URL. Angular provides two strategies:
 * {\@link HashLocationStrategy} and {\@link PathLocationStrategy}.
 *
 * This is used under the hood of the {\@link Location} service.
 *
 * Applications should use the {\@link Router} or {\@link Location} services to
 * interact with application route state.
 *
 * For instance, {\@link HashLocationStrategy} produces URLs like
 * `http://example.com#/foo`, and {\@link PathLocationStrategy} produces
 * `http://example.com/foo` as an equivalent URL.
 *
 * See these two classes for more.
 *
 * \@stable
 * @abstract
 */var LocationStrategy=function(){function LocationStrategy(){_classCallCheck(this,LocationStrategy);}_createClass(LocationStrategy,[{key:'path',/**
     * @abstract
     * @param {?=} includeHash
     * @return {?}
     */value:function path(includeHash){}/**
     * @abstract
     * @param {?} internal
     * @return {?}
     */},{key:'prepareExternalUrl',value:function prepareExternalUrl(internal){}/**
     * @abstract
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @param {?} queryParams
     * @return {?}
     */},{key:'pushState',value:function pushState(state,title,url,queryParams){}/**
     * @abstract
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @param {?} queryParams
     * @return {?}
     */},{key:'replaceState',value:function replaceState(state,title,url,queryParams){}/**
     * @abstract
     * @return {?}
     */},{key:'forward',value:function forward(){}/**
     * @abstract
     * @return {?}
     */},{key:'back',value:function back(){}/**
     * @abstract
     * @param {?} fn
     * @return {?}
     */},{key:'onPopState',value:function onPopState(fn){}/**
     * @abstract
     * @return {?}
     */},{key:'getBaseHref',value:function getBaseHref(){}}]);return LocationStrategy;}();/**
 * The `APP_BASE_HREF` token represents the base href to be used with the
 * {@link PathLocationStrategy}.
 *
 * If you're using {@link PathLocationStrategy}, you must provide a provider to a string
 * representing the URL prefix that should be preserved when generating and recognizing
 * URLs.
 *
 * ### Example
 *
 * ```typescript
 * import {Component, NgModule} from '@angular/core';
 * import {APP_BASE_HREF} from '@angular/common';
 *
 * @NgModule({
 *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]
 * })
 * class AppModule {}
 * ```
 *
 * @stable
 */var/** @type {?} */APP_BASE_HREF=new __WEBPACK_IMPORTED_MODULE_0__angular_core__["n" /* InjectionToken */]('appBaseHref');/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */var/** @type {?} */globalScope=void 0;if(typeof window==='undefined'){if(typeof WorkerGlobalScope!=='undefined'&&self instanceof WorkerGlobalScope){// TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
globalScope=self;}else{globalScope=global;}}else{globalScope=window;}// Need to declare a new variable for global here since TypeScript
// exports the original value of the symbol.
var/** @type {?} */_global=globalScope;/**
 * @param {?} type
 * @return {?}
 */function getTypeNameForDebugging(type){return type['name']||(typeof type==='undefined'?'undefined':_typeof(type));}// TODO: remove calls to assert in production environment
// Note: Can't just export this and import in in other files
// as `assert` is a reserved keyword in Dart
_global.assert=function assert(condition){// TODO: to be fixed properly via #2830, noop for now
};/**
 * @param {?} obj
 * @return {?}
 */function isPresent(obj){return obj!=null;}/**
 * @param {?} obj
 * @return {?}
 */function isBlank(obj){return obj==null;}/**
 * @param {?} token
 * @return {?}
 */function stringify(token){if(typeof token==='string'){return token;}if(token==null){return''+token;}if(token.overriddenName){return''+token.overriddenName;}if(token.name){return''+token.name;}var/** @type {?} */res=token.toString();var/** @type {?} */newLineIndex=res.indexOf('\n');return newLineIndex===-1?res:res.substring(0,newLineIndex);}var NumberWrapper=function(){function NumberWrapper(){_classCallCheck(this,NumberWrapper);}_createClass(NumberWrapper,null,[{key:'parseIntAutoRadix',/**
     * @param {?} text
     * @return {?}
     */value:function parseIntAutoRadix(text){var/** @type {?} */result=parseInt(text);if(isNaN(result)){throw new Error('Invalid integer literal when parsing '+text);}return result;}/**
     * @param {?} value
     * @return {?}
     */},{key:'isNumeric',value:function isNumeric(value){return!isNaN(value-parseFloat(value));}}]);return NumberWrapper;}();/**
 * @param {?} o
 * @return {?}
 */function isJsObject(o){return o!==null&&(typeof o==='function'||(typeof o==='undefined'?'undefined':_typeof(o))==='object');}var/** @type {?} */_symbolIterator=null;/**
 * @return {?}
 */function getSymbolIterator(){if(!_symbolIterator){if(globalScope.Symbol&&Symbol.iterator){_symbolIterator=Symbol.iterator;}else{// es6-shim specific logic
var/** @type {?} */keys=Object.getOwnPropertyNames(Map.prototype);for(var/** @type {?} */i=0;i<keys.length;++i){var/** @type {?} */key=keys[i];if(key!=='entries'&&key!=='size'&&Map.prototype[key]===Map.prototype['entries']){_symbolIterator=key;}}}}return _symbolIterator;}/**
 * \@whatItDoes `Location` is a service that applications can use to interact with a browser's URL.
 * \@description
 * Depending on which {\@link LocationStrategy} is used, `Location` will either persist
 * to the URL's path or the URL's hash segment.
 *
 * Note: it's better to use {\@link Router#navigate} service to trigger route changes. Use
 * `Location` only if you need to interact with or create normalized URLs outside of
 * routing.
 *
 * `Location` is responsible for normalizing the URL against the application's base href.
 * A normalized URL is absolute from the URL host, includes the application's base href, and has no
 * trailing slash:
 * - `/my/app/user/123` is normalized
 * - `my/app/user/123` **is not** normalized
 * - `/my/app/user/123/` **is not** normalized
 *
 * ### Example
 * {\@example common/location/ts/path_location_component.ts region='LocationComponent'}
 * \@stable
 */var Location=function(){/**
     * @param {?} platformStrategy
     */function Location(platformStrategy){var _this=this;_classCallCheck(this,Location);/** @internal */this._subject=new __WEBPACK_IMPORTED_MODULE_0__angular_core__["g" /* EventEmitter */]();this._platformStrategy=platformStrategy;var browserBaseHref=this._platformStrategy.getBaseHref();this._baseHref=Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));this._platformStrategy.onPopState(function(ev){_this._subject.emit({'url':_this.path(true),'pop':true,'type':ev.type});});}/**
     * @param {?=} includeHash
     * @return {?}
     */_createClass(Location,[{key:'path',value:function path(){var includeHash=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;return this.normalize(this._platformStrategy.path(includeHash));}/**
     * Normalizes the given path and compares to the current normalized path.
     * @param {?} path
     * @param {?=} query
     * @return {?}
     */},{key:'isCurrentPathEqualTo',value:function isCurrentPathEqualTo(path){var query=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';return this.path()==this.normalize(path+Location.normalizeQueryParams(query));}/**
     * Given a string representing a URL, returns the normalized URL path without leading or
     * trailing slashes.
     * @param {?} url
     * @return {?}
     */},{key:'normalize',value:function normalize(url){return Location.stripTrailingSlash(_stripBaseHref(this._baseHref,_stripIndexHtml(url)));}/**
     * Given a string representing a URL, returns the platform-specific external URL path.
     * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one
     * before normalizing. This method will also add a hash if `HashLocationStrategy` is
     * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.
     * @param {?} url
     * @return {?}
     */},{key:'prepareExternalUrl',value:function prepareExternalUrl(url){if(url&&url[0]!=='/'){url='/'+url;}return this._platformStrategy.prepareExternalUrl(url);}/**
     * Changes the browsers URL to the normalized version of the given URL, and pushes a
     * new item onto the platform's history.
     * @param {?} path
     * @param {?=} query
     * @return {?}
     */},{key:'go',value:function go(path){var query=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';this._platformStrategy.pushState(null,'',path,query);}/**
     * Changes the browsers URL to the normalized version of the given URL, and replaces
     * the top item on the platform's history stack.
     * @param {?} path
     * @param {?=} query
     * @return {?}
     */},{key:'replaceState',value:function replaceState(path){var query=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';this._platformStrategy.replaceState(null,'',path,query);}/**
     * Navigates forward in the platform's history.
     * @return {?}
     */},{key:'forward',value:function forward(){this._platformStrategy.forward();}/**
     * Navigates back in the platform's history.
     * @return {?}
     */},{key:'back',value:function back(){this._platformStrategy.back();}/**
     * Subscribe to the platform's `popState` events.
     * @param {?} onNext
     * @param {?=} onThrow
     * @param {?=} onReturn
     * @return {?}
     */},{key:'subscribe',value:function subscribe(onNext){var onThrow=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var onReturn=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;return this._subject.subscribe({next:onNext,error:onThrow,complete:onReturn});}/**
     * Given a string of url parameters, prepend with '?' if needed, otherwise return parameters as
     * is.
     * @param {?} params
     * @return {?}
     */}],[{key:'normalizeQueryParams',value:function normalizeQueryParams(params){return params&&params[0]!=='?'?'?'+params:params;}/**
     * Given 2 parts of a url, join them with a slash if needed.
     * @param {?} start
     * @param {?} end
     * @return {?}
     */},{key:'joinWithSlash',value:function joinWithSlash(start,end){if(start.length==0){return end;}if(end.length==0){return start;}var/** @type {?} */slashes=0;if(start.endsWith('/')){slashes++;}if(end.startsWith('/')){slashes++;}if(slashes==2){return start+end.substring(1);}if(slashes==1){return start+end;}return start+'/'+end;}/**
     * If url has a trailing slash, remove it, otherwise return url as is.
     * @param {?} url
     * @return {?}
     */},{key:'stripTrailingSlash',value:function stripTrailingSlash(url){return url.replace(/\/$/,'');}}]);return Location;}();Location.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["B" /* Injectable */]}];/** @nocollapse */Location.ctorParameters=function(){return[{type:LocationStrategy}];};/**
 * @param {?} baseHref
 * @param {?} url
 * @return {?}
 */function _stripBaseHref(baseHref,url){return baseHref&&url.startsWith(baseHref)?url.substring(baseHref.length):url;}/**
 * @param {?} url
 * @return {?}
 */function _stripIndexHtml(url){return url.replace(/\/index.html$/,'');}/**
 * \@whatItDoes Use URL hash for storing application location data.
 * \@description
 * `HashLocationStrategy` is a {\@link LocationStrategy} used to configure the
 * {\@link Location} service to represent its state in the
 * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)
 * of the browser's URL.
 *
 * For instance, if you call `location.go('/foo')`, the browser's URL will become
 * `example.com#/foo`.
 *
 * ### Example
 *
 * {\@example common/location/ts/hash_location_component.ts region='LocationComponent'}
 *
 * \@stable
 */var HashLocationStrategy=function(_LocationStrategy){_inherits(HashLocationStrategy,_LocationStrategy);/**
     * @param {?} _platformLocation
     * @param {?=} _baseHref
     */function HashLocationStrategy(_platformLocation,_baseHref){_classCallCheck(this,HashLocationStrategy);var _this2=_possibleConstructorReturn(this,(HashLocationStrategy.__proto__||Object.getPrototypeOf(HashLocationStrategy)).call(this));_this2._platformLocation=_platformLocation;_this2._baseHref='';if(isPresent(_baseHref)){_this2._baseHref=_baseHref;}return _this2;}/**
     * @param {?} fn
     * @return {?}
     */_createClass(HashLocationStrategy,[{key:'onPopState',value:function onPopState(fn){this._platformLocation.onPopState(fn);this._platformLocation.onHashChange(fn);}/**
     * @return {?}
     */},{key:'getBaseHref',value:function getBaseHref(){return this._baseHref;}/**
     * @param {?=} includeHash
     * @return {?}
     */},{key:'path',value:function path(){var includeHash=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;// the hash value is always prefixed with a `#`
// and if it is empty then it will stay empty
var/** @type {?} */path=this._platformLocation.hash;if(!isPresent(path))path='#';return path.length>0?path.substring(1):path;}/**
     * @param {?} internal
     * @return {?}
     */},{key:'prepareExternalUrl',value:function prepareExternalUrl(internal){var/** @type {?} */url=Location.joinWithSlash(this._baseHref,internal);return url.length>0?'#'+url:url;}/**
     * @param {?} state
     * @param {?} title
     * @param {?} path
     * @param {?} queryParams
     * @return {?}
     */},{key:'pushState',value:function pushState(state,title,path,queryParams){var/** @type {?} */url=this.prepareExternalUrl(path+Location.normalizeQueryParams(queryParams));if(url.length==0){url=this._platformLocation.pathname;}this._platformLocation.pushState(state,title,url);}/**
     * @param {?} state
     * @param {?} title
     * @param {?} path
     * @param {?} queryParams
     * @return {?}
     */},{key:'replaceState',value:function replaceState(state,title,path,queryParams){var/** @type {?} */url=this.prepareExternalUrl(path+Location.normalizeQueryParams(queryParams));if(url.length==0){url=this._platformLocation.pathname;}this._platformLocation.replaceState(state,title,url);}/**
     * @return {?}
     */},{key:'forward',value:function forward(){this._platformLocation.forward();}/**
     * @return {?}
     */},{key:'back',value:function back(){this._platformLocation.back();}}]);return HashLocationStrategy;}(LocationStrategy);HashLocationStrategy.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["B" /* Injectable */]}];/** @nocollapse */HashLocationStrategy.ctorParameters=function(){return[{type:PlatformLocation},{type:undefined,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["E" /* Optional */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["I" /* Inject */],args:[APP_BASE_HREF]}]}];};/**
 * \@whatItDoes Use URL for storing application location data.
 * \@description
 * `PathLocationStrategy` is a {\@link LocationStrategy} used to configure the
 * {\@link Location} service to represent its state in the
 * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the
 * browser's URL.
 *
 * If you're using `PathLocationStrategy`, you must provide a {\@link APP_BASE_HREF}
 * or add a base element to the document. This URL prefix that will be preserved
 * when generating and recognizing URLs.
 *
 * For instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call
 * `location.go('/foo')`, the browser's URL will become
 * `example.com/my/app/foo`.
 *
 * Similarly, if you add `<base href='/my/app'/>` to the document and call
 * `location.go('/foo')`, the browser's URL will become
 * `example.com/my/app/foo`.
 *
 * ### Example
 *
 * {\@example common/location/ts/path_location_component.ts region='LocationComponent'}
 *
 * \@stable
 */var PathLocationStrategy=function(_LocationStrategy2){_inherits(PathLocationStrategy,_LocationStrategy2);/**
     * @param {?} _platformLocation
     * @param {?=} href
     */function PathLocationStrategy(_platformLocation,href){_classCallCheck(this,PathLocationStrategy);var _this3=_possibleConstructorReturn(this,(PathLocationStrategy.__proto__||Object.getPrototypeOf(PathLocationStrategy)).call(this));_this3._platformLocation=_platformLocation;if(isBlank(href)){href=_this3._platformLocation.getBaseHrefFromDOM();}if(isBlank(href)){throw new Error('No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.');}_this3._baseHref=href;return _this3;}/**
     * @param {?} fn
     * @return {?}
     */_createClass(PathLocationStrategy,[{key:'onPopState',value:function onPopState(fn){this._platformLocation.onPopState(fn);this._platformLocation.onHashChange(fn);}/**
     * @return {?}
     */},{key:'getBaseHref',value:function getBaseHref(){return this._baseHref;}/**
     * @param {?} internal
     * @return {?}
     */},{key:'prepareExternalUrl',value:function prepareExternalUrl(internal){return Location.joinWithSlash(this._baseHref,internal);}/**
     * @param {?=} includeHash
     * @return {?}
     */},{key:'path',value:function path(){var includeHash=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var/** @type {?} */pathname=this._platformLocation.pathname+Location.normalizeQueryParams(this._platformLocation.search);var/** @type {?} */hash=this._platformLocation.hash;return hash&&includeHash?''+pathname+hash:pathname;}/**
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @param {?} queryParams
     * @return {?}
     */},{key:'pushState',value:function pushState(state,title,url,queryParams){var/** @type {?} */externalUrl=this.prepareExternalUrl(url+Location.normalizeQueryParams(queryParams));this._platformLocation.pushState(state,title,externalUrl);}/**
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @param {?} queryParams
     * @return {?}
     */},{key:'replaceState',value:function replaceState(state,title,url,queryParams){var/** @type {?} */externalUrl=this.prepareExternalUrl(url+Location.normalizeQueryParams(queryParams));this._platformLocation.replaceState(state,title,externalUrl);}/**
     * @return {?}
     */},{key:'forward',value:function forward(){this._platformLocation.forward();}/**
     * @return {?}
     */},{key:'back',value:function back(){this._platformLocation.back();}}]);return PathLocationStrategy;}(LocationStrategy);PathLocationStrategy.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["B" /* Injectable */]}];/** @nocollapse */PathLocationStrategy.ctorParameters=function(){return[{type:PlatformLocation},{type:undefined,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["E" /* Optional */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["I" /* Inject */],args:[APP_BASE_HREF]}]}];};/**
 * \@experimental
 * @abstract
 */var NgLocalization=function(){function NgLocalization(){_classCallCheck(this,NgLocalization);}_createClass(NgLocalization,[{key:'getPluralCategory',/**
     * @abstract
     * @param {?} value
     * @return {?}
     */value:function getPluralCategory(value){}}]);return NgLocalization;}();/**
 * Returns the plural category for a given value.
 * - "=value" when the case exists,
 * - the plural category otherwise
 *
 * \@internal
 * @param {?} value
 * @param {?} cases
 * @param {?} ngLocalization
 * @return {?}
 */function getPluralCategory(value,cases,ngLocalization){var/** @type {?} */key='='+value;if(cases.indexOf(key)>-1){return key;}key=ngLocalization.getPluralCategory(value);if(cases.indexOf(key)>-1){return key;}if(cases.indexOf('other')>-1){return'other';}throw new Error('No plural message found for value "'+value+'"');}/**
 * Returns the plural case based on the locale
 *
 * \@experimental
 */var NgLocaleLocalization=function(_NgLocalization){_inherits(NgLocaleLocalization,_NgLocalization);/**
     * @param {?} locale
     */function NgLocaleLocalization(locale){_classCallCheck(this,NgLocaleLocalization);var _this4=_possibleConstructorReturn(this,(NgLocaleLocalization.__proto__||Object.getPrototypeOf(NgLocaleLocalization)).call(this));_this4.locale=locale;return _this4;}/**
     * @param {?} value
     * @return {?}
     */_createClass(NgLocaleLocalization,[{key:'getPluralCategory',value:function getPluralCategory(value){var/** @type {?} */plural=getPluralCase(this.locale,value);switch(plural){case Plural.Zero:return'zero';case Plural.One:return'one';case Plural.Two:return'two';case Plural.Few:return'few';case Plural.Many:return'many';default:return'other';}}}]);return NgLocaleLocalization;}(NgLocalization);NgLocaleLocalization.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["B" /* Injectable */]}];/** @nocollapse */NgLocaleLocalization.ctorParameters=function(){return[{type:undefined,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["I" /* Inject */],args:[__WEBPACK_IMPORTED_MODULE_0__angular_core__["_3" /* LOCALE_ID */]]}]}];};var Plural={};Plural.Zero=0;Plural.One=1;Plural.Two=2;Plural.Few=3;Plural.Many=4;Plural.Other=5;Plural[Plural.Zero]="Zero";Plural[Plural.One]="One";Plural[Plural.Two]="Two";Plural[Plural.Few]="Few";Plural[Plural.Many]="Many";Plural[Plural.Other]="Other";/**
 * Returns the plural case based on the locale
 *
 * \@experimental
 * @param {?} locale
 * @param {?} nLike
 * @return {?}
 */function getPluralCase(locale,nLike){// TODO(vicb): lazy compute
if(typeof nLike==='string'){nLike=parseInt(/** @type {?} */nLike,10);}var/** @type {?} */n=nLike;var/** @type {?} */nDecimal=n.toString().replace(/^[^.]*\.?/,'');var/** @type {?} */i=Math.floor(Math.abs(n));var/** @type {?} */v=nDecimal.length;var/** @type {?} */f=parseInt(nDecimal,10);var/** @type {?} */t=parseInt(n.toString().replace(/^[^.]*\.?|0+$/g,''),10)||0;var/** @type {?} */lang=locale.split('-')[0].toLowerCase();switch(lang){case'af':case'asa':case'az':case'bem':case'bez':case'bg':case'brx':case'ce':case'cgg':case'chr':case'ckb':case'ee':case'el':case'eo':case'es':case'eu':case'fo':case'fur':case'gsw':case'ha':case'haw':case'hu':case'jgo':case'jmc':case'ka':case'kk':case'kkj':case'kl':case'ks':case'ksb':case'ky':case'lb':case'lg':case'mas':case'mgo':case'ml':case'mn':case'nb':case'nd':case'ne':case'nn':case'nnh':case'nyn':case'om':case'or':case'os':case'ps':case'rm':case'rof':case'rwk':case'saq':case'seh':case'sn':case'so':case'sq':case'ta':case'te':case'teo':case'tk':case'tr':case'ug':case'uz':case'vo':case'vun':case'wae':case'xog':if(n===1)return Plural.One;return Plural.Other;case'agq':case'bas':case'cu':case'dav':case'dje':case'dua':case'dyo':case'ebu':case'ewo':case'guz':case'kam':case'khq':case'ki':case'kln':case'kok':case'ksf':case'lrc':case'lu':case'luo':case'luy':case'mer':case'mfe':case'mgh':case'mua':case'mzn':case'nmg':case'nus':case'qu':case'rn':case'rw':case'sbp':case'twq':case'vai':case'yav':case'yue':case'zgh':case'ak':case'ln':case'mg':case'pa':case'ti':if(n===Math.floor(n)&&n>=0&&n<=1)return Plural.One;return Plural.Other;case'am':case'as':case'bn':case'fa':case'gu':case'hi':case'kn':case'mr':case'zu':if(i===0||n===1)return Plural.One;return Plural.Other;case'ar':if(n===0)return Plural.Zero;if(n===1)return Plural.One;if(n===2)return Plural.Two;if(n%100===Math.floor(n%100)&&n%100>=3&&n%100<=10)return Plural.Few;if(n%100===Math.floor(n%100)&&n%100>=11&&n%100<=99)return Plural.Many;return Plural.Other;case'ast':case'ca':case'de':case'en':case'et':case'fi':case'fy':case'gl':case'it':case'nl':case'sv':case'sw':case'ur':case'yi':if(i===1&&v===0)return Plural.One;return Plural.Other;case'be':if(n%10===1&&!(n%100===11))return Plural.One;if(n%10===Math.floor(n%10)&&n%10>=2&&n%10<=4&&!(n%100>=12&&n%100<=14))return Plural.Few;if(n%10===0||n%10===Math.floor(n%10)&&n%10>=5&&n%10<=9||n%100===Math.floor(n%100)&&n%100>=11&&n%100<=14)return Plural.Many;return Plural.Other;case'br':if(n%10===1&&!(n%100===11||n%100===71||n%100===91))return Plural.One;if(n%10===2&&!(n%100===12||n%100===72||n%100===92))return Plural.Two;if(n%10===Math.floor(n%10)&&(n%10>=3&&n%10<=4||n%10===9)&&!(n%100>=10&&n%100<=19||n%100>=70&&n%100<=79||n%100>=90&&n%100<=99))return Plural.Few;if(!(n===0)&&n%1e6===0)return Plural.Many;return Plural.Other;case'bs':case'hr':case'sr':if(v===0&&i%10===1&&!(i%100===11)||f%10===1&&!(f%100===11))return Plural.One;if(v===0&&i%10===Math.floor(i%10)&&i%10>=2&&i%10<=4&&!(i%100>=12&&i%100<=14)||f%10===Math.floor(f%10)&&f%10>=2&&f%10<=4&&!(f%100>=12&&f%100<=14))return Plural.Few;return Plural.Other;case'cs':case'sk':if(i===1&&v===0)return Plural.One;if(i===Math.floor(i)&&i>=2&&i<=4&&v===0)return Plural.Few;if(!(v===0))return Plural.Many;return Plural.Other;case'cy':if(n===0)return Plural.Zero;if(n===1)return Plural.One;if(n===2)return Plural.Two;if(n===3)return Plural.Few;if(n===6)return Plural.Many;return Plural.Other;case'da':if(n===1||!(t===0)&&(i===0||i===1))return Plural.One;return Plural.Other;case'dsb':case'hsb':if(v===0&&i%100===1||f%100===1)return Plural.One;if(v===0&&i%100===2||f%100===2)return Plural.Two;if(v===0&&i%100===Math.floor(i%100)&&i%100>=3&&i%100<=4||f%100===Math.floor(f%100)&&f%100>=3&&f%100<=4)return Plural.Few;return Plural.Other;case'ff':case'fr':case'hy':case'kab':if(i===0||i===1)return Plural.One;return Plural.Other;case'fil':if(v===0&&(i===1||i===2||i===3)||v===0&&!(i%10===4||i%10===6||i%10===9)||!(v===0)&&!(f%10===4||f%10===6||f%10===9))return Plural.One;return Plural.Other;case'ga':if(n===1)return Plural.One;if(n===2)return Plural.Two;if(n===Math.floor(n)&&n>=3&&n<=6)return Plural.Few;if(n===Math.floor(n)&&n>=7&&n<=10)return Plural.Many;return Plural.Other;case'gd':if(n===1||n===11)return Plural.One;if(n===2||n===12)return Plural.Two;if(n===Math.floor(n)&&(n>=3&&n<=10||n>=13&&n<=19))return Plural.Few;return Plural.Other;case'gv':if(v===0&&i%10===1)return Plural.One;if(v===0&&i%10===2)return Plural.Two;if(v===0&&(i%100===0||i%100===20||i%100===40||i%100===60||i%100===80))return Plural.Few;if(!(v===0))return Plural.Many;return Plural.Other;case'he':if(i===1&&v===0)return Plural.One;if(i===2&&v===0)return Plural.Two;if(v===0&&!(n>=0&&n<=10)&&n%10===0)return Plural.Many;return Plural.Other;case'is':if(t===0&&i%10===1&&!(i%100===11)||!(t===0))return Plural.One;return Plural.Other;case'ksh':if(n===0)return Plural.Zero;if(n===1)return Plural.One;return Plural.Other;case'kw':case'naq':case'se':case'smn':if(n===1)return Plural.One;if(n===2)return Plural.Two;return Plural.Other;case'lag':if(n===0)return Plural.Zero;if((i===0||i===1)&&!(n===0))return Plural.One;return Plural.Other;case'lt':if(n%10===1&&!(n%100>=11&&n%100<=19))return Plural.One;if(n%10===Math.floor(n%10)&&n%10>=2&&n%10<=9&&!(n%100>=11&&n%100<=19))return Plural.Few;if(!(f===0))return Plural.Many;return Plural.Other;case'lv':case'prg':if(n%10===0||n%100===Math.floor(n%100)&&n%100>=11&&n%100<=19||v===2&&f%100===Math.floor(f%100)&&f%100>=11&&f%100<=19)return Plural.Zero;if(n%10===1&&!(n%100===11)||v===2&&f%10===1&&!(f%100===11)||!(v===2)&&f%10===1)return Plural.One;return Plural.Other;case'mk':if(v===0&&i%10===1||f%10===1)return Plural.One;return Plural.Other;case'mt':if(n===1)return Plural.One;if(n===0||n%100===Math.floor(n%100)&&n%100>=2&&n%100<=10)return Plural.Few;if(n%100===Math.floor(n%100)&&n%100>=11&&n%100<=19)return Plural.Many;return Plural.Other;case'pl':if(i===1&&v===0)return Plural.One;if(v===0&&i%10===Math.floor(i%10)&&i%10>=2&&i%10<=4&&!(i%100>=12&&i%100<=14))return Plural.Few;if(v===0&&!(i===1)&&i%10===Math.floor(i%10)&&i%10>=0&&i%10<=1||v===0&&i%10===Math.floor(i%10)&&i%10>=5&&i%10<=9||v===0&&i%100===Math.floor(i%100)&&i%100>=12&&i%100<=14)return Plural.Many;return Plural.Other;case'pt':if(n===Math.floor(n)&&n>=0&&n<=2&&!(n===2))return Plural.One;return Plural.Other;case'ro':if(i===1&&v===0)return Plural.One;if(!(v===0)||n===0||!(n===1)&&n%100===Math.floor(n%100)&&n%100>=1&&n%100<=19)return Plural.Few;return Plural.Other;case'ru':case'uk':if(v===0&&i%10===1&&!(i%100===11))return Plural.One;if(v===0&&i%10===Math.floor(i%10)&&i%10>=2&&i%10<=4&&!(i%100>=12&&i%100<=14))return Plural.Few;if(v===0&&i%10===0||v===0&&i%10===Math.floor(i%10)&&i%10>=5&&i%10<=9||v===0&&i%100===Math.floor(i%100)&&i%100>=11&&i%100<=14)return Plural.Many;return Plural.Other;case'shi':if(i===0||n===1)return Plural.One;if(n===Math.floor(n)&&n>=2&&n<=10)return Plural.Few;return Plural.Other;case'si':if(n===0||n===1||i===0&&f===1)return Plural.One;return Plural.Other;case'sl':if(v===0&&i%100===1)return Plural.One;if(v===0&&i%100===2)return Plural.Two;if(v===0&&i%100===Math.floor(i%100)&&i%100>=3&&i%100<=4||!(v===0))return Plural.Few;return Plural.Other;case'tzm':if(n===Math.floor(n)&&n>=0&&n<=1||n===Math.floor(n)&&n>=11&&n<=99)return Plural.One;return Plural.Other;default:return Plural.Other;}}/**
 * @param {?} obj
 * @return {?}
 */function isListLikeIterable(obj){if(!isJsObject(obj))return false;return Array.isArray(obj)||!(obj instanceof Map)&&getSymbolIterator()in obj;// JS Iterable have a Symbol.iterator prop
}/**
 * \@ngModule CommonModule
 *
 * \@whatItDoes Adds and removes CSS classes on an HTML element.
 *
 * \@howToUse
 * ```
 *     <some-element [ngClass]="'first second'">...</some-element>
 *
 *     <some-element [ngClass]="['first', 'second']">...</some-element>
 *
 *     <some-element [ngClass]="{'first': true, 'second': true, 'third': false}">...</some-element>
 *
 *     <some-element [ngClass]="stringExp|arrayExp|objExp">...</some-element>
 *
 *     <some-element [ngClass]="{'class1 class2 class3' : true}">...</some-element>
 * ```
 *
 * \@description
 *
 * The CSS classes are updated as follows, depending on the type of the expression evaluation:
 * - `string` - the CSS classes listed in the string (space delimited) are added,
 * - `Array` - the CSS classes declared as Array elements are added,
 * - `Object` - keys are CSS classes that get added when the expression given in the value
 *              evaluates to a truthy value, otherwise they are removed.
 *
 * \@stable
 */var NgClass=function(){/**
     * @param {?} _iterableDiffers
     * @param {?} _keyValueDiffers
     * @param {?} _ngEl
     * @param {?} _renderer
     */function NgClass(_iterableDiffers,_keyValueDiffers,_ngEl,_renderer){_classCallCheck(this,NgClass);this._iterableDiffers=_iterableDiffers;this._keyValueDiffers=_keyValueDiffers;this._ngEl=_ngEl;this._renderer=_renderer;this._initialClasses=[];}/**
     * @param {?} v
     * @return {?}
     */_createClass(NgClass,[{key:'ngDoCheck',/**
     * @return {?}
     */value:function ngDoCheck(){if(this._iterableDiffer){var/** @type {?} */iterableChanges=this._iterableDiffer.diff(/** @type {?} */this._rawClass);if(iterableChanges){this._applyIterableChanges(iterableChanges);}}else if(this._keyValueDiffer){var/** @type {?} */keyValueChanges=this._keyValueDiffer.diff(/** @type {?} */this._rawClass);if(keyValueChanges){this._applyKeyValueChanges(keyValueChanges);}}}/**
     * @param {?} rawClassVal
     * @return {?}
     */},{key:'_cleanupClasses',value:function _cleanupClasses(rawClassVal){this._applyClasses(rawClassVal,true);this._applyInitialClasses(false);}/**
     * @param {?} changes
     * @return {?}
     */},{key:'_applyKeyValueChanges',value:function _applyKeyValueChanges(changes){var _this5=this;changes.forEachAddedItem(function(record){return _this5._toggleClass(record.key,record.currentValue);});changes.forEachChangedItem(function(record){return _this5._toggleClass(record.key,record.currentValue);});changes.forEachRemovedItem(function(record){if(record.previousValue){_this5._toggleClass(record.key,false);}});}/**
     * @param {?} changes
     * @return {?}
     */},{key:'_applyIterableChanges',value:function _applyIterableChanges(changes){var _this6=this;changes.forEachAddedItem(function(record){if(typeof record.item==='string'){_this6._toggleClass(record.item,true);}else{throw new Error('NgClass can only toggle CSS classes expressed as strings, got '+stringify(record.item));}});changes.forEachRemovedItem(function(record){return _this6._toggleClass(record.item,false);});}/**
     * @param {?} isCleanup
     * @return {?}
     */},{key:'_applyInitialClasses',value:function _applyInitialClasses(isCleanup){var _this7=this;this._initialClasses.forEach(function(klass){return _this7._toggleClass(klass,!isCleanup);});}/**
     * @param {?} rawClassVal
     * @param {?} isCleanup
     * @return {?}
     */},{key:'_applyClasses',value:function _applyClasses(rawClassVal,isCleanup){var _this8=this;if(rawClassVal){if(Array.isArray(rawClassVal)||rawClassVal instanceof Set){rawClassVal.forEach(function(klass){return _this8._toggleClass(klass,!isCleanup);});}else{Object.keys(rawClassVal).forEach(function(klass){if(rawClassVal[klass]!=null)_this8._toggleClass(klass,!isCleanup);});}}}/**
     * @param {?} klass
     * @param {?} enabled
     * @return {?}
     */},{key:'_toggleClass',value:function _toggleClass(klass,enabled){var _this9=this;klass=klass.trim();if(klass){klass.split(/\s+/g).forEach(function(klass){_this9._renderer.setElementClass(_this9._ngEl.nativeElement,klass,!!enabled);});}}},{key:'klass',set:function set(v){this._applyInitialClasses(true);this._initialClasses=typeof v==='string'?v.split(/\s+/):[];this._applyInitialClasses(false);this._applyClasses(this._rawClass,false);}/**
     * @param {?} v
     * @return {?}
     */},{key:'ngClass',set:function set(v){this._cleanupClasses(this._rawClass);this._iterableDiffer=null;this._keyValueDiffer=null;this._rawClass=typeof v==='string'?v.split(/\s+/):v;if(this._rawClass){if(isListLikeIterable(this._rawClass)){this._iterableDiffer=this._iterableDiffers.find(this._rawClass).create();}else{this._keyValueDiffer=this._keyValueDiffers.find(this._rawClass).create();}}}}]);return NgClass;}();NgClass.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'[ngClass]'}]}];/** @nocollapse */NgClass.ctorParameters=function(){return[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_4" /* IterableDiffers */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_5" /* KeyValueDiffers */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["t" /* ElementRef */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["s" /* Renderer */]}];};NgClass.propDecorators={'klass':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */],args:['class']}],'ngClass':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */]}]};/**
 * Instantiates a single {\@link Component} type and inserts its Host View into current View.
 * `NgComponentOutlet` provides a declarative approach for dynamic component creation.
 *
 * `NgComponentOutlet` requires a component type, if a falsy value is set the view will clear and
 * any existing component will get destroyed.
 *
 * ### Fine tune control
 *
 * You can control the component creation process by using the following optional attributes:
 *
 * * `ngComponentOutletInjector`: Optional custom {\@link Injector} that will be used as parent for
 * the Component. Defaults to the injector of the current view container.
 *
 * * `ngComponentOutletProviders`: Optional injectable objects ({\@link Provider}) that are visible
 * to the component.
 *
 * * `ngComponentOutletContent`: Optional list of projectable nodes to insert into the content
 * section of the component, if exists.
 *
 * * `ngComponentOutletNgModuleFactory`: Optional module factory to allow dynamically loading other
 * module, then load a component from that module.
 *
 * ### Syntax
 *
 * Simple
 * ```
 * <ng-container *ngComponentOutlet="componentTypeExpression"></ng-container>
 * ```
 *
 * Customized injector/content
 * ```
 * <ng-container *ngComponentOutlet="componentTypeExpression;
 *                                   injector: injectorExpression;
 *                                   content: contentNodesExpression;">
 * </ng-container>
 * ```
 *
 * Customized ngModuleFactory
 * ```
 * <ng-container *ngComponentOutlet="componentTypeExpression;
 *                                   ngModuleFactory: moduleFactory;">
 * </ng-container>
 * ```
 * # Example
 *
 * {\@example common/ngComponentOutlet/ts/module.ts region='SimpleExample'}
 *
 * A more complete example with additional options:
 *
 * {\@example common/ngComponentOutlet/ts/module.ts region='CompleteExample'}
 * A more complete example with ngModuleFactory:
 *
 * {\@example common/ngComponentOutlet/ts/module.ts region='NgModuleFactoryExample'}
 *
 * \@experimental
 */var NgComponentOutlet=function(){/**
     * @param {?} _viewContainerRef
     */function NgComponentOutlet(_viewContainerRef){_classCallCheck(this,NgComponentOutlet);this._viewContainerRef=_viewContainerRef;this._componentRef=null;this._moduleRef=null;}/**
     * @param {?} changes
     * @return {?}
     */_createClass(NgComponentOutlet,[{key:'ngOnChanges',value:function ngOnChanges(changes){if(this._componentRef){this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._componentRef.hostView));}this._viewContainerRef.clear();this._componentRef=null;if(this.ngComponentOutlet){var/** @type {?} */injector=this.ngComponentOutletInjector||this._viewContainerRef.parentInjector;if(changes.ngComponentOutletNgModuleFactory){if(this._moduleRef)this._moduleRef.destroy();if(this.ngComponentOutletNgModuleFactory){this._moduleRef=this.ngComponentOutletNgModuleFactory.create(injector);}else{this._moduleRef=null;}}if(this._moduleRef){injector=this._moduleRef.injector;}var/** @type {?} */componentFactory=injector.get(__WEBPACK_IMPORTED_MODULE_0__angular_core__["e" /* ComponentFactoryResolver */]).resolveComponentFactory(this.ngComponentOutlet);this._componentRef=this._viewContainerRef.createComponent(componentFactory,this._viewContainerRef.length,injector,this.ngComponentOutletContent);}}/**
     * @return {?}
     */},{key:'ngOnDestroy',value:function ngOnDestroy(){if(this._moduleRef)this._moduleRef.destroy();}}]);return NgComponentOutlet;}();NgComponentOutlet.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'[ngComponentOutlet]'}]}];/** @nocollapse */NgComponentOutlet.ctorParameters=function(){return[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["z" /* ViewContainerRef */]}];};NgComponentOutlet.propDecorators={'ngComponentOutlet':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */]}],'ngComponentOutletInjector':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */]}],'ngComponentOutletContent':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */]}],'ngComponentOutletNgModuleFactory':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */]}]};var NgForOfRow=function(){/**
     * @param {?} $implicit
     * @param {?} index
     * @param {?} count
     */function NgForOfRow($implicit,index,count){_classCallCheck(this,NgForOfRow);this.$implicit=$implicit;this.index=index;this.count=count;}/**
     * @return {?}
     */_createClass(NgForOfRow,[{key:'first',get:function get(){return this.index===0;}/**
     * @return {?}
     */},{key:'last',get:function get(){return this.index===this.count-1;}/**
     * @return {?}
     */},{key:'even',get:function get(){return this.index%2===0;}/**
     * @return {?}
     */},{key:'odd',get:function get(){return!this.even;}}]);return NgForOfRow;}();/**
 * The `NgForOf` directive instantiates a template once per item from an iterable. The context
 * for each instantiated template inherits from the outer context with the given loop variable
 * set to the current item from the iterable.
 *
 * ### Local Variables
 *
 * `NgForOf` provides several exported values that can be aliased to local variables:
 *
 * * `index` will be set to the current loop iteration for each template context.
 * * `first` will be set to a boolean value indicating whether the item is the first one in the
 *   iteration.
 * * `last` will be set to a boolean value indicating whether the item is the last one in the
 *   iteration.
 * * `even` will be set to a boolean value indicating whether this item has an even index.
 * * `odd` will be set to a boolean value indicating whether this item has an odd index.
 *
 * ### Change Propagation
 *
 * When the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:
 *
 * * When an item is added, a new instance of the template is added to the DOM.
 * * When an item is removed, its template instance is removed from the DOM.
 * * When items are reordered, their respective templates are reordered in the DOM.
 * * Otherwise, the DOM element for that item will remain the same.
 *
 * Angular uses object identity to track insertions and deletions within the iterator and reproduce
 * those changes in the DOM. This has important implications for animations and any stateful
 * controls (such as `<input>` elements which accept user input) that are present. Inserted rows can
 * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state
 * such as user input.
 *
 * It is possible for the identities of elements in the iterator to change while the data does not.
 * This can happen, for example, if the iterator produced from an RPC to the server, and that
 * RPC is re-run. Even if the data hasn't changed, the second response will produce objects with
 * different identities, and Angular will tear down the entire DOM and rebuild it (as if all old
 * elements were deleted and all new elements inserted). This is an expensive operation and should
 * be avoided if possible.
 *
 * To customize the default tracking algorithm, `NgForOf` supports `trackBy` option.
 * `trackBy` takes a function which has two arguments: `index` and `item`.
 * If `trackBy` is given, Angular tracks changes by the return value of the function.
 *
 * ### Syntax
 *
 * - `<li *ngFor="let item of items; let i = index; trackBy: trackByFn">...</li>`
 * - `<li template="ngFor let item of items; let i = index; trackBy: trackByFn">...</li>`
 *
 * With `<ng-template>` element:
 *
 * ```
 * <ng-template ngFor let-item [ngForOf]="items" let-i="index" [ngForTrackBy]="trackByFn">
 *   <li>...</li>
 * </ng-template>
 * ```
 *
 * ### Example
 *
 * See a [live demo](http://plnkr.co/edit/KVuXxDp0qinGDyo307QW?p=preview) for a more detailed
 * example.
 *
 * \@stable
 */var NgForOf=function(){/**
     * @param {?} _viewContainer
     * @param {?} _template
     * @param {?} _differs
     */function NgForOf(_viewContainer,_template,_differs){_classCallCheck(this,NgForOf);this._viewContainer=_viewContainer;this._template=_template;this._differs=_differs;this._differ=null;}/**
     * @param {?} fn
     * @return {?}
     */_createClass(NgForOf,[{key:'ngOnChanges',/**
     * @param {?} changes
     * @return {?}
     */value:function ngOnChanges(changes){if('ngForOf'in changes){// React on ngForOf changes only once all inputs have been initialized
var/** @type {?} */value=changes['ngForOf'].currentValue;if(!this._differ&&value){try{this._differ=this._differs.find(value).create(this.ngForTrackBy);}catch(e){throw new Error('Cannot find a differ supporting object \''+value+'\' of type \''+getTypeNameForDebugging(value)+'\'. NgFor only supports binding to Iterables such as Arrays.');}}}}/**
     * @return {?}
     */},{key:'ngDoCheck',value:function ngDoCheck(){if(this._differ){var/** @type {?} */changes=this._differ.diff(this.ngForOf);if(changes)this._applyChanges(changes);}}/**
     * @param {?} changes
     * @return {?}
     */},{key:'_applyChanges',value:function _applyChanges(changes){var _this10=this;var/** @type {?} */insertTuples=[];changes.forEachOperation(function(item,adjustedPreviousIndex,currentIndex){if(item.previousIndex==null){var/** @type {?} */view=_this10._viewContainer.createEmbeddedView(_this10._template,new NgForOfRow(null,null,null),currentIndex);var/** @type {?} */tuple=new RecordViewTuple(item,view);insertTuples.push(tuple);}else if(currentIndex==null){_this10._viewContainer.remove(adjustedPreviousIndex);}else{var/** @type {?} */_view=_this10._viewContainer.get(adjustedPreviousIndex);_this10._viewContainer.move(_view,currentIndex);var/** @type {?} */_tuple=new RecordViewTuple(item,/** @type {?} */_view);insertTuples.push(_tuple);}});for(var/** @type {?} */i=0;i<insertTuples.length;i++){this._perViewChange(insertTuples[i].view,insertTuples[i].record);}for(var/** @type {?} */_i=0,/** @type {?} */ilen=this._viewContainer.length;_i<ilen;_i++){var/** @type {?} */viewRef=this._viewContainer.get(_i);viewRef.context.index=_i;viewRef.context.count=ilen;}changes.forEachIdentityChange(function(record){var/** @type {?} */viewRef=_this10._viewContainer.get(record.currentIndex);viewRef.context.$implicit=record.item;});}/**
     * @param {?} view
     * @param {?} record
     * @return {?}
     */},{key:'_perViewChange',value:function _perViewChange(view,record){view.context.$implicit=record.item;}},{key:'ngForTrackBy',set:function set(fn){if(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["p" /* isDevMode */])()&&fn!=null&&typeof fn!=='function'){// TODO(vicb): use a log service once there is a public one available
if(console&&console.warn){console.warn('trackBy must be a function, but received '+JSON.stringify(fn)+'. '+'See https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html#!#change-propagation for more information.');}}this._trackByFn=fn;}/**
     * @return {?}
     */,get:function get(){return this._trackByFn;}/**
     * @param {?} value
     * @return {?}
     */},{key:'ngForTemplate',set:function set(value){// TODO(TS2.1): make TemplateRef<Partial<NgForRowOf<T>>> once we move to TS v2.1
// The current type is too restrictive; a template that just uses index, for example,
// should be acceptable.
if(value){this._template=value;}}}]);return NgForOf;}();NgForOf.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'[ngFor][ngForOf]'}]}];/** @nocollapse */NgForOf.ctorParameters=function(){return[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["z" /* ViewContainerRef */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_6" /* TemplateRef */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_4" /* IterableDiffers */]}];};NgForOf.propDecorators={'ngForOf':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */]}],'ngForTrackBy':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */]}],'ngForTemplate':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */]}]};var RecordViewTuple=/**
     * @param {?} record
     * @param {?} view
     */function RecordViewTuple(record,view){_classCallCheck(this,RecordViewTuple);this.record=record;this.view=view;};/**
 * @deprecated from v4.0.0 - Use NgForOf instead.
 */var/** @type {?} */NgFor=NgForOf;/**
 * Conditionally includes a template based on the value of an `expression`.
 *
 * `ngIf` evaluates the `expression` and then renders the `then` or `else` template in its place
 * when expression is truthy or falsy respectively. Typically the:
 *  - `then` template is the inline template of `ngIf` unless bound to a different value.
 *  - `else` template is blank unless it is bound.
 *
 * # Most common usage
 *
 * The most common usage of the `ngIf` directive is to conditionally show the inline template as
 * seen in this example:
 * {\@example common/ngIf/ts/module.ts region='NgIfSimple'}
 *
 * # Showing an alternative template using `else`
 *
 * If it is necessary to display a template when the `expression` is falsy use the `else` template
 * binding as shown. Note that the `else` binding points to a `<ng-template>` labeled `#elseBlock`.
 * The template can be defined anywhere in the component view but is typically placed right after
 * `ngIf` for readability.
 *
 * {\@example common/ngIf/ts/module.ts region='NgIfElse'}
 *
 * # Using non-inlined `then` template
 *
 * Usually the `then` template is the inlined template of the `ngIf`, but it can be changed using
 * a binding (just like `else`). Because `then` and `else` are bindings, the template references can
 * change at runtime as shown in this example.
 *
 * {\@example common/ngIf/ts/module.ts region='NgIfThenElse'}
 *
 * # Storing conditional result in a variable
 *
 * A common pattern is that we need to show a set of properties from the same object. If the
 * object is undefined, then we have to use the safe-traversal-operator `?.` to guard against
 * dereferencing a `null` value. This is especially the case when waiting on async data such as
 * when using the `async` pipe as shown in folowing example:
 *
 * ```
 * Hello {{ (userStream|async)?.last }}, {{ (userStream|async)?.first }}!
 * ```
 *
 * There are several inefficiencies in the above example:
 *  - We create multiple subscriptions on `userStream`. One for each `async` pipe, or two in the
 *    example above.
 *  - We cannot display an alternative screen while waiting for the data to arrive asynchronously.
 *  - We have to use the safe-traversal-operator `?.` to access properties, which is cumbersome.
 *  - We have to place the `async` pipe in parenthesis.
 *
 * A better way to do this is to use `ngIf` and store the result of the condition in a local
 * variable as shown in the the example below:
 *
 * {\@example common/ngIf/ts/module.ts region='NgIfLet'}
 *
 * Notice that:
 *  - We use only one `async` pipe and hence only one subscription gets created.
 *  - `ngIf` stores the result of the `userStream|async` in the local variable `user`.
 *  - The local `user` can then be bound repeatedly in a more efficient way.
 *  - No need to use the safe-traversal-operator `?.` to access properties as `ngIf` will only
 *    display the data if `userStream` returns a value.
 *  - We can display an alternative template while waiting for the data.
 *
 * ### Syntax
 *
 * Simple form:
 * - `<div *ngIf="condition">...</div>`
 * - `<div template="ngIf condition">...</div>`
 * - `<ng-template [ngIf]="condition"><div>...</div></ng-template>`
 *
 * Form with an else block:
 * ```
 * <div *ngIf="condition; else elseBlock">...</div>
 * <ng-template #elseBlock>...</ng-template>
 * ```
 *
 * Form with a `then` and `else` block:
 * ```
 * <div *ngIf="condition; then thenBlock else elseBlock"></div>
 * <ng-template #thenBlock>...</ng-template>
 * <ng-template #elseBlock>...</ng-template>
 * ```
 *
 * Form with storing the value locally:
 * ```
 * <div *ngIf="condition; else elseBlock; let value">{{value}}</div>
 * <ng-template #elseBlock>...</ng-template>
 * ```
 *
 * \@stable
 */var NgIf=function(){/**
     * @param {?} _viewContainer
     * @param {?} templateRef
     */function NgIf(_viewContainer,templateRef){_classCallCheck(this,NgIf);this._viewContainer=_viewContainer;this._context=new NgIfContext();this._thenTemplateRef=null;this._elseTemplateRef=null;this._thenViewRef=null;this._elseViewRef=null;this._thenTemplateRef=templateRef;}/**
     * @param {?} condition
     * @return {?}
     */_createClass(NgIf,[{key:'_updateView',/**
     * @return {?}
     */value:function _updateView(){if(this._context.$implicit){if(!this._thenViewRef){this._viewContainer.clear();this._elseViewRef=null;if(this._thenTemplateRef){this._thenViewRef=this._viewContainer.createEmbeddedView(this._thenTemplateRef,this._context);}}}else{if(!this._elseViewRef){this._viewContainer.clear();this._thenViewRef=null;if(this._elseTemplateRef){this._elseViewRef=this._viewContainer.createEmbeddedView(this._elseTemplateRef,this._context);}}}}},{key:'ngIf',set:function set(condition){this._context.$implicit=condition;this._updateView();}/**
     * @param {?} templateRef
     * @return {?}
     */},{key:'ngIfThen',set:function set(templateRef){this._thenTemplateRef=templateRef;this._thenViewRef=null;// clear previous view if any.
this._updateView();}/**
     * @param {?} templateRef
     * @return {?}
     */},{key:'ngIfElse',set:function set(templateRef){this._elseTemplateRef=templateRef;this._elseViewRef=null;// clear previous view if any.
this._updateView();}}]);return NgIf;}();NgIf.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'[ngIf]'}]}];/** @nocollapse */NgIf.ctorParameters=function(){return[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["z" /* ViewContainerRef */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_6" /* TemplateRef */]}];};NgIf.propDecorators={'ngIf':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */]}],'ngIfThen':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */]}],'ngIfElse':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */]}]};var NgIfContext=function NgIfContext(){_classCallCheck(this,NgIfContext);this.$implicit=null;};var SwitchView=function(){/**
     * @param {?} _viewContainerRef
     * @param {?} _templateRef
     */function SwitchView(_viewContainerRef,_templateRef){_classCallCheck(this,SwitchView);this._viewContainerRef=_viewContainerRef;this._templateRef=_templateRef;this._created=false;}/**
     * @return {?}
     */_createClass(SwitchView,[{key:'create',value:function create(){this._created=true;this._viewContainerRef.createEmbeddedView(this._templateRef);}/**
     * @return {?}
     */},{key:'destroy',value:function destroy(){this._created=false;this._viewContainerRef.clear();}/**
     * @param {?} created
     * @return {?}
     */},{key:'enforceState',value:function enforceState(created){if(created&&!this._created){this.create();}else if(!created&&this._created){this.destroy();}}}]);return SwitchView;}();/**
 * \@ngModule CommonModule
 *
 * \@whatItDoes Adds / removes DOM sub-trees when the nest match expressions matches the switch
 *             expression.
 *
 * \@howToUse
 * ```
 *     <container-element [ngSwitch]="switch_expression">
 *       <some-element *ngSwitchCase="match_expression_1">...</some-element>
 *       <some-element *ngSwitchCase="match_expression_2">...</some-element>
 *       <some-other-element *ngSwitchCase="match_expression_3">...</some-other-element>
 *       <ng-container *ngSwitchCase="match_expression_3">
 *         <!-- use a ng-container to group multiple root nodes -->
 *         <inner-element></inner-element>
 *         <inner-other-element></inner-other-element>
 *       </ng-container>
 *       <some-element *ngSwitchDefault>...</some-element>
 *     </container-element>
 * ```
 * \@description
 *
 * `NgSwitch` stamps out nested views when their match expression value matches the value of the
 * switch expression.
 *
 * In other words:
 * - you define a container element (where you place the directive with a switch expression on the
 * `[ngSwitch]="..."` attribute)
 * - you define inner views inside the `NgSwitch` and place a `*ngSwitchCase` attribute on the view
 * root elements.
 *
 * Elements within `NgSwitch` but outside of a `NgSwitchCase` or `NgSwitchDefault` directives will
 * be preserved at the location.
 *
 * The `ngSwitchCase` directive informs the parent `NgSwitch` of which view to display when the
 * expression is evaluated.
 * When no matching expression is found on a `ngSwitchCase` view, the `ngSwitchDefault` view is
 * stamped out.
 *
 * \@stable
 */var NgSwitch=function(){function NgSwitch(){_classCallCheck(this,NgSwitch);this._defaultUsed=false;this._caseCount=0;this._lastCaseCheckIndex=0;this._lastCasesMatched=false;}/**
     * @param {?} newValue
     * @return {?}
     */_createClass(NgSwitch,[{key:'_addCase',/**
     * \@internal
     * @return {?}
     */value:function _addCase(){return this._caseCount++;}/**
     * \@internal
     * @param {?} view
     * @return {?}
     */},{key:'_addDefault',value:function _addDefault(view){if(!this._defaultViews){this._defaultViews=[];}this._defaultViews.push(view);}/**
     * \@internal
     * @param {?} value
     * @return {?}
     */},{key:'_matchCase',value:function _matchCase(value){var/** @type {?} */matched=value==this._ngSwitch;this._lastCasesMatched=this._lastCasesMatched||matched;this._lastCaseCheckIndex++;if(this._lastCaseCheckIndex===this._caseCount){this._updateDefaultCases(!this._lastCasesMatched);this._lastCaseCheckIndex=0;this._lastCasesMatched=false;}return matched;}/**
     * @param {?} useDefault
     * @return {?}
     */},{key:'_updateDefaultCases',value:function _updateDefaultCases(useDefault){if(this._defaultViews&&useDefault!==this._defaultUsed){this._defaultUsed=useDefault;for(var/** @type {?} */i=0;i<this._defaultViews.length;i++){var/** @type {?} */defaultView=this._defaultViews[i];defaultView.enforceState(useDefault);}}}},{key:'ngSwitch',set:function set(newValue){this._ngSwitch=newValue;if(this._caseCount===0){this._updateDefaultCases(true);}}}]);return NgSwitch;}();NgSwitch.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'[ngSwitch]'}]}];/** @nocollapse */NgSwitch.ctorParameters=function(){return[];};NgSwitch.propDecorators={'ngSwitch':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */]}]};/**
 * \@ngModule CommonModule
 *
 * \@whatItDoes Creates a view that will be added/removed from the parent {\@link NgSwitch} when the
 *             given expression evaluate to respectively the same/different value as the switch
 *             expression.
 *
 * \@howToUse
 * ```
 * <container-element [ngSwitch]="switch_expression">
 *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
 * </container-element>
 * ```
 * \@description
 *
 * Insert the sub-tree when the expression evaluates to the same value as the enclosing switch
 * expression.
 *
 * If multiple match expressions match the switch expression value, all of them are displayed.
 *
 * See {\@link NgSwitch} for more details and example.
 *
 * \@stable
 */var NgSwitchCase=function(){/**
     * @param {?} viewContainer
     * @param {?} templateRef
     * @param {?} ngSwitch
     */function NgSwitchCase(viewContainer,templateRef,ngSwitch){_classCallCheck(this,NgSwitchCase);this.ngSwitch=ngSwitch;ngSwitch._addCase();this._view=new SwitchView(viewContainer,templateRef);}/**
     * @return {?}
     */_createClass(NgSwitchCase,[{key:'ngDoCheck',value:function ngDoCheck(){this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase));}}]);return NgSwitchCase;}();NgSwitchCase.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'[ngSwitchCase]'}]}];/** @nocollapse */NgSwitchCase.ctorParameters=function(){return[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["z" /* ViewContainerRef */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_6" /* TemplateRef */]},{type:NgSwitch,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_7" /* Host */]}]}];};NgSwitchCase.propDecorators={'ngSwitchCase':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */]}]};/**
 * \@ngModule CommonModule
 * \@whatItDoes Creates a view that is added to the parent {\@link NgSwitch} when no case expressions
 * match the
 *             switch expression.
 *
 * \@howToUse
 * ```
 * <container-element [ngSwitch]="switch_expression">
 *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
 *   <some-other-element *ngSwitchDefault>...</some-other-element>
 * </container-element>
 * ```
 *
 * \@description
 *
 * Insert the sub-tree when no case expressions evaluate to the same value as the enclosing switch
 * expression.
 *
 * See {\@link NgSwitch} for more details and example.
 *
 * \@stable
 */var NgSwitchDefault=/**
     * @param {?} viewContainer
     * @param {?} templateRef
     * @param {?} ngSwitch
     */function NgSwitchDefault(viewContainer,templateRef,ngSwitch){_classCallCheck(this,NgSwitchDefault);ngSwitch._addDefault(new SwitchView(viewContainer,templateRef));};NgSwitchDefault.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'[ngSwitchDefault]'}]}];/** @nocollapse */NgSwitchDefault.ctorParameters=function(){return[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["z" /* ViewContainerRef */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_6" /* TemplateRef */]},{type:NgSwitch,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_7" /* Host */]}]}];};/**
 * \@ngModule CommonModule
 *
 * \@whatItDoes Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.
 *
 * \@howToUse
 * ```
 * <some-element [ngPlural]="value">
 *   <template ngPluralCase="=0">there is nothing</template>
 *   <template ngPluralCase="=1">there is one</template>
 *   <template ngPluralCase="few">there are a few</template>
 * </some-element>
 * ```
 *
 * \@description
 *
 * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees
 * that match the switch expression's pluralization category.
 *
 * To use this directive you must provide a container element that sets the `[ngPlural]` attribute
 * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their
 * expression:
 * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value
 *   matches the switch expression exactly,
 * - otherwise, the view will be treated as a "category match", and will only display if exact
 *   value matches aren't found and the value maps to its category for the defined locale.
 *
 * See http://cldr.unicode.org/index/cldr-spec/plural-rules
 *
 * \@experimental
 */var NgPlural=function(){/**
     * @param {?} _localization
     */function NgPlural(_localization){_classCallCheck(this,NgPlural);this._localization=_localization;this._caseViews={};}/**
     * @param {?} value
     * @return {?}
     */_createClass(NgPlural,[{key:'addCase',/**
     * @param {?} value
     * @param {?} switchView
     * @return {?}
     */value:function addCase(value,switchView){this._caseViews[value]=switchView;}/**
     * @return {?}
     */},{key:'_updateView',value:function _updateView(){this._clearViews();var/** @type {?} */cases=Object.keys(this._caseViews);var/** @type {?} */key=getPluralCategory(this._switchValue,cases,this._localization);this._activateView(this._caseViews[key]);}/**
     * @return {?}
     */},{key:'_clearViews',value:function _clearViews(){if(this._activeView)this._activeView.destroy();}/**
     * @param {?} view
     * @return {?}
     */},{key:'_activateView',value:function _activateView(view){if(view){this._activeView=view;this._activeView.create();}}},{key:'ngPlural',set:function set(value){this._switchValue=value;this._updateView();}}]);return NgPlural;}();NgPlural.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'[ngPlural]'}]}];/** @nocollapse */NgPlural.ctorParameters=function(){return[{type:NgLocalization}];};NgPlural.propDecorators={'ngPlural':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */]}]};/**
 * \@ngModule CommonModule
 *
 * \@whatItDoes Creates a view that will be added/removed from the parent {\@link NgPlural} when the
 *             given expression matches the plural expression according to CLDR rules.
 *
 * \@howToUse
 * ```
 * <some-element [ngPlural]="value">
 *   <template ngPluralCase="=0">...</template>
 *   <template ngPluralCase="other">...</template>
 * </some-element>
 * ```
 *
 * See {\@link NgPlural} for more details and example.
 *
 * \@experimental
 */var NgPluralCase=/**
     * @param {?} value
     * @param {?} template
     * @param {?} viewContainer
     * @param {?} ngPlural
     */function NgPluralCase(value,template,viewContainer,ngPlural){_classCallCheck(this,NgPluralCase);this.value=value;var isANumber=!isNaN(Number(value));ngPlural.addCase(isANumber?'='+value:value,new SwitchView(viewContainer,template));};NgPluralCase.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'[ngPluralCase]'}]}];/** @nocollapse */NgPluralCase.ctorParameters=function(){return[{type:undefined,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["r" /* Attribute */],args:['ngPluralCase']}]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_6" /* TemplateRef */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["z" /* ViewContainerRef */]},{type:NgPlural,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_7" /* Host */]}]}];};/**
 * \@ngModule CommonModule
 *
 * \@whatItDoes Update an HTML element styles.
 *
 * \@howToUse
 * ```
 * <some-element [ngStyle]="{'font-style': styleExp}">...</some-element>
 *
 * <some-element [ngStyle]="{'max-width.px': widthExp}">...</some-element>
 *
 * <some-element [ngStyle]="objExp">...</some-element>
 * ```
 *
 * \@description
 *
 * The styles are updated according to the value of the expression evaluation:
 * - keys are style names with an optional `.<unit>` suffix (ie 'top.px', 'font-style.em'),
 * - values are the values assigned to those properties (expressed in the given unit).
 *
 * \@stable
 */var NgStyle=function(){/**
     * @param {?} _differs
     * @param {?} _ngEl
     * @param {?} _renderer
     */function NgStyle(_differs,_ngEl,_renderer){_classCallCheck(this,NgStyle);this._differs=_differs;this._ngEl=_ngEl;this._renderer=_renderer;}/**
     * @param {?} v
     * @return {?}
     */_createClass(NgStyle,[{key:'ngDoCheck',/**
     * @return {?}
     */value:function ngDoCheck(){if(this._differ){var/** @type {?} */changes=this._differ.diff(this._ngStyle);if(changes){this._applyChanges(changes);}}}/**
     * @param {?} changes
     * @return {?}
     */},{key:'_applyChanges',value:function _applyChanges(changes){var _this11=this;changes.forEachRemovedItem(function(record){return _this11._setStyle(record.key,null);});changes.forEachAddedItem(function(record){return _this11._setStyle(record.key,record.currentValue);});changes.forEachChangedItem(function(record){return _this11._setStyle(record.key,record.currentValue);});}/**
     * @param {?} nameAndUnit
     * @param {?} value
     * @return {?}
     */},{key:'_setStyle',value:function _setStyle(nameAndUnit,value){var _nameAndUnit$split=nameAndUnit.split('.'),_nameAndUnit$split2=_slicedToArray(_nameAndUnit$split,2),name=_nameAndUnit$split2[0],unit=_nameAndUnit$split2[1];value=value!=null&&unit?''+value+unit:value;this._renderer.setElementStyle(this._ngEl.nativeElement,name,/** @type {?} */value);}},{key:'ngStyle',set:function set(v){this._ngStyle=v;if(!this._differ&&v){this._differ=this._differs.find(v).create();}}}]);return NgStyle;}();NgStyle.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'[ngStyle]'}]}];/** @nocollapse */NgStyle.ctorParameters=function(){return[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_5" /* KeyValueDiffers */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["t" /* ElementRef */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["s" /* Renderer */]}];};NgStyle.propDecorators={'ngStyle':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */]}]};/**
 * \@ngModule CommonModule
 *
 * \@whatItDoes Inserts an embedded view from a prepared `TemplateRef`
 *
 * \@howToUse
 * ```
 * <ng-container *ngTemplateOutlet="templateRefExp; context: contextExp"></ng-container>
 * ```
 *
 * \@description
 *
 * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.
 * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding
 * by the local template `let` declarations.
 *
 * Note: using the key `$implicit` in the context object will set it's value as default.
 *
 * # Example
 *
 * {\@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}
 *
 * \@experimental
 */var NgTemplateOutlet=function(){/**
     * @param {?} _viewContainerRef
     */function NgTemplateOutlet(_viewContainerRef){_classCallCheck(this,NgTemplateOutlet);this._viewContainerRef=_viewContainerRef;}/**
     * @deprecated v4.0.0 - Renamed to ngTemplateOutletContext.
     * @param {?} context
     * @return {?}
     */_createClass(NgTemplateOutlet,[{key:'ngOnChanges',/**
     * @param {?} changes
     * @return {?}
     */value:function ngOnChanges(changes){if(this._viewRef){this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));}if(this.ngTemplateOutlet){this._viewRef=this._viewContainerRef.createEmbeddedView(this.ngTemplateOutlet,this.ngTemplateOutletContext);}}},{key:'ngOutletContext',set:function set(context){this.ngTemplateOutletContext=context;}}]);return NgTemplateOutlet;}();NgTemplateOutlet.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'[ngTemplateOutlet]'}]}];/** @nocollapse */NgTemplateOutlet.ctorParameters=function(){return[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["z" /* ViewContainerRef */]}];};NgTemplateOutlet.propDecorators={'ngTemplateOutletContext':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */]}],'ngTemplateOutlet':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */]}],'ngOutletContext':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */]}]};/**
 * A collection of Angular directives that are likely to be used in each and every Angular
 * application.
 */var/** @type {?} */COMMON_DIRECTIVES=[NgClass,NgComponentOutlet,NgForOf,NgIf,NgTemplateOutlet,NgStyle,NgSwitch,NgSwitchCase,NgSwitchDefault,NgPlural,NgPluralCase];/**
 * @param {?} type
 * @param {?} value
 * @return {?}
 */function invalidPipeArgumentError(type,value){return Error('InvalidPipeArgument: \''+value+'\' for pipe \''+stringify(type)+'\'');}var ObservableStrategy=function(){function ObservableStrategy(){_classCallCheck(this,ObservableStrategy);}_createClass(ObservableStrategy,[{key:'createSubscription',/**
     * @param {?} async
     * @param {?} updateLatestValue
     * @return {?}
     */value:function createSubscription(async,updateLatestValue){return async.subscribe({next:updateLatestValue,error:function error(e){throw e;}});}/**
     * @param {?} subscription
     * @return {?}
     */},{key:'dispose',value:function dispose(subscription){subscription.unsubscribe();}/**
     * @param {?} subscription
     * @return {?}
     */},{key:'onDestroy',value:function onDestroy(subscription){subscription.unsubscribe();}}]);return ObservableStrategy;}();var PromiseStrategy=function(){function PromiseStrategy(){_classCallCheck(this,PromiseStrategy);}_createClass(PromiseStrategy,[{key:'createSubscription',/**
     * @param {?} async
     * @param {?} updateLatestValue
     * @return {?}
     */value:function createSubscription(async,updateLatestValue){return async.then(updateLatestValue,function(e){throw e;});}/**
     * @param {?} subscription
     * @return {?}
     */},{key:'dispose',value:function dispose(subscription){}/**
     * @param {?} subscription
     * @return {?}
     */},{key:'onDestroy',value:function onDestroy(subscription){}}]);return PromiseStrategy;}();var/** @type {?} */_promiseStrategy=new PromiseStrategy();var/** @type {?} */_observableStrategy=new ObservableStrategy();/**
 * \@ngModule CommonModule
 * \@whatItDoes Unwraps a value from an asynchronous primitive.
 * \@howToUse `observable_or_promise_expression | async`
 * \@description
 * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has
 * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for
 * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid
 * potential memory leaks.
 *
 *
 * ## Examples
 *
 * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the
 * promise.
 *
 * {\@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}
 *
 * It's also possible to use `async` with Observables. The example below binds the `time` Observable
 * to the view. The Observable continuously updates the view with the current time.
 *
 * {\@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}
 *
 * \@stable
 */var AsyncPipe=function(){/**
     * @param {?} _ref
     */function AsyncPipe(_ref){_classCallCheck(this,AsyncPipe);this._ref=_ref;this._latestValue=null;this._latestReturnedValue=null;this._subscription=null;this._obj=null;this._strategy=null;}/**
     * @return {?}
     */_createClass(AsyncPipe,[{key:'ngOnDestroy',value:function ngOnDestroy(){if(this._subscription){this._dispose();}}/**
     * @param {?} obj
     * @return {?}
     */},{key:'transform',value:function transform(obj){if(!this._obj){if(obj){this._subscribe(obj);}this._latestReturnedValue=this._latestValue;return this._latestValue;}if(obj!==this._obj){this._dispose();return this.transform(/** @type {?} */obj);}if(this._latestValue===this._latestReturnedValue){return this._latestReturnedValue;}this._latestReturnedValue=this._latestValue;return __WEBPACK_IMPORTED_MODULE_0__angular_core__["_8" /* WrappedValue */].wrap(this._latestValue);}/**
     * @param {?} obj
     * @return {?}
     */},{key:'_subscribe',value:function _subscribe(obj){var _this12=this;this._obj=obj;this._strategy=this._selectStrategy(obj);this._subscription=this._strategy.createSubscription(obj,function(value){return _this12._updateLatestValue(obj,value);});}/**
     * @param {?} obj
     * @return {?}
     */},{key:'_selectStrategy',value:function _selectStrategy(obj){if(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["m" /* ɵisPromise */])(obj)){return _promiseStrategy;}if(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["l" /* ɵisObservable */])(obj)){return _observableStrategy;}throw invalidPipeArgumentError(AsyncPipe,obj);}/**
     * @return {?}
     */},{key:'_dispose',value:function _dispose(){this._strategy.dispose(this._subscription);this._latestValue=null;this._latestReturnedValue=null;this._subscription=null;this._obj=null;}/**
     * @param {?} async
     * @param {?} value
     * @return {?}
     */},{key:'_updateLatestValue',value:function _updateLatestValue(async,value){if(async===this._obj){this._latestValue=value;this._ref.markForCheck();}}}]);return AsyncPipe;}();AsyncPipe.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_9" /* Pipe */],args:[{name:'async',pure:false}]}];/** @nocollapse */AsyncPipe.ctorParameters=function(){return[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["x" /* ChangeDetectorRef */]}];};/**
 * Transforms text to lowercase.
 *
 * {\@example  common/pipes/ts/lowerupper_pipe.ts region='LowerUpperPipe' }
 *
 * \@stable
 */var LowerCasePipe=function(){function LowerCasePipe(){_classCallCheck(this,LowerCasePipe);}_createClass(LowerCasePipe,[{key:'transform',/**
     * @param {?} value
     * @return {?}
     */value:function transform(value){if(!value)return value;if(typeof value!=='string'){throw invalidPipeArgumentError(LowerCasePipe,value);}return value.toLowerCase();}}]);return LowerCasePipe;}();LowerCasePipe.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_9" /* Pipe */],args:[{name:'lowercase'}]}];/** @nocollapse */LowerCasePipe.ctorParameters=function(){return[];};/**
 * Helper method to transform a single word to titlecase.
 *
 * \@stable
 * @param {?} word
 * @return {?}
 */function titleCaseWord(word){if(!word)return word;return word[0].toUpperCase()+word.substr(1).toLowerCase();}/**
 * Transforms text to titlecase.
 *
 * \@stable
 */var TitleCasePipe=function(){function TitleCasePipe(){_classCallCheck(this,TitleCasePipe);}_createClass(TitleCasePipe,[{key:'transform',/**
     * @param {?} value
     * @return {?}
     */value:function transform(value){if(!value)return value;if(typeof value!=='string'){throw invalidPipeArgumentError(TitleCasePipe,value);}return value.split(/\b/g).map(function(word){return titleCaseWord(word);}).join('');}}]);return TitleCasePipe;}();TitleCasePipe.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_9" /* Pipe */],args:[{name:'titlecase'}]}];/** @nocollapse */TitleCasePipe.ctorParameters=function(){return[];};/**
 * Transforms text to uppercase.
 *
 * \@stable
 */var UpperCasePipe=function(){function UpperCasePipe(){_classCallCheck(this,UpperCasePipe);}_createClass(UpperCasePipe,[{key:'transform',/**
     * @param {?} value
     * @return {?}
     */value:function transform(value){if(!value)return value;if(typeof value!=='string'){throw invalidPipeArgumentError(UpperCasePipe,value);}return value.toUpperCase();}}]);return UpperCasePipe;}();UpperCasePipe.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_9" /* Pipe */],args:[{name:'uppercase'}]}];/** @nocollapse */UpperCasePipe.ctorParameters=function(){return[];};var NumberFormatStyle={};NumberFormatStyle.Decimal=0;NumberFormatStyle.Percent=1;NumberFormatStyle.Currency=2;NumberFormatStyle[NumberFormatStyle.Decimal]="Decimal";NumberFormatStyle[NumberFormatStyle.Percent]="Percent";NumberFormatStyle[NumberFormatStyle.Currency]="Currency";var NumberFormatter=function(){function NumberFormatter(){_classCallCheck(this,NumberFormatter);}_createClass(NumberFormatter,null,[{key:'format',/**
     * @param {?} num
     * @param {?} locale
     * @param {?} style
     * @param {?=} __3
     * @return {?}
     */value:function format(num,locale,style){var _ref2=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{},minimumIntegerDigits=_ref2.minimumIntegerDigits,minimumFractionDigits=_ref2.minimumFractionDigits,maximumFractionDigits=_ref2.maximumFractionDigits,currency=_ref2.currency,_ref2$currencyAsSymbo=_ref2.currencyAsSymbol,currencyAsSymbol=_ref2$currencyAsSymbo===undefined?false:_ref2$currencyAsSymbo;var/** @type {?} */options={minimumIntegerDigits:minimumIntegerDigits,minimumFractionDigits:minimumFractionDigits,maximumFractionDigits:maximumFractionDigits,style:NumberFormatStyle[style].toLowerCase()};if(style==NumberFormatStyle.Currency){options.currency=currency;options.currencyDisplay=currencyAsSymbol?'symbol':'code';}return new Intl.NumberFormat(locale,options).format(num);}}]);return NumberFormatter;}();var/** @type {?} */DATE_FORMATS_SPLIT=/((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;var/** @type {?} */PATTERN_ALIASES={// Keys are quoted so they do not get renamed during closure compilation.
'yMMMdjms':datePartGetterFactory(combine([digitCondition('year',1),nameCondition('month',3),digitCondition('day',1),digitCondition('hour',1),digitCondition('minute',1),digitCondition('second',1)])),'yMdjm':datePartGetterFactory(combine([digitCondition('year',1),digitCondition('month',1),digitCondition('day',1),digitCondition('hour',1),digitCondition('minute',1)])),'yMMMMEEEEd':datePartGetterFactory(combine([digitCondition('year',1),nameCondition('month',4),nameCondition('weekday',4),digitCondition('day',1)])),'yMMMMd':datePartGetterFactory(combine([digitCondition('year',1),nameCondition('month',4),digitCondition('day',1)])),'yMMMd':datePartGetterFactory(combine([digitCondition('year',1),nameCondition('month',3),digitCondition('day',1)])),'yMd':datePartGetterFactory(combine([digitCondition('year',1),digitCondition('month',1),digitCondition('day',1)])),'jms':datePartGetterFactory(combine([digitCondition('hour',1),digitCondition('second',1),digitCondition('minute',1)])),'jm':datePartGetterFactory(combine([digitCondition('hour',1),digitCondition('minute',1)]))};var/** @type {?} */DATE_FORMATS={// Keys are quoted so they do not get renamed.
'yyyy':datePartGetterFactory(digitCondition('year',4)),'yy':datePartGetterFactory(digitCondition('year',2)),'y':datePartGetterFactory(digitCondition('year',1)),'MMMM':datePartGetterFactory(nameCondition('month',4)),'MMM':datePartGetterFactory(nameCondition('month',3)),'MM':datePartGetterFactory(digitCondition('month',2)),'M':datePartGetterFactory(digitCondition('month',1)),'LLLL':datePartGetterFactory(nameCondition('month',4)),'L':datePartGetterFactory(nameCondition('month',1)),'dd':datePartGetterFactory(digitCondition('day',2)),'d':datePartGetterFactory(digitCondition('day',1)),'HH':digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour',2),false)))),'H':hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour',1),false))),'hh':digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour',2),true)))),'h':hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour',1),true))),'jj':datePartGetterFactory(digitCondition('hour',2)),'j':datePartGetterFactory(digitCondition('hour',1)),'mm':digitModifier(datePartGetterFactory(digitCondition('minute',2))),'m':datePartGetterFactory(digitCondition('minute',1)),'ss':digitModifier(datePartGetterFactory(digitCondition('second',2))),'s':datePartGetterFactory(digitCondition('second',1)),// while ISO 8601 requires fractions to be prefixed with `.` or `,`
// we can be just safely rely on using `sss` since we currently don't support single or two digit
// fractions
'sss':datePartGetterFactory(digitCondition('second',3)),'EEEE':datePartGetterFactory(nameCondition('weekday',4)),'EEE':datePartGetterFactory(nameCondition('weekday',3)),'EE':datePartGetterFactory(nameCondition('weekday',2)),'E':datePartGetterFactory(nameCondition('weekday',1)),'a':hourClockExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour',1),true))),'Z':timeZoneGetter('short'),'z':timeZoneGetter('long'),'ww':datePartGetterFactory({}),// first Thursday of the year. not support ?
'w':datePartGetterFactory({}),// of the year not support ?
'G':datePartGetterFactory(nameCondition('era',1)),'GG':datePartGetterFactory(nameCondition('era',2)),'GGG':datePartGetterFactory(nameCondition('era',3)),'GGGG':datePartGetterFactory(nameCondition('era',4))};/**
 * @param {?} inner
 * @return {?}
 */function digitModifier(inner){return function(date,locale){var/** @type {?} */result=inner(date,locale);return result.length==1?'0'+result:result;};}/**
 * @param {?} inner
 * @return {?}
 */function hourClockExtractor(inner){return function(date,locale){return inner(date,locale).split(' ')[1];};}/**
 * @param {?} inner
 * @return {?}
 */function hourExtractor(inner){return function(date,locale){return inner(date,locale).split(' ')[0];};}/**
 * @param {?} date
 * @param {?} locale
 * @param {?} options
 * @return {?}
 */function intlDateFormat(date,locale,options){return new Intl.DateTimeFormat(locale,options).format(date).replace(/[\u200e\u200f]/g,'');}/**
 * @param {?} timezone
 * @return {?}
 */function timeZoneGetter(timezone){// To workaround `Intl` API restriction for single timezone let format with 24 hours
var/** @type {?} */options={hour:'2-digit',hour12:false,timeZoneName:timezone};return function(date,locale){var/** @type {?} */result=intlDateFormat(date,locale,options);// Then extract first 3 letters that related to hours
return result?result.substring(3):'';};}/**
 * @param {?} options
 * @param {?} value
 * @return {?}
 */function hour12Modify(options,value){options.hour12=value;return options;}/**
 * @param {?} prop
 * @param {?} len
 * @return {?}
 */function digitCondition(prop,len){var/** @type {?} */result={};result[prop]=len===2?'2-digit':'numeric';return result;}/**
 * @param {?} prop
 * @param {?} len
 * @return {?}
 */function nameCondition(prop,len){var/** @type {?} */result={};if(len<4){result[prop]=len>1?'short':'narrow';}else{result[prop]='long';}return result;}/**
 * @param {?} options
 * @return {?}
 */function combine(options){return Object.assign.apply(Object,[{}].concat(_toConsumableArray(options)));}/**
 * @param {?} ret
 * @return {?}
 */function datePartGetterFactory(ret){return function(date,locale){return intlDateFormat(date,locale,ret);};}var/** @type {?} */DATE_FORMATTER_CACHE=new Map();/**
 * @param {?} format
 * @param {?} date
 * @param {?} locale
 * @return {?}
 */function dateFormatter(format,date,locale){var/** @type {?} */fn=PATTERN_ALIASES[format];if(fn)return fn(date,locale);var/** @type {?} */cacheKey=format;var/** @type {?} */parts=DATE_FORMATTER_CACHE.get(cacheKey);if(!parts){parts=[];var/** @type {?} */match=void 0;DATE_FORMATS_SPLIT.exec(format);while(format){match=DATE_FORMATS_SPLIT.exec(format);if(match){parts=parts.concat(match.slice(1));format=parts.pop();}else{parts.push(format);format=null;}}DATE_FORMATTER_CACHE.set(cacheKey,parts);}return parts.reduce(function(text,part){var/** @type {?} */fn=DATE_FORMATS[part];return text+(fn?fn(date,locale):partToTime(part));},'');}/**
 * @param {?} part
 * @return {?}
 */function partToTime(part){return part==='\'\''?'\'':part.replace(/(^'|'$)/g,'').replace(/''/g,'\'');}var DateFormatter=function(){function DateFormatter(){_classCallCheck(this,DateFormatter);}_createClass(DateFormatter,null,[{key:'format',/**
     * @param {?} date
     * @param {?} locale
     * @param {?} pattern
     * @return {?}
     */value:function format(date,locale,pattern){return dateFormatter(pattern,date,locale);}}]);return DateFormatter;}();var/** @type {?} */ISO8601_DATE_REGEX=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;/**
 * \@ngModule CommonModule
 * \@whatItDoes Formats a date according to locale rules.
 * \@howToUse `date_expression | date[:format]`
 * \@description
 *
 * Where:
 * - `expression` is a date object or a number (milliseconds since UTC epoch) or an ISO string
 * (https://www.w3.org/TR/NOTE-datetime).
 * - `format` indicates which date/time components to include. The format can be predefined as
 *   shown below or custom as shown in the table.
 *   - `'medium'`: equivalent to `'yMMMdjms'` (e.g. `Sep 3, 2010, 12:05:08 PM` for `en-US`)
 *   - `'short'`: equivalent to `'yMdjm'` (e.g. `9/3/2010, 12:05 PM` for `en-US`)
 *   - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. `Friday, September 3, 2010` for `en-US`)
 *   - `'longDate'`: equivalent to `'yMMMMd'` (e.g. `September 3, 2010` for `en-US`)
 *   - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. `Sep 3, 2010` for `en-US`)
 *   - `'shortDate'`: equivalent to `'yMd'` (e.g. `9/3/2010` for `en-US`)
 *   - `'mediumTime'`: equivalent to `'jms'` (e.g. `12:05:08 PM` for `en-US`)
 *   - `'shortTime'`: equivalent to `'jm'` (e.g. `12:05 PM` for `en-US`)
 *
 *
 *  | Component | Symbol | Narrow | Short Form   | Long Form         | Numeric   | 2-digit   |
 *  |-----------|:------:|--------|--------------|-------------------|-----------|-----------|
 *  | era       |   G    | G (A)  | GGG (AD)     | GGGG (Anno Domini)| -         | -         |
 *  | year      |   y    | -      | -            | -                 | y (2015)  | yy (15)   |
 *  | month     |   M    | L (S)  | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |
 *  | day       |   d    | -      | -            | -                 | d (3)     | dd (03)   |
 *  | weekday   |   E    | E (S)  | EEE (Sun)    | EEEE (Sunday)     | -         | -         |
 *  | hour      |   j    | -      | -            | -                 | j (13)    | jj (13)   |
 *  | hour12    |   h    | -      | -            | -                 | h (1 PM)  | hh (01 PM)|
 *  | hour24    |   H    | -      | -            | -                 | H (13)    | HH (13)   |
 *  | minute    |   m    | -      | -            | -                 | m (5)     | mm (05)   |
 *  | second    |   s    | -      | -            | -                 | s (9)     | ss (09)   |
 *  | timezone  |   z    | -      | -            | z (Pacific Standard Time)| -  | -         |
 *  | timezone  |   Z    | -      | Z (GMT-8:00) | -                 | -         | -         |
 *  | timezone  |   a    | -      | a (PM)       | -                 | -         | -         |
 *
 * In javascript, only the components specified will be respected (not the ordering,
 * punctuations, ...) and details of the formatting will be dependent on the locale.
 *
 * Timezone of the formatted text will be the local system timezone of the end-user's machine.
 *
 * When the expression is a ISO string without time (e.g. 2016-09-19) the time zone offset is not
 * applied and the formatted text will have the same day, month and year of the expression.
 *
 * WARNINGS:
 * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.
 *   Instead users should treat the date as an immutable object and change the reference when the
 *   pipe needs to re-run (this is to avoid reformatting the date on every change detection run
 *   which would be an expensive operation).
 * - this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera
 *   browsers.
 *
 * ### Examples
 *
 * Assuming `dateObj` is (year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11)
 * in the _local_ time and locale is 'en-US':
 *
 * ```
 *     {{ dateObj | date }}               // output is 'Jun 15, 2015'
 *     {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'
 *     {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'
 *     {{ dateObj | date:'mmss' }}        // output is '43:11'
 * ```
 *
 * {\@example common/pipes/ts/date_pipe.ts region='DatePipe'}
 *
 * \@stable
 */var DatePipe=function(){/**
     * @param {?} _locale
     */function DatePipe(_locale){_classCallCheck(this,DatePipe);this._locale=_locale;}/**
     * @param {?} value
     * @param {?=} pattern
     * @return {?}
     */_createClass(DatePipe,[{key:'transform',value:function transform(value){var pattern=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'mediumDate';var/** @type {?} */date=void 0;if(isBlank$1(value)||value!==value)return null;if(typeof value==='string'){value=value.trim();}if(isDate(value)){date=value;}else if(NumberWrapper.isNumeric(value)){date=new Date(parseFloat(value));}else if(typeof value==='string'&&/^(\d{4}-\d{1,2}-\d{1,2})$/.test(value)){/**
            * For ISO Strings without time the day, month and year must be extracted from the ISO String
            * before Date creation to avoid time offset and errors in the new Date.
            * If we only replace '-' with ',' in the ISO String ("2015,01,01"), and try to create a new
            * date, some browsers (e.g. IE 9) will throw an invalid Date error
            * If we leave the '-' ("2015-01-01") and try to create a new Date("2015-01-01") the timeoffset
            * is applied
            * Note: ISO months are 0 for January, 1 for February, ...
            */var _value$split$map=value.split('-').map(function(val){return parseInt(val,10);}),_value$split$map2=_slicedToArray(_value$split$map,3),y=_value$split$map2[0],m=_value$split$map2[1],d=_value$split$map2[2];date=new Date(y,m-1,d);}else{date=new Date(value);}if(!isDate(date)){var/** @type {?} */match=void 0;if(typeof value==='string'&&(match=value.match(ISO8601_DATE_REGEX))){date=isoStringToDate(match);}else{throw invalidPipeArgumentError(DatePipe,value);}}return DateFormatter.format(date,this._locale,DatePipe._ALIASES[pattern]||pattern);}}]);return DatePipe;}();/** @internal */DatePipe._ALIASES={'medium':'yMMMdjms','short':'yMdjm','fullDate':'yMMMMEEEEd','longDate':'yMMMMd','mediumDate':'yMMMd','shortDate':'yMd','mediumTime':'jms','shortTime':'jm'};DatePipe.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_9" /* Pipe */],args:[{name:'date',pure:true}]}];/** @nocollapse */DatePipe.ctorParameters=function(){return[{type:undefined,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["I" /* Inject */],args:[__WEBPACK_IMPORTED_MODULE_0__angular_core__["_3" /* LOCALE_ID */]]}]}];};/**
 * @param {?} obj
 * @return {?}
 */function isBlank$1(obj){return obj==null||obj==='';}/**
 * @param {?} obj
 * @return {?}
 */function isDate(obj){return obj instanceof Date&&!isNaN(obj.valueOf());}/**
 * @param {?} match
 * @return {?}
 */function isoStringToDate(match){var/** @type {?} */date=new Date(0);var/** @type {?} */tzHour=0;var/** @type {?} */tzMin=0;var/** @type {?} */dateSetter=match[8]?date.setUTCFullYear:date.setFullYear;var/** @type {?} */timeSetter=match[8]?date.setUTCHours:date.setHours;if(match[9]){tzHour=toInt(match[9]+match[10]);tzMin=toInt(match[9]+match[11]);}dateSetter.call(date,toInt(match[1]),toInt(match[2])-1,toInt(match[3]));var/** @type {?} */h=toInt(match[4]||'0')-tzHour;var/** @type {?} */m=toInt(match[5]||'0')-tzMin;var/** @type {?} */s=toInt(match[6]||'0');var/** @type {?} */ms=Math.round(parseFloat('0.'+(match[7]||0))*1000);timeSetter.call(date,h,m,s,ms);return date;}/**
 * @param {?} str
 * @return {?}
 */function toInt(str){return parseInt(str,10);}var/** @type {?} */_INTERPOLATION_REGEXP=/#/g;/**
 * \@ngModule CommonModule
 * \@whatItDoes Maps a value to a string that pluralizes the value according to locale rules.
 * \@howToUse `expression | i18nPlural:mapping`
 * \@description
 *
 *  Where:
 *  - `expression` is a number.
 *  - `mapping` is an object that mimics the ICU format, see
 *    http://userguide.icu-project.org/formatparse/messages
 *
 *  ## Example
 *
 * {\@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}
 *
 * \@experimental
 */var I18nPluralPipe=function(){/**
     * @param {?} _localization
     */function I18nPluralPipe(_localization){_classCallCheck(this,I18nPluralPipe);this._localization=_localization;}/**
     * @param {?} value
     * @param {?} pluralMap
     * @return {?}
     */_createClass(I18nPluralPipe,[{key:'transform',value:function transform(value,pluralMap){if(value==null)return'';if((typeof pluralMap==='undefined'?'undefined':_typeof(pluralMap))!=='object'||pluralMap===null){throw invalidPipeArgumentError(I18nPluralPipe,pluralMap);}var/** @type {?} */key=getPluralCategory(value,Object.keys(pluralMap),this._localization);return pluralMap[key].replace(_INTERPOLATION_REGEXP,value.toString());}}]);return I18nPluralPipe;}();I18nPluralPipe.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_9" /* Pipe */],args:[{name:'i18nPlural',pure:true}]}];/** @nocollapse */I18nPluralPipe.ctorParameters=function(){return[{type:NgLocalization}];};/**
 * \@ngModule CommonModule
 * \@whatItDoes Generic selector that displays the string that matches the current value.
 * \@howToUse `expression | i18nSelect:mapping`
 * \@description
 *
 *  Where `mapping` is an object that indicates the text that should be displayed
 *  for different values of the provided `expression`.
 *  If none of the keys of the mapping match the value of the `expression`, then the content
 *  of the `other` key is returned when present, otherwise an empty string is returned.
 *
 *  ## Example
 *
 * {\@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}
 *
 *  \@experimental
 */var I18nSelectPipe=function(){function I18nSelectPipe(){_classCallCheck(this,I18nSelectPipe);}_createClass(I18nSelectPipe,[{key:'transform',/**
     * @param {?} value
     * @param {?} mapping
     * @return {?}
     */value:function transform(value,mapping){if(value==null)return'';if((typeof mapping==='undefined'?'undefined':_typeof(mapping))!=='object'||typeof value!=='string'){throw invalidPipeArgumentError(I18nSelectPipe,mapping);}if(mapping.hasOwnProperty(value)){return mapping[value];}if(mapping.hasOwnProperty('other')){return mapping['other'];}return'';}}]);return I18nSelectPipe;}();I18nSelectPipe.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_9" /* Pipe */],args:[{name:'i18nSelect',pure:true}]}];/** @nocollapse */I18nSelectPipe.ctorParameters=function(){return[];};/**
 * \@ngModule CommonModule
 * \@whatItDoes Converts value into JSON string.
 * \@howToUse `expression | json`
 * \@description
 *
 * Converts value into string using `JSON.stringify`. Useful for debugging.
 *
 * ### Example
 * {\@example common/pipes/ts/json_pipe.ts region='JsonPipe'}
 *
 * \@stable
 */var JsonPipe=function(){function JsonPipe(){_classCallCheck(this,JsonPipe);}_createClass(JsonPipe,[{key:'transform',/**
     * @param {?} value
     * @return {?}
     */value:function transform(value){return JSON.stringify(value,null,2);}}]);return JsonPipe;}();JsonPipe.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_9" /* Pipe */],args:[{name:'json',pure:false}]}];/** @nocollapse */JsonPipe.ctorParameters=function(){return[];};var/** @type {?} */_NUMBER_FORMAT_REGEXP=/^(\d+)?\.((\d+)(-(\d+))?)?$/;/**
 * @param {?} pipe
 * @param {?} locale
 * @param {?} value
 * @param {?} style
 * @param {?} digits
 * @param {?=} currency
 * @param {?=} currencyAsSymbol
 * @return {?}
 */function formatNumber(pipe,locale,value,style,digits){var currency=arguments.length>5&&arguments[5]!==undefined?arguments[5]:null;var currencyAsSymbol=arguments.length>6&&arguments[6]!==undefined?arguments[6]:false;if(value==null)return null;// Convert strings to numbers
value=typeof value==='string'&&NumberWrapper.isNumeric(value)?+value:value;if(typeof value!=='number'){throw invalidPipeArgumentError(pipe,value);}var/** @type {?} */minInt=void 0;var/** @type {?} */minFraction=void 0;var/** @type {?} */maxFraction=void 0;if(style!==NumberFormatStyle.Currency){// rely on Intl default for currency
minInt=1;minFraction=0;maxFraction=3;}if(digits){var/** @type {?} */parts=digits.match(_NUMBER_FORMAT_REGEXP);if(parts===null){throw new Error(digits+' is not a valid digit info for number pipes');}if(parts[1]!=null){minInt=NumberWrapper.parseIntAutoRadix(parts[1]);}if(parts[3]!=null){minFraction=NumberWrapper.parseIntAutoRadix(parts[3]);}if(parts[5]!=null){maxFraction=NumberWrapper.parseIntAutoRadix(parts[5]);}}return NumberFormatter.format(/** @type {?} */value,locale,style,{minimumIntegerDigits:minInt,minimumFractionDigits:minFraction,maximumFractionDigits:maxFraction,currency:currency,currencyAsSymbol:currencyAsSymbol});}/**
 * \@ngModule CommonModule
 * \@whatItDoes Formats a number according to locale rules.
 * \@howToUse `number_expression | number[:digitInfo]`
 *
 * Formats a number as text. Group sizing and separator and other locale-specific
 * configurations are based on the active locale.
 *
 * where `expression` is a number:
 *  - `digitInfo` is a `string` which has a following format: <br>
 *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>
 *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.
 *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.
 *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.
 *
 * For more information on the acceptable range for each of these numbers and other
 * details see your native internationalization library.
 *
 * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
 * and may require a polyfill. See {\@linkDocs guide/browser-support} for details.
 *
 * ### Example
 *
 * {\@example common/pipes/ts/number_pipe.ts region='NumberPipe'}
 *
 * \@stable
 */var DecimalPipe=function(){/**
     * @param {?} _locale
     */function DecimalPipe(_locale){_classCallCheck(this,DecimalPipe);this._locale=_locale;}/**
     * @param {?} value
     * @param {?=} digits
     * @return {?}
     */_createClass(DecimalPipe,[{key:'transform',value:function transform(value){var digits=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return formatNumber(DecimalPipe,this._locale,value,NumberFormatStyle.Decimal,digits);}}]);return DecimalPipe;}();DecimalPipe.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_9" /* Pipe */],args:[{name:'number'}]}];/** @nocollapse */DecimalPipe.ctorParameters=function(){return[{type:undefined,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["I" /* Inject */],args:[__WEBPACK_IMPORTED_MODULE_0__angular_core__["_3" /* LOCALE_ID */]]}]}];};/**
 * \@ngModule CommonModule
 * \@whatItDoes Formats a number as a percentage according to locale rules.
 * \@howToUse `number_expression | percent[:digitInfo]`
 *
 * \@description
 *
 * Formats a number as percentage.
 *
 * - `digitInfo` See {\@link DecimalPipe} for detailed description.
 *
 * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
 * and may require a polyfill. See {\@linkDocs guide/browser-support} for details.
 *
 * ### Example
 *
 * {\@example common/pipes/ts/number_pipe.ts region='PercentPipe'}
 *
 * \@stable
 */var PercentPipe=function(){/**
     * @param {?} _locale
     */function PercentPipe(_locale){_classCallCheck(this,PercentPipe);this._locale=_locale;}/**
     * @param {?} value
     * @param {?=} digits
     * @return {?}
     */_createClass(PercentPipe,[{key:'transform',value:function transform(value){var digits=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return formatNumber(PercentPipe,this._locale,value,NumberFormatStyle.Percent,digits);}}]);return PercentPipe;}();PercentPipe.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_9" /* Pipe */],args:[{name:'percent'}]}];/** @nocollapse */PercentPipe.ctorParameters=function(){return[{type:undefined,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["I" /* Inject */],args:[__WEBPACK_IMPORTED_MODULE_0__angular_core__["_3" /* LOCALE_ID */]]}]}];};/**
 * \@ngModule CommonModule
 * \@whatItDoes Formats a number as currency using locale rules.
 * \@howToUse `number_expression | currency[:currencyCode[:symbolDisplay[:digitInfo]]]`
 * \@description
 *
 * Use `currency` to format a number as currency.
 *
 * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such
 *    as `USD` for the US dollar and `EUR` for the euro.
 * - `symbolDisplay` is a boolean indicating whether to use the currency symbol or code.
 *   - `true`: use symbol (e.g. `$`).
 *   - `false`(default): use code (e.g. `USD`).
 * - `digitInfo` See {\@link DecimalPipe} for detailed description.
 *
 * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
 * and may require a polyfill. See {\@linkDocs guide/browser-support} for details.
 *
 * ### Example
 *
 * {\@example common/pipes/ts/number_pipe.ts region='CurrencyPipe'}
 *
 * \@stable
 */var CurrencyPipe=function(){/**
     * @param {?} _locale
     */function CurrencyPipe(_locale){_classCallCheck(this,CurrencyPipe);this._locale=_locale;}/**
     * @param {?} value
     * @param {?=} currencyCode
     * @param {?=} symbolDisplay
     * @param {?=} digits
     * @return {?}
     */_createClass(CurrencyPipe,[{key:'transform',value:function transform(value){var currencyCode=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'USD';var symbolDisplay=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var digits=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;return formatNumber(CurrencyPipe,this._locale,value,NumberFormatStyle.Currency,digits,currencyCode,symbolDisplay);}}]);return CurrencyPipe;}();CurrencyPipe.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_9" /* Pipe */],args:[{name:'currency'}]}];/** @nocollapse */CurrencyPipe.ctorParameters=function(){return[{type:undefined,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["I" /* Inject */],args:[__WEBPACK_IMPORTED_MODULE_0__angular_core__["_3" /* LOCALE_ID */]]}]}];};/**
 * \@ngModule CommonModule
 * \@whatItDoes Creates a new List or String containing a subset (slice) of the elements.
 * \@howToUse `array_or_string_expression | slice:start[:end]`
 * \@description
 *
 * Where the input expression is a `List` or `String`, and:
 * - `start`: The starting index of the subset to return.
 *   - **a positive integer**: return the item at `start` index and all items after
 *     in the list or string expression.
 *   - **a negative integer**: return the item at `start` index from the end and all items after
 *     in the list or string expression.
 *   - **if positive and greater than the size of the expression**: return an empty list or string.
 *   - **if negative and greater than the size of the expression**: return entire list or string.
 * - `end`: The ending index of the subset to return.
 *   - **omitted**: return all items until the end.
 *   - **if positive**: return all items before `end` index of the list or string.
 *   - **if negative**: return all items before `end` index from the end of the list or string.
 *
 * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`
 * and `String.prototype.slice()`.
 *
 * When operating on a [List], the returned list is always a copy even when all
 * the elements are being returned.
 *
 * When operating on a blank value, the pipe returns the blank value.
 *
 * ## List Example
 *
 * This `ngFor` example:
 *
 * {\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}
 *
 * produces the following:
 *
 *     <li>b</li>
 *     <li>c</li>
 *
 * ## String Examples
 *
 * {\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}
 *
 * \@stable
 */var SlicePipe=function(){function SlicePipe(){_classCallCheck(this,SlicePipe);}_createClass(SlicePipe,[{key:'transform',/**
     * @param {?} value
     * @param {?} start
     * @param {?=} end
     * @return {?}
     */value:function transform(value,start,end){if(value==null)return value;if(!this.supports(value)){throw invalidPipeArgumentError(SlicePipe,value);}return value.slice(start,end);}/**
     * @param {?} obj
     * @return {?}
     */},{key:'supports',value:function supports(obj){return typeof obj==='string'||Array.isArray(obj);}}]);return SlicePipe;}();SlicePipe.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_9" /* Pipe */],args:[{name:'slice',pure:false}]}];/** @nocollapse */SlicePipe.ctorParameters=function(){return[];};/**
 * A collection of Angular pipes that are likely to be used in each and every application.
 */var/** @type {?} */COMMON_PIPES=[AsyncPipe,UpperCasePipe,LowerCasePipe,JsonPipe,SlicePipe,DecimalPipe,PercentPipe,TitleCasePipe,CurrencyPipe,DatePipe,I18nPluralPipe,I18nSelectPipe];/**
 * The module that includes all the basic Angular directives like {\@link NgIf}, {\@link NgForOf}, ...
 *
 * \@stable
 */var CommonModule=function CommonModule(){_classCallCheck(this,CommonModule);};CommonModule.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["i" /* NgModule */],args:[{declarations:[COMMON_DIRECTIVES,COMMON_PIPES],exports:[COMMON_DIRECTIVES,COMMON_PIPES],providers:[{provide:NgLocalization,useClass:NgLocaleLocalization}]}]}];/** @nocollapse */CommonModule.ctorParameters=function(){return[];};/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 *//**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */var/** @type {?} */PLATFORM_BROWSER_ID='browser';var/** @type {?} */PLATFORM_SERVER_ID='server';var/** @type {?} */PLATFORM_WORKER_APP_ID='browserWorkerApp';var/** @type {?} */PLATFORM_WORKER_UI_ID='browserWorkerUi';/**
 * Returns whether a platform id represents a browser platform.
 * \@experimental
 * @param {?} platformId
 * @return {?}
 */function isPlatformBrowser(platformId){return platformId===PLATFORM_BROWSER_ID;}/**
 * Returns whether a platform id represents a server platform.
 * \@experimental
 * @param {?} platformId
 * @return {?}
 */function isPlatformServer(platformId){return platformId===PLATFORM_SERVER_ID;}/**
 * Returns whether a platform id represents a web worker app platform.
 * \@experimental
 * @param {?} platformId
 * @return {?}
 */function isPlatformWorkerApp(platformId){return platformId===PLATFORM_WORKER_APP_ID;}/**
 * Returns whether a platform id represents a web worker UI platform.
 * \@experimental
 * @param {?} platformId
 * @return {?}
 */function isPlatformWorkerUi(platformId){return platformId===PLATFORM_WORKER_UI_ID;}/**
 * @stable
 */var/** @type {?} */VERSION=new __WEBPACK_IMPORTED_MODULE_0__angular_core__["f" /* Version */]('4.0.0-rc.1');

/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(16)))

/***/ }),
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */,
/* 49 */,
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(5);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var OuterSubscriber = (function (_super) {
    __extends(OuterSubscriber, _super);
    function OuterSubscriber() {
        _super.apply(this, arguments);
    }
    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    };
    OuterSubscriber.prototype.notifyError = function (error, innerSub) {
        this.destination.error(error);
    };
    OuterSubscriber.prototype.notifyComplete = function (innerSub) {
        this.destination.complete();
    };
    return OuterSubscriber;
}(Subscriber_1.Subscriber));
exports.OuterSubscriber = OuterSubscriber;
//# sourceMappingURL=OuterSubscriber.js.map

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(3);
var ScalarObservable_1 = __webpack_require__(72);
var EmptyObservable_1 = __webpack_require__(70);
var isScheduler_1 = __webpack_require__(82);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var ArrayObservable = (function (_super) {
    __extends(ArrayObservable, _super);
    function ArrayObservable(array, scheduler) {
        _super.call(this);
        this.array = array;
        this.scheduler = scheduler;
        if (!scheduler && array.length === 1) {
            this._isScalar = true;
            this.value = array[0];
        }
    }
    ArrayObservable.create = function (array, scheduler) {
        return new ArrayObservable(array, scheduler);
    };
    /**
     * Creates an Observable that emits some values you specify as arguments,
     * immediately one after the other, and then emits a complete notification.
     *
     * <span class="informal">Emits the arguments you provide, then completes.
     * </span>
     *
     * <img src="./img/of.png" width="100%">
     *
     * This static operator is useful for creating a simple Observable that only
     * emits the arguments given, and the complete notification thereafter. It can
     * be used for composing with other Observables, such as with {@link concat}.
     * By default, it uses a `null` IScheduler, which means the `next`
     * notifications are sent synchronously, although with a different IScheduler
     * it is possible to determine when those notifications will be delivered.
     *
     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>
     * var numbers = Rx.Observable.of(10, 20, 30);
     * var letters = Rx.Observable.of('a', 'b', 'c');
     * var interval = Rx.Observable.interval(1000);
     * var result = numbers.concat(letters).concat(interval);
     * result.subscribe(x => console.log(x));
     *
     * @see {@link create}
     * @see {@link empty}
     * @see {@link never}
     * @see {@link throw}
     *
     * @param {...T} values Arguments that represent `next` values to be emitted.
     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
     * the emissions of the `next` notifications.
     * @return {Observable<T>} An Observable that emits each given input value.
     * @static true
     * @name of
     * @owner Observable
     */
    ArrayObservable.of = function () {
        var array = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            array[_i - 0] = arguments[_i];
        }
        var scheduler = array[array.length - 1];
        if (isScheduler_1.isScheduler(scheduler)) {
            array.pop();
        }
        else {
            scheduler = null;
        }
        var len = array.length;
        if (len > 1) {
            return new ArrayObservable(array, scheduler);
        }
        else if (len === 1) {
            return new ScalarObservable_1.ScalarObservable(array[0], scheduler);
        }
        else {
            return new EmptyObservable_1.EmptyObservable(scheduler);
        }
    };
    ArrayObservable.dispatch = function (state) {
        var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;
        if (index >= count) {
            subscriber.complete();
            return;
        }
        subscriber.next(array[index]);
        if (subscriber.closed) {
            return;
        }
        state.index = index + 1;
        this.schedule(state);
    };
    ArrayObservable.prototype._subscribe = function (subscriber) {
        var index = 0;
        var array = this.array;
        var count = array.length;
        var scheduler = this.scheduler;
        if (scheduler) {
            return scheduler.schedule(ArrayObservable.dispatch, 0, {
                array: array, index: index, count: count, subscriber: subscriber
            });
        }
        else {
            for (var i = 0; i < count && !subscriber.closed; i++) {
                subscriber.next(array[i]);
            }
            subscriber.complete();
        }
    };
    return ArrayObservable;
}(Observable_1.Observable));
exports.ArrayObservable = ArrayObservable;
//# sourceMappingURL=ArrayObservable.js.map

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(50);
var subscribeToResult_1 = __webpack_require__(56);
/**
 * Converts a higher-order Observable into a first-order Observable which
 * concurrently delivers all values that are emitted on the inner Observables.
 *
 * <span class="informal">Flattens an Observable-of-Observables.</span>
 *
 * <img src="./img/mergeAll.png" width="100%">
 *
 * `mergeAll` subscribes to an Observable that emits Observables, also known as
 * a higher-order Observable. Each time it observes one of these emitted inner
 * Observables, it subscribes to that and delivers all the values from the
 * inner Observable on the output Observable. The output Observable only
 * completes once all inner Observables have completed. Any error delivered by
 * a inner Observable will be immediately emitted on the output Observable.
 *
 * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
 * var firstOrder = higherOrder.mergeAll();
 * firstOrder.subscribe(x => console.log(x));
 *
 * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));
 * var firstOrder = higherOrder.mergeAll(2);
 * firstOrder.subscribe(x => console.log(x));
 *
 * @see {@link combineAll}
 * @see {@link concatAll}
 * @see {@link exhaust}
 * @see {@link merge}
 * @see {@link mergeMap}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 * @see {@link switch}
 * @see {@link zipAll}
 *
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits values coming from all the
 * inner Observables emitted by the source Observable.
 * @method mergeAll
 * @owner Observable
 */
function mergeAll(concurrent) {
    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
    return this.lift(new MergeAllOperator(concurrent));
}
exports.mergeAll = mergeAll;
var MergeAllOperator = (function () {
    function MergeAllOperator(concurrent) {
        this.concurrent = concurrent;
    }
    MergeAllOperator.prototype.call = function (observer, source) {
        return source.subscribe(new MergeAllSubscriber(observer, this.concurrent));
    };
    return MergeAllOperator;
}());
exports.MergeAllOperator = MergeAllOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MergeAllSubscriber = (function (_super) {
    __extends(MergeAllSubscriber, _super);
    function MergeAllSubscriber(destination, concurrent) {
        _super.call(this, destination);
        this.concurrent = concurrent;
        this.hasCompleted = false;
        this.buffer = [];
        this.active = 0;
    }
    MergeAllSubscriber.prototype._next = function (observable) {
        if (this.active < this.concurrent) {
            this.active++;
            this.add(subscribeToResult_1.subscribeToResult(this, observable));
        }
        else {
            this.buffer.push(observable);
        }
    };
    MergeAllSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            this.destination.complete();
        }
    };
    MergeAllSubscriber.prototype.notifyComplete = function (innerSub) {
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        }
        else if (this.active === 0 && this.hasCompleted) {
            this.destination.complete();
        }
    };
    return MergeAllSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
exports.MergeAllSubscriber = MergeAllSubscriber;
//# sourceMappingURL=mergeAll.js.map

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var root_1 = __webpack_require__(13);
function symbolIteratorPonyfill(root) {
    var Symbol = root.Symbol;
    if (typeof Symbol === 'function') {
        if (!Symbol.iterator) {
            Symbol.iterator = Symbol('iterator polyfill');
        }
        return Symbol.iterator;
    }
    else {
        // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)
        var Set_1 = root.Set;
        if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {
            return '@@iterator';
        }
        var Map_1 = root.Map;
        // required for compatability with es6-shim
        if (Map_1) {
            var keys = Object.getOwnPropertyNames(Map_1.prototype);
            for (var i = 0; i < keys.length; ++i) {
                var key = keys[i];
                // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.
                if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {
                    return key;
                }
            }
        }
        return '@@iterator';
    }
}
exports.symbolIteratorPonyfill = symbolIteratorPonyfill;
exports.$$iterator = symbolIteratorPonyfill(root_1.root);
//# sourceMappingURL=iterator.js.map

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var root_1 = __webpack_require__(13);
var Symbol = root_1.root.Symbol;
exports.$$rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?
    Symbol.for('rxSubscriber') : '@@rxSubscriber';
//# sourceMappingURL=rxSubscriber.js.map

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * An error thrown when an Observable or a sequence was queried but has no
 * elements.
 *
 * @see {@link first}
 * @see {@link last}
 * @see {@link single}
 *
 * @class EmptyError
 */
var EmptyError = (function (_super) {
    __extends(EmptyError, _super);
    function EmptyError() {
        var err = _super.call(this, 'no elements in sequence');
        this.name = err.name = 'EmptyError';
        this.stack = err.stack;
        this.message = err.message;
    }
    return EmptyError;
}(Error));
exports.EmptyError = EmptyError;
//# sourceMappingURL=EmptyError.js.map

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var root_1 = __webpack_require__(13);
var isArrayLike_1 = __webpack_require__(78);
var isPromise_1 = __webpack_require__(81);
var isObject_1 = __webpack_require__(80);
var Observable_1 = __webpack_require__(3);
var iterator_1 = __webpack_require__(53);
var InnerSubscriber_1 = __webpack_require__(185);
var observable_1 = __webpack_require__(32);
function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
    var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);
    if (destination.closed) {
        return null;
    }
    if (result instanceof Observable_1.Observable) {
        if (result._isScalar) {
            destination.next(result.value);
            destination.complete();
            return null;
        }
        else {
            return result.subscribe(destination);
        }
    }
    else if (isArrayLike_1.isArrayLike(result)) {
        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {
            destination.next(result[i]);
        }
        if (!destination.closed) {
            destination.complete();
        }
    }
    else if (isPromise_1.isPromise(result)) {
        result.then(function (value) {
            if (!destination.closed) {
                destination.next(value);
                destination.complete();
            }
        }, function (err) { return destination.error(err); })
            .then(null, function (err) {
            // Escaping the Promise trap: globally throw unhandled errors
            root_1.root.setTimeout(function () { throw err; });
        });
        return destination;
    }
    else if (result && typeof result[iterator_1.$$iterator] === 'function') {
        var iterator = result[iterator_1.$$iterator]();
        do {
            var item = iterator.next();
            if (item.done) {
                destination.complete();
                break;
            }
            destination.next(item.value);
            if (destination.closed) {
                break;
            }
        } while (true);
    }
    else if (result && typeof result[observable_1.$$observable] === 'function') {
        var obs = result[observable_1.$$observable]();
        if (typeof obs.subscribe !== 'function') {
            destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));
        }
        else {
            return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));
        }
    }
    else {
        var value = isObject_1.isObject(result) ? 'an invalid object' : "'" + result + "'";
        var msg = ("You provided " + value + " where a stream was expected.")
            + ' You can provide an Observable, Promise, Array, or Iterable.';
        destination.error(new TypeError(msg));
    }
    return null;
}
exports.subscribeToResult = subscribeToResult;
//# sourceMappingURL=subscribeToResult.js.map

/***/ }),
/* 57 */,
/* 58 */,
/* 59 */,
/* 60 */,
/* 61 */,
/* 62 */,
/* 63 */,
/* 64 */,
/* 65 */,
/* 66 */,
/* 67 */,
/* 68 */,
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.empty = {
    closed: true,
    next: function (value) { },
    error: function (err) { throw err; },
    complete: function () { }
};
//# sourceMappingURL=Observer.js.map

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(3);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var EmptyObservable = (function (_super) {
    __extends(EmptyObservable, _super);
    function EmptyObservable(scheduler) {
        _super.call(this);
        this.scheduler = scheduler;
    }
    /**
     * Creates an Observable that emits no items to the Observer and immediately
     * emits a complete notification.
     *
     * <span class="informal">Just emits 'complete', and nothing else.
     * </span>
     *
     * <img src="./img/empty.png" width="100%">
     *
     * This static operator is useful for creating a simple Observable that only
     * emits the complete notification. It can be used for composing with other
     * Observables, such as in a {@link mergeMap}.
     *
     * @example <caption>Emit the number 7, then complete.</caption>
     * var result = Rx.Observable.empty().startWith(7);
     * result.subscribe(x => console.log(x));
     *
     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>
     * var interval = Rx.Observable.interval(1000);
     * var result = interval.mergeMap(x =>
     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()
     * );
     * result.subscribe(x => console.log(x));
     *
     * // Results in the following to the console:
     * // x is equal to the count on the interval eg(0,1,2,3,...)
     * // x will occur every 1000ms
     * // if x % 2 is equal to 1 print abc
     * // if x % 2 is not equal to 1 nothing will be output
     *
     * @see {@link create}
     * @see {@link never}
     * @see {@link of}
     * @see {@link throw}
     *
     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
     * the emission of the complete notification.
     * @return {Observable} An "empty" Observable: emits only the complete
     * notification.
     * @static true
     * @name empty
     * @owner Observable
     */
    EmptyObservable.create = function (scheduler) {
        return new EmptyObservable(scheduler);
    };
    EmptyObservable.dispatch = function (arg) {
        var subscriber = arg.subscriber;
        subscriber.complete();
    };
    EmptyObservable.prototype._subscribe = function (subscriber) {
        var scheduler = this.scheduler;
        if (scheduler) {
            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });
        }
        else {
            subscriber.complete();
        }
    };
    return EmptyObservable;
}(Observable_1.Observable));
exports.EmptyObservable = EmptyObservable;
//# sourceMappingURL=EmptyObservable.js.map

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var root_1 = __webpack_require__(13);
var Observable_1 = __webpack_require__(3);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var PromiseObservable = (function (_super) {
    __extends(PromiseObservable, _super);
    function PromiseObservable(promise, scheduler) {
        _super.call(this);
        this.promise = promise;
        this.scheduler = scheduler;
    }
    /**
     * Converts a Promise to an Observable.
     *
     * <span class="informal">Returns an Observable that just emits the Promise's
     * resolved value, then completes.</span>
     *
     * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an
     * Observable. If the Promise resolves with a value, the output Observable
     * emits that resolved value as a `next`, and then completes. If the Promise
     * is rejected, then the output Observable emits the corresponding Error.
     *
     * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>
     * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));
     * result.subscribe(x => console.log(x), e => console.error(e));
     *
     * @see {@link bindCallback}
     * @see {@link from}
     *
     * @param {Promise<T>} promise The promise to be converted.
     * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling
     * the delivery of the resolved value (or the rejection).
     * @return {Observable<T>} An Observable which wraps the Promise.
     * @static true
     * @name fromPromise
     * @owner Observable
     */
    PromiseObservable.create = function (promise, scheduler) {
        return new PromiseObservable(promise, scheduler);
    };
    PromiseObservable.prototype._subscribe = function (subscriber) {
        var _this = this;
        var promise = this.promise;
        var scheduler = this.scheduler;
        if (scheduler == null) {
            if (this._isScalar) {
                if (!subscriber.closed) {
                    subscriber.next(this.value);
                    subscriber.complete();
                }
            }
            else {
                promise.then(function (value) {
                    _this.value = value;
                    _this._isScalar = true;
                    if (!subscriber.closed) {
                        subscriber.next(value);
                        subscriber.complete();
                    }
                }, function (err) {
                    if (!subscriber.closed) {
                        subscriber.error(err);
                    }
                })
                    .then(null, function (err) {
                    // escape the promise trap, throw unhandled errors
                    root_1.root.setTimeout(function () { throw err; });
                });
            }
        }
        else {
            if (this._isScalar) {
                if (!subscriber.closed) {
                    return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });
                }
            }
            else {
                promise.then(function (value) {
                    _this.value = value;
                    _this._isScalar = true;
                    if (!subscriber.closed) {
                        subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));
                    }
                }, function (err) {
                    if (!subscriber.closed) {
                        subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));
                    }
                })
                    .then(null, function (err) {
                    // escape the promise trap, throw unhandled errors
                    root_1.root.setTimeout(function () { throw err; });
                });
            }
        }
    };
    return PromiseObservable;
}(Observable_1.Observable));
exports.PromiseObservable = PromiseObservable;
function dispatchNext(arg) {
    var value = arg.value, subscriber = arg.subscriber;
    if (!subscriber.closed) {
        subscriber.next(value);
        subscriber.complete();
    }
}
function dispatchError(arg) {
    var err = arg.err, subscriber = arg.subscriber;
    if (!subscriber.closed) {
        subscriber.error(err);
    }
}
//# sourceMappingURL=PromiseObservable.js.map

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(3);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var ScalarObservable = (function (_super) {
    __extends(ScalarObservable, _super);
    function ScalarObservable(value, scheduler) {
        _super.call(this);
        this.value = value;
        this.scheduler = scheduler;
        this._isScalar = true;
        if (scheduler) {
            this._isScalar = false;
        }
    }
    ScalarObservable.create = function (value, scheduler) {
        return new ScalarObservable(value, scheduler);
    };
    ScalarObservable.dispatch = function (state) {
        var done = state.done, value = state.value, subscriber = state.subscriber;
        if (done) {
            subscriber.complete();
            return;
        }
        subscriber.next(value);
        if (subscriber.closed) {
            return;
        }
        state.done = true;
        this.schedule(state);
    };
    ScalarObservable.prototype._subscribe = function (subscriber) {
        var value = this.value;
        var scheduler = this.scheduler;
        if (scheduler) {
            return scheduler.schedule(ScalarObservable.dispatch, 0, {
                done: false, value: value, subscriber: subscriber
            });
        }
        else {
            subscriber.next(value);
            if (!subscriber.closed) {
                subscriber.complete();
            }
        }
    };
    return ScalarObservable;
}(Observable_1.Observable));
exports.ScalarObservable = ScalarObservable;
//# sourceMappingURL=ScalarObservable.js.map

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var PromiseObservable_1 = __webpack_require__(71);
exports.fromPromise = PromiseObservable_1.PromiseObservable.create;
//# sourceMappingURL=fromPromise.js.map

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var subscribeToResult_1 = __webpack_require__(56);
var OuterSubscriber_1 = __webpack_require__(50);
/* tslint:enable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link mergeAll}.</span>
 *
 * <img src="./img/mergeMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an Observable, and then merging those resulting Observables and
 * emitting the results of this merger.
 *
 * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>
 * var letters = Rx.Observable.of('a', 'b', 'c');
 * var result = letters.mergeMap(x =>
 *   Rx.Observable.interval(1000).map(i => x+i)
 * );
 * result.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // a0
 * // b0
 * // c0
 * // a1
 * // b1
 * // c1
 * // continues to list a,b,c with respective ascending integers
 *
 * @see {@link concatMap}
 * @see {@link exhaustMap}
 * @see {@link merge}
 * @see {@link mergeAll}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 * @see {@link switchMap}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits the result of applying the
 * projection function (and the optional `resultSelector`) to each item emitted
 * by the source Observable and merging the results of the Observables obtained
 * from this transformation.
 * @method mergeMap
 * @owner Observable
 */
function mergeMap(project, resultSelector, concurrent) {
    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
    if (typeof resultSelector === 'number') {
        concurrent = resultSelector;
        resultSelector = null;
    }
    return this.lift(new MergeMapOperator(project, resultSelector, concurrent));
}
exports.mergeMap = mergeMap;
var MergeMapOperator = (function () {
    function MergeMapOperator(project, resultSelector, concurrent) {
        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
        this.project = project;
        this.resultSelector = resultSelector;
        this.concurrent = concurrent;
    }
    MergeMapOperator.prototype.call = function (observer, source) {
        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));
    };
    return MergeMapOperator;
}());
exports.MergeMapOperator = MergeMapOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MergeMapSubscriber = (function (_super) {
    __extends(MergeMapSubscriber, _super);
    function MergeMapSubscriber(destination, project, resultSelector, concurrent) {
        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
        _super.call(this, destination);
        this.project = project;
        this.resultSelector = resultSelector;
        this.concurrent = concurrent;
        this.hasCompleted = false;
        this.buffer = [];
        this.active = 0;
        this.index = 0;
    }
    MergeMapSubscriber.prototype._next = function (value) {
        if (this.active < this.concurrent) {
            this._tryNext(value);
        }
        else {
            this.buffer.push(value);
        }
    };
    MergeMapSubscriber.prototype._tryNext = function (value) {
        var result;
        var index = this.index++;
        try {
            result = this.project(value, index);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.active++;
        this._innerSub(result, value, index);
    };
    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {
        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
    };
    MergeMapSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            this.destination.complete();
        }
    };
    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        if (this.resultSelector) {
            this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);
        }
        else {
            this.destination.next(innerValue);
        }
    };
    MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {
        var result;
        try {
            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        }
        else if (this.active === 0 && this.hasCompleted) {
            this.destination.complete();
        }
    };
    return MergeMapSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
exports.MergeMapSubscriber = MergeMapSubscriber;
//# sourceMappingURL=mergeMap.js.map

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * An error thrown when an action is invalid because the object has been
 * unsubscribed.
 *
 * @see {@link Subject}
 * @see {@link BehaviorSubject}
 *
 * @class ObjectUnsubscribedError
 */
var ObjectUnsubscribedError = (function (_super) {
    __extends(ObjectUnsubscribedError, _super);
    function ObjectUnsubscribedError() {
        var err = _super.call(this, 'object unsubscribed');
        this.name = err.name = 'ObjectUnsubscribedError';
        this.stack = err.stack;
        this.message = err.message;
    }
    return ObjectUnsubscribedError;
}(Error));
exports.ObjectUnsubscribedError = ObjectUnsubscribedError;
//# sourceMappingURL=ObjectUnsubscribedError.js.map

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// typeof any so that it we don't have to cast when comparing a result to the error object
exports.errorObject = { e: {} };
//# sourceMappingURL=errorObject.js.map

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });
//# sourceMappingURL=isArray.js.map

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.isArrayLike = (function (x) { return x && typeof x.length === 'number'; });
//# sourceMappingURL=isArrayLike.js.map

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function isFunction(x) {
    return typeof x === 'function';
}
exports.isFunction = isFunction;
//# sourceMappingURL=isFunction.js.map

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function isObject(x) {
    return x != null && typeof x === 'object';
}
exports.isObject = isObject;
//# sourceMappingURL=isObject.js.map

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function isPromise(value) {
    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
}
exports.isPromise = isPromise;
//# sourceMappingURL=isPromise.js.map

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function isScheduler(value) {
    return value && typeof value.schedule === 'function';
}
exports.isScheduler = isScheduler;
//# sourceMappingURL=isScheduler.js.map

/***/ }),
/* 83 */,
/* 84 */,
/* 85 */,
/* 86 */,
/* 87 */,
/* 88 */,
/* 89 */,
/* 90 */,
/* 91 */,
/* 92 */,
/* 93 */,
/* 94 */,
/* 95 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(1);
/* unused harmony export VERSION */
/* unused harmony export TEMPLATE_TRANSFORMS */
/* unused harmony export CompilerConfig */
/* unused harmony export RenderTypes */
/* unused harmony export JitCompiler */
/* unused harmony export DirectiveResolver */
/* unused harmony export PipeResolver */
/* unused harmony export NgModuleResolver */
/* unused harmony export DEFAULT_INTERPOLATION_CONFIG */
/* unused harmony export InterpolationConfig */
/* unused harmony export NgModuleCompiler */
/* unused harmony export DirectiveWrapperCompiler */
/* unused harmony export ViewCompiler */
/* unused harmony export AnimationParser */
/* unused harmony export isSyntaxError */
/* unused harmony export syntaxError */
/* unused harmony export TextAst */
/* unused harmony export BoundTextAst */
/* unused harmony export AttrAst */
/* unused harmony export BoundElementPropertyAst */
/* unused harmony export BoundEventAst */
/* unused harmony export ReferenceAst */
/* unused harmony export VariableAst */
/* unused harmony export ElementAst */
/* unused harmony export EmbeddedTemplateAst */
/* unused harmony export BoundDirectivePropertyAst */
/* unused harmony export DirectiveAst */
/* unused harmony export ProviderAst */
/* unused harmony export ProviderAstType */
/* unused harmony export NgContentAst */
/* unused harmony export PropertyBindingType */
/* unused harmony export templateVisitAll */
/* unused harmony export CompileAnimationEntryMetadata */
/* unused harmony export CompileAnimationStateMetadata */
/* unused harmony export CompileAnimationStateDeclarationMetadata */
/* unused harmony export CompileAnimationStateTransitionMetadata */
/* unused harmony export CompileAnimationMetadata */
/* unused harmony export CompileAnimationKeyframesSequenceMetadata */
/* unused harmony export CompileAnimationStyleMetadata */
/* unused harmony export CompileAnimationAnimateMetadata */
/* unused harmony export CompileAnimationWithStepsMetadata */
/* unused harmony export CompileAnimationSequenceMetadata */
/* unused harmony export CompileAnimationGroupMetadata */
/* unused harmony export identifierName */
/* unused harmony export identifierModuleUrl */
/* unused harmony export viewClassName */
/* unused harmony export rendererTypeName */
/* unused harmony export hostViewClassName */
/* unused harmony export dirWrapperClassName */
/* unused harmony export componentFactoryName */
/* unused harmony export CompileSummaryKind */
/* unused harmony export tokenName */
/* unused harmony export tokenReference */
/* unused harmony export CompileStylesheetMetadata */
/* unused harmony export CompileTemplateMetadata */
/* unused harmony export CompileDirectiveMetadata */
/* unused harmony export createHostComponentMeta */
/* unused harmony export CompilePipeMetadata */
/* unused harmony export CompileNgModuleMetadata */
/* unused harmony export TransitiveCompileNgModuleMetadata */
/* unused harmony export ProviderMeta */
/* unused harmony export createAotCompiler */
/* unused harmony export AotCompiler */
/* unused harmony export analyzeNgModules */
/* unused harmony export analyzeAndValidateNgModules */
/* unused harmony export extractProgramSymbols */
/* unused harmony export StaticReflector */
/* unused harmony export StaticAndDynamicReflectionCapabilities */
/* unused harmony export StaticSymbol */
/* unused harmony export StaticSymbolCache */
/* unused harmony export ResolvedStaticSymbol */
/* unused harmony export StaticSymbolResolver */
/* unused harmony export unescapeIdentifier */
/* unused harmony export AotSummaryResolver */
/* unused harmony export SummaryResolver */
/* unused harmony export COMPILER_PROVIDERS */
/* unused harmony export JitCompilerFactory */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return platformCoreDynamic; });
/* unused harmony export createUrlResolverWithoutPackagePrefix */
/* unused harmony export createOfflineCompileUrlResolver */
/* unused harmony export DEFAULT_PACKAGE_URL_PROVIDER */
/* unused harmony export UrlResolver */
/* unused harmony export getUrlScheme */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ResourceLoader; });
/* unused harmony export ElementSchemaRegistry */
/* unused harmony export Extractor */
/* unused harmony export I18NHtmlParser */
/* unused harmony export MessageBundle */
/* unused harmony export Serializer */
/* unused harmony export Xliff */
/* unused harmony export Xmb */
/* unused harmony export Xtb */
/* unused harmony export DirectiveNormalizer */
/* unused harmony export ParserError */
/* unused harmony export ParseSpan */
/* unused harmony export AST */
/* unused harmony export Quote */
/* unused harmony export EmptyExpr */
/* unused harmony export ImplicitReceiver */
/* unused harmony export Chain */
/* unused harmony export Conditional */
/* unused harmony export PropertyRead */
/* unused harmony export PropertyWrite */
/* unused harmony export SafePropertyRead */
/* unused harmony export KeyedRead */
/* unused harmony export KeyedWrite */
/* unused harmony export BindingPipe */
/* unused harmony export LiteralPrimitive */
/* unused harmony export LiteralArray */
/* unused harmony export LiteralMap */
/* unused harmony export Interpolation */
/* unused harmony export Binary */
/* unused harmony export PrefixNot */
/* unused harmony export MethodCall */
/* unused harmony export SafeMethodCall */
/* unused harmony export FunctionCall */
/* unused harmony export ASTWithSource */
/* unused harmony export TemplateBinding */
/* unused harmony export RecursiveAstVisitor */
/* unused harmony export AstTransformer */
/* unused harmony export TokenType */
/* unused harmony export Lexer */
/* unused harmony export Token */
/* unused harmony export EOF */
/* unused harmony export isIdentifier */
/* unused harmony export isQuote */
/* unused harmony export SplitInterpolation */
/* unused harmony export TemplateBindingParseResult */
/* unused harmony export Parser */
/* unused harmony export _ParseAST */
/* unused harmony export ERROR_COLLECTOR_TOKEN */
/* unused harmony export CompileMetadataResolver */
/* unused harmony export componentModuleUrl */
/* unused harmony export Text */
/* unused harmony export Expansion */
/* unused harmony export ExpansionCase */
/* unused harmony export Attribute */
/* unused harmony export Element */
/* unused harmony export Comment */
/* unused harmony export visitAll */
/* unused harmony export ParseTreeResult */
/* unused harmony export TreeError */
/* unused harmony export HtmlParser */
/* unused harmony export HtmlTagDefinition */
/* unused harmony export getHtmlTagDefinition */
/* unused harmony export TagContentType */
/* unused harmony export splitNsName */
/* unused harmony export getNsPrefix */
/* unused harmony export mergeNsAndName */
/* unused harmony export NAMED_ENTITIES */
/* unused harmony export ImportResolver */
/* unused harmony export debugOutputAstAsTypeScript */
/* unused harmony export TypeScriptEmitter */
/* unused harmony export ParseLocation */
/* unused harmony export ParseSourceFile */
/* unused harmony export ParseSourceSpan */
/* unused harmony export ParseErrorLevel */
/* unused harmony export ParseError */
/* unused harmony export DomElementSchemaRegistry */
/* unused harmony export CssSelector */
/* unused harmony export SelectorMatcher */
/* unused harmony export SelectorListContext */
/* unused harmony export SelectorContext */
/* unused harmony export StylesCompileDependency */
/* unused harmony export StylesCompileResult */
/* unused harmony export CompiledStylesheet */
/* unused harmony export StyleCompiler */
/* unused harmony export TemplateParseError */
/* unused harmony export TemplateParseResult */
/* unused harmony export TemplateParser */
/* unused harmony export splitClasses */
/* unused harmony export createElementCssSelector */
/* unused harmony export removeSummaryDuplicates */
var _get=function get(object,property,receiver){if(object===null)object=Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc===undefined){var parent=Object.getPrototypeOf(object);if(parent===null){return undefined;}else{return get(parent,property,receiver);}}else if("value"in desc){return desc.value;}else{var getter=desc.get;if(getter===undefined){return undefined;}return getter.call(receiver);}};var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i["return"])_i["return"]();}finally{if(_d)throw _e;}}return _arr;}return function(arr,i){if(Array.isArray(arr)){return arr;}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i);}else{throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _toArray(arr){return Array.isArray(arr)?arr:Array.from(arr);}function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++){arr2[i]=arr[i];}return arr2;}else{return Array.from(arr);}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}/**
 * @license Angular v4.0.0-rc.1
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 *//**
 * @stable
 */var/** @type {?} */VERSION=new __WEBPACK_IMPORTED_MODULE_0__angular_core__["f" /* Version */]('4.0.0-rc.1');/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 *//**
 * A segment of text within the template.
 */var TextAst=function(){/**
     * @param {?} value
     * @param {?} ngContentIndex
     * @param {?} sourceSpan
     */function TextAst(value,ngContentIndex,sourceSpan){_classCallCheck(this,TextAst);this.value=value;this.ngContentIndex=ngContentIndex;this.sourceSpan=sourceSpan;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(TextAst,[{key:'visit',value:function visit(visitor,context){return visitor.visitText(this,context);}}]);return TextAst;}();/**
 * A bound expression within the text of a template.
 */var BoundTextAst=function(){/**
     * @param {?} value
     * @param {?} ngContentIndex
     * @param {?} sourceSpan
     */function BoundTextAst(value,ngContentIndex,sourceSpan){_classCallCheck(this,BoundTextAst);this.value=value;this.ngContentIndex=ngContentIndex;this.sourceSpan=sourceSpan;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(BoundTextAst,[{key:'visit',value:function visit(visitor,context){return visitor.visitBoundText(this,context);}}]);return BoundTextAst;}();/**
 * A plain attribute on an element.
 */var AttrAst=function(){/**
     * @param {?} name
     * @param {?} value
     * @param {?} sourceSpan
     */function AttrAst(name,value,sourceSpan){_classCallCheck(this,AttrAst);this.name=name;this.value=value;this.sourceSpan=sourceSpan;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(AttrAst,[{key:'visit',value:function visit(visitor,context){return visitor.visitAttr(this,context);}}]);return AttrAst;}();/**
 * A binding for an element property (e.g. `[property]="expression"`) or an animation trigger (e.g.
 * `[\@trigger]="stateExp"`)
 */var BoundElementPropertyAst=function(){/**
     * @param {?} name
     * @param {?} type
     * @param {?} securityContext
     * @param {?} needsRuntimeSecurityContext
     * @param {?} value
     * @param {?} unit
     * @param {?} sourceSpan
     */function BoundElementPropertyAst(name,type,securityContext,needsRuntimeSecurityContext,value,unit,sourceSpan){_classCallCheck(this,BoundElementPropertyAst);this.name=name;this.type=type;this.securityContext=securityContext;this.needsRuntimeSecurityContext=needsRuntimeSecurityContext;this.value=value;this.unit=unit;this.sourceSpan=sourceSpan;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(BoundElementPropertyAst,[{key:'visit',value:function visit(visitor,context){return visitor.visitElementProperty(this,context);}/**
     * @return {?}
     */},{key:'isAnimation',get:function get(){return this.type===PropertyBindingType.Animation;}}]);return BoundElementPropertyAst;}();/**
 * A binding for an element event (e.g. `(event)="handler()"`) or an animation trigger event (e.g.
 * `(\@trigger.phase)="callback($event)"`).
 */var BoundEventAst=function(){/**
     * @param {?} name
     * @param {?} target
     * @param {?} phase
     * @param {?} handler
     * @param {?} sourceSpan
     */function BoundEventAst(name,target,phase,handler,sourceSpan){_classCallCheck(this,BoundEventAst);this.name=name;this.target=target;this.phase=phase;this.handler=handler;this.sourceSpan=sourceSpan;}/**
     * @param {?} name
     * @param {?} target
     * @param {?} phase
     * @return {?}
     */_createClass(BoundEventAst,[{key:'visit',/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */value:function visit(visitor,context){return visitor.visitEvent(this,context);}/**
     * @return {?}
     */},{key:'fullName',get:function get(){return BoundEventAst.calcFullName(this.name,this.target,this.phase);}/**
     * @return {?}
     */},{key:'isAnimation',get:function get(){return!!this.phase;}}],[{key:'calcFullName',value:function calcFullName(name,target,phase){if(target){return target+':'+name;}else if(phase){return'@'+name+'.'+phase;}else{return name;}}}]);return BoundEventAst;}();/**
 * A reference declaration on an element (e.g. `let someName="expression"`).
 */var ReferenceAst=function(){/**
     * @param {?} name
     * @param {?} value
     * @param {?} sourceSpan
     */function ReferenceAst(name,value,sourceSpan){_classCallCheck(this,ReferenceAst);this.name=name;this.value=value;this.sourceSpan=sourceSpan;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(ReferenceAst,[{key:'visit',value:function visit(visitor,context){return visitor.visitReference(this,context);}}]);return ReferenceAst;}();/**
 * A variable declaration on a <ng-template> (e.g. `var-someName="someLocalName"`).
 */var VariableAst=function(){/**
     * @param {?} name
     * @param {?} value
     * @param {?} sourceSpan
     */function VariableAst(name,value,sourceSpan){_classCallCheck(this,VariableAst);this.name=name;this.value=value;this.sourceSpan=sourceSpan;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(VariableAst,[{key:'visit',value:function visit(visitor,context){return visitor.visitVariable(this,context);}}]);return VariableAst;}();/**
 * An element declaration in a template.
 */var ElementAst=function(){/**
     * @param {?} name
     * @param {?} attrs
     * @param {?} inputs
     * @param {?} outputs
     * @param {?} references
     * @param {?} directives
     * @param {?} providers
     * @param {?} hasViewContainer
     * @param {?} queryMatches
     * @param {?} children
     * @param {?} ngContentIndex
     * @param {?} sourceSpan
     * @param {?} endSourceSpan
     */function ElementAst(name,attrs,inputs,outputs,references,directives,providers,hasViewContainer,queryMatches,children,ngContentIndex,sourceSpan,endSourceSpan){_classCallCheck(this,ElementAst);this.name=name;this.attrs=attrs;this.inputs=inputs;this.outputs=outputs;this.references=references;this.directives=directives;this.providers=providers;this.hasViewContainer=hasViewContainer;this.queryMatches=queryMatches;this.children=children;this.ngContentIndex=ngContentIndex;this.sourceSpan=sourceSpan;this.endSourceSpan=endSourceSpan;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(ElementAst,[{key:'visit',value:function visit(visitor,context){return visitor.visitElement(this,context);}}]);return ElementAst;}();/**
 * A `<ng-template>` element included in an Angular template.
 */var EmbeddedTemplateAst=function(){/**
     * @param {?} attrs
     * @param {?} outputs
     * @param {?} references
     * @param {?} variables
     * @param {?} directives
     * @param {?} providers
     * @param {?} hasViewContainer
     * @param {?} queryMatches
     * @param {?} children
     * @param {?} ngContentIndex
     * @param {?} sourceSpan
     */function EmbeddedTemplateAst(attrs,outputs,references,variables,directives,providers,hasViewContainer,queryMatches,children,ngContentIndex,sourceSpan){_classCallCheck(this,EmbeddedTemplateAst);this.attrs=attrs;this.outputs=outputs;this.references=references;this.variables=variables;this.directives=directives;this.providers=providers;this.hasViewContainer=hasViewContainer;this.queryMatches=queryMatches;this.children=children;this.ngContentIndex=ngContentIndex;this.sourceSpan=sourceSpan;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(EmbeddedTemplateAst,[{key:'visit',value:function visit(visitor,context){return visitor.visitEmbeddedTemplate(this,context);}}]);return EmbeddedTemplateAst;}();/**
 * A directive property with a bound value (e.g. `*ngIf="condition").
 */var BoundDirectivePropertyAst=function(){/**
     * @param {?} directiveName
     * @param {?} templateName
     * @param {?} value
     * @param {?} sourceSpan
     */function BoundDirectivePropertyAst(directiveName,templateName,value,sourceSpan){_classCallCheck(this,BoundDirectivePropertyAst);this.directiveName=directiveName;this.templateName=templateName;this.value=value;this.sourceSpan=sourceSpan;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(BoundDirectivePropertyAst,[{key:'visit',value:function visit(visitor,context){return visitor.visitDirectiveProperty(this,context);}}]);return BoundDirectivePropertyAst;}();/**
 * A directive declared on an element.
 */var DirectiveAst=function(){/**
     * @param {?} directive
     * @param {?} inputs
     * @param {?} hostProperties
     * @param {?} hostEvents
     * @param {?} contentQueryStartId
     * @param {?} sourceSpan
     */function DirectiveAst(directive,inputs,hostProperties,hostEvents,contentQueryStartId,sourceSpan){_classCallCheck(this,DirectiveAst);this.directive=directive;this.inputs=inputs;this.hostProperties=hostProperties;this.hostEvents=hostEvents;this.contentQueryStartId=contentQueryStartId;this.sourceSpan=sourceSpan;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(DirectiveAst,[{key:'visit',value:function visit(visitor,context){return visitor.visitDirective(this,context);}}]);return DirectiveAst;}();/**
 * A provider declared on an element
 */var ProviderAst=function(){/**
     * @param {?} token
     * @param {?} multiProvider
     * @param {?} eager
     * @param {?} providers
     * @param {?} providerType
     * @param {?} lifecycleHooks
     * @param {?} sourceSpan
     */function ProviderAst(token,multiProvider,eager,providers,providerType,lifecycleHooks,sourceSpan){_classCallCheck(this,ProviderAst);this.token=token;this.multiProvider=multiProvider;this.eager=eager;this.providers=providers;this.providerType=providerType;this.lifecycleHooks=lifecycleHooks;this.sourceSpan=sourceSpan;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(ProviderAst,[{key:'visit',value:function visit(visitor,context){// No visit method in the visitor for now...
return null;}}]);return ProviderAst;}();var ProviderAstType={};ProviderAstType.PublicService=0;ProviderAstType.PrivateService=1;ProviderAstType.Component=2;ProviderAstType.Directive=3;ProviderAstType.Builtin=4;ProviderAstType[ProviderAstType.PublicService]="PublicService";ProviderAstType[ProviderAstType.PrivateService]="PrivateService";ProviderAstType[ProviderAstType.Component]="Component";ProviderAstType[ProviderAstType.Directive]="Directive";ProviderAstType[ProviderAstType.Builtin]="Builtin";/**
 * Position where content is to be projected (instance of `<ng-content>` in a template).
 */var NgContentAst=function(){/**
     * @param {?} index
     * @param {?} ngContentIndex
     * @param {?} sourceSpan
     */function NgContentAst(index,ngContentIndex,sourceSpan){_classCallCheck(this,NgContentAst);this.index=index;this.ngContentIndex=ngContentIndex;this.sourceSpan=sourceSpan;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(NgContentAst,[{key:'visit',value:function visit(visitor,context){return visitor.visitNgContent(this,context);}}]);return NgContentAst;}();var PropertyBindingType={};PropertyBindingType.Property=0;PropertyBindingType.Attribute=1;PropertyBindingType.Class=2;PropertyBindingType.Style=3;PropertyBindingType.Animation=4;PropertyBindingType[PropertyBindingType.Property]="Property";PropertyBindingType[PropertyBindingType.Attribute]="Attribute";PropertyBindingType[PropertyBindingType.Class]="Class";PropertyBindingType[PropertyBindingType.Style]="Style";PropertyBindingType[PropertyBindingType.Animation]="Animation";/**
 * Visit every node in a list of {\@link TemplateAst}s with the given {\@link TemplateAstVisitor}.
 * @param {?} visitor
 * @param {?} asts
 * @param {?=} context
 * @return {?}
 */function templateVisitAll(visitor,asts){var context=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var/** @type {?} */result=[];var/** @type {?} */visit=visitor.visit?function(ast){return visitor.visit(ast,context)||ast.visit(visitor,context);}:function(ast){return ast.visit(visitor,context);};asts.forEach(function(ast){var/** @type {?} */astResult=visit(ast);if(astResult){result.push(astResult);}});return result;}/**
 * A token representing the a reference to a static type.
 *
 * This token is unique for a filePath and name and can be used as a hash table key.
 */var StaticSymbol=function(){/**
     * @param {?} filePath
     * @param {?} name
     * @param {?} members
     */function StaticSymbol(filePath,name,members){_classCallCheck(this,StaticSymbol);this.filePath=filePath;this.name=name;this.members=members;}/**
     * @return {?}
     */_createClass(StaticSymbol,[{key:'assertNoMembers',value:function assertNoMembers(){if(this.members.length){throw new Error('Illegal state: symbol without members expected, but got '+JSON.stringify(this)+'.');}}}]);return StaticSymbol;}();/**
 * A cache of static symbol used by the StaticReflector to return the same symbol for the
 * same symbol values.
 */var StaticSymbolCache=function(){function StaticSymbolCache(){_classCallCheck(this,StaticSymbolCache);this.cache=new Map();}/**
     * @param {?} declarationFile
     * @param {?} name
     * @param {?=} members
     * @return {?}
     */_createClass(StaticSymbolCache,[{key:'get',value:function get(declarationFile,name,members){members=members||[];var/** @type {?} */memberSuffix=members.length?'.'+members.join('.'):'';var/** @type {?} */key='"'+declarationFile+'".'+name+memberSuffix;var/** @type {?} */result=this.cache.get(key);if(!result){result=new StaticSymbol(declarationFile,name,members);this.cache.set(key,result);}return result;}}]);return StaticSymbolCache;}();/**
 * @param {?} obj
 * @return {?}
 */function isPresent(obj){return obj!=null;}/**
 * @param {?} obj
 * @return {?}
 */function isBlank(obj){return obj==null;}var/** @type {?} */STRING_MAP_PROTO=Object.getPrototypeOf({});/**
 * @param {?} obj
 * @return {?}
 */function isStrictStringMap(obj){return(typeof obj==='undefined'?'undefined':_typeof(obj))==='object'&&obj!==null&&Object.getPrototypeOf(obj)===STRING_MAP_PROTO;}/**
 * @param {?} token
 * @return {?}
 */function stringify(token){if(typeof token==='string'){return token;}if(token==null){return''+token;}if(token.overriddenName){return''+token.overriddenName;}if(token.name){return''+token.name;}var/** @type {?} */res=token.toString();var/** @type {?} */newLineIndex=res.indexOf('\n');return newLineIndex===-1?res:res.substring(0,newLineIndex);}var NumberWrapper=function(){function NumberWrapper(){_classCallCheck(this,NumberWrapper);}_createClass(NumberWrapper,null,[{key:'parseIntAutoRadix',/**
     * @param {?} text
     * @return {?}
     */value:function parseIntAutoRadix(text){var/** @type {?} */result=parseInt(text);if(isNaN(result)){throw new Error('Invalid integer literal when parsing '+text);}return result;}/**
     * @param {?} value
     * @return {?}
     */},{key:'isNumeric',value:function isNumeric(value){return!isNaN(value-parseFloat(value));}}]);return NumberWrapper;}();/**
 * @param {?} o
 * @return {?}
 */function isJsObject(o){return o!==null&&(typeof o==='function'||(typeof o==='undefined'?'undefined':_typeof(o))==='object');}/**
 * @param {?} obj
 * @return {?}
 */function isPrimitive(obj){return!isJsObject(obj);}/**
 * @param {?} s
 * @return {?}
 */function escapeRegExp(s){return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g,'\\$1');}/**
 * Wraps Javascript Objects
 */var StringMapWrapper=function(){function StringMapWrapper(){_classCallCheck(this,StringMapWrapper);}_createClass(StringMapWrapper,null,[{key:'merge',/**
     * @param {?} m1
     * @param {?} m2
     * @return {?}
     */value:function merge(m1,m2){var/** @type {?} */m={};var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=Object.keys(m1)[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var k=_step.value;m[k]=m1[k];}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return();}}finally{if(_didIteratorError){throw _iteratorError;}}}var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=Object.keys(m2)[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=true){var _k=_step2.value;m[_k]=m2[_k];}}catch(err){_didIteratorError2=true;_iteratorError2=err;}finally{try{if(!_iteratorNormalCompletion2&&_iterator2.return){_iterator2.return();}}finally{if(_didIteratorError2){throw _iteratorError2;}}}return m;}/**
     * @param {?} m1
     * @param {?} m2
     * @return {?}
     */},{key:'equals',value:function equals(m1,m2){var/** @type {?} */k1=Object.keys(m1);var/** @type {?} */k2=Object.keys(m2);if(k1.length!=k2.length){return false;}for(var/** @type {?} */i=0;i<k1.length;i++){var/** @type {?} */key=k1[i];if(m1[key]!==m2[key]){return false;}}return true;}}]);return StringMapWrapper;}();var ListWrapper=function(){function ListWrapper(){_classCallCheck(this,ListWrapper);}_createClass(ListWrapper,null,[{key:'findLast',/**
     * @param {?} arr
     * @param {?} condition
     * @return {?}
     */value:function findLast(arr,condition){for(var/** @type {?} */i=arr.length-1;i>=0;i--){if(condition(arr[i])){return arr[i];}}return null;}/**
     * @param {?} list
     * @param {?} items
     * @return {?}
     */},{key:'removeAll',value:function removeAll(list,items){for(var/** @type {?} */i=0;i<items.length;++i){var/** @type {?} */index=list.indexOf(items[i]);if(index>-1){list.splice(index,1);}}}/**
     * @param {?} list
     * @param {?} el
     * @return {?}
     */},{key:'remove',value:function remove(list,el){var/** @type {?} */index=list.indexOf(el);if(index>-1){list.splice(index,1);return true;}return false;}/**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */},{key:'equals',value:function equals(a,b){if(a.length!=b.length)return false;for(var/** @type {?} */i=0;i<a.length;++i){if(a[i]!==b[i])return false;}return true;}/**
     * @param {?} list
     * @return {?}
     */},{key:'flatten',value:function flatten(list){return list.reduce(function(flat,item){var/** @type {?} */flatItem=Array.isArray(item)?ListWrapper.flatten(item):item;return flat.concat(flatItem);},[]);}}]);return ListWrapper;}();var TagContentType={};TagContentType.RAW_TEXT=0;TagContentType.ESCAPABLE_RAW_TEXT=1;TagContentType.PARSABLE_DATA=2;TagContentType[TagContentType.RAW_TEXT]="RAW_TEXT";TagContentType[TagContentType.ESCAPABLE_RAW_TEXT]="ESCAPABLE_RAW_TEXT";TagContentType[TagContentType.PARSABLE_DATA]="PARSABLE_DATA";/**
 * @param {?} elementName
 * @return {?}
 */function splitNsName(elementName){if(elementName[0]!=':'){return[null,elementName];}var/** @type {?} */colonIndex=elementName.indexOf(':',1);if(colonIndex==-1){throw new Error('Unsupported format "'+elementName+'" expecting ":namespace:name"');}return[elementName.slice(1,colonIndex),elementName.slice(colonIndex+1)];}/**
 * @param {?} fullName
 * @return {?}
 */function getNsPrefix(fullName){return fullName===null?null:splitNsName(fullName)[0];}/**
 * @param {?} prefix
 * @param {?} localName
 * @return {?}
 */function mergeNsAndName(prefix,localName){return prefix?':'+prefix+':'+localName:localName;}// see http://www.w3.org/TR/html51/syntax.html#named-character-references
// see https://html.spec.whatwg.org/multipage/entities.json
// This list is not exhaustive to keep the compiler footprint low.
// The `&#123;` / `&#x1ab;` syntax should be used when the named character reference does not exist.
var/** @type {?} */NAMED_ENTITIES={'Aacute':'\xC1','aacute':'\xE1','Acirc':'\xC2','acirc':'\xE2','acute':'\xB4','AElig':'\xC6','aelig':'\xE6','Agrave':'\xC0','agrave':'\xE0','alefsym':'\u2135','Alpha':'\u0391','alpha':'\u03B1','amp':'&','and':'\u2227','ang':'\u2220','apos':'\'','Aring':'\xC5','aring':'\xE5','asymp':'\u2248','Atilde':'\xC3','atilde':'\xE3','Auml':'\xC4','auml':'\xE4','bdquo':'\u201E','Beta':'\u0392','beta':'\u03B2','brvbar':'\xA6','bull':'\u2022','cap':'\u2229','Ccedil':'\xC7','ccedil':'\xE7','cedil':'\xB8','cent':'\xA2','Chi':'\u03A7','chi':'\u03C7','circ':'\u02C6','clubs':'\u2663','cong':'\u2245','copy':'\xA9','crarr':'\u21B5','cup':'\u222A','curren':'\xA4','dagger':'\u2020','Dagger':'\u2021','darr':'\u2193','dArr':'\u21D3','deg':'\xB0','Delta':'\u0394','delta':'\u03B4','diams':'\u2666','divide':'\xF7','Eacute':'\xC9','eacute':'\xE9','Ecirc':'\xCA','ecirc':'\xEA','Egrave':'\xC8','egrave':'\xE8','empty':'\u2205','emsp':'\u2003','ensp':'\u2002','Epsilon':'\u0395','epsilon':'\u03B5','equiv':'\u2261','Eta':'\u0397','eta':'\u03B7','ETH':'\xD0','eth':'\xF0','Euml':'\xCB','euml':'\xEB','euro':'\u20AC','exist':'\u2203','fnof':'\u0192','forall':'\u2200','frac12':'\xBD','frac14':'\xBC','frac34':'\xBE','frasl':'\u2044','Gamma':'\u0393','gamma':'\u03B3','ge':'\u2265','gt':'>','harr':'\u2194','hArr':'\u21D4','hearts':'\u2665','hellip':'\u2026','Iacute':'\xCD','iacute':'\xED','Icirc':'\xCE','icirc':'\xEE','iexcl':'\xA1','Igrave':'\xCC','igrave':'\xEC','image':'\u2111','infin':'\u221E','int':'\u222B','Iota':'\u0399','iota':'\u03B9','iquest':'\xBF','isin':'\u2208','Iuml':'\xCF','iuml':'\xEF','Kappa':'\u039A','kappa':'\u03BA','Lambda':'\u039B','lambda':'\u03BB','lang':'\u27E8','laquo':'\xAB','larr':'\u2190','lArr':'\u21D0','lceil':'\u2308','ldquo':'\u201C','le':'\u2264','lfloor':'\u230A','lowast':'\u2217','loz':'\u25CA','lrm':'\u200E','lsaquo':'\u2039','lsquo':'\u2018','lt':'<','macr':'\xAF','mdash':'\u2014','micro':'\xB5','middot':'\xB7','minus':'\u2212','Mu':'\u039C','mu':'\u03BC','nabla':'\u2207','nbsp':'\xA0','ndash':'\u2013','ne':'\u2260','ni':'\u220B','not':'\xAC','notin':'\u2209','nsub':'\u2284','Ntilde':'\xD1','ntilde':'\xF1','Nu':'\u039D','nu':'\u03BD','Oacute':'\xD3','oacute':'\xF3','Ocirc':'\xD4','ocirc':'\xF4','OElig':'\u0152','oelig':'\u0153','Ograve':'\xD2','ograve':'\xF2','oline':'\u203E','Omega':'\u03A9','omega':'\u03C9','Omicron':'\u039F','omicron':'\u03BF','oplus':'\u2295','or':'\u2228','ordf':'\xAA','ordm':'\xBA','Oslash':'\xD8','oslash':'\xF8','Otilde':'\xD5','otilde':'\xF5','otimes':'\u2297','Ouml':'\xD6','ouml':'\xF6','para':'\xB6','permil':'\u2030','perp':'\u22A5','Phi':'\u03A6','phi':'\u03C6','Pi':'\u03A0','pi':'\u03C0','piv':'\u03D6','plusmn':'\xB1','pound':'\xA3','prime':'\u2032','Prime':'\u2033','prod':'\u220F','prop':'\u221D','Psi':'\u03A8','psi':'\u03C8','quot':'"','radic':'\u221A','rang':'\u27E9','raquo':'\xBB','rarr':'\u2192','rArr':'\u21D2','rceil':'\u2309','rdquo':'\u201D','real':'\u211C','reg':'\xAE','rfloor':'\u230B','Rho':'\u03A1','rho':'\u03C1','rlm':'\u200F','rsaquo':'\u203A','rsquo':'\u2019','sbquo':'\u201A','Scaron':'\u0160','scaron':'\u0161','sdot':'\u22C5','sect':'\xA7','shy':'\xAD','Sigma':'\u03A3','sigma':'\u03C3','sigmaf':'\u03C2','sim':'\u223C','spades':'\u2660','sub':'\u2282','sube':'\u2286','sum':'\u2211','sup':'\u2283','sup1':'\xB9','sup2':'\xB2','sup3':'\xB3','supe':'\u2287','szlig':'\xDF','Tau':'\u03A4','tau':'\u03C4','there4':'\u2234','Theta':'\u0398','theta':'\u03B8','thetasym':'\u03D1','thinsp':'\u2009','THORN':'\xDE','thorn':'\xFE','tilde':'\u02DC','times':'\xD7','trade':'\u2122','Uacute':'\xDA','uacute':'\xFA','uarr':'\u2191','uArr':'\u21D1','Ucirc':'\xDB','ucirc':'\xFB','Ugrave':'\xD9','ugrave':'\xF9','uml':'\xA8','upsih':'\u03D2','Upsilon':'\u03A5','upsilon':'\u03C5','Uuml':'\xDC','uuml':'\xFC','weierp':'\u2118','Xi':'\u039E','xi':'\u03BE','Yacute':'\xDD','yacute':'\xFD','yen':'\xA5','yuml':'\xFF','Yuml':'\u0178','Zeta':'\u0396','zeta':'\u03B6','zwj':'\u200D','zwnj':'\u200C'};var HtmlTagDefinition=function(){/**
     * @param {?=} __0
     */function HtmlTagDefinition(){var _this=this;var _ref=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},closedByChildren=_ref.closedByChildren,requiredParents=_ref.requiredParents,implicitNamespacePrefix=_ref.implicitNamespacePrefix,_ref$contentType=_ref.contentType,contentType=_ref$contentType===undefined?TagContentType.PARSABLE_DATA:_ref$contentType,_ref$closedByParent=_ref.closedByParent,closedByParent=_ref$closedByParent===undefined?false:_ref$closedByParent,_ref$isVoid=_ref.isVoid,isVoid=_ref$isVoid===undefined?false:_ref$isVoid,_ref$ignoreFirstLf=_ref.ignoreFirstLf,ignoreFirstLf=_ref$ignoreFirstLf===undefined?false:_ref$ignoreFirstLf;_classCallCheck(this,HtmlTagDefinition);this.closedByChildren={};this.closedByParent=false;this.canSelfClose=false;if(closedByChildren&&closedByChildren.length>0){closedByChildren.forEach(function(tagName){return _this.closedByChildren[tagName]=true;});}this.isVoid=isVoid;this.closedByParent=closedByParent||isVoid;if(requiredParents&&requiredParents.length>0){this.requiredParents={};// The first parent is the list is automatically when none of the listed parents are present
this.parentToAdd=requiredParents[0];requiredParents.forEach(function(tagName){return _this.requiredParents[tagName]=true;});}this.implicitNamespacePrefix=implicitNamespacePrefix;this.contentType=contentType;this.ignoreFirstLf=ignoreFirstLf;}/**
     * @param {?} currentParent
     * @return {?}
     */_createClass(HtmlTagDefinition,[{key:'requireExtraParent',value:function requireExtraParent(currentParent){if(!this.requiredParents){return false;}if(!currentParent){return true;}var/** @type {?} */lcParent=currentParent.toLowerCase();var/** @type {?} */isParentTemplate=lcParent==='template'||currentParent==='ng-template';return!isParentTemplate&&this.requiredParents[lcParent]!=true;}/**
     * @param {?} name
     * @return {?}
     */},{key:'isClosedByChild',value:function isClosedByChild(name){return this.isVoid||name.toLowerCase()in this.closedByChildren;}}]);return HtmlTagDefinition;}();// see http://www.w3.org/TR/html51/syntax.html#optional-tags
// This implementation does not fully conform to the HTML5 spec.
var/** @type {?} */TAG_DEFINITIONS={'base':new HtmlTagDefinition({isVoid:true}),'meta':new HtmlTagDefinition({isVoid:true}),'area':new HtmlTagDefinition({isVoid:true}),'embed':new HtmlTagDefinition({isVoid:true}),'link':new HtmlTagDefinition({isVoid:true}),'img':new HtmlTagDefinition({isVoid:true}),'input':new HtmlTagDefinition({isVoid:true}),'param':new HtmlTagDefinition({isVoid:true}),'hr':new HtmlTagDefinition({isVoid:true}),'br':new HtmlTagDefinition({isVoid:true}),'source':new HtmlTagDefinition({isVoid:true}),'track':new HtmlTagDefinition({isVoid:true}),'wbr':new HtmlTagDefinition({isVoid:true}),'p':new HtmlTagDefinition({closedByChildren:['address','article','aside','blockquote','div','dl','fieldset','footer','form','h1','h2','h3','h4','h5','h6','header','hgroup','hr','main','nav','ol','p','pre','section','table','ul'],closedByParent:true}),'thead':new HtmlTagDefinition({closedByChildren:['tbody','tfoot']}),'tbody':new HtmlTagDefinition({closedByChildren:['tbody','tfoot'],closedByParent:true}),'tfoot':new HtmlTagDefinition({closedByChildren:['tbody'],closedByParent:true}),'tr':new HtmlTagDefinition({closedByChildren:['tr'],requiredParents:['tbody','tfoot','thead'],closedByParent:true}),'td':new HtmlTagDefinition({closedByChildren:['td','th'],closedByParent:true}),'th':new HtmlTagDefinition({closedByChildren:['td','th'],closedByParent:true}),'col':new HtmlTagDefinition({requiredParents:['colgroup'],isVoid:true}),'svg':new HtmlTagDefinition({implicitNamespacePrefix:'svg'}),'math':new HtmlTagDefinition({implicitNamespacePrefix:'math'}),'li':new HtmlTagDefinition({closedByChildren:['li'],closedByParent:true}),'dt':new HtmlTagDefinition({closedByChildren:['dt','dd']}),'dd':new HtmlTagDefinition({closedByChildren:['dt','dd'],closedByParent:true}),'rb':new HtmlTagDefinition({closedByChildren:['rb','rt','rtc','rp'],closedByParent:true}),'rt':new HtmlTagDefinition({closedByChildren:['rb','rt','rtc','rp'],closedByParent:true}),'rtc':new HtmlTagDefinition({closedByChildren:['rb','rtc','rp'],closedByParent:true}),'rp':new HtmlTagDefinition({closedByChildren:['rb','rt','rtc','rp'],closedByParent:true}),'optgroup':new HtmlTagDefinition({closedByChildren:['optgroup'],closedByParent:true}),'option':new HtmlTagDefinition({closedByChildren:['option','optgroup'],closedByParent:true}),'pre':new HtmlTagDefinition({ignoreFirstLf:true}),'listing':new HtmlTagDefinition({ignoreFirstLf:true}),'style':new HtmlTagDefinition({contentType:TagContentType.RAW_TEXT}),'script':new HtmlTagDefinition({contentType:TagContentType.RAW_TEXT}),'title':new HtmlTagDefinition({contentType:TagContentType.ESCAPABLE_RAW_TEXT}),'textarea':new HtmlTagDefinition({contentType:TagContentType.ESCAPABLE_RAW_TEXT,ignoreFirstLf:true})};var/** @type {?} */_DEFAULT_TAG_DEFINITION=new HtmlTagDefinition();/**
 * @param {?} tagName
 * @return {?}
 */function getHtmlTagDefinition(tagName){return TAG_DEFINITIONS[tagName.toLowerCase()]||_DEFAULT_TAG_DEFINITION;}var/** @type {?} */_SELECTOR_REGEXP=new RegExp('(\\:not\\()|'+'([-\\w]+)|'+'(?:\\.([-\\w]+))|'+// "-" should appear first in the regexp below as FF31 parses "[.-\w]" as a range
'(?:\\[([-.\\w*]+)(?:=([^\\]]*))?\\])|'+'(\\))|'+'(\\s*,\\s*)',// ","
'g');/**
 * A css selector contains an element name,
 * css classes and attribute/value pairs with the purpose
 * of selecting subsets out of them.
 */var CssSelector=function(){function CssSelector(){_classCallCheck(this,CssSelector);this.element=null;this.classNames=[];this.attrs=[];this.notSelectors=[];}/**
     * @param {?} selector
     * @return {?}
     */_createClass(CssSelector,[{key:'isElementSelector',/**
     * @return {?}
     */value:function isElementSelector(){return this.hasElementSelector()&&this.classNames.length==0&&this.attrs.length==0&&this.notSelectors.length===0;}/**
     * @return {?}
     */},{key:'hasElementSelector',value:function hasElementSelector(){return!!this.element;}/**
     * @param {?=} element
     * @return {?}
     */},{key:'setElement',value:function setElement(){var element=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;this.element=element;}/**
     * Gets a template string for an element that matches the selector.
     * @return {?}
     */},{key:'getMatchingElementTemplate',value:function getMatchingElementTemplate(){var/** @type {?} */tagName=this.element||'div';var/** @type {?} */classAttr=this.classNames.length>0?' class="'+this.classNames.join(' ')+'"':'';var/** @type {?} */attrs='';for(var/** @type {?} */i=0;i<this.attrs.length;i+=2){var/** @type {?} */attrName=this.attrs[i];var/** @type {?} */attrValue=this.attrs[i+1]!==''?'="'+this.attrs[i+1]+'"':'';attrs+=' '+attrName+attrValue;}return getHtmlTagDefinition(tagName).isVoid?'<'+tagName+classAttr+attrs+'/>':'<'+tagName+classAttr+attrs+'></'+tagName+'>';}/**
     * @param {?} name
     * @param {?=} value
     * @return {?}
     */},{key:'addAttribute',value:function addAttribute(name){var value=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';this.attrs.push(name,value&&value.toLowerCase()||'');}/**
     * @param {?} name
     * @return {?}
     */},{key:'addClassName',value:function addClassName(name){this.classNames.push(name.toLowerCase());}/**
     * @return {?}
     */},{key:'toString',value:function toString(){var/** @type {?} */res=this.element||'';if(this.classNames){this.classNames.forEach(function(klass){return res+='.'+klass;});}if(this.attrs){for(var/** @type {?} */i=0;i<this.attrs.length;i+=2){var/** @type {?} */name=this.attrs[i];var/** @type {?} */value=this.attrs[i+1];res+='['+name+(value?'='+value:'')+']';}}this.notSelectors.forEach(function(notSelector){return res+=':not('+notSelector+')';});return res;}}],[{key:'parse',value:function parse(selector){var/** @type {?} */results=[];var/** @type {?} */_addResult=function _addResult(res,cssSel){if(cssSel.notSelectors.length>0&&!cssSel.element&&cssSel.classNames.length==0&&cssSel.attrs.length==0){cssSel.element='*';}res.push(cssSel);};var/** @type {?} */cssSelector=new CssSelector();var/** @type {?} */match=void 0;var/** @type {?} */current=cssSelector;var/** @type {?} */inNot=false;_SELECTOR_REGEXP.lastIndex=0;while(match=_SELECTOR_REGEXP.exec(selector)){if(match[1]){if(inNot){throw new Error('Nesting :not is not allowed in a selector');}inNot=true;current=new CssSelector();cssSelector.notSelectors.push(current);}if(match[2]){current.setElement(match[2]);}if(match[3]){current.addClassName(match[3]);}if(match[4]){current.addAttribute(match[4],match[5]);}if(match[6]){inNot=false;current=cssSelector;}if(match[7]){if(inNot){throw new Error('Multiple selectors in :not are not supported');}_addResult(results,cssSelector);cssSelector=current=new CssSelector();}}_addResult(results,cssSelector);return results;}}]);return CssSelector;}();/**
 * Reads a list of CssSelectors and allows to calculate which ones
 * are contained in a given CssSelector.
 */var SelectorMatcher=function(){function SelectorMatcher(){_classCallCheck(this,SelectorMatcher);this._elementMap=new Map();this._elementPartialMap=new Map();this._classMap=new Map();this._classPartialMap=new Map();this._attrValueMap=new Map();this._attrValuePartialMap=new Map();this._listContexts=[];}/**
     * @param {?} notSelectors
     * @return {?}
     */_createClass(SelectorMatcher,[{key:'addSelectables',/**
     * @param {?} cssSelectors
     * @param {?=} callbackCtxt
     * @return {?}
     */value:function addSelectables(cssSelectors,callbackCtxt){var/** @type {?} */listContext=null;if(cssSelectors.length>1){listContext=new SelectorListContext(cssSelectors);this._listContexts.push(listContext);}for(var/** @type {?} */i=0;i<cssSelectors.length;i++){this._addSelectable(cssSelectors[i],callbackCtxt,listContext);}}/**
     * Add an object that can be found later on by calling `match`.
     * @param {?} cssSelector A css selector
     * @param {?} callbackCtxt An opaque object that will be given to the callback of the `match` function
     * @param {?} listContext
     * @return {?}
     */},{key:'_addSelectable',value:function _addSelectable(cssSelector,callbackCtxt,listContext){var/** @type {?} */matcher=this;var/** @type {?} */element=cssSelector.element;var/** @type {?} */classNames=cssSelector.classNames;var/** @type {?} */attrs=cssSelector.attrs;var/** @type {?} */selectable=new SelectorContext(cssSelector,callbackCtxt,listContext);if(element){var/** @type {?} */isTerminal=attrs.length===0&&classNames.length===0;if(isTerminal){this._addTerminal(matcher._elementMap,element,selectable);}else{matcher=this._addPartial(matcher._elementPartialMap,element);}}if(classNames){for(var/** @type {?} */i=0;i<classNames.length;i++){var/** @type {?} */_isTerminal=attrs.length===0&&i===classNames.length-1;var/** @type {?} */className=classNames[i];if(_isTerminal){this._addTerminal(matcher._classMap,className,selectable);}else{matcher=this._addPartial(matcher._classPartialMap,className);}}}if(attrs){for(var/** @type {?} */_i=0;_i<attrs.length;_i+=2){var/** @type {?} */_isTerminal2=_i===attrs.length-2;var/** @type {?} */name=attrs[_i];var/** @type {?} */value=attrs[_i+1];if(_isTerminal2){var/** @type {?} */terminalMap=matcher._attrValueMap;var/** @type {?} */terminalValuesMap=terminalMap.get(name);if(!terminalValuesMap){terminalValuesMap=new Map();terminalMap.set(name,terminalValuesMap);}this._addTerminal(terminalValuesMap,value,selectable);}else{var/** @type {?} */partialMap=matcher._attrValuePartialMap;var/** @type {?} */partialValuesMap=partialMap.get(name);if(!partialValuesMap){partialValuesMap=new Map();partialMap.set(name,partialValuesMap);}matcher=this._addPartial(partialValuesMap,value);}}}}/**
     * @param {?} map
     * @param {?} name
     * @param {?} selectable
     * @return {?}
     */},{key:'_addTerminal',value:function _addTerminal(map,name,selectable){var/** @type {?} */terminalList=map.get(name);if(!terminalList){terminalList=[];map.set(name,terminalList);}terminalList.push(selectable);}/**
     * @param {?} map
     * @param {?} name
     * @return {?}
     */},{key:'_addPartial',value:function _addPartial(map,name){var/** @type {?} */matcher=map.get(name);if(!matcher){matcher=new SelectorMatcher();map.set(name,matcher);}return matcher;}/**
     * Find the objects that have been added via `addSelectable`
     * whose css selector is contained in the given css selector.
     * @param {?} cssSelector A css selector
     * @param {?} matchedCallback This callback will be called with the object handed into `addSelectable`
     * @return {?} boolean true if a match was found
     */},{key:'match',value:function match(cssSelector,matchedCallback){var/** @type {?} */result=false;var/** @type {?} */element=cssSelector.element;var/** @type {?} */classNames=cssSelector.classNames;var/** @type {?} */attrs=cssSelector.attrs;for(var/** @type {?} */i=0;i<this._listContexts.length;i++){this._listContexts[i].alreadyMatched=false;}result=this._matchTerminal(this._elementMap,element,cssSelector,matchedCallback)||result;result=this._matchPartial(this._elementPartialMap,element,cssSelector,matchedCallback)||result;if(classNames){for(var/** @type {?} */_i2=0;_i2<classNames.length;_i2++){var/** @type {?} */className=classNames[_i2];result=this._matchTerminal(this._classMap,className,cssSelector,matchedCallback)||result;result=this._matchPartial(this._classPartialMap,className,cssSelector,matchedCallback)||result;}}if(attrs){for(var/** @type {?} */_i3=0;_i3<attrs.length;_i3+=2){var/** @type {?} */name=attrs[_i3];var/** @type {?} */value=attrs[_i3+1];var/** @type {?} */terminalValuesMap=this._attrValueMap.get(name);if(value){result=this._matchTerminal(terminalValuesMap,'',cssSelector,matchedCallback)||result;}result=this._matchTerminal(terminalValuesMap,value,cssSelector,matchedCallback)||result;var/** @type {?} */partialValuesMap=this._attrValuePartialMap.get(name);if(value){result=this._matchPartial(partialValuesMap,'',cssSelector,matchedCallback)||result;}result=this._matchPartial(partialValuesMap,value,cssSelector,matchedCallback)||result;}}return result;}/**
     * \@internal
     * @param {?} map
     * @param {?} name
     * @param {?} cssSelector
     * @param {?} matchedCallback
     * @return {?}
     */},{key:'_matchTerminal',value:function _matchTerminal(map,name,cssSelector,matchedCallback){if(!map||typeof name!=='string'){return false;}var/** @type {?} */selectables=map.get(name)||[];var/** @type {?} */starSelectables=map.get('*');if(starSelectables){selectables=selectables.concat(starSelectables);}if(selectables.length===0){return false;}var/** @type {?} */selectable=void 0;var/** @type {?} */result=false;for(var/** @type {?} */i=0;i<selectables.length;i++){selectable=selectables[i];result=selectable.finalize(cssSelector,matchedCallback)||result;}return result;}/**
     * \@internal
     * @param {?} map
     * @param {?} name
     * @param {?} cssSelector
     * @param {?} matchedCallback
     * @return {?}
     */},{key:'_matchPartial',value:function _matchPartial(map,name,cssSelector,matchedCallback){if(!map||typeof name!=='string'){return false;}var/** @type {?} */nestedSelector=map.get(name);if(!nestedSelector){return false;}// TODO(perf): get rid of recursion and measure again
// TODO(perf): don't pass the whole selector into the recursion,
// but only the not processed parts
return nestedSelector.match(cssSelector,matchedCallback);}}],[{key:'createNotMatcher',value:function createNotMatcher(notSelectors){var/** @type {?} */notMatcher=new SelectorMatcher();notMatcher.addSelectables(notSelectors,null);return notMatcher;}}]);return SelectorMatcher;}();var SelectorListContext=/**
     * @param {?} selectors
     */function SelectorListContext(selectors){_classCallCheck(this,SelectorListContext);this.selectors=selectors;this.alreadyMatched=false;};var SelectorContext=function(){/**
     * @param {?} selector
     * @param {?} cbContext
     * @param {?} listContext
     */function SelectorContext(selector,cbContext,listContext){_classCallCheck(this,SelectorContext);this.selector=selector;this.cbContext=cbContext;this.listContext=listContext;this.notSelectors=selector.notSelectors;}/**
     * @param {?} cssSelector
     * @param {?} callback
     * @return {?}
     */_createClass(SelectorContext,[{key:'finalize',value:function finalize(cssSelector,callback){var/** @type {?} */result=true;if(this.notSelectors.length>0&&(!this.listContext||!this.listContext.alreadyMatched)){var/** @type {?} */notMatcher=SelectorMatcher.createNotMatcher(this.notSelectors);result=!notMatcher.match(cssSelector,null);}if(result&&callback&&(!this.listContext||!this.listContext.alreadyMatched)){if(this.listContext){this.listContext.alreadyMatched=true;}callback(this.selector,this.cbContext);}return result;}}]);return SelectorContext;}();var/** @type {?} */MODULE_SUFFIX='';var/** @type {?} */DASH_CASE_REGEXP=/-+([a-z0-9])/g;/**
 * @param {?} input
 * @return {?}
 */function dashCaseToCamelCase(input){return input.replace(DASH_CASE_REGEXP,function(){for(var _len=arguments.length,m=Array(_len),_key=0;_key<_len;_key++){m[_key]=arguments[_key];}return m[1].toUpperCase();});}/**
 * @param {?} input
 * @param {?} defaultValues
 * @return {?}
 */function splitAtColon(input,defaultValues){return _splitAt(input,':',defaultValues);}/**
 * @param {?} input
 * @param {?} defaultValues
 * @return {?}
 */function splitAtPeriod(input,defaultValues){return _splitAt(input,'.',defaultValues);}/**
 * @param {?} input
 * @param {?} character
 * @param {?} defaultValues
 * @return {?}
 */function _splitAt(input,character,defaultValues){var/** @type {?} */characterIndex=input.indexOf(character);if(characterIndex==-1)return defaultValues;return[input.slice(0,characterIndex).trim(),input.slice(characterIndex+1).trim()];}/**
 * @param {?} value
 * @param {?} visitor
 * @param {?} context
 * @return {?}
 */function visitValue(value,visitor,context){if(Array.isArray(value)){return visitor.visitArray(/** @type {?} */value,context);}if(isStrictStringMap(value)){return visitor.visitStringMap(/** @type {?} */value,context);}if(value==null||isPrimitive(value)){return visitor.visitPrimitive(value,context);}return visitor.visitOther(value,context);}var ValueTransformer=function(){function ValueTransformer(){_classCallCheck(this,ValueTransformer);}_createClass(ValueTransformer,[{key:'visitArray',/**
     * @param {?} arr
     * @param {?} context
     * @return {?}
     */value:function visitArray(arr,context){var _this2=this;return arr.map(function(value){return visitValue(value,_this2,context);});}/**
     * @param {?} map
     * @param {?} context
     * @return {?}
     */},{key:'visitStringMap',value:function visitStringMap(map,context){var _this3=this;var/** @type {?} */result={};Object.keys(map).forEach(function(key){result[key]=visitValue(map[key],_this3,context);});return result;}/**
     * @param {?} value
     * @param {?} context
     * @return {?}
     */},{key:'visitPrimitive',value:function visitPrimitive(value,context){return value;}/**
     * @param {?} value
     * @param {?} context
     * @return {?}
     */},{key:'visitOther',value:function visitOther(value,context){return value;}}]);return ValueTransformer;}();var SyncAsyncResult=/**
     * @param {?} syncResult
     * @param {?=} asyncResult
     */function SyncAsyncResult(syncResult){var asyncResult=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;_classCallCheck(this,SyncAsyncResult);this.syncResult=syncResult;this.asyncResult=asyncResult;if(!asyncResult){this.asyncResult=Promise.resolve(syncResult);}};/**
 * @param {?} msg
 * @return {?}
 */function syntaxError(msg){var/** @type {?} */error=Error(msg);error[ERROR_SYNTAX_ERROR]=true;return error;}var/** @type {?} */ERROR_SYNTAX_ERROR='ngSyntaxError';/**
 * @param {?} error
 * @return {?}
 */function isSyntaxError(error){return error[ERROR_SYNTAX_ERROR];}// group 0: "[prop] or (event) or @trigger"
// group 1: "prop" from "[prop]"
// group 2: "event" from "(event)"
// group 3: "@trigger" from "@trigger"
var/** @type {?} */HOST_REG_EXP=/^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\)))|(\@[-\w]+)$/;var CompileAnimationEntryMetadata=/**
     * @param {?=} name
     * @param {?=} definitions
     */function CompileAnimationEntryMetadata(){var name=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var definitions=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;_classCallCheck(this,CompileAnimationEntryMetadata);this.name=name;this.definitions=definitions;};/**
 * @abstract
 */var CompileAnimationStateMetadata=function CompileAnimationStateMetadata(){_classCallCheck(this,CompileAnimationStateMetadata);};var CompileAnimationStateDeclarationMetadata=function(_CompileAnimationStat){_inherits(CompileAnimationStateDeclarationMetadata,_CompileAnimationStat);/**
     * @param {?} stateNameExpr
     * @param {?} styles
     */function CompileAnimationStateDeclarationMetadata(stateNameExpr,styles){_classCallCheck(this,CompileAnimationStateDeclarationMetadata);var _this4=_possibleConstructorReturn(this,(CompileAnimationStateDeclarationMetadata.__proto__||Object.getPrototypeOf(CompileAnimationStateDeclarationMetadata)).call(this));_this4.stateNameExpr=stateNameExpr;_this4.styles=styles;return _this4;}return CompileAnimationStateDeclarationMetadata;}(CompileAnimationStateMetadata);var CompileAnimationStateTransitionMetadata=function(_CompileAnimationStat2){_inherits(CompileAnimationStateTransitionMetadata,_CompileAnimationStat2);/**
     * @param {?} stateChangeExpr
     * @param {?} steps
     */function CompileAnimationStateTransitionMetadata(stateChangeExpr,steps){_classCallCheck(this,CompileAnimationStateTransitionMetadata);var _this5=_possibleConstructorReturn(this,(CompileAnimationStateTransitionMetadata.__proto__||Object.getPrototypeOf(CompileAnimationStateTransitionMetadata)).call(this));_this5.stateChangeExpr=stateChangeExpr;_this5.steps=steps;return _this5;}return CompileAnimationStateTransitionMetadata;}(CompileAnimationStateMetadata);/**
 * @abstract
 */var CompileAnimationMetadata=function CompileAnimationMetadata(){_classCallCheck(this,CompileAnimationMetadata);};var CompileAnimationKeyframesSequenceMetadata=function(_CompileAnimationMeta){_inherits(CompileAnimationKeyframesSequenceMetadata,_CompileAnimationMeta);/**
     * @param {?=} steps
     */function CompileAnimationKeyframesSequenceMetadata(){var steps=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];_classCallCheck(this,CompileAnimationKeyframesSequenceMetadata);var _this6=_possibleConstructorReturn(this,(CompileAnimationKeyframesSequenceMetadata.__proto__||Object.getPrototypeOf(CompileAnimationKeyframesSequenceMetadata)).call(this));_this6.steps=steps;return _this6;}return CompileAnimationKeyframesSequenceMetadata;}(CompileAnimationMetadata);var CompileAnimationStyleMetadata=function(_CompileAnimationMeta2){_inherits(CompileAnimationStyleMetadata,_CompileAnimationMeta2);/**
     * @param {?} offset
     * @param {?=} styles
     */function CompileAnimationStyleMetadata(offset){var styles=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;_classCallCheck(this,CompileAnimationStyleMetadata);var _this7=_possibleConstructorReturn(this,(CompileAnimationStyleMetadata.__proto__||Object.getPrototypeOf(CompileAnimationStyleMetadata)).call(this));_this7.offset=offset;_this7.styles=styles;return _this7;}return CompileAnimationStyleMetadata;}(CompileAnimationMetadata);var CompileAnimationAnimateMetadata=function(_CompileAnimationMeta3){_inherits(CompileAnimationAnimateMetadata,_CompileAnimationMeta3);/**
     * @param {?=} timings
     * @param {?=} styles
     */function CompileAnimationAnimateMetadata(){var timings=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;var styles=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;_classCallCheck(this,CompileAnimationAnimateMetadata);var _this8=_possibleConstructorReturn(this,(CompileAnimationAnimateMetadata.__proto__||Object.getPrototypeOf(CompileAnimationAnimateMetadata)).call(this));_this8.timings=timings;_this8.styles=styles;return _this8;}return CompileAnimationAnimateMetadata;}(CompileAnimationMetadata);/**
 * @abstract
 */var CompileAnimationWithStepsMetadata=function(_CompileAnimationMeta4){_inherits(CompileAnimationWithStepsMetadata,_CompileAnimationMeta4);/**
     * @param {?=} steps
     */function CompileAnimationWithStepsMetadata(){var steps=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;_classCallCheck(this,CompileAnimationWithStepsMetadata);var _this9=_possibleConstructorReturn(this,(CompileAnimationWithStepsMetadata.__proto__||Object.getPrototypeOf(CompileAnimationWithStepsMetadata)).call(this));_this9.steps=steps;return _this9;}return CompileAnimationWithStepsMetadata;}(CompileAnimationMetadata);var CompileAnimationSequenceMetadata=function(_CompileAnimationWith){_inherits(CompileAnimationSequenceMetadata,_CompileAnimationWith);/**
     * @param {?=} steps
     */function CompileAnimationSequenceMetadata(){var steps=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;_classCallCheck(this,CompileAnimationSequenceMetadata);return _possibleConstructorReturn(this,(CompileAnimationSequenceMetadata.__proto__||Object.getPrototypeOf(CompileAnimationSequenceMetadata)).call(this,steps));}return CompileAnimationSequenceMetadata;}(CompileAnimationWithStepsMetadata);var CompileAnimationGroupMetadata=function(_CompileAnimationWith2){_inherits(CompileAnimationGroupMetadata,_CompileAnimationWith2);/**
     * @param {?=} steps
     */function CompileAnimationGroupMetadata(){var steps=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;_classCallCheck(this,CompileAnimationGroupMetadata);return _possibleConstructorReturn(this,(CompileAnimationGroupMetadata.__proto__||Object.getPrototypeOf(CompileAnimationGroupMetadata)).call(this,steps));}return CompileAnimationGroupMetadata;}(CompileAnimationWithStepsMetadata);/**
 * @param {?} name
 * @return {?}
 */function _sanitizeIdentifier(name){return name.replace(/\W/g,'_');}var/** @type {?} */_anonymousTypeIndex=0;/**
 * @param {?} compileIdentifier
 * @return {?}
 */function identifierName(compileIdentifier){if(!compileIdentifier||!compileIdentifier.reference){return null;}var/** @type {?} */ref=compileIdentifier.reference;if(ref instanceof StaticSymbol){return ref.name;}if(ref['__anonymousType']){return ref['__anonymousType'];}var/** @type {?} */identifier=stringify(ref);if(identifier.indexOf('(')>=0){// case: anonymous functions!
identifier='anonymous_'+_anonymousTypeIndex++;ref['__anonymousType']=identifier;}else{identifier=_sanitizeIdentifier(identifier);}return identifier;}/**
 * @param {?} compileIdentifier
 * @return {?}
 */function identifierModuleUrl(compileIdentifier){var/** @type {?} */ref=compileIdentifier.reference;if(ref instanceof StaticSymbol){return ref.filePath;}return __WEBPACK_IMPORTED_MODULE_0__angular_core__["_13" /* ɵreflector */].importUri(ref);}/**
 * @param {?} compType
 * @param {?} embeddedTemplateIndex
 * @return {?}
 */function viewClassName(compType,embeddedTemplateIndex){return'View_'+identifierName({reference:compType})+'_'+embeddedTemplateIndex;}/**
 * @param {?} compType
 * @return {?}
 */function rendererTypeName(compType){return'RenderType_'+identifierName({reference:compType});}/**
 * @param {?} compType
 * @return {?}
 */function hostViewClassName(compType){return'HostView_'+identifierName({reference:compType});}/**
 * @param {?} dirType
 * @return {?}
 */function dirWrapperClassName(dirType){return'Wrapper_'+identifierName({reference:dirType});}/**
 * @param {?} compType
 * @return {?}
 */function componentFactoryName(compType){return identifierName({reference:compType})+'NgFactory';}var CompileSummaryKind={};CompileSummaryKind.Pipe=0;CompileSummaryKind.Directive=1;CompileSummaryKind.NgModule=2;CompileSummaryKind.Injectable=3;CompileSummaryKind[CompileSummaryKind.Pipe]="Pipe";CompileSummaryKind[CompileSummaryKind.Directive]="Directive";CompileSummaryKind[CompileSummaryKind.NgModule]="NgModule";CompileSummaryKind[CompileSummaryKind.Injectable]="Injectable";/**
 * @param {?} token
 * @return {?}
 */function tokenName(token){return isPresent(token.value)?_sanitizeIdentifier(token.value):identifierName(token.identifier);}/**
 * @param {?} token
 * @return {?}
 */function tokenReference(token){if(isPresent(token.identifier)){return token.identifier.reference;}else{return token.value;}}/**
 * Metadata about a stylesheet
 */var CompileStylesheetMetadata=/**
     * @param {?=} __0
     */function CompileStylesheetMetadata(){var _ref2=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},moduleUrl=_ref2.moduleUrl,styles=_ref2.styles,styleUrls=_ref2.styleUrls;_classCallCheck(this,CompileStylesheetMetadata);this.moduleUrl=moduleUrl;this.styles=_normalizeArray(styles);this.styleUrls=_normalizeArray(styleUrls);};/**
 * Metadata regarding compilation of a template.
 */var CompileTemplateMetadata=function(){/**
     * @param {?=} __0
     */function CompileTemplateMetadata(){var _ref3=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},encapsulation=_ref3.encapsulation,template=_ref3.template,templateUrl=_ref3.templateUrl,styles=_ref3.styles,styleUrls=_ref3.styleUrls,externalStylesheets=_ref3.externalStylesheets,animations=_ref3.animations,ngContentSelectors=_ref3.ngContentSelectors,interpolation=_ref3.interpolation;_classCallCheck(this,CompileTemplateMetadata);this.encapsulation=encapsulation;this.template=template;this.templateUrl=templateUrl;this.styles=_normalizeArray(styles);this.styleUrls=_normalizeArray(styleUrls);this.externalStylesheets=_normalizeArray(externalStylesheets);this.animations=animations?ListWrapper.flatten(animations):[];this.ngContentSelectors=ngContentSelectors||[];if(interpolation&&interpolation.length!=2){throw new Error('\'interpolation\' should have a start and an end symbol.');}this.interpolation=interpolation;}/**
     * @return {?}
     */_createClass(CompileTemplateMetadata,[{key:'toSummary',value:function toSummary(){return{animations:this.animations.map(function(anim){return anim.name;}),ngContentSelectors:this.ngContentSelectors,encapsulation:this.encapsulation};}}]);return CompileTemplateMetadata;}();/**
 * Metadata regarding compilation of a directive.
 */var CompileDirectiveMetadata=function(){_createClass(CompileDirectiveMetadata,null,[{key:'create',/**
     * @param {?=} __0
     * @return {?}
     */value:function create(){var _ref4=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},isHost=_ref4.isHost,type=_ref4.type,isComponent=_ref4.isComponent,selector=_ref4.selector,exportAs=_ref4.exportAs,changeDetection=_ref4.changeDetection,inputs=_ref4.inputs,outputs=_ref4.outputs,host=_ref4.host,providers=_ref4.providers,viewProviders=_ref4.viewProviders,queries=_ref4.queries,viewQueries=_ref4.viewQueries,entryComponents=_ref4.entryComponents,template=_ref4.template,wrapperType=_ref4.wrapperType,componentViewType=_ref4.componentViewType,rendererType=_ref4.rendererType,componentFactory=_ref4.componentFactory;var/** @type {?} */hostListeners={};var/** @type {?} */hostProperties={};var/** @type {?} */hostAttributes={};if(isPresent(host)){Object.keys(host).forEach(function(key){var/** @type {?} */value=host[key];var/** @type {?} */matches=key.match(HOST_REG_EXP);if(matches===null){hostAttributes[key]=value;}else if(isPresent(matches[1])){hostProperties[matches[1]]=value;}else if(isPresent(matches[2])){hostListeners[matches[2]]=value;}});}var/** @type {?} */inputsMap={};if(isPresent(inputs)){inputs.forEach(function(bindConfig){// canonical syntax: `dirProp: elProp`
// if there is no `:`, use dirProp = elProp
var/** @type {?} */parts=splitAtColon(bindConfig,[bindConfig,bindConfig]);inputsMap[parts[0]]=parts[1];});}var/** @type {?} */outputsMap={};if(isPresent(outputs)){outputs.forEach(function(bindConfig){// canonical syntax: `dirProp: elProp`
// if there is no `:`, use dirProp = elProp
var/** @type {?} */parts=splitAtColon(bindConfig,[bindConfig,bindConfig]);outputsMap[parts[0]]=parts[1];});}return new CompileDirectiveMetadata({isHost:isHost,type:type,isComponent:!!isComponent,selector:selector,exportAs:exportAs,changeDetection:changeDetection,inputs:inputsMap,outputs:outputsMap,hostListeners:hostListeners,hostProperties:hostProperties,hostAttributes:hostAttributes,providers:providers,viewProviders:viewProviders,queries:queries,viewQueries:viewQueries,entryComponents:entryComponents,template:template,wrapperType:wrapperType,componentViewType:componentViewType,rendererType:rendererType,componentFactory:componentFactory});}/**
     * @param {?=} __0
     */}]);function CompileDirectiveMetadata(){var _ref5=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},isHost=_ref5.isHost,type=_ref5.type,isComponent=_ref5.isComponent,selector=_ref5.selector,exportAs=_ref5.exportAs,changeDetection=_ref5.changeDetection,inputs=_ref5.inputs,outputs=_ref5.outputs,hostListeners=_ref5.hostListeners,hostProperties=_ref5.hostProperties,hostAttributes=_ref5.hostAttributes,providers=_ref5.providers,viewProviders=_ref5.viewProviders,queries=_ref5.queries,viewQueries=_ref5.viewQueries,entryComponents=_ref5.entryComponents,template=_ref5.template,wrapperType=_ref5.wrapperType,componentViewType=_ref5.componentViewType,rendererType=_ref5.rendererType,componentFactory=_ref5.componentFactory;_classCallCheck(this,CompileDirectiveMetadata);this.isHost=!!isHost;this.type=type;this.isComponent=isComponent;this.selector=selector;this.exportAs=exportAs;this.changeDetection=changeDetection;this.inputs=inputs;this.outputs=outputs;this.hostListeners=hostListeners;this.hostProperties=hostProperties;this.hostAttributes=hostAttributes;this.providers=_normalizeArray(providers);this.viewProviders=_normalizeArray(viewProviders);this.queries=_normalizeArray(queries);this.viewQueries=_normalizeArray(viewQueries);this.entryComponents=_normalizeArray(entryComponents);this.template=template;this.wrapperType=wrapperType;this.componentViewType=componentViewType;this.rendererType=rendererType;this.componentFactory=componentFactory;}/**
     * @return {?}
     */_createClass(CompileDirectiveMetadata,[{key:'toSummary',value:function toSummary(){return{summaryKind:CompileSummaryKind.Directive,type:this.type,isComponent:this.isComponent,selector:this.selector,exportAs:this.exportAs,inputs:this.inputs,outputs:this.outputs,hostListeners:this.hostListeners,hostProperties:this.hostProperties,hostAttributes:this.hostAttributes,providers:this.providers,viewProviders:this.viewProviders,queries:this.queries,viewQueries:this.viewQueries,entryComponents:this.entryComponents,changeDetection:this.changeDetection,template:this.template&&this.template.toSummary(),wrapperType:this.wrapperType,componentViewType:this.componentViewType,rendererType:this.rendererType,componentFactory:this.componentFactory};}}]);return CompileDirectiveMetadata;}();/**
 * Construct {\@link CompileDirectiveMetadata} from {\@link ComponentTypeMetadata} and a selector.
 * @param {?} hostTypeReference
 * @param {?} compMeta
 * @param {?} hostViewType
 * @return {?}
 */function createHostComponentMeta(hostTypeReference,compMeta,hostViewType){var/** @type {?} */template=CssSelector.parse(compMeta.selector)[0].getMatchingElementTemplate();return CompileDirectiveMetadata.create({isHost:true,type:{reference:hostTypeReference,diDeps:[],lifecycleHooks:[]},template:new CompileTemplateMetadata({encapsulation:__WEBPACK_IMPORTED_MODULE_0__angular_core__["Q" /* ViewEncapsulation */].None,template:template,templateUrl:'',styles:[],styleUrls:[],ngContentSelectors:[],animations:[]}),changeDetection:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_14" /* ChangeDetectionStrategy */].Default,inputs:[],outputs:[],host:{},isComponent:true,selector:'*',providers:[],viewProviders:[],queries:[],viewQueries:[],componentViewType:hostViewType,rendererType:{id:'__Host__',encapsulation:__WEBPACK_IMPORTED_MODULE_0__angular_core__["Q" /* ViewEncapsulation */].None,styles:[],data:{}}});}var CompilePipeMetadata=function(){/**
     * @param {?=} __0
     */function CompilePipeMetadata(){var _ref6=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},type=_ref6.type,name=_ref6.name,pure=_ref6.pure;_classCallCheck(this,CompilePipeMetadata);this.type=type;this.name=name;this.pure=!!pure;}/**
     * @return {?}
     */_createClass(CompilePipeMetadata,[{key:'toSummary',value:function toSummary(){return{summaryKind:CompileSummaryKind.Pipe,type:this.type,name:this.name,pure:this.pure};}}]);return CompilePipeMetadata;}();/**
 * Metadata regarding compilation of a module.
 */var CompileNgModuleMetadata=function(){/**
     * @param {?=} __0
     */function CompileNgModuleMetadata(){var _ref7=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},type=_ref7.type,providers=_ref7.providers,declaredDirectives=_ref7.declaredDirectives,exportedDirectives=_ref7.exportedDirectives,declaredPipes=_ref7.declaredPipes,exportedPipes=_ref7.exportedPipes,entryComponents=_ref7.entryComponents,bootstrapComponents=_ref7.bootstrapComponents,importedModules=_ref7.importedModules,exportedModules=_ref7.exportedModules,schemas=_ref7.schemas,transitiveModule=_ref7.transitiveModule,id=_ref7.id;_classCallCheck(this,CompileNgModuleMetadata);this.type=type;this.declaredDirectives=_normalizeArray(declaredDirectives);this.exportedDirectives=_normalizeArray(exportedDirectives);this.declaredPipes=_normalizeArray(declaredPipes);this.exportedPipes=_normalizeArray(exportedPipes);this.providers=_normalizeArray(providers);this.entryComponents=_normalizeArray(entryComponents);this.bootstrapComponents=_normalizeArray(bootstrapComponents);this.importedModules=_normalizeArray(importedModules);this.exportedModules=_normalizeArray(exportedModules);this.schemas=_normalizeArray(schemas);this.id=id;this.transitiveModule=transitiveModule;}/**
     * @return {?}
     */_createClass(CompileNgModuleMetadata,[{key:'toSummary',value:function toSummary(){return{summaryKind:CompileSummaryKind.NgModule,type:this.type,entryComponents:this.transitiveModule.entryComponents,providers:this.transitiveModule.providers,modules:this.transitiveModule.modules,exportedDirectives:this.transitiveModule.exportedDirectives,exportedPipes:this.transitiveModule.exportedPipes};}}]);return CompileNgModuleMetadata;}();var TransitiveCompileNgModuleMetadata=function(){function TransitiveCompileNgModuleMetadata(){_classCallCheck(this,TransitiveCompileNgModuleMetadata);this.directivesSet=new Set();this.directives=[];this.exportedDirectivesSet=new Set();this.exportedDirectives=[];this.pipesSet=new Set();this.pipes=[];this.exportedPipesSet=new Set();this.exportedPipes=[];this.modulesSet=new Set();this.modules=[];this.entryComponentsSet=new Set();this.entryComponents=[];this.providers=[];}/**
     * @param {?} provider
     * @param {?} module
     * @return {?}
     */_createClass(TransitiveCompileNgModuleMetadata,[{key:'addProvider',value:function addProvider(provider,module){this.providers.push({provider:provider,module:module});}/**
     * @param {?} id
     * @return {?}
     */},{key:'addDirective',value:function addDirective(id){if(!this.directivesSet.has(id.reference)){this.directivesSet.add(id.reference);this.directives.push(id);}}/**
     * @param {?} id
     * @return {?}
     */},{key:'addExportedDirective',value:function addExportedDirective(id){if(!this.exportedDirectivesSet.has(id.reference)){this.exportedDirectivesSet.add(id.reference);this.exportedDirectives.push(id);}}/**
     * @param {?} id
     * @return {?}
     */},{key:'addPipe',value:function addPipe(id){if(!this.pipesSet.has(id.reference)){this.pipesSet.add(id.reference);this.pipes.push(id);}}/**
     * @param {?} id
     * @return {?}
     */},{key:'addExportedPipe',value:function addExportedPipe(id){if(!this.exportedPipesSet.has(id.reference)){this.exportedPipesSet.add(id.reference);this.exportedPipes.push(id);}}/**
     * @param {?} id
     * @return {?}
     */},{key:'addModule',value:function addModule(id){if(!this.modulesSet.has(id.reference)){this.modulesSet.add(id.reference);this.modules.push(id);}}/**
     * @param {?} ec
     * @return {?}
     */},{key:'addEntryComponent',value:function addEntryComponent(ec){if(!this.entryComponentsSet.has(ec.componentType)){this.entryComponentsSet.add(ec.componentType);this.entryComponents.push(ec);}}}]);return TransitiveCompileNgModuleMetadata;}();/**
 * @param {?} obj
 * @return {?}
 */function _normalizeArray(obj){return obj||[];}var ProviderMeta=/**
     * @param {?} token
     * @param {?} __1
     */function ProviderMeta(token,_ref8){var useClass=_ref8.useClass,useValue=_ref8.useValue,useExisting=_ref8.useExisting,useFactory=_ref8.useFactory,deps=_ref8.deps,multi=_ref8.multi;_classCallCheck(this,ProviderMeta);this.token=token;this.useClass=useClass;this.useValue=useValue;this.useExisting=useExisting;this.useFactory=useFactory;this.dependencies=deps;this.multi=!!multi;};var/** @type {?} */CORE=assetUrl('core');var/** @type {?} */VIEW_UTILS_MODULE_URL=assetUrl('core','linker/view_utils');var Identifiers=function Identifiers(){_classCallCheck(this,Identifiers);};Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS={name:'ANALYZE_FOR_ENTRY_COMPONENTS',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["J" /* ANALYZE_FOR_ENTRY_COMPONENTS */]};Identifiers.ViewUtils={name:'ɵViewUtils',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_15" /* ɵViewUtils */]};Identifiers.AppView={name:'ɵAppView',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_16" /* ɵAppView */]};Identifiers.DebugAppView={name:'ɵDebugAppView',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_17" /* ɵDebugAppView */]};Identifiers.ViewContainer={name:'ɵViewContainer',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_18" /* ɵViewContainer */]};Identifiers.ElementRef={name:'ElementRef',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["t" /* ElementRef */]};Identifiers.ViewContainerRef={name:'ViewContainerRef',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["z" /* ViewContainerRef */]};Identifiers.ChangeDetectorRef={name:'ChangeDetectorRef',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["x" /* ChangeDetectorRef */]};Identifiers.RenderComponentType={name:'RenderComponentType',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_19" /* RenderComponentType */]};Identifiers.QueryList={name:'QueryList',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_20" /* QueryList */]};Identifiers.TemplateRef={name:'TemplateRef',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_6" /* TemplateRef */]};Identifiers.TemplateRef_={name:'ɵTemplateRef_',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_21" /* ɵTemplateRef_ */]};Identifiers.CodegenComponentFactoryResolver={name:'ɵCodegenComponentFactoryResolver',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_22" /* ɵCodegenComponentFactoryResolver */]};Identifiers.ComponentFactoryResolver={name:'ComponentFactoryResolver',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["e" /* ComponentFactoryResolver */]};Identifiers.ComponentFactory={name:'ComponentFactory',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_23" /* ComponentFactory */]};Identifiers.ComponentRef_={name:'ɵComponentRef_',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_24" /* ɵComponentRef_ */]};Identifiers.ComponentRef={name:'ComponentRef',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_25" /* ComponentRef */]};Identifiers.NgModuleFactory={name:'NgModuleFactory',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_26" /* NgModuleFactory */]};Identifiers.NgModuleInjector={name:'ɵNgModuleInjector',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_27" /* ɵNgModuleInjector */]};Identifiers.RegisterModuleFactoryFn={name:'ɵregisterModuleFactory',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_28" /* ɵregisterModuleFactory */]};Identifiers.ValueUnwrapper={name:'ɵValueUnwrapper',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_29" /* ɵValueUnwrapper */]};Identifiers.Injector={name:'Injector',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["j" /* Injector */]};Identifiers.ViewEncapsulation={name:'ViewEncapsulation',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["Q" /* ViewEncapsulation */]};Identifiers.ViewType={name:'ɵViewType',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_30" /* ɵViewType */]};Identifiers.ChangeDetectionStrategy={name:'ChangeDetectionStrategy',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_14" /* ChangeDetectionStrategy */]};Identifiers.StaticNodeDebugInfo={name:'ɵStaticNodeDebugInfo',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_31" /* ɵStaticNodeDebugInfo */]};Identifiers.DebugContext={name:'ɵDebugContext',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_32" /* ɵDebugContext */]};Identifiers.Renderer={name:'Renderer',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["s" /* Renderer */]};Identifiers.SimpleChange={name:'SimpleChange',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["d" /* SimpleChange */]};Identifiers.ChangeDetectorStatus={name:'ɵChangeDetectorStatus',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_33" /* ɵChangeDetectorStatus */]};Identifiers.checkBinding={name:'ɵcheckBinding',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_34" /* ɵcheckBinding */]};Identifiers.checkBindingChange={name:'ɵcheckBindingChange',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_35" /* ɵcheckBindingChange */]};Identifiers.checkRenderText={name:'ɵcheckRenderText',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_36" /* ɵcheckRenderText */]};Identifiers.checkRenderProperty={name:'ɵcheckRenderProperty',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_37" /* ɵcheckRenderProperty */]};Identifiers.checkRenderAttribute={name:'ɵcheckRenderAttribute',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_38" /* ɵcheckRenderAttribute */]};Identifiers.checkRenderClass={name:'ɵcheckRenderClass',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_39" /* ɵcheckRenderClass */]};Identifiers.checkRenderStyle={name:'ɵcheckRenderStyle',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_40" /* ɵcheckRenderStyle */]};Identifiers.devModeEqual={name:'ɵdevModeEqual',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_41" /* ɵdevModeEqual */]};Identifiers.inlineInterpolate={name:'ɵinlineInterpolate',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_42" /* ɵinlineInterpolate */]};Identifiers.interpolate={name:'ɵinterpolate',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_43" /* ɵinterpolate */]};Identifiers.castByValue={name:'ɵcastByValue',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_44" /* ɵcastByValue */]};Identifiers.EMPTY_ARRAY={name:'ɵEMPTY_ARRAY',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_45" /* ɵEMPTY_ARRAY */]};Identifiers.EMPTY_MAP={name:'ɵEMPTY_MAP',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_46" /* ɵEMPTY_MAP */]};Identifiers.createRenderElement={name:'ɵcreateRenderElement',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_47" /* ɵcreateRenderElement */]};Identifiers.selectOrCreateRenderHostElement={name:'ɵselectOrCreateRenderHostElement',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_48" /* ɵselectOrCreateRenderHostElement */]};Identifiers.pureProxies=[null,{name:'ɵpureProxy1',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_49" /* ɵpureProxy1 */]},{name:'ɵpureProxy2',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_50" /* ɵpureProxy2 */]},{name:'ɵpureProxy3',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_51" /* ɵpureProxy3 */]},{name:'ɵpureProxy4',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_52" /* ɵpureProxy4 */]},{name:'ɵpureProxy5',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_53" /* ɵpureProxy5 */]},{name:'ɵpureProxy6',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_54" /* ɵpureProxy6 */]},{name:'ɵpureProxy7',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_55" /* ɵpureProxy7 */]},{name:'ɵpureProxy8',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_56" /* ɵpureProxy8 */]},{name:'ɵpureProxy9',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_57" /* ɵpureProxy9 */]},{name:'ɵpureProxy10',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_58" /* ɵpureProxy10 */]}];Identifiers.SecurityContext={name:'SecurityContext',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["U" /* SecurityContext */]};Identifiers.AnimationKeyframe={name:'ɵAnimationKeyframe',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_59" /* ɵAnimationKeyframe */]};Identifiers.AnimationStyles={name:'ɵAnimationStyles',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_60" /* ɵAnimationStyles */]};Identifiers.NoOpAnimationPlayer={name:'ɵNoOpAnimationPlayer',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["L" /* ɵNoOpAnimationPlayer */]};Identifiers.AnimationGroupPlayer={name:'ɵAnimationGroupPlayer',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_61" /* ɵAnimationGroupPlayer */]};Identifiers.AnimationSequencePlayer={name:'ɵAnimationSequencePlayer',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_62" /* ɵAnimationSequencePlayer */]};Identifiers.prepareFinalAnimationStyles={name:'ɵprepareFinalAnimationStyles',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_63" /* ɵprepareFinalAnimationStyles */]};Identifiers.balanceAnimationKeyframes={name:'ɵbalanceAnimationKeyframes',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_64" /* ɵbalanceAnimationKeyframes */]};Identifiers.clearStyles={name:'ɵclearStyles',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_65" /* ɵclearStyles */]};Identifiers.renderStyles={name:'ɵrenderStyles',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_66" /* ɵrenderStyles */]};Identifiers.collectAndResolveStyles={name:'ɵcollectAndResolveStyles',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_67" /* ɵcollectAndResolveStyles */]};Identifiers.LOCALE_ID={name:'LOCALE_ID',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_3" /* LOCALE_ID */]};Identifiers.TRANSLATIONS_FORMAT={name:'TRANSLATIONS_FORMAT',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_68" /* TRANSLATIONS_FORMAT */]};Identifiers.setBindingDebugInfo={name:'ɵsetBindingDebugInfo',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_69" /* ɵsetBindingDebugInfo */]};Identifiers.setBindingDebugInfoForChanges={name:'ɵsetBindingDebugInfoForChanges',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_70" /* ɵsetBindingDebugInfoForChanges */]};Identifiers.AnimationTransition={name:'ɵAnimationTransition',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_71" /* ɵAnimationTransition */]};// This is just the interface!
Identifiers.InlineArray={name:'InlineArray',moduleUrl:VIEW_UTILS_MODULE_URL,runtime:null};Identifiers.inlineArrays=[{name:'ɵInlineArray2',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_72" /* ɵInlineArray2 */]},{name:'ɵInlineArray2',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_72" /* ɵInlineArray2 */]},{name:'ɵInlineArray4',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_73" /* ɵInlineArray4 */]},{name:'ɵInlineArray8',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_74" /* ɵInlineArray8 */]},{name:'ɵInlineArray16',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_75" /* ɵInlineArray16 */]}];Identifiers.EMPTY_INLINE_ARRAY={name:'ɵEMPTY_INLINE_ARRAY',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_76" /* ɵEMPTY_INLINE_ARRAY */]};Identifiers.InlineArrayDynamic={name:'ɵInlineArrayDynamic',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_77" /* ɵInlineArrayDynamic */]};Identifiers.subscribeToRenderElement={name:'ɵsubscribeToRenderElement',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_78" /* ɵsubscribeToRenderElement */]};Identifiers.createRenderComponentType={name:'ɵcreateRenderComponentType',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_79" /* ɵcreateRenderComponentType */]};Identifiers.noop={name:'ɵnoop',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_80" /* ɵnoop */]};Identifiers.viewDef={name:'ɵviewDef',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_81" /* ɵviewDef */]};Identifiers.elementDef={name:'ɵelementDef',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_82" /* ɵelementDef */]};Identifiers.anchorDef={name:'ɵanchorDef',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_83" /* ɵanchorDef */]};Identifiers.textDef={name:'ɵtextDef',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_84" /* ɵtextDef */]};Identifiers.directiveDef={name:'ɵdirectiveDef',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_85" /* ɵdirectiveDef */]};Identifiers.providerDef={name:'ɵproviderDef',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_86" /* ɵproviderDef */]};Identifiers.queryDef={name:'ɵqueryDef',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_87" /* ɵqueryDef */]};Identifiers.pureArrayDef={name:'ɵpureArrayDef',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_88" /* ɵpureArrayDef */]};Identifiers.pureObjectDef={name:'ɵpureObjectDef',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_89" /* ɵpureObjectDef */]};Identifiers.purePipeDef={name:'ɵpurePipeDef',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_90" /* ɵpurePipeDef */]};Identifiers.pipeDef={name:'ɵpipeDef',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_91" /* ɵpipeDef */]};Identifiers.nodeValue={name:'ɵnodeValue',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_92" /* ɵnodeValue */]};Identifiers.ngContentDef={name:'ɵngContentDef',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_93" /* ɵngContentDef */]};Identifiers.unwrapValue={name:'ɵunwrapValue',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_94" /* ɵunwrapValue */]};Identifiers.createRendererTypeV2={name:'ɵcreateRendererTypeV2',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_95" /* ɵcreateRendererTypeV2 */]};Identifiers.RendererTypeV2={name:'RendererTypeV2',moduleUrl:CORE,// type only
runtime:null};Identifiers.ViewDefinition={name:'ɵViewDefinition',moduleUrl:CORE,// type only
runtime:null};Identifiers.createComponentFactory={name:'ɵcreateComponentFactory',moduleUrl:CORE,runtime:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_96" /* ɵcreateComponentFactory */]};/**
 * @param {?} pkg
 * @param {?=} path
 * @param {?=} type
 * @return {?}
 */function assetUrl(pkg){var path=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var type=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'src';if(path==null){return'@angular/'+pkg;}else{return'@angular/'+pkg+'/'+type+'/'+path;}}/**
 * @param {?} identifier
 * @return {?}
 */function resolveIdentifier(identifier){var/** @type {?} */name=identifier.name;return __WEBPACK_IMPORTED_MODULE_0__angular_core__["_13" /* ɵreflector */].resolveIdentifier(name,identifier.moduleUrl,null,identifier.runtime);}/**
 * @param {?} identifier
 * @return {?}
 */function createIdentifier(identifier){return{reference:resolveIdentifier(identifier)};}/**
 * @param {?} identifier
 * @return {?}
 */function identifierToken(identifier){return{identifier:identifier};}/**
 * @param {?} identifier
 * @return {?}
 */function createIdentifierToken(identifier){return identifierToken(createIdentifier(identifier));}/**
 * @param {?} enumType
 * @param {?} name
 * @return {?}
 */function createEnumIdentifier(enumType,name){var/** @type {?} */resolvedEnum=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_13" /* ɵreflector */].resolveEnum(resolveIdentifier(enumType),name);return{reference:resolvedEnum};}/**
 * Temporal switch for the compiler to use the new view engine,
 * until it is fully integrated.
 *
 * Only works in Jit for now.
 */var/** @type {?} */USE_VIEW_ENGINE=new __WEBPACK_IMPORTED_MODULE_0__angular_core__["n" /* InjectionToken */]('UseViewEngine');var CompilerConfig=function(){/**
     * @param {?=} __0
     */function CompilerConfig(){var _ref9=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},_ref9$renderTypes=_ref9.renderTypes,renderTypes=_ref9$renderTypes===undefined?new DefaultRenderTypes():_ref9$renderTypes,_ref9$defaultEncapsul=_ref9.defaultEncapsulation,defaultEncapsulation=_ref9$defaultEncapsul===undefined?__WEBPACK_IMPORTED_MODULE_0__angular_core__["Q" /* ViewEncapsulation */].Emulated:_ref9$defaultEncapsul,genDebugInfo=_ref9.genDebugInfo,logBindingUpdate=_ref9.logBindingUpdate,_ref9$useJit=_ref9.useJit,useJit=_ref9$useJit===undefined?true:_ref9$useJit,missingTranslation=_ref9.missingTranslation,useViewEngine=_ref9.useViewEngine,enableLegacyTemplate=_ref9.enableLegacyTemplate;_classCallCheck(this,CompilerConfig);this.renderTypes=renderTypes;this.defaultEncapsulation=defaultEncapsulation;this._genDebugInfo=genDebugInfo;this._logBindingUpdate=logBindingUpdate;this.useJit=useJit;this.missingTranslation=missingTranslation;this.useViewEngine=true;this.enableLegacyTemplate=enableLegacyTemplate!==false;}/**
     * @return {?}
     */_createClass(CompilerConfig,[{key:'genDebugInfo',get:function get(){return this._genDebugInfo===void 0?__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["p" /* isDevMode */])():this._genDebugInfo;}/**
     * @return {?}
     */},{key:'logBindingUpdate',get:function get(){return this._logBindingUpdate===void 0?__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["p" /* isDevMode */])():this._logBindingUpdate;}}]);return CompilerConfig;}();/**
 * Types used for the renderer.
 * Can be replaced to specialize the generated output to a specific renderer
 * to help tree shaking.
 * @abstract
 */var RenderTypes=function(){function RenderTypes(){_classCallCheck(this,RenderTypes);}_createClass(RenderTypes,[{key:'renderer',/**
     * @abstract
     * @return {?}
     */value:function renderer(){}/**
     * @abstract
     * @return {?}
     */},{key:'renderText',value:function renderText(){}/**
     * @abstract
     * @return {?}
     */},{key:'renderElement',value:function renderElement(){}/**
     * @abstract
     * @return {?}
     */},{key:'renderComment',value:function renderComment(){}/**
     * @abstract
     * @return {?}
     */},{key:'renderNode',value:function renderNode(){}/**
     * @abstract
     * @return {?}
     */},{key:'renderEvent',value:function renderEvent(){}}]);return RenderTypes;}();var DefaultRenderTypes=function(){function DefaultRenderTypes(){_classCallCheck(this,DefaultRenderTypes);this.renderText=null;this.renderElement=null;this.renderComment=null;this.renderNode=null;this.renderEvent=null;}/**
     * @return {?}
     */_createClass(DefaultRenderTypes,[{key:'renderer',get:function get(){return createIdentifier(Identifiers.Renderer);}}]);return DefaultRenderTypes;}();var ParserError=/**
     * @param {?} message
     * @param {?} input
     * @param {?} errLocation
     * @param {?=} ctxLocation
     */function ParserError(message,input,errLocation,ctxLocation){_classCallCheck(this,ParserError);this.input=input;this.errLocation=errLocation;this.ctxLocation=ctxLocation;this.message='Parser Error: '+message+' '+errLocation+' ['+input+'] in '+ctxLocation;};var ParseSpan=/**
     * @param {?} start
     * @param {?} end
     */function ParseSpan(start,end){_classCallCheck(this,ParseSpan);this.start=start;this.end=end;};var AST=function(){/**
     * @param {?} span
     */function AST(span){_classCallCheck(this,AST);this.span=span;}/**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */_createClass(AST,[{key:'visit',value:function visit(visitor){var context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return null;}/**
     * @return {?}
     */},{key:'toString',value:function toString(){return'AST';}}]);return AST;}();/**
 * Represents a quoted expression of the form:
 *
 * quote = prefix `:` uninterpretedExpression
 * prefix = identifier
 * uninterpretedExpression = arbitrary string
 *
 * A quoted expression is meant to be pre-processed by an AST transformer that
 * converts it into another AST that no longer contains quoted expressions.
 * It is meant to allow third-party developers to extend Angular template
 * expression language. The `uninterpretedExpression` part of the quote is
 * therefore not interpreted by the Angular's own expression parser.
 */var Quote=function(_AST){_inherits(Quote,_AST);/**
     * @param {?} span
     * @param {?} prefix
     * @param {?} uninterpretedExpression
     * @param {?} location
     */function Quote(span,prefix,uninterpretedExpression,location){_classCallCheck(this,Quote);var _this12=_possibleConstructorReturn(this,(Quote.__proto__||Object.getPrototypeOf(Quote)).call(this,span));_this12.prefix=prefix;_this12.uninterpretedExpression=uninterpretedExpression;_this12.location=location;return _this12;}/**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */_createClass(Quote,[{key:'visit',value:function visit(visitor){var context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return visitor.visitQuote(this,context);}/**
     * @return {?}
     */},{key:'toString',value:function toString(){return'Quote';}}]);return Quote;}(AST);var EmptyExpr=function(_AST2){_inherits(EmptyExpr,_AST2);function EmptyExpr(){_classCallCheck(this,EmptyExpr);return _possibleConstructorReturn(this,(EmptyExpr.__proto__||Object.getPrototypeOf(EmptyExpr)).apply(this,arguments));}_createClass(EmptyExpr,[{key:'visit',/**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */value:function visit(visitor){// do nothing
var context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;}}]);return EmptyExpr;}(AST);var ImplicitReceiver=function(_AST3){_inherits(ImplicitReceiver,_AST3);function ImplicitReceiver(){_classCallCheck(this,ImplicitReceiver);return _possibleConstructorReturn(this,(ImplicitReceiver.__proto__||Object.getPrototypeOf(ImplicitReceiver)).apply(this,arguments));}_createClass(ImplicitReceiver,[{key:'visit',/**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */value:function visit(visitor){var context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return visitor.visitImplicitReceiver(this,context);}}]);return ImplicitReceiver;}(AST);/**
 * Multiple expressions separated by a semicolon.
 */var Chain=function(_AST4){_inherits(Chain,_AST4);/**
     * @param {?} span
     * @param {?} expressions
     */function Chain(span,expressions){_classCallCheck(this,Chain);var _this15=_possibleConstructorReturn(this,(Chain.__proto__||Object.getPrototypeOf(Chain)).call(this,span));_this15.expressions=expressions;return _this15;}/**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */_createClass(Chain,[{key:'visit',value:function visit(visitor){var context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return visitor.visitChain(this,context);}}]);return Chain;}(AST);var Conditional=function(_AST5){_inherits(Conditional,_AST5);/**
     * @param {?} span
     * @param {?} condition
     * @param {?} trueExp
     * @param {?} falseExp
     */function Conditional(span,condition,trueExp,falseExp){_classCallCheck(this,Conditional);var _this16=_possibleConstructorReturn(this,(Conditional.__proto__||Object.getPrototypeOf(Conditional)).call(this,span));_this16.condition=condition;_this16.trueExp=trueExp;_this16.falseExp=falseExp;return _this16;}/**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */_createClass(Conditional,[{key:'visit',value:function visit(visitor){var context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return visitor.visitConditional(this,context);}}]);return Conditional;}(AST);var PropertyRead=function(_AST6){_inherits(PropertyRead,_AST6);/**
     * @param {?} span
     * @param {?} receiver
     * @param {?} name
     */function PropertyRead(span,receiver,name){_classCallCheck(this,PropertyRead);var _this17=_possibleConstructorReturn(this,(PropertyRead.__proto__||Object.getPrototypeOf(PropertyRead)).call(this,span));_this17.receiver=receiver;_this17.name=name;return _this17;}/**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */_createClass(PropertyRead,[{key:'visit',value:function visit(visitor){var context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return visitor.visitPropertyRead(this,context);}}]);return PropertyRead;}(AST);var PropertyWrite=function(_AST7){_inherits(PropertyWrite,_AST7);/**
     * @param {?} span
     * @param {?} receiver
     * @param {?} name
     * @param {?} value
     */function PropertyWrite(span,receiver,name,value){_classCallCheck(this,PropertyWrite);var _this18=_possibleConstructorReturn(this,(PropertyWrite.__proto__||Object.getPrototypeOf(PropertyWrite)).call(this,span));_this18.receiver=receiver;_this18.name=name;_this18.value=value;return _this18;}/**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */_createClass(PropertyWrite,[{key:'visit',value:function visit(visitor){var context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return visitor.visitPropertyWrite(this,context);}}]);return PropertyWrite;}(AST);var SafePropertyRead=function(_AST8){_inherits(SafePropertyRead,_AST8);/**
     * @param {?} span
     * @param {?} receiver
     * @param {?} name
     */function SafePropertyRead(span,receiver,name){_classCallCheck(this,SafePropertyRead);var _this19=_possibleConstructorReturn(this,(SafePropertyRead.__proto__||Object.getPrototypeOf(SafePropertyRead)).call(this,span));_this19.receiver=receiver;_this19.name=name;return _this19;}/**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */_createClass(SafePropertyRead,[{key:'visit',value:function visit(visitor){var context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return visitor.visitSafePropertyRead(this,context);}}]);return SafePropertyRead;}(AST);var KeyedRead=function(_AST9){_inherits(KeyedRead,_AST9);/**
     * @param {?} span
     * @param {?} obj
     * @param {?} key
     */function KeyedRead(span,obj,key){_classCallCheck(this,KeyedRead);var _this20=_possibleConstructorReturn(this,(KeyedRead.__proto__||Object.getPrototypeOf(KeyedRead)).call(this,span));_this20.obj=obj;_this20.key=key;return _this20;}/**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */_createClass(KeyedRead,[{key:'visit',value:function visit(visitor){var context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return visitor.visitKeyedRead(this,context);}}]);return KeyedRead;}(AST);var KeyedWrite=function(_AST10){_inherits(KeyedWrite,_AST10);/**
     * @param {?} span
     * @param {?} obj
     * @param {?} key
     * @param {?} value
     */function KeyedWrite(span,obj,key,value){_classCallCheck(this,KeyedWrite);var _this21=_possibleConstructorReturn(this,(KeyedWrite.__proto__||Object.getPrototypeOf(KeyedWrite)).call(this,span));_this21.obj=obj;_this21.key=key;_this21.value=value;return _this21;}/**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */_createClass(KeyedWrite,[{key:'visit',value:function visit(visitor){var context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return visitor.visitKeyedWrite(this,context);}}]);return KeyedWrite;}(AST);var BindingPipe=function(_AST11){_inherits(BindingPipe,_AST11);/**
     * @param {?} span
     * @param {?} exp
     * @param {?} name
     * @param {?} args
     */function BindingPipe(span,exp,name,args){_classCallCheck(this,BindingPipe);var _this22=_possibleConstructorReturn(this,(BindingPipe.__proto__||Object.getPrototypeOf(BindingPipe)).call(this,span));_this22.exp=exp;_this22.name=name;_this22.args=args;return _this22;}/**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */_createClass(BindingPipe,[{key:'visit',value:function visit(visitor){var context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return visitor.visitPipe(this,context);}}]);return BindingPipe;}(AST);var LiteralPrimitive=function(_AST12){_inherits(LiteralPrimitive,_AST12);/**
     * @param {?} span
     * @param {?} value
     */function LiteralPrimitive(span,value){_classCallCheck(this,LiteralPrimitive);var _this23=_possibleConstructorReturn(this,(LiteralPrimitive.__proto__||Object.getPrototypeOf(LiteralPrimitive)).call(this,span));_this23.value=value;return _this23;}/**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */_createClass(LiteralPrimitive,[{key:'visit',value:function visit(visitor){var context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return visitor.visitLiteralPrimitive(this,context);}}]);return LiteralPrimitive;}(AST);var LiteralArray=function(_AST13){_inherits(LiteralArray,_AST13);/**
     * @param {?} span
     * @param {?} expressions
     */function LiteralArray(span,expressions){_classCallCheck(this,LiteralArray);var _this24=_possibleConstructorReturn(this,(LiteralArray.__proto__||Object.getPrototypeOf(LiteralArray)).call(this,span));_this24.expressions=expressions;return _this24;}/**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */_createClass(LiteralArray,[{key:'visit',value:function visit(visitor){var context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return visitor.visitLiteralArray(this,context);}}]);return LiteralArray;}(AST);var LiteralMap=function(_AST14){_inherits(LiteralMap,_AST14);/**
     * @param {?} span
     * @param {?} keys
     * @param {?} values
     */function LiteralMap(span,keys,values){_classCallCheck(this,LiteralMap);var _this25=_possibleConstructorReturn(this,(LiteralMap.__proto__||Object.getPrototypeOf(LiteralMap)).call(this,span));_this25.keys=keys;_this25.values=values;return _this25;}/**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */_createClass(LiteralMap,[{key:'visit',value:function visit(visitor){var context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return visitor.visitLiteralMap(this,context);}}]);return LiteralMap;}(AST);var Interpolation=function(_AST15){_inherits(Interpolation,_AST15);/**
     * @param {?} span
     * @param {?} strings
     * @param {?} expressions
     */function Interpolation(span,strings,expressions){_classCallCheck(this,Interpolation);var _this26=_possibleConstructorReturn(this,(Interpolation.__proto__||Object.getPrototypeOf(Interpolation)).call(this,span));_this26.strings=strings;_this26.expressions=expressions;return _this26;}/**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */_createClass(Interpolation,[{key:'visit',value:function visit(visitor){var context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return visitor.visitInterpolation(this,context);}}]);return Interpolation;}(AST);var Binary=function(_AST16){_inherits(Binary,_AST16);/**
     * @param {?} span
     * @param {?} operation
     * @param {?} left
     * @param {?} right
     */function Binary(span,operation,left,right){_classCallCheck(this,Binary);var _this27=_possibleConstructorReturn(this,(Binary.__proto__||Object.getPrototypeOf(Binary)).call(this,span));_this27.operation=operation;_this27.left=left;_this27.right=right;return _this27;}/**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */_createClass(Binary,[{key:'visit',value:function visit(visitor){var context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return visitor.visitBinary(this,context);}}]);return Binary;}(AST);var PrefixNot=function(_AST17){_inherits(PrefixNot,_AST17);/**
     * @param {?} span
     * @param {?} expression
     */function PrefixNot(span,expression){_classCallCheck(this,PrefixNot);var _this28=_possibleConstructorReturn(this,(PrefixNot.__proto__||Object.getPrototypeOf(PrefixNot)).call(this,span));_this28.expression=expression;return _this28;}/**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */_createClass(PrefixNot,[{key:'visit',value:function visit(visitor){var context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return visitor.visitPrefixNot(this,context);}}]);return PrefixNot;}(AST);var MethodCall=function(_AST18){_inherits(MethodCall,_AST18);/**
     * @param {?} span
     * @param {?} receiver
     * @param {?} name
     * @param {?} args
     */function MethodCall(span,receiver,name,args){_classCallCheck(this,MethodCall);var _this29=_possibleConstructorReturn(this,(MethodCall.__proto__||Object.getPrototypeOf(MethodCall)).call(this,span));_this29.receiver=receiver;_this29.name=name;_this29.args=args;return _this29;}/**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */_createClass(MethodCall,[{key:'visit',value:function visit(visitor){var context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return visitor.visitMethodCall(this,context);}}]);return MethodCall;}(AST);var SafeMethodCall=function(_AST19){_inherits(SafeMethodCall,_AST19);/**
     * @param {?} span
     * @param {?} receiver
     * @param {?} name
     * @param {?} args
     */function SafeMethodCall(span,receiver,name,args){_classCallCheck(this,SafeMethodCall);var _this30=_possibleConstructorReturn(this,(SafeMethodCall.__proto__||Object.getPrototypeOf(SafeMethodCall)).call(this,span));_this30.receiver=receiver;_this30.name=name;_this30.args=args;return _this30;}/**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */_createClass(SafeMethodCall,[{key:'visit',value:function visit(visitor){var context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return visitor.visitSafeMethodCall(this,context);}}]);return SafeMethodCall;}(AST);var FunctionCall=function(_AST20){_inherits(FunctionCall,_AST20);/**
     * @param {?} span
     * @param {?} target
     * @param {?} args
     */function FunctionCall(span,target,args){_classCallCheck(this,FunctionCall);var _this31=_possibleConstructorReturn(this,(FunctionCall.__proto__||Object.getPrototypeOf(FunctionCall)).call(this,span));_this31.target=target;_this31.args=args;return _this31;}/**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */_createClass(FunctionCall,[{key:'visit',value:function visit(visitor){var context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return visitor.visitFunctionCall(this,context);}}]);return FunctionCall;}(AST);var ASTWithSource=function(_AST21){_inherits(ASTWithSource,_AST21);/**
     * @param {?} ast
     * @param {?} source
     * @param {?} location
     * @param {?} errors
     */function ASTWithSource(ast,source,location,errors){_classCallCheck(this,ASTWithSource);var _this32=_possibleConstructorReturn(this,(ASTWithSource.__proto__||Object.getPrototypeOf(ASTWithSource)).call(this,new ParseSpan(0,isBlank(source)?0:source.length)));_this32.ast=ast;_this32.source=source;_this32.location=location;_this32.errors=errors;return _this32;}/**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */_createClass(ASTWithSource,[{key:'visit',value:function visit(visitor){var context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return this.ast.visit(visitor,context);}/**
     * @return {?}
     */},{key:'toString',value:function toString(){return this.source+' in '+this.location;}}]);return ASTWithSource;}(AST);var TemplateBinding=/**
     * @param {?} span
     * @param {?} key
     * @param {?} keyIsVar
     * @param {?} name
     * @param {?} expression
     */function TemplateBinding(span,key,keyIsVar,name,expression){_classCallCheck(this,TemplateBinding);this.span=span;this.key=key;this.keyIsVar=keyIsVar;this.name=name;this.expression=expression;};var RecursiveAstVisitor=function(){function RecursiveAstVisitor(){_classCallCheck(this,RecursiveAstVisitor);}_createClass(RecursiveAstVisitor,[{key:'visitBinary',/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */value:function visitBinary(ast,context){ast.left.visit(this);ast.right.visit(this);return null;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitChain',value:function visitChain(ast,context){return this.visitAll(ast.expressions,context);}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitConditional',value:function visitConditional(ast,context){ast.condition.visit(this);ast.trueExp.visit(this);ast.falseExp.visit(this);return null;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitPipe',value:function visitPipe(ast,context){ast.exp.visit(this);this.visitAll(ast.args,context);return null;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitFunctionCall',value:function visitFunctionCall(ast,context){ast.target.visit(this);this.visitAll(ast.args,context);return null;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitImplicitReceiver',value:function visitImplicitReceiver(ast,context){return null;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitInterpolation',value:function visitInterpolation(ast,context){return this.visitAll(ast.expressions,context);}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitKeyedRead',value:function visitKeyedRead(ast,context){ast.obj.visit(this);ast.key.visit(this);return null;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitKeyedWrite',value:function visitKeyedWrite(ast,context){ast.obj.visit(this);ast.key.visit(this);ast.value.visit(this);return null;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitLiteralArray',value:function visitLiteralArray(ast,context){return this.visitAll(ast.expressions,context);}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitLiteralMap',value:function visitLiteralMap(ast,context){return this.visitAll(ast.values,context);}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitLiteralPrimitive',value:function visitLiteralPrimitive(ast,context){return null;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitMethodCall',value:function visitMethodCall(ast,context){ast.receiver.visit(this);return this.visitAll(ast.args,context);}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitPrefixNot',value:function visitPrefixNot(ast,context){ast.expression.visit(this);return null;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitPropertyRead',value:function visitPropertyRead(ast,context){ast.receiver.visit(this);return null;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitPropertyWrite',value:function visitPropertyWrite(ast,context){ast.receiver.visit(this);ast.value.visit(this);return null;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitSafePropertyRead',value:function visitSafePropertyRead(ast,context){ast.receiver.visit(this);return null;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitSafeMethodCall',value:function visitSafeMethodCall(ast,context){ast.receiver.visit(this);return this.visitAll(ast.args,context);}/**
     * @param {?} asts
     * @param {?} context
     * @return {?}
     */},{key:'visitAll',value:function visitAll(asts,context){var _this33=this;asts.forEach(function(ast){return ast.visit(_this33,context);});return null;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitQuote',value:function visitQuote(ast,context){return null;}}]);return RecursiveAstVisitor;}();var AstTransformer=function(){function AstTransformer(){_classCallCheck(this,AstTransformer);}_createClass(AstTransformer,[{key:'visitImplicitReceiver',/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */value:function visitImplicitReceiver(ast,context){return ast;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitInterpolation',value:function visitInterpolation(ast,context){return new Interpolation(ast.span,ast.strings,this.visitAll(ast.expressions));}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitLiteralPrimitive',value:function visitLiteralPrimitive(ast,context){return new LiteralPrimitive(ast.span,ast.value);}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitPropertyRead',value:function visitPropertyRead(ast,context){return new PropertyRead(ast.span,ast.receiver.visit(this),ast.name);}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitPropertyWrite',value:function visitPropertyWrite(ast,context){return new PropertyWrite(ast.span,ast.receiver.visit(this),ast.name,ast.value);}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitSafePropertyRead',value:function visitSafePropertyRead(ast,context){return new SafePropertyRead(ast.span,ast.receiver.visit(this),ast.name);}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitMethodCall',value:function visitMethodCall(ast,context){return new MethodCall(ast.span,ast.receiver.visit(this),ast.name,this.visitAll(ast.args));}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitSafeMethodCall',value:function visitSafeMethodCall(ast,context){return new SafeMethodCall(ast.span,ast.receiver.visit(this),ast.name,this.visitAll(ast.args));}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitFunctionCall',value:function visitFunctionCall(ast,context){return new FunctionCall(ast.span,ast.target.visit(this),this.visitAll(ast.args));}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitLiteralArray',value:function visitLiteralArray(ast,context){return new LiteralArray(ast.span,this.visitAll(ast.expressions));}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitLiteralMap',value:function visitLiteralMap(ast,context){return new LiteralMap(ast.span,ast.keys,this.visitAll(ast.values));}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitBinary',value:function visitBinary(ast,context){return new Binary(ast.span,ast.operation,ast.left.visit(this),ast.right.visit(this));}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitPrefixNot',value:function visitPrefixNot(ast,context){return new PrefixNot(ast.span,ast.expression.visit(this));}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitConditional',value:function visitConditional(ast,context){return new Conditional(ast.span,ast.condition.visit(this),ast.trueExp.visit(this),ast.falseExp.visit(this));}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitPipe',value:function visitPipe(ast,context){return new BindingPipe(ast.span,ast.exp.visit(this),ast.name,this.visitAll(ast.args));}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitKeyedRead',value:function visitKeyedRead(ast,context){return new KeyedRead(ast.span,ast.obj.visit(this),ast.key.visit(this));}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitKeyedWrite',value:function visitKeyedWrite(ast,context){return new KeyedWrite(ast.span,ast.obj.visit(this),ast.key.visit(this),ast.value.visit(this));}/**
     * @param {?} asts
     * @return {?}
     */},{key:'visitAll',value:function visitAll(asts){var/** @type {?} */res=new Array(asts.length);for(var/** @type {?} */i=0;i<asts.length;++i){res[i]=asts[i].visit(this);}return res;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitChain',value:function visitChain(ast,context){return new Chain(ast.span,this.visitAll(ast.expressions));}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitQuote',value:function visitQuote(ast,context){return new Quote(ast.span,ast.prefix,ast.uninterpretedExpression,ast.location);}}]);return AstTransformer;}();/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 *//**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */var/** @type {?} */$EOF=0;var/** @type {?} */$TAB=9;var/** @type {?} */$LF=10;var/** @type {?} */$VTAB=11;var/** @type {?} */$FF=12;var/** @type {?} */$CR=13;var/** @type {?} */$SPACE=32;var/** @type {?} */$BANG=33;var/** @type {?} */$DQ=34;var/** @type {?} */$HASH=35;var/** @type {?} */$$=36;var/** @type {?} */$PERCENT=37;var/** @type {?} */$AMPERSAND=38;var/** @type {?} */$SQ=39;var/** @type {?} */$LPAREN=40;var/** @type {?} */$RPAREN=41;var/** @type {?} */$STAR=42;var/** @type {?} */$PLUS=43;var/** @type {?} */$COMMA=44;var/** @type {?} */$MINUS=45;var/** @type {?} */$PERIOD=46;var/** @type {?} */$SLASH=47;var/** @type {?} */$COLON=58;var/** @type {?} */$SEMICOLON=59;var/** @type {?} */$LT=60;var/** @type {?} */$EQ=61;var/** @type {?} */$GT=62;var/** @type {?} */$QUESTION=63;var/** @type {?} */$0=48;var/** @type {?} */$9=57;var/** @type {?} */$A=65;var/** @type {?} */$E=69;var/** @type {?} */$F=70;var/** @type {?} */$X=88;var/** @type {?} */$Z=90;var/** @type {?} */$LBRACKET=91;var/** @type {?} */$BACKSLASH=92;var/** @type {?} */$RBRACKET=93;var/** @type {?} */$CARET=94;var/** @type {?} */$_=95;var/** @type {?} */$a=97;var/** @type {?} */$e=101;var/** @type {?} */$f=102;var/** @type {?} */$n=110;var/** @type {?} */$r=114;var/** @type {?} */$t=116;var/** @type {?} */$u=117;var/** @type {?} */$v=118;var/** @type {?} */$x=120;var/** @type {?} */$z=122;var/** @type {?} */$LBRACE=123;var/** @type {?} */$BAR=124;var/** @type {?} */$RBRACE=125;var/** @type {?} */$NBSP=160;var/** @type {?} */$BT=96;/**
 * @param {?} code
 * @return {?}
 */function isWhitespace(code){return code>=$TAB&&code<=$SPACE||code==$NBSP;}/**
 * @param {?} code
 * @return {?}
 */function isDigit(code){return $0<=code&&code<=$9;}/**
 * @param {?} code
 * @return {?}
 */function isAsciiLetter(code){return code>=$a&&code<=$z||code>=$A&&code<=$Z;}/**
 * @param {?} code
 * @return {?}
 */function isAsciiHexDigit(code){return code>=$a&&code<=$f||code>=$A&&code<=$F||isDigit(code);}/**
 * A replacement for \@Injectable to be used in the compiler, so that
 * we don't try to evaluate the metadata in the compiler during AoT.
 * This decorator is enough to make the compiler work with the ReflectiveInjector though.
 * \@Annotation
 * @return {?}
 */function CompilerInjectable(){return function(x){return x;};}/**
 * @param {?} identifier
 * @param {?} value
 * @return {?}
 */function assertArrayOfStrings(identifier,value){if(!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["p" /* isDevMode */])()||isBlank(value)){return;}if(!Array.isArray(value)){throw new Error('Expected \''+identifier+'\' to be an array of strings.');}for(var/** @type {?} */i=0;i<value.length;i+=1){if(typeof value[i]!=='string'){throw new Error('Expected \''+identifier+'\' to be an array of strings.');}}}var/** @type {?} */INTERPOLATION_BLACKLIST_REGEXPS=[/^\s*$/,/[<>]/,/^[{}]$/,/&(#|[a-z])/i,/^\/\//];/**
 * @param {?} identifier
 * @param {?} value
 * @return {?}
 */function assertInterpolationSymbols(identifier,value){if(isPresent(value)&&!(Array.isArray(value)&&value.length==2)){throw new Error('Expected \''+identifier+'\' to be an array, [start, end].');}else if(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["p" /* isDevMode */])()&&!isBlank(value)){var/** @type {?} */start=value[0];var/** @type {?} */end=value[1];// black list checking
INTERPOLATION_BLACKLIST_REGEXPS.forEach(function(regexp){if(regexp.test(start)||regexp.test(end)){throw new Error('[\''+start+'\', \''+end+'\'] contains unusable interpolation symbol.');}});}}var InterpolationConfig=function(){/**
     * @param {?} start
     * @param {?} end
     */function InterpolationConfig(start,end){_classCallCheck(this,InterpolationConfig);this.start=start;this.end=end;}/**
     * @param {?} markers
     * @return {?}
     */_createClass(InterpolationConfig,null,[{key:'fromArray',value:function fromArray(markers){if(!markers){return DEFAULT_INTERPOLATION_CONFIG;}assertInterpolationSymbols('interpolation',markers);return new InterpolationConfig(markers[0],markers[1]);}}]);return InterpolationConfig;}();var/** @type {?} */DEFAULT_INTERPOLATION_CONFIG=new InterpolationConfig('{{','}}');var TokenType={};TokenType.Character=0;TokenType.Identifier=1;TokenType.Keyword=2;TokenType.String=3;TokenType.Operator=4;TokenType.Number=5;TokenType.Error=6;TokenType[TokenType.Character]="Character";TokenType[TokenType.Identifier]="Identifier";TokenType[TokenType.Keyword]="Keyword";TokenType[TokenType.String]="String";TokenType[TokenType.Operator]="Operator";TokenType[TokenType.Number]="Number";TokenType[TokenType.Error]="Error";var/** @type {?} */KEYWORDS=['var','let','null','undefined','true','false','if','else','this'];var Lexer=function(){function Lexer(){_classCallCheck(this,Lexer);}_createClass(Lexer,[{key:'tokenize',/**
     * @param {?} text
     * @return {?}
     */value:function tokenize(text){var/** @type {?} */scanner=new _Scanner(text);var/** @type {?} */tokens=[];var/** @type {?} */token=scanner.scanToken();while(token!=null){tokens.push(token);token=scanner.scanToken();}return tokens;}}]);return Lexer;}();Lexer.decorators=[{type:CompilerInjectable}];/** @nocollapse */Lexer.ctorParameters=function(){return[];};var Token=function(){/**
     * @param {?} index
     * @param {?} type
     * @param {?} numValue
     * @param {?} strValue
     */function Token(index,type,numValue,strValue){_classCallCheck(this,Token);this.index=index;this.type=type;this.numValue=numValue;this.strValue=strValue;}/**
     * @param {?} code
     * @return {?}
     */_createClass(Token,[{key:'isCharacter',value:function isCharacter(code){return this.type==TokenType.Character&&this.numValue==code;}/**
     * @return {?}
     */},{key:'isNumber',value:function isNumber(){return this.type==TokenType.Number;}/**
     * @return {?}
     */},{key:'isString',value:function isString(){return this.type==TokenType.String;}/**
     * @param {?} operater
     * @return {?}
     */},{key:'isOperator',value:function isOperator(operater){return this.type==TokenType.Operator&&this.strValue==operater;}/**
     * @return {?}
     */},{key:'isIdentifier',value:function isIdentifier(){return this.type==TokenType.Identifier;}/**
     * @return {?}
     */},{key:'isKeyword',value:function isKeyword(){return this.type==TokenType.Keyword;}/**
     * @return {?}
     */},{key:'isKeywordLet',value:function isKeywordLet(){return this.type==TokenType.Keyword&&this.strValue=='let';}/**
     * @return {?}
     */},{key:'isKeywordNull',value:function isKeywordNull(){return this.type==TokenType.Keyword&&this.strValue=='null';}/**
     * @return {?}
     */},{key:'isKeywordUndefined',value:function isKeywordUndefined(){return this.type==TokenType.Keyword&&this.strValue=='undefined';}/**
     * @return {?}
     */},{key:'isKeywordTrue',value:function isKeywordTrue(){return this.type==TokenType.Keyword&&this.strValue=='true';}/**
     * @return {?}
     */},{key:'isKeywordFalse',value:function isKeywordFalse(){return this.type==TokenType.Keyword&&this.strValue=='false';}/**
     * @return {?}
     */},{key:'isKeywordThis',value:function isKeywordThis(){return this.type==TokenType.Keyword&&this.strValue=='this';}/**
     * @return {?}
     */},{key:'isError',value:function isError(){return this.type==TokenType.Error;}/**
     * @return {?}
     */},{key:'toNumber',value:function toNumber(){return this.type==TokenType.Number?this.numValue:-1;}/**
     * @return {?}
     */},{key:'toString',value:function toString(){switch(this.type){case TokenType.Character:case TokenType.Identifier:case TokenType.Keyword:case TokenType.Operator:case TokenType.String:case TokenType.Error:return this.strValue;case TokenType.Number:return this.numValue.toString();default:return null;}}}]);return Token;}();/**
 * @param {?} index
 * @param {?} code
 * @return {?}
 */function newCharacterToken(index,code){return new Token(index,TokenType.Character,code,String.fromCharCode(code));}/**
 * @param {?} index
 * @param {?} text
 * @return {?}
 */function newIdentifierToken(index,text){return new Token(index,TokenType.Identifier,0,text);}/**
 * @param {?} index
 * @param {?} text
 * @return {?}
 */function newKeywordToken(index,text){return new Token(index,TokenType.Keyword,0,text);}/**
 * @param {?} index
 * @param {?} text
 * @return {?}
 */function newOperatorToken(index,text){return new Token(index,TokenType.Operator,0,text);}/**
 * @param {?} index
 * @param {?} text
 * @return {?}
 */function newStringToken(index,text){return new Token(index,TokenType.String,0,text);}/**
 * @param {?} index
 * @param {?} n
 * @return {?}
 */function newNumberToken(index,n){return new Token(index,TokenType.Number,n,'');}/**
 * @param {?} index
 * @param {?} message
 * @return {?}
 */function newErrorToken(index,message){return new Token(index,TokenType.Error,0,message);}var/** @type {?} */EOF=new Token(-1,TokenType.Character,0,'');var _Scanner=function(){/**
     * @param {?} input
     */function _Scanner(input){_classCallCheck(this,_Scanner);this.input=input;this.peek=0;this.index=-1;this.length=input.length;this.advance();}/**
     * @return {?}
     */_createClass(_Scanner,[{key:'advance',value:function advance(){this.peek=++this.index>=this.length?$EOF:this.input.charCodeAt(this.index);}/**
     * @return {?}
     */},{key:'scanToken',value:function scanToken(){var/** @type {?} */input=this.input,/** @type {?} */length=this.length;var/** @type {?} */peek=this.peek,/** @type {?} */index=this.index;// Skip whitespace.
while(peek<=$SPACE){if(++index>=length){peek=$EOF;break;}else{peek=input.charCodeAt(index);}}this.peek=peek;this.index=index;if(index>=length){return null;}// Handle identifiers and numbers.
if(isIdentifierStart(peek))return this.scanIdentifier();if(isDigit(peek))return this.scanNumber(index);var/** @type {?} */start=index;switch(peek){case $PERIOD:this.advance();return isDigit(this.peek)?this.scanNumber(start):newCharacterToken(start,$PERIOD);case $LPAREN:case $RPAREN:case $LBRACE:case $RBRACE:case $LBRACKET:case $RBRACKET:case $COMMA:case $COLON:case $SEMICOLON:return this.scanCharacter(start,peek);case $SQ:case $DQ:return this.scanString();case $HASH:case $PLUS:case $MINUS:case $STAR:case $SLASH:case $PERCENT:case $CARET:return this.scanOperator(start,String.fromCharCode(peek));case $QUESTION:return this.scanComplexOperator(start,'?',$PERIOD,'.');case $LT:case $GT:return this.scanComplexOperator(start,String.fromCharCode(peek),$EQ,'=');case $BANG:case $EQ:return this.scanComplexOperator(start,String.fromCharCode(peek),$EQ,'=',$EQ,'=');case $AMPERSAND:return this.scanComplexOperator(start,'&',$AMPERSAND,'&');case $BAR:return this.scanComplexOperator(start,'|',$BAR,'|');case $NBSP:while(isWhitespace(this.peek)){this.advance();}return this.scanToken();}this.advance();return this.error('Unexpected character ['+String.fromCharCode(peek)+']',0);}/**
     * @param {?} start
     * @param {?} code
     * @return {?}
     */},{key:'scanCharacter',value:function scanCharacter(start,code){this.advance();return newCharacterToken(start,code);}/**
     * @param {?} start
     * @param {?} str
     * @return {?}
     */},{key:'scanOperator',value:function scanOperator(start,str){this.advance();return newOperatorToken(start,str);}/**
     * Tokenize a 2/3 char long operator
     *
     * @param {?} start start index in the expression
     * @param {?} one first symbol (always part of the operator)
     * @param {?} twoCode code point for the second symbol
     * @param {?} two second symbol (part of the operator when the second code point matches)
     * @param {?=} threeCode code point for the third symbol
     * @param {?=} three third symbol (part of the operator when provided and matches source expression)
     * @return {?}
     */},{key:'scanComplexOperator',value:function scanComplexOperator(start,one,twoCode,two,threeCode,three){this.advance();var/** @type {?} */str=one;if(this.peek==twoCode){this.advance();str+=two;}if(threeCode!=null&&this.peek==threeCode){this.advance();str+=three;}return newOperatorToken(start,str);}/**
     * @return {?}
     */},{key:'scanIdentifier',value:function scanIdentifier(){var/** @type {?} */start=this.index;this.advance();while(isIdentifierPart(this.peek)){this.advance();}var/** @type {?} */str=this.input.substring(start,this.index);return KEYWORDS.indexOf(str)>-1?newKeywordToken(start,str):newIdentifierToken(start,str);}/**
     * @param {?} start
     * @return {?}
     */},{key:'scanNumber',value:function scanNumber(start){var/** @type {?} */simple=this.index===start;this.advance();// Skip initial digit.
while(true){if(isDigit(this.peek)){}else if(this.peek==$PERIOD){simple=false;}else if(isExponentStart(this.peek)){this.advance();if(isExponentSign(this.peek))this.advance();if(!isDigit(this.peek))return this.error('Invalid exponent',-1);simple=false;}else{break;}this.advance();}var/** @type {?} */str=this.input.substring(start,this.index);var/** @type {?} */value=simple?NumberWrapper.parseIntAutoRadix(str):parseFloat(str);return newNumberToken(start,value);}/**
     * @return {?}
     */},{key:'scanString',value:function scanString(){var/** @type {?} */start=this.index;var/** @type {?} */quote=this.peek;this.advance();// Skip initial quote.
var/** @type {?} */buffer='';var/** @type {?} */marker=this.index;var/** @type {?} */input=this.input;while(this.peek!=quote){if(this.peek==$BACKSLASH){buffer+=input.substring(marker,this.index);this.advance();var/** @type {?} */unescapedCode=void 0;// Workaround for TS2.1-introduced type strictness
this.peek=this.peek;if(this.peek==$u){// 4 character hex code for unicode character.
var/** @type {?} */hex=input.substring(this.index+1,this.index+5);if(/^[0-9a-f]+$/i.test(hex)){unescapedCode=parseInt(hex,16);}else{return this.error('Invalid unicode escape [\\u'+hex+']',0);}for(var/** @type {?} */i=0;i<5;i++){this.advance();}}else{unescapedCode=unescape(this.peek);this.advance();}buffer+=String.fromCharCode(unescapedCode);marker=this.index;}else if(this.peek==$EOF){return this.error('Unterminated quote',0);}else{this.advance();}}var/** @type {?} */last=input.substring(marker,this.index);this.advance();// Skip terminating quote.
return newStringToken(start,buffer+last);}/**
     * @param {?} message
     * @param {?} offset
     * @return {?}
     */},{key:'error',value:function error(message,offset){var/** @type {?} */position=this.index+offset;return newErrorToken(position,'Lexer Error: '+message+' at column '+position+' in expression ['+this.input+']');}}]);return _Scanner;}();/**
 * @param {?} code
 * @return {?}
 */function isIdentifierStart(code){return $a<=code&&code<=$z||$A<=code&&code<=$Z||code==$_||code==$$;}/**
 * @param {?} input
 * @return {?}
 */function isIdentifier(input){if(input.length==0)return false;var/** @type {?} */scanner=new _Scanner(input);if(!isIdentifierStart(scanner.peek))return false;scanner.advance();while(scanner.peek!==$EOF){if(!isIdentifierPart(scanner.peek))return false;scanner.advance();}return true;}/**
 * @param {?} code
 * @return {?}
 */function isIdentifierPart(code){return isAsciiLetter(code)||isDigit(code)||code==$_||code==$$;}/**
 * @param {?} code
 * @return {?}
 */function isExponentStart(code){return code==$e||code==$E;}/**
 * @param {?} code
 * @return {?}
 */function isExponentSign(code){return code==$MINUS||code==$PLUS;}/**
 * @param {?} code
 * @return {?}
 */function isQuote(code){return code===$SQ||code===$DQ||code===$BT;}/**
 * @param {?} code
 * @return {?}
 */function unescape(code){switch(code){case $n:return $LF;case $f:return $FF;case $r:return $CR;case $t:return $TAB;case $v:return $VTAB;default:return code;}}var SplitInterpolation=/**
     * @param {?} strings
     * @param {?} expressions
     * @param {?} offsets
     */function SplitInterpolation(strings,expressions,offsets){_classCallCheck(this,SplitInterpolation);this.strings=strings;this.expressions=expressions;this.offsets=offsets;};var TemplateBindingParseResult=/**
     * @param {?} templateBindings
     * @param {?} warnings
     * @param {?} errors
     */function TemplateBindingParseResult(templateBindings,warnings,errors){_classCallCheck(this,TemplateBindingParseResult);this.templateBindings=templateBindings;this.warnings=warnings;this.errors=errors;};/**
 * @param {?} config
 * @return {?}
 */function _createInterpolateRegExp(config){var/** @type {?} */pattern=escapeRegExp(config.start)+'([\\s\\S]*?)'+escapeRegExp(config.end);return new RegExp(pattern,'g');}var Parser=function(){/**
     * @param {?} _lexer
     */function Parser(_lexer){_classCallCheck(this,Parser);this._lexer=_lexer;this.errors=[];}/**
     * @param {?} input
     * @param {?} location
     * @param {?=} interpolationConfig
     * @return {?}
     */_createClass(Parser,[{key:'parseAction',value:function parseAction(input,location){var interpolationConfig=arguments.length>2&&arguments[2]!==undefined?arguments[2]:DEFAULT_INTERPOLATION_CONFIG;this._checkNoInterpolation(input,location,interpolationConfig);var/** @type {?} */sourceToLex=this._stripComments(input);var/** @type {?} */tokens=this._lexer.tokenize(this._stripComments(input));var/** @type {?} */ast=new _ParseAST(input,location,tokens,sourceToLex.length,true,this.errors,input.length-sourceToLex.length).parseChain();return new ASTWithSource(ast,input,location,this.errors);}/**
     * @param {?} input
     * @param {?} location
     * @param {?=} interpolationConfig
     * @return {?}
     */},{key:'parseBinding',value:function parseBinding(input,location){var interpolationConfig=arguments.length>2&&arguments[2]!==undefined?arguments[2]:DEFAULT_INTERPOLATION_CONFIG;var/** @type {?} */ast=this._parseBindingAst(input,location,interpolationConfig);return new ASTWithSource(ast,input,location,this.errors);}/**
     * @param {?} input
     * @param {?} location
     * @param {?=} interpolationConfig
     * @return {?}
     */},{key:'parseSimpleBinding',value:function parseSimpleBinding(input,location){var interpolationConfig=arguments.length>2&&arguments[2]!==undefined?arguments[2]:DEFAULT_INTERPOLATION_CONFIG;var/** @type {?} */ast=this._parseBindingAst(input,location,interpolationConfig);var/** @type {?} */errors=SimpleExpressionChecker.check(ast);if(errors.length>0){this._reportError('Host binding expression cannot contain '+errors.join(' '),input,location);}return new ASTWithSource(ast,input,location,this.errors);}/**
     * @param {?} message
     * @param {?} input
     * @param {?} errLocation
     * @param {?=} ctxLocation
     * @return {?}
     */},{key:'_reportError',value:function _reportError(message,input,errLocation,ctxLocation){this.errors.push(new ParserError(message,input,errLocation,ctxLocation));}/**
     * @param {?} input
     * @param {?} location
     * @param {?} interpolationConfig
     * @return {?}
     */},{key:'_parseBindingAst',value:function _parseBindingAst(input,location,interpolationConfig){// Quotes expressions use 3rd-party expression language. We don't want to use
// our lexer or parser for that, so we check for that ahead of time.
var/** @type {?} */quote=this._parseQuote(input,location);if(isPresent(quote)){return quote;}this._checkNoInterpolation(input,location,interpolationConfig);var/** @type {?} */sourceToLex=this._stripComments(input);var/** @type {?} */tokens=this._lexer.tokenize(sourceToLex);return new _ParseAST(input,location,tokens,sourceToLex.length,false,this.errors,input.length-sourceToLex.length).parseChain();}/**
     * @param {?} input
     * @param {?} location
     * @return {?}
     */},{key:'_parseQuote',value:function _parseQuote(input,location){if(isBlank(input))return null;var/** @type {?} */prefixSeparatorIndex=input.indexOf(':');if(prefixSeparatorIndex==-1)return null;var/** @type {?} */prefix=input.substring(0,prefixSeparatorIndex).trim();if(!isIdentifier(prefix))return null;var/** @type {?} */uninterpretedExpression=input.substring(prefixSeparatorIndex+1);return new Quote(new ParseSpan(0,input.length),prefix,uninterpretedExpression,location);}/**
     * @param {?} prefixToken
     * @param {?} input
     * @param {?} location
     * @return {?}
     */},{key:'parseTemplateBindings',value:function parseTemplateBindings(prefixToken,input,location){var/** @type {?} */tokens=this._lexer.tokenize(input);if(prefixToken){// Prefix the tokens with the tokens from prefixToken but have them take no space (0 index).
var/** @type {?} */prefixTokens=this._lexer.tokenize(prefixToken).map(function(t){t.index=0;return t;});tokens.unshift.apply(tokens,_toConsumableArray(prefixTokens));}return new _ParseAST(input,location,tokens,input.length,false,this.errors,0).parseTemplateBindings();}/**
     * @param {?} input
     * @param {?} location
     * @param {?=} interpolationConfig
     * @return {?}
     */},{key:'parseInterpolation',value:function parseInterpolation(input,location){var interpolationConfig=arguments.length>2&&arguments[2]!==undefined?arguments[2]:DEFAULT_INTERPOLATION_CONFIG;var/** @type {?} */split=this.splitInterpolation(input,location,interpolationConfig);if(split==null)return null;var/** @type {?} */expressions=[];for(var/** @type {?} */i=0;i<split.expressions.length;++i){var/** @type {?} */expressionText=split.expressions[i];var/** @type {?} */sourceToLex=this._stripComments(expressionText);var/** @type {?} */tokens=this._lexer.tokenize(this._stripComments(split.expressions[i]));var/** @type {?} */ast=new _ParseAST(input,location,tokens,sourceToLex.length,false,this.errors,split.offsets[i]+(expressionText.length-sourceToLex.length)).parseChain();expressions.push(ast);}return new ASTWithSource(new Interpolation(new ParseSpan(0,isBlank(input)?0:input.length),split.strings,expressions),input,location,this.errors);}/**
     * @param {?} input
     * @param {?} location
     * @param {?=} interpolationConfig
     * @return {?}
     */},{key:'splitInterpolation',value:function splitInterpolation(input,location){var interpolationConfig=arguments.length>2&&arguments[2]!==undefined?arguments[2]:DEFAULT_INTERPOLATION_CONFIG;var/** @type {?} */regexp=_createInterpolateRegExp(interpolationConfig);var/** @type {?} */parts=input.split(regexp);if(parts.length<=1){return null;}var/** @type {?} */strings=[];var/** @type {?} */expressions=[];var/** @type {?} */offsets=[];var/** @type {?} */offset=0;for(var/** @type {?} */i=0;i<parts.length;i++){var/** @type {?} */part=parts[i];if(i%2===0){// fixed string
strings.push(part);offset+=part.length;}else if(part.trim().length>0){offset+=interpolationConfig.start.length;expressions.push(part);offsets.push(offset);offset+=part.length+interpolationConfig.end.length;}else{this._reportError('Blank expressions are not allowed in interpolated strings',input,'at column '+this._findInterpolationErrorColumn(parts,i,interpolationConfig)+' in',location);expressions.push('$implict');offsets.push(offset);}}return new SplitInterpolation(strings,expressions,offsets);}/**
     * @param {?} input
     * @param {?} location
     * @return {?}
     */},{key:'wrapLiteralPrimitive',value:function wrapLiteralPrimitive(input,location){return new ASTWithSource(new LiteralPrimitive(new ParseSpan(0,isBlank(input)?0:input.length),input),input,location,this.errors);}/**
     * @param {?} input
     * @return {?}
     */},{key:'_stripComments',value:function _stripComments(input){var/** @type {?} */i=this._commentStart(input);return isPresent(i)?input.substring(0,i).trim():input;}/**
     * @param {?} input
     * @return {?}
     */},{key:'_commentStart',value:function _commentStart(input){var/** @type {?} */outerQuote=null;for(var/** @type {?} */i=0;i<input.length-1;i++){var/** @type {?} */char=input.charCodeAt(i);var/** @type {?} */nextChar=input.charCodeAt(i+1);if(char===$SLASH&&nextChar==$SLASH&&isBlank(outerQuote))return i;if(outerQuote===char){outerQuote=null;}else if(isBlank(outerQuote)&&isQuote(char)){outerQuote=char;}}return null;}/**
     * @param {?} input
     * @param {?} location
     * @param {?} interpolationConfig
     * @return {?}
     */},{key:'_checkNoInterpolation',value:function _checkNoInterpolation(input,location,interpolationConfig){var/** @type {?} */regexp=_createInterpolateRegExp(interpolationConfig);var/** @type {?} */parts=input.split(regexp);if(parts.length>1){this._reportError('Got interpolation ('+interpolationConfig.start+interpolationConfig.end+') where expression was expected',input,'at column '+this._findInterpolationErrorColumn(parts,1,interpolationConfig)+' in',location);}}/**
     * @param {?} parts
     * @param {?} partInErrIdx
     * @param {?} interpolationConfig
     * @return {?}
     */},{key:'_findInterpolationErrorColumn',value:function _findInterpolationErrorColumn(parts,partInErrIdx,interpolationConfig){var/** @type {?} */errLocation='';for(var/** @type {?} */j=0;j<partInErrIdx;j++){errLocation+=j%2===0?parts[j]:''+interpolationConfig.start+parts[j]+interpolationConfig.end;}return errLocation.length;}}]);return Parser;}();Parser.decorators=[{type:CompilerInjectable}];/** @nocollapse */Parser.ctorParameters=function(){return[{type:Lexer}];};var _ParseAST=function(){/**
     * @param {?} input
     * @param {?} location
     * @param {?} tokens
     * @param {?} inputLength
     * @param {?} parseAction
     * @param {?} errors
     * @param {?} offset
     */function _ParseAST(input,location,tokens,inputLength,parseAction,errors,offset){_classCallCheck(this,_ParseAST);this.input=input;this.location=location;this.tokens=tokens;this.inputLength=inputLength;this.parseAction=parseAction;this.errors=errors;this.offset=offset;this.rparensExpected=0;this.rbracketsExpected=0;this.rbracesExpected=0;this.index=0;}/**
     * @param {?} offset
     * @return {?}
     */_createClass(_ParseAST,[{key:'peek',value:function peek(offset){var/** @type {?} */i=this.index+offset;return i<this.tokens.length?this.tokens[i]:EOF;}/**
     * @return {?}
     */},{key:'span',/**
     * @param {?} start
     * @return {?}
     */value:function span(start){return new ParseSpan(start,this.inputIndex);}/**
     * @return {?}
     */},{key:'advance',value:function advance(){this.index++;}/**
     * @param {?} code
     * @return {?}
     */},{key:'optionalCharacter',value:function optionalCharacter(code){if(this.next.isCharacter(code)){this.advance();return true;}else{return false;}}/**
     * @return {?}
     */},{key:'peekKeywordLet',value:function peekKeywordLet(){return this.next.isKeywordLet();}/**
     * @param {?} code
     * @return {?}
     */},{key:'expectCharacter',value:function expectCharacter(code){if(this.optionalCharacter(code))return;this.error('Missing expected '+String.fromCharCode(code));}/**
     * @param {?} op
     * @return {?}
     */},{key:'optionalOperator',value:function optionalOperator(op){if(this.next.isOperator(op)){this.advance();return true;}else{return false;}}/**
     * @param {?} operator
     * @return {?}
     */},{key:'expectOperator',value:function expectOperator(operator){if(this.optionalOperator(operator))return;this.error('Missing expected operator '+operator);}/**
     * @return {?}
     */},{key:'expectIdentifierOrKeyword',value:function expectIdentifierOrKeyword(){var/** @type {?} */n=this.next;if(!n.isIdentifier()&&!n.isKeyword()){this.error('Unexpected token '+n+', expected identifier or keyword');return'';}this.advance();return n.toString();}/**
     * @return {?}
     */},{key:'expectIdentifierOrKeywordOrString',value:function expectIdentifierOrKeywordOrString(){var/** @type {?} */n=this.next;if(!n.isIdentifier()&&!n.isKeyword()&&!n.isString()){this.error('Unexpected token '+n+', expected identifier, keyword, or string');return'';}this.advance();return n.toString();}/**
     * @return {?}
     */},{key:'parseChain',value:function parseChain(){var/** @type {?} */exprs=[];var/** @type {?} */start=this.inputIndex;while(this.index<this.tokens.length){var/** @type {?} */expr=this.parsePipe();exprs.push(expr);if(this.optionalCharacter($SEMICOLON)){if(!this.parseAction){this.error('Binding expression cannot contain chained expression');}while(this.optionalCharacter($SEMICOLON)){}// read all semicolons
}else if(this.index<this.tokens.length){this.error('Unexpected token \''+this.next+'\'');}}if(exprs.length==0)return new EmptyExpr(this.span(start));if(exprs.length==1)return exprs[0];return new Chain(this.span(start),exprs);}/**
     * @return {?}
     */},{key:'parsePipe',value:function parsePipe(){var/** @type {?} */result=this.parseExpression();if(this.optionalOperator('|')){if(this.parseAction){this.error('Cannot have a pipe in an action expression');}do{var/** @type {?} */name=this.expectIdentifierOrKeyword();var/** @type {?} */args=[];while(this.optionalCharacter($COLON)){args.push(this.parseExpression());}result=new BindingPipe(this.span(result.span.start),result,name,args);}while(this.optionalOperator('|'));}return result;}/**
     * @return {?}
     */},{key:'parseExpression',value:function parseExpression(){return this.parseConditional();}/**
     * @return {?}
     */},{key:'parseConditional',value:function parseConditional(){var/** @type {?} */start=this.inputIndex;var/** @type {?} */result=this.parseLogicalOr();if(this.optionalOperator('?')){var/** @type {?} */yes=this.parsePipe();var/** @type {?} */no=void 0;if(!this.optionalCharacter($COLON)){var/** @type {?} */end=this.inputIndex;var/** @type {?} */expression=this.input.substring(start,end);this.error('Conditional expression '+expression+' requires all 3 expressions');no=new EmptyExpr(this.span(start));}else{no=this.parsePipe();}return new Conditional(this.span(start),result,yes,no);}else{return result;}}/**
     * @return {?}
     */},{key:'parseLogicalOr',value:function parseLogicalOr(){// '||'
var/** @type {?} */result=this.parseLogicalAnd();while(this.optionalOperator('||')){var/** @type {?} */right=this.parseLogicalAnd();result=new Binary(this.span(result.span.start),'||',result,right);}return result;}/**
     * @return {?}
     */},{key:'parseLogicalAnd',value:function parseLogicalAnd(){// '&&'
var/** @type {?} */result=this.parseEquality();while(this.optionalOperator('&&')){var/** @type {?} */right=this.parseEquality();result=new Binary(this.span(result.span.start),'&&',result,right);}return result;}/**
     * @return {?}
     */},{key:'parseEquality',value:function parseEquality(){// '==','!=','===','!=='
var/** @type {?} */result=this.parseRelational();while(this.next.type==TokenType.Operator){var/** @type {?} */operator=this.next.strValue;switch(operator){case'==':case'===':case'!=':case'!==':this.advance();var/** @type {?} */right=this.parseRelational();result=new Binary(this.span(result.span.start),operator,result,right);continue;}break;}return result;}/**
     * @return {?}
     */},{key:'parseRelational',value:function parseRelational(){// '<', '>', '<=', '>='
var/** @type {?} */result=this.parseAdditive();while(this.next.type==TokenType.Operator){var/** @type {?} */operator=this.next.strValue;switch(operator){case'<':case'>':case'<=':case'>=':this.advance();var/** @type {?} */right=this.parseAdditive();result=new Binary(this.span(result.span.start),operator,result,right);continue;}break;}return result;}/**
     * @return {?}
     */},{key:'parseAdditive',value:function parseAdditive(){// '+', '-'
var/** @type {?} */result=this.parseMultiplicative();while(this.next.type==TokenType.Operator){var/** @type {?} */operator=this.next.strValue;switch(operator){case'+':case'-':this.advance();var/** @type {?} */right=this.parseMultiplicative();result=new Binary(this.span(result.span.start),operator,result,right);continue;}break;}return result;}/**
     * @return {?}
     */},{key:'parseMultiplicative',value:function parseMultiplicative(){// '*', '%', '/'
var/** @type {?} */result=this.parsePrefix();while(this.next.type==TokenType.Operator){var/** @type {?} */operator=this.next.strValue;switch(operator){case'*':case'%':case'/':this.advance();var/** @type {?} */right=this.parsePrefix();result=new Binary(this.span(result.span.start),operator,result,right);continue;}break;}return result;}/**
     * @return {?}
     */},{key:'parsePrefix',value:function parsePrefix(){if(this.next.type==TokenType.Operator){var/** @type {?} */start=this.inputIndex;var/** @type {?} */operator=this.next.strValue;var/** @type {?} */result=void 0;switch(operator){case'+':this.advance();return this.parsePrefix();case'-':this.advance();result=this.parsePrefix();return new Binary(this.span(start),operator,new LiteralPrimitive(new ParseSpan(start,start),0),result);case'!':this.advance();result=this.parsePrefix();return new PrefixNot(this.span(start),result);}}return this.parseCallChain();}/**
     * @return {?}
     */},{key:'parseCallChain',value:function parseCallChain(){var/** @type {?} */result=this.parsePrimary();while(true){if(this.optionalCharacter($PERIOD)){result=this.parseAccessMemberOrMethodCall(result,false);}else if(this.optionalOperator('?.')){result=this.parseAccessMemberOrMethodCall(result,true);}else if(this.optionalCharacter($LBRACKET)){this.rbracketsExpected++;var/** @type {?} */key=this.parsePipe();this.rbracketsExpected--;this.expectCharacter($RBRACKET);if(this.optionalOperator('=')){var/** @type {?} */value=this.parseConditional();result=new KeyedWrite(this.span(result.span.start),result,key,value);}else{result=new KeyedRead(this.span(result.span.start),result,key);}}else if(this.optionalCharacter($LPAREN)){this.rparensExpected++;var/** @type {?} */args=this.parseCallArguments();this.rparensExpected--;this.expectCharacter($RPAREN);result=new FunctionCall(this.span(result.span.start),result,args);}else{return result;}}}/**
     * @return {?}
     */},{key:'parsePrimary',value:function parsePrimary(){var/** @type {?} */start=this.inputIndex;if(this.optionalCharacter($LPAREN)){this.rparensExpected++;var/** @type {?} */result=this.parsePipe();this.rparensExpected--;this.expectCharacter($RPAREN);return result;}else if(this.next.isKeywordNull()){this.advance();return new LiteralPrimitive(this.span(start),null);}else if(this.next.isKeywordUndefined()){this.advance();return new LiteralPrimitive(this.span(start),void 0);}else if(this.next.isKeywordTrue()){this.advance();return new LiteralPrimitive(this.span(start),true);}else if(this.next.isKeywordFalse()){this.advance();return new LiteralPrimitive(this.span(start),false);}else if(this.next.isKeywordThis()){this.advance();return new ImplicitReceiver(this.span(start));}else if(this.optionalCharacter($LBRACKET)){this.rbracketsExpected++;var/** @type {?} */elements=this.parseExpressionList($RBRACKET);this.rbracketsExpected--;this.expectCharacter($RBRACKET);return new LiteralArray(this.span(start),elements);}else if(this.next.isCharacter($LBRACE)){return this.parseLiteralMap();}else if(this.next.isIdentifier()){return this.parseAccessMemberOrMethodCall(new ImplicitReceiver(this.span(start)),false);}else if(this.next.isNumber()){var/** @type {?} */value=this.next.toNumber();this.advance();return new LiteralPrimitive(this.span(start),value);}else if(this.next.isString()){var/** @type {?} */literalValue=this.next.toString();this.advance();return new LiteralPrimitive(this.span(start),literalValue);}else if(this.index>=this.tokens.length){this.error('Unexpected end of expression: '+this.input);return new EmptyExpr(this.span(start));}else{this.error('Unexpected token '+this.next);return new EmptyExpr(this.span(start));}}/**
     * @param {?} terminator
     * @return {?}
     */},{key:'parseExpressionList',value:function parseExpressionList(terminator){var/** @type {?} */result=[];if(!this.next.isCharacter(terminator)){do{result.push(this.parsePipe());}while(this.optionalCharacter($COMMA));}return result;}/**
     * @return {?}
     */},{key:'parseLiteralMap',value:function parseLiteralMap(){var/** @type {?} */keys=[];var/** @type {?} */values=[];var/** @type {?} */start=this.inputIndex;this.expectCharacter($LBRACE);if(!this.optionalCharacter($RBRACE)){this.rbracesExpected++;do{var/** @type {?} */key=this.expectIdentifierOrKeywordOrString();keys.push(key);this.expectCharacter($COLON);values.push(this.parsePipe());}while(this.optionalCharacter($COMMA));this.rbracesExpected--;this.expectCharacter($RBRACE);}return new LiteralMap(this.span(start),keys,values);}/**
     * @param {?} receiver
     * @param {?=} isSafe
     * @return {?}
     */},{key:'parseAccessMemberOrMethodCall',value:function parseAccessMemberOrMethodCall(receiver){var isSafe=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var/** @type {?} */start=receiver.span.start;var/** @type {?} */id=this.expectIdentifierOrKeyword();if(this.optionalCharacter($LPAREN)){this.rparensExpected++;var/** @type {?} */args=this.parseCallArguments();this.expectCharacter($RPAREN);this.rparensExpected--;var/** @type {?} */span=this.span(start);return isSafe?new SafeMethodCall(span,receiver,id,args):new MethodCall(span,receiver,id,args);}else{if(isSafe){if(this.optionalOperator('=')){this.error('The \'?.\' operator cannot be used in the assignment');return new EmptyExpr(this.span(start));}else{return new SafePropertyRead(this.span(start),receiver,id);}}else{if(this.optionalOperator('=')){if(!this.parseAction){this.error('Bindings cannot contain assignments');return new EmptyExpr(this.span(start));}var/** @type {?} */value=this.parseConditional();return new PropertyWrite(this.span(start),receiver,id,value);}else{return new PropertyRead(this.span(start),receiver,id);}}}}/**
     * @return {?}
     */},{key:'parseCallArguments',value:function parseCallArguments(){if(this.next.isCharacter($RPAREN))return[];var/** @type {?} */positionals=[];do{positionals.push(this.parsePipe());}while(this.optionalCharacter($COMMA));return positionals;}/**
     * An identifier, a keyword, a string with an optional `-` inbetween.
     * @return {?}
     */},{key:'expectTemplateBindingKey',value:function expectTemplateBindingKey(){var/** @type {?} */result='';var/** @type {?} */operatorFound=false;do{result+=this.expectIdentifierOrKeywordOrString();operatorFound=this.optionalOperator('-');if(operatorFound){result+='-';}}while(operatorFound);return result.toString();}/**
     * @return {?}
     */},{key:'parseTemplateBindings',value:function parseTemplateBindings(){var/** @type {?} */bindings=[];var/** @type {?} */prefix=null;var/** @type {?} */warnings=[];while(this.index<this.tokens.length){var/** @type {?} */start=this.inputIndex;var/** @type {?} */keyIsVar=this.peekKeywordLet();if(keyIsVar){this.advance();}var/** @type {?} */key=this.expectTemplateBindingKey();if(!keyIsVar){if(prefix==null){prefix=key;}else{key=prefix+key[0].toUpperCase()+key.substring(1);}}this.optionalCharacter($COLON);var/** @type {?} */name=null;var/** @type {?} */expression=null;if(keyIsVar){if(this.optionalOperator('=')){name=this.expectTemplateBindingKey();}else{name='\$implicit';}}else if(this.next!==EOF&&!this.peekKeywordLet()){var/** @type {?} */_start=this.inputIndex;var/** @type {?} */ast=this.parsePipe();var/** @type {?} */source=this.input.substring(_start-this.offset,this.inputIndex-this.offset);expression=new ASTWithSource(ast,source,this.location,this.errors);}bindings.push(new TemplateBinding(this.span(start),key,keyIsVar,name,expression));if(!this.optionalCharacter($SEMICOLON)){this.optionalCharacter($COMMA);}}return new TemplateBindingParseResult(bindings,warnings,this.errors);}/**
     * @param {?} message
     * @param {?=} index
     * @return {?}
     */},{key:'error',value:function error(message){var index=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;this.errors.push(new ParserError(message,this.input,this.locationText(index),this.location));this.skip();}/**
     * @param {?=} index
     * @return {?}
     */},{key:'locationText',value:function locationText(){var index=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;if(isBlank(index))index=this.index;return index<this.tokens.length?'at column '+(this.tokens[index].index+1)+' in':'at the end of the expression';}/**
     * @return {?}
     */},{key:'skip',value:function skip(){var/** @type {?} */n=this.next;while(this.index<this.tokens.length&&!n.isCharacter($SEMICOLON)&&(this.rparensExpected<=0||!n.isCharacter($RPAREN))&&(this.rbracesExpected<=0||!n.isCharacter($RBRACE))&&(this.rbracketsExpected<=0||!n.isCharacter($RBRACKET))){if(this.next.isError()){this.errors.push(new ParserError(this.next.toString(),this.input,this.locationText(),this.location));}this.advance();n=this.next;}}},{key:'next',get:function get(){return this.peek(0);}/**
     * @return {?}
     */},{key:'inputIndex',get:function get(){return this.index<this.tokens.length?this.next.index+this.offset:this.inputLength+this.offset;}}]);return _ParseAST;}();var SimpleExpressionChecker=function(){function SimpleExpressionChecker(){_classCallCheck(this,SimpleExpressionChecker);this.errors=[];}/**
     * @param {?} ast
     * @return {?}
     */_createClass(SimpleExpressionChecker,[{key:'visitImplicitReceiver',/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */value:function visitImplicitReceiver(ast,context){}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitInterpolation',value:function visitInterpolation(ast,context){}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitLiteralPrimitive',value:function visitLiteralPrimitive(ast,context){}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitPropertyRead',value:function visitPropertyRead(ast,context){}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitPropertyWrite',value:function visitPropertyWrite(ast,context){}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitSafePropertyRead',value:function visitSafePropertyRead(ast,context){}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitMethodCall',value:function visitMethodCall(ast,context){}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitSafeMethodCall',value:function visitSafeMethodCall(ast,context){}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitFunctionCall',value:function visitFunctionCall(ast,context){}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitLiteralArray',value:function visitLiteralArray(ast,context){this.visitAll(ast.expressions);}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitLiteralMap',value:function visitLiteralMap(ast,context){this.visitAll(ast.values);}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitBinary',value:function visitBinary(ast,context){}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitPrefixNot',value:function visitPrefixNot(ast,context){}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitConditional',value:function visitConditional(ast,context){}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitPipe',value:function visitPipe(ast,context){this.errors.push('pipes');}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitKeyedRead',value:function visitKeyedRead(ast,context){}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitKeyedWrite',value:function visitKeyedWrite(ast,context){}/**
     * @param {?} asts
     * @return {?}
     */},{key:'visitAll',value:function visitAll(asts){var _this34=this;return asts.map(function(node){return node.visit(_this34);});}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitChain',value:function visitChain(ast,context){}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitQuote',value:function visitQuote(ast,context){}}],[{key:'check',value:function check(ast){var/** @type {?} */s=new SimpleExpressionChecker();ast.visit(s);return s.errors;}}]);return SimpleExpressionChecker;}();var ParseLocation=function(){/**
     * @param {?} file
     * @param {?} offset
     * @param {?} line
     * @param {?} col
     */function ParseLocation(file,offset,line,col){_classCallCheck(this,ParseLocation);this.file=file;this.offset=offset;this.line=line;this.col=col;}/**
     * @return {?}
     */_createClass(ParseLocation,[{key:'toString',value:function toString(){return isPresent(this.offset)?this.file.url+'@'+this.line+':'+this.col:this.file.url;}/**
     * @param {?} delta
     * @return {?}
     */},{key:'moveBy',value:function moveBy(delta){var/** @type {?} */source=this.file.content;var/** @type {?} */len=source.length;var/** @type {?} */offset=this.offset;var/** @type {?} */line=this.line;var/** @type {?} */col=this.col;while(offset>0&&delta<0){offset--;delta++;var/** @type {?} */ch=source.charCodeAt(offset);if(ch==$LF){line--;var/** @type {?} */priorLine=source.substr(0,offset-1).lastIndexOf(String.fromCharCode($LF));col=priorLine>0?offset-priorLine:offset;}else{col--;}}while(offset<len&&delta>0){var/** @type {?} */_ch=source.charCodeAt(offset);offset++;delta--;if(_ch==$LF){line++;col=0;}else{col++;}}return new ParseLocation(this.file,offset,line,col);}/**
     * @param {?} maxChars
     * @param {?} maxLines
     * @return {?}
     */},{key:'getContext',value:function getContext(maxChars,maxLines){var/** @type {?} */content=this.file.content;var/** @type {?} */startOffset=this.offset;if(isPresent(startOffset)){if(startOffset>content.length-1){startOffset=content.length-1;}var/** @type {?} */endOffset=startOffset;var/** @type {?} */ctxChars=0;var/** @type {?} */ctxLines=0;while(ctxChars<maxChars&&startOffset>0){startOffset--;ctxChars++;if(content[startOffset]=='\n'){if(++ctxLines==maxLines){break;}}}ctxChars=0;ctxLines=0;while(ctxChars<maxChars&&endOffset<content.length-1){endOffset++;ctxChars++;if(content[endOffset]=='\n'){if(++ctxLines==maxLines){break;}}}return{before:content.substring(startOffset,this.offset),after:content.substring(this.offset,endOffset+1)};}return null;}}]);return ParseLocation;}();var ParseSourceFile=/**
     * @param {?} content
     * @param {?} url
     */function ParseSourceFile(content,url){_classCallCheck(this,ParseSourceFile);this.content=content;this.url=url;};var ParseSourceSpan=function(){/**
     * @param {?} start
     * @param {?} end
     * @param {?=} details
     */function ParseSourceSpan(start,end){var details=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;_classCallCheck(this,ParseSourceSpan);this.start=start;this.end=end;this.details=details;}/**
     * @return {?}
     */_createClass(ParseSourceSpan,[{key:'toString',value:function toString(){return this.start.file.content.substring(this.start.offset,this.end.offset);}}]);return ParseSourceSpan;}();var ParseErrorLevel={};ParseErrorLevel.WARNING=0;ParseErrorLevel.FATAL=1;ParseErrorLevel[ParseErrorLevel.WARNING]="WARNING";ParseErrorLevel[ParseErrorLevel.FATAL]="FATAL";var ParseError=function(){/**
     * @param {?} span
     * @param {?} msg
     * @param {?=} level
     */function ParseError(span,msg){var level=arguments.length>2&&arguments[2]!==undefined?arguments[2]:ParseErrorLevel.FATAL;_classCallCheck(this,ParseError);this.span=span;this.msg=msg;this.level=level;}/**
     * @return {?}
     */_createClass(ParseError,[{key:'toString',value:function toString(){var/** @type {?} */ctx=this.span.start.getContext(100,3);var/** @type {?} */contextStr=ctx?' ("'+ctx.before+'[ERROR ->]'+ctx.after+'")':'';var/** @type {?} */details=this.span.details?', '+this.span.details:'';return''+this.msg+contextStr+': '+this.span.start+details;}}]);return ParseError;}();/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */var Text=function(){/**
     * @param {?} value
     * @param {?} sourceSpan
     */function Text(value,sourceSpan){_classCallCheck(this,Text);this.value=value;this.sourceSpan=sourceSpan;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(Text,[{key:'visit',value:function visit(visitor,context){return visitor.visitText(this,context);}}]);return Text;}();var Expansion=function(){/**
     * @param {?} switchValue
     * @param {?} type
     * @param {?} cases
     * @param {?} sourceSpan
     * @param {?} switchValueSourceSpan
     */function Expansion(switchValue,type,cases,sourceSpan,switchValueSourceSpan){_classCallCheck(this,Expansion);this.switchValue=switchValue;this.type=type;this.cases=cases;this.sourceSpan=sourceSpan;this.switchValueSourceSpan=switchValueSourceSpan;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(Expansion,[{key:'visit',value:function visit(visitor,context){return visitor.visitExpansion(this,context);}}]);return Expansion;}();var ExpansionCase=function(){/**
     * @param {?} value
     * @param {?} expression
     * @param {?} sourceSpan
     * @param {?} valueSourceSpan
     * @param {?} expSourceSpan
     */function ExpansionCase(value,expression,sourceSpan,valueSourceSpan,expSourceSpan){_classCallCheck(this,ExpansionCase);this.value=value;this.expression=expression;this.sourceSpan=sourceSpan;this.valueSourceSpan=valueSourceSpan;this.expSourceSpan=expSourceSpan;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(ExpansionCase,[{key:'visit',value:function visit(visitor,context){return visitor.visitExpansionCase(this,context);}}]);return ExpansionCase;}();var Attribute$1=function(){/**
     * @param {?} name
     * @param {?} value
     * @param {?} sourceSpan
     * @param {?=} valueSpan
     */function Attribute$1(name,value,sourceSpan,valueSpan){_classCallCheck(this,Attribute$1);this.name=name;this.value=value;this.sourceSpan=sourceSpan;this.valueSpan=valueSpan;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(Attribute$1,[{key:'visit',value:function visit(visitor,context){return visitor.visitAttribute(this,context);}}]);return Attribute$1;}();var Element=function(){/**
     * @param {?} name
     * @param {?} attrs
     * @param {?} children
     * @param {?} sourceSpan
     * @param {?} startSourceSpan
     * @param {?} endSourceSpan
     */function Element(name,attrs,children,sourceSpan,startSourceSpan,endSourceSpan){_classCallCheck(this,Element);this.name=name;this.attrs=attrs;this.children=children;this.sourceSpan=sourceSpan;this.startSourceSpan=startSourceSpan;this.endSourceSpan=endSourceSpan;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(Element,[{key:'visit',value:function visit(visitor,context){return visitor.visitElement(this,context);}}]);return Element;}();var Comment=function(){/**
     * @param {?} value
     * @param {?} sourceSpan
     */function Comment(value,sourceSpan){_classCallCheck(this,Comment);this.value=value;this.sourceSpan=sourceSpan;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(Comment,[{key:'visit',value:function visit(visitor,context){return visitor.visitComment(this,context);}}]);return Comment;}();/**
 * @param {?} visitor
 * @param {?} nodes
 * @param {?=} context
 * @return {?}
 */function visitAll(visitor,nodes){var context=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var/** @type {?} */result=[];var/** @type {?} */visit=visitor.visit?function(ast){return visitor.visit(ast,context)||ast.visit(visitor,context);}:function(ast){return ast.visit(visitor,context);};nodes.forEach(function(ast){var/** @type {?} */astResult=visit(ast);if(astResult){result.push(astResult);}});return result;}var TokenType$1={};TokenType$1.TAG_OPEN_START=0;TokenType$1.TAG_OPEN_END=1;TokenType$1.TAG_OPEN_END_VOID=2;TokenType$1.TAG_CLOSE=3;TokenType$1.TEXT=4;TokenType$1.ESCAPABLE_RAW_TEXT=5;TokenType$1.RAW_TEXT=6;TokenType$1.COMMENT_START=7;TokenType$1.COMMENT_END=8;TokenType$1.CDATA_START=9;TokenType$1.CDATA_END=10;TokenType$1.ATTR_NAME=11;TokenType$1.ATTR_VALUE=12;TokenType$1.DOC_TYPE=13;TokenType$1.EXPANSION_FORM_START=14;TokenType$1.EXPANSION_CASE_VALUE=15;TokenType$1.EXPANSION_CASE_EXP_START=16;TokenType$1.EXPANSION_CASE_EXP_END=17;TokenType$1.EXPANSION_FORM_END=18;TokenType$1.EOF=19;TokenType$1[TokenType$1.TAG_OPEN_START]="TAG_OPEN_START";TokenType$1[TokenType$1.TAG_OPEN_END]="TAG_OPEN_END";TokenType$1[TokenType$1.TAG_OPEN_END_VOID]="TAG_OPEN_END_VOID";TokenType$1[TokenType$1.TAG_CLOSE]="TAG_CLOSE";TokenType$1[TokenType$1.TEXT]="TEXT";TokenType$1[TokenType$1.ESCAPABLE_RAW_TEXT]="ESCAPABLE_RAW_TEXT";TokenType$1[TokenType$1.RAW_TEXT]="RAW_TEXT";TokenType$1[TokenType$1.COMMENT_START]="COMMENT_START";TokenType$1[TokenType$1.COMMENT_END]="COMMENT_END";TokenType$1[TokenType$1.CDATA_START]="CDATA_START";TokenType$1[TokenType$1.CDATA_END]="CDATA_END";TokenType$1[TokenType$1.ATTR_NAME]="ATTR_NAME";TokenType$1[TokenType$1.ATTR_VALUE]="ATTR_VALUE";TokenType$1[TokenType$1.DOC_TYPE]="DOC_TYPE";TokenType$1[TokenType$1.EXPANSION_FORM_START]="EXPANSION_FORM_START";TokenType$1[TokenType$1.EXPANSION_CASE_VALUE]="EXPANSION_CASE_VALUE";TokenType$1[TokenType$1.EXPANSION_CASE_EXP_START]="EXPANSION_CASE_EXP_START";TokenType$1[TokenType$1.EXPANSION_CASE_EXP_END]="EXPANSION_CASE_EXP_END";TokenType$1[TokenType$1.EXPANSION_FORM_END]="EXPANSION_FORM_END";TokenType$1[TokenType$1.EOF]="EOF";var Token$1=/**
     * @param {?} type
     * @param {?} parts
     * @param {?} sourceSpan
     */function Token$1(type,parts,sourceSpan){_classCallCheck(this,Token$1);this.type=type;this.parts=parts;this.sourceSpan=sourceSpan;};var TokenError=function(_ParseError){_inherits(TokenError,_ParseError);/**
     * @param {?} errorMsg
     * @param {?} tokenType
     * @param {?} span
     */function TokenError(errorMsg,tokenType,span){_classCallCheck(this,TokenError);var _this35=_possibleConstructorReturn(this,(TokenError.__proto__||Object.getPrototypeOf(TokenError)).call(this,span,errorMsg));_this35.tokenType=tokenType;return _this35;}return TokenError;}(ParseError);var TokenizeResult=/**
     * @param {?} tokens
     * @param {?} errors
     */function TokenizeResult(tokens,errors){_classCallCheck(this,TokenizeResult);this.tokens=tokens;this.errors=errors;};/**
 * @param {?} source
 * @param {?} url
 * @param {?} getTagDefinition
 * @param {?=} tokenizeExpansionForms
 * @param {?=} interpolationConfig
 * @return {?}
 */function tokenize(source,url,getTagDefinition){var tokenizeExpansionForms=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;var interpolationConfig=arguments.length>4&&arguments[4]!==undefined?arguments[4]:DEFAULT_INTERPOLATION_CONFIG;return new _Tokenizer(new ParseSourceFile(source,url),getTagDefinition,tokenizeExpansionForms,interpolationConfig).tokenize();}var/** @type {?} */_CR_OR_CRLF_REGEXP=/\r\n?/g;/**
 * @param {?} charCode
 * @return {?}
 */function _unexpectedCharacterErrorMsg(charCode){var/** @type {?} */char=charCode===$EOF?'EOF':String.fromCharCode(charCode);return'Unexpected character "'+char+'"';}/**
 * @param {?} entitySrc
 * @return {?}
 */function _unknownEntityErrorMsg(entitySrc){return'Unknown entity "'+entitySrc+'" - use the "&#<decimal>;" or  "&#x<hex>;" syntax';}var _ControlFlowError=/**
     * @param {?} error
     */function _ControlFlowError(error){_classCallCheck(this,_ControlFlowError);this.error=error;};var _Tokenizer=function(){/**
     * @param {?} _file The html source
     * @param {?} _getTagDefinition
     * @param {?} _tokenizeIcu Whether to tokenize ICU messages (considered as text nodes when false)
     * @param {?=} _interpolationConfig
     */function _Tokenizer(_file,_getTagDefinition,_tokenizeIcu){var _interpolationConfig=arguments.length>3&&arguments[3]!==undefined?arguments[3]:DEFAULT_INTERPOLATION_CONFIG;_classCallCheck(this,_Tokenizer);this._file=_file;this._getTagDefinition=_getTagDefinition;this._tokenizeIcu=_tokenizeIcu;this._interpolationConfig=_interpolationConfig;this._peek=-1;this._nextPeek=-1;this._index=-1;this._line=0;this._column=-1;this._expansionCaseStack=[];this._inInterpolation=false;this.tokens=[];this.errors=[];this._input=_file.content;this._length=_file.content.length;this._advance();}/**
     * @param {?} content
     * @return {?}
     */_createClass(_Tokenizer,[{key:'_processCarriageReturns',value:function _processCarriageReturns(content){// http://www.w3.org/TR/html5/syntax.html#preprocessing-the-input-stream
// In order to keep the original position in the source, we can not
// pre-process it.
// Instead CRs are processed right before instantiating the tokens.
return content.replace(_CR_OR_CRLF_REGEXP,'\n');}/**
     * @return {?}
     */},{key:'tokenize',value:function tokenize(){while(this._peek!==$EOF){var/** @type {?} */start=this._getLocation();try{if(this._attemptCharCode($LT)){if(this._attemptCharCode($BANG)){if(this._attemptCharCode($LBRACKET)){this._consumeCdata(start);}else if(this._attemptCharCode($MINUS)){this._consumeComment(start);}else{this._consumeDocType(start);}}else if(this._attemptCharCode($SLASH)){this._consumeTagClose(start);}else{this._consumeTagOpen(start);}}else if(!(this._tokenizeIcu&&this._tokenizeExpansionForm())){this._consumeText();}}catch(e){if(e instanceof _ControlFlowError){this.errors.push(e.error);}else{throw e;}}}this._beginToken(TokenType$1.EOF);this._endToken([]);return new TokenizeResult(mergeTextTokens(this.tokens),this.errors);}/**
     * \@internal
     * @return {?}
     */},{key:'_tokenizeExpansionForm',value:function _tokenizeExpansionForm(){if(isExpansionFormStart(this._input,this._index,this._interpolationConfig)){this._consumeExpansionFormStart();return true;}if(isExpansionCaseStart(this._peek)&&this._isInExpansionForm()){this._consumeExpansionCaseStart();return true;}if(this._peek===$RBRACE){if(this._isInExpansionCase()){this._consumeExpansionCaseEnd();return true;}if(this._isInExpansionForm()){this._consumeExpansionFormEnd();return true;}}return false;}/**
     * @return {?}
     */},{key:'_getLocation',value:function _getLocation(){return new ParseLocation(this._file,this._index,this._line,this._column);}/**
     * @param {?=} start
     * @param {?=} end
     * @return {?}
     */},{key:'_getSpan',value:function _getSpan(){var start=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this._getLocation();var end=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this._getLocation();return new ParseSourceSpan(start,end);}/**
     * @param {?} type
     * @param {?=} start
     * @return {?}
     */},{key:'_beginToken',value:function _beginToken(type){var start=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this._getLocation();this._currentTokenStart=start;this._currentTokenType=type;}/**
     * @param {?} parts
     * @param {?=} end
     * @return {?}
     */},{key:'_endToken',value:function _endToken(parts){var end=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this._getLocation();var/** @type {?} */token=new Token$1(this._currentTokenType,parts,new ParseSourceSpan(this._currentTokenStart,end));this.tokens.push(token);this._currentTokenStart=null;this._currentTokenType=null;return token;}/**
     * @param {?} msg
     * @param {?} span
     * @return {?}
     */},{key:'_createError',value:function _createError(msg,span){if(this._isInExpansionForm()){msg+=' (Do you have an unescaped "{" in your template? Use "{{ \'{\' }}") to escape it.)';}var/** @type {?} */error=new TokenError(msg,this._currentTokenType,span);this._currentTokenStart=null;this._currentTokenType=null;return new _ControlFlowError(error);}/**
     * @return {?}
     */},{key:'_advance',value:function _advance(){if(this._index>=this._length){throw this._createError(_unexpectedCharacterErrorMsg($EOF),this._getSpan());}if(this._peek===$LF){this._line++;this._column=0;}else if(this._peek!==$LF&&this._peek!==$CR){this._column++;}this._index++;this._peek=this._index>=this._length?$EOF:this._input.charCodeAt(this._index);this._nextPeek=this._index+1>=this._length?$EOF:this._input.charCodeAt(this._index+1);}/**
     * @param {?} charCode
     * @return {?}
     */},{key:'_attemptCharCode',value:function _attemptCharCode(charCode){if(this._peek===charCode){this._advance();return true;}return false;}/**
     * @param {?} charCode
     * @return {?}
     */},{key:'_attemptCharCodeCaseInsensitive',value:function _attemptCharCodeCaseInsensitive(charCode){if(compareCharCodeCaseInsensitive(this._peek,charCode)){this._advance();return true;}return false;}/**
     * @param {?} charCode
     * @return {?}
     */},{key:'_requireCharCode',value:function _requireCharCode(charCode){var/** @type {?} */location=this._getLocation();if(!this._attemptCharCode(charCode)){throw this._createError(_unexpectedCharacterErrorMsg(this._peek),this._getSpan(location,location));}}/**
     * @param {?} chars
     * @return {?}
     */},{key:'_attemptStr',value:function _attemptStr(chars){var/** @type {?} */len=chars.length;if(this._index+len>this._length){return false;}var/** @type {?} */initialPosition=this._savePosition();for(var/** @type {?} */i=0;i<len;i++){if(!this._attemptCharCode(chars.charCodeAt(i))){// If attempting to parse the string fails, we want to reset the parser
// to where it was before the attempt
this._restorePosition(initialPosition);return false;}}return true;}/**
     * @param {?} chars
     * @return {?}
     */},{key:'_attemptStrCaseInsensitive',value:function _attemptStrCaseInsensitive(chars){for(var/** @type {?} */i=0;i<chars.length;i++){if(!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))){return false;}}return true;}/**
     * @param {?} chars
     * @return {?}
     */},{key:'_requireStr',value:function _requireStr(chars){var/** @type {?} */location=this._getLocation();if(!this._attemptStr(chars)){throw this._createError(_unexpectedCharacterErrorMsg(this._peek),this._getSpan(location));}}/**
     * @param {?} predicate
     * @return {?}
     */},{key:'_attemptCharCodeUntilFn',value:function _attemptCharCodeUntilFn(predicate){while(!predicate(this._peek)){this._advance();}}/**
     * @param {?} predicate
     * @param {?} len
     * @return {?}
     */},{key:'_requireCharCodeUntilFn',value:function _requireCharCodeUntilFn(predicate,len){var/** @type {?} */start=this._getLocation();this._attemptCharCodeUntilFn(predicate);if(this._index-start.offset<len){throw this._createError(_unexpectedCharacterErrorMsg(this._peek),this._getSpan(start,start));}}/**
     * @param {?} char
     * @return {?}
     */},{key:'_attemptUntilChar',value:function _attemptUntilChar(char){while(this._peek!==char){this._advance();}}/**
     * @param {?} decodeEntities
     * @return {?}
     */},{key:'_readChar',value:function _readChar(decodeEntities){if(decodeEntities&&this._peek===$AMPERSAND){return this._decodeEntity();}else{var/** @type {?} */index=this._index;this._advance();return this._input[index];}}/**
     * @return {?}
     */},{key:'_decodeEntity',value:function _decodeEntity(){var/** @type {?} */start=this._getLocation();this._advance();if(this._attemptCharCode($HASH)){var/** @type {?} */isHex=this._attemptCharCode($x)||this._attemptCharCode($X);var/** @type {?} */numberStart=this._getLocation().offset;this._attemptCharCodeUntilFn(isDigitEntityEnd);if(this._peek!=$SEMICOLON){throw this._createError(_unexpectedCharacterErrorMsg(this._peek),this._getSpan());}this._advance();var/** @type {?} */strNum=this._input.substring(numberStart,this._index-1);try{var/** @type {?} */charCode=parseInt(strNum,isHex?16:10);return String.fromCharCode(charCode);}catch(e){var/** @type {?} */entity=this._input.substring(start.offset+1,this._index-1);throw this._createError(_unknownEntityErrorMsg(entity),this._getSpan(start));}}else{var/** @type {?} */startPosition=this._savePosition();this._attemptCharCodeUntilFn(isNamedEntityEnd);if(this._peek!=$SEMICOLON){this._restorePosition(startPosition);return'&';}this._advance();var/** @type {?} */name=this._input.substring(start.offset+1,this._index-1);var/** @type {?} */char=NAMED_ENTITIES[name];if(!char){throw this._createError(_unknownEntityErrorMsg(name),this._getSpan(start));}return char;}}/**
     * @param {?} decodeEntities
     * @param {?} firstCharOfEnd
     * @param {?} attemptEndRest
     * @return {?}
     */},{key:'_consumeRawText',value:function _consumeRawText(decodeEntities,firstCharOfEnd,attemptEndRest){var/** @type {?} */tagCloseStart=void 0;var/** @type {?} */textStart=this._getLocation();this._beginToken(decodeEntities?TokenType$1.ESCAPABLE_RAW_TEXT:TokenType$1.RAW_TEXT,textStart);var/** @type {?} */parts=[];while(true){tagCloseStart=this._getLocation();if(this._attemptCharCode(firstCharOfEnd)&&attemptEndRest()){break;}if(this._index>tagCloseStart.offset){// add the characters consumed by the previous if statement to the output
parts.push(this._input.substring(tagCloseStart.offset,this._index));}while(this._peek!==firstCharOfEnd){parts.push(this._readChar(decodeEntities));}}return this._endToken([this._processCarriageReturns(parts.join(''))],tagCloseStart);}/**
     * @param {?} start
     * @return {?}
     */},{key:'_consumeComment',value:function _consumeComment(start){var _this36=this;this._beginToken(TokenType$1.COMMENT_START,start);this._requireCharCode($MINUS);this._endToken([]);var/** @type {?} */textToken=this._consumeRawText(false,$MINUS,function(){return _this36._attemptStr('->');});this._beginToken(TokenType$1.COMMENT_END,textToken.sourceSpan.end);this._endToken([]);}/**
     * @param {?} start
     * @return {?}
     */},{key:'_consumeCdata',value:function _consumeCdata(start){var _this37=this;this._beginToken(TokenType$1.CDATA_START,start);this._requireStr('CDATA[');this._endToken([]);var/** @type {?} */textToken=this._consumeRawText(false,$RBRACKET,function(){return _this37._attemptStr(']>');});this._beginToken(TokenType$1.CDATA_END,textToken.sourceSpan.end);this._endToken([]);}/**
     * @param {?} start
     * @return {?}
     */},{key:'_consumeDocType',value:function _consumeDocType(start){this._beginToken(TokenType$1.DOC_TYPE,start);this._attemptUntilChar($GT);this._advance();this._endToken([this._input.substring(start.offset+2,this._index-1)]);}/**
     * @return {?}
     */},{key:'_consumePrefixAndName',value:function _consumePrefixAndName(){var/** @type {?} */nameOrPrefixStart=this._index;var/** @type {?} */prefix=null;while(this._peek!==$COLON&&!isPrefixEnd(this._peek)){this._advance();}var/** @type {?} */nameStart=void 0;if(this._peek===$COLON){this._advance();prefix=this._input.substring(nameOrPrefixStart,this._index-1);nameStart=this._index;}else{nameStart=nameOrPrefixStart;}this._requireCharCodeUntilFn(isNameEnd,this._index===nameStart?1:0);var/** @type {?} */name=this._input.substring(nameStart,this._index);return[prefix,name];}/**
     * @param {?} start
     * @return {?}
     */},{key:'_consumeTagOpen',value:function _consumeTagOpen(start){var/** @type {?} */savedPos=this._savePosition();var/** @type {?} */tagName=void 0;var/** @type {?} */lowercaseTagName=void 0;try{if(!isAsciiLetter(this._peek)){throw this._createError(_unexpectedCharacterErrorMsg(this._peek),this._getSpan());}var/** @type {?} */nameStart=this._index;this._consumeTagOpenStart(start);tagName=this._input.substring(nameStart,this._index);lowercaseTagName=tagName.toLowerCase();this._attemptCharCodeUntilFn(isNotWhitespace);while(this._peek!==$SLASH&&this._peek!==$GT){this._consumeAttributeName();this._attemptCharCodeUntilFn(isNotWhitespace);if(this._attemptCharCode($EQ)){this._attemptCharCodeUntilFn(isNotWhitespace);this._consumeAttributeValue();}this._attemptCharCodeUntilFn(isNotWhitespace);}this._consumeTagOpenEnd();}catch(e){if(e instanceof _ControlFlowError){// When the start tag is invalid, assume we want a "<"
this._restorePosition(savedPos);// Back to back text tokens are merged at the end
this._beginToken(TokenType$1.TEXT,start);this._endToken(['<']);return;}throw e;}var/** @type {?} */contentTokenType=this._getTagDefinition(tagName).contentType;if(contentTokenType===TagContentType.RAW_TEXT){this._consumeRawTextWithTagClose(lowercaseTagName,false);}else if(contentTokenType===TagContentType.ESCAPABLE_RAW_TEXT){this._consumeRawTextWithTagClose(lowercaseTagName,true);}}/**
     * @param {?} lowercaseTagName
     * @param {?} decodeEntities
     * @return {?}
     */},{key:'_consumeRawTextWithTagClose',value:function _consumeRawTextWithTagClose(lowercaseTagName,decodeEntities){var _this38=this;var/** @type {?} */textToken=this._consumeRawText(decodeEntities,$LT,function(){if(!_this38._attemptCharCode($SLASH))return false;_this38._attemptCharCodeUntilFn(isNotWhitespace);if(!_this38._attemptStrCaseInsensitive(lowercaseTagName))return false;_this38._attemptCharCodeUntilFn(isNotWhitespace);return _this38._attemptCharCode($GT);});this._beginToken(TokenType$1.TAG_CLOSE,textToken.sourceSpan.end);this._endToken([null,lowercaseTagName]);}/**
     * @param {?} start
     * @return {?}
     */},{key:'_consumeTagOpenStart',value:function _consumeTagOpenStart(start){this._beginToken(TokenType$1.TAG_OPEN_START,start);var/** @type {?} */parts=this._consumePrefixAndName();this._endToken(parts);}/**
     * @return {?}
     */},{key:'_consumeAttributeName',value:function _consumeAttributeName(){this._beginToken(TokenType$1.ATTR_NAME);var/** @type {?} */prefixAndName=this._consumePrefixAndName();this._endToken(prefixAndName);}/**
     * @return {?}
     */},{key:'_consumeAttributeValue',value:function _consumeAttributeValue(){this._beginToken(TokenType$1.ATTR_VALUE);var/** @type {?} */value=void 0;if(this._peek===$SQ||this._peek===$DQ){var/** @type {?} */quoteChar=this._peek;this._advance();var/** @type {?} */parts=[];while(this._peek!==quoteChar){parts.push(this._readChar(true));}value=parts.join('');this._advance();}else{var/** @type {?} */valueStart=this._index;this._requireCharCodeUntilFn(isNameEnd,1);value=this._input.substring(valueStart,this._index);}this._endToken([this._processCarriageReturns(value)]);}/**
     * @return {?}
     */},{key:'_consumeTagOpenEnd',value:function _consumeTagOpenEnd(){var/** @type {?} */tokenType=this._attemptCharCode($SLASH)?TokenType$1.TAG_OPEN_END_VOID:TokenType$1.TAG_OPEN_END;this._beginToken(tokenType);this._requireCharCode($GT);this._endToken([]);}/**
     * @param {?} start
     * @return {?}
     */},{key:'_consumeTagClose',value:function _consumeTagClose(start){this._beginToken(TokenType$1.TAG_CLOSE,start);this._attemptCharCodeUntilFn(isNotWhitespace);var/** @type {?} */prefixAndName=this._consumePrefixAndName();this._attemptCharCodeUntilFn(isNotWhitespace);this._requireCharCode($GT);this._endToken(prefixAndName);}/**
     * @return {?}
     */},{key:'_consumeExpansionFormStart',value:function _consumeExpansionFormStart(){this._beginToken(TokenType$1.EXPANSION_FORM_START,this._getLocation());this._requireCharCode($LBRACE);this._endToken([]);this._expansionCaseStack.push(TokenType$1.EXPANSION_FORM_START);this._beginToken(TokenType$1.RAW_TEXT,this._getLocation());var/** @type {?} */condition=this._readUntil($COMMA);this._endToken([condition],this._getLocation());this._requireCharCode($COMMA);this._attemptCharCodeUntilFn(isNotWhitespace);this._beginToken(TokenType$1.RAW_TEXT,this._getLocation());var/** @type {?} */type=this._readUntil($COMMA);this._endToken([type],this._getLocation());this._requireCharCode($COMMA);this._attemptCharCodeUntilFn(isNotWhitespace);}/**
     * @return {?}
     */},{key:'_consumeExpansionCaseStart',value:function _consumeExpansionCaseStart(){this._beginToken(TokenType$1.EXPANSION_CASE_VALUE,this._getLocation());var/** @type {?} */value=this._readUntil($LBRACE).trim();this._endToken([value],this._getLocation());this._attemptCharCodeUntilFn(isNotWhitespace);this._beginToken(TokenType$1.EXPANSION_CASE_EXP_START,this._getLocation());this._requireCharCode($LBRACE);this._endToken([],this._getLocation());this._attemptCharCodeUntilFn(isNotWhitespace);this._expansionCaseStack.push(TokenType$1.EXPANSION_CASE_EXP_START);}/**
     * @return {?}
     */},{key:'_consumeExpansionCaseEnd',value:function _consumeExpansionCaseEnd(){this._beginToken(TokenType$1.EXPANSION_CASE_EXP_END,this._getLocation());this._requireCharCode($RBRACE);this._endToken([],this._getLocation());this._attemptCharCodeUntilFn(isNotWhitespace);this._expansionCaseStack.pop();}/**
     * @return {?}
     */},{key:'_consumeExpansionFormEnd',value:function _consumeExpansionFormEnd(){this._beginToken(TokenType$1.EXPANSION_FORM_END,this._getLocation());this._requireCharCode($RBRACE);this._endToken([]);this._expansionCaseStack.pop();}/**
     * @return {?}
     */},{key:'_consumeText',value:function _consumeText(){var/** @type {?} */start=this._getLocation();this._beginToken(TokenType$1.TEXT,start);var/** @type {?} */parts=[];do{if(this._interpolationConfig&&this._attemptStr(this._interpolationConfig.start)){parts.push(this._interpolationConfig.start);this._inInterpolation=true;}else if(this._interpolationConfig&&this._inInterpolation&&this._attemptStr(this._interpolationConfig.end)){parts.push(this._interpolationConfig.end);this._inInterpolation=false;}else{parts.push(this._readChar(true));}}while(!this._isTextEnd());this._endToken([this._processCarriageReturns(parts.join(''))]);}/**
     * @return {?}
     */},{key:'_isTextEnd',value:function _isTextEnd(){if(this._peek===$LT||this._peek===$EOF){return true;}if(this._tokenizeIcu&&!this._inInterpolation){if(isExpansionFormStart(this._input,this._index,this._interpolationConfig)){// start of an expansion form
return true;}if(this._peek===$RBRACE&&this._isInExpansionCase()){// end of and expansion case
return true;}}return false;}/**
     * @return {?}
     */},{key:'_savePosition',value:function _savePosition(){return[this._peek,this._index,this._column,this._line,this.tokens.length];}/**
     * @param {?} char
     * @return {?}
     */},{key:'_readUntil',value:function _readUntil(char){var/** @type {?} */start=this._index;this._attemptUntilChar(char);return this._input.substring(start,this._index);}/**
     * @param {?} position
     * @return {?}
     */},{key:'_restorePosition',value:function _restorePosition(position){this._peek=position[0];this._index=position[1];this._column=position[2];this._line=position[3];var/** @type {?} */nbTokens=position[4];if(nbTokens<this.tokens.length){// remove any extra tokens
this.tokens=this.tokens.slice(0,nbTokens);}}/**
     * @return {?}
     */},{key:'_isInExpansionCase',value:function _isInExpansionCase(){return this._expansionCaseStack.length>0&&this._expansionCaseStack[this._expansionCaseStack.length-1]===TokenType$1.EXPANSION_CASE_EXP_START;}/**
     * @return {?}
     */},{key:'_isInExpansionForm',value:function _isInExpansionForm(){return this._expansionCaseStack.length>0&&this._expansionCaseStack[this._expansionCaseStack.length-1]===TokenType$1.EXPANSION_FORM_START;}}]);return _Tokenizer;}();/**
 * @param {?} code
 * @return {?}
 */function isNotWhitespace(code){return!isWhitespace(code)||code===$EOF;}/**
 * @param {?} code
 * @return {?}
 */function isNameEnd(code){return isWhitespace(code)||code===$GT||code===$SLASH||code===$SQ||code===$DQ||code===$EQ;}/**
 * @param {?} code
 * @return {?}
 */function isPrefixEnd(code){return(code<$a||$z<code)&&(code<$A||$Z<code)&&(code<$0||code>$9);}/**
 * @param {?} code
 * @return {?}
 */function isDigitEntityEnd(code){return code==$SEMICOLON||code==$EOF||!isAsciiHexDigit(code);}/**
 * @param {?} code
 * @return {?}
 */function isNamedEntityEnd(code){return code==$SEMICOLON||code==$EOF||!isAsciiLetter(code);}/**
 * @param {?} input
 * @param {?} offset
 * @param {?} interpolationConfig
 * @return {?}
 */function isExpansionFormStart(input,offset,interpolationConfig){var/** @type {?} */isInterpolationStart=interpolationConfig?input.indexOf(interpolationConfig.start,offset)==offset:false;return input.charCodeAt(offset)==$LBRACE&&!isInterpolationStart;}/**
 * @param {?} peek
 * @return {?}
 */function isExpansionCaseStart(peek){return peek===$EQ||isAsciiLetter(peek);}/**
 * @param {?} code1
 * @param {?} code2
 * @return {?}
 */function compareCharCodeCaseInsensitive(code1,code2){return toUpperCaseCharCode(code1)==toUpperCaseCharCode(code2);}/**
 * @param {?} code
 * @return {?}
 */function toUpperCaseCharCode(code){return code>=$a&&code<=$z?code-$a+$A:code;}/**
 * @param {?} srcTokens
 * @return {?}
 */function mergeTextTokens(srcTokens){var/** @type {?} */dstTokens=[];var/** @type {?} */lastDstToken=void 0;for(var/** @type {?} */i=0;i<srcTokens.length;i++){var/** @type {?} */token=srcTokens[i];if(lastDstToken&&lastDstToken.type==TokenType$1.TEXT&&token.type==TokenType$1.TEXT){lastDstToken.parts[0]+=token.parts[0];lastDstToken.sourceSpan.end=token.sourceSpan.end;}else{lastDstToken=token;dstTokens.push(lastDstToken);}}return dstTokens;}var TreeError=function(_ParseError2){_inherits(TreeError,_ParseError2);/**
     * @param {?} elementName
     * @param {?} span
     * @param {?} msg
     */function TreeError(elementName,span,msg){_classCallCheck(this,TreeError);var _this39=_possibleConstructorReturn(this,(TreeError.__proto__||Object.getPrototypeOf(TreeError)).call(this,span,msg));_this39.elementName=elementName;return _this39;}/**
     * @param {?} elementName
     * @param {?} span
     * @param {?} msg
     * @return {?}
     */_createClass(TreeError,null,[{key:'create',value:function create(elementName,span,msg){return new TreeError(elementName,span,msg);}}]);return TreeError;}(ParseError);var ParseTreeResult=/**
     * @param {?} rootNodes
     * @param {?} errors
     */function ParseTreeResult(rootNodes,errors){_classCallCheck(this,ParseTreeResult);this.rootNodes=rootNodes;this.errors=errors;};var Parser$1=function(){/**
     * @param {?} getTagDefinition
     */function Parser$1(getTagDefinition){_classCallCheck(this,Parser$1);this.getTagDefinition=getTagDefinition;}/**
     * @param {?} source
     * @param {?} url
     * @param {?=} parseExpansionForms
     * @param {?=} interpolationConfig
     * @return {?}
     */_createClass(Parser$1,[{key:'parse',value:function parse(source,url){var parseExpansionForms=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var interpolationConfig=arguments.length>3&&arguments[3]!==undefined?arguments[3]:DEFAULT_INTERPOLATION_CONFIG;var/** @type {?} */tokensAndErrors=tokenize(source,url,this.getTagDefinition,parseExpansionForms,interpolationConfig);var/** @type {?} */treeAndErrors=new _TreeBuilder(tokensAndErrors.tokens,this.getTagDefinition).build();return new ParseTreeResult(treeAndErrors.rootNodes,tokensAndErrors.errors.concat(treeAndErrors.errors));}}]);return Parser$1;}();var _TreeBuilder=function(){/**
     * @param {?} tokens
     * @param {?} getTagDefinition
     */function _TreeBuilder(tokens,getTagDefinition){_classCallCheck(this,_TreeBuilder);this.tokens=tokens;this.getTagDefinition=getTagDefinition;this._index=-1;this._rootNodes=[];this._errors=[];this._elementStack=[];this._advance();}/**
     * @return {?}
     */_createClass(_TreeBuilder,[{key:'build',value:function build(){while(this._peek.type!==TokenType$1.EOF){if(this._peek.type===TokenType$1.TAG_OPEN_START){this._consumeStartTag(this._advance());}else if(this._peek.type===TokenType$1.TAG_CLOSE){this._consumeEndTag(this._advance());}else if(this._peek.type===TokenType$1.CDATA_START){this._closeVoidElement();this._consumeCdata(this._advance());}else if(this._peek.type===TokenType$1.COMMENT_START){this._closeVoidElement();this._consumeComment(this._advance());}else if(this._peek.type===TokenType$1.TEXT||this._peek.type===TokenType$1.RAW_TEXT||this._peek.type===TokenType$1.ESCAPABLE_RAW_TEXT){this._closeVoidElement();this._consumeText(this._advance());}else if(this._peek.type===TokenType$1.EXPANSION_FORM_START){this._consumeExpansion(this._advance());}else{// Skip all other tokens...
this._advance();}}return new ParseTreeResult(this._rootNodes,this._errors);}/**
     * @return {?}
     */},{key:'_advance',value:function _advance(){var/** @type {?} */prev=this._peek;if(this._index<this.tokens.length-1){// Note: there is always an EOF token at the end
this._index++;}this._peek=this.tokens[this._index];return prev;}/**
     * @param {?} type
     * @return {?}
     */},{key:'_advanceIf',value:function _advanceIf(type){if(this._peek.type===type){return this._advance();}return null;}/**
     * @param {?} startToken
     * @return {?}
     */},{key:'_consumeCdata',value:function _consumeCdata(startToken){this._consumeText(this._advance());this._advanceIf(TokenType$1.CDATA_END);}/**
     * @param {?} token
     * @return {?}
     */},{key:'_consumeComment',value:function _consumeComment(token){var/** @type {?} */text=this._advanceIf(TokenType$1.RAW_TEXT);this._advanceIf(TokenType$1.COMMENT_END);var/** @type {?} */value=isPresent(text)?text.parts[0].trim():null;this._addToParent(new Comment(value,token.sourceSpan));}/**
     * @param {?} token
     * @return {?}
     */},{key:'_consumeExpansion',value:function _consumeExpansion(token){var/** @type {?} */switchValue=this._advance();var/** @type {?} */type=this._advance();var/** @type {?} */cases=[];// read =
while(this._peek.type===TokenType$1.EXPANSION_CASE_VALUE){var/** @type {?} */expCase=this._parseExpansionCase();if(!expCase)return;// error
cases.push(expCase);}// read the final }
if(this._peek.type!==TokenType$1.EXPANSION_FORM_END){this._errors.push(TreeError.create(null,this._peek.sourceSpan,'Invalid ICU message. Missing \'}\'.'));return;}var/** @type {?} */sourceSpan=new ParseSourceSpan(token.sourceSpan.start,this._peek.sourceSpan.end);this._addToParent(new Expansion(switchValue.parts[0],type.parts[0],cases,sourceSpan,switchValue.sourceSpan));this._advance();}/**
     * @return {?}
     */},{key:'_parseExpansionCase',value:function _parseExpansionCase(){var/** @type {?} */value=this._advance();// read {
if(this._peek.type!==TokenType$1.EXPANSION_CASE_EXP_START){this._errors.push(TreeError.create(null,this._peek.sourceSpan,'Invalid ICU message. Missing \'{\'.'));return null;}// read until }
var/** @type {?} */start=this._advance();var/** @type {?} */exp=this._collectExpansionExpTokens(start);if(!exp)return null;var/** @type {?} */end=this._advance();exp.push(new Token$1(TokenType$1.EOF,[],end.sourceSpan));// parse everything in between { and }
var/** @type {?} */parsedExp=new _TreeBuilder(exp,this.getTagDefinition).build();if(parsedExp.errors.length>0){this._errors=this._errors.concat(/** @type {?} */parsedExp.errors);return null;}var/** @type {?} */sourceSpan=new ParseSourceSpan(value.sourceSpan.start,end.sourceSpan.end);var/** @type {?} */expSourceSpan=new ParseSourceSpan(start.sourceSpan.start,end.sourceSpan.end);return new ExpansionCase(value.parts[0],parsedExp.rootNodes,sourceSpan,value.sourceSpan,expSourceSpan);}/**
     * @param {?} start
     * @return {?}
     */},{key:'_collectExpansionExpTokens',value:function _collectExpansionExpTokens(start){var/** @type {?} */exp=[];var/** @type {?} */expansionFormStack=[TokenType$1.EXPANSION_CASE_EXP_START];while(true){if(this._peek.type===TokenType$1.EXPANSION_FORM_START||this._peek.type===TokenType$1.EXPANSION_CASE_EXP_START){expansionFormStack.push(this._peek.type);}if(this._peek.type===TokenType$1.EXPANSION_CASE_EXP_END){if(lastOnStack(expansionFormStack,TokenType$1.EXPANSION_CASE_EXP_START)){expansionFormStack.pop();if(expansionFormStack.length==0)return exp;}else{this._errors.push(TreeError.create(null,start.sourceSpan,'Invalid ICU message. Missing \'}\'.'));return null;}}if(this._peek.type===TokenType$1.EXPANSION_FORM_END){if(lastOnStack(expansionFormStack,TokenType$1.EXPANSION_FORM_START)){expansionFormStack.pop();}else{this._errors.push(TreeError.create(null,start.sourceSpan,'Invalid ICU message. Missing \'}\'.'));return null;}}if(this._peek.type===TokenType$1.EOF){this._errors.push(TreeError.create(null,start.sourceSpan,'Invalid ICU message. Missing \'}\'.'));return null;}exp.push(this._advance());}}/**
     * @param {?} token
     * @return {?}
     */},{key:'_consumeText',value:function _consumeText(token){var/** @type {?} */text=token.parts[0];if(text.length>0&&text[0]=='\n'){var/** @type {?} */parent=this._getParentElement();if(isPresent(parent)&&parent.children.length==0&&this.getTagDefinition(parent.name).ignoreFirstLf){text=text.substring(1);}}if(text.length>0){this._addToParent(new Text(text,token.sourceSpan));}}/**
     * @return {?}
     */},{key:'_closeVoidElement',value:function _closeVoidElement(){if(this._elementStack.length>0){var/** @type {?} */el=this._elementStack[this._elementStack.length-1];if(this.getTagDefinition(el.name).isVoid){this._elementStack.pop();}}}/**
     * @param {?} startTagToken
     * @return {?}
     */},{key:'_consumeStartTag',value:function _consumeStartTag(startTagToken){var/** @type {?} */prefix=startTagToken.parts[0];var/** @type {?} */name=startTagToken.parts[1];var/** @type {?} */attrs=[];while(this._peek.type===TokenType$1.ATTR_NAME){attrs.push(this._consumeAttr(this._advance()));}var/** @type {?} */fullName=this._getElementFullName(prefix,name,this._getParentElement());var/** @type {?} */selfClosing=false;// Note: There could have been a tokenizer error
// so that we don't get a token for the end tag...
if(this._peek.type===TokenType$1.TAG_OPEN_END_VOID){this._advance();selfClosing=true;var/** @type {?} */tagDef=this.getTagDefinition(fullName);if(!(tagDef.canSelfClose||getNsPrefix(fullName)!==null||tagDef.isVoid)){this._errors.push(TreeError.create(fullName,startTagToken.sourceSpan,'Only void and foreign elements can be self closed "'+startTagToken.parts[1]+'"'));}}else if(this._peek.type===TokenType$1.TAG_OPEN_END){this._advance();selfClosing=false;}var/** @type {?} */end=this._peek.sourceSpan.start;var/** @type {?} */span=new ParseSourceSpan(startTagToken.sourceSpan.start,end);var/** @type {?} */el=new Element(fullName,attrs,[],span,span,null);this._pushElement(el);if(selfClosing){this._popElement(fullName);el.endSourceSpan=span;}}/**
     * @param {?} el
     * @return {?}
     */},{key:'_pushElement',value:function _pushElement(el){if(this._elementStack.length>0){var/** @type {?} */parentEl=this._elementStack[this._elementStack.length-1];if(this.getTagDefinition(parentEl.name).isClosedByChild(el.name)){this._elementStack.pop();}}var/** @type {?} */tagDef=this.getTagDefinition(el.name);var _getParentElementSkip=this._getParentElementSkippingContainers(),parent=_getParentElementSkip.parent,container=_getParentElementSkip.container;if(parent&&tagDef.requireExtraParent(parent.name)){var/** @type {?} */newParent=new Element(tagDef.parentToAdd,[],[],el.sourceSpan,el.startSourceSpan,el.endSourceSpan);this._insertBeforeContainer(parent,container,newParent);}this._addToParent(el);this._elementStack.push(el);}/**
     * @param {?} endTagToken
     * @return {?}
     */},{key:'_consumeEndTag',value:function _consumeEndTag(endTagToken){var/** @type {?} */fullName=this._getElementFullName(endTagToken.parts[0],endTagToken.parts[1],this._getParentElement());if(this._getParentElement()){this._getParentElement().endSourceSpan=endTagToken.sourceSpan;}if(this.getTagDefinition(fullName).isVoid){this._errors.push(TreeError.create(fullName,endTagToken.sourceSpan,'Void elements do not have end tags "'+endTagToken.parts[1]+'"'));}else if(!this._popElement(fullName)){this._errors.push(TreeError.create(fullName,endTagToken.sourceSpan,'Unexpected closing tag "'+endTagToken.parts[1]+'"'));}}/**
     * @param {?} fullName
     * @return {?}
     */},{key:'_popElement',value:function _popElement(fullName){for(var/** @type {?} */stackIndex=this._elementStack.length-1;stackIndex>=0;stackIndex--){var/** @type {?} */el=this._elementStack[stackIndex];if(el.name==fullName){this._elementStack.splice(stackIndex,this._elementStack.length-stackIndex);return true;}if(!this.getTagDefinition(el.name).closedByParent){return false;}}return false;}/**
     * @param {?} attrName
     * @return {?}
     */},{key:'_consumeAttr',value:function _consumeAttr(attrName){var/** @type {?} */fullName=mergeNsAndName(attrName.parts[0],attrName.parts[1]);var/** @type {?} */end=attrName.sourceSpan.end;var/** @type {?} */value='';var/** @type {?} */valueSpan=void 0;if(this._peek.type===TokenType$1.ATTR_VALUE){var/** @type {?} */valueToken=this._advance();value=valueToken.parts[0];end=valueToken.sourceSpan.end;valueSpan=valueToken.sourceSpan;}return new Attribute$1(fullName,value,new ParseSourceSpan(attrName.sourceSpan.start,end),valueSpan);}/**
     * @return {?}
     */},{key:'_getParentElement',value:function _getParentElement(){return this._elementStack.length>0?this._elementStack[this._elementStack.length-1]:null;}/**
     * Returns the parent in the DOM and the container.
     *
     * `<ng-container>` elements are skipped as they are not rendered as DOM element.
     * @return {?}
     */},{key:'_getParentElementSkippingContainers',value:function _getParentElementSkippingContainers(){var/** @type {?} */container=null;for(var/** @type {?} */i=this._elementStack.length-1;i>=0;i--){if(this._elementStack[i].name!=='ng-container'){return{parent:this._elementStack[i],container:container};}container=this._elementStack[i];}return{parent:this._elementStack[this._elementStack.length-1],container:container};}/**
     * @param {?} node
     * @return {?}
     */},{key:'_addToParent',value:function _addToParent(node){var/** @type {?} */parent=this._getParentElement();if(isPresent(parent)){parent.children.push(node);}else{this._rootNodes.push(node);}}/**
     * Insert a node between the parent and the container.
     * When no container is given, the node is appended as a child of the parent.
     * Also updates the element stack accordingly.
     *
     * \@internal
     * @param {?} parent
     * @param {?} container
     * @param {?} node
     * @return {?}
     */},{key:'_insertBeforeContainer',value:function _insertBeforeContainer(parent,container,node){if(!container){this._addToParent(node);this._elementStack.push(node);}else{if(parent){// replace the container with the new node in the children
var/** @type {?} */index=parent.children.indexOf(container);parent.children[index]=node;}else{this._rootNodes.push(node);}node.children.push(container);this._elementStack.splice(this._elementStack.indexOf(container),0,node);}}/**
     * @param {?} prefix
     * @param {?} localName
     * @param {?} parentElement
     * @return {?}
     */},{key:'_getElementFullName',value:function _getElementFullName(prefix,localName,parentElement){if(isBlank(prefix)){prefix=this.getTagDefinition(localName).implicitNamespacePrefix;if(isBlank(prefix)&&isPresent(parentElement)){prefix=getNsPrefix(parentElement.name);}}return mergeNsAndName(prefix,localName);}}]);return _TreeBuilder;}();/**
 * @param {?} stack
 * @param {?} element
 * @return {?}
 */function lastOnStack(stack,element){return stack.length>0&&stack[stack.length-1]===element;}/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */var Message=/**
     * @param {?} nodes message AST
     * @param {?} placeholders maps placeholder names to static content
     * @param {?} placeholderToMessage maps placeholder names to messages (used for nested ICU messages)
     * @param {?} meaning
     * @param {?} description
     * @param {?} id
     */function Message(nodes,placeholders,placeholderToMessage,meaning,description,id){_classCallCheck(this,Message);this.nodes=nodes;this.placeholders=placeholders;this.placeholderToMessage=placeholderToMessage;this.meaning=meaning;this.description=description;this.id=id;};var Text$1=function(){/**
     * @param {?} value
     * @param {?} sourceSpan
     */function Text$1(value,sourceSpan){_classCallCheck(this,Text$1);this.value=value;this.sourceSpan=sourceSpan;}/**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */_createClass(Text$1,[{key:'visit',value:function visit(visitor,context){return visitor.visitText(this,context);}}]);return Text$1;}();var Container=function(){/**
     * @param {?} children
     * @param {?} sourceSpan
     */function Container(children,sourceSpan){_classCallCheck(this,Container);this.children=children;this.sourceSpan=sourceSpan;}/**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */_createClass(Container,[{key:'visit',value:function visit(visitor,context){return visitor.visitContainer(this,context);}}]);return Container;}();var Icu=function(){/**
     * @param {?} expression
     * @param {?} type
     * @param {?} cases
     * @param {?} sourceSpan
     */function Icu(expression,type,cases,sourceSpan){_classCallCheck(this,Icu);this.expression=expression;this.type=type;this.cases=cases;this.sourceSpan=sourceSpan;}/**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */_createClass(Icu,[{key:'visit',value:function visit(visitor,context){return visitor.visitIcu(this,context);}}]);return Icu;}();var TagPlaceholder=function(){/**
     * @param {?} tag
     * @param {?} attrs
     * @param {?} startName
     * @param {?} closeName
     * @param {?} children
     * @param {?} isVoid
     * @param {?} sourceSpan
     */function TagPlaceholder(tag,attrs,startName,closeName,children,isVoid,sourceSpan){_classCallCheck(this,TagPlaceholder);this.tag=tag;this.attrs=attrs;this.startName=startName;this.closeName=closeName;this.children=children;this.isVoid=isVoid;this.sourceSpan=sourceSpan;}/**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */_createClass(TagPlaceholder,[{key:'visit',value:function visit(visitor,context){return visitor.visitTagPlaceholder(this,context);}}]);return TagPlaceholder;}();var Placeholder=function(){/**
     * @param {?} value
     * @param {?} name
     * @param {?} sourceSpan
     */function Placeholder(value,name,sourceSpan){_classCallCheck(this,Placeholder);this.value=value;this.name=name;this.sourceSpan=sourceSpan;}/**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */_createClass(Placeholder,[{key:'visit',value:function visit(visitor,context){return visitor.visitPlaceholder(this,context);}}]);return Placeholder;}();var IcuPlaceholder=function(){/**
     * @param {?} value
     * @param {?} name
     * @param {?} sourceSpan
     */function IcuPlaceholder(value,name,sourceSpan){_classCallCheck(this,IcuPlaceholder);this.value=value;this.name=name;this.sourceSpan=sourceSpan;}/**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */_createClass(IcuPlaceholder,[{key:'visit',value:function visit(visitor,context){return visitor.visitIcuPlaceholder(this,context);}}]);return IcuPlaceholder;}();var CloneVisitor=function(){function CloneVisitor(){_classCallCheck(this,CloneVisitor);}_createClass(CloneVisitor,[{key:'visitText',/**
     * @param {?} text
     * @param {?=} context
     * @return {?}
     */value:function visitText(text,context){return new Text$1(text.value,text.sourceSpan);}/**
     * @param {?} container
     * @param {?=} context
     * @return {?}
     */},{key:'visitContainer',value:function visitContainer(container,context){var _this40=this;var/** @type {?} */children=container.children.map(function(n){return n.visit(_this40,context);});return new Container(children,container.sourceSpan);}/**
     * @param {?} icu
     * @param {?=} context
     * @return {?}
     */},{key:'visitIcu',value:function visitIcu(icu,context){var _this41=this;var/** @type {?} */cases={};Object.keys(icu.cases).forEach(function(key){return cases[key]=icu.cases[key].visit(_this41,context);});var/** @type {?} */msg=new Icu(icu.expression,icu.type,cases,icu.sourceSpan);msg.expressionPlaceholder=icu.expressionPlaceholder;return msg;}/**
     * @param {?} ph
     * @param {?=} context
     * @return {?}
     */},{key:'visitTagPlaceholder',value:function visitTagPlaceholder(ph,context){var _this42=this;var/** @type {?} */children=ph.children.map(function(n){return n.visit(_this42,context);});return new TagPlaceholder(ph.tag,ph.attrs,ph.startName,ph.closeName,children,ph.isVoid,ph.sourceSpan);}/**
     * @param {?} ph
     * @param {?=} context
     * @return {?}
     */},{key:'visitPlaceholder',value:function visitPlaceholder(ph,context){return new Placeholder(ph.value,ph.name,ph.sourceSpan);}/**
     * @param {?} ph
     * @param {?=} context
     * @return {?}
     */},{key:'visitIcuPlaceholder',value:function visitIcuPlaceholder(ph,context){return new IcuPlaceholder(ph.value,ph.name,ph.sourceSpan);}}]);return CloneVisitor;}();var RecurseVisitor=function(){function RecurseVisitor(){_classCallCheck(this,RecurseVisitor);}_createClass(RecurseVisitor,[{key:'visitText',/**
     * @param {?} text
     * @param {?=} context
     * @return {?}
     */value:function visitText(text,context){}},{key:'visitContainer',/**
     * @param {?} container
     * @param {?=} context
     * @return {?}
     */value:function visitContainer(container,context){var _this43=this;container.children.forEach(function(child){return child.visit(_this43);});}/**
     * @param {?} icu
     * @param {?=} context
     * @return {?}
     */},{key:'visitIcu',value:function visitIcu(icu,context){var _this44=this;Object.keys(icu.cases).forEach(function(k){icu.cases[k].visit(_this44);});}/**
     * @param {?} ph
     * @param {?=} context
     * @return {?}
     */},{key:'visitTagPlaceholder',value:function visitTagPlaceholder(ph,context){var _this45=this;ph.children.forEach(function(child){return child.visit(_this45);});}/**
     * @param {?} ph
     * @param {?=} context
     * @return {?}
     */},{key:'visitPlaceholder',value:function visitPlaceholder(ph,context){}},{key:'visitIcuPlaceholder',/**
     * @param {?} ph
     * @param {?=} context
     * @return {?}
     */value:function visitIcuPlaceholder(ph,context){}}]);return RecurseVisitor;}();/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */var/** @type {?} */TAG_TO_PLACEHOLDER_NAMES={'A':'LINK','B':'BOLD_TEXT','BR':'LINE_BREAK','EM':'EMPHASISED_TEXT','H1':'HEADING_LEVEL1','H2':'HEADING_LEVEL2','H3':'HEADING_LEVEL3','H4':'HEADING_LEVEL4','H5':'HEADING_LEVEL5','H6':'HEADING_LEVEL6','HR':'HORIZONTAL_RULE','I':'ITALIC_TEXT','LI':'LIST_ITEM','LINK':'MEDIA_LINK','OL':'ORDERED_LIST','P':'PARAGRAPH','Q':'QUOTATION','S':'STRIKETHROUGH_TEXT','SMALL':'SMALL_TEXT','SUB':'SUBSTRIPT','SUP':'SUPERSCRIPT','TBODY':'TABLE_BODY','TD':'TABLE_CELL','TFOOT':'TABLE_FOOTER','TH':'TABLE_HEADER_CELL','THEAD':'TABLE_HEADER','TR':'TABLE_ROW','TT':'MONOSPACED_TEXT','U':'UNDERLINED_TEXT','UL':'UNORDERED_LIST'};/**
 * Creates unique names for placeholder with different content.
 *
 * Returns the same placeholder name when the content is identical.
 *
 * \@internal
 */var PlaceholderRegistry=function(){function PlaceholderRegistry(){_classCallCheck(this,PlaceholderRegistry);this._placeHolderNameCounts={};this._signatureToName={};}/**
     * @param {?} tag
     * @param {?} attrs
     * @param {?} isVoid
     * @return {?}
     */_createClass(PlaceholderRegistry,[{key:'getStartTagPlaceholderName',value:function getStartTagPlaceholderName(tag,attrs,isVoid){var/** @type {?} */signature=this._hashTag(tag,attrs,isVoid);if(this._signatureToName[signature]){return this._signatureToName[signature];}var/** @type {?} */upperTag=tag.toUpperCase();var/** @type {?} */baseName=TAG_TO_PLACEHOLDER_NAMES[upperTag]||'TAG_'+upperTag;var/** @type {?} */name=this._generateUniqueName(isVoid?baseName:'START_'+baseName);this._signatureToName[signature]=name;return name;}/**
     * @param {?} tag
     * @return {?}
     */},{key:'getCloseTagPlaceholderName',value:function getCloseTagPlaceholderName(tag){var/** @type {?} */signature=this._hashClosingTag(tag);if(this._signatureToName[signature]){return this._signatureToName[signature];}var/** @type {?} */upperTag=tag.toUpperCase();var/** @type {?} */baseName=TAG_TO_PLACEHOLDER_NAMES[upperTag]||'TAG_'+upperTag;var/** @type {?} */name=this._generateUniqueName('CLOSE_'+baseName);this._signatureToName[signature]=name;return name;}/**
     * @param {?} name
     * @param {?} content
     * @return {?}
     */},{key:'getPlaceholderName',value:function getPlaceholderName(name,content){var/** @type {?} */upperName=name.toUpperCase();var/** @type {?} */signature='PH: '+upperName+'='+content;if(this._signatureToName[signature]){return this._signatureToName[signature];}var/** @type {?} */uniqueName=this._generateUniqueName(upperName);this._signatureToName[signature]=uniqueName;return uniqueName;}/**
     * @param {?} name
     * @return {?}
     */},{key:'getUniquePlaceholder',value:function getUniquePlaceholder(name){return this._generateUniqueName(name.toUpperCase());}/**
     * @param {?} tag
     * @param {?} attrs
     * @param {?} isVoid
     * @return {?}
     */},{key:'_hashTag',value:function _hashTag(tag,attrs,isVoid){var/** @type {?} */start='<'+tag;var/** @type {?} */strAttrs=Object.keys(attrs).sort().map(function(name){return' '+name+'='+attrs[name];}).join('');var/** @type {?} */end=isVoid?'/>':'></'+tag+'>';return start+strAttrs+end;}/**
     * @param {?} tag
     * @return {?}
     */},{key:'_hashClosingTag',value:function _hashClosingTag(tag){return this._hashTag('/'+tag,{},false);}/**
     * @param {?} base
     * @return {?}
     */},{key:'_generateUniqueName',value:function _generateUniqueName(base){var/** @type {?} */seen=this._placeHolderNameCounts.hasOwnProperty(base);if(!seen){this._placeHolderNameCounts[base]=1;return base;}var/** @type {?} */id=this._placeHolderNameCounts[base];this._placeHolderNameCounts[base]=id+1;return base+'_'+id;}}]);return PlaceholderRegistry;}();var/** @type {?} */_expParser=new Parser(new Lexer());/**
 * Returns a function converting html nodes to an i18n Message given an interpolationConfig
 * @param {?} interpolationConfig
 * @return {?}
 */function createI18nMessageFactory(interpolationConfig){var/** @type {?} */visitor=new _I18nVisitor(_expParser,interpolationConfig);return function(nodes,meaning,description,id){return visitor.toI18nMessage(nodes,meaning,description,id);};}var _I18nVisitor=function(){/**
     * @param {?} _expressionParser
     * @param {?} _interpolationConfig
     */function _I18nVisitor(_expressionParser,_interpolationConfig){_classCallCheck(this,_I18nVisitor);this._expressionParser=_expressionParser;this._interpolationConfig=_interpolationConfig;}/**
     * @param {?} nodes
     * @param {?} meaning
     * @param {?} description
     * @param {?} id
     * @return {?}
     */_createClass(_I18nVisitor,[{key:'toI18nMessage',value:function toI18nMessage(nodes,meaning,description,id){this._isIcu=nodes.length==1&&nodes[0]instanceof Expansion;this._icuDepth=0;this._placeholderRegistry=new PlaceholderRegistry();this._placeholderToContent={};this._placeholderToMessage={};var/** @type {?} */i18nodes=visitAll(this,nodes,{});return new Message(i18nodes,this._placeholderToContent,this._placeholderToMessage,meaning,description,id);}/**
     * @param {?} el
     * @param {?} context
     * @return {?}
     */},{key:'visitElement',value:function visitElement(el,context){var/** @type {?} */children=visitAll(this,el.children);var/** @type {?} */attrs={};el.attrs.forEach(function(attr){// Do not visit the attributes, translatable ones are top-level ASTs
attrs[attr.name]=attr.value;});var/** @type {?} */isVoid=getHtmlTagDefinition(el.name).isVoid;var/** @type {?} */startPhName=this._placeholderRegistry.getStartTagPlaceholderName(el.name,attrs,isVoid);this._placeholderToContent[startPhName]=el.sourceSpan.toString();var/** @type {?} */closePhName='';if(!isVoid){closePhName=this._placeholderRegistry.getCloseTagPlaceholderName(el.name);this._placeholderToContent[closePhName]='</'+el.name+'>';}return new TagPlaceholder(el.name,attrs,startPhName,closePhName,children,isVoid,el.sourceSpan);}/**
     * @param {?} attribute
     * @param {?} context
     * @return {?}
     */},{key:'visitAttribute',value:function visitAttribute(attribute,context){return this._visitTextWithInterpolation(attribute.value,attribute.sourceSpan);}/**
     * @param {?} text
     * @param {?} context
     * @return {?}
     */},{key:'visitText',value:function visitText(text,context){return this._visitTextWithInterpolation(text.value,text.sourceSpan);}/**
     * @param {?} comment
     * @param {?} context
     * @return {?}
     */},{key:'visitComment',value:function visitComment(comment,context){return null;}/**
     * @param {?} icu
     * @param {?} context
     * @return {?}
     */},{key:'visitExpansion',value:function visitExpansion(icu,context){var _this46=this;this._icuDepth++;var/** @type {?} */i18nIcuCases={};var/** @type {?} */i18nIcu=new Icu(icu.switchValue,icu.type,i18nIcuCases,icu.sourceSpan);icu.cases.forEach(function(caze){i18nIcuCases[caze.value]=new Container(caze.expression.map(function(node){return node.visit(_this46,{});}),caze.expSourceSpan);});this._icuDepth--;if(this._isIcu||this._icuDepth>0){// Returns an ICU node when:
// - the message (vs a part of the message) is an ICU message, or
// - the ICU message is nested.
var/** @type {?} */expPh=this._placeholderRegistry.getUniquePlaceholder('VAR_'+icu.type);i18nIcu.expressionPlaceholder=expPh;this._placeholderToContent[expPh]=icu.switchValue;return i18nIcu;}// Else returns a placeholder
// ICU placeholders should not be replaced with their original content but with the their
// translations. We need to create a new visitor (they are not re-entrant) to compute the
// message id.
// TODO(vicb): add a html.Node -> i18n.Message cache to avoid having to re-create the msg
var/** @type {?} */phName=this._placeholderRegistry.getPlaceholderName('ICU',icu.sourceSpan.toString());var/** @type {?} */visitor=new _I18nVisitor(this._expressionParser,this._interpolationConfig);this._placeholderToMessage[phName]=visitor.toI18nMessage([icu],'','','');return new IcuPlaceholder(i18nIcu,phName,icu.sourceSpan);}/**
     * @param {?} icuCase
     * @param {?} context
     * @return {?}
     */},{key:'visitExpansionCase',value:function visitExpansionCase(icuCase,context){throw new Error('Unreachable code');}/**
     * @param {?} text
     * @param {?} sourceSpan
     * @return {?}
     */},{key:'_visitTextWithInterpolation',value:function _visitTextWithInterpolation(text,sourceSpan){var/** @type {?} */splitInterpolation=this._expressionParser.splitInterpolation(text,sourceSpan.start.toString(),this._interpolationConfig);if(!splitInterpolation){// No expression, return a single text
return new Text$1(text,sourceSpan);}// Return a group of text + expressions
var/** @type {?} */nodes=[];var/** @type {?} */container=new Container(nodes,sourceSpan);var _interpolationConfig2=this._interpolationConfig,sDelimiter=_interpolationConfig2.start,eDelimiter=_interpolationConfig2.end;for(var/** @type {?} */i=0;i<splitInterpolation.strings.length-1;i++){var/** @type {?} */expression=splitInterpolation.expressions[i];var/** @type {?} */baseName=_extractPlaceholderName(expression)||'INTERPOLATION';var/** @type {?} */phName=this._placeholderRegistry.getPlaceholderName(baseName,expression);if(splitInterpolation.strings[i].length){// No need to add empty strings
nodes.push(new Text$1(splitInterpolation.strings[i],sourceSpan));}nodes.push(new Placeholder(expression,phName,sourceSpan));this._placeholderToContent[phName]=sDelimiter+expression+eDelimiter;}// The last index contains no expression
var/** @type {?} */lastStringIdx=splitInterpolation.strings.length-1;if(splitInterpolation.strings[lastStringIdx].length){nodes.push(new Text$1(splitInterpolation.strings[lastStringIdx],sourceSpan));}return container;}}]);return _I18nVisitor;}();var/** @type {?} */_CUSTOM_PH_EXP=/\/\/[\s\S]*i18n[\s\S]*\([\s\S]*ph[\s\S]*=[\s\S]*"([\s\S]*?)"[\s\S]*\)/g;/**
 * @param {?} input
 * @return {?}
 */function _extractPlaceholderName(input){return input.split(_CUSTOM_PH_EXP)[1];}/**
 * An i18n error.
 */var I18nError=function(_ParseError3){_inherits(I18nError,_ParseError3);/**
     * @param {?} span
     * @param {?} msg
     */function I18nError(span,msg){_classCallCheck(this,I18nError);return _possibleConstructorReturn(this,(I18nError.__proto__||Object.getPrototypeOf(I18nError)).call(this,span,msg));}return I18nError;}(ParseError);var/** @type {?} */_I18N_ATTR='i18n';var/** @type {?} */_I18N_ATTR_PREFIX='i18n-';var/** @type {?} */_I18N_COMMENT_PREFIX_REGEXP=/^i18n:?/;var/** @type {?} */MEANING_SEPARATOR='|';var/** @type {?} */ID_SEPARATOR='@@';/**
 * Extract translatable messages from an html AST
 * @param {?} nodes
 * @param {?} interpolationConfig
 * @param {?} implicitTags
 * @param {?} implicitAttrs
 * @return {?}
 */function extractMessages(nodes,interpolationConfig,implicitTags,implicitAttrs){var/** @type {?} */visitor=new _Visitor(implicitTags,implicitAttrs);return visitor.extract(nodes,interpolationConfig);}/**
 * @param {?} nodes
 * @param {?} translations
 * @param {?} interpolationConfig
 * @param {?} implicitTags
 * @param {?} implicitAttrs
 * @return {?}
 */function mergeTranslations(nodes,translations,interpolationConfig,implicitTags,implicitAttrs){var/** @type {?} */visitor=new _Visitor(implicitTags,implicitAttrs);return visitor.merge(nodes,translations,interpolationConfig);}var ExtractionResult=/**
     * @param {?} messages
     * @param {?} errors
     */function ExtractionResult(messages,errors){_classCallCheck(this,ExtractionResult);this.messages=messages;this.errors=errors;};var _VisitorMode={};_VisitorMode.Extract=0;_VisitorMode.Merge=1;_VisitorMode[_VisitorMode.Extract]="Extract";_VisitorMode[_VisitorMode.Merge]="Merge";/**
 * This Visitor is used:
 * 1. to extract all the translatable strings from an html AST (see `extract()`),
 * 2. to replace the translatable strings with the actual translations (see `merge()`)
 *
 * \@internal
 */var _Visitor=function(){/**
     * @param {?} _implicitTags
     * @param {?} _implicitAttrs
     */function _Visitor(_implicitTags,_implicitAttrs){_classCallCheck(this,_Visitor);this._implicitTags=_implicitTags;this._implicitAttrs=_implicitAttrs;}/**
     * Extracts the messages from the tree
     * @param {?} nodes
     * @param {?} interpolationConfig
     * @return {?}
     */_createClass(_Visitor,[{key:'extract',value:function extract(nodes,interpolationConfig){var _this48=this;this._init(_VisitorMode.Extract,interpolationConfig);nodes.forEach(function(node){return node.visit(_this48,null);});if(this._inI18nBlock){this._reportError(nodes[nodes.length-1],'Unclosed block');}return new ExtractionResult(this._messages,this._errors);}/**
     * Returns a tree where all translatable nodes are translated
     * @param {?} nodes
     * @param {?} translations
     * @param {?} interpolationConfig
     * @return {?}
     */},{key:'merge',value:function merge(nodes,translations,interpolationConfig){this._init(_VisitorMode.Merge,interpolationConfig);this._translations=translations;// Construct a single fake root element
var/** @type {?} */wrapper=new Element('wrapper',[],nodes,null,null,null);var/** @type {?} */translatedNode=wrapper.visit(this,null);if(this._inI18nBlock){this._reportError(nodes[nodes.length-1],'Unclosed block');}return new ParseTreeResult(translatedNode.children,this._errors);}/**
     * @param {?} icuCase
     * @param {?} context
     * @return {?}
     */},{key:'visitExpansionCase',value:function visitExpansionCase(icuCase,context){// Parse cases for translatable html attributes
var/** @type {?} */expression=visitAll(this,icuCase.expression,context);if(this._mode===_VisitorMode.Merge){return new ExpansionCase(icuCase.value,expression,icuCase.sourceSpan,icuCase.valueSourceSpan,icuCase.expSourceSpan);}}/**
     * @param {?} icu
     * @param {?} context
     * @return {?}
     */},{key:'visitExpansion',value:function visitExpansion(icu,context){this._mayBeAddBlockChildren(icu);var/** @type {?} */wasInIcu=this._inIcu;if(!this._inIcu){// nested ICU messages should not be extracted but top-level translated as a whole
if(this._isInTranslatableSection){this._addMessage([icu]);}this._inIcu=true;}var/** @type {?} */cases=visitAll(this,icu.cases,context);if(this._mode===_VisitorMode.Merge){icu=new Expansion(icu.switchValue,icu.type,cases,icu.sourceSpan,icu.switchValueSourceSpan);}this._inIcu=wasInIcu;return icu;}/**
     * @param {?} comment
     * @param {?} context
     * @return {?}
     */},{key:'visitComment',value:function visitComment(comment,context){var/** @type {?} */isOpening=_isOpeningComment(comment);if(isOpening&&this._isInTranslatableSection){this._reportError(comment,'Could not start a block inside a translatable section');return;}var/** @type {?} */isClosing=_isClosingComment(comment);if(isClosing&&!this._inI18nBlock){this._reportError(comment,'Trying to close an unopened block');return;}if(!this._inI18nNode&&!this._inIcu){if(!this._inI18nBlock){if(isOpening){this._inI18nBlock=true;this._blockStartDepth=this._depth;this._blockChildren=[];this._blockMeaningAndDesc=comment.value.replace(_I18N_COMMENT_PREFIX_REGEXP,'').trim();this._openTranslatableSection(comment);}}else{if(isClosing){if(this._depth==this._blockStartDepth){this._closeTranslatableSection(comment,this._blockChildren);this._inI18nBlock=false;var/** @type {?} */message=this._addMessage(this._blockChildren,this._blockMeaningAndDesc);// merge attributes in sections
var/** @type {?} */nodes=this._translateMessage(comment,message);return visitAll(this,nodes);}else{this._reportError(comment,'I18N blocks should not cross element boundaries');return;}}}}}/**
     * @param {?} text
     * @param {?} context
     * @return {?}
     */},{key:'visitText',value:function visitText(text,context){if(this._isInTranslatableSection){this._mayBeAddBlockChildren(text);}return text;}/**
     * @param {?} el
     * @param {?} context
     * @return {?}
     */},{key:'visitElement',value:function visitElement(el,context){var _this49=this;this._mayBeAddBlockChildren(el);this._depth++;var/** @type {?} */wasInI18nNode=this._inI18nNode;var/** @type {?} */wasInImplicitNode=this._inImplicitNode;var/** @type {?} */childNodes=[];var/** @type {?} */translatedChildNodes=void 0;// Extract:
// - top level nodes with the (implicit) "i18n" attribute if not already in a section
// - ICU messages
var/** @type {?} */i18nAttr=_getI18nAttr(el);var/** @type {?} */i18nMeta=i18nAttr?i18nAttr.value:'';var/** @type {?} */isImplicit=this._implicitTags.some(function(tag){return el.name===tag;})&&!this._inIcu&&!this._isInTranslatableSection;var/** @type {?} */isTopLevelImplicit=!wasInImplicitNode&&isImplicit;this._inImplicitNode=wasInImplicitNode||isImplicit;if(!this._isInTranslatableSection&&!this._inIcu){if(i18nAttr||isTopLevelImplicit){this._inI18nNode=true;var/** @type {?} */message=this._addMessage(el.children,i18nMeta);translatedChildNodes=this._translateMessage(el,message);}if(this._mode==_VisitorMode.Extract){var/** @type {?} */isTranslatable=i18nAttr||isTopLevelImplicit;if(isTranslatable)this._openTranslatableSection(el);visitAll(this,el.children);if(isTranslatable)this._closeTranslatableSection(el,el.children);}}else{if(i18nAttr||isTopLevelImplicit){this._reportError(el,'Could not mark an element as translatable inside a translatable section');}if(this._mode==_VisitorMode.Extract){// Descend into child nodes for extraction
visitAll(this,el.children);}}if(this._mode===_VisitorMode.Merge){var/** @type {?} */visitNodes=translatedChildNodes||el.children;visitNodes.forEach(function(child){var/** @type {?} */visited=child.visit(_this49,context);if(visited&&!_this49._isInTranslatableSection){// Do not add the children from translatable sections (= i18n blocks here)
// They will be added later in this loop when the block closes (i.e. on `<!-- /i18n -->`)
childNodes=childNodes.concat(visited);}});}this._visitAttributesOf(el);this._depth--;this._inI18nNode=wasInI18nNode;this._inImplicitNode=wasInImplicitNode;if(this._mode===_VisitorMode.Merge){var/** @type {?} */translatedAttrs=this._translateAttributes(el);return new Element(el.name,translatedAttrs,childNodes,el.sourceSpan,el.startSourceSpan,el.endSourceSpan);}}/**
     * @param {?} attribute
     * @param {?} context
     * @return {?}
     */},{key:'visitAttribute',value:function visitAttribute(attribute,context){throw new Error('unreachable code');}/**
     * @param {?} mode
     * @param {?} interpolationConfig
     * @return {?}
     */},{key:'_init',value:function _init(mode,interpolationConfig){this._mode=mode;this._inI18nBlock=false;this._inI18nNode=false;this._depth=0;this._inIcu=false;this._msgCountAtSectionStart=void 0;this._errors=[];this._messages=[];this._inImplicitNode=false;this._createI18nMessage=createI18nMessageFactory(interpolationConfig);}/**
     * @param {?} el
     * @return {?}
     */},{key:'_visitAttributesOf',value:function _visitAttributesOf(el){var _this50=this;var/** @type {?} */explicitAttrNameToValue={};var/** @type {?} */implicitAttrNames=this._implicitAttrs[el.name]||[];el.attrs.filter(function(attr){return attr.name.startsWith(_I18N_ATTR_PREFIX);}).forEach(function(attr){return explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)]=attr.value;});el.attrs.forEach(function(attr){if(attr.name in explicitAttrNameToValue){_this50._addMessage([attr],explicitAttrNameToValue[attr.name]);}else if(implicitAttrNames.some(function(name){return attr.name===name;})){_this50._addMessage([attr]);}});}/**
     * @param {?} ast
     * @param {?=} msgMeta
     * @return {?}
     */},{key:'_addMessage',value:function _addMessage(ast,msgMeta){if(ast.length==0||ast.length==1&&ast[0]instanceof Attribute$1&&!ast[0].value){// Do not create empty messages
return;}var _parseMessageMeta2=_parseMessageMeta(msgMeta),meaning=_parseMessageMeta2.meaning,description=_parseMessageMeta2.description,id=_parseMessageMeta2.id;var/** @type {?} */message=this._createI18nMessage(ast,meaning,description,id);this._messages.push(message);return message;}/**
     * @param {?} el
     * @param {?} message
     * @return {?}
     */},{key:'_translateMessage',value:function _translateMessage(el,message){if(message&&this._mode===_VisitorMode.Merge){var/** @type {?} */nodes=this._translations.get(message);if(nodes){return nodes;}this._reportError(el,'Translation unavailable for message id="'+this._translations.digest(message)+'"');}return[];}/**
     * @param {?} el
     * @return {?}
     */},{key:'_translateAttributes',value:function _translateAttributes(el){var _this51=this;var/** @type {?} */attributes=el.attrs;var/** @type {?} */i18nAttributeMeanings={};attributes.forEach(function(attr){if(attr.name.startsWith(_I18N_ATTR_PREFIX)){i18nAttributeMeanings[attr.name.slice(_I18N_ATTR_PREFIX.length)]=_parseMessageMeta(attr.value).meaning;}});var/** @type {?} */translatedAttributes=[];attributes.forEach(function(attr){if(attr.name===_I18N_ATTR||attr.name.startsWith(_I18N_ATTR_PREFIX)){// strip i18n specific attributes
return;}if(attr.value&&attr.value!=''&&i18nAttributeMeanings.hasOwnProperty(attr.name)){var/** @type {?} */meaning=i18nAttributeMeanings[attr.name];var/** @type {?} */message=_this51._createI18nMessage([attr],meaning,'','');var/** @type {?} */nodes=_this51._translations.get(message);if(nodes){if(nodes.length==0){translatedAttributes.push(new Attribute$1(attr.name,'',attr.sourceSpan));}else if(nodes[0]instanceof Text){var/** @type {?} */value=nodes[0].value;translatedAttributes.push(new Attribute$1(attr.name,value,attr.sourceSpan));}else{_this51._reportError(el,'Unexpected translation for attribute "'+attr.name+'" (id="'+_this51._translations.digest(message)+'")');}}else{_this51._reportError(el,'Translation unavailable for attribute "'+attr.name+'" (id="'+_this51._translations.digest(message)+'")');}}else{translatedAttributes.push(attr);}});return translatedAttributes;}/**
     * Add the node as a child of the block when:
     * - we are in a block,
     * - we are not inside a ICU message (those are handled separately),
     * - the node is a "direct child" of the block
     * @param {?} node
     * @return {?}
     */},{key:'_mayBeAddBlockChildren',value:function _mayBeAddBlockChildren(node){if(this._inI18nBlock&&!this._inIcu&&this._depth==this._blockStartDepth){this._blockChildren.push(node);}}/**
     * Marks the start of a section, see `_closeTranslatableSection`
     * @param {?} node
     * @return {?}
     */},{key:'_openTranslatableSection',value:function _openTranslatableSection(node){if(this._isInTranslatableSection){this._reportError(node,'Unexpected section start');}else{this._msgCountAtSectionStart=this._messages.length;}}/**
     * A translatable section could be:
     * - the content of translatable element,
     * - nodes between `<!-- i18n -->` and `<!-- /i18n -->` comments
     * @return {?}
     */},{key:'_closeTranslatableSection',/**
     * Terminates a section.
     *
     * If a section has only one significant children (comments not significant) then we should not
     * keep the message from this children:
     *
     * `<p i18n="meaning|description">{ICU message}</p>` would produce two messages:
     * - one for the <p> content with meaning and description,
     * - another one for the ICU message.
     *
     * In this case the last message is discarded as it contains less information (the AST is
     * otherwise identical).
     *
     * Note that we should still keep messages extracted from attributes inside the section (ie in the
     * ICU message here)
     * @param {?} node
     * @param {?} directChildren
     * @return {?}
     */value:function _closeTranslatableSection(node,directChildren){if(!this._isInTranslatableSection){this._reportError(node,'Unexpected section end');return;}var/** @type {?} */startIndex=this._msgCountAtSectionStart;var/** @type {?} */significantChildren=directChildren.reduce(function(count,node){return count+(node instanceof Comment?0:1);},0);if(significantChildren==1){for(var/** @type {?} */i=this._messages.length-1;i>=startIndex;i--){var/** @type {?} */ast=this._messages[i].nodes;if(!(ast.length==1&&ast[0]instanceof Text$1)){this._messages.splice(i,1);break;}}}this._msgCountAtSectionStart=void 0;}/**
     * @param {?} node
     * @param {?} msg
     * @return {?}
     */},{key:'_reportError',value:function _reportError(node,msg){this._errors.push(new I18nError(node.sourceSpan,msg));}},{key:'_isInTranslatableSection',get:function get(){return this._msgCountAtSectionStart!==void 0;}}]);return _Visitor;}();/**
 * @param {?} n
 * @return {?}
 */function _isOpeningComment(n){return n instanceof Comment&&n.value&&n.value.startsWith('i18n');}/**
 * @param {?} n
 * @return {?}
 */function _isClosingComment(n){return n instanceof Comment&&n.value&&n.value==='/i18n';}/**
 * @param {?} p
 * @return {?}
 */function _getI18nAttr(p){return p.attrs.find(function(attr){return attr.name===_I18N_ATTR;})||null;}/**
 * @param {?} i18n
 * @return {?}
 */function _parseMessageMeta(i18n){if(!i18n)return{meaning:'',description:'',id:''};var/** @type {?} */idIndex=i18n.indexOf(ID_SEPARATOR);var/** @type {?} */descIndex=i18n.indexOf(MEANING_SEPARATOR);var _ref10=idIndex>-1?[i18n.slice(0,idIndex),i18n.slice(idIndex+2)]:[i18n,''],_ref11=_slicedToArray(_ref10,2),meaningAndDesc=_ref11[0],id=_ref11[1];var _ref12=descIndex>-1?[meaningAndDesc.slice(0,descIndex),meaningAndDesc.slice(descIndex+1)]:['',meaningAndDesc],_ref13=_slicedToArray(_ref12,2),meaning=_ref13[0],description=_ref13[1];return{meaning:meaning,description:description,id:id};}var XmlTagDefinition=function(){function XmlTagDefinition(){_classCallCheck(this,XmlTagDefinition);this.closedByParent=false;this.contentType=TagContentType.PARSABLE_DATA;this.isVoid=false;this.ignoreFirstLf=false;this.canSelfClose=true;}/**
     * @param {?} currentParent
     * @return {?}
     */_createClass(XmlTagDefinition,[{key:'requireExtraParent',value:function requireExtraParent(currentParent){return false;}/**
     * @param {?} name
     * @return {?}
     */},{key:'isClosedByChild',value:function isClosedByChild(name){return false;}}]);return XmlTagDefinition;}();var/** @type {?} */_TAG_DEFINITION=new XmlTagDefinition();/**
 * @param {?} tagName
 * @return {?}
 */function getXmlTagDefinition(tagName){return _TAG_DEFINITION;}var XmlParser=function(_Parser$){_inherits(XmlParser,_Parser$);function XmlParser(){_classCallCheck(this,XmlParser);return _possibleConstructorReturn(this,(XmlParser.__proto__||Object.getPrototypeOf(XmlParser)).call(this,getXmlTagDefinition));}/**
     * @param {?} source
     * @param {?} url
     * @param {?=} parseExpansionForms
     * @return {?}
     */_createClass(XmlParser,[{key:'parse',value:function parse(source,url){var parseExpansionForms=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;return _get(XmlParser.prototype.__proto__||Object.getPrototypeOf(XmlParser.prototype),'parse',this).call(this,source,url,parseExpansionForms,null);}}]);return XmlParser;}(Parser$1);/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 *//**
 * @param {?} message
 * @return {?}
 */function _digest2(message){return message.id||sha1(serializeNodes(message.nodes).join('')+('['+message.meaning+']'));}/**
 * @param {?} message
 * @return {?}
 */function decimalDigest(message){if(message.id){return message.id;}var/** @type {?} */visitor=new _SerializerIgnoreIcuExpVisitor();var/** @type {?} */parts=message.nodes.map(function(a){return a.visit(visitor,null);});return computeMsgId(parts.join(''),message.meaning);}/**
 * Serialize the i18n ast to something xml-like in order to generate an UID.
 *
 * The visitor is also used in the i18n parser tests
 *
 * \@internal
 */var _SerializerVisitor=function(){function _SerializerVisitor(){_classCallCheck(this,_SerializerVisitor);}_createClass(_SerializerVisitor,[{key:'visitText',/**
     * @param {?} text
     * @param {?} context
     * @return {?}
     */value:function visitText(text,context){return text.value;}/**
     * @param {?} container
     * @param {?} context
     * @return {?}
     */},{key:'visitContainer',value:function visitContainer(container,context){var _this53=this;return'['+container.children.map(function(child){return child.visit(_this53);}).join(', ')+']';}/**
     * @param {?} icu
     * @param {?} context
     * @return {?}
     */},{key:'visitIcu',value:function visitIcu(icu,context){var _this54=this;var/** @type {?} */strCases=Object.keys(icu.cases).map(function(k){return k+' {'+icu.cases[k].visit(_this54)+'}';});return'{'+icu.expression+', '+icu.type+', '+strCases.join(', ')+'}';}/**
     * @param {?} ph
     * @param {?} context
     * @return {?}
     */},{key:'visitTagPlaceholder',value:function visitTagPlaceholder(ph,context){var _this55=this;return ph.isVoid?'<ph tag name="'+ph.startName+'"/>':'<ph tag name="'+ph.startName+'">'+ph.children.map(function(child){return child.visit(_this55);}).join(', ')+'</ph name="'+ph.closeName+'">';}/**
     * @param {?} ph
     * @param {?} context
     * @return {?}
     */},{key:'visitPlaceholder',value:function visitPlaceholder(ph,context){return ph.value?'<ph name="'+ph.name+'">'+ph.value+'</ph>':'<ph name="'+ph.name+'"/>';}/**
     * @param {?} ph
     * @param {?=} context
     * @return {?}
     */},{key:'visitIcuPlaceholder',value:function visitIcuPlaceholder(ph,context){return'<ph icu name="'+ph.name+'">'+ph.value.visit(this)+'</ph>';}}]);return _SerializerVisitor;}();var/** @type {?} */serializerVisitor=new _SerializerVisitor();/**
 * @param {?} nodes
 * @return {?}
 */function serializeNodes(nodes){return nodes.map(function(a){return a.visit(serializerVisitor,null);});}/**
 * Serialize the i18n ast to something xml-like in order to generate an UID.
 *
 * Ignore the ICU expressions so that message IDs stays identical if only the expression changes.
 *
 * \@internal
 */var _SerializerIgnoreIcuExpVisitor=function(_SerializerVisitor2){_inherits(_SerializerIgnoreIcuExpVisitor,_SerializerVisitor2);function _SerializerIgnoreIcuExpVisitor(){_classCallCheck(this,_SerializerIgnoreIcuExpVisitor);return _possibleConstructorReturn(this,(_SerializerIgnoreIcuExpVisitor.__proto__||Object.getPrototypeOf(_SerializerIgnoreIcuExpVisitor)).apply(this,arguments));}_createClass(_SerializerIgnoreIcuExpVisitor,[{key:'visitIcu',/**
     * @param {?} icu
     * @param {?} context
     * @return {?}
     */value:function visitIcu(icu,context){var _this57=this;var/** @type {?} */strCases=Object.keys(icu.cases).map(function(k){return k+' {'+icu.cases[k].visit(_this57)+'}';});// Do not take the expression into account
return'{'+icu.type+', '+strCases.join(', ')+'}';}}]);return _SerializerIgnoreIcuExpVisitor;}(_SerializerVisitor);/**
 * Compute the SHA1 of the given string
 *
 * see http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf
 *
 * WARNING: this function has not been designed not tested with security in mind.
 *          DO NOT USE IT IN A SECURITY SENSITIVE CONTEXT.
 * @param {?} str
 * @return {?}
 */function sha1(str){var/** @type {?} */utf8=utf8Encode(str);var/** @type {?} */words32=stringToWords32(utf8,Endian.Big);var/** @type {?} */len=utf8.length*8;var/** @type {?} */w=new Array(80);var a=0x67452301,b=0xefcdab89,c=0x98badcfe,d=0x10325476,e=0xc3d2e1f0;words32[len>>5]|=0x80<<24-len%32;words32[(len+64>>9<<4)+15]=len;for(var/** @type {?} */i=0;i<words32.length;i+=16){var h0=a,h1=b,h2=c,h3=d,h4=e;for(var/** @type {?} */j=0;j<80;j++){if(j<16){w[j]=words32[i+j];}else{w[j]=rol32(w[j-3]^w[j-8]^w[j-14]^w[j-16],1);}var _fk=fk(j,b,c,d),_fk2=_slicedToArray(_fk,2),f=_fk2[0],k=_fk2[1];var/** @type {?} */temp=[rol32(a,5),f,e,k,w[j]].reduce(add32);var _ref14=[d,c,rol32(b,30),a,temp];e=_ref14[0];d=_ref14[1];c=_ref14[2];b=_ref14[3];a=_ref14[4];}var _ref15=[add32(a,h0),add32(b,h1),add32(c,h2),add32(d,h3),add32(e,h4)];a=_ref15[0];b=_ref15[1];c=_ref15[2];d=_ref15[3];e=_ref15[4];}return byteStringToHexString(words32ToByteString([a,b,c,d,e]));}/**
 * @param {?} index
 * @param {?} b
 * @param {?} c
 * @param {?} d
 * @return {?}
 */function fk(index,b,c,d){if(index<20){return[b&c|~b&d,0x5a827999];}if(index<40){return[b^c^d,0x6ed9eba1];}if(index<60){return[b&c|b&d|c&d,0x8f1bbcdc];}return[b^c^d,0xca62c1d6];}/**
 * Compute the fingerprint of the given string
 *
 * The output is 64 bit number encoded as a decimal string
 *
 * based on:
 * https://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/GoogleJsMessageIdGenerator.java
 * @param {?} str
 * @return {?}
 */function fingerprint(str){var/** @type {?} */utf8=utf8Encode(str);var _ref16=[hash32(utf8,0),hash32(utf8,102072)],hi=_ref16[0],lo=_ref16[1];if(hi==0&&(lo==0||lo==1)){hi=hi^0x130f9bef;lo=lo^-0x6b5f56d8;}return[hi,lo];}/**
 * @param {?} msg
 * @param {?} meaning
 * @return {?}
 */function computeMsgId(msg,meaning){var _fingerprint=fingerprint(msg),_fingerprint2=_slicedToArray(_fingerprint,2),hi=_fingerprint2[0],lo=_fingerprint2[1];if(meaning){var _fingerprint3=fingerprint(meaning),_fingerprint4=_slicedToArray(_fingerprint3,2),him=_fingerprint4[0],lom=_fingerprint4[1];var _add=add64(rol64([hi,lo],1),[him,lom]);var _add2=_slicedToArray(_add,2);hi=_add2[0];lo=_add2[1];}return byteStringToDecString(words32ToByteString([hi&0x7fffffff,lo]));}/**
 * @param {?} str
 * @param {?} c
 * @return {?}
 */function hash32(str,c){var a=0x9e3779b9,b=0x9e3779b9;var/** @type {?} */i=void 0;var/** @type {?} */len=str.length;for(i=0;i+12<=len;i+=12){a=add32(a,wordAt(str,i,Endian.Little));b=add32(b,wordAt(str,i+4,Endian.Little));c=add32(c,wordAt(str,i+8,Endian.Little));var _mix=mix([a,b,c]);var _mix2=_slicedToArray(_mix,3);a=_mix2[0];b=_mix2[1];c=_mix2[2];}a=add32(a,wordAt(str,i,Endian.Little));b=add32(b,wordAt(str,i+4,Endian.Little));// the first byte of c is reserved for the length
c=add32(c,len);c=add32(c,wordAt(str,i+8,Endian.Little)<<8);return mix([a,b,c])[2];}/**
 * @param {?} __0
 * @return {?}
 */function mix(_ref17){var _ref18=_slicedToArray(_ref17,3),a=_ref18[0],b=_ref18[1],c=_ref18[2];a=sub32(a,b);a=sub32(a,c);a^=c>>>13;b=sub32(b,c);b=sub32(b,a);b^=a<<8;c=sub32(c,a);c=sub32(c,b);c^=b>>>13;a=sub32(a,b);a=sub32(a,c);a^=c>>>12;b=sub32(b,c);b=sub32(b,a);b^=a<<16;c=sub32(c,a);c=sub32(c,b);c^=b>>>5;a=sub32(a,b);a=sub32(a,c);a^=c>>>3;b=sub32(b,c);b=sub32(b,a);b^=a<<10;c=sub32(c,a);c=sub32(c,b);c^=b>>>15;return[a,b,c];}var Endian={};Endian.Little=0;Endian.Big=1;Endian[Endian.Little]="Little";Endian[Endian.Big]="Big";/**
 * @param {?} str
 * @return {?}
 */function utf8Encode(str){var/** @type {?} */encoded='';for(var/** @type {?} */index=0;index<str.length;index++){var/** @type {?} */codePoint=decodeSurrogatePairs(str,index);if(codePoint<=0x7f){encoded+=String.fromCharCode(codePoint);}else if(codePoint<=0x7ff){encoded+=String.fromCharCode(0xc0|codePoint>>>6,0x80|codePoint&0x3f);}else if(codePoint<=0xffff){encoded+=String.fromCharCode(0xe0|codePoint>>>12,0x80|codePoint>>>6&0x3f,0x80|codePoint&0x3f);}else if(codePoint<=0x1fffff){encoded+=String.fromCharCode(0xf0|codePoint>>>18,0x80|codePoint>>>12&0x3f,0x80|codePoint>>>6&0x3f,0x80|codePoint&0x3f);}}return encoded;}/**
 * @param {?} str
 * @param {?} index
 * @return {?}
 */function decodeSurrogatePairs(str,index){if(index<0||index>=str.length){throw new Error('index='+index+' is out of range in "'+str+'"');}var/** @type {?} */high=str.charCodeAt(index);if(high>=0xd800&&high<=0xdfff&&str.length>index+1){var/** @type {?} */low=byteAt(str,index+1);if(low>=0xdc00&&low<=0xdfff){return(high-0xd800)*0x400+low-0xdc00+0x10000;}}return high;}/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */function add32(a,b){return add32to64(a,b)[1];}/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */function add32to64(a,b){var/** @type {?} */low=(a&0xffff)+(b&0xffff);var/** @type {?} */high=(a>>>16)+(b>>>16)+(low>>>16);return[high>>>16,high<<16|low&0xffff];}/**
 * @param {?} __0
 * @param {?} __1
 * @return {?}
 */function add64(_ref19,_ref20){var _ref22=_slicedToArray(_ref19,2),ah=_ref22[0],al=_ref22[1];var _ref21=_slicedToArray(_ref20,2),bh=_ref21[0],bl=_ref21[1];var _add32to=add32to64(al,bl),_add32to2=_slicedToArray(_add32to,2),carry=_add32to2[0],l=_add32to2[1];var/** @type {?} */h=add32(add32(ah,bh),carry);return[h,l];}/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */function sub32(a,b){var/** @type {?} */low=(a&0xffff)-(b&0xffff);var/** @type {?} */high=(a>>16)-(b>>16)+(low>>16);return high<<16|low&0xffff;}/**
 * @param {?} a
 * @param {?} count
 * @return {?}
 */function rol32(a,count){return a<<count|a>>>32-count;}/**
 * @param {?} __0
 * @param {?} count
 * @return {?}
 */function rol64(_ref23,count){var _ref24=_slicedToArray(_ref23,2),hi=_ref24[0],lo=_ref24[1];var/** @type {?} */h=hi<<count|lo>>>32-count;var/** @type {?} */l=lo<<count|hi>>>32-count;return[h,l];}/**
 * @param {?} str
 * @param {?} endian
 * @return {?}
 */function stringToWords32(str,endian){var/** @type {?} */words32=Array(str.length+3>>>2);for(var/** @type {?} */i=0;i<words32.length;i++){words32[i]=wordAt(str,i*4,endian);}return words32;}/**
 * @param {?} str
 * @param {?} index
 * @return {?}
 */function byteAt(str,index){return index>=str.length?0:str.charCodeAt(index)&0xff;}/**
 * @param {?} str
 * @param {?} index
 * @param {?} endian
 * @return {?}
 */function wordAt(str,index,endian){var/** @type {?} */word=0;if(endian===Endian.Big){for(var/** @type {?} */i=0;i<4;i++){word+=byteAt(str,index+i)<<24-8*i;}}else{for(var/** @type {?} */_i4=0;_i4<4;_i4++){word+=byteAt(str,index+_i4)<<8*_i4;}}return word;}/**
 * @param {?} words32
 * @return {?}
 */function words32ToByteString(words32){return words32.reduce(function(str,word){return str+word32ToByteString(word);},'');}/**
 * @param {?} word
 * @return {?}
 */function word32ToByteString(word){var/** @type {?} */str='';for(var/** @type {?} */i=0;i<4;i++){str+=String.fromCharCode(word>>>8*(3-i)&0xff);}return str;}/**
 * @param {?} str
 * @return {?}
 */function byteStringToHexString(str){var/** @type {?} */hex='';for(var/** @type {?} */i=0;i<str.length;i++){var/** @type {?} */b=byteAt(str,i);hex+=(b>>>4).toString(16)+(b&0x0f).toString(16);}return hex.toLowerCase();}/**
 * @param {?} str
 * @return {?}
 */function byteStringToDecString(str){var/** @type {?} */decimal='';var/** @type {?} */toThePower='1';for(var/** @type {?} */i=str.length-1;i>=0;i--){decimal=addBigInt(decimal,numberTimesBigInt(byteAt(str,i),toThePower));toThePower=numberTimesBigInt(256,toThePower);}return decimal.split('').reverse().join('');}/**
 * @param {?} x
 * @param {?} y
 * @return {?}
 */function addBigInt(x,y){var/** @type {?} */sum='';var/** @type {?} */len=Math.max(x.length,y.length);for(var/** @type {?} */i=0,/** @type {?} */carry=0;i<len||carry;i++){var/** @type {?} */tmpSum=carry+ +(x[i]||0)+ +(y[i]||0);if(tmpSum>=10){carry=1;sum+=tmpSum-10;}else{carry=0;sum+=tmpSum;}}return sum;}/**
 * @param {?} num
 * @param {?} b
 * @return {?}
 */function numberTimesBigInt(num,b){var/** @type {?} */product='';var/** @type {?} */bToThePower=b;for(;num!==0;num=num>>>1){if(num&1)product=addBigInt(product,bToThePower);bToThePower=addBigInt(bToThePower,bToThePower);}return product;}/**
 * @abstract
 */var Serializer=function(){function Serializer(){_classCallCheck(this,Serializer);}_createClass(Serializer,[{key:'write',/**
     * @abstract
     * @param {?} messages
     * @param {?} locale
     * @return {?}
     */value:function write(messages,locale){}/**
     * @abstract
     * @param {?} content
     * @param {?} url
     * @return {?}
     */},{key:'load',value:function load(content,url){}/**
     * @abstract
     * @param {?} message
     * @return {?}
     */},{key:'digest',value:function digest(message){}/**
     * @param {?} message
     * @return {?}
     */},{key:'createNameMapper',value:function createNameMapper(message){return null;}}]);return Serializer;}();/**
 * A simple mapper that take a function to transform an internal name to a public name
 */var SimplePlaceholderMapper=function(_RecurseVisitor){_inherits(SimplePlaceholderMapper,_RecurseVisitor);/**
     * @param {?} message
     * @param {?} mapName
     */function SimplePlaceholderMapper(message,mapName){_classCallCheck(this,SimplePlaceholderMapper);var _this58=_possibleConstructorReturn(this,(SimplePlaceholderMapper.__proto__||Object.getPrototypeOf(SimplePlaceholderMapper)).call(this));_this58.mapName=mapName;_this58.internalToPublic={};_this58.publicToNextId={};_this58.publicToInternal={};message.nodes.forEach(function(node){return node.visit(_this58);});return _this58;}/**
     * @param {?} internalName
     * @return {?}
     */_createClass(SimplePlaceholderMapper,[{key:'toPublicName',value:function toPublicName(internalName){return this.internalToPublic.hasOwnProperty(internalName)?this.internalToPublic[internalName]:null;}/**
     * @param {?} publicName
     * @return {?}
     */},{key:'toInternalName',value:function toInternalName(publicName){return this.publicToInternal.hasOwnProperty(publicName)?this.publicToInternal[publicName]:null;}/**
     * @param {?} text
     * @param {?=} context
     * @return {?}
     */},{key:'visitText',value:function visitText(text,context){return null;}/**
     * @param {?} ph
     * @param {?=} context
     * @return {?}
     */},{key:'visitTagPlaceholder',value:function visitTagPlaceholder(ph,context){this.visitPlaceholderName(ph.startName);_get(SimplePlaceholderMapper.prototype.__proto__||Object.getPrototypeOf(SimplePlaceholderMapper.prototype),'visitTagPlaceholder',this).call(this,ph,context);this.visitPlaceholderName(ph.closeName);}/**
     * @param {?} ph
     * @param {?=} context
     * @return {?}
     */},{key:'visitPlaceholder',value:function visitPlaceholder(ph,context){this.visitPlaceholderName(ph.name);}/**
     * @param {?} ph
     * @param {?=} context
     * @return {?}
     */},{key:'visitIcuPlaceholder',value:function visitIcuPlaceholder(ph,context){this.visitPlaceholderName(ph.name);}/**
     * @param {?} internalName
     * @return {?}
     */},{key:'visitPlaceholderName',value:function visitPlaceholderName(internalName){if(!internalName||this.internalToPublic.hasOwnProperty(internalName)){return;}var/** @type {?} */publicName=this.mapName(internalName);if(this.publicToInternal.hasOwnProperty(publicName)){// Create a new XMB when it has already been used
var/** @type {?} */nextId=this.publicToNextId[publicName];this.publicToNextId[publicName]=nextId+1;publicName=publicName+'_'+nextId;}else{this.publicToNextId[publicName]=1;}this.internalToPublic[internalName]=publicName;this.publicToInternal[publicName]=internalName;}}]);return SimplePlaceholderMapper;}(RecurseVisitor);/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */var _Visitor$1=function(){function _Visitor$1(){_classCallCheck(this,_Visitor$1);}_createClass(_Visitor$1,[{key:'visitTag',/**
     * @param {?} tag
     * @return {?}
     */value:function visitTag(tag){var _this59=this;var/** @type {?} */strAttrs=this._serializeAttributes(tag.attrs);if(tag.children.length==0){return'<'+tag.name+strAttrs+'/>';}var/** @type {?} */strChildren=tag.children.map(function(node){return node.visit(_this59);});return'<'+tag.name+strAttrs+'>'+strChildren.join('')+'</'+tag.name+'>';}/**
     * @param {?} text
     * @return {?}
     */},{key:'visitText',value:function visitText(text){return text.value;}/**
     * @param {?} decl
     * @return {?}
     */},{key:'visitDeclaration',value:function visitDeclaration(decl){return'<?xml'+this._serializeAttributes(decl.attrs)+' ?>';}/**
     * @param {?} attrs
     * @return {?}
     */},{key:'_serializeAttributes',value:function _serializeAttributes(attrs){var/** @type {?} */strAttrs=Object.keys(attrs).map(function(name){return name+'="'+attrs[name]+'"';}).join(' ');return strAttrs.length>0?' '+strAttrs:'';}/**
     * @param {?} doctype
     * @return {?}
     */},{key:'visitDoctype',value:function visitDoctype(doctype){return'<!DOCTYPE '+doctype.rootTag+' [\n'+doctype.dtd+'\n]>';}}]);return _Visitor$1;}();var/** @type {?} */_visitor=new _Visitor$1();/**
 * @param {?} nodes
 * @return {?}
 */function serialize(nodes){return nodes.map(function(node){return node.visit(_visitor);}).join('');}var Declaration=function(){/**
     * @param {?} unescapedAttrs
     */function Declaration(unescapedAttrs){var _this60=this;_classCallCheck(this,Declaration);this.attrs={};Object.keys(unescapedAttrs).forEach(function(k){_this60.attrs[k]=_escapeXml(unescapedAttrs[k]);});}/**
     * @param {?} visitor
     * @return {?}
     */_createClass(Declaration,[{key:'visit',value:function visit(visitor){return visitor.visitDeclaration(this);}}]);return Declaration;}();var Doctype=function(){/**
     * @param {?} rootTag
     * @param {?} dtd
     */function Doctype(rootTag,dtd){_classCallCheck(this,Doctype);this.rootTag=rootTag;this.dtd=dtd;}_createClass(Doctype,[{key:'visit',/**
     * @param {?} visitor
     * @return {?}
     */value:function visit(visitor){return visitor.visitDoctype(this);}}]);return Doctype;}();var Tag=function(){/**
     * @param {?} name
     * @param {?=} unescapedAttrs
     * @param {?=} children
     */function Tag(name){var _this61=this;var unescapedAttrs=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var children=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];_classCallCheck(this,Tag);this.name=name;this.children=children;this.attrs={};Object.keys(unescapedAttrs).forEach(function(k){_this61.attrs[k]=_escapeXml(unescapedAttrs[k]);});}/**
     * @param {?} visitor
     * @return {?}
     */_createClass(Tag,[{key:'visit',value:function visit(visitor){return visitor.visitTag(this);}}]);return Tag;}();var Text$2=function(){/**
     * @param {?} unescapedValue
     */function Text$2(unescapedValue){_classCallCheck(this,Text$2);this.value=_escapeXml(unescapedValue);}_createClass(Text$2,[{key:'visit',/**
     * @param {?} visitor
     * @return {?}
     */value:function visit(visitor){return visitor.visitText(this);}}]);return Text$2;}();var CR=function(_Text$){_inherits(CR,_Text$);/**
     * @param {?=} ws
     */function CR(){var ws=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;_classCallCheck(this,CR);return _possibleConstructorReturn(this,(CR.__proto__||Object.getPrototypeOf(CR)).call(this,'\n'+new Array(ws+1).join(' ')));}return CR;}(Text$2);var/** @type {?} */_ESCAPED_CHARS=[[/&/g,'&amp;'],[/"/g,'&quot;'],[/'/g,'&apos;'],[/</g,'&lt;'],[/>/g,'&gt;']];/**
 * @param {?} text
 * @return {?}
 */function _escapeXml(text){return _ESCAPED_CHARS.reduce(function(text,entry){return text.replace(entry[0],entry[1]);},text);}var/** @type {?} */_VERSION='1.2';var/** @type {?} */_XMLNS='urn:oasis:names:tc:xliff:document:1.2';// TODO(vicb): make this a param (s/_/-/)
var/** @type {?} */_DEFAULT_SOURCE_LANG='en';var/** @type {?} */_PLACEHOLDER_TAG='x';var/** @type {?} */_FILE_TAG='file';var/** @type {?} */_SOURCE_TAG='source';var/** @type {?} */_TARGET_TAG='target';var/** @type {?} */_UNIT_TAG='trans-unit';var Xliff=function(_Serializer){_inherits(Xliff,_Serializer);function Xliff(){_classCallCheck(this,Xliff);return _possibleConstructorReturn(this,(Xliff.__proto__||Object.getPrototypeOf(Xliff)).apply(this,arguments));}_createClass(Xliff,[{key:'write',/**
     * @param {?} messages
     * @param {?} locale
     * @return {?}
     */value:function write(messages,locale){var/** @type {?} */visitor=new _WriteVisitor();var/** @type {?} */transUnits=[];messages.forEach(function(message){var/** @type {?} */transUnit=new Tag(_UNIT_TAG,{id:message.id,datatype:'html'});transUnit.children.push(new CR(8),new Tag(_SOURCE_TAG,{},visitor.serialize(message.nodes)),new CR(8),new Tag(_TARGET_TAG));if(message.description){transUnit.children.push(new CR(8),new Tag('note',{priority:'1',from:'description'},[new Text$2(message.description)]));}if(message.meaning){transUnit.children.push(new CR(8),new Tag('note',{priority:'1',from:'meaning'},[new Text$2(message.meaning)]));}transUnit.children.push(new CR(6));transUnits.push(new CR(6),transUnit);});var/** @type {?} */body=new Tag('body',{},[].concat(transUnits,[new CR(4)]));var/** @type {?} */file=new Tag('file',{'source-language':locale||_DEFAULT_SOURCE_LANG,datatype:'plaintext',original:'ng2.template'},[new CR(4),body,new CR(2)]);var/** @type {?} */xliff=new Tag('xliff',{version:_VERSION,xmlns:_XMLNS},[new CR(2),file,new CR()]);return serialize([new Declaration({version:'1.0',encoding:'UTF-8'}),new CR(),xliff,new CR()]);}/**
     * @param {?} content
     * @param {?} url
     * @return {?}
     */},{key:'load',value:function load(content,url){// xliff to xml nodes
var/** @type {?} */xliffParser=new XliffParser();var _xliffParser$parse=xliffParser.parse(content,url),locale=_xliffParser$parse.locale,mlNodesByMsgId=_xliffParser$parse.mlNodesByMsgId,errors=_xliffParser$parse.errors;// xml nodes to i18n nodes
var/** @type {?} */i18nNodesByMsgId={};var/** @type {?} */converter=new XmlToI18n();Object.keys(mlNodesByMsgId).forEach(function(msgId){var _converter$convert=converter.convert(mlNodesByMsgId[msgId]),i18nNodes=_converter$convert.i18nNodes,e=_converter$convert.errors;errors.push.apply(errors,_toConsumableArray(e));i18nNodesByMsgId[msgId]=i18nNodes;});if(errors.length){throw new Error('xliff parse errors:\n'+errors.join('\n'));}return{locale:locale,i18nNodesByMsgId:i18nNodesByMsgId};}/**
     * @param {?} message
     * @return {?}
     */},{key:'digest',value:function digest(message){return _digest2(message);}}]);return Xliff;}(Serializer);var _WriteVisitor=function(){function _WriteVisitor(){_classCallCheck(this,_WriteVisitor);}_createClass(_WriteVisitor,[{key:'visitText',/**
     * @param {?} text
     * @param {?=} context
     * @return {?}
     */value:function visitText(text,context){return[new Text$2(text.value)];}/**
     * @param {?} container
     * @param {?=} context
     * @return {?}
     */},{key:'visitContainer',value:function visitContainer(container,context){var _this64=this;var/** @type {?} */nodes=[];container.children.forEach(function(node){return nodes.push.apply(nodes,_toConsumableArray(node.visit(_this64)));});return nodes;}/**
     * @param {?} icu
     * @param {?=} context
     * @return {?}
     */},{key:'visitIcu',value:function visitIcu(icu,context){if(this._isInIcu){// nested ICU is not supported
throw new Error('xliff does not support nested ICU messages');}this._isInIcu=true;// TODO(vicb): support ICU messages
// https://lists.oasis-open.org/archives/xliff/201201/msg00028.html
// http://docs.oasis-open.org/xliff/v1.2/xliff-profile-po/xliff-profile-po-1.2-cd02.html
var/** @type {?} */nodes=[];this._isInIcu=false;return nodes;}/**
     * @param {?} ph
     * @param {?=} context
     * @return {?}
     */},{key:'visitTagPlaceholder',value:function visitTagPlaceholder(ph,context){var/** @type {?} */ctype=getCtypeForTag(ph.tag);var/** @type {?} */startTagPh=new Tag(_PLACEHOLDER_TAG,{id:ph.startName,ctype:ctype});if(ph.isVoid){// void tags have no children nor closing tags
return[startTagPh];}var/** @type {?} */closeTagPh=new Tag(_PLACEHOLDER_TAG,{id:ph.closeName,ctype:ctype});return[startTagPh].concat(_toConsumableArray(this.serialize(ph.children)),[closeTagPh]);}/**
     * @param {?} ph
     * @param {?=} context
     * @return {?}
     */},{key:'visitPlaceholder',value:function visitPlaceholder(ph,context){return[new Tag(_PLACEHOLDER_TAG,{id:ph.name})];}/**
     * @param {?} ph
     * @param {?=} context
     * @return {?}
     */},{key:'visitIcuPlaceholder',value:function visitIcuPlaceholder(ph,context){return[new Tag(_PLACEHOLDER_TAG,{id:ph.name})];}/**
     * @param {?} nodes
     * @return {?}
     */},{key:'serialize',value:function serialize(nodes){var _ref25,_this65=this;this._isInIcu=false;return(_ref25=[]).concat.apply(_ref25,_toConsumableArray(nodes.map(function(node){return node.visit(_this65);})));}}]);return _WriteVisitor;}();var XliffParser=function(){function XliffParser(){_classCallCheck(this,XliffParser);this._locale=null;}/**
     * @param {?} xliff
     * @param {?} url
     * @return {?}
     */_createClass(XliffParser,[{key:'parse',value:function parse(xliff,url){this._unitMlNodes=[];this._mlNodesByMsgId={};var/** @type {?} */xml=new XmlParser().parse(xliff,url,false);this._errors=xml.errors;visitAll(this,xml.rootNodes,null);return{mlNodesByMsgId:this._mlNodesByMsgId,errors:this._errors,locale:this._locale};}/**
     * @param {?} element
     * @param {?} context
     * @return {?}
     */},{key:'visitElement',value:function visitElement(element,context){switch(element.name){case _UNIT_TAG:this._unitMlNodes=null;var/** @type {?} */idAttr=element.attrs.find(function(attr){return attr.name==='id';});if(!idAttr){this._addError(element,'<'+_UNIT_TAG+'> misses the "id" attribute');}else{var/** @type {?} */id=idAttr.value;if(this._mlNodesByMsgId.hasOwnProperty(id)){this._addError(element,'Duplicated translations for msg '+id);}else{visitAll(this,element.children,null);if(this._unitMlNodes){this._mlNodesByMsgId[id]=this._unitMlNodes;}else{this._addError(element,'Message '+id+' misses a translation');}}}break;case _SOURCE_TAG:// ignore source message
break;case _TARGET_TAG:this._unitMlNodes=element.children;break;case _FILE_TAG:var/** @type {?} */localeAttr=element.attrs.find(function(attr){return attr.name==='target-language';});if(localeAttr){this._locale=localeAttr.value;}visitAll(this,element.children,null);break;default:// TODO(vicb): assert file structure, xliff version
// For now only recurse on unhandled nodes
visitAll(this,element.children,null);}}/**
     * @param {?} attribute
     * @param {?} context
     * @return {?}
     */},{key:'visitAttribute',value:function visitAttribute(attribute,context){}/**
     * @param {?} text
     * @param {?} context
     * @return {?}
     */},{key:'visitText',value:function visitText(text,context){}/**
     * @param {?} comment
     * @param {?} context
     * @return {?}
     */},{key:'visitComment',value:function visitComment(comment,context){}/**
     * @param {?} expansion
     * @param {?} context
     * @return {?}
     */},{key:'visitExpansion',value:function visitExpansion(expansion,context){}/**
     * @param {?} expansionCase
     * @param {?} context
     * @return {?}
     */},{key:'visitExpansionCase',value:function visitExpansionCase(expansionCase,context){}/**
     * @param {?} node
     * @param {?} message
     * @return {?}
     */},{key:'_addError',value:function _addError(node,message){this._errors.push(new I18nError(node.sourceSpan,message));}}]);return XliffParser;}();var XmlToI18n=function(){function XmlToI18n(){_classCallCheck(this,XmlToI18n);}_createClass(XmlToI18n,[{key:'convert',/**
     * @param {?} nodes
     * @return {?}
     */value:function convert(nodes){this._errors=[];return{i18nNodes:visitAll(this,nodes),errors:this._errors};}/**
     * @param {?} text
     * @param {?} context
     * @return {?}
     */},{key:'visitText',value:function visitText(text,context){return new Text$1(text.value,text.sourceSpan);}/**
     * @param {?} el
     * @param {?} context
     * @return {?}
     */},{key:'visitElement',value:function visitElement(el,context){if(el.name===_PLACEHOLDER_TAG){var/** @type {?} */nameAttr=el.attrs.find(function(attr){return attr.name==='id';});if(nameAttr){return new Placeholder('',nameAttr.value,el.sourceSpan);}this._addError(el,'<'+_PLACEHOLDER_TAG+'> misses the "id" attribute');}else{this._addError(el,'Unexpected tag');}}/**
     * @param {?} icu
     * @param {?} context
     * @return {?}
     */},{key:'visitExpansion',value:function visitExpansion(icu,context){}/**
     * @param {?} icuCase
     * @param {?} context
     * @return {?}
     */},{key:'visitExpansionCase',value:function visitExpansionCase(icuCase,context){}/**
     * @param {?} comment
     * @param {?} context
     * @return {?}
     */},{key:'visitComment',value:function visitComment(comment,context){}/**
     * @param {?} attribute
     * @param {?} context
     * @return {?}
     */},{key:'visitAttribute',value:function visitAttribute(attribute,context){}/**
     * @param {?} node
     * @param {?} message
     * @return {?}
     */},{key:'_addError',value:function _addError(node,message){this._errors.push(new I18nError(node.sourceSpan,message));}}]);return XmlToI18n;}();/**
 * @param {?} tag
 * @return {?}
 */function getCtypeForTag(tag){switch(tag.toLowerCase()){case'br':return'lb';case'img':return'image';default:return'x-'+tag;}}var/** @type {?} */_MESSAGES_TAG='messagebundle';var/** @type {?} */_MESSAGE_TAG='msg';var/** @type {?} */_PLACEHOLDER_TAG$1='ph';var/** @type {?} */_EXEMPLE_TAG='ex';var/** @type {?} */_DOCTYPE='<!ELEMENT messagebundle (msg)*>\n<!ATTLIST messagebundle class CDATA #IMPLIED>\n\n<!ELEMENT msg (#PCDATA|ph|source)*>\n<!ATTLIST msg id CDATA #IMPLIED>\n<!ATTLIST msg seq CDATA #IMPLIED>\n<!ATTLIST msg name CDATA #IMPLIED>\n<!ATTLIST msg desc CDATA #IMPLIED>\n<!ATTLIST msg meaning CDATA #IMPLIED>\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\n<!ATTLIST msg xml:space (default|preserve) "default">\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\n\n<!ELEMENT source (#PCDATA)>\n\n<!ELEMENT ph (#PCDATA|ex)*>\n<!ATTLIST ph name CDATA #REQUIRED>\n\n<!ELEMENT ex (#PCDATA)>';var Xmb=function(_Serializer2){_inherits(Xmb,_Serializer2);function Xmb(){_classCallCheck(this,Xmb);return _possibleConstructorReturn(this,(Xmb.__proto__||Object.getPrototypeOf(Xmb)).apply(this,arguments));}_createClass(Xmb,[{key:'write',/**
     * @param {?} messages
     * @param {?} locale
     * @return {?}
     */value:function write(messages,locale){var/** @type {?} */exampleVisitor=new ExampleVisitor();var/** @type {?} */visitor=new _Visitor$2();var/** @type {?} */rootNode=new Tag(_MESSAGES_TAG);messages.forEach(function(message){var/** @type {?} */attrs={id:message.id};if(message.description){attrs['desc']=message.description;}if(message.meaning){attrs['meaning']=message.meaning;}rootNode.children.push(new CR(2),new Tag(_MESSAGE_TAG,attrs,visitor.serialize(message.nodes)));});rootNode.children.push(new CR());return serialize([new Declaration({version:'1.0',encoding:'UTF-8'}),new CR(),new Doctype(_MESSAGES_TAG,_DOCTYPE),new CR(),exampleVisitor.addDefaultExamples(rootNode),new CR()]);}/**
     * @param {?} content
     * @param {?} url
     * @return {?}
     */},{key:'load',value:function load(content,url){throw new Error('Unsupported');}/**
     * @param {?} message
     * @return {?}
     */},{key:'digest',value:function digest(message){return digest$1(message);}/**
     * @param {?} message
     * @return {?}
     */},{key:'createNameMapper',value:function createNameMapper(message){return new SimplePlaceholderMapper(message,toPublicName);}}]);return Xmb;}(Serializer);var _Visitor$2=function(){function _Visitor$2(){_classCallCheck(this,_Visitor$2);}_createClass(_Visitor$2,[{key:'visitText',/**
     * @param {?} text
     * @param {?=} context
     * @return {?}
     */value:function visitText(text,context){return[new Text$2(text.value)];}/**
     * @param {?} container
     * @param {?} context
     * @return {?}
     */},{key:'visitContainer',value:function visitContainer(container,context){var _this67=this;var/** @type {?} */nodes=[];container.children.forEach(function(node){return nodes.push.apply(nodes,_toConsumableArray(node.visit(_this67)));});return nodes;}/**
     * @param {?} icu
     * @param {?=} context
     * @return {?}
     */},{key:'visitIcu',value:function visitIcu(icu,context){var _this68=this;var/** @type {?} */nodes=[new Text$2('{'+icu.expressionPlaceholder+', '+icu.type+', ')];Object.keys(icu.cases).forEach(function(c){nodes.push.apply(nodes,[new Text$2(c+' {')].concat(_toConsumableArray(icu.cases[c].visit(_this68)),[new Text$2('} ')]));});nodes.push(new Text$2('}'));return nodes;}/**
     * @param {?} ph
     * @param {?=} context
     * @return {?}
     */},{key:'visitTagPlaceholder',value:function visitTagPlaceholder(ph,context){var/** @type {?} */startEx=new Tag(_EXEMPLE_TAG,{},[new Text$2('<'+ph.tag+'>')]);var/** @type {?} */startTagPh=new Tag(_PLACEHOLDER_TAG$1,{name:ph.startName},[startEx]);if(ph.isVoid){// void tags have no children nor closing tags
return[startTagPh];}var/** @type {?} */closeEx=new Tag(_EXEMPLE_TAG,{},[new Text$2('</'+ph.tag+'>')]);var/** @type {?} */closeTagPh=new Tag(_PLACEHOLDER_TAG$1,{name:ph.closeName},[closeEx]);return[startTagPh].concat(_toConsumableArray(this.serialize(ph.children)),[closeTagPh]);}/**
     * @param {?} ph
     * @param {?=} context
     * @return {?}
     */},{key:'visitPlaceholder',value:function visitPlaceholder(ph,context){return[new Tag(_PLACEHOLDER_TAG$1,{name:ph.name})];}/**
     * @param {?} ph
     * @param {?=} context
     * @return {?}
     */},{key:'visitIcuPlaceholder',value:function visitIcuPlaceholder(ph,context){return[new Tag(_PLACEHOLDER_TAG$1,{name:ph.name})];}/**
     * @param {?} nodes
     * @return {?}
     */},{key:'serialize',value:function serialize(nodes){var _ref26,_this69=this;return(_ref26=[]).concat.apply(_ref26,_toConsumableArray(nodes.map(function(node){return node.visit(_this69);})));}}]);return _Visitor$2;}();/**
 * @param {?} message
 * @return {?}
 */function digest$1(message){return decimalDigest(message);}var ExampleVisitor=function(){function ExampleVisitor(){_classCallCheck(this,ExampleVisitor);}_createClass(ExampleVisitor,[{key:'addDefaultExamples',/**
     * @param {?} node
     * @return {?}
     */value:function addDefaultExamples(node){node.visit(this);return node;}/**
     * @param {?} tag
     * @return {?}
     */},{key:'visitTag',value:function visitTag(tag){var _this70=this;if(tag.name===_PLACEHOLDER_TAG$1){if(!tag.children||tag.children.length==0){var/** @type {?} */exText=new Text$2(tag.attrs['name']||'...');tag.children=[new Tag(_EXEMPLE_TAG,{},[exText])];}}else if(tag.children){tag.children.forEach(function(node){return node.visit(_this70);});}}/**
     * @param {?} text
     * @return {?}
     */},{key:'visitText',value:function visitText(text){}/**
     * @param {?} decl
     * @return {?}
     */},{key:'visitDeclaration',value:function visitDeclaration(decl){}/**
     * @param {?} doctype
     * @return {?}
     */},{key:'visitDoctype',value:function visitDoctype(doctype){}}]);return ExampleVisitor;}();/**
 * @param {?} internalName
 * @return {?}
 */function toPublicName(internalName){return internalName.toUpperCase().replace(/[^A-Z0-9_]/g,'_');}var/** @type {?} */_TRANSLATIONS_TAG='translationbundle';var/** @type {?} */_TRANSLATION_TAG='translation';var/** @type {?} */_PLACEHOLDER_TAG$2='ph';var Xtb=function(_Serializer3){_inherits(Xtb,_Serializer3);function Xtb(){_classCallCheck(this,Xtb);return _possibleConstructorReturn(this,(Xtb.__proto__||Object.getPrototypeOf(Xtb)).apply(this,arguments));}_createClass(Xtb,[{key:'write',/**
     * @param {?} messages
     * @param {?} locale
     * @return {?}
     */value:function write(messages,locale){throw new Error('Unsupported');}/**
     * @param {?} content
     * @param {?} url
     * @return {?}
     */},{key:'load',value:function load(content,url){// xtb to xml nodes
var/** @type {?} */xtbParser=new XtbParser();var _xtbParser$parse=xtbParser.parse(content,url),locale=_xtbParser$parse.locale,msgIdToHtml=_xtbParser$parse.msgIdToHtml,errors=_xtbParser$parse.errors;// xml nodes to i18n nodes
var/** @type {?} */i18nNodesByMsgId={};var/** @type {?} */converter=new XmlToI18n$1();// Because we should be able to load xtb files that rely on features not supported by angular,
// we need to delay the conversion of html to i18n nodes so that non angular messages are not
// converted
Object.keys(msgIdToHtml).forEach(function(msgId){var/** @type {?} */valueFn=function valueFn(){var _converter$convert2=converter.convert(msgIdToHtml[msgId],url),i18nNodes=_converter$convert2.i18nNodes,errors=_converter$convert2.errors;if(errors.length){throw new Error('xtb parse errors:\n'+errors.join('\n'));}return i18nNodes;};createLazyProperty(i18nNodesByMsgId,msgId,valueFn);});if(errors.length){throw new Error('xtb parse errors:\n'+errors.join('\n'));}return{locale:locale,i18nNodesByMsgId:i18nNodesByMsgId};}/**
     * @param {?} message
     * @return {?}
     */},{key:'digest',value:function digest(message){return digest$1(message);}/**
     * @param {?} message
     * @return {?}
     */},{key:'createNameMapper',value:function createNameMapper(message){return new SimplePlaceholderMapper(message,toPublicName);}}]);return Xtb;}(Serializer);/**
 * @param {?} messages
 * @param {?} id
 * @param {?} valueFn
 * @return {?}
 */function createLazyProperty(messages,id,valueFn){Object.defineProperty(messages,id,{configurable:true,enumerable:true,get:function get(){var/** @type {?} */value=valueFn();Object.defineProperty(messages,id,{enumerable:true,value:value});return value;},set:function set(_){throw new Error('Could not overwrite an XTB translation');}});}var XtbParser=function(){function XtbParser(){_classCallCheck(this,XtbParser);this._locale=null;}/**
     * @param {?} xtb
     * @param {?} url
     * @return {?}
     */_createClass(XtbParser,[{key:'parse',value:function parse(xtb,url){this._bundleDepth=0;this._msgIdToHtml={};// We can not parse the ICU messages at this point as some messages might not originate
// from Angular that could not be lex'd.
var/** @type {?} */xml=new XmlParser().parse(xtb,url,false);this._errors=xml.errors;visitAll(this,xml.rootNodes);return{msgIdToHtml:this._msgIdToHtml,errors:this._errors,locale:this._locale};}/**
     * @param {?} element
     * @param {?} context
     * @return {?}
     */},{key:'visitElement',value:function visitElement(element,context){switch(element.name){case _TRANSLATIONS_TAG:this._bundleDepth++;if(this._bundleDepth>1){this._addError(element,'<'+_TRANSLATIONS_TAG+'> elements can not be nested');}var/** @type {?} */langAttr=element.attrs.find(function(attr){return attr.name==='lang';});if(langAttr){this._locale=langAttr.value;}visitAll(this,element.children,null);this._bundleDepth--;break;case _TRANSLATION_TAG:var/** @type {?} */idAttr=element.attrs.find(function(attr){return attr.name==='id';});if(!idAttr){this._addError(element,'<'+_TRANSLATION_TAG+'> misses the "id" attribute');}else{var/** @type {?} */id=idAttr.value;if(this._msgIdToHtml.hasOwnProperty(id)){this._addError(element,'Duplicated translations for msg '+id);}else{var/** @type {?} */innerTextStart=element.startSourceSpan.end.offset;var/** @type {?} */innerTextEnd=element.endSourceSpan.start.offset;var/** @type {?} */content=element.startSourceSpan.start.file.content;var/** @type {?} */innerText=content.slice(innerTextStart,innerTextEnd);this._msgIdToHtml[id]=innerText;}}break;default:this._addError(element,'Unexpected tag');}}/**
     * @param {?} attribute
     * @param {?} context
     * @return {?}
     */},{key:'visitAttribute',value:function visitAttribute(attribute,context){}/**
     * @param {?} text
     * @param {?} context
     * @return {?}
     */},{key:'visitText',value:function visitText(text,context){}/**
     * @param {?} comment
     * @param {?} context
     * @return {?}
     */},{key:'visitComment',value:function visitComment(comment,context){}/**
     * @param {?} expansion
     * @param {?} context
     * @return {?}
     */},{key:'visitExpansion',value:function visitExpansion(expansion,context){}/**
     * @param {?} expansionCase
     * @param {?} context
     * @return {?}
     */},{key:'visitExpansionCase',value:function visitExpansionCase(expansionCase,context){}/**
     * @param {?} node
     * @param {?} message
     * @return {?}
     */},{key:'_addError',value:function _addError(node,message){this._errors.push(new I18nError(node.sourceSpan,message));}}]);return XtbParser;}();var XmlToI18n$1=function(){function XmlToI18n$1(){_classCallCheck(this,XmlToI18n$1);}_createClass(XmlToI18n$1,[{key:'convert',/**
     * @param {?} message
     * @param {?} url
     * @return {?}
     */value:function convert(message,url){var/** @type {?} */xmlIcu=new XmlParser().parse(message,url,true);this._errors=xmlIcu.errors;var/** @type {?} */i18nNodes=this._errors.length>0||xmlIcu.rootNodes.length==0?[]:visitAll(this,xmlIcu.rootNodes);return{i18nNodes:i18nNodes,errors:this._errors};}/**
     * @param {?} text
     * @param {?} context
     * @return {?}
     */},{key:'visitText',value:function visitText(text,context){return new Text$1(text.value,text.sourceSpan);}/**
     * @param {?} icu
     * @param {?} context
     * @return {?}
     */},{key:'visitExpansion',value:function visitExpansion(icu,context){var/** @type {?} */caseMap={};visitAll(this,icu.cases).forEach(function(c){caseMap[c.value]=new Container(c.nodes,icu.sourceSpan);});return new Icu(icu.switchValue,icu.type,caseMap,icu.sourceSpan);}/**
     * @param {?} icuCase
     * @param {?} context
     * @return {?}
     */},{key:'visitExpansionCase',value:function visitExpansionCase(icuCase,context){return{value:icuCase.value,nodes:visitAll(this,icuCase.expression)};}/**
     * @param {?} el
     * @param {?} context
     * @return {?}
     */},{key:'visitElement',value:function visitElement(el,context){if(el.name===_PLACEHOLDER_TAG$2){var/** @type {?} */nameAttr=el.attrs.find(function(attr){return attr.name==='name';});if(nameAttr){return new Placeholder('',nameAttr.value,el.sourceSpan);}this._addError(el,'<'+_PLACEHOLDER_TAG$2+'> misses the "name" attribute');}else{this._addError(el,'Unexpected tag');}}/**
     * @param {?} comment
     * @param {?} context
     * @return {?}
     */},{key:'visitComment',value:function visitComment(comment,context){}/**
     * @param {?} attribute
     * @param {?} context
     * @return {?}
     */},{key:'visitAttribute',value:function visitAttribute(attribute,context){}/**
     * @param {?} node
     * @param {?} message
     * @return {?}
     */},{key:'_addError',value:function _addError(node,message){this._errors.push(new I18nError(node.sourceSpan,message));}}]);return XmlToI18n$1;}();var HtmlParser=function(_Parser$2){_inherits(HtmlParser,_Parser$2);function HtmlParser(){_classCallCheck(this,HtmlParser);return _possibleConstructorReturn(this,(HtmlParser.__proto__||Object.getPrototypeOf(HtmlParser)).call(this,getHtmlTagDefinition));}/**
     * @param {?} source
     * @param {?} url
     * @param {?=} parseExpansionForms
     * @param {?=} interpolationConfig
     * @return {?}
     */_createClass(HtmlParser,[{key:'parse',value:function parse(source,url){var parseExpansionForms=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var interpolationConfig=arguments.length>3&&arguments[3]!==undefined?arguments[3]:DEFAULT_INTERPOLATION_CONFIG;return _get(HtmlParser.prototype.__proto__||Object.getPrototypeOf(HtmlParser.prototype),'parse',this).call(this,source,url,parseExpansionForms,interpolationConfig);}}]);return HtmlParser;}(Parser$1);HtmlParser.decorators=[{type:CompilerInjectable}];/** @nocollapse */HtmlParser.ctorParameters=function(){return[];};/**
 * A container for translated messages
 */var TranslationBundle=function(){/**
     * @param {?=} _i18nNodesByMsgId
     * @param {?} locale
     * @param {?} digest
     * @param {?=} mapperFactory
     * @param {?=} missingTranslationStrategy
     * @param {?=} console
     */function TranslationBundle(){var _i18nNodesByMsgId=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var locale=arguments[1];var digest=arguments[2];var mapperFactory=arguments[3];var missingTranslationStrategy=arguments.length>4&&arguments[4]!==undefined?arguments[4]:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_97" /* MissingTranslationStrategy */].Warning;var console=arguments[5];_classCallCheck(this,TranslationBundle);this._i18nNodesByMsgId=_i18nNodesByMsgId;this.digest=digest;this.mapperFactory=mapperFactory;this._i18nToHtml=new I18nToHtmlVisitor(_i18nNodesByMsgId,locale,digest,mapperFactory,missingTranslationStrategy,console);}/**
     * @param {?} content
     * @param {?} url
     * @param {?} serializer
     * @param {?} missingTranslationStrategy
     * @param {?=} console
     * @return {?}
     */_createClass(TranslationBundle,[{key:'get',/**
     * @param {?} srcMsg
     * @return {?}
     */value:function get(srcMsg){var/** @type {?} */html=this._i18nToHtml.convert(srcMsg);if(html.errors.length){throw new Error(html.errors.join('\n'));}return html.nodes;}/**
     * @param {?} srcMsg
     * @return {?}
     */},{key:'has',value:function has(srcMsg){return this.digest(srcMsg)in this._i18nNodesByMsgId;}}],[{key:'load',value:function load(content,url,serializer,missingTranslationStrategy,console){var _serializer$load=serializer.load(content,url),locale=_serializer$load.locale,i18nNodesByMsgId=_serializer$load.i18nNodesByMsgId;var/** @type {?} */digestFn=function digestFn(m){return serializer.digest(m);};var/** @type {?} */mapperFactory=function mapperFactory(m){return serializer.createNameMapper(m);};return new TranslationBundle(i18nNodesByMsgId,locale,digestFn,mapperFactory,missingTranslationStrategy,console);}}]);return TranslationBundle;}();var I18nToHtmlVisitor=function(){/**
     * @param {?=} _i18nNodesByMsgId
     * @param {?} _locale
     * @param {?} _digest
     * @param {?} _mapperFactory
     * @param {?} _missingTranslationStrategy
     * @param {?=} _console
     */function I18nToHtmlVisitor(){var _i18nNodesByMsgId=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var _locale=arguments[1];var _digest=arguments[2];var _mapperFactory=arguments[3];var _missingTranslationStrategy=arguments[4];var _console=arguments[5];_classCallCheck(this,I18nToHtmlVisitor);this._i18nNodesByMsgId=_i18nNodesByMsgId;this._locale=_locale;this._digest=_digest;this._mapperFactory=_mapperFactory;this._missingTranslationStrategy=_missingTranslationStrategy;this._console=_console;this._contextStack=[];this._errors=[];}/**
     * @param {?} srcMsg
     * @return {?}
     */_createClass(I18nToHtmlVisitor,[{key:'convert',value:function convert(srcMsg){this._contextStack.length=0;this._errors.length=0;// i18n to text
var/** @type {?} */text=this._convertToText(srcMsg);// text to html
var/** @type {?} */url=srcMsg.nodes[0].sourceSpan.start.file.url;var/** @type {?} */html=new HtmlParser().parse(text,url,true);return{nodes:html.rootNodes,errors:[].concat(_toConsumableArray(this._errors),_toConsumableArray(html.errors))};}/**
     * @param {?} text
     * @param {?=} context
     * @return {?}
     */},{key:'visitText',value:function visitText(text,context){return text.value;}/**
     * @param {?} container
     * @param {?=} context
     * @return {?}
     */},{key:'visitContainer',value:function visitContainer(container,context){var _this73=this;return container.children.map(function(n){return n.visit(_this73);}).join('');}/**
     * @param {?} icu
     * @param {?=} context
     * @return {?}
     */},{key:'visitIcu',value:function visitIcu(icu,context){var _this74=this;var/** @type {?} */cases=Object.keys(icu.cases).map(function(k){return k+' {'+icu.cases[k].visit(_this74)+'}';});// TODO(vicb): Once all format switch to using expression placeholders
// we should throw when the placeholder is not in the source message
var/** @type {?} */exp=this._srcMsg.placeholders.hasOwnProperty(icu.expression)?this._srcMsg.placeholders[icu.expression]:icu.expression;return'{'+exp+', '+icu.type+', '+cases.join(' ')+'}';}/**
     * @param {?} ph
     * @param {?=} context
     * @return {?}
     */},{key:'visitPlaceholder',value:function visitPlaceholder(ph,context){var/** @type {?} */phName=this._mapper(ph.name);if(this._srcMsg.placeholders.hasOwnProperty(phName)){return this._srcMsg.placeholders[phName];}if(this._srcMsg.placeholderToMessage.hasOwnProperty(phName)){return this._convertToText(this._srcMsg.placeholderToMessage[phName]);}this._addError(ph,'Unknown placeholder "'+ph.name+'"');return'';}/**
     * @param {?} ph
     * @param {?=} context
     * @return {?}
     */},{key:'visitTagPlaceholder',value:function visitTagPlaceholder(ph,context){var _this75=this;var/** @type {?} */tag=''+ph.tag;var/** @type {?} */attrs=Object.keys(ph.attrs).map(function(name){return name+'="'+ph.attrs[name]+'"';}).join(' ');if(ph.isVoid){return'<'+tag+' '+attrs+'/>';}var/** @type {?} */children=ph.children.map(function(c){return c.visit(_this75);}).join('');return'<'+tag+' '+attrs+'>'+children+'</'+tag+'>';}/**
     * @param {?} ph
     * @param {?=} context
     * @return {?}
     */},{key:'visitIcuPlaceholder',value:function visitIcuPlaceholder(ph,context){// An ICU placeholder references the source message to be serialized
return this._convertToText(this._srcMsg.placeholderToMessage[ph.name]);}/**
     * Convert a source message to a translated text string:
     * - text nodes are replaced with their translation,
     * - placeholders are replaced with their content,
     * - ICU nodes are converted to ICU expressions.
     * @param {?} srcMsg
     * @return {?}
     */},{key:'_convertToText',value:function _convertToText(srcMsg){var _this76=this;var/** @type {?} */id=this._digest(srcMsg);var/** @type {?} */mapper=this._mapperFactory?this._mapperFactory(srcMsg):null;var/** @type {?} */nodes=void 0;this._contextStack.push({msg:this._srcMsg,mapper:this._mapper});this._srcMsg=srcMsg;if(this._i18nNodesByMsgId.hasOwnProperty(id)){// When there is a translation use its nodes as the source
// And create a mapper to convert serialized placeholder names to internal names
nodes=this._i18nNodesByMsgId[id];this._mapper=function(name){return mapper?mapper.toInternalName(name):name;};}else{// When no translation has been found
// - report an error / a warning / nothing,
// - use the nodes from the original message
// - placeholders are already internal and need no mapper
if(this._missingTranslationStrategy===__WEBPACK_IMPORTED_MODULE_0__angular_core__["_97" /* MissingTranslationStrategy */].Error){var/** @type {?} */ctx=this._locale?' for locale "'+this._locale+'"':'';this._addError(srcMsg.nodes[0],'Missing translation for message "'+id+'"'+ctx);}else if(this._console&&this._missingTranslationStrategy===__WEBPACK_IMPORTED_MODULE_0__angular_core__["_97" /* MissingTranslationStrategy */].Warning){var/** @type {?} */_ctx2=this._locale?' for locale "'+this._locale+'"':'';this._console.warn('Missing translation for message "'+id+'"'+_ctx2);}nodes=srcMsg.nodes;this._mapper=function(name){return name;};}var/** @type {?} */text=nodes.map(function(node){return node.visit(_this76);}).join('');var/** @type {?} */context=this._contextStack.pop();this._srcMsg=context.msg;this._mapper=context.mapper;return text;}/**
     * @param {?} el
     * @param {?} msg
     * @return {?}
     */},{key:'_addError',value:function _addError(el,msg){this._errors.push(new I18nError(el.sourceSpan,msg));}}]);return I18nToHtmlVisitor;}();var I18NHtmlParser=function(){/**
     * @param {?} _htmlParser
     * @param {?=} translations
     * @param {?=} translationsFormat
     * @param {?=} missingTranslation
     * @param {?=} console
     */function I18NHtmlParser(_htmlParser,translations,translationsFormat){var missingTranslation=arguments.length>3&&arguments[3]!==undefined?arguments[3]:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_97" /* MissingTranslationStrategy */].Warning;var console=arguments[4];_classCallCheck(this,I18NHtmlParser);this._htmlParser=_htmlParser;if(translations){var serializer=createSerializer(translationsFormat);this._translationBundle=TranslationBundle.load(translations,'i18n',serializer,missingTranslation,console);}}/**
     * @param {?} source
     * @param {?} url
     * @param {?=} parseExpansionForms
     * @param {?=} interpolationConfig
     * @return {?}
     */_createClass(I18NHtmlParser,[{key:'parse',value:function parse(source,url){var parseExpansionForms=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var interpolationConfig=arguments.length>3&&arguments[3]!==undefined?arguments[3]:DEFAULT_INTERPOLATION_CONFIG;var/** @type {?} */parseResult=this._htmlParser.parse(source,url,parseExpansionForms,interpolationConfig);if(!this._translationBundle){// Do not enable i18n when no translation bundle is provided
return parseResult;}if(parseResult.errors.length){return new ParseTreeResult(parseResult.rootNodes,parseResult.errors);}return mergeTranslations(parseResult.rootNodes,this._translationBundle,interpolationConfig,[],{});}}]);return I18NHtmlParser;}();/**
 * @param {?=} format
 * @return {?}
 */function createSerializer(format){format=(format||'xlf').toLowerCase();switch(format){case'xmb':return new Xmb();case'xtb':return new Xtb();case'xliff':case'xlf':default:return new Xliff();}}// http://cldr.unicode.org/index/cldr-spec/plural-rules
var/** @type {?} */PLURAL_CASES=['zero','one','two','few','many','other'];/**
 * Expands special forms into elements.
 *
 * For example,
 *
 * ```
 * { messages.length, plural,
 *   =0 {zero}
 *   =1 {one}
 *   other {more than one}
 * }
 * ```
 *
 * will be expanded into
 *
 * ```
 * <ng-container [ngPlural]="messages.length">
 *   <ng-template ngPluralCase="=0">zero</ng-template>
 *   <ng-template ngPluralCase="=1">one</ng-template>
 *   <ng-template ngPluralCase="other">more than one</ng-template>
 * </ng-container>
 * ```
 * @param {?} nodes
 * @return {?}
 */function expandNodes(nodes){var/** @type {?} */expander=new _Expander();return new ExpansionResult(visitAll(expander,nodes),expander.isExpanded,expander.errors);}var ExpansionResult=/**
     * @param {?} nodes
     * @param {?} expanded
     * @param {?} errors
     */function ExpansionResult(nodes,expanded,errors){_classCallCheck(this,ExpansionResult);this.nodes=nodes;this.expanded=expanded;this.errors=errors;};var ExpansionError=function(_ParseError4){_inherits(ExpansionError,_ParseError4);/**
     * @param {?} span
     * @param {?} errorMsg
     */function ExpansionError(span,errorMsg){_classCallCheck(this,ExpansionError);return _possibleConstructorReturn(this,(ExpansionError.__proto__||Object.getPrototypeOf(ExpansionError)).call(this,span,errorMsg));}return ExpansionError;}(ParseError);/**
 * Expand expansion forms (plural, select) to directives
 *
 * \@internal
 */var _Expander=function(){function _Expander(){_classCallCheck(this,_Expander);this.isExpanded=false;this.errors=[];}/**
     * @param {?} element
     * @param {?} context
     * @return {?}
     */_createClass(_Expander,[{key:'visitElement',value:function visitElement(element,context){return new Element(element.name,element.attrs,visitAll(this,element.children),element.sourceSpan,element.startSourceSpan,element.endSourceSpan);}/**
     * @param {?} attribute
     * @param {?} context
     * @return {?}
     */},{key:'visitAttribute',value:function visitAttribute(attribute,context){return attribute;}/**
     * @param {?} text
     * @param {?} context
     * @return {?}
     */},{key:'visitText',value:function visitText(text,context){return text;}/**
     * @param {?} comment
     * @param {?} context
     * @return {?}
     */},{key:'visitComment',value:function visitComment(comment,context){return comment;}/**
     * @param {?} icu
     * @param {?} context
     * @return {?}
     */},{key:'visitExpansion',value:function visitExpansion(icu,context){this.isExpanded=true;return icu.type=='plural'?_expandPluralForm(icu,this.errors):_expandDefaultForm(icu,this.errors);}/**
     * @param {?} icuCase
     * @param {?} context
     * @return {?}
     */},{key:'visitExpansionCase',value:function visitExpansionCase(icuCase,context){throw new Error('Should not be reached');}}]);return _Expander;}();/**
 * @param {?} ast
 * @param {?} errors
 * @return {?}
 */function _expandPluralForm(ast,errors){var/** @type {?} */children=ast.cases.map(function(c){if(PLURAL_CASES.indexOf(c.value)==-1&&!c.value.match(/^=\d+$/)){errors.push(new ExpansionError(c.valueSourceSpan,'Plural cases should be "=<number>" or one of '+PLURAL_CASES.join(", ")));}var/** @type {?} */expansionResult=expandNodes(c.expression);errors.push.apply(errors,_toConsumableArray(expansionResult.errors));return new Element('ng-template',[new Attribute$1('ngPluralCase',''+c.value,c.valueSourceSpan)],expansionResult.nodes,c.sourceSpan,c.sourceSpan,c.sourceSpan);});var/** @type {?} */switchAttr=new Attribute$1('[ngPlural]',ast.switchValue,ast.switchValueSourceSpan);return new Element('ng-container',[switchAttr],children,ast.sourceSpan,ast.sourceSpan,ast.sourceSpan);}/**
 * @param {?} ast
 * @param {?} errors
 * @return {?}
 */function _expandDefaultForm(ast,errors){var/** @type {?} */children=ast.cases.map(function(c){var/** @type {?} */expansionResult=expandNodes(c.expression);errors.push.apply(errors,_toConsumableArray(expansionResult.errors));if(c.value==='other'){// other is the default case when no values match
return new Element('ng-template',[new Attribute$1('ngSwitchDefault','',c.valueSourceSpan)],expansionResult.nodes,c.sourceSpan,c.sourceSpan,c.sourceSpan);}return new Element('ng-template',[new Attribute$1('ngSwitchCase',''+c.value,c.valueSourceSpan)],expansionResult.nodes,c.sourceSpan,c.sourceSpan,c.sourceSpan);});var/** @type {?} */switchAttr=new Attribute$1('[ngSwitch]',ast.switchValue,ast.switchValueSourceSpan);return new Element('ng-container',[switchAttr],children,ast.sourceSpan,ast.sourceSpan,ast.sourceSpan);}var ProviderError=function(_ParseError5){_inherits(ProviderError,_ParseError5);/**
     * @param {?} message
     * @param {?} span
     */function ProviderError(message,span){_classCallCheck(this,ProviderError);return _possibleConstructorReturn(this,(ProviderError.__proto__||Object.getPrototypeOf(ProviderError)).call(this,span,message));}return ProviderError;}(ParseError);var ProviderViewContext=/**
     * @param {?} component
     * @param {?} sourceSpan
     */function ProviderViewContext(component,sourceSpan){var _this79=this;_classCallCheck(this,ProviderViewContext);this.component=component;this.sourceSpan=sourceSpan;this.errors=[];this.viewQueries=_getViewQueries(component);this.viewProviders=new Map();component.viewProviders.forEach(function(provider){if(isBlank(_this79.viewProviders.get(tokenReference(provider.token)))){_this79.viewProviders.set(tokenReference(provider.token),true);}});};var ProviderElementContext=function(){/**
     * @param {?} viewContext
     * @param {?} _parent
     * @param {?} _isViewRoot
     * @param {?} _directiveAsts
     * @param {?} attrs
     * @param {?} refs
     * @param {?} isTemplate
     * @param {?} contentQueryStartId
     * @param {?} _sourceSpan
     */function ProviderElementContext(viewContext,_parent,_isViewRoot,_directiveAsts,attrs,refs,isTemplate,contentQueryStartId,_sourceSpan){var _this80=this;_classCallCheck(this,ProviderElementContext);this.viewContext=viewContext;this._parent=_parent;this._isViewRoot=_isViewRoot;this._directiveAsts=_directiveAsts;this._sourceSpan=_sourceSpan;this._transformedProviders=new Map();this._seenProviders=new Map();this._hasViewContainer=false;this._queriedTokens=new Map();this._attrs={};attrs.forEach(function(attrAst){return _this80._attrs[attrAst.name]=attrAst.value;});var directivesMeta=_directiveAsts.map(function(directiveAst){return directiveAst.directive;});this._allProviders=_resolveProvidersFromDirectives(directivesMeta,_sourceSpan,viewContext.errors);this._contentQueries=_getContentQueries(contentQueryStartId,directivesMeta);Array.from(this._allProviders.values()).forEach(function(provider){_this80._addQueryReadsTo(provider.token,provider.token,_this80._queriedTokens);});if(isTemplate){var templateRefId=createIdentifierToken(Identifiers.TemplateRef);this._addQueryReadsTo(templateRefId,templateRefId,this._queriedTokens);}refs.forEach(function(refAst){var defaultQueryValue=refAst.value||createIdentifierToken(Identifiers.ElementRef);_this80._addQueryReadsTo({value:refAst.name},defaultQueryValue,_this80._queriedTokens);});if(this._queriedTokens.get(resolveIdentifier(Identifiers.ViewContainerRef))){this._hasViewContainer=true;}// create the providers that we know are eager first
Array.from(this._allProviders.values()).forEach(function(provider){var eager=provider.eager||_this80._queriedTokens.get(tokenReference(provider.token));if(eager){_this80._getOrCreateLocalProvider(provider.providerType,provider.token,true);}});}/**
     * @return {?}
     */_createClass(ProviderElementContext,[{key:'afterElement',value:function afterElement(){var _this81=this;// collect lazy providers
Array.from(this._allProviders.values()).forEach(function(provider){_this81._getOrCreateLocalProvider(provider.providerType,provider.token,false);});}/**
     * @return {?}
     */},{key:'_addQueryReadsTo',/**
     * @param {?} token
     * @param {?} defaultValue
     * @param {?} queryReadTokens
     * @return {?}
     */value:function _addQueryReadsTo(token,defaultValue,queryReadTokens){this._getQueriesFor(token).forEach(function(query){var/** @type {?} */queryValue=query.meta.read||defaultValue;var/** @type {?} */tokenRef=tokenReference(queryValue);var/** @type {?} */queryMatches=queryReadTokens.get(tokenRef);if(!queryMatches){queryMatches=[];queryReadTokens.set(tokenRef,queryMatches);}queryMatches.push({queryId:query.queryId,value:queryValue});});}/**
     * @param {?} token
     * @return {?}
     */},{key:'_getQueriesFor',value:function _getQueriesFor(token){var/** @type {?} */result=[];var/** @type {?} */currentEl=this;var/** @type {?} */distance=0;var/** @type {?} */queries=void 0;while(currentEl!==null){queries=currentEl._contentQueries.get(tokenReference(token));if(queries){result.push.apply(result,_toConsumableArray(queries.filter(function(query){return query.meta.descendants||distance<=1;})));}if(currentEl._directiveAsts.length>0){distance++;}currentEl=currentEl._parent;}queries=this.viewContext.viewQueries.get(tokenReference(token));if(queries){result.push.apply(result,_toConsumableArray(queries));}return result;}/**
     * @param {?} requestingProviderType
     * @param {?} token
     * @param {?} eager
     * @return {?}
     */},{key:'_getOrCreateLocalProvider',value:function _getOrCreateLocalProvider(requestingProviderType,token,eager){var _this82=this;var/** @type {?} */resolvedProvider=this._allProviders.get(tokenReference(token));if(!resolvedProvider||(requestingProviderType===ProviderAstType.Directive||requestingProviderType===ProviderAstType.PublicService)&&resolvedProvider.providerType===ProviderAstType.PrivateService||(requestingProviderType===ProviderAstType.PrivateService||requestingProviderType===ProviderAstType.PublicService)&&resolvedProvider.providerType===ProviderAstType.Builtin){return null;}var/** @type {?} */transformedProviderAst=this._transformedProviders.get(tokenReference(token));if(transformedProviderAst){return transformedProviderAst;}if(isPresent(this._seenProviders.get(tokenReference(token)))){this.viewContext.errors.push(new ProviderError('Cannot instantiate cyclic dependency! '+tokenName(token),this._sourceSpan));return null;}this._seenProviders.set(tokenReference(token),true);var/** @type {?} */transformedProviders=resolvedProvider.providers.map(function(provider){var/** @type {?} */transformedUseValue=provider.useValue;var/** @type {?} */transformedUseExisting=provider.useExisting;var/** @type {?} */transformedDeps=void 0;if(isPresent(provider.useExisting)){var/** @type {?} */existingDiDep=_this82._getDependency(resolvedProvider.providerType,{token:provider.useExisting},eager);if(isPresent(existingDiDep.token)){transformedUseExisting=existingDiDep.token;}else{transformedUseExisting=null;transformedUseValue=existingDiDep.value;}}else if(provider.useFactory){var/** @type {?} */deps=provider.deps||provider.useFactory.diDeps;transformedDeps=deps.map(function(dep){return _this82._getDependency(resolvedProvider.providerType,dep,eager);});}else if(provider.useClass){var/** @type {?} */_deps=provider.deps||provider.useClass.diDeps;transformedDeps=_deps.map(function(dep){return _this82._getDependency(resolvedProvider.providerType,dep,eager);});}return _transformProvider(provider,{useExisting:transformedUseExisting,useValue:transformedUseValue,deps:transformedDeps});});transformedProviderAst=_transformProviderAst(resolvedProvider,{eager:eager,providers:transformedProviders});this._transformedProviders.set(tokenReference(token),transformedProviderAst);return transformedProviderAst;}/**
     * @param {?} requestingProviderType
     * @param {?} dep
     * @param {?=} eager
     * @return {?}
     */},{key:'_getLocalDependency',value:function _getLocalDependency(requestingProviderType,dep){var eager=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;if(dep.isAttribute){var/** @type {?} */attrValue=this._attrs[dep.token.value];return{isValue:true,value:attrValue==null?null:attrValue};}if(isPresent(dep.token)){// access builtints
if(requestingProviderType===ProviderAstType.Directive||requestingProviderType===ProviderAstType.Component){if(tokenReference(dep.token)===resolveIdentifier(Identifiers.Renderer)||tokenReference(dep.token)===resolveIdentifier(Identifiers.ElementRef)||tokenReference(dep.token)===resolveIdentifier(Identifiers.ChangeDetectorRef)||tokenReference(dep.token)===resolveIdentifier(Identifiers.TemplateRef)){return dep;}if(tokenReference(dep.token)===resolveIdentifier(Identifiers.ViewContainerRef)){this._hasViewContainer=true;}}// access the injector
if(tokenReference(dep.token)===resolveIdentifier(Identifiers.Injector)){return dep;}// access providers
if(isPresent(this._getOrCreateLocalProvider(requestingProviderType,dep.token,eager))){return dep;}}return null;}/**
     * @param {?} requestingProviderType
     * @param {?} dep
     * @param {?=} eager
     * @return {?}
     */},{key:'_getDependency',value:function _getDependency(requestingProviderType,dep){var eager=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var/** @type {?} */currElement=this;var/** @type {?} */currEager=eager;var/** @type {?} */result=null;if(!dep.isSkipSelf){result=this._getLocalDependency(requestingProviderType,dep,eager);}if(dep.isSelf){if(!result&&dep.isOptional){result={isValue:true,value:null};}}else{// check parent elements
while(!result&&currElement._parent){var/** @type {?} */prevElement=currElement;currElement=currElement._parent;if(prevElement._isViewRoot){currEager=false;}result=currElement._getLocalDependency(ProviderAstType.PublicService,dep,currEager);}// check @Host restriction
if(!result){if(!dep.isHost||this.viewContext.component.isHost||this.viewContext.component.type.reference===tokenReference(dep.token)||isPresent(this.viewContext.viewProviders.get(tokenReference(dep.token)))){result=dep;}else{result=dep.isOptional?result={isValue:true,value:null}:null;}}}if(!result){this.viewContext.errors.push(new ProviderError('No provider for '+tokenName(dep.token),this._sourceSpan));}return result;}},{key:'transformProviders',get:function get(){return Array.from(this._transformedProviders.values());}/**
     * @return {?}
     */},{key:'transformedDirectiveAsts',get:function get(){var/** @type {?} */sortedProviderTypes=this.transformProviders.map(function(provider){return provider.token.identifier;});var/** @type {?} */sortedDirectives=this._directiveAsts.slice();sortedDirectives.sort(function(dir1,dir2){return sortedProviderTypes.indexOf(dir1.directive.type)-sortedProviderTypes.indexOf(dir2.directive.type);});return sortedDirectives;}/**
     * @return {?}
     */},{key:'transformedHasViewContainer',get:function get(){return this._hasViewContainer;}/**
     * @return {?}
     */},{key:'queryMatches',get:function get(){var/** @type {?} */allMatches=[];this._queriedTokens.forEach(function(matches){allMatches.push.apply(allMatches,_toConsumableArray(matches));});return allMatches;}}]);return ProviderElementContext;}();var NgModuleProviderAnalyzer=function(){/**
     * @param {?} ngModule
     * @param {?} extraProviders
     * @param {?} sourceSpan
     */function NgModuleProviderAnalyzer(ngModule,extraProviders,sourceSpan){var _this83=this;_classCallCheck(this,NgModuleProviderAnalyzer);this._transformedProviders=new Map();this._seenProviders=new Map();this._errors=[];this._allProviders=new Map();ngModule.transitiveModule.modules.forEach(function(ngModuleType){var ngModuleProvider={token:{identifier:ngModuleType},useClass:ngModuleType};_resolveProviders([ngModuleProvider],ProviderAstType.PublicService,true,sourceSpan,_this83._errors,_this83._allProviders);});_resolveProviders(ngModule.transitiveModule.providers.map(function(entry){return entry.provider;}).concat(extraProviders),ProviderAstType.PublicService,false,sourceSpan,this._errors,this._allProviders);}/**
     * @return {?}
     */_createClass(NgModuleProviderAnalyzer,[{key:'parse',value:function parse(){var _this84=this;Array.from(this._allProviders.values()).forEach(function(provider){_this84._getOrCreateLocalProvider(provider.token,provider.eager);});if(this._errors.length>0){var/** @type {?} */errorString=this._errors.join('\n');throw new Error('Provider parse errors:\n'+errorString);}return Array.from(this._transformedProviders.values());}/**
     * @param {?} token
     * @param {?} eager
     * @return {?}
     */},{key:'_getOrCreateLocalProvider',value:function _getOrCreateLocalProvider(token,eager){var _this85=this;var/** @type {?} */resolvedProvider=this._allProviders.get(tokenReference(token));if(!resolvedProvider){return null;}var/** @type {?} */transformedProviderAst=this._transformedProviders.get(tokenReference(token));if(transformedProviderAst){return transformedProviderAst;}if(isPresent(this._seenProviders.get(tokenReference(token)))){this._errors.push(new ProviderError('Cannot instantiate cyclic dependency! '+tokenName(token),resolvedProvider.sourceSpan));return null;}this._seenProviders.set(tokenReference(token),true);var/** @type {?} */transformedProviders=resolvedProvider.providers.map(function(provider){var/** @type {?} */transformedUseValue=provider.useValue;var/** @type {?} */transformedUseExisting=provider.useExisting;var/** @type {?} */transformedDeps=void 0;if(isPresent(provider.useExisting)){var/** @type {?} */existingDiDep=_this85._getDependency({token:provider.useExisting},eager,resolvedProvider.sourceSpan);if(isPresent(existingDiDep.token)){transformedUseExisting=existingDiDep.token;}else{transformedUseExisting=null;transformedUseValue=existingDiDep.value;}}else if(provider.useFactory){var/** @type {?} */deps=provider.deps||provider.useFactory.diDeps;transformedDeps=deps.map(function(dep){return _this85._getDependency(dep,eager,resolvedProvider.sourceSpan);});}else if(provider.useClass){var/** @type {?} */_deps2=provider.deps||provider.useClass.diDeps;transformedDeps=_deps2.map(function(dep){return _this85._getDependency(dep,eager,resolvedProvider.sourceSpan);});}return _transformProvider(provider,{useExisting:transformedUseExisting,useValue:transformedUseValue,deps:transformedDeps});});transformedProviderAst=_transformProviderAst(resolvedProvider,{eager:eager,providers:transformedProviders});this._transformedProviders.set(tokenReference(token),transformedProviderAst);return transformedProviderAst;}/**
     * @param {?} dep
     * @param {?=} eager
     * @param {?} requestorSourceSpan
     * @return {?}
     */},{key:'_getDependency',value:function _getDependency(dep){var eager=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var requestorSourceSpan=arguments[2];var/** @type {?} */foundLocal=false;if(!dep.isSkipSelf&&isPresent(dep.token)){// access the injector
if(tokenReference(dep.token)===resolveIdentifier(Identifiers.Injector)||tokenReference(dep.token)===resolveIdentifier(Identifiers.ComponentFactoryResolver)){foundLocal=true;}else if(isPresent(this._getOrCreateLocalProvider(dep.token,eager))){foundLocal=true;}}var/** @type {?} */result=dep;if(dep.isSelf&&!foundLocal){if(dep.isOptional){result={isValue:true,value:null};}else{this._errors.push(new ProviderError('No provider for '+tokenName(dep.token),requestorSourceSpan));}}return result;}}]);return NgModuleProviderAnalyzer;}();/**
 * @param {?} provider
 * @param {?} __1
 * @return {?}
 */function _transformProvider(provider,_ref27){var useExisting=_ref27.useExisting,useValue=_ref27.useValue,deps=_ref27.deps;return{token:provider.token,useClass:provider.useClass,useExisting:useExisting,useFactory:provider.useFactory,useValue:useValue,deps:deps,multi:provider.multi};}/**
 * @param {?} provider
 * @param {?} __1
 * @return {?}
 */function _transformProviderAst(provider,_ref28){var eager=_ref28.eager,providers=_ref28.providers;return new ProviderAst(provider.token,provider.multiProvider,provider.eager||eager,providers,provider.providerType,provider.lifecycleHooks,provider.sourceSpan);}/**
 * @param {?} directives
 * @param {?} sourceSpan
 * @param {?} targetErrors
 * @return {?}
 */function _resolveProvidersFromDirectives(directives,sourceSpan,targetErrors){var/** @type {?} */providersByToken=new Map();directives.forEach(function(directive){var/** @type {?} */dirProvider={token:{identifier:directive.type},useClass:directive.type};_resolveProviders([dirProvider],directive.isComponent?ProviderAstType.Component:ProviderAstType.Directive,true,sourceSpan,targetErrors,providersByToken);});// Note: directives need to be able to overwrite providers of a component!
var/** @type {?} */directivesWithComponentFirst=directives.filter(function(dir){return dir.isComponent;}).concat(directives.filter(function(dir){return!dir.isComponent;}));directivesWithComponentFirst.forEach(function(directive){_resolveProviders(directive.providers,ProviderAstType.PublicService,false,sourceSpan,targetErrors,providersByToken);_resolveProviders(directive.viewProviders,ProviderAstType.PrivateService,false,sourceSpan,targetErrors,providersByToken);});return providersByToken;}/**
 * @param {?} providers
 * @param {?} providerType
 * @param {?} eager
 * @param {?} sourceSpan
 * @param {?} targetErrors
 * @param {?} targetProvidersByToken
 * @return {?}
 */function _resolveProviders(providers,providerType,eager,sourceSpan,targetErrors,targetProvidersByToken){providers.forEach(function(provider){var/** @type {?} */resolvedProvider=targetProvidersByToken.get(tokenReference(provider.token));if(isPresent(resolvedProvider)&&!!resolvedProvider.multiProvider!==!!provider.multi){targetErrors.push(new ProviderError('Mixing multi and non multi provider is not possible for token '+tokenName(resolvedProvider.token),sourceSpan));}if(!resolvedProvider){var/** @type {?} */lifecycleHooks=provider.token.identifier&&provider.token.identifier.lifecycleHooks?provider.token.identifier.lifecycleHooks:[];resolvedProvider=new ProviderAst(provider.token,provider.multi,eager||lifecycleHooks.length>0,[provider],providerType,lifecycleHooks,sourceSpan);targetProvidersByToken.set(tokenReference(provider.token),resolvedProvider);}else{if(!provider.multi){resolvedProvider.providers.length=0;}resolvedProvider.providers.push(provider);}});}/**
 * @param {?} component
 * @return {?}
 */function _getViewQueries(component){// Note: queries start with id 1 so we can use the number in a Bloom filter!
var/** @type {?} */viewQueryId=1;var/** @type {?} */viewQueries=new Map();if(component.viewQueries){component.viewQueries.forEach(function(query){return _addQueryToTokenMap(viewQueries,{meta:query,queryId:viewQueryId++});});}return viewQueries;}/**
 * @param {?} contentQueryStartId
 * @param {?} directives
 * @return {?}
 */function _getContentQueries(contentQueryStartId,directives){var/** @type {?} */contentQueryId=contentQueryStartId;var/** @type {?} */contentQueries=new Map();directives.forEach(function(directive,directiveIndex){if(directive.queries){directive.queries.forEach(function(query){return _addQueryToTokenMap(contentQueries,{meta:query,queryId:contentQueryId++});});}});return contentQueries;}/**
 * @param {?} map
 * @param {?} query
 * @return {?}
 */function _addQueryToTokenMap(map,query){query.meta.selectors.forEach(function(token){var/** @type {?} */entry=map.get(tokenReference(token));if(!entry){entry=[];map.set(tokenReference(token),entry);}entry.push(query);});}/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 *//**
 * @abstract
 */var ElementSchemaRegistry=function(){function ElementSchemaRegistry(){_classCallCheck(this,ElementSchemaRegistry);}_createClass(ElementSchemaRegistry,[{key:'hasProperty',/**
     * @abstract
     * @param {?} tagName
     * @param {?} propName
     * @param {?} schemaMetas
     * @return {?}
     */value:function hasProperty(tagName,propName,schemaMetas){}/**
     * @abstract
     * @param {?} tagName
     * @param {?} schemaMetas
     * @return {?}
     */},{key:'hasElement',value:function hasElement(tagName,schemaMetas){}/**
     * @abstract
     * @param {?} elementName
     * @param {?} propName
     * @param {?} isAttribute
     * @return {?}
     */},{key:'securityContext',value:function securityContext(elementName,propName,isAttribute){}/**
     * @abstract
     * @return {?}
     */},{key:'allKnownElementNames',value:function allKnownElementNames(){}/**
     * @abstract
     * @param {?} propName
     * @return {?}
     */},{key:'getMappedPropName',value:function getMappedPropName(propName){}/**
     * @abstract
     * @return {?}
     */},{key:'getDefaultComponentElementName',value:function getDefaultComponentElementName(){}/**
     * @abstract
     * @param {?} name
     * @return {?}
     */},{key:'validateProperty',value:function validateProperty(name){}/**
     * @abstract
     * @param {?} name
     * @return {?}
     */},{key:'validateAttribute',value:function validateAttribute(name){}/**
     * @abstract
     * @param {?} propName
     * @return {?}
     */},{key:'normalizeAnimationStyleProperty',value:function normalizeAnimationStyleProperty(propName){}/**
     * @abstract
     * @param {?} camelCaseProp
     * @param {?} userProvidedProp
     * @param {?} val
     * @return {?}
     */},{key:'normalizeAnimationStyleValue',value:function normalizeAnimationStyleValue(camelCaseProp,userProvidedProp,val){}}]);return ElementSchemaRegistry;}();/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */var StyleWithImports=/**
     * @param {?} style
     * @param {?} styleUrls
     */function StyleWithImports(style,styleUrls){_classCallCheck(this,StyleWithImports);this.style=style;this.styleUrls=styleUrls;};/**
 * @param {?} url
 * @return {?}
 */function isStyleUrlResolvable(url){if(url==null||url.length===0||url[0]=='/')return false;var/** @type {?} */schemeMatch=url.match(URL_WITH_SCHEMA_REGEXP);return schemeMatch===null||schemeMatch[1]=='package'||schemeMatch[1]=='asset';}/**
 * Rewrites stylesheets by resolving and removing the \@import urls that
 * are either relative or don't have a `package:` scheme
 * @param {?} resolver
 * @param {?} baseUrl
 * @param {?} cssText
 * @return {?}
 */function extractStyleUrls(resolver,baseUrl,cssText){var/** @type {?} */foundUrls=[];var/** @type {?} */modifiedCssText=cssText.replace(CSS_COMMENT_REGEXP,'').replace(CSS_IMPORT_REGEXP,function(){var/** @type {?} */url=(arguments.length<=1?undefined:arguments[1])||(arguments.length<=2?undefined:arguments[2]);if(!isStyleUrlResolvable(url)){// Do not attempt to resolve non-package absolute URLs with URI scheme
return arguments.length<=0?undefined:arguments[0];}foundUrls.push(resolver.resolve(baseUrl,url));return'';});return new StyleWithImports(modifiedCssText,foundUrls);}var/** @type {?} */CSS_IMPORT_REGEXP=/@import\s+(?:url\()?\s*(?:(?:['"]([^'"]*))|([^;\)\s]*))[^;]*;?/g;var/** @type {?} */CSS_COMMENT_REGEXP=/\/\*.+?\*\//g;var/** @type {?} */URL_WITH_SCHEMA_REGEXP=/^([^:/?#]+):/;var/** @type {?} */PROPERTY_PARTS_SEPARATOR='.';var/** @type {?} */ATTRIBUTE_PREFIX='attr';var/** @type {?} */CLASS_PREFIX='class';var/** @type {?} */STYLE_PREFIX='style';var/** @type {?} */ANIMATE_PROP_PREFIX='animate-';var BoundPropertyType={};BoundPropertyType.DEFAULT=0;BoundPropertyType.LITERAL_ATTR=1;BoundPropertyType.ANIMATION=2;BoundPropertyType[BoundPropertyType.DEFAULT]="DEFAULT";BoundPropertyType[BoundPropertyType.LITERAL_ATTR]="LITERAL_ATTR";BoundPropertyType[BoundPropertyType.ANIMATION]="ANIMATION";/**
 * Represents a parsed property.
 */var BoundProperty=function(){/**
     * @param {?} name
     * @param {?} expression
     * @param {?} type
     * @param {?} sourceSpan
     */function BoundProperty(name,expression,type,sourceSpan){_classCallCheck(this,BoundProperty);this.name=name;this.expression=expression;this.type=type;this.sourceSpan=sourceSpan;}/**
     * @return {?}
     */_createClass(BoundProperty,[{key:'isLiteral',get:function get(){return this.type===BoundPropertyType.LITERAL_ATTR;}/**
     * @return {?}
     */},{key:'isAnimation',get:function get(){return this.type===BoundPropertyType.ANIMATION;}}]);return BoundProperty;}();/**
 * Parses bindings in templates and in the directive host area.
 */var BindingParser=function(){/**
     * @param {?} _exprParser
     * @param {?} _interpolationConfig
     * @param {?} _schemaRegistry
     * @param {?} pipes
     * @param {?} _targetErrors
     */function BindingParser(_exprParser,_interpolationConfig,_schemaRegistry,pipes,_targetErrors){var _this86=this;_classCallCheck(this,BindingParser);this._exprParser=_exprParser;this._interpolationConfig=_interpolationConfig;this._schemaRegistry=_schemaRegistry;this._targetErrors=_targetErrors;this.pipesByName=new Map();this._usedPipes=new Map();pipes.forEach(function(pipe){return _this86.pipesByName.set(pipe.name,pipe);});}/**
     * @return {?}
     */_createClass(BindingParser,[{key:'getUsedPipes',value:function getUsedPipes(){return Array.from(this._usedPipes.values());}/**
     * @param {?} dirMeta
     * @param {?} elementSelector
     * @param {?} sourceSpan
     * @return {?}
     */},{key:'createDirectiveHostPropertyAsts',value:function createDirectiveHostPropertyAsts(dirMeta,elementSelector,sourceSpan){var _this87=this;if(dirMeta.hostProperties){var/** @type {?} */boundProps=[];Object.keys(dirMeta.hostProperties).forEach(function(propName){var/** @type {?} */expression=dirMeta.hostProperties[propName];if(typeof expression==='string'){_this87.parsePropertyBinding(propName,expression,true,sourceSpan,[],boundProps);}else{_this87._reportError('Value of the host property binding "'+propName+'" needs to be a string representing an expression but got "'+expression+'" ('+(typeof expression==='undefined'?'undefined':_typeof(expression))+')',sourceSpan);}});return boundProps.map(function(prop){return _this87.createElementPropertyAst(elementSelector,prop);});}}/**
     * @param {?} dirMeta
     * @param {?} sourceSpan
     * @return {?}
     */},{key:'createDirectiveHostEventAsts',value:function createDirectiveHostEventAsts(dirMeta,sourceSpan){var _this88=this;if(dirMeta.hostListeners){var/** @type {?} */targetEventAsts=[];Object.keys(dirMeta.hostListeners).forEach(function(propName){var/** @type {?} */expression=dirMeta.hostListeners[propName];if(typeof expression==='string'){_this88.parseEvent(propName,expression,sourceSpan,[],targetEventAsts);}else{_this88._reportError('Value of the host listener "'+propName+'" needs to be a string representing an expression but got "'+expression+'" ('+(typeof expression==='undefined'?'undefined':_typeof(expression))+')',sourceSpan);}});return targetEventAsts;}}/**
     * @param {?} value
     * @param {?} sourceSpan
     * @return {?}
     */},{key:'parseInterpolation',value:function parseInterpolation(value,sourceSpan){var/** @type {?} */sourceInfo=sourceSpan.start.toString();try{var/** @type {?} */ast=this._exprParser.parseInterpolation(value,sourceInfo,this._interpolationConfig);if(ast)this._reportExpressionParserErrors(ast.errors,sourceSpan);this._checkPipes(ast,sourceSpan);return ast;}catch(e){this._reportError(''+e,sourceSpan);return this._exprParser.wrapLiteralPrimitive('ERROR',sourceInfo);}}/**
     * @param {?} prefixToken
     * @param {?} value
     * @param {?} sourceSpan
     * @param {?} targetMatchableAttrs
     * @param {?} targetProps
     * @param {?} targetVars
     * @return {?}
     */},{key:'parseInlineTemplateBinding',value:function parseInlineTemplateBinding(prefixToken,value,sourceSpan,targetMatchableAttrs,targetProps,targetVars){var/** @type {?} */bindings=this._parseTemplateBindings(prefixToken,value,sourceSpan);for(var/** @type {?} */i=0;i<bindings.length;i++){var/** @type {?} */binding=bindings[i];if(binding.keyIsVar){targetVars.push(new VariableAst(binding.key,binding.name,sourceSpan));}else if(binding.expression){this._parsePropertyAst(binding.key,binding.expression,sourceSpan,targetMatchableAttrs,targetProps);}else{targetMatchableAttrs.push([binding.key,'']);this.parseLiteralAttr(binding.key,null,sourceSpan,targetMatchableAttrs,targetProps);}}}/**
     * @param {?} prefixToken
     * @param {?} value
     * @param {?} sourceSpan
     * @return {?}
     */},{key:'_parseTemplateBindings',value:function _parseTemplateBindings(prefixToken,value,sourceSpan){var _this89=this;var/** @type {?} */sourceInfo=sourceSpan.start.toString();try{var/** @type {?} */bindingsResult=this._exprParser.parseTemplateBindings(prefixToken,value,sourceInfo);this._reportExpressionParserErrors(bindingsResult.errors,sourceSpan);bindingsResult.templateBindings.forEach(function(binding){if(binding.expression){_this89._checkPipes(binding.expression,sourceSpan);}});bindingsResult.warnings.forEach(function(warning){_this89._reportError(warning,sourceSpan,ParseErrorLevel.WARNING);});return bindingsResult.templateBindings;}catch(e){this._reportError(''+e,sourceSpan);return[];}}/**
     * @param {?} name
     * @param {?} value
     * @param {?} sourceSpan
     * @param {?} targetMatchableAttrs
     * @param {?} targetProps
     * @return {?}
     */},{key:'parseLiteralAttr',value:function parseLiteralAttr(name,value,sourceSpan,targetMatchableAttrs,targetProps){if(_isAnimationLabel(name)){name=name.substring(1);if(value){this._reportError('Assigning animation triggers via @prop="exp" attributes with an expression is invalid.'+' Use property bindings (e.g. [@prop]="exp") or use an attribute without a value (e.g. @prop) instead.',sourceSpan,ParseErrorLevel.FATAL);}this._parseAnimation(name,value,sourceSpan,targetMatchableAttrs,targetProps);}else{targetProps.push(new BoundProperty(name,this._exprParser.wrapLiteralPrimitive(value,''),BoundPropertyType.LITERAL_ATTR,sourceSpan));}}/**
     * @param {?} name
     * @param {?} expression
     * @param {?} isHost
     * @param {?} sourceSpan
     * @param {?} targetMatchableAttrs
     * @param {?} targetProps
     * @return {?}
     */},{key:'parsePropertyBinding',value:function parsePropertyBinding(name,expression,isHost,sourceSpan,targetMatchableAttrs,targetProps){var/** @type {?} */isAnimationProp=false;if(name.startsWith(ANIMATE_PROP_PREFIX)){isAnimationProp=true;name=name.substring(ANIMATE_PROP_PREFIX.length);}else if(_isAnimationLabel(name)){isAnimationProp=true;name=name.substring(1);}if(isAnimationProp){this._parseAnimation(name,expression,sourceSpan,targetMatchableAttrs,targetProps);}else{this._parsePropertyAst(name,this._parseBinding(expression,isHost,sourceSpan),sourceSpan,targetMatchableAttrs,targetProps);}}/**
     * @param {?} name
     * @param {?} value
     * @param {?} sourceSpan
     * @param {?} targetMatchableAttrs
     * @param {?} targetProps
     * @return {?}
     */},{key:'parsePropertyInterpolation',value:function parsePropertyInterpolation(name,value,sourceSpan,targetMatchableAttrs,targetProps){var/** @type {?} */expr=this.parseInterpolation(value,sourceSpan);if(expr){this._parsePropertyAst(name,expr,sourceSpan,targetMatchableAttrs,targetProps);return true;}return false;}/**
     * @param {?} name
     * @param {?} ast
     * @param {?} sourceSpan
     * @param {?} targetMatchableAttrs
     * @param {?} targetProps
     * @return {?}
     */},{key:'_parsePropertyAst',value:function _parsePropertyAst(name,ast,sourceSpan,targetMatchableAttrs,targetProps){targetMatchableAttrs.push([name,ast.source]);targetProps.push(new BoundProperty(name,ast,BoundPropertyType.DEFAULT,sourceSpan));}/**
     * @param {?} name
     * @param {?} expression
     * @param {?} sourceSpan
     * @param {?} targetMatchableAttrs
     * @param {?} targetProps
     * @return {?}
     */},{key:'_parseAnimation',value:function _parseAnimation(name,expression,sourceSpan,targetMatchableAttrs,targetProps){// This will occur when a @trigger is not paired with an expression.
// For animations it is valid to not have an expression since */void
// states will be applied by angular when the element is attached/detached
var/** @type {?} */ast=this._parseBinding(expression||'null',false,sourceSpan);targetMatchableAttrs.push([name,ast.source]);targetProps.push(new BoundProperty(name,ast,BoundPropertyType.ANIMATION,sourceSpan));}/**
     * @param {?} value
     * @param {?} isHostBinding
     * @param {?} sourceSpan
     * @return {?}
     */},{key:'_parseBinding',value:function _parseBinding(value,isHostBinding,sourceSpan){var/** @type {?} */sourceInfo=sourceSpan.start.toString();try{var/** @type {?} */ast=isHostBinding?this._exprParser.parseSimpleBinding(value,sourceInfo,this._interpolationConfig):this._exprParser.parseBinding(value,sourceInfo,this._interpolationConfig);if(ast)this._reportExpressionParserErrors(ast.errors,sourceSpan);this._checkPipes(ast,sourceSpan);return ast;}catch(e){this._reportError(''+e,sourceSpan);return this._exprParser.wrapLiteralPrimitive('ERROR',sourceInfo);}}/**
     * @param {?} elementSelector
     * @param {?} boundProp
     * @return {?}
     */},{key:'createElementPropertyAst',value:function createElementPropertyAst(elementSelector,boundProp){if(boundProp.isAnimation){return new BoundElementPropertyAst(boundProp.name,PropertyBindingType.Animation,__WEBPACK_IMPORTED_MODULE_0__angular_core__["U" /* SecurityContext */].NONE,false,boundProp.expression,null,boundProp.sourceSpan);}var/** @type {?} */unit=null;var/** @type {?} */bindingType=void 0;var/** @type {?} */boundPropertyName=null;var/** @type {?} */parts=boundProp.name.split(PROPERTY_PARTS_SEPARATOR);var/** @type {?} */securityContexts=void 0;// Check check for special cases (prefix style, attr, class)
if(parts.length>1){if(parts[0]==ATTRIBUTE_PREFIX){boundPropertyName=parts[1];this._validatePropertyOrAttributeName(boundPropertyName,boundProp.sourceSpan,true);securityContexts=calcPossibleSecurityContexts(this._schemaRegistry,elementSelector,boundPropertyName,true);var/** @type {?} */nsSeparatorIdx=boundPropertyName.indexOf(':');if(nsSeparatorIdx>-1){var/** @type {?} */ns=boundPropertyName.substring(0,nsSeparatorIdx);var/** @type {?} */name=boundPropertyName.substring(nsSeparatorIdx+1);boundPropertyName=mergeNsAndName(ns,name);}bindingType=PropertyBindingType.Attribute;}else if(parts[0]==CLASS_PREFIX){boundPropertyName=parts[1];bindingType=PropertyBindingType.Class;securityContexts=[__WEBPACK_IMPORTED_MODULE_0__angular_core__["U" /* SecurityContext */].NONE];}else if(parts[0]==STYLE_PREFIX){unit=parts.length>2?parts[2]:null;boundPropertyName=parts[1];bindingType=PropertyBindingType.Style;securityContexts=[__WEBPACK_IMPORTED_MODULE_0__angular_core__["U" /* SecurityContext */].STYLE];}}// If not a special case, use the full property name
if(boundPropertyName===null){boundPropertyName=this._schemaRegistry.getMappedPropName(boundProp.name);securityContexts=calcPossibleSecurityContexts(this._schemaRegistry,elementSelector,boundPropertyName,false);bindingType=PropertyBindingType.Property;this._validatePropertyOrAttributeName(boundPropertyName,boundProp.sourceSpan,false);}return new BoundElementPropertyAst(boundPropertyName,bindingType,securityContexts.length===1?securityContexts[0]:null,securityContexts.length>1,boundProp.expression,unit,boundProp.sourceSpan);}/**
     * @param {?} name
     * @param {?} expression
     * @param {?} sourceSpan
     * @param {?} targetMatchableAttrs
     * @param {?} targetEvents
     * @return {?}
     */},{key:'parseEvent',value:function parseEvent(name,expression,sourceSpan,targetMatchableAttrs,targetEvents){if(_isAnimationLabel(name)){name=name.substr(1);this._parseAnimationEvent(name,expression,sourceSpan,targetEvents);}else{this._parseEvent(name,expression,sourceSpan,targetMatchableAttrs,targetEvents);}}/**
     * @param {?} name
     * @param {?} expression
     * @param {?} sourceSpan
     * @param {?} targetEvents
     * @return {?}
     */},{key:'_parseAnimationEvent',value:function _parseAnimationEvent(name,expression,sourceSpan,targetEvents){var/** @type {?} */matches=splitAtPeriod(name,[name,'']);var/** @type {?} */eventName=matches[0];var/** @type {?} */phase=matches[1].toLowerCase();if(phase){switch(phase){case'start':case'done':var/** @type {?} */ast=this._parseAction(expression,sourceSpan);targetEvents.push(new BoundEventAst(eventName,null,phase,ast,sourceSpan));break;default:this._reportError('The provided animation output phase value "'+phase+'" for "@'+eventName+'" is not supported (use start or done)',sourceSpan);break;}}else{this._reportError('The animation trigger output event (@'+eventName+') is missing its phase value name (start or done are currently supported)',sourceSpan);}}/**
     * @param {?} name
     * @param {?} expression
     * @param {?} sourceSpan
     * @param {?} targetMatchableAttrs
     * @param {?} targetEvents
     * @return {?}
     */},{key:'_parseEvent',value:function _parseEvent(name,expression,sourceSpan,targetMatchableAttrs,targetEvents){// long format: 'target: eventName'
var _splitAtColon=splitAtColon(name,[null,name]),_splitAtColon2=_slicedToArray(_splitAtColon,2),target=_splitAtColon2[0],eventName=_splitAtColon2[1];var/** @type {?} */ast=this._parseAction(expression,sourceSpan);targetMatchableAttrs.push([name,ast.source]);targetEvents.push(new BoundEventAst(eventName,target,null,ast,sourceSpan));// Don't detect directives for event names for now,
// so don't add the event name to the matchableAttrs
}/**
     * @param {?} value
     * @param {?} sourceSpan
     * @return {?}
     */},{key:'_parseAction',value:function _parseAction(value,sourceSpan){var/** @type {?} */sourceInfo=sourceSpan.start.toString();try{var/** @type {?} */ast=this._exprParser.parseAction(value,sourceInfo,this._interpolationConfig);if(ast){this._reportExpressionParserErrors(ast.errors,sourceSpan);}if(!ast||ast.ast instanceof EmptyExpr){this._reportError('Empty expressions are not allowed',sourceSpan);return this._exprParser.wrapLiteralPrimitive('ERROR',sourceInfo);}this._checkPipes(ast,sourceSpan);return ast;}catch(e){this._reportError(''+e,sourceSpan);return this._exprParser.wrapLiteralPrimitive('ERROR',sourceInfo);}}/**
     * @param {?} message
     * @param {?} sourceSpan
     * @param {?=} level
     * @return {?}
     */},{key:'_reportError',value:function _reportError(message,sourceSpan){var level=arguments.length>2&&arguments[2]!==undefined?arguments[2]:ParseErrorLevel.FATAL;this._targetErrors.push(new ParseError(sourceSpan,message,level));}/**
     * @param {?} errors
     * @param {?} sourceSpan
     * @return {?}
     */},{key:'_reportExpressionParserErrors',value:function _reportExpressionParserErrors(errors,sourceSpan){var _iteratorNormalCompletion3=true;var _didIteratorError3=false;var _iteratorError3=undefined;try{for(var _iterator3=errors[Symbol.iterator](),_step3;!(_iteratorNormalCompletion3=(_step3=_iterator3.next()).done);_iteratorNormalCompletion3=true){var error=_step3.value;this._reportError(error.message,sourceSpan);}}catch(err){_didIteratorError3=true;_iteratorError3=err;}finally{try{if(!_iteratorNormalCompletion3&&_iterator3.return){_iterator3.return();}}finally{if(_didIteratorError3){throw _iteratorError3;}}}}/**
     * @param {?} ast
     * @param {?} sourceSpan
     * @return {?}
     */},{key:'_checkPipes',value:function _checkPipes(ast,sourceSpan){var _this90=this;if(ast){var/** @type {?} */collector=new PipeCollector();ast.visit(collector);collector.pipes.forEach(function(ast,pipeName){var/** @type {?} */pipeMeta=_this90.pipesByName.get(pipeName);if(!pipeMeta){_this90._reportError('The pipe \''+pipeName+'\' could not be found',new ParseSourceSpan(sourceSpan.start.moveBy(ast.span.start),sourceSpan.start.moveBy(ast.span.end)));}else{_this90._usedPipes.set(pipeName,pipeMeta);}});}}/**
     * @param {?} propName the name of the property / attribute
     * @param {?} sourceSpan
     * @param {?} isAttr true when binding to an attribute
     * @return {?}
     */},{key:'_validatePropertyOrAttributeName',value:function _validatePropertyOrAttributeName(propName,sourceSpan,isAttr){var/** @type {?} */report=isAttr?this._schemaRegistry.validateAttribute(propName):this._schemaRegistry.validateProperty(propName);if(report.error){this._reportError(report.msg,sourceSpan,ParseErrorLevel.FATAL);}}}]);return BindingParser;}();var PipeCollector=function(_RecursiveAstVisitor){_inherits(PipeCollector,_RecursiveAstVisitor);function PipeCollector(){_classCallCheck(this,PipeCollector);var _this91=_possibleConstructorReturn(this,(PipeCollector.__proto__||Object.getPrototypeOf(PipeCollector)).apply(this,arguments));_this91.pipes=new Map();return _this91;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */_createClass(PipeCollector,[{key:'visitPipe',value:function visitPipe(ast,context){this.pipes.set(ast.name,ast);ast.exp.visit(this);this.visitAll(ast.args,context);return null;}}]);return PipeCollector;}(RecursiveAstVisitor);/**
 * @param {?} name
 * @return {?}
 */function _isAnimationLabel(name){return name[0]=='@';}/**
 * @param {?} registry
 * @param {?} selector
 * @param {?} propName
 * @param {?} isAttribute
 * @return {?}
 */function calcPossibleSecurityContexts(registry,selector,propName,isAttribute){var/** @type {?} */ctxs=[];CssSelector.parse(selector).forEach(function(selector){var/** @type {?} */elementNames=selector.element?[selector.element]:registry.allKnownElementNames();var/** @type {?} */notElementNames=new Set(selector.notSelectors.filter(function(selector){return selector.isElementSelector();}).map(function(selector){return selector.element;}));var/** @type {?} */possibleElementNames=elementNames.filter(function(elementName){return!notElementNames.has(elementName);});ctxs.push.apply(ctxs,_toConsumableArray(possibleElementNames.map(function(elementName){return registry.securityContext(elementName,propName,isAttribute);})));});return ctxs.length===0?[__WEBPACK_IMPORTED_MODULE_0__angular_core__["U" /* SecurityContext */].NONE]:Array.from(new Set(ctxs)).sort();}var/** @type {?} */NG_CONTENT_SELECT_ATTR='select';var/** @type {?} */NG_CONTENT_ELEMENT='ng-content';var/** @type {?} */LINK_ELEMENT='link';var/** @type {?} */LINK_STYLE_REL_ATTR='rel';var/** @type {?} */LINK_STYLE_HREF_ATTR='href';var/** @type {?} */LINK_STYLE_REL_VALUE='stylesheet';var/** @type {?} */STYLE_ELEMENT='style';var/** @type {?} */SCRIPT_ELEMENT='script';var/** @type {?} */NG_NON_BINDABLE_ATTR='ngNonBindable';var/** @type {?} */NG_PROJECT_AS='ngProjectAs';/**
 * @param {?} ast
 * @return {?}
 */function preparseElement(ast){var/** @type {?} */selectAttr=null;var/** @type {?} */hrefAttr=null;var/** @type {?} */relAttr=null;var/** @type {?} */nonBindable=false;var/** @type {?} */projectAs=null;ast.attrs.forEach(function(attr){var/** @type {?} */lcAttrName=attr.name.toLowerCase();if(lcAttrName==NG_CONTENT_SELECT_ATTR){selectAttr=attr.value;}else if(lcAttrName==LINK_STYLE_HREF_ATTR){hrefAttr=attr.value;}else if(lcAttrName==LINK_STYLE_REL_ATTR){relAttr=attr.value;}else if(attr.name==NG_NON_BINDABLE_ATTR){nonBindable=true;}else if(attr.name==NG_PROJECT_AS){if(attr.value.length>0){projectAs=attr.value;}}});selectAttr=normalizeNgContentSelect(selectAttr);var/** @type {?} */nodeName=ast.name.toLowerCase();var/** @type {?} */type=PreparsedElementType.OTHER;if(splitNsName(nodeName)[1]==NG_CONTENT_ELEMENT){type=PreparsedElementType.NG_CONTENT;}else if(nodeName==STYLE_ELEMENT){type=PreparsedElementType.STYLE;}else if(nodeName==SCRIPT_ELEMENT){type=PreparsedElementType.SCRIPT;}else if(nodeName==LINK_ELEMENT&&relAttr==LINK_STYLE_REL_VALUE){type=PreparsedElementType.STYLESHEET;}return new PreparsedElement(type,selectAttr,hrefAttr,nonBindable,projectAs);}var PreparsedElementType={};PreparsedElementType.NG_CONTENT=0;PreparsedElementType.STYLE=1;PreparsedElementType.STYLESHEET=2;PreparsedElementType.SCRIPT=3;PreparsedElementType.OTHER=4;PreparsedElementType[PreparsedElementType.NG_CONTENT]="NG_CONTENT";PreparsedElementType[PreparsedElementType.STYLE]="STYLE";PreparsedElementType[PreparsedElementType.STYLESHEET]="STYLESHEET";PreparsedElementType[PreparsedElementType.SCRIPT]="SCRIPT";PreparsedElementType[PreparsedElementType.OTHER]="OTHER";var PreparsedElement=/**
     * @param {?} type
     * @param {?} selectAttr
     * @param {?} hrefAttr
     * @param {?} nonBindable
     * @param {?} projectAs
     */function PreparsedElement(type,selectAttr,hrefAttr,nonBindable,projectAs){_classCallCheck(this,PreparsedElement);this.type=type;this.selectAttr=selectAttr;this.hrefAttr=hrefAttr;this.nonBindable=nonBindable;this.projectAs=projectAs;};/**
 * @param {?} selectAttr
 * @return {?}
 */function normalizeNgContentSelect(selectAttr){if(selectAttr===null||selectAttr.length===0){return'*';}return selectAttr;}var/** @type {?} */BIND_NAME_REGEXP=/^(?:(?:(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.+))|\[\(([^\)]+)\)\]|\[([^\]]+)\]|\(([^\)]+)\))$/;// Group 1 = "bind-"
var/** @type {?} */KW_BIND_IDX=1;// Group 2 = "let-"
var/** @type {?} */KW_LET_IDX=2;// Group 3 = "ref-/#"
var/** @type {?} */KW_REF_IDX=3;// Group 4 = "on-"
var/** @type {?} */KW_ON_IDX=4;// Group 5 = "bindon-"
var/** @type {?} */KW_BINDON_IDX=5;// Group 6 = "@"
var/** @type {?} */KW_AT_IDX=6;// Group 7 = the identifier after "bind-", "let-", "ref-/#", "on-", "bindon-" or "@"
var/** @type {?} */IDENT_KW_IDX=7;// Group 8 = identifier inside [()]
var/** @type {?} */IDENT_BANANA_BOX_IDX=8;// Group 9 = identifier inside []
var/** @type {?} */IDENT_PROPERTY_IDX=9;// Group 10 = identifier inside ()
var/** @type {?} */IDENT_EVENT_IDX=10;var/** @type {?} */NG_TEMPLATE_ELEMENT='ng-template';// deprecated in 4.x
var/** @type {?} */TEMPLATE_ELEMENT='template';// deprecated in 4.x
var/** @type {?} */TEMPLATE_ATTR='template';var/** @type {?} */TEMPLATE_ATTR_PREFIX='*';var/** @type {?} */CLASS_ATTR='class';var/** @type {?} */TEXT_CSS_SELECTOR=CssSelector.parse('*')[0];/**
 * Provides an array of {@link TemplateAstVisitor}s which will be used to transform
 * parsed templates before compilation is invoked, allowing custom expression syntax
 * and other advanced transformations.
 *
 * This is currently an internal-only feature and not meant for general use.
 */var/** @type {?} */TEMPLATE_TRANSFORMS=new __WEBPACK_IMPORTED_MODULE_0__angular_core__["n" /* InjectionToken */]('TemplateTransforms');var TemplateParseError=function(_ParseError6){_inherits(TemplateParseError,_ParseError6);/**
     * @param {?} message
     * @param {?} span
     * @param {?} level
     */function TemplateParseError(message,span,level){_classCallCheck(this,TemplateParseError);return _possibleConstructorReturn(this,(TemplateParseError.__proto__||Object.getPrototypeOf(TemplateParseError)).call(this,span,message,level));}return TemplateParseError;}(ParseError);var TemplateParseResult=/**
     * @param {?=} templateAst
     * @param {?=} usedPipes
     * @param {?=} errors
     */function TemplateParseResult(templateAst,usedPipes,errors){_classCallCheck(this,TemplateParseResult);this.templateAst=templateAst;this.usedPipes=usedPipes;this.errors=errors;};var TemplateParser=function(){/**
     * @param {?} _config
     * @param {?} _exprParser
     * @param {?} _schemaRegistry
     * @param {?} _htmlParser
     * @param {?} _console
     * @param {?} transforms
     */function TemplateParser(_config,_exprParser,_schemaRegistry,_htmlParser,_console,transforms){_classCallCheck(this,TemplateParser);this._config=_config;this._exprParser=_exprParser;this._schemaRegistry=_schemaRegistry;this._htmlParser=_htmlParser;this._console=_console;this.transforms=transforms;}/**
     * @param {?} component
     * @param {?} template
     * @param {?} directives
     * @param {?} pipes
     * @param {?} schemas
     * @param {?} templateUrl
     * @return {?}
     */_createClass(TemplateParser,[{key:'parse',value:function parse(component,template,directives,pipes,schemas,templateUrl){var/** @type {?} */result=this.tryParse(component,template,directives,pipes,schemas,templateUrl);var/** @type {?} */warnings=result.errors.filter(function(error){return error.level===ParseErrorLevel.WARNING;});var/** @type {?} */errors=result.errors.filter(function(error){return error.level===ParseErrorLevel.FATAL;});if(warnings.length>0){this._console.warn('Template parse warnings:\n'+warnings.join('\n'));}if(errors.length>0){var/** @type {?} */errorString=errors.join('\n');throw syntaxError('Template parse errors:\n'+errorString);}return{template:result.templateAst,pipes:result.usedPipes};}/**
     * @param {?} component
     * @param {?} template
     * @param {?} directives
     * @param {?} pipes
     * @param {?} schemas
     * @param {?} templateUrl
     * @return {?}
     */},{key:'tryParse',value:function tryParse(component,template,directives,pipes,schemas,templateUrl){return this.tryParseHtml(this.expandHtml(this._htmlParser.parse(template,templateUrl,true,this.getInterpolationConfig(component))),component,template,directives,pipes,schemas,templateUrl);}/**
     * @param {?} htmlAstWithErrors
     * @param {?} component
     * @param {?} template
     * @param {?} directives
     * @param {?} pipes
     * @param {?} schemas
     * @param {?} templateUrl
     * @return {?}
     */},{key:'tryParseHtml',value:function tryParseHtml(htmlAstWithErrors,component,template,directives,pipes,schemas,templateUrl){var/** @type {?} */result=void 0;var/** @type {?} */errors=htmlAstWithErrors.errors;var/** @type {?} */usedPipes=[];if(htmlAstWithErrors.rootNodes.length>0){var/** @type {?} */uniqDirectives=removeSummaryDuplicates(directives);var/** @type {?} */uniqPipes=removeSummaryDuplicates(pipes);var/** @type {?} */providerViewContext=new ProviderViewContext(component,htmlAstWithErrors.rootNodes[0].sourceSpan);var/** @type {?} */interpolationConfig=void 0;if(component.template&&component.template.interpolation){interpolationConfig={start:component.template.interpolation[0],end:component.template.interpolation[1]};}var/** @type {?} */bindingParser=new BindingParser(this._exprParser,interpolationConfig,this._schemaRegistry,uniqPipes,errors);var/** @type {?} */parseVisitor=new TemplateParseVisitor(this._config,providerViewContext,uniqDirectives,bindingParser,this._schemaRegistry,schemas,errors);result=visitAll(parseVisitor,htmlAstWithErrors.rootNodes,EMPTY_ELEMENT_CONTEXT);errors.push.apply(errors,_toConsumableArray(providerViewContext.errors));usedPipes.push.apply(usedPipes,_toConsumableArray(bindingParser.getUsedPipes()));}else{result=[];}this._assertNoReferenceDuplicationOnTemplate(result,errors);if(errors.length>0){return new TemplateParseResult(result,usedPipes,errors);}if(this.transforms){this.transforms.forEach(function(transform){result=templateVisitAll(transform,result);});}return new TemplateParseResult(result,usedPipes,errors);}/**
     * @param {?} htmlAstWithErrors
     * @param {?=} forced
     * @return {?}
     */},{key:'expandHtml',value:function expandHtml(htmlAstWithErrors){var forced=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var/** @type {?} */errors=htmlAstWithErrors.errors;if(errors.length==0||forced){// Transform ICU messages to angular directives
var/** @type {?} */expandedHtmlAst=expandNodes(htmlAstWithErrors.rootNodes);errors.push.apply(errors,_toConsumableArray(expandedHtmlAst.errors));htmlAstWithErrors=new ParseTreeResult(expandedHtmlAst.nodes,errors);}return htmlAstWithErrors;}/**
     * @param {?} component
     * @return {?}
     */},{key:'getInterpolationConfig',value:function getInterpolationConfig(component){if(component.template){return InterpolationConfig.fromArray(component.template.interpolation);}}/**
     * \@internal
     * @param {?} result
     * @param {?} errors
     * @return {?}
     */},{key:'_assertNoReferenceDuplicationOnTemplate',value:function _assertNoReferenceDuplicationOnTemplate(result,errors){var/** @type {?} */existingReferences=[];result.filter(function(element){return!!element.references;}).forEach(function(element){return element.references.forEach(function(reference){var/** @type {?} */name=reference.name;if(existingReferences.indexOf(name)<0){existingReferences.push(name);}else{var/** @type {?} */error=new TemplateParseError('Reference "#'+name+'" is defined several times',reference.sourceSpan,ParseErrorLevel.FATAL);errors.push(error);}});});}}]);return TemplateParser;}();TemplateParser.decorators=[{type:CompilerInjectable}];/** @nocollapse */TemplateParser.ctorParameters=function(){return[{type:CompilerConfig},{type:Parser},{type:ElementSchemaRegistry},{type:I18NHtmlParser},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_98" /* ɵConsole */]},{type:Array,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["E" /* Optional */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["I" /* Inject */],args:[TEMPLATE_TRANSFORMS]}]}];};var TemplateParseVisitor=function(){/**
     * @param {?} config
     * @param {?} providerViewContext
     * @param {?} directives
     * @param {?} _bindingParser
     * @param {?} _schemaRegistry
     * @param {?} _schemas
     * @param {?} _targetErrors
     */function TemplateParseVisitor(config,providerViewContext,directives,_bindingParser,_schemaRegistry,_schemas,_targetErrors){var _this93=this;_classCallCheck(this,TemplateParseVisitor);this.config=config;this.providerViewContext=providerViewContext;this._bindingParser=_bindingParser;this._schemaRegistry=_schemaRegistry;this._schemas=_schemas;this._targetErrors=_targetErrors;this.selectorMatcher=new SelectorMatcher();this.directivesIndex=new Map();this.ngContentCount=0;// Note: queries start with id 1 so we can use the number in a Bloom filter!
this.contentQueryStartId=providerViewContext.component.viewQueries.length+1;directives.forEach(function(directive,index){var selector=CssSelector.parse(directive.selector);_this93.selectorMatcher.addSelectables(selector,directive);_this93.directivesIndex.set(directive,index);});}/**
     * @param {?} expansion
     * @param {?} context
     * @return {?}
     */_createClass(TemplateParseVisitor,[{key:'visitExpansion',value:function visitExpansion(expansion,context){return null;}/**
     * @param {?} expansionCase
     * @param {?} context
     * @return {?}
     */},{key:'visitExpansionCase',value:function visitExpansionCase(expansionCase,context){return null;}/**
     * @param {?} text
     * @param {?} parent
     * @return {?}
     */},{key:'visitText',value:function visitText(text,parent){var/** @type {?} */ngContentIndex=parent.findNgContentIndex(TEXT_CSS_SELECTOR);var/** @type {?} */expr=this._bindingParser.parseInterpolation(text.value,text.sourceSpan);return expr?new BoundTextAst(expr,ngContentIndex,text.sourceSpan):new TextAst(text.value,ngContentIndex,text.sourceSpan);}/**
     * @param {?} attribute
     * @param {?} context
     * @return {?}
     */},{key:'visitAttribute',value:function visitAttribute(attribute,context){return new AttrAst(attribute.name,attribute.value,attribute.sourceSpan);}/**
     * @param {?} comment
     * @param {?} context
     * @return {?}
     */},{key:'visitComment',value:function visitComment(comment,context){return null;}/**
     * @param {?} element
     * @param {?} parent
     * @return {?}
     */},{key:'visitElement',value:function visitElement(element,parent){var _this94=this;var/** @type {?} */queryStartIndex=this.contentQueryStartId;var/** @type {?} */nodeName=element.name;var/** @type {?} */preparsedElement=preparseElement(element);if(preparsedElement.type===PreparsedElementType.SCRIPT||preparsedElement.type===PreparsedElementType.STYLE){// Skipping <script> for security reasons
// Skipping <style> as we already processed them
// in the StyleCompiler
return null;}if(preparsedElement.type===PreparsedElementType.STYLESHEET&&isStyleUrlResolvable(preparsedElement.hrefAttr)){// Skipping stylesheets with either relative urls or package scheme as we already processed
// them in the StyleCompiler
return null;}var/** @type {?} */matchableAttrs=[];var/** @type {?} */elementOrDirectiveProps=[];var/** @type {?} */elementOrDirectiveRefs=[];var/** @type {?} */elementVars=[];var/** @type {?} */events=[];var/** @type {?} */templateElementOrDirectiveProps=[];var/** @type {?} */templateMatchableAttrs=[];var/** @type {?} */templateElementVars=[];var/** @type {?} */hasInlineTemplates=false;var/** @type {?} */attrs=[];var/** @type {?} */isTemplateElement=isTemplate(element,this.config.enableLegacyTemplate,function(m,span){return _this94._reportError(m,span,ParseErrorLevel.WARNING);});element.attrs.forEach(function(attr){var/** @type {?} */hasBinding=_this94._parseAttr(isTemplateElement,attr,matchableAttrs,elementOrDirectiveProps,events,elementOrDirectiveRefs,elementVars);var/** @type {?} */templateBindingsSource=void 0;var/** @type {?} */prefixToken=void 0;var/** @type {?} */normalizedName=_this94._normalizeAttributeName(attr.name);if(_this94.config.enableLegacyTemplate&&normalizedName==TEMPLATE_ATTR){_this94._reportError('The template attribute is deprecated. Use an ng-template element instead.',attr.sourceSpan,ParseErrorLevel.WARNING);templateBindingsSource=attr.value;}else if(normalizedName.startsWith(TEMPLATE_ATTR_PREFIX)){templateBindingsSource=attr.value;prefixToken=normalizedName.substring(TEMPLATE_ATTR_PREFIX.length)+':';}var/** @type {?} */hasTemplateBinding=isPresent(templateBindingsSource);if(hasTemplateBinding){if(hasInlineTemplates){_this94._reportError('Can\'t have multiple template bindings on one element. Use only one attribute named \'template\' or prefixed with *',attr.sourceSpan);}hasInlineTemplates=true;_this94._bindingParser.parseInlineTemplateBinding(prefixToken,templateBindingsSource,attr.sourceSpan,templateMatchableAttrs,templateElementOrDirectiveProps,templateElementVars);}if(!hasBinding&&!hasTemplateBinding){// don't include the bindings as attributes as well in the AST
attrs.push(_this94.visitAttribute(attr,null));matchableAttrs.push([attr.name,attr.value]);}});var/** @type {?} */elementCssSelector=createElementCssSelector(nodeName,matchableAttrs);var _parseDirectives2=this._parseDirectives(this.selectorMatcher,elementCssSelector),directiveMetas=_parseDirectives2.directives,matchElement=_parseDirectives2.matchElement;var/** @type {?} */references=[];var/** @type {?} */boundDirectivePropNames=new Set();var/** @type {?} */directiveAsts=this._createDirectiveAsts(isTemplateElement,element.name,directiveMetas,elementOrDirectiveProps,elementOrDirectiveRefs,element.sourceSpan,references,boundDirectivePropNames);var/** @type {?} */elementProps=this._createElementPropertyAsts(element.name,elementOrDirectiveProps,boundDirectivePropNames);var/** @type {?} */isViewRoot=parent.isTemplateElement||hasInlineTemplates;var/** @type {?} */providerContext=new ProviderElementContext(this.providerViewContext,parent.providerContext,isViewRoot,directiveAsts,attrs,references,isTemplateElement,queryStartIndex,element.sourceSpan);var/** @type {?} */children=visitAll(preparsedElement.nonBindable?NON_BINDABLE_VISITOR:this,element.children,ElementContext.create(isTemplateElement,directiveAsts,isTemplateElement?parent.providerContext:providerContext));providerContext.afterElement();// Override the actual selector when the `ngProjectAs` attribute is provided
var/** @type {?} */projectionSelector=isPresent(preparsedElement.projectAs)?CssSelector.parse(preparsedElement.projectAs)[0]:elementCssSelector;var/** @type {?} */ngContentIndex=parent.findNgContentIndex(projectionSelector);var/** @type {?} */parsedElement=void 0;if(preparsedElement.type===PreparsedElementType.NG_CONTENT){if(element.children&&!element.children.every(_isEmptyTextNode)){this._reportError('<ng-content> element cannot have content.',element.sourceSpan);}parsedElement=new NgContentAst(this.ngContentCount++,hasInlineTemplates?null:ngContentIndex,element.sourceSpan);}else if(isTemplateElement){this._assertAllEventsPublishedByDirectives(directiveAsts,events);this._assertNoComponentsNorElementBindingsOnTemplate(directiveAsts,elementProps,element.sourceSpan);parsedElement=new EmbeddedTemplateAst(attrs,events,references,elementVars,providerContext.transformedDirectiveAsts,providerContext.transformProviders,providerContext.transformedHasViewContainer,providerContext.queryMatches,children,hasInlineTemplates?null:ngContentIndex,element.sourceSpan);}else{this._assertElementExists(matchElement,element);this._assertOnlyOneComponent(directiveAsts,element.sourceSpan);var/** @type {?} */_ngContentIndex=hasInlineTemplates?null:parent.findNgContentIndex(projectionSelector);parsedElement=new ElementAst(nodeName,attrs,elementProps,events,references,providerContext.transformedDirectiveAsts,providerContext.transformProviders,providerContext.transformedHasViewContainer,providerContext.queryMatches,children,hasInlineTemplates?null:_ngContentIndex,element.sourceSpan,element.endSourceSpan);this._findComponentDirectives(directiveAsts).forEach(function(componentDirectiveAst){return _this94._validateElementAnimationInputOutputs(componentDirectiveAst.hostProperties,componentDirectiveAst.hostEvents,componentDirectiveAst.directive.template);});var/** @type {?} */componentTemplate=providerContext.viewContext.component.template;this._validateElementAnimationInputOutputs(elementProps,events,componentTemplate.toSummary());}if(hasInlineTemplates){var/** @type {?} */templateQueryStartIndex=this.contentQueryStartId;var/** @type {?} */templateSelector=createElementCssSelector(TEMPLATE_ELEMENT,templateMatchableAttrs);var _parseDirectives3=this._parseDirectives(this.selectorMatcher,templateSelector),templateDirectiveMetas=_parseDirectives3.directives;var/** @type {?} */templateBoundDirectivePropNames=new Set();var/** @type {?} */templateDirectiveAsts=this._createDirectiveAsts(true,element.name,templateDirectiveMetas,templateElementOrDirectiveProps,[],element.sourceSpan,[],templateBoundDirectivePropNames);var/** @type {?} */templateElementProps=this._createElementPropertyAsts(element.name,templateElementOrDirectiveProps,templateBoundDirectivePropNames);this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectiveAsts,templateElementProps,element.sourceSpan);var/** @type {?} */templateProviderContext=new ProviderElementContext(this.providerViewContext,parent.providerContext,parent.isTemplateElement,templateDirectiveAsts,[],[],true,templateQueryStartIndex,element.sourceSpan);templateProviderContext.afterElement();parsedElement=new EmbeddedTemplateAst([],[],[],templateElementVars,templateProviderContext.transformedDirectiveAsts,templateProviderContext.transformProviders,templateProviderContext.transformedHasViewContainer,templateProviderContext.queryMatches,[parsedElement],ngContentIndex,element.sourceSpan);}return parsedElement;}/**
     * @param {?} inputs
     * @param {?} outputs
     * @param {?} template
     * @return {?}
     */},{key:'_validateElementAnimationInputOutputs',value:function _validateElementAnimationInputOutputs(inputs,outputs,template){var _this95=this;if(this.config.useViewEngine)return;var/** @type {?} */triggerLookup=new Set();template.animations.forEach(function(entry){triggerLookup.add(entry);});var/** @type {?} */animationInputs=inputs.filter(function(input){return input.isAnimation;});animationInputs.forEach(function(input){var/** @type {?} */name=input.name;if(!triggerLookup.has(name)){_this95._reportError('Couldn\'t find an animation entry for "'+name+'"',input.sourceSpan);}});outputs.forEach(function(output){if(output.isAnimation){var/** @type {?} */found=animationInputs.find(function(input){return input.name==output.name;});if(!found){_this95._reportError('Unable to listen on (@'+output.name+'.'+output.phase+') because the animation trigger [@'+output.name+'] isn\'t being used on the same element',output.sourceSpan);}}});}/**
     * @param {?} isTemplateElement
     * @param {?} attr
     * @param {?} targetMatchableAttrs
     * @param {?} targetProps
     * @param {?} targetEvents
     * @param {?} targetRefs
     * @param {?} targetVars
     * @return {?}
     */},{key:'_parseAttr',value:function _parseAttr(isTemplateElement,attr,targetMatchableAttrs,targetProps,targetEvents,targetRefs,targetVars){var/** @type {?} */name=this._normalizeAttributeName(attr.name);var/** @type {?} */value=attr.value;var/** @type {?} */srcSpan=attr.sourceSpan;var/** @type {?} */bindParts=name.match(BIND_NAME_REGEXP);var/** @type {?} */hasBinding=false;if(bindParts!==null){hasBinding=true;if(isPresent(bindParts[KW_BIND_IDX])){this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX],value,false,srcSpan,targetMatchableAttrs,targetProps);}else if(bindParts[KW_LET_IDX]){if(isTemplateElement){var/** @type {?} */identifier=bindParts[IDENT_KW_IDX];this._parseVariable(identifier,value,srcSpan,targetVars);}else{this._reportError('"let-" is only supported on template elements.',srcSpan);}}else if(bindParts[KW_REF_IDX]){var/** @type {?} */_identifier=bindParts[IDENT_KW_IDX];this._parseReference(_identifier,value,srcSpan,targetRefs);}else if(bindParts[KW_ON_IDX]){this._bindingParser.parseEvent(bindParts[IDENT_KW_IDX],value,srcSpan,targetMatchableAttrs,targetEvents);}else if(bindParts[KW_BINDON_IDX]){this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX],value,false,srcSpan,targetMatchableAttrs,targetProps);this._parseAssignmentEvent(bindParts[IDENT_KW_IDX],value,srcSpan,targetMatchableAttrs,targetEvents);}else if(bindParts[KW_AT_IDX]){this._bindingParser.parseLiteralAttr(name,value,srcSpan,targetMatchableAttrs,targetProps);}else if(bindParts[IDENT_BANANA_BOX_IDX]){this._bindingParser.parsePropertyBinding(bindParts[IDENT_BANANA_BOX_IDX],value,false,srcSpan,targetMatchableAttrs,targetProps);this._parseAssignmentEvent(bindParts[IDENT_BANANA_BOX_IDX],value,srcSpan,targetMatchableAttrs,targetEvents);}else if(bindParts[IDENT_PROPERTY_IDX]){this._bindingParser.parsePropertyBinding(bindParts[IDENT_PROPERTY_IDX],value,false,srcSpan,targetMatchableAttrs,targetProps);}else if(bindParts[IDENT_EVENT_IDX]){this._bindingParser.parseEvent(bindParts[IDENT_EVENT_IDX],value,srcSpan,targetMatchableAttrs,targetEvents);}}else{hasBinding=this._bindingParser.parsePropertyInterpolation(name,value,srcSpan,targetMatchableAttrs,targetProps);}if(!hasBinding){this._bindingParser.parseLiteralAttr(name,value,srcSpan,targetMatchableAttrs,targetProps);}return hasBinding;}/**
     * @param {?} attrName
     * @return {?}
     */},{key:'_normalizeAttributeName',value:function _normalizeAttributeName(attrName){return /^data-/i.test(attrName)?attrName.substring(5):attrName;}/**
     * @param {?} identifier
     * @param {?} value
     * @param {?} sourceSpan
     * @param {?} targetVars
     * @return {?}
     */},{key:'_parseVariable',value:function _parseVariable(identifier,value,sourceSpan,targetVars){if(identifier.indexOf('-')>-1){this._reportError('"-" is not allowed in variable names',sourceSpan);}targetVars.push(new VariableAst(identifier,value,sourceSpan));}/**
     * @param {?} identifier
     * @param {?} value
     * @param {?} sourceSpan
     * @param {?} targetRefs
     * @return {?}
     */},{key:'_parseReference',value:function _parseReference(identifier,value,sourceSpan,targetRefs){if(identifier.indexOf('-')>-1){this._reportError('"-" is not allowed in reference names',sourceSpan);}targetRefs.push(new ElementOrDirectiveRef(identifier,value,sourceSpan));}/**
     * @param {?} name
     * @param {?} expression
     * @param {?} sourceSpan
     * @param {?} targetMatchableAttrs
     * @param {?} targetEvents
     * @return {?}
     */},{key:'_parseAssignmentEvent',value:function _parseAssignmentEvent(name,expression,sourceSpan,targetMatchableAttrs,targetEvents){this._bindingParser.parseEvent(name+'Change',expression+'=$event',sourceSpan,targetMatchableAttrs,targetEvents);}/**
     * @param {?} selectorMatcher
     * @param {?} elementCssSelector
     * @return {?}
     */},{key:'_parseDirectives',value:function _parseDirectives(selectorMatcher,elementCssSelector){var _this96=this;// Need to sort the directives so that we get consistent results throughout,
// as selectorMatcher uses Maps inside.
// Also deduplicate directives as they might match more than one time!
var/** @type {?} */directives=new Array(this.directivesIndex.size);// Whether any directive selector matches on the element name
var/** @type {?} */matchElement=false;selectorMatcher.match(elementCssSelector,function(selector,directive){directives[_this96.directivesIndex.get(directive)]=directive;matchElement=matchElement||selector.hasElementSelector();});return{directives:directives.filter(function(dir){return!!dir;}),matchElement:matchElement};}/**
     * @param {?} isTemplateElement
     * @param {?} elementName
     * @param {?} directives
     * @param {?} props
     * @param {?} elementOrDirectiveRefs
     * @param {?} elementSourceSpan
     * @param {?} targetReferences
     * @param {?} targetBoundDirectivePropNames
     * @return {?}
     */},{key:'_createDirectiveAsts',value:function _createDirectiveAsts(isTemplateElement,elementName,directives,props,elementOrDirectiveRefs,elementSourceSpan,targetReferences,targetBoundDirectivePropNames){var _this97=this;var/** @type {?} */matchedReferences=new Set();var/** @type {?} */component=null;var/** @type {?} */directiveAsts=directives.map(function(directive){var/** @type {?} */sourceSpan=new ParseSourceSpan(elementSourceSpan.start,elementSourceSpan.end,'Directive '+identifierName(directive.type));if(directive.isComponent){component=directive;}var/** @type {?} */directiveProperties=[];var/** @type {?} */hostProperties=_this97._bindingParser.createDirectiveHostPropertyAsts(directive,_this97.config.useViewEngine?elementName:directive.selector,sourceSpan);// Note: We need to check the host properties here as well,
// as we don't know the element name in the DirectiveWrapperCompiler yet.
hostProperties=_this97._checkPropertiesInSchema(elementName,hostProperties);var/** @type {?} */hostEvents=_this97._bindingParser.createDirectiveHostEventAsts(directive,sourceSpan);_this97._createDirectivePropertyAsts(directive.inputs,props,directiveProperties,targetBoundDirectivePropNames);elementOrDirectiveRefs.forEach(function(elOrDirRef){if(elOrDirRef.value.length===0&&directive.isComponent||directive.exportAs==elOrDirRef.value){targetReferences.push(new ReferenceAst(elOrDirRef.name,identifierToken(directive.type),elOrDirRef.sourceSpan));matchedReferences.add(elOrDirRef.name);}});var/** @type {?} */contentQueryStartId=_this97.contentQueryStartId;_this97.contentQueryStartId+=directive.queries.length;return new DirectiveAst(directive,directiveProperties,hostProperties,hostEvents,contentQueryStartId,sourceSpan);});elementOrDirectiveRefs.forEach(function(elOrDirRef){if(elOrDirRef.value.length>0){if(!matchedReferences.has(elOrDirRef.name)){_this97._reportError('There is no directive with "exportAs" set to "'+elOrDirRef.value+'"',elOrDirRef.sourceSpan);}}else if(!component){var/** @type {?} */refToken=null;if(isTemplateElement){refToken=createIdentifierToken(Identifiers.TemplateRef);}targetReferences.push(new ReferenceAst(elOrDirRef.name,refToken,elOrDirRef.sourceSpan));}});return directiveAsts;}/**
     * @param {?} directiveProperties
     * @param {?} boundProps
     * @param {?} targetBoundDirectiveProps
     * @param {?} targetBoundDirectivePropNames
     * @return {?}
     */},{key:'_createDirectivePropertyAsts',value:function _createDirectivePropertyAsts(directiveProperties,boundProps,targetBoundDirectiveProps,targetBoundDirectivePropNames){if(directiveProperties){var/** @type {?} */boundPropsByName=new Map();boundProps.forEach(function(boundProp){var/** @type {?} */prevValue=boundPropsByName.get(boundProp.name);if(!prevValue||prevValue.isLiteral){// give [a]="b" a higher precedence than a="b" on the same element
boundPropsByName.set(boundProp.name,boundProp);}});Object.keys(directiveProperties).forEach(function(dirProp){var/** @type {?} */elProp=directiveProperties[dirProp];var/** @type {?} */boundProp=boundPropsByName.get(elProp);// Bindings are optional, so this binding only needs to be set up if an expression is given.
if(boundProp){targetBoundDirectivePropNames.add(boundProp.name);if(!isEmptyExpression(boundProp.expression)){targetBoundDirectiveProps.push(new BoundDirectivePropertyAst(dirProp,boundProp.name,boundProp.expression,boundProp.sourceSpan));}}});}}/**
     * @param {?} elementName
     * @param {?} props
     * @param {?} boundDirectivePropNames
     * @return {?}
     */},{key:'_createElementPropertyAsts',value:function _createElementPropertyAsts(elementName,props,boundDirectivePropNames){var _this98=this;var/** @type {?} */boundElementProps=[];props.forEach(function(prop){if(!prop.isLiteral&&!boundDirectivePropNames.has(prop.name)){boundElementProps.push(_this98._bindingParser.createElementPropertyAst(elementName,prop));}});return this._checkPropertiesInSchema(elementName,boundElementProps);}/**
     * @param {?} directives
     * @return {?}
     */},{key:'_findComponentDirectives',value:function _findComponentDirectives(directives){return directives.filter(function(directive){return directive.directive.isComponent;});}/**
     * @param {?} directives
     * @return {?}
     */},{key:'_findComponentDirectiveNames',value:function _findComponentDirectiveNames(directives){return this._findComponentDirectives(directives).map(function(directive){return identifierName(directive.directive.type);});}/**
     * @param {?} directives
     * @param {?} sourceSpan
     * @return {?}
     */},{key:'_assertOnlyOneComponent',value:function _assertOnlyOneComponent(directives,sourceSpan){var/** @type {?} */componentTypeNames=this._findComponentDirectiveNames(directives);if(componentTypeNames.length>1){this._reportError('More than one component matched on this element.\n'+'Make sure that only one component\'s selector can match a given element.\n'+('Conflicting components: '+componentTypeNames.join(',')),sourceSpan);}}/**
     * Make sure that non-angular tags conform to the schemas.
     *
     * Note: An element is considered an angular tag when at least one directive selector matches the
     * tag name.
     *
     * @param {?} matchElement Whether any directive has matched on the tag name
     * @param {?} element the html element
     * @return {?}
     */},{key:'_assertElementExists',value:function _assertElementExists(matchElement,element){var/** @type {?} */elName=element.name.replace(/^:xhtml:/,'');if(!matchElement&&!this._schemaRegistry.hasElement(elName,this._schemas)){var/** @type {?} */errorMsg='\''+elName+'\' is not a known element:\n';errorMsg+='1. If \''+elName+'\' is an Angular component, then verify that it is part of this module.\n';if(elName.indexOf('-')>-1){errorMsg+='2. If \''+elName+'\' is a Web Component then add \'CUSTOM_ELEMENTS_SCHEMA\' to the \'@NgModule.schemas\' of this component to suppress this message.';}else{errorMsg+='2. To allow any element add \'NO_ERRORS_SCHEMA\' to the \'@NgModule.schemas\' of this component.';}this._reportError(errorMsg,element.sourceSpan);}}/**
     * @param {?} directives
     * @param {?} elementProps
     * @param {?} sourceSpan
     * @return {?}
     */},{key:'_assertNoComponentsNorElementBindingsOnTemplate',value:function _assertNoComponentsNorElementBindingsOnTemplate(directives,elementProps,sourceSpan){var _this99=this;var/** @type {?} */componentTypeNames=this._findComponentDirectiveNames(directives);if(componentTypeNames.length>0){this._reportError('Components on an embedded template: '+componentTypeNames.join(','),sourceSpan);}elementProps.forEach(function(prop){_this99._reportError('Property binding '+prop.name+' not used by any directive on an embedded template. Make sure that the property name is spelled correctly and all directives are listed in the "@NgModule.declarations".',sourceSpan);});}/**
     * @param {?} directives
     * @param {?} events
     * @return {?}
     */},{key:'_assertAllEventsPublishedByDirectives',value:function _assertAllEventsPublishedByDirectives(directives,events){var _this100=this;var/** @type {?} */allDirectiveEvents=new Set();directives.forEach(function(directive){Object.keys(directive.directive.outputs).forEach(function(k){var/** @type {?} */eventName=directive.directive.outputs[k];allDirectiveEvents.add(eventName);});});events.forEach(function(event){if(isPresent(event.target)||!allDirectiveEvents.has(event.name)){_this100._reportError('Event binding '+event.fullName+' not emitted by any directive on an embedded template. Make sure that the event name is spelled correctly and all directives are listed in the "@NgModule.declarations".',event.sourceSpan);}});}/**
     * @param {?} elementName
     * @param {?} boundProps
     * @return {?}
     */},{key:'_checkPropertiesInSchema',value:function _checkPropertiesInSchema(elementName,boundProps){var _this101=this;// Note: We can't filter out empty expressions before this method,
// as we still want to validate them!
return boundProps.filter(function(boundProp){if(boundProp.type===PropertyBindingType.Property&&!_this101._schemaRegistry.hasProperty(elementName,boundProp.name,_this101._schemas)){var/** @type {?} */errorMsg='Can\'t bind to \''+boundProp.name+'\' since it isn\'t a known property of \''+elementName+'\'.';if(elementName.startsWith('ng-')){errorMsg+='\n1. If \''+boundProp.name+'\' is an Angular directive, then add \'CommonModule\' to the \'@NgModule.imports\' of this component.'+'\n2. To allow any property add \'NO_ERRORS_SCHEMA\' to the \'@NgModule.schemas\' of this component.';}else if(elementName.indexOf('-')>-1){errorMsg+='\n1. If \''+elementName+'\' is an Angular component and it has \''+boundProp.name+'\' input, then verify that it is part of this module.'+('\n2. If \''+elementName+'\' is a Web Component then add \'CUSTOM_ELEMENTS_SCHEMA\' to the \'@NgModule.schemas\' of this component to suppress this message.')+'\n3. To allow any property add \'NO_ERRORS_SCHEMA\' to the \'@NgModule.schemas\' of this component.';}_this101._reportError(errorMsg,boundProp.sourceSpan);}return!isEmptyExpression(boundProp.value);});}/**
     * @param {?} message
     * @param {?} sourceSpan
     * @param {?=} level
     * @return {?}
     */},{key:'_reportError',value:function _reportError(message,sourceSpan){var level=arguments.length>2&&arguments[2]!==undefined?arguments[2]:ParseErrorLevel.FATAL;this._targetErrors.push(new ParseError(sourceSpan,message,level));}}]);return TemplateParseVisitor;}();var NonBindableVisitor=function(){function NonBindableVisitor(){_classCallCheck(this,NonBindableVisitor);}_createClass(NonBindableVisitor,[{key:'visitElement',/**
     * @param {?} ast
     * @param {?} parent
     * @return {?}
     */value:function visitElement(ast,parent){var/** @type {?} */preparsedElement=preparseElement(ast);if(preparsedElement.type===PreparsedElementType.SCRIPT||preparsedElement.type===PreparsedElementType.STYLE||preparsedElement.type===PreparsedElementType.STYLESHEET){// Skipping <script> for security reasons
// Skipping <style> and stylesheets as we already processed them
// in the StyleCompiler
return null;}var/** @type {?} */attrNameAndValues=ast.attrs.map(function(attr){return[attr.name,attr.value];});var/** @type {?} */selector=createElementCssSelector(ast.name,attrNameAndValues);var/** @type {?} */ngContentIndex=parent.findNgContentIndex(selector);var/** @type {?} */children=visitAll(this,ast.children,EMPTY_ELEMENT_CONTEXT);return new ElementAst(ast.name,visitAll(this,ast.attrs),[],[],[],[],[],false,[],children,ngContentIndex,ast.sourceSpan,ast.endSourceSpan);}/**
     * @param {?} comment
     * @param {?} context
     * @return {?}
     */},{key:'visitComment',value:function visitComment(comment,context){return null;}/**
     * @param {?} attribute
     * @param {?} context
     * @return {?}
     */},{key:'visitAttribute',value:function visitAttribute(attribute,context){return new AttrAst(attribute.name,attribute.value,attribute.sourceSpan);}/**
     * @param {?} text
     * @param {?} parent
     * @return {?}
     */},{key:'visitText',value:function visitText(text,parent){var/** @type {?} */ngContentIndex=parent.findNgContentIndex(TEXT_CSS_SELECTOR);return new TextAst(text.value,ngContentIndex,text.sourceSpan);}/**
     * @param {?} expansion
     * @param {?} context
     * @return {?}
     */},{key:'visitExpansion',value:function visitExpansion(expansion,context){return expansion;}/**
     * @param {?} expansionCase
     * @param {?} context
     * @return {?}
     */},{key:'visitExpansionCase',value:function visitExpansionCase(expansionCase,context){return expansionCase;}}]);return NonBindableVisitor;}();var ElementOrDirectiveRef=/**
     * @param {?} name
     * @param {?} value
     * @param {?} sourceSpan
     */function ElementOrDirectiveRef(name,value,sourceSpan){_classCallCheck(this,ElementOrDirectiveRef);this.name=name;this.value=value;this.sourceSpan=sourceSpan;};/**
 * @param {?} classAttrValue
 * @return {?}
 */function splitClasses(classAttrValue){return classAttrValue.trim().split(/\s+/g);}var ElementContext=function(){/**
     * @param {?} isTemplateElement
     * @param {?} _ngContentIndexMatcher
     * @param {?} _wildcardNgContentIndex
     * @param {?} providerContext
     */function ElementContext(isTemplateElement,_ngContentIndexMatcher,_wildcardNgContentIndex,providerContext){_classCallCheck(this,ElementContext);this.isTemplateElement=isTemplateElement;this._ngContentIndexMatcher=_ngContentIndexMatcher;this._wildcardNgContentIndex=_wildcardNgContentIndex;this.providerContext=providerContext;}/**
     * @param {?} isTemplateElement
     * @param {?} directives
     * @param {?} providerContext
     * @return {?}
     */_createClass(ElementContext,[{key:'findNgContentIndex',/**
     * @param {?} selector
     * @return {?}
     */value:function findNgContentIndex(selector){var/** @type {?} */ngContentIndices=[];this._ngContentIndexMatcher.match(selector,function(selector,ngContentIndex){ngContentIndices.push(ngContentIndex);});ngContentIndices.sort();if(isPresent(this._wildcardNgContentIndex)){ngContentIndices.push(this._wildcardNgContentIndex);}return ngContentIndices.length>0?ngContentIndices[0]:null;}}],[{key:'create',value:function create(isTemplateElement,directives,providerContext){var/** @type {?} */matcher=new SelectorMatcher();var/** @type {?} */wildcardNgContentIndex=null;var/** @type {?} */component=directives.find(function(directive){return directive.directive.isComponent;});if(component){var/** @type {?} */ngContentSelectors=component.directive.template.ngContentSelectors;for(var/** @type {?} */i=0;i<ngContentSelectors.length;i++){var/** @type {?} */selector=ngContentSelectors[i];if(selector==='*'){wildcardNgContentIndex=i;}else{matcher.addSelectables(CssSelector.parse(ngContentSelectors[i]),i);}}}return new ElementContext(isTemplateElement,matcher,wildcardNgContentIndex,providerContext);}}]);return ElementContext;}();/**
 * @param {?} elementName
 * @param {?} attributes
 * @return {?}
 */function createElementCssSelector(elementName,attributes){var/** @type {?} */cssSelector=new CssSelector();var/** @type {?} */elNameNoNs=splitNsName(elementName)[1];cssSelector.setElement(elNameNoNs);for(var/** @type {?} */i=0;i<attributes.length;i++){var/** @type {?} */attrName=attributes[i][0];var/** @type {?} */attrNameNoNs=splitNsName(attrName)[1];var/** @type {?} */attrValue=attributes[i][1];cssSelector.addAttribute(attrNameNoNs,attrValue);if(attrName.toLowerCase()==CLASS_ATTR){var/** @type {?} */classes=splitClasses(attrValue);classes.forEach(function(className){return cssSelector.addClassName(className);});}}return cssSelector;}var/** @type {?} */EMPTY_ELEMENT_CONTEXT=new ElementContext(true,new SelectorMatcher(),null,null);var/** @type {?} */NON_BINDABLE_VISITOR=new NonBindableVisitor();/**
 * @param {?} node
 * @return {?}
 */function _isEmptyTextNode(node){return node instanceof Text&&node.value.trim().length==0;}/**
 * @param {?} items
 * @return {?}
 */function removeSummaryDuplicates(items){var/** @type {?} */map=new Map();items.forEach(function(item){if(!map.get(item.type.reference)){map.set(item.type.reference,item);}});return Array.from(map.values());}/**
 * @param {?} ast
 * @return {?}
 */function isEmptyExpression(ast){if(ast instanceof ASTWithSource){ast=ast.ast;}return ast instanceof EmptyExpr;}/**
 * @param {?} el
 * @param {?} enableLegacyTemplate
 * @param {?} reportDeprecation
 * @return {?}
 */function isTemplate(el,enableLegacyTemplate,reportDeprecation){var/** @type {?} */tagNoNs=splitNsName(el.name)[1];// `<ng-template>` is an angular construct and is lower case
if(tagNoNs===NG_TEMPLATE_ELEMENT)return true;// `<template>` is HTML and case insensitive
if(tagNoNs.toLowerCase()===TEMPLATE_ELEMENT){if(enableLegacyTemplate&&tagNoNs.toLowerCase()===TEMPLATE_ELEMENT){reportDeprecation('The <template> element is deprecated. Use <ng-template> instead',el.sourceSpan);return true;}return false;}}/**
 * @abstract
 */var AnimationAst=function(){function AnimationAst(){_classCallCheck(this,AnimationAst);this.startTime=0;this.playTime=0;}/**
     * @abstract
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(AnimationAst,[{key:'visit',value:function visit(visitor,context){}}]);return AnimationAst;}();/**
 * @abstract
 */var AnimationStateAst=function(_AnimationAst){_inherits(AnimationStateAst,_AnimationAst);function AnimationStateAst(){_classCallCheck(this,AnimationStateAst);return _possibleConstructorReturn(this,(AnimationStateAst.__proto__||Object.getPrototypeOf(AnimationStateAst)).apply(this,arguments));}_createClass(AnimationStateAst,[{key:'visit',/**
     * @abstract
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */value:function visit(visitor,context){}}]);return AnimationStateAst;}(AnimationAst);var AnimationEntryAst=function(_AnimationAst2){_inherits(AnimationEntryAst,_AnimationAst2);/**
     * @param {?} name
     * @param {?} stateDeclarations
     * @param {?} stateTransitions
     */function AnimationEntryAst(name,stateDeclarations,stateTransitions){_classCallCheck(this,AnimationEntryAst);var _this103=_possibleConstructorReturn(this,(AnimationEntryAst.__proto__||Object.getPrototypeOf(AnimationEntryAst)).call(this));_this103.name=name;_this103.stateDeclarations=stateDeclarations;_this103.stateTransitions=stateTransitions;return _this103;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(AnimationEntryAst,[{key:'visit',value:function visit(visitor,context){return visitor.visitAnimationEntry(this,context);}}]);return AnimationEntryAst;}(AnimationAst);var AnimationStateDeclarationAst=function(_AnimationStateAst){_inherits(AnimationStateDeclarationAst,_AnimationStateAst);/**
     * @param {?} stateName
     * @param {?} styles
     */function AnimationStateDeclarationAst(stateName,styles){_classCallCheck(this,AnimationStateDeclarationAst);var _this104=_possibleConstructorReturn(this,(AnimationStateDeclarationAst.__proto__||Object.getPrototypeOf(AnimationStateDeclarationAst)).call(this));_this104.stateName=stateName;_this104.styles=styles;return _this104;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(AnimationStateDeclarationAst,[{key:'visit',value:function visit(visitor,context){return visitor.visitAnimationStateDeclaration(this,context);}}]);return AnimationStateDeclarationAst;}(AnimationStateAst);var AnimationStateTransitionExpression=/**
     * @param {?} fromState
     * @param {?} toState
     */function AnimationStateTransitionExpression(fromState,toState){_classCallCheck(this,AnimationStateTransitionExpression);this.fromState=fromState;this.toState=toState;};var AnimationStateTransitionFnExpression=function(_AnimationStateTransi){_inherits(AnimationStateTransitionFnExpression,_AnimationStateTransi);/**
     * @param {?} fn
     */function AnimationStateTransitionFnExpression(fn){_classCallCheck(this,AnimationStateTransitionFnExpression);var _this105=_possibleConstructorReturn(this,(AnimationStateTransitionFnExpression.__proto__||Object.getPrototypeOf(AnimationStateTransitionFnExpression)).call(this,null,null));_this105.fn=fn;return _this105;}return AnimationStateTransitionFnExpression;}(AnimationStateTransitionExpression);var AnimationStateTransitionAst=function(_AnimationStateAst2){_inherits(AnimationStateTransitionAst,_AnimationStateAst2);/**
     * @param {?} stateChanges
     * @param {?} animation
     */function AnimationStateTransitionAst(stateChanges,animation){_classCallCheck(this,AnimationStateTransitionAst);var _this106=_possibleConstructorReturn(this,(AnimationStateTransitionAst.__proto__||Object.getPrototypeOf(AnimationStateTransitionAst)).call(this));_this106.stateChanges=stateChanges;_this106.animation=animation;return _this106;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(AnimationStateTransitionAst,[{key:'visit',value:function visit(visitor,context){return visitor.visitAnimationStateTransition(this,context);}}]);return AnimationStateTransitionAst;}(AnimationStateAst);var AnimationStepAst=function(_AnimationAst3){_inherits(AnimationStepAst,_AnimationAst3);/**
     * @param {?} startingStyles
     * @param {?} keyframes
     * @param {?} duration
     * @param {?} delay
     * @param {?} easing
     */function AnimationStepAst(startingStyles,keyframes,duration,delay,easing){_classCallCheck(this,AnimationStepAst);var _this107=_possibleConstructorReturn(this,(AnimationStepAst.__proto__||Object.getPrototypeOf(AnimationStepAst)).call(this));_this107.startingStyles=startingStyles;_this107.keyframes=keyframes;_this107.duration=duration;_this107.delay=delay;_this107.easing=easing;return _this107;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(AnimationStepAst,[{key:'visit',value:function visit(visitor,context){return visitor.visitAnimationStep(this,context);}}]);return AnimationStepAst;}(AnimationAst);var AnimationStylesAst=function(_AnimationAst4){_inherits(AnimationStylesAst,_AnimationAst4);/**
     * @param {?} styles
     */function AnimationStylesAst(styles){_classCallCheck(this,AnimationStylesAst);var _this108=_possibleConstructorReturn(this,(AnimationStylesAst.__proto__||Object.getPrototypeOf(AnimationStylesAst)).call(this));_this108.styles=styles;return _this108;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(AnimationStylesAst,[{key:'visit',value:function visit(visitor,context){return visitor.visitAnimationStyles(this,context);}}]);return AnimationStylesAst;}(AnimationAst);var AnimationKeyframeAst=function(_AnimationAst5){_inherits(AnimationKeyframeAst,_AnimationAst5);/**
     * @param {?} offset
     * @param {?} styles
     */function AnimationKeyframeAst(offset,styles){_classCallCheck(this,AnimationKeyframeAst);var _this109=_possibleConstructorReturn(this,(AnimationKeyframeAst.__proto__||Object.getPrototypeOf(AnimationKeyframeAst)).call(this));_this109.offset=offset;_this109.styles=styles;return _this109;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(AnimationKeyframeAst,[{key:'visit',value:function visit(visitor,context){return visitor.visitAnimationKeyframe(this,context);}}]);return AnimationKeyframeAst;}(AnimationAst);/**
 * @abstract
 */var AnimationWithStepsAst=function(_AnimationAst6){_inherits(AnimationWithStepsAst,_AnimationAst6);/**
     * @param {?} steps
     */function AnimationWithStepsAst(steps){_classCallCheck(this,AnimationWithStepsAst);var _this110=_possibleConstructorReturn(this,(AnimationWithStepsAst.__proto__||Object.getPrototypeOf(AnimationWithStepsAst)).call(this));_this110.steps=steps;return _this110;}return AnimationWithStepsAst;}(AnimationAst);var AnimationGroupAst=function(_AnimationWithStepsAs){_inherits(AnimationGroupAst,_AnimationWithStepsAs);/**
     * @param {?} steps
     */function AnimationGroupAst(steps){_classCallCheck(this,AnimationGroupAst);return _possibleConstructorReturn(this,(AnimationGroupAst.__proto__||Object.getPrototypeOf(AnimationGroupAst)).call(this,steps));}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(AnimationGroupAst,[{key:'visit',value:function visit(visitor,context){return visitor.visitAnimationGroup(this,context);}}]);return AnimationGroupAst;}(AnimationWithStepsAst);var AnimationSequenceAst=function(_AnimationWithStepsAs2){_inherits(AnimationSequenceAst,_AnimationWithStepsAs2);/**
     * @param {?} steps
     */function AnimationSequenceAst(steps){_classCallCheck(this,AnimationSequenceAst);return _possibleConstructorReturn(this,(AnimationSequenceAst.__proto__||Object.getPrototypeOf(AnimationSequenceAst)).call(this,steps));}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(AnimationSequenceAst,[{key:'visit',value:function visit(visitor,context){return visitor.visitAnimationSequence(this,context);}}]);return AnimationSequenceAst;}(AnimationWithStepsAst);var StylesCollectionEntry=function(){/**
     * @param {?} time
     * @param {?} value
     */function StylesCollectionEntry(time,value){_classCallCheck(this,StylesCollectionEntry);this.time=time;this.value=value;}/**
     * @param {?} time
     * @param {?} value
     * @return {?}
     */_createClass(StylesCollectionEntry,[{key:'matches',value:function matches(time,value){return time==this.time&&value==this.value;}}]);return StylesCollectionEntry;}();var StylesCollection=function(){function StylesCollection(){_classCallCheck(this,StylesCollection);this.styles={};}/**
     * @param {?} property
     * @param {?} time
     * @param {?} value
     * @return {?}
     */_createClass(StylesCollection,[{key:'insertAtTime',value:function insertAtTime(property,time,value){var/** @type {?} */tuple=new StylesCollectionEntry(time,value);var/** @type {?} */entries=this.styles[property];if(!isPresent(entries)){entries=this.styles[property]=[];}// insert this at the right stop in the array
// this way we can keep it sorted
var/** @type {?} */insertionIndex=0;for(var/** @type {?} */i=entries.length-1;i>=0;i--){if(entries[i].time<=time){insertionIndex=i+1;break;}}entries.splice(insertionIndex,0,tuple);}/**
     * @param {?} property
     * @param {?} index
     * @return {?}
     */},{key:'getByIndex',value:function getByIndex(property,index){var/** @type {?} */items=this.styles[property];if(isPresent(items)){return index>=items.length?null:items[index];}return null;}/**
     * @param {?} property
     * @param {?} time
     * @return {?}
     */},{key:'indexOfAtOrBeforeTime',value:function indexOfAtOrBeforeTime(property,time){var/** @type {?} */entries=this.styles[property];if(isPresent(entries)){for(var/** @type {?} */i=entries.length-1;i>=0;i--){if(entries[i].time<=time)return i;}}return null;}}]);return StylesCollection;}();var/** @type {?} */_INITIAL_KEYFRAME=0;var/** @type {?} */_TERMINAL_KEYFRAME=1;var/** @type {?} */_ONE_SECOND=1000;var AnimationParseError=function(_ParseError7){_inherits(AnimationParseError,_ParseError7);/**
     * @param {?} message
     */function AnimationParseError(message){_classCallCheck(this,AnimationParseError);return _possibleConstructorReturn(this,(AnimationParseError.__proto__||Object.getPrototypeOf(AnimationParseError)).call(this,null,message));}/**
     * @return {?}
     */_createClass(AnimationParseError,[{key:'toString',value:function toString(){return''+this.msg;}}]);return AnimationParseError;}(ParseError);var AnimationEntryParseResult=/**
     * @param {?} ast
     * @param {?} errors
     */function AnimationEntryParseResult(ast,errors){_classCallCheck(this,AnimationEntryParseResult);this.ast=ast;this.errors=errors;};var AnimationParser=function(){/**
     * @param {?} _schema
     */function AnimationParser(_schema){_classCallCheck(this,AnimationParser);this._schema=_schema;}/**
     * @param {?} component
     * @return {?}
     */_createClass(AnimationParser,[{key:'parseComponent',value:function parseComponent(component){var _this114=this;var/** @type {?} */errors=[];var/** @type {?} */componentName=identifierName(component.type);var/** @type {?} */animationTriggerNames=new Set();var/** @type {?} */asts=component.template.animations.map(function(entry){var/** @type {?} */result=_this114.parseEntry(entry);var/** @type {?} */ast=result.ast;var/** @type {?} */triggerName=ast.name;if(animationTriggerNames.has(triggerName)){result.errors.push(new AnimationParseError('The animation trigger "'+triggerName+'" has already been registered for the '+componentName+' component'));}else{animationTriggerNames.add(triggerName);}if(result.errors.length>0){var/** @type {?} */errorMessage='- Unable to parse the animation sequence for "'+triggerName+'" on the '+componentName+' component due to the following errors:';result.errors.forEach(function(error){errorMessage+='\n-- '+error.msg;});errors.push(errorMessage);}return ast;});if(errors.length>0){var/** @type {?} */errorString=errors.join('\n');throw new Error('Animation parse errors:\n'+errorString);}return asts;}/**
     * @param {?} entry
     * @return {?}
     */},{key:'parseEntry',value:function parseEntry(entry){var _this115=this;var/** @type {?} */errors=[];var/** @type {?} */stateStyles={};var/** @type {?} */transitions=[];var/** @type {?} */stateDeclarationAsts=[];entry.definitions.forEach(function(def){if(def instanceof CompileAnimationStateDeclarationMetadata){_parseAnimationDeclarationStates(def,_this115._schema,errors).forEach(function(ast){stateDeclarationAsts.push(ast);stateStyles[ast.stateName]=ast.styles;});}else{transitions.push(/** @type {?} */def);}});var/** @type {?} */stateTransitionAsts=transitions.map(function(transDef){return _parseAnimationStateTransition(transDef,stateStyles,_this115._schema,errors);});var/** @type {?} */ast=new AnimationEntryAst(entry.name,stateDeclarationAsts,stateTransitionAsts);return new AnimationEntryParseResult(ast,errors);}}]);return AnimationParser;}();AnimationParser.decorators=[{type:CompilerInjectable}];/** @nocollapse */AnimationParser.ctorParameters=function(){return[{type:ElementSchemaRegistry}];};/**
 * @param {?} stateMetadata
 * @param {?} schema
 * @param {?} errors
 * @return {?}
 */function _parseAnimationDeclarationStates(stateMetadata,schema,errors){var/** @type {?} */normalizedStyles=_normalizeStyleMetadata(stateMetadata.styles,{},schema,errors,false);var/** @type {?} */defStyles=new AnimationStylesAst(normalizedStyles);var/** @type {?} */states=stateMetadata.stateNameExpr.split(/\s*,\s*/);return states.map(function(state){return new AnimationStateDeclarationAst(state,defStyles);});}/**
 * @param {?} transitionStateMetadata
 * @param {?} stateStyles
 * @param {?} schema
 * @param {?} errors
 * @return {?}
 */function _parseAnimationStateTransition(transitionStateMetadata,stateStyles,schema,errors){var/** @type {?} */styles=new StylesCollection();var/** @type {?} */transitionExprs=[];var/** @type {?} */stateChangeExpr=transitionStateMetadata.stateChangeExpr;var/** @type {?} */transitionStates=typeof stateChangeExpr=='string'?stateChangeExpr.split(/\s*,\s*/):[/** @type {?} */stateChangeExpr];transitionStates.forEach(function(expr){return transitionExprs.push.apply(transitionExprs,_toConsumableArray(_parseAnimationTransitionExpr(expr,errors)));});var/** @type {?} */entry=_normalizeAnimationEntry(transitionStateMetadata.steps);var/** @type {?} */animation=_normalizeStyleSteps(entry,stateStyles,schema,errors);var/** @type {?} */animationAst=_parseTransitionAnimation(animation,0,styles,stateStyles,errors);if(errors.length==0){_fillAnimationAstStartingKeyframes(animationAst,styles,errors);}var/** @type {?} */stepsAst=animationAst instanceof AnimationWithStepsAst?animationAst:new AnimationSequenceAst([animationAst]);return new AnimationStateTransitionAst(transitionExprs,stepsAst);}/**
 * @param {?} alias
 * @param {?} errors
 * @return {?}
 */function _parseAnimationAlias(alias,errors){switch(alias){case':enter':return'void => *';case':leave':return'* => void';default:errors.push(new AnimationParseError('the transition alias value "'+alias+'" is not supported'));return'* => *';}}/**
 * @param {?} transitionValue
 * @param {?} errors
 * @return {?}
 */function _parseAnimationTransitionExpr(transitionValue,errors){var/** @type {?} */expressions=[];if(typeof transitionValue=='string'){var/** @type {?} */eventStr=transitionValue;if(eventStr[0]==':'){eventStr=_parseAnimationAlias(eventStr,errors);}var/** @type {?} */match=eventStr.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);if(!isPresent(match)||match.length<4){errors.push(new AnimationParseError('the provided '+eventStr+' is not of a supported format'));return expressions;}var/** @type {?} */fromState=match[1];var/** @type {?} */separator=match[2];var/** @type {?} */toState=match[3];expressions.push(new AnimationStateTransitionExpression(fromState,toState));var/** @type {?} */isFullAnyStateExpr=fromState==__WEBPACK_IMPORTED_MODULE_0__angular_core__["_99" /* ɵANY_STATE */]&&toState==__WEBPACK_IMPORTED_MODULE_0__angular_core__["_99" /* ɵANY_STATE */];if(separator[0]=='<'&&!isFullAnyStateExpr){expressions.push(new AnimationStateTransitionExpression(toState,fromState));}}else{expressions.push(new AnimationStateTransitionFnExpression(/** @type {?} */transitionValue));}return expressions;}/**
 * @param {?} entry
 * @return {?}
 */function _normalizeAnimationEntry(entry){return Array.isArray(entry)?new CompileAnimationSequenceMetadata(entry):entry;}/**
 * @param {?} entry
 * @param {?} stateStyles
 * @param {?} schema
 * @param {?} errors
 * @param {?} permitStateReferences
 * @return {?}
 */function _normalizeStyleMetadata(entry,stateStyles,schema,errors,permitStateReferences){var/** @type {?} */offset=entry.offset;if(offset>1||offset<0){errors.push(new AnimationParseError('Offset values for animations must be between 0 and 1'));}var/** @type {?} */normalizedStyles=[];entry.styles.forEach(function(styleEntry){if(typeof styleEntry==='string'){if(permitStateReferences){normalizedStyles.push.apply(normalizedStyles,_toConsumableArray(_resolveStylesFromState(/** @type {?} */styleEntry,stateStyles,errors)));}else{errors.push(new AnimationParseError('State based animations cannot contain references to other states'));}}else{var/** @type {?} */stylesObj=styleEntry;var/** @type {?} */normalizedStylesObj={};Object.keys(stylesObj).forEach(function(propName){var/** @type {?} */normalizedProp=schema.normalizeAnimationStyleProperty(propName);var/** @type {?} */normalizedOutput=schema.normalizeAnimationStyleValue(normalizedProp,propName,stylesObj[propName]);var/** @type {?} */normalizationError=normalizedOutput['error'];if(normalizationError){errors.push(new AnimationParseError(normalizationError));}normalizedStylesObj[normalizedProp]=normalizedOutput['value'];});normalizedStyles.push(normalizedStylesObj);}});return normalizedStyles;}/**
 * @param {?} entry
 * @param {?} stateStyles
 * @param {?} schema
 * @param {?} errors
 * @return {?}
 */function _normalizeStyleSteps(entry,stateStyles,schema,errors){var/** @type {?} */steps=_normalizeStyleStepEntry(entry,stateStyles,schema,errors);return entry instanceof CompileAnimationGroupMetadata?new CompileAnimationGroupMetadata(steps):new CompileAnimationSequenceMetadata(steps);}/**
 * @param {?} stylesList
 * @param {?} newItem
 * @return {?}
 */function _mergeAnimationStyles(stylesList,newItem){if((typeof newItem==='undefined'?'undefined':_typeof(newItem))==='object'&&newItem!==null&&stylesList.length>0){var/** @type {?} */lastIndex=stylesList.length-1;var/** @type {?} */lastItem=stylesList[lastIndex];if((typeof lastItem==='undefined'?'undefined':_typeof(lastItem))==='object'&&lastItem!==null){stylesList[lastIndex]=StringMapWrapper.merge(/** @type {?} */lastItem,/** @type {?} */newItem);return;}}stylesList.push(newItem);}/**
 * @param {?} entry
 * @param {?} stateStyles
 * @param {?} schema
 * @param {?} errors
 * @return {?}
 */function _normalizeStyleStepEntry(entry,stateStyles,schema,errors){var/** @type {?} */steps=void 0;if(entry instanceof CompileAnimationWithStepsMetadata){steps=entry.steps;}else{return[entry];}var/** @type {?} */newSteps=[];var/** @type {?} */combinedStyles=void 0;steps.forEach(function(step){if(step instanceof CompileAnimationStyleMetadata){// this occurs when a style step is followed by a previous style step
// or when the first style step is run. We want to concatenate all subsequent
// style steps together into a single style step such that we have the correct
// starting keyframe data to pass into the animation player.
if(!isPresent(combinedStyles)){combinedStyles=[];}_normalizeStyleMetadata(/** @type {?} */step,stateStyles,schema,errors,true).forEach(function(entry){_mergeAnimationStyles(combinedStyles,entry);});}else{// it is important that we create a metadata entry of the combined styles
// before we go on an process the animate, sequence or group metadata steps.
// This will ensure that the AST will have the previous styles painted on
// screen before any further animations that use the styles take place.
if(isPresent(combinedStyles)){newSteps.push(new CompileAnimationStyleMetadata(0,combinedStyles));combinedStyles=null;}if(step instanceof CompileAnimationAnimateMetadata){// we do not recurse into CompileAnimationAnimateMetadata since
// those style steps are not going to be squashed
var/** @type {?} */animateStyleValue=step.styles;if(animateStyleValue instanceof CompileAnimationStyleMetadata){animateStyleValue.styles=_normalizeStyleMetadata(animateStyleValue,stateStyles,schema,errors,true);}else if(animateStyleValue instanceof CompileAnimationKeyframesSequenceMetadata){animateStyleValue.steps.forEach(function(step){step.styles=_normalizeStyleMetadata(step,stateStyles,schema,errors,true);});}}else if(step instanceof CompileAnimationWithStepsMetadata){var/** @type {?} */innerSteps=_normalizeStyleStepEntry(step,stateStyles,schema,errors);step=step instanceof CompileAnimationGroupMetadata?new CompileAnimationGroupMetadata(innerSteps):new CompileAnimationSequenceMetadata(innerSteps);}newSteps.push(step);}});// this happens when only styles were animated within the sequence
if(isPresent(combinedStyles)){newSteps.push(new CompileAnimationStyleMetadata(0,combinedStyles));}return newSteps;}/**
 * @param {?} stateName
 * @param {?} stateStyles
 * @param {?} errors
 * @return {?}
 */function _resolveStylesFromState(stateName,stateStyles,errors){var/** @type {?} */styles=[];if(stateName[0]!=':'){errors.push(new AnimationParseError('Animation states via styles must be prefixed with a ":"'));}else{var/** @type {?} */normalizedStateName=stateName.substring(1);var/** @type {?} */value=stateStyles[normalizedStateName];if(!isPresent(value)){errors.push(new AnimationParseError('Unable to apply styles due to missing a state: "'+normalizedStateName+'"'));}else{value.styles.forEach(function(stylesEntry){if((typeof stylesEntry==='undefined'?'undefined':_typeof(stylesEntry))==='object'&&stylesEntry!==null){styles.push(/** @type {?} */stylesEntry);}});}}return styles;}var _AnimationTimings=/**
     * @param {?} duration
     * @param {?} delay
     * @param {?} easing
     */function _AnimationTimings(duration,delay,easing){_classCallCheck(this,_AnimationTimings);this.duration=duration;this.delay=delay;this.easing=easing;};/**
 * @param {?} keyframeSequence
 * @param {?} currentTime
 * @param {?} collectedStyles
 * @param {?} stateStyles
 * @param {?} errors
 * @return {?}
 */function _parseAnimationKeyframes(keyframeSequence,currentTime,collectedStyles,stateStyles,errors){var/** @type {?} */totalEntries=keyframeSequence.steps.length;var/** @type {?} */totalOffsets=0;keyframeSequence.steps.forEach(function(step){return totalOffsets+=isPresent(step.offset)?1:0;});if(totalOffsets>0&&totalOffsets<totalEntries){errors.push(new AnimationParseError('Not all style() entries contain an offset for the provided keyframe()'));totalOffsets=totalEntries;}var/** @type {?} */limit=totalEntries-1;var/** @type {?} */margin=totalOffsets==0?1/limit:0;var/** @type {?} */rawKeyframes=[];var/** @type {?} */index=0;var/** @type {?} */doSortKeyframes=false;var/** @type {?} */lastOffset=0;keyframeSequence.steps.forEach(function(styleMetadata){var/** @type {?} */offset=styleMetadata.offset;var/** @type {?} */keyframeStyles={};styleMetadata.styles.forEach(function(entry){Object.keys(entry).forEach(function(prop){if(prop!='offset'){keyframeStyles[prop]=entry[prop];}});});if(isPresent(offset)){doSortKeyframes=doSortKeyframes||offset<lastOffset;}else{offset=index==limit?_TERMINAL_KEYFRAME:margin*index;}rawKeyframes.push([offset,keyframeStyles]);lastOffset=offset;index++;});if(doSortKeyframes){rawKeyframes.sort(function(a,b){return a[0]<=b[0]?-1:1;});}var/** @type {?} */firstKeyframe=rawKeyframes[0];if(firstKeyframe[0]!=_INITIAL_KEYFRAME){rawKeyframes.splice(0,0,firstKeyframe=[_INITIAL_KEYFRAME,{}]);}var/** @type {?} */firstKeyframeStyles=firstKeyframe[1];limit=rawKeyframes.length-1;var/** @type {?} */lastKeyframe=rawKeyframes[limit];if(lastKeyframe[0]!=_TERMINAL_KEYFRAME){rawKeyframes.push(lastKeyframe=[_TERMINAL_KEYFRAME,{}]);limit++;}var/** @type {?} */lastKeyframeStyles=lastKeyframe[1];for(var/** @type {?} */i=1;i<=limit;i++){var/** @type {?} */entry=rawKeyframes[i];var/** @type {?} */styles=entry[1];Object.keys(styles).forEach(function(prop){if(!isPresent(firstKeyframeStyles[prop])){firstKeyframeStyles[prop]=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_100" /* ɵFILL_STYLE_FLAG */];}});}var _loop=function _loop(_i5){var/** @type {?} */entry=rawKeyframes[_i5];var/** @type {?} */styles=entry[1];Object.keys(styles).forEach(function(prop){if(!isPresent(lastKeyframeStyles[prop])){lastKeyframeStyles[prop]=styles[prop];}});};for(var/** @type {?} */_i5=limit-1;_i5>=0;_i5--){_loop(_i5);}return rawKeyframes.map(function(entry){return new AnimationKeyframeAst(entry[0],new AnimationStylesAst([entry[1]]));});}/**
 * @param {?} entry
 * @param {?} currentTime
 * @param {?} collectedStyles
 * @param {?} stateStyles
 * @param {?} errors
 * @return {?}
 */function _parseTransitionAnimation(entry,currentTime,collectedStyles,stateStyles,errors){var/** @type {?} */ast=void 0/** TODO #9100 */;var/** @type {?} */playTime=0;var/** @type {?} */startingTime=currentTime;if(entry instanceof CompileAnimationWithStepsMetadata){var/** @type {?} */maxDuration=0;var/** @type {?} */steps=[];var/** @type {?} */isGroup=entry instanceof CompileAnimationGroupMetadata;var/** @type {?} */previousStyles=void 0/** TODO #9100 */;entry.steps.forEach(function(entry){// these will get picked up by the next step...
var/** @type {?} */time=isGroup?startingTime:currentTime;if(entry instanceof CompileAnimationStyleMetadata){entry.styles.forEach(function(stylesEntry){// by this point we know that we only have stringmap values
var/** @type {?} */map=stylesEntry;Object.keys(map).forEach(function(prop){collectedStyles.insertAtTime(prop,time,map[prop]);});});previousStyles=entry.styles;return;}var/** @type {?} */innerAst=_parseTransitionAnimation(entry,time,collectedStyles,stateStyles,errors);if(isPresent(previousStyles)){if(entry instanceof CompileAnimationWithStepsMetadata){var/** @type {?} */startingStyles=new AnimationStylesAst(previousStyles);steps.push(new AnimationStepAst(startingStyles,[],0,0,''));}else{var _innerStep$startingSt;var/** @type {?} */innerStep=innerAst;(_innerStep$startingSt=innerStep.startingStyles.styles).push.apply(_innerStep$startingSt,_toConsumableArray(previousStyles));}previousStyles=null;}var/** @type {?} */astDuration=innerAst.playTime;currentTime+=astDuration;playTime+=astDuration;maxDuration=Math.max(astDuration,maxDuration);steps.push(innerAst);});if(isPresent(previousStyles)){var/** @type {?} */startingStyles=new AnimationStylesAst(previousStyles);steps.push(new AnimationStepAst(startingStyles,[],0,0,''));}if(isGroup){ast=new AnimationGroupAst(steps);playTime=maxDuration;currentTime=startingTime+playTime;}else{ast=new AnimationSequenceAst(steps);}}else if(entry instanceof CompileAnimationAnimateMetadata){var/** @type {?} */timings=_parseTimeExpression(entry.timings,errors);var/** @type {?} */styles=entry.styles;var/** @type {?} */_keyframes=void 0/** TODO #9100 */;if(styles instanceof CompileAnimationKeyframesSequenceMetadata){_keyframes=_parseAnimationKeyframes(styles,currentTime,collectedStyles,stateStyles,errors);}else{var/** @type {?} */styleData=styles;var/** @type {?} */offset=_TERMINAL_KEYFRAME;var/** @type {?} */styleAst=new AnimationStylesAst(/** @type {?} */styleData.styles);var/** @type {?} */keyframe=new AnimationKeyframeAst(offset,styleAst);_keyframes=[keyframe];}ast=new AnimationStepAst(new AnimationStylesAst([]),_keyframes,timings.duration,timings.delay,timings.easing);playTime=timings.duration+timings.delay;currentTime+=playTime;_keyframes.forEach(function(keyframe/** TODO #9100 */){return keyframe.styles.styles.forEach(function(entry/** TODO #9100 */){return Object.keys(entry).forEach(function(prop){collectedStyles.insertAtTime(prop,currentTime,entry[prop]);});});});}else{// if the code reaches this stage then an error
// has already been populated within the _normalizeStyleSteps()
// operation...
ast=new AnimationStepAst(null,[],0,0,'');}ast.playTime=playTime;ast.startTime=startingTime;return ast;}/**
 * @param {?} ast
 * @param {?} collectedStyles
 * @param {?} errors
 * @return {?}
 */function _fillAnimationAstStartingKeyframes(ast,collectedStyles,errors){// steps that only contain style will not be filled
if(ast instanceof AnimationStepAst&&ast.keyframes.length>0){var/** @type {?} */_keyframes2=ast.keyframes;if(_keyframes2.length==1){var/** @type {?} */endKeyframe=_keyframes2[0];var/** @type {?} */startKeyframe=_createStartKeyframeFromEndKeyframe(endKeyframe,ast.startTime,ast.playTime,collectedStyles,errors);ast.keyframes=[startKeyframe,endKeyframe];}}else if(ast instanceof AnimationWithStepsAst){ast.steps.forEach(function(entry){return _fillAnimationAstStartingKeyframes(entry,collectedStyles,errors);});}}/**
 * @param {?} exp
 * @param {?} errors
 * @return {?}
 */function _parseTimeExpression(exp,errors){var/** @type {?} */regex=/^([\.\d]+)(m?s)(?:\s+([\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?/i;var/** @type {?} */duration=void 0;var/** @type {?} */delay=0;var/** @type {?} */easing=null;if(typeof exp==='string'){var/** @type {?} */matches=exp.match(regex);if(matches===null){errors.push(new AnimationParseError('The provided timing value "'+exp+'" is invalid.'));return new _AnimationTimings(0,0,null);}var/** @type {?} */durationMatch=parseFloat(matches[1]);var/** @type {?} */durationUnit=matches[2];if(durationUnit=='s'){durationMatch*=_ONE_SECOND;}duration=Math.floor(durationMatch);var/** @type {?} */delayMatch=matches[3];var/** @type {?} */delayUnit=matches[4];if(isPresent(delayMatch)){var/** @type {?} */delayVal=parseFloat(delayMatch);if(isPresent(delayUnit)&&delayUnit=='s'){delayVal*=_ONE_SECOND;}delay=Math.floor(delayVal);}var/** @type {?} */easingVal=matches[5];if(!isBlank(easingVal)){easing=easingVal;}}else{duration=exp;}return new _AnimationTimings(duration,delay,easing);}/**
 * @param {?} endKeyframe
 * @param {?} startTime
 * @param {?} duration
 * @param {?} collectedStyles
 * @param {?} errors
 * @return {?}
 */function _createStartKeyframeFromEndKeyframe(endKeyframe,startTime,duration,collectedStyles,errors){var/** @type {?} */values={};var/** @type {?} */endTime=startTime+duration;endKeyframe.styles.styles.forEach(function(styleData){Object.keys(styleData).forEach(function(prop){var/** @type {?} */val=styleData[prop];if(prop=='offset')return;var/** @type {?} */resultIndex=collectedStyles.indexOfAtOrBeforeTime(prop,startTime);var/** @type {?} */resultEntry=void 0/** TODO #9100 */,/** @type {?} */nextEntry=void 0/** TODO #9100 */,/** @type {?} */value=void 0/** TODO #9100 */;if(isPresent(resultIndex)){resultEntry=collectedStyles.getByIndex(prop,resultIndex);value=resultEntry.value;nextEntry=collectedStyles.getByIndex(prop,resultIndex+1);}else{// this is a flag that the runtime code uses to pass
// in a value either from the state declaration styles
// or using the AUTO_STYLE value (e.g. getComputedStyle)
value=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_100" /* ɵFILL_STYLE_FLAG */];}if(isPresent(nextEntry)&&!nextEntry.matches(endTime,val)){errors.push(new AnimationParseError('The animated CSS property "'+prop+'" unexpectedly changes between steps "'+resultEntry.time+'ms" and "'+endTime+'ms" at "'+nextEntry.time+'ms"'));}values[prop]=value;});});return new AnimationKeyframeAst(_INITIAL_KEYFRAME,new AnimationStylesAst([values]));}/**
 * An interface for retrieving documents by URL that the compiler uses
 * to load templates.
 */var ResourceLoader=function(){function ResourceLoader(){_classCallCheck(this,ResourceLoader);}_createClass(ResourceLoader,[{key:'get',/**
     * @param {?} url
     * @return {?}
     */value:function get(url){return null;}}]);return ResourceLoader;}();/**
 * Create a {\@link UrlResolver} with no package prefix.
 * @return {?}
 */function createUrlResolverWithoutPackagePrefix(){return new UrlResolver();}/**
 * @return {?}
 */function createOfflineCompileUrlResolver(){return new UrlResolver('.');}/**
 * A default provider for {@link PACKAGE_ROOT_URL} that maps to '/'.
 */var/** @type {?} */DEFAULT_PACKAGE_URL_PROVIDER={provide:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_101" /* PACKAGE_ROOT_URL */],useValue:'/'};/**
 * Used by the {\@link Compiler} when resolving HTML and CSS template URLs.
 *
 * This class can be overridden by the application developer to create custom behavior.
 *
 * See {\@link Compiler}
 *
 * ## Example
 *
 * {\@example compiler/ts/url_resolver/url_resolver.ts region='url_resolver'}
 *
 * \@security When compiling templates at runtime, you must
 * ensure that the entire template comes from a trusted source.
 * Attacker-controlled data introduced by a template could expose your
 * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).
 */var UrlResolver=function(){/**
     * @param {?=} _packagePrefix
     */function UrlResolver(){var _packagePrefix=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;_classCallCheck(this,UrlResolver);this._packagePrefix=_packagePrefix;}/**
     * Resolves the `url` given the `baseUrl`:
     * - when the `url` is null, the `baseUrl` is returned,
     * - if `url` is relative ('path/to/here', './path/to/here'), the resolved url is a combination of
     * `baseUrl` and `url`,
     * - if `url` is absolute (it has a scheme: 'http://', 'https://' or start with '/'), the `url` is
     * returned as is (ignoring the `baseUrl`)
     * @param {?} baseUrl
     * @param {?} url
     * @return {?}
     */_createClass(UrlResolver,[{key:'resolve',value:function resolve(baseUrl,url){var/** @type {?} */resolvedUrl=url;if(isPresent(baseUrl)&&baseUrl.length>0){resolvedUrl=_resolveUrl(baseUrl,resolvedUrl);}var/** @type {?} */resolvedParts=_split(resolvedUrl);var/** @type {?} */prefix=this._packagePrefix;if(isPresent(prefix)&&isPresent(resolvedParts)&&resolvedParts[_ComponentIndex.Scheme]=='package'){var/** @type {?} */path=resolvedParts[_ComponentIndex.Path];prefix=prefix.replace(/\/+$/,'');path=path.replace(/^\/+/,'');return prefix+'/'+path;}return resolvedUrl;}}]);return UrlResolver;}();UrlResolver.decorators=[{type:CompilerInjectable}];/** @nocollapse */UrlResolver.ctorParameters=function(){return[{type:undefined,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["I" /* Inject */],args:[__WEBPACK_IMPORTED_MODULE_0__angular_core__["_101" /* PACKAGE_ROOT_URL */]]}]}];};/**
 * Extract the scheme of a URL.
 * @param {?} url
 * @return {?}
 */function getUrlScheme(url){var/** @type {?} */match=_split(url);return match&&match[_ComponentIndex.Scheme]||'';}/**
 * Builds a URI string from already-encoded parts.
 *
 * No encoding is performed.  Any component may be omitted as either null or
 * undefined.
 *
 * @param {?=} opt_scheme The scheme such as 'http'.
 * @param {?=} opt_userInfo The user name before the '\@'.
 * @param {?=} opt_domain The domain such as 'www.google.com', already
 *     URI-encoded.
 * @param {?=} opt_port The port number.
 * @param {?=} opt_path The path, already URI-encoded.  If it is not
 *     empty, it must begin with a slash.
 * @param {?=} opt_queryData The URI-encoded query data.
 * @param {?=} opt_fragment The URI-encoded fragment identifier.
 * @return {?} The fully combined URI.
 */function _buildFromEncodedParts(opt_scheme,opt_userInfo,opt_domain,opt_port,opt_path,opt_queryData,opt_fragment){var/** @type {?} */out=[];if(isPresent(opt_scheme)){out.push(opt_scheme+':');}if(isPresent(opt_domain)){out.push('//');if(isPresent(opt_userInfo)){out.push(opt_userInfo+'@');}out.push(opt_domain);if(isPresent(opt_port)){out.push(':'+opt_port);}}if(isPresent(opt_path)){out.push(opt_path);}if(isPresent(opt_queryData)){out.push('?'+opt_queryData);}if(isPresent(opt_fragment)){out.push('#'+opt_fragment);}return out.join('');}/**
 * A regular expression for breaking a URI into its component parts.
 *
 * {@link http://www.gbiv.com/protocols/uri/rfc/rfc3986.html#RFC2234} says
 * As the "first-match-wins" algorithm is identical to the "greedy"
 * disambiguation method used by POSIX regular expressions, it is natural and
 * commonplace to use a regular expression for parsing the potential five
 * components of a URI reference.
 *
 * The following line is the regular expression for breaking-down a
 * well-formed URI reference into its components.
 *
 * <pre>
 * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
 *  12            3  4          5       6  7        8 9
 * </pre>
 *
 * The numbers in the second line above are only to assist readability; they
 * indicate the reference points for each subexpression (i.e., each paired
 * parenthesis). We refer to the value matched for subexpression <n> as $<n>.
 * For example, matching the above expression to
 * <pre>
 *     http://www.ics.uci.edu/pub/ietf/uri/#Related
 * </pre>
 * results in the following subexpression matches:
 * <pre>
 *    $1 = http:
 *    $2 = http
 *    $3 = //www.ics.uci.edu
 *    $4 = www.ics.uci.edu
 *    $5 = /pub/ietf/uri/
 *    $6 = <undefined>
 *    $7 = <undefined>
 *    $8 = #Related
 *    $9 = Related
 * </pre>
 * where <undefined> indicates that the component is not present, as is the
 * case for the query component in the above example. Therefore, we can
 * determine the value of the five components as
 * <pre>
 *    scheme    = $2
 *    authority = $4
 *    path      = $5
 *    query     = $7
 *    fragment  = $9
 * </pre>
 *
 * The regular expression has been modified slightly to expose the
 * userInfo, domain, and port separately from the authority.
 * The modified version yields
 * <pre>
 *    $1 = http              scheme
 *    $2 = <undefined>       userInfo -\
 *    $3 = www.ics.uci.edu   domain     | authority
 *    $4 = <undefined>       port     -/
 *    $5 = /pub/ietf/uri/    path
 *    $6 = <undefined>       query without ?
 *    $7 = Related           fragment without #
 * </pre>
 * @type {!RegExp}
 * @internal
 */var/** @type {?} */_splitRe=new RegExp('^'+'(?:'+'([^:/?#.]+)'+// used by other URL parts such as :,
// ?, /, #, and .
':)?'+'(?://'+'(?:([^/?#]*)@)?'+'([\\w\\d\\-\\u0100-\\uffff.%]*)'+// digits, dashes, dots, percent
// escapes, and unicode characters.
'(?::([0-9]+))?'+')?'+'([^?#]+)?'+'(?:\\?([^#]*))?'+'(?:#(.*))?'+'$');var _ComponentIndex={};_ComponentIndex.Scheme=1;_ComponentIndex.UserInfo=2;_ComponentIndex.Domain=3;_ComponentIndex.Port=4;_ComponentIndex.Path=5;_ComponentIndex.QueryData=6;_ComponentIndex.Fragment=7;_ComponentIndex[_ComponentIndex.Scheme]="Scheme";_ComponentIndex[_ComponentIndex.UserInfo]="UserInfo";_ComponentIndex[_ComponentIndex.Domain]="Domain";_ComponentIndex[_ComponentIndex.Port]="Port";_ComponentIndex[_ComponentIndex.Path]="Path";_ComponentIndex[_ComponentIndex.QueryData]="QueryData";_ComponentIndex[_ComponentIndex.Fragment]="Fragment";/**
 * Splits a URI into its component parts.
 *
 * Each component can be accessed via the component indices; for example:
 * <pre>
 * goog.uri.utils.split(someStr)[goog.uri.utils.CompontentIndex.QUERY_DATA];
 * </pre>
 *
 * @param {?} uri The URI string to examine.
 * @return {?} Each component still URI-encoded.
 *     Each component that is present will contain the encoded value, whereas
 *     components that are not present will be undefined or empty, depending
 *     on the browser's regular expression implementation.  Never null, since
 *     arbitrary strings may still look like path names.
 */function _split(uri){return uri.match(_splitRe);}/**
 * Removes dot segments in given path component, as described in
 * RFC 3986, section 5.2.4.
 *
 * @param {?} path A non-empty path component.
 * @return {?} Path component with removed dot segments.
 */function _removeDotSegments(path){if(path=='/')return'/';var/** @type {?} */leadingSlash=path[0]=='/'?'/':'';var/** @type {?} */trailingSlash=path[path.length-1]==='/'?'/':'';var/** @type {?} */segments=path.split('/');var/** @type {?} */out=[];var/** @type {?} */up=0;for(var/** @type {?} */pos=0;pos<segments.length;pos++){var/** @type {?} */segment=segments[pos];switch(segment){case'':case'.':break;case'..':if(out.length>0){out.pop();}else{up++;}break;default:out.push(segment);}}if(leadingSlash==''){while(up-->0){out.unshift('..');}if(out.length===0)out.push('.');}return leadingSlash+out.join('/')+trailingSlash;}/**
 * Takes an array of the parts from split and canonicalizes the path part
 * and then joins all the parts.
 * @param {?} parts
 * @return {?}
 */function _joinAndCanonicalizePath(parts){var/** @type {?} */path=parts[_ComponentIndex.Path];path=isBlank(path)?'':_removeDotSegments(path);parts[_ComponentIndex.Path]=path;return _buildFromEncodedParts(parts[_ComponentIndex.Scheme],parts[_ComponentIndex.UserInfo],parts[_ComponentIndex.Domain],parts[_ComponentIndex.Port],path,parts[_ComponentIndex.QueryData],parts[_ComponentIndex.Fragment]);}/**
 * Resolves a URL.
 * @param {?} base The URL acting as the base URL.
 * @param {?} url
 * @return {?}
 */function _resolveUrl(base,url){var/** @type {?} */parts=_split(encodeURI(url));var/** @type {?} */baseParts=_split(base);if(isPresent(parts[_ComponentIndex.Scheme])){return _joinAndCanonicalizePath(parts);}else{parts[_ComponentIndex.Scheme]=baseParts[_ComponentIndex.Scheme];}for(var/** @type {?} */i=_ComponentIndex.Scheme;i<=_ComponentIndex.Port;i++){if(isBlank(parts[i])){parts[i]=baseParts[i];}}if(parts[_ComponentIndex.Path][0]=='/'){return _joinAndCanonicalizePath(parts);}var/** @type {?} */path=baseParts[_ComponentIndex.Path];if(isBlank(path))path='/';var/** @type {?} */index=path.lastIndexOf('/');path=path.substring(0,index+1)+parts[_ComponentIndex.Path];parts[_ComponentIndex.Path]=path;return _joinAndCanonicalizePath(parts);}var DirectiveNormalizer=function(){/**
     * @param {?} _resourceLoader
     * @param {?} _urlResolver
     * @param {?} _htmlParser
     * @param {?} _config
     */function DirectiveNormalizer(_resourceLoader,_urlResolver,_htmlParser,_config){_classCallCheck(this,DirectiveNormalizer);this._resourceLoader=_resourceLoader;this._urlResolver=_urlResolver;this._htmlParser=_htmlParser;this._config=_config;this._resourceLoaderCache=new Map();}/**
     * @return {?}
     */_createClass(DirectiveNormalizer,[{key:'clearCache',value:function clearCache(){this._resourceLoaderCache.clear();}/**
     * @param {?} normalizedDirective
     * @return {?}
     */},{key:'clearCacheFor',value:function clearCacheFor(normalizedDirective){var _this116=this;if(!normalizedDirective.isComponent){return;}this._resourceLoaderCache.delete(normalizedDirective.template.templateUrl);normalizedDirective.template.externalStylesheets.forEach(function(stylesheet){_this116._resourceLoaderCache.delete(stylesheet.moduleUrl);});}/**
     * @param {?} url
     * @return {?}
     */},{key:'_fetch',value:function _fetch(url){var/** @type {?} */result=this._resourceLoaderCache.get(url);if(!result){result=this._resourceLoader.get(url);this._resourceLoaderCache.set(url,result);}return result;}/**
     * @param {?} prenormData
     * @return {?}
     */},{key:'normalizeTemplate',value:function normalizeTemplate(prenormData){var _this117=this;var/** @type {?} */normalizedTemplateSync=null;var/** @type {?} */normalizedTemplateAsync=void 0;if(prenormData.template!=null){if(typeof prenormData.template!=='string'){throw syntaxError('The template specified for component '+stringify(prenormData.componentType)+' is not a string');}normalizedTemplateSync=this.normalizeTemplateSync(prenormData);normalizedTemplateAsync=Promise.resolve(normalizedTemplateSync);}else if(prenormData.templateUrl){if(typeof prenormData.templateUrl!=='string'){throw syntaxError('The templateUrl specified for component '+stringify(prenormData.componentType)+' is not a string');}normalizedTemplateAsync=this.normalizeTemplateAsync(prenormData);}else{throw syntaxError('No template specified for component '+stringify(prenormData.componentType));}if(normalizedTemplateSync&&normalizedTemplateSync.styleUrls.length===0){// sync case
return new SyncAsyncResult(normalizedTemplateSync);}else{// async case
return new SyncAsyncResult(null,normalizedTemplateAsync.then(function(normalizedTemplate){return _this117.normalizeExternalStylesheets(normalizedTemplate);}));}}/**
     * @param {?} prenomData
     * @return {?}
     */},{key:'normalizeTemplateSync',value:function normalizeTemplateSync(prenomData){return this.normalizeLoadedTemplate(prenomData,prenomData.template,prenomData.moduleUrl);}/**
     * @param {?} prenomData
     * @return {?}
     */},{key:'normalizeTemplateAsync',value:function normalizeTemplateAsync(prenomData){var _this118=this;var/** @type {?} */templateUrl=this._urlResolver.resolve(prenomData.moduleUrl,prenomData.templateUrl);return this._fetch(templateUrl).then(function(value){return _this118.normalizeLoadedTemplate(prenomData,value,templateUrl);});}/**
     * @param {?} prenomData
     * @param {?} template
     * @param {?} templateAbsUrl
     * @return {?}
     */},{key:'normalizeLoadedTemplate',value:function normalizeLoadedTemplate(prenomData,template,templateAbsUrl){var/** @type {?} */interpolationConfig=InterpolationConfig.fromArray(prenomData.interpolation);var/** @type {?} */rootNodesAndErrors=this._htmlParser.parse(template,stringify(prenomData.componentType),true,interpolationConfig);if(rootNodesAndErrors.errors.length>0){var/** @type {?} */errorString=rootNodesAndErrors.errors.join('\n');throw syntaxError('Template parse errors:\n'+errorString);}var/** @type {?} */templateMetadataStyles=this.normalizeStylesheet(new CompileStylesheetMetadata({styles:prenomData.styles,styleUrls:prenomData.styleUrls,moduleUrl:prenomData.moduleUrl}));var/** @type {?} */visitor=new TemplatePreparseVisitor();visitAll(visitor,rootNodesAndErrors.rootNodes);var/** @type {?} */templateStyles=this.normalizeStylesheet(new CompileStylesheetMetadata({styles:visitor.styles,styleUrls:visitor.styleUrls,moduleUrl:templateAbsUrl}));var/** @type {?} */encapsulation=prenomData.encapsulation;if(encapsulation==null){encapsulation=this._config.defaultEncapsulation;}var/** @type {?} */styles=templateMetadataStyles.styles.concat(templateStyles.styles);var/** @type {?} */styleUrls=templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls);if(encapsulation===__WEBPACK_IMPORTED_MODULE_0__angular_core__["Q" /* ViewEncapsulation */].Emulated&&styles.length===0&&styleUrls.length===0){encapsulation=__WEBPACK_IMPORTED_MODULE_0__angular_core__["Q" /* ViewEncapsulation */].None;}return new CompileTemplateMetadata({encapsulation:encapsulation,template:template,templateUrl:templateAbsUrl,styles:styles,styleUrls:styleUrls,ngContentSelectors:visitor.ngContentSelectors,animations:prenomData.animations,interpolation:prenomData.interpolation});}/**
     * @param {?} templateMeta
     * @return {?}
     */},{key:'normalizeExternalStylesheets',value:function normalizeExternalStylesheets(templateMeta){return this._loadMissingExternalStylesheets(templateMeta.styleUrls).then(function(externalStylesheets){return new CompileTemplateMetadata({encapsulation:templateMeta.encapsulation,template:templateMeta.template,templateUrl:templateMeta.templateUrl,styles:templateMeta.styles,styleUrls:templateMeta.styleUrls,externalStylesheets:externalStylesheets,ngContentSelectors:templateMeta.ngContentSelectors,animations:templateMeta.animations,interpolation:templateMeta.interpolation});});}/**
     * @param {?} styleUrls
     * @param {?=} loadedStylesheets
     * @return {?}
     */},{key:'_loadMissingExternalStylesheets',value:function _loadMissingExternalStylesheets(styleUrls){var _this119=this;var loadedStylesheets=arguments.length>1&&arguments[1]!==undefined?arguments[1]:new Map();return Promise.all(styleUrls.filter(function(styleUrl){return!loadedStylesheets.has(styleUrl);}).map(function(styleUrl){return _this119._fetch(styleUrl).then(function(loadedStyle){var/** @type {?} */stylesheet=_this119.normalizeStylesheet(new CompileStylesheetMetadata({styles:[loadedStyle],moduleUrl:styleUrl}));loadedStylesheets.set(styleUrl,stylesheet);return _this119._loadMissingExternalStylesheets(stylesheet.styleUrls,loadedStylesheets);});})).then(function(_){return Array.from(loadedStylesheets.values());});}/**
     * @param {?} stylesheet
     * @return {?}
     */},{key:'normalizeStylesheet',value:function normalizeStylesheet(stylesheet){var _this120=this;var/** @type {?} */allStyleUrls=stylesheet.styleUrls.filter(isStyleUrlResolvable).map(function(url){return _this120._urlResolver.resolve(stylesheet.moduleUrl,url);});var/** @type {?} */allStyles=stylesheet.styles.map(function(style){var/** @type {?} */styleWithImports=extractStyleUrls(_this120._urlResolver,stylesheet.moduleUrl,style);allStyleUrls.push.apply(allStyleUrls,_toConsumableArray(styleWithImports.styleUrls));return styleWithImports.style;});return new CompileStylesheetMetadata({styles:allStyles,styleUrls:allStyleUrls,moduleUrl:stylesheet.moduleUrl});}}]);return DirectiveNormalizer;}();DirectiveNormalizer.decorators=[{type:CompilerInjectable}];/** @nocollapse */DirectiveNormalizer.ctorParameters=function(){return[{type:ResourceLoader},{type:UrlResolver},{type:HtmlParser},{type:CompilerConfig}];};var TemplatePreparseVisitor=function(){function TemplatePreparseVisitor(){_classCallCheck(this,TemplatePreparseVisitor);this.ngContentSelectors=[];this.styles=[];this.styleUrls=[];this.ngNonBindableStackCount=0;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */_createClass(TemplatePreparseVisitor,[{key:'visitElement',value:function visitElement(ast,context){var/** @type {?} */preparsedElement=preparseElement(ast);switch(preparsedElement.type){case PreparsedElementType.NG_CONTENT:if(this.ngNonBindableStackCount===0){this.ngContentSelectors.push(preparsedElement.selectAttr);}break;case PreparsedElementType.STYLE:var/** @type {?} */textContent='';ast.children.forEach(function(child){if(child instanceof Text){textContent+=child.value;}});this.styles.push(textContent);break;case PreparsedElementType.STYLESHEET:this.styleUrls.push(preparsedElement.hrefAttr);break;default:break;}if(preparsedElement.nonBindable){this.ngNonBindableStackCount++;}visitAll(this,ast.children);if(preparsedElement.nonBindable){this.ngNonBindableStackCount--;}return null;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitExpansion',value:function visitExpansion(ast,context){visitAll(this,ast.cases);}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitExpansionCase',value:function visitExpansionCase(ast,context){visitAll(this,ast.expression);}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitComment',value:function visitComment(ast,context){return null;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitAttribute',value:function visitAttribute(ast,context){return null;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitText',value:function visitText(ast,context){return null;}}]);return TemplatePreparseVisitor;}();var DirectiveResolver=function(){/**
     * @param {?=} _reflector
     */function DirectiveResolver(){var _reflector=arguments.length>0&&arguments[0]!==undefined?arguments[0]:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_13" /* ɵreflector */];_classCallCheck(this,DirectiveResolver);this._reflector=_reflector;}/**
     * @param {?} type
     * @return {?}
     */_createClass(DirectiveResolver,[{key:'isDirective',value:function isDirective(type){var/** @type {?} */typeMetadata=this._reflector.annotations(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_102" /* resolveForwardRef */])(type));return typeMetadata&&typeMetadata.some(isDirectiveMetadata);}/**
     * Return {\@link Directive} for a given `Type`.
     * @param {?} type
     * @param {?=} throwIfNotFound
     * @return {?}
     */},{key:'resolve',value:function resolve(type){var throwIfNotFound=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var/** @type {?} */typeMetadata=this._reflector.annotations(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_102" /* resolveForwardRef */])(type));if(typeMetadata){var/** @type {?} */metadata=ListWrapper.findLast(typeMetadata,isDirectiveMetadata);if(metadata){var/** @type {?} */propertyMetadata=this._reflector.propMetadata(type);return this._mergeWithPropertyMetadata(metadata,propertyMetadata,type);}}if(throwIfNotFound){throw new Error('No Directive annotation found on '+stringify(type));}return null;}/**
     * @param {?} dm
     * @param {?} propertyMetadata
     * @param {?} directiveType
     * @return {?}
     */},{key:'_mergeWithPropertyMetadata',value:function _mergeWithPropertyMetadata(dm,propertyMetadata,directiveType){var/** @type {?} */inputs=[];var/** @type {?} */outputs=[];var/** @type {?} */host={};var/** @type {?} */queries={};Object.keys(propertyMetadata).forEach(function(propName){var/** @type {?} */input=ListWrapper.findLast(propertyMetadata[propName],function(a){return a instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */];});if(input){if(input.bindingPropertyName){inputs.push(propName+': '+input.bindingPropertyName);}else{inputs.push(propName);}}var/** @type {?} */output=ListWrapper.findLast(propertyMetadata[propName],function(a){return a instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["A" /* Output */];});if(output){if(output.bindingPropertyName){outputs.push(propName+': '+output.bindingPropertyName);}else{outputs.push(propName);}}var/** @type {?} */hostBindings=propertyMetadata[propName].filter(function(a){return a&&a instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["w" /* HostBinding */];});hostBindings.forEach(function(hostBinding){if(hostBinding.hostPropertyName){var/** @type {?} */startWith=hostBinding.hostPropertyName[0];if(startWith==='('){throw new Error('@HostBinding can not bind to events. Use @HostListener instead.');}else if(startWith==='['){throw new Error('@HostBinding parameter should be a property name, \'class.<name>\', or \'attr.<name>\'.');}host['['+hostBinding.hostPropertyName+']']=propName;}else{host['['+propName+']']=propName;}});var/** @type {?} */hostListeners=propertyMetadata[propName].filter(function(a){return a&&a instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["v" /* HostListener */];});hostListeners.forEach(function(hostListener){var/** @type {?} */args=hostListener.args||[];host['('+hostListener.eventName+')']=propName+'('+args.join(',')+')';});var/** @type {?} */query=ListWrapper.findLast(propertyMetadata[propName],function(a){return a instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["_103" /* Query */];});if(query){queries[propName]=query;}});return this._merge(dm,inputs,outputs,host,queries,directiveType);}/**
     * @param {?} def
     * @return {?}
     */},{key:'_extractPublicName',value:function _extractPublicName(def){return splitAtColon(def,[null,def])[1].trim();}/**
     * @param {?} bindings
     * @return {?}
     */},{key:'_dedupeBindings',value:function _dedupeBindings(bindings){var/** @type {?} */names=new Set();var/** @type {?} */reversedResult=[];// go last to first to allow later entries to overwrite previous entries
for(var/** @type {?} */i=bindings.length-1;i>=0;i--){var/** @type {?} */binding=bindings[i];var/** @type {?} */name=this._extractPublicName(binding);if(!names.has(name)){names.add(name);reversedResult.push(binding);}}return reversedResult.reverse();}/**
     * @param {?} directive
     * @param {?} inputs
     * @param {?} outputs
     * @param {?} host
     * @param {?} queries
     * @param {?} directiveType
     * @return {?}
     */},{key:'_merge',value:function _merge(directive,inputs,outputs,host,queries,directiveType){var/** @type {?} */mergedInputs=this._dedupeBindings(directive.inputs?directive.inputs.concat(inputs):inputs);var/** @type {?} */mergedOutputs=this._dedupeBindings(directive.outputs?directive.outputs.concat(outputs):outputs);var/** @type {?} */mergedHost=directive.host?StringMapWrapper.merge(directive.host,host):host;var/** @type {?} */mergedQueries=directive.queries?StringMapWrapper.merge(directive.queries,queries):queries;if(directive instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["b" /* Component */]){return new __WEBPACK_IMPORTED_MODULE_0__angular_core__["b" /* Component */]({selector:directive.selector,inputs:mergedInputs,outputs:mergedOutputs,host:mergedHost,exportAs:directive.exportAs,moduleId:directive.moduleId,queries:mergedQueries,changeDetection:directive.changeDetection,providers:directive.providers,viewProviders:directive.viewProviders,entryComponents:directive.entryComponents,template:directive.template,templateUrl:directive.templateUrl,styles:directive.styles,styleUrls:directive.styleUrls,encapsulation:directive.encapsulation,animations:directive.animations,interpolation:directive.interpolation});}else{return new __WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */]({selector:directive.selector,inputs:mergedInputs,outputs:mergedOutputs,host:mergedHost,exportAs:directive.exportAs,queries:mergedQueries,providers:directive.providers});}}}]);return DirectiveResolver;}();DirectiveResolver.decorators=[{type:CompilerInjectable}];/** @nocollapse */DirectiveResolver.ctorParameters=function(){return[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_104" /* ɵReflectorReader */]}];};/**
 * @param {?} type
 * @return {?}
 */function isDirectiveMetadata(type){return type instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */];}var TypeModifier={};TypeModifier.Const=0;TypeModifier[TypeModifier.Const]="Const";/**
 * @abstract
 */var Type$1=function(){/**
     * @param {?=} modifiers
     */function Type$1(){var modifiers=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;_classCallCheck(this,Type$1);this.modifiers=modifiers;if(!modifiers){this.modifiers=[];}}/**
     * @abstract
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(Type$1,[{key:'visitType',value:function visitType(visitor,context){}/**
     * @param {?} modifier
     * @return {?}
     */},{key:'hasModifier',value:function hasModifier(modifier){return this.modifiers.indexOf(modifier)!==-1;}}]);return Type$1;}();var BuiltinTypeName={};BuiltinTypeName.Dynamic=0;BuiltinTypeName.Bool=1;BuiltinTypeName.String=2;BuiltinTypeName.Int=3;BuiltinTypeName.Number=4;BuiltinTypeName.Function=5;BuiltinTypeName.Inferred=6;BuiltinTypeName[BuiltinTypeName.Dynamic]="Dynamic";BuiltinTypeName[BuiltinTypeName.Bool]="Bool";BuiltinTypeName[BuiltinTypeName.String]="String";BuiltinTypeName[BuiltinTypeName.Int]="Int";BuiltinTypeName[BuiltinTypeName.Number]="Number";BuiltinTypeName[BuiltinTypeName.Function]="Function";BuiltinTypeName[BuiltinTypeName.Inferred]="Inferred";var BuiltinType=function(_Type$){_inherits(BuiltinType,_Type$);/**
     * @param {?} name
     * @param {?=} modifiers
     */function BuiltinType(name){var modifiers=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;_classCallCheck(this,BuiltinType);var _this121=_possibleConstructorReturn(this,(BuiltinType.__proto__||Object.getPrototypeOf(BuiltinType)).call(this,modifiers));_this121.name=name;return _this121;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(BuiltinType,[{key:'visitType',value:function visitType(visitor,context){return visitor.visitBuiltintType(this,context);}}]);return BuiltinType;}(Type$1);var ExpressionType=function(_Type$2){_inherits(ExpressionType,_Type$2);/**
     * @param {?} value
     * @param {?=} modifiers
     */function ExpressionType(value){var modifiers=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;_classCallCheck(this,ExpressionType);var _this122=_possibleConstructorReturn(this,(ExpressionType.__proto__||Object.getPrototypeOf(ExpressionType)).call(this,modifiers));_this122.value=value;return _this122;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(ExpressionType,[{key:'visitType',value:function visitType(visitor,context){return visitor.visitExpressionType(this,context);}}]);return ExpressionType;}(Type$1);var ArrayType=function(_Type$3){_inherits(ArrayType,_Type$3);/**
     * @param {?} of
     * @param {?=} modifiers
     */function ArrayType(of){var modifiers=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;_classCallCheck(this,ArrayType);var _this123=_possibleConstructorReturn(this,(ArrayType.__proto__||Object.getPrototypeOf(ArrayType)).call(this,modifiers));_this123.of=of;return _this123;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(ArrayType,[{key:'visitType',value:function visitType(visitor,context){return visitor.visitArrayType(this,context);}}]);return ArrayType;}(Type$1);var MapType=function(_Type$4){_inherits(MapType,_Type$4);/**
     * @param {?} valueType
     * @param {?=} modifiers
     */function MapType(valueType){var modifiers=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;_classCallCheck(this,MapType);var _this124=_possibleConstructorReturn(this,(MapType.__proto__||Object.getPrototypeOf(MapType)).call(this,modifiers));_this124.valueType=valueType;return _this124;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(MapType,[{key:'visitType',value:function visitType(visitor,context){return visitor.visitMapType(this,context);}}]);return MapType;}(Type$1);var/** @type {?} */DYNAMIC_TYPE=new BuiltinType(BuiltinTypeName.Dynamic);var/** @type {?} */INFERRED_TYPE=new BuiltinType(BuiltinTypeName.Inferred);var/** @type {?} */BOOL_TYPE=new BuiltinType(BuiltinTypeName.Bool);var/** @type {?} */INT_TYPE=new BuiltinType(BuiltinTypeName.Int);var/** @type {?} */NUMBER_TYPE=new BuiltinType(BuiltinTypeName.Number);var/** @type {?} */STRING_TYPE=new BuiltinType(BuiltinTypeName.String);var/** @type {?} */FUNCTION_TYPE=new BuiltinType(BuiltinTypeName.Function);var BinaryOperator={};BinaryOperator.Equals=0;BinaryOperator.NotEquals=1;BinaryOperator.Identical=2;BinaryOperator.NotIdentical=3;BinaryOperator.Minus=4;BinaryOperator.Plus=5;BinaryOperator.Divide=6;BinaryOperator.Multiply=7;BinaryOperator.Modulo=8;BinaryOperator.And=9;BinaryOperator.Or=10;BinaryOperator.Lower=11;BinaryOperator.LowerEquals=12;BinaryOperator.Bigger=13;BinaryOperator.BiggerEquals=14;BinaryOperator[BinaryOperator.Equals]="Equals";BinaryOperator[BinaryOperator.NotEquals]="NotEquals";BinaryOperator[BinaryOperator.Identical]="Identical";BinaryOperator[BinaryOperator.NotIdentical]="NotIdentical";BinaryOperator[BinaryOperator.Minus]="Minus";BinaryOperator[BinaryOperator.Plus]="Plus";BinaryOperator[BinaryOperator.Divide]="Divide";BinaryOperator[BinaryOperator.Multiply]="Multiply";BinaryOperator[BinaryOperator.Modulo]="Modulo";BinaryOperator[BinaryOperator.And]="And";BinaryOperator[BinaryOperator.Or]="Or";BinaryOperator[BinaryOperator.Lower]="Lower";BinaryOperator[BinaryOperator.LowerEquals]="LowerEquals";BinaryOperator[BinaryOperator.Bigger]="Bigger";BinaryOperator[BinaryOperator.BiggerEquals]="BiggerEquals";/**
 * @abstract
 */var Expression=function(){/**
     * @param {?} type
     * @param {?=} sourceSpan
     */function Expression(type,sourceSpan){_classCallCheck(this,Expression);this.type=type;this.sourceSpan=sourceSpan;}/**
     * @abstract
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(Expression,[{key:'visitExpression',value:function visitExpression(visitor,context){}/**
     * @param {?} name
     * @param {?=} sourceSpan
     * @return {?}
     */},{key:'prop',value:function prop(name,sourceSpan){return new ReadPropExpr(this,name,null,sourceSpan);}/**
     * @param {?} index
     * @param {?=} type
     * @param {?=} sourceSpan
     * @return {?}
     */},{key:'key',value:function key(index){var type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var sourceSpan=arguments[2];return new ReadKeyExpr(this,index,type,sourceSpan);}/**
     * @param {?} name
     * @param {?} params
     * @param {?=} sourceSpan
     * @return {?}
     */},{key:'callMethod',value:function callMethod(name,params,sourceSpan){return new InvokeMethodExpr(this,name,params,null,sourceSpan);}/**
     * @param {?} params
     * @param {?=} sourceSpan
     * @return {?}
     */},{key:'callFn',value:function callFn(params,sourceSpan){return new InvokeFunctionExpr(this,params,null,sourceSpan);}/**
     * @param {?} params
     * @param {?=} type
     * @param {?=} sourceSpan
     * @return {?}
     */},{key:'instantiate',value:function instantiate(params){var type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var sourceSpan=arguments[2];return new InstantiateExpr(this,params,type,sourceSpan);}/**
     * @param {?} trueCase
     * @param {?=} falseCase
     * @param {?=} sourceSpan
     * @return {?}
     */},{key:'conditional',value:function conditional(trueCase){var falseCase=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var sourceSpan=arguments[2];return new ConditionalExpr(this,trueCase,falseCase,null,sourceSpan);}/**
     * @param {?} rhs
     * @param {?=} sourceSpan
     * @return {?}
     */},{key:'equals',value:function equals(rhs,sourceSpan){return new BinaryOperatorExpr(BinaryOperator.Equals,this,rhs,null,sourceSpan);}/**
     * @param {?} rhs
     * @param {?=} sourceSpan
     * @return {?}
     */},{key:'notEquals',value:function notEquals(rhs,sourceSpan){return new BinaryOperatorExpr(BinaryOperator.NotEquals,this,rhs,null,sourceSpan);}/**
     * @param {?} rhs
     * @param {?=} sourceSpan
     * @return {?}
     */},{key:'identical',value:function identical(rhs,sourceSpan){return new BinaryOperatorExpr(BinaryOperator.Identical,this,rhs,null,sourceSpan);}/**
     * @param {?} rhs
     * @param {?=} sourceSpan
     * @return {?}
     */},{key:'notIdentical',value:function notIdentical(rhs,sourceSpan){return new BinaryOperatorExpr(BinaryOperator.NotIdentical,this,rhs,null,sourceSpan);}/**
     * @param {?} rhs
     * @param {?=} sourceSpan
     * @return {?}
     */},{key:'minus',value:function minus(rhs,sourceSpan){return new BinaryOperatorExpr(BinaryOperator.Minus,this,rhs,null,sourceSpan);}/**
     * @param {?} rhs
     * @param {?=} sourceSpan
     * @return {?}
     */},{key:'plus',value:function plus(rhs,sourceSpan){return new BinaryOperatorExpr(BinaryOperator.Plus,this,rhs,null,sourceSpan);}/**
     * @param {?} rhs
     * @param {?=} sourceSpan
     * @return {?}
     */},{key:'divide',value:function divide(rhs,sourceSpan){return new BinaryOperatorExpr(BinaryOperator.Divide,this,rhs,null,sourceSpan);}/**
     * @param {?} rhs
     * @param {?=} sourceSpan
     * @return {?}
     */},{key:'multiply',value:function multiply(rhs,sourceSpan){return new BinaryOperatorExpr(BinaryOperator.Multiply,this,rhs,null,sourceSpan);}/**
     * @param {?} rhs
     * @param {?=} sourceSpan
     * @return {?}
     */},{key:'modulo',value:function modulo(rhs,sourceSpan){return new BinaryOperatorExpr(BinaryOperator.Modulo,this,rhs,null,sourceSpan);}/**
     * @param {?} rhs
     * @param {?=} sourceSpan
     * @return {?}
     */},{key:'and',value:function and(rhs,sourceSpan){return new BinaryOperatorExpr(BinaryOperator.And,this,rhs,null,sourceSpan);}/**
     * @param {?} rhs
     * @param {?=} sourceSpan
     * @return {?}
     */},{key:'or',value:function or(rhs,sourceSpan){return new BinaryOperatorExpr(BinaryOperator.Or,this,rhs,null,sourceSpan);}/**
     * @param {?} rhs
     * @param {?=} sourceSpan
     * @return {?}
     */},{key:'lower',value:function lower(rhs,sourceSpan){return new BinaryOperatorExpr(BinaryOperator.Lower,this,rhs,null,sourceSpan);}/**
     * @param {?} rhs
     * @param {?=} sourceSpan
     * @return {?}
     */},{key:'lowerEquals',value:function lowerEquals(rhs,sourceSpan){return new BinaryOperatorExpr(BinaryOperator.LowerEquals,this,rhs,null,sourceSpan);}/**
     * @param {?} rhs
     * @param {?=} sourceSpan
     * @return {?}
     */},{key:'bigger',value:function bigger(rhs,sourceSpan){return new BinaryOperatorExpr(BinaryOperator.Bigger,this,rhs,null,sourceSpan);}/**
     * @param {?} rhs
     * @param {?=} sourceSpan
     * @return {?}
     */},{key:'biggerEquals',value:function biggerEquals(rhs,sourceSpan){return new BinaryOperatorExpr(BinaryOperator.BiggerEquals,this,rhs,null,sourceSpan);}/**
     * @param {?=} sourceSpan
     * @return {?}
     */},{key:'isBlank',value:function isBlank(sourceSpan){// Note: We use equals by purpose here to compare to null and undefined in JS.
// We use the typed null to allow strictNullChecks to narrow types.
return this.equals(TYPED_NULL_EXPR,sourceSpan);}/**
     * @param {?} type
     * @param {?=} sourceSpan
     * @return {?}
     */},{key:'cast',value:function cast(type,sourceSpan){return new CastExpr(this,type,sourceSpan);}/**
     * @return {?}
     */},{key:'toStmt',value:function toStmt(){return new ExpressionStatement(this);}}]);return Expression;}();var BuiltinVar={};BuiltinVar.This=0;BuiltinVar.Super=1;BuiltinVar.CatchError=2;BuiltinVar.CatchStack=3;BuiltinVar[BuiltinVar.This]="This";BuiltinVar[BuiltinVar.Super]="Super";BuiltinVar[BuiltinVar.CatchError]="CatchError";BuiltinVar[BuiltinVar.CatchStack]="CatchStack";var ReadVarExpr=function(_Expression){_inherits(ReadVarExpr,_Expression);/**
     * @param {?} name
     * @param {?=} type
     * @param {?=} sourceSpan
     */function ReadVarExpr(name){var type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var sourceSpan=arguments[2];_classCallCheck(this,ReadVarExpr);var _this125=_possibleConstructorReturn(this,(ReadVarExpr.__proto__||Object.getPrototypeOf(ReadVarExpr)).call(this,type,sourceSpan));if(typeof name==='string'){_this125.name=name;_this125.builtin=null;}else{_this125.name=null;_this125.builtin=name;}return _this125;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(ReadVarExpr,[{key:'visitExpression',value:function visitExpression(visitor,context){return visitor.visitReadVarExpr(this,context);}/**
     * @param {?} value
     * @return {?}
     */},{key:'set',value:function set(value){return new WriteVarExpr(this.name,value,null,this.sourceSpan);}}]);return ReadVarExpr;}(Expression);var WriteVarExpr=function(_Expression2){_inherits(WriteVarExpr,_Expression2);/**
     * @param {?} name
     * @param {?} value
     * @param {?=} type
     * @param {?=} sourceSpan
     */function WriteVarExpr(name,value){var type=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var sourceSpan=arguments[3];_classCallCheck(this,WriteVarExpr);var _this126=_possibleConstructorReturn(this,(WriteVarExpr.__proto__||Object.getPrototypeOf(WriteVarExpr)).call(this,type||value.type,sourceSpan));_this126.name=name;_this126.value=value;return _this126;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(WriteVarExpr,[{key:'visitExpression',value:function visitExpression(visitor,context){return visitor.visitWriteVarExpr(this,context);}/**
     * @param {?=} type
     * @param {?=} modifiers
     * @return {?}
     */},{key:'toDeclStmt',value:function toDeclStmt(){var type=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var modifiers=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return new DeclareVarStmt(this.name,this.value,type,modifiers,this.sourceSpan);}}]);return WriteVarExpr;}(Expression);var WriteKeyExpr=function(_Expression3){_inherits(WriteKeyExpr,_Expression3);/**
     * @param {?} receiver
     * @param {?} index
     * @param {?} value
     * @param {?=} type
     * @param {?=} sourceSpan
     */function WriteKeyExpr(receiver,index,value){var type=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var sourceSpan=arguments[4];_classCallCheck(this,WriteKeyExpr);var _this127=_possibleConstructorReturn(this,(WriteKeyExpr.__proto__||Object.getPrototypeOf(WriteKeyExpr)).call(this,type||value.type,sourceSpan));_this127.receiver=receiver;_this127.index=index;_this127.value=value;return _this127;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(WriteKeyExpr,[{key:'visitExpression',value:function visitExpression(visitor,context){return visitor.visitWriteKeyExpr(this,context);}}]);return WriteKeyExpr;}(Expression);var WritePropExpr=function(_Expression4){_inherits(WritePropExpr,_Expression4);/**
     * @param {?} receiver
     * @param {?} name
     * @param {?} value
     * @param {?=} type
     * @param {?=} sourceSpan
     */function WritePropExpr(receiver,name,value){var type=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var sourceSpan=arguments[4];_classCallCheck(this,WritePropExpr);var _this128=_possibleConstructorReturn(this,(WritePropExpr.__proto__||Object.getPrototypeOf(WritePropExpr)).call(this,type||value.type,sourceSpan));_this128.receiver=receiver;_this128.name=name;_this128.value=value;return _this128;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(WritePropExpr,[{key:'visitExpression',value:function visitExpression(visitor,context){return visitor.visitWritePropExpr(this,context);}}]);return WritePropExpr;}(Expression);var BuiltinMethod={};BuiltinMethod.ConcatArray=0;BuiltinMethod.SubscribeObservable=1;BuiltinMethod.Bind=2;BuiltinMethod[BuiltinMethod.ConcatArray]="ConcatArray";BuiltinMethod[BuiltinMethod.SubscribeObservable]="SubscribeObservable";BuiltinMethod[BuiltinMethod.Bind]="Bind";var InvokeMethodExpr=function(_Expression5){_inherits(InvokeMethodExpr,_Expression5);/**
     * @param {?} receiver
     * @param {?} method
     * @param {?} args
     * @param {?=} type
     * @param {?=} sourceSpan
     */function InvokeMethodExpr(receiver,method,args){var type=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var sourceSpan=arguments[4];_classCallCheck(this,InvokeMethodExpr);var _this129=_possibleConstructorReturn(this,(InvokeMethodExpr.__proto__||Object.getPrototypeOf(InvokeMethodExpr)).call(this,type,sourceSpan));_this129.receiver=receiver;_this129.args=args;if(typeof method==='string'){_this129.name=method;_this129.builtin=null;}else{_this129.name=null;_this129.builtin=method;}return _this129;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(InvokeMethodExpr,[{key:'visitExpression',value:function visitExpression(visitor,context){return visitor.visitInvokeMethodExpr(this,context);}}]);return InvokeMethodExpr;}(Expression);var InvokeFunctionExpr=function(_Expression6){_inherits(InvokeFunctionExpr,_Expression6);/**
     * @param {?} fn
     * @param {?} args
     * @param {?=} type
     * @param {?=} sourceSpan
     */function InvokeFunctionExpr(fn,args){var type=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var sourceSpan=arguments[3];_classCallCheck(this,InvokeFunctionExpr);var _this130=_possibleConstructorReturn(this,(InvokeFunctionExpr.__proto__||Object.getPrototypeOf(InvokeFunctionExpr)).call(this,type,sourceSpan));_this130.fn=fn;_this130.args=args;return _this130;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(InvokeFunctionExpr,[{key:'visitExpression',value:function visitExpression(visitor,context){return visitor.visitInvokeFunctionExpr(this,context);}}]);return InvokeFunctionExpr;}(Expression);var InstantiateExpr=function(_Expression7){_inherits(InstantiateExpr,_Expression7);/**
     * @param {?} classExpr
     * @param {?} args
     * @param {?=} type
     * @param {?=} sourceSpan
     */function InstantiateExpr(classExpr,args,type,sourceSpan){_classCallCheck(this,InstantiateExpr);var _this131=_possibleConstructorReturn(this,(InstantiateExpr.__proto__||Object.getPrototypeOf(InstantiateExpr)).call(this,type,sourceSpan));_this131.classExpr=classExpr;_this131.args=args;return _this131;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(InstantiateExpr,[{key:'visitExpression',value:function visitExpression(visitor,context){return visitor.visitInstantiateExpr(this,context);}}]);return InstantiateExpr;}(Expression);var LiteralExpr=function(_Expression8){_inherits(LiteralExpr,_Expression8);/**
     * @param {?} value
     * @param {?=} type
     * @param {?=} sourceSpan
     */function LiteralExpr(value){var type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var sourceSpan=arguments[2];_classCallCheck(this,LiteralExpr);var _this132=_possibleConstructorReturn(this,(LiteralExpr.__proto__||Object.getPrototypeOf(LiteralExpr)).call(this,type,sourceSpan));_this132.value=value;return _this132;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(LiteralExpr,[{key:'visitExpression',value:function visitExpression(visitor,context){return visitor.visitLiteralExpr(this,context);}}]);return LiteralExpr;}(Expression);var ExternalExpr=function(_Expression9){_inherits(ExternalExpr,_Expression9);/**
     * @param {?} value
     * @param {?=} type
     * @param {?=} typeParams
     * @param {?=} sourceSpan
     */function ExternalExpr(value){var type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var typeParams=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var sourceSpan=arguments[3];_classCallCheck(this,ExternalExpr);var _this133=_possibleConstructorReturn(this,(ExternalExpr.__proto__||Object.getPrototypeOf(ExternalExpr)).call(this,type,sourceSpan));_this133.value=value;_this133.typeParams=typeParams;return _this133;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(ExternalExpr,[{key:'visitExpression',value:function visitExpression(visitor,context){return visitor.visitExternalExpr(this,context);}}]);return ExternalExpr;}(Expression);var ConditionalExpr=function(_Expression10){_inherits(ConditionalExpr,_Expression10);/**
     * @param {?} condition
     * @param {?} trueCase
     * @param {?=} falseCase
     * @param {?=} type
     * @param {?=} sourceSpan
     */function ConditionalExpr(condition,trueCase){var falseCase=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var type=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var sourceSpan=arguments[4];_classCallCheck(this,ConditionalExpr);var _this134=_possibleConstructorReturn(this,(ConditionalExpr.__proto__||Object.getPrototypeOf(ConditionalExpr)).call(this,type||trueCase.type,sourceSpan));_this134.condition=condition;_this134.falseCase=falseCase;_this134.trueCase=trueCase;return _this134;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(ConditionalExpr,[{key:'visitExpression',value:function visitExpression(visitor,context){return visitor.visitConditionalExpr(this,context);}}]);return ConditionalExpr;}(Expression);var NotExpr=function(_Expression11){_inherits(NotExpr,_Expression11);/**
     * @param {?} condition
     * @param {?=} sourceSpan
     */function NotExpr(condition,sourceSpan){_classCallCheck(this,NotExpr);var _this135=_possibleConstructorReturn(this,(NotExpr.__proto__||Object.getPrototypeOf(NotExpr)).call(this,BOOL_TYPE,sourceSpan));_this135.condition=condition;return _this135;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(NotExpr,[{key:'visitExpression',value:function visitExpression(visitor,context){return visitor.visitNotExpr(this,context);}}]);return NotExpr;}(Expression);var CastExpr=function(_Expression12){_inherits(CastExpr,_Expression12);/**
     * @param {?} value
     * @param {?} type
     * @param {?=} sourceSpan
     */function CastExpr(value,type,sourceSpan){_classCallCheck(this,CastExpr);var _this136=_possibleConstructorReturn(this,(CastExpr.__proto__||Object.getPrototypeOf(CastExpr)).call(this,type,sourceSpan));_this136.value=value;return _this136;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(CastExpr,[{key:'visitExpression',value:function visitExpression(visitor,context){return visitor.visitCastExpr(this,context);}}]);return CastExpr;}(Expression);var FnParam=/**
     * @param {?} name
     * @param {?=} type
     */function FnParam(name){var type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;_classCallCheck(this,FnParam);this.name=name;this.type=type;};var FunctionExpr=function(_Expression13){_inherits(FunctionExpr,_Expression13);/**
     * @param {?} params
     * @param {?} statements
     * @param {?=} type
     * @param {?=} sourceSpan
     */function FunctionExpr(params,statements){var type=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var sourceSpan=arguments[3];_classCallCheck(this,FunctionExpr);var _this137=_possibleConstructorReturn(this,(FunctionExpr.__proto__||Object.getPrototypeOf(FunctionExpr)).call(this,type,sourceSpan));_this137.params=params;_this137.statements=statements;return _this137;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(FunctionExpr,[{key:'visitExpression',value:function visitExpression(visitor,context){return visitor.visitFunctionExpr(this,context);}/**
     * @param {?} name
     * @param {?=} modifiers
     * @return {?}
     */},{key:'toDeclStmt',value:function toDeclStmt(name){var modifiers=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return new DeclareFunctionStmt(name,this.params,this.statements,this.type,modifiers,this.sourceSpan);}}]);return FunctionExpr;}(Expression);var BinaryOperatorExpr=function(_Expression14){_inherits(BinaryOperatorExpr,_Expression14);/**
     * @param {?} operator
     * @param {?} lhs
     * @param {?} rhs
     * @param {?=} type
     * @param {?=} sourceSpan
     */function BinaryOperatorExpr(operator,lhs,rhs){var type=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var sourceSpan=arguments[4];_classCallCheck(this,BinaryOperatorExpr);var _this138=_possibleConstructorReturn(this,(BinaryOperatorExpr.__proto__||Object.getPrototypeOf(BinaryOperatorExpr)).call(this,type||lhs.type,sourceSpan));_this138.operator=operator;_this138.rhs=rhs;_this138.lhs=lhs;return _this138;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(BinaryOperatorExpr,[{key:'visitExpression',value:function visitExpression(visitor,context){return visitor.visitBinaryOperatorExpr(this,context);}}]);return BinaryOperatorExpr;}(Expression);var ReadPropExpr=function(_Expression15){_inherits(ReadPropExpr,_Expression15);/**
     * @param {?} receiver
     * @param {?} name
     * @param {?=} type
     * @param {?=} sourceSpan
     */function ReadPropExpr(receiver,name){var type=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var sourceSpan=arguments[3];_classCallCheck(this,ReadPropExpr);var _this139=_possibleConstructorReturn(this,(ReadPropExpr.__proto__||Object.getPrototypeOf(ReadPropExpr)).call(this,type,sourceSpan));_this139.receiver=receiver;_this139.name=name;return _this139;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(ReadPropExpr,[{key:'visitExpression',value:function visitExpression(visitor,context){return visitor.visitReadPropExpr(this,context);}/**
     * @param {?} value
     * @return {?}
     */},{key:'set',value:function set(value){return new WritePropExpr(this.receiver,this.name,value,null,this.sourceSpan);}}]);return ReadPropExpr;}(Expression);var ReadKeyExpr=function(_Expression16){_inherits(ReadKeyExpr,_Expression16);/**
     * @param {?} receiver
     * @param {?} index
     * @param {?=} type
     * @param {?=} sourceSpan
     */function ReadKeyExpr(receiver,index){var type=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var sourceSpan=arguments[3];_classCallCheck(this,ReadKeyExpr);var _this140=_possibleConstructorReturn(this,(ReadKeyExpr.__proto__||Object.getPrototypeOf(ReadKeyExpr)).call(this,type,sourceSpan));_this140.receiver=receiver;_this140.index=index;return _this140;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(ReadKeyExpr,[{key:'visitExpression',value:function visitExpression(visitor,context){return visitor.visitReadKeyExpr(this,context);}/**
     * @param {?} value
     * @return {?}
     */},{key:'set',value:function set(value){return new WriteKeyExpr(this.receiver,this.index,value,null,this.sourceSpan);}}]);return ReadKeyExpr;}(Expression);var LiteralArrayExpr=function(_Expression17){_inherits(LiteralArrayExpr,_Expression17);/**
     * @param {?} entries
     * @param {?=} type
     * @param {?=} sourceSpan
     */function LiteralArrayExpr(entries){var type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var sourceSpan=arguments[2];_classCallCheck(this,LiteralArrayExpr);var _this141=_possibleConstructorReturn(this,(LiteralArrayExpr.__proto__||Object.getPrototypeOf(LiteralArrayExpr)).call(this,type,sourceSpan));_this141.entries=entries;return _this141;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(LiteralArrayExpr,[{key:'visitExpression',value:function visitExpression(visitor,context){return visitor.visitLiteralArrayExpr(this,context);}}]);return LiteralArrayExpr;}(Expression);var LiteralMapEntry=/**
     * @param {?} key
     * @param {?} value
     * @param {?=} quoted
     */function LiteralMapEntry(key,value){var quoted=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;_classCallCheck(this,LiteralMapEntry);this.key=key;this.value=value;this.quoted=quoted;};var LiteralMapExpr=function(_Expression18){_inherits(LiteralMapExpr,_Expression18);/**
     * @param {?} entries
     * @param {?=} type
     * @param {?=} sourceSpan
     */function LiteralMapExpr(entries){var type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var sourceSpan=arguments[2];_classCallCheck(this,LiteralMapExpr);var _this142=_possibleConstructorReturn(this,(LiteralMapExpr.__proto__||Object.getPrototypeOf(LiteralMapExpr)).call(this,type,sourceSpan));_this142.entries=entries;_this142.valueType=null;if(type){_this142.valueType=type.valueType;}return _this142;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(LiteralMapExpr,[{key:'visitExpression',value:function visitExpression(visitor,context){return visitor.visitLiteralMapExpr(this,context);}}]);return LiteralMapExpr;}(Expression);var/** @type {?} */THIS_EXPR=new ReadVarExpr(BuiltinVar.This);var/** @type {?} */SUPER_EXPR=new ReadVarExpr(BuiltinVar.Super);var/** @type {?} */CATCH_ERROR_VAR=new ReadVarExpr(BuiltinVar.CatchError);var/** @type {?} */CATCH_STACK_VAR=new ReadVarExpr(BuiltinVar.CatchStack);var/** @type {?} */NULL_EXPR=new LiteralExpr(null,null);var/** @type {?} */TYPED_NULL_EXPR=new LiteralExpr(null,INFERRED_TYPE);var StmtModifier={};StmtModifier.Final=0;StmtModifier.Private=1;StmtModifier[StmtModifier.Final]="Final";StmtModifier[StmtModifier.Private]="Private";/**
 * @abstract
 */var Statement=function(){/**
     * @param {?=} modifiers
     * @param {?=} sourceSpan
     */function Statement(){var modifiers=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var sourceSpan=arguments[1];_classCallCheck(this,Statement);this.modifiers=modifiers;this.sourceSpan=sourceSpan;if(!modifiers){this.modifiers=[];}}/**
     * @abstract
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(Statement,[{key:'visitStatement',value:function visitStatement(visitor,context){}/**
     * @param {?} modifier
     * @return {?}
     */},{key:'hasModifier',value:function hasModifier(modifier){return this.modifiers.indexOf(modifier)!==-1;}}]);return Statement;}();var DeclareVarStmt=function(_Statement){_inherits(DeclareVarStmt,_Statement);/**
     * @param {?} name
     * @param {?} value
     * @param {?=} type
     * @param {?=} modifiers
     * @param {?=} sourceSpan
     */function DeclareVarStmt(name,value){var type=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var modifiers=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var sourceSpan=arguments[4];_classCallCheck(this,DeclareVarStmt);var _this143=_possibleConstructorReturn(this,(DeclareVarStmt.__proto__||Object.getPrototypeOf(DeclareVarStmt)).call(this,modifiers,sourceSpan));_this143.name=name;_this143.value=value;_this143.type=type||value.type;return _this143;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(DeclareVarStmt,[{key:'visitStatement',value:function visitStatement(visitor,context){return visitor.visitDeclareVarStmt(this,context);}}]);return DeclareVarStmt;}(Statement);var DeclareFunctionStmt=function(_Statement2){_inherits(DeclareFunctionStmt,_Statement2);/**
     * @param {?} name
     * @param {?} params
     * @param {?} statements
     * @param {?=} type
     * @param {?=} modifiers
     * @param {?=} sourceSpan
     */function DeclareFunctionStmt(name,params,statements){var type=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var modifiers=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;var sourceSpan=arguments[5];_classCallCheck(this,DeclareFunctionStmt);var _this144=_possibleConstructorReturn(this,(DeclareFunctionStmt.__proto__||Object.getPrototypeOf(DeclareFunctionStmt)).call(this,modifiers,sourceSpan));_this144.name=name;_this144.params=params;_this144.statements=statements;_this144.type=type;return _this144;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(DeclareFunctionStmt,[{key:'visitStatement',value:function visitStatement(visitor,context){return visitor.visitDeclareFunctionStmt(this,context);}}]);return DeclareFunctionStmt;}(Statement);var ExpressionStatement=function(_Statement3){_inherits(ExpressionStatement,_Statement3);/**
     * @param {?} expr
     * @param {?=} sourceSpan
     */function ExpressionStatement(expr,sourceSpan){_classCallCheck(this,ExpressionStatement);var _this145=_possibleConstructorReturn(this,(ExpressionStatement.__proto__||Object.getPrototypeOf(ExpressionStatement)).call(this,null,sourceSpan));_this145.expr=expr;return _this145;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(ExpressionStatement,[{key:'visitStatement',value:function visitStatement(visitor,context){return visitor.visitExpressionStmt(this,context);}}]);return ExpressionStatement;}(Statement);var ReturnStatement=function(_Statement4){_inherits(ReturnStatement,_Statement4);/**
     * @param {?} value
     * @param {?=} sourceSpan
     */function ReturnStatement(value,sourceSpan){_classCallCheck(this,ReturnStatement);var _this146=_possibleConstructorReturn(this,(ReturnStatement.__proto__||Object.getPrototypeOf(ReturnStatement)).call(this,null,sourceSpan));_this146.value=value;return _this146;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(ReturnStatement,[{key:'visitStatement',value:function visitStatement(visitor,context){return visitor.visitReturnStmt(this,context);}}]);return ReturnStatement;}(Statement);var AbstractClassPart=function(){/**
     * @param {?=} type
     * @param {?} modifiers
     */function AbstractClassPart(){var type=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var modifiers=arguments[1];_classCallCheck(this,AbstractClassPart);this.type=type;this.modifiers=modifiers;if(!modifiers){this.modifiers=[];}}/**
     * @param {?} modifier
     * @return {?}
     */_createClass(AbstractClassPart,[{key:'hasModifier',value:function hasModifier(modifier){return this.modifiers.indexOf(modifier)!==-1;}}]);return AbstractClassPart;}();var ClassField=function(_AbstractClassPart){_inherits(ClassField,_AbstractClassPart);/**
     * @param {?} name
     * @param {?=} type
     * @param {?=} modifiers
     */function ClassField(name){var type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var modifiers=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;_classCallCheck(this,ClassField);var _this147=_possibleConstructorReturn(this,(ClassField.__proto__||Object.getPrototypeOf(ClassField)).call(this,type,modifiers));_this147.name=name;return _this147;}return ClassField;}(AbstractClassPart);var ClassMethod=function(_AbstractClassPart2){_inherits(ClassMethod,_AbstractClassPart2);/**
     * @param {?} name
     * @param {?} params
     * @param {?} body
     * @param {?=} type
     * @param {?=} modifiers
     */function ClassMethod(name,params,body){var type=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var modifiers=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;_classCallCheck(this,ClassMethod);var _this148=_possibleConstructorReturn(this,(ClassMethod.__proto__||Object.getPrototypeOf(ClassMethod)).call(this,type,modifiers));_this148.name=name;_this148.params=params;_this148.body=body;return _this148;}return ClassMethod;}(AbstractClassPart);var ClassGetter=function(_AbstractClassPart3){_inherits(ClassGetter,_AbstractClassPart3);/**
     * @param {?} name
     * @param {?} body
     * @param {?=} type
     * @param {?=} modifiers
     */function ClassGetter(name,body){var type=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var modifiers=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;_classCallCheck(this,ClassGetter);var _this149=_possibleConstructorReturn(this,(ClassGetter.__proto__||Object.getPrototypeOf(ClassGetter)).call(this,type,modifiers));_this149.name=name;_this149.body=body;return _this149;}return ClassGetter;}(AbstractClassPart);var ClassStmt=function(_Statement5){_inherits(ClassStmt,_Statement5);/**
     * @param {?} name
     * @param {?} parent
     * @param {?} fields
     * @param {?} getters
     * @param {?} constructorMethod
     * @param {?} methods
     * @param {?=} modifiers
     * @param {?=} sourceSpan
     */function ClassStmt(name,parent,fields,getters,constructorMethod,methods){var modifiers=arguments.length>6&&arguments[6]!==undefined?arguments[6]:null;var sourceSpan=arguments[7];_classCallCheck(this,ClassStmt);var _this150=_possibleConstructorReturn(this,(ClassStmt.__proto__||Object.getPrototypeOf(ClassStmt)).call(this,modifiers,sourceSpan));_this150.name=name;_this150.parent=parent;_this150.fields=fields;_this150.getters=getters;_this150.constructorMethod=constructorMethod;_this150.methods=methods;return _this150;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(ClassStmt,[{key:'visitStatement',value:function visitStatement(visitor,context){return visitor.visitDeclareClassStmt(this,context);}}]);return ClassStmt;}(Statement);var IfStmt=function(_Statement6){_inherits(IfStmt,_Statement6);/**
     * @param {?} condition
     * @param {?} trueCase
     * @param {?=} falseCase
     * @param {?=} sourceSpan
     */function IfStmt(condition,trueCase){var falseCase=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];var sourceSpan=arguments[3];_classCallCheck(this,IfStmt);var _this151=_possibleConstructorReturn(this,(IfStmt.__proto__||Object.getPrototypeOf(IfStmt)).call(this,null,sourceSpan));_this151.condition=condition;_this151.trueCase=trueCase;_this151.falseCase=falseCase;return _this151;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(IfStmt,[{key:'visitStatement',value:function visitStatement(visitor,context){return visitor.visitIfStmt(this,context);}}]);return IfStmt;}(Statement);var TryCatchStmt=function(_Statement7){_inherits(TryCatchStmt,_Statement7);/**
     * @param {?} bodyStmts
     * @param {?} catchStmts
     * @param {?=} sourceSpan
     */function TryCatchStmt(bodyStmts,catchStmts,sourceSpan){_classCallCheck(this,TryCatchStmt);var _this152=_possibleConstructorReturn(this,(TryCatchStmt.__proto__||Object.getPrototypeOf(TryCatchStmt)).call(this,null,sourceSpan));_this152.bodyStmts=bodyStmts;_this152.catchStmts=catchStmts;return _this152;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(TryCatchStmt,[{key:'visitStatement',value:function visitStatement(visitor,context){return visitor.visitTryCatchStmt(this,context);}}]);return TryCatchStmt;}(Statement);var ThrowStmt=function(_Statement8){_inherits(ThrowStmt,_Statement8);/**
     * @param {?} error
     * @param {?=} sourceSpan
     */function ThrowStmt(error,sourceSpan){_classCallCheck(this,ThrowStmt);var _this153=_possibleConstructorReturn(this,(ThrowStmt.__proto__||Object.getPrototypeOf(ThrowStmt)).call(this,null,sourceSpan));_this153.error=error;return _this153;}/**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */_createClass(ThrowStmt,[{key:'visitStatement',value:function visitStatement(visitor,context){return visitor.visitThrowStmt(this,context);}}]);return ThrowStmt;}(Statement);var ExpressionTransformer=function(){function ExpressionTransformer(){_classCallCheck(this,ExpressionTransformer);}_createClass(ExpressionTransformer,[{key:'visitReadVarExpr',/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */value:function visitReadVarExpr(ast,context){return ast;}/**
     * @param {?} expr
     * @param {?} context
     * @return {?}
     */},{key:'visitWriteVarExpr',value:function visitWriteVarExpr(expr,context){return new WriteVarExpr(expr.name,expr.value.visitExpression(this,context),expr.type,expr.sourceSpan);}/**
     * @param {?} expr
     * @param {?} context
     * @return {?}
     */},{key:'visitWriteKeyExpr',value:function visitWriteKeyExpr(expr,context){return new WriteKeyExpr(expr.receiver.visitExpression(this,context),expr.index.visitExpression(this,context),expr.value.visitExpression(this,context),expr.type,expr.sourceSpan);}/**
     * @param {?} expr
     * @param {?} context
     * @return {?}
     */},{key:'visitWritePropExpr',value:function visitWritePropExpr(expr,context){return new WritePropExpr(expr.receiver.visitExpression(this,context),expr.name,expr.value.visitExpression(this,context),expr.type,expr.sourceSpan);}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitInvokeMethodExpr',value:function visitInvokeMethodExpr(ast,context){var/** @type {?} */method=ast.builtin||ast.name;return new InvokeMethodExpr(ast.receiver.visitExpression(this,context),method,this.visitAllExpressions(ast.args,context),ast.type,ast.sourceSpan);}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitInvokeFunctionExpr',value:function visitInvokeFunctionExpr(ast,context){return new InvokeFunctionExpr(ast.fn.visitExpression(this,context),this.visitAllExpressions(ast.args,context),ast.type,ast.sourceSpan);}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitInstantiateExpr',value:function visitInstantiateExpr(ast,context){return new InstantiateExpr(ast.classExpr.visitExpression(this,context),this.visitAllExpressions(ast.args,context),ast.type,ast.sourceSpan);}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitLiteralExpr',value:function visitLiteralExpr(ast,context){return ast;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitExternalExpr',value:function visitExternalExpr(ast,context){return ast;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitConditionalExpr',value:function visitConditionalExpr(ast,context){return new ConditionalExpr(ast.condition.visitExpression(this,context),ast.trueCase.visitExpression(this,context),ast.falseCase.visitExpression(this,context),ast.type,ast.sourceSpan);}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitNotExpr',value:function visitNotExpr(ast,context){return new NotExpr(ast.condition.visitExpression(this,context),ast.sourceSpan);}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitCastExpr',value:function visitCastExpr(ast,context){return new CastExpr(ast.value.visitExpression(this,context),context,ast.sourceSpan);}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitFunctionExpr',value:function visitFunctionExpr(ast,context){// Don't descend into nested functions
return ast;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitBinaryOperatorExpr',value:function visitBinaryOperatorExpr(ast,context){return new BinaryOperatorExpr(ast.operator,ast.lhs.visitExpression(this,context),ast.rhs.visitExpression(this,context),ast.type,ast.sourceSpan);}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitReadPropExpr',value:function visitReadPropExpr(ast,context){return new ReadPropExpr(ast.receiver.visitExpression(this,context),ast.name,ast.type,ast.sourceSpan);}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitReadKeyExpr',value:function visitReadKeyExpr(ast,context){return new ReadKeyExpr(ast.receiver.visitExpression(this,context),ast.index.visitExpression(this,context),ast.type,ast.sourceSpan);}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitLiteralArrayExpr',value:function visitLiteralArrayExpr(ast,context){return new LiteralArrayExpr(this.visitAllExpressions(ast.entries,context),ast.type,ast.sourceSpan);}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitLiteralMapExpr',value:function visitLiteralMapExpr(ast,context){var _this154=this;var/** @type {?} */entries=ast.entries.map(function(entry){return new LiteralMapEntry(entry.key,entry.value.visitExpression(_this154,context),entry.quoted);});var/** @type {?} */mapType=new MapType(ast.valueType);return new LiteralMapExpr(entries,mapType,ast.sourceSpan);}/**
     * @param {?} exprs
     * @param {?} context
     * @return {?}
     */},{key:'visitAllExpressions',value:function visitAllExpressions(exprs,context){var _this155=this;return exprs.map(function(expr){return expr.visitExpression(_this155,context);});}/**
     * @param {?} stmt
     * @param {?} context
     * @return {?}
     */},{key:'visitDeclareVarStmt',value:function visitDeclareVarStmt(stmt,context){return new DeclareVarStmt(stmt.name,stmt.value.visitExpression(this,context),stmt.type,stmt.modifiers,stmt.sourceSpan);}/**
     * @param {?} stmt
     * @param {?} context
     * @return {?}
     */},{key:'visitDeclareFunctionStmt',value:function visitDeclareFunctionStmt(stmt,context){// Don't descend into nested functions
return stmt;}/**
     * @param {?} stmt
     * @param {?} context
     * @return {?}
     */},{key:'visitExpressionStmt',value:function visitExpressionStmt(stmt,context){return new ExpressionStatement(stmt.expr.visitExpression(this,context),stmt.sourceSpan);}/**
     * @param {?} stmt
     * @param {?} context
     * @return {?}
     */},{key:'visitReturnStmt',value:function visitReturnStmt(stmt,context){return new ReturnStatement(stmt.value.visitExpression(this,context),stmt.sourceSpan);}/**
     * @param {?} stmt
     * @param {?} context
     * @return {?}
     */},{key:'visitDeclareClassStmt',value:function visitDeclareClassStmt(stmt,context){// Don't descend into nested functions
return stmt;}/**
     * @param {?} stmt
     * @param {?} context
     * @return {?}
     */},{key:'visitIfStmt',value:function visitIfStmt(stmt,context){return new IfStmt(stmt.condition.visitExpression(this,context),this.visitAllStatements(stmt.trueCase,context),this.visitAllStatements(stmt.falseCase,context),stmt.sourceSpan);}/**
     * @param {?} stmt
     * @param {?} context
     * @return {?}
     */},{key:'visitTryCatchStmt',value:function visitTryCatchStmt(stmt,context){return new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts,context),this.visitAllStatements(stmt.catchStmts,context),stmt.sourceSpan);}/**
     * @param {?} stmt
     * @param {?} context
     * @return {?}
     */},{key:'visitThrowStmt',value:function visitThrowStmt(stmt,context){return new ThrowStmt(stmt.error.visitExpression(this,context),stmt.sourceSpan);}/**
     * @param {?} stmt
     * @param {?} context
     * @return {?}
     */},{key:'visitCommentStmt',value:function visitCommentStmt(stmt,context){return stmt;}/**
     * @param {?} stmts
     * @param {?} context
     * @return {?}
     */},{key:'visitAllStatements',value:function visitAllStatements(stmts,context){var _this156=this;return stmts.map(function(stmt){return stmt.visitStatement(_this156,context);});}}]);return ExpressionTransformer;}();var RecursiveExpressionVisitor=function(){function RecursiveExpressionVisitor(){_classCallCheck(this,RecursiveExpressionVisitor);}_createClass(RecursiveExpressionVisitor,[{key:'visitReadVarExpr',/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */value:function visitReadVarExpr(ast,context){return ast;}/**
     * @param {?} expr
     * @param {?} context
     * @return {?}
     */},{key:'visitWriteVarExpr',value:function visitWriteVarExpr(expr,context){expr.value.visitExpression(this,context);return expr;}/**
     * @param {?} expr
     * @param {?} context
     * @return {?}
     */},{key:'visitWriteKeyExpr',value:function visitWriteKeyExpr(expr,context){expr.receiver.visitExpression(this,context);expr.index.visitExpression(this,context);expr.value.visitExpression(this,context);return expr;}/**
     * @param {?} expr
     * @param {?} context
     * @return {?}
     */},{key:'visitWritePropExpr',value:function visitWritePropExpr(expr,context){expr.receiver.visitExpression(this,context);expr.value.visitExpression(this,context);return expr;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitInvokeMethodExpr',value:function visitInvokeMethodExpr(ast,context){ast.receiver.visitExpression(this,context);this.visitAllExpressions(ast.args,context);return ast;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitInvokeFunctionExpr',value:function visitInvokeFunctionExpr(ast,context){ast.fn.visitExpression(this,context);this.visitAllExpressions(ast.args,context);return ast;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitInstantiateExpr',value:function visitInstantiateExpr(ast,context){ast.classExpr.visitExpression(this,context);this.visitAllExpressions(ast.args,context);return ast;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitLiteralExpr',value:function visitLiteralExpr(ast,context){return ast;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitExternalExpr',value:function visitExternalExpr(ast,context){return ast;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitConditionalExpr',value:function visitConditionalExpr(ast,context){ast.condition.visitExpression(this,context);ast.trueCase.visitExpression(this,context);ast.falseCase.visitExpression(this,context);return ast;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitNotExpr',value:function visitNotExpr(ast,context){ast.condition.visitExpression(this,context);return ast;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitCastExpr',value:function visitCastExpr(ast,context){ast.value.visitExpression(this,context);return ast;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitFunctionExpr',value:function visitFunctionExpr(ast,context){return ast;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitBinaryOperatorExpr',value:function visitBinaryOperatorExpr(ast,context){ast.lhs.visitExpression(this,context);ast.rhs.visitExpression(this,context);return ast;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitReadPropExpr',value:function visitReadPropExpr(ast,context){ast.receiver.visitExpression(this,context);return ast;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitReadKeyExpr',value:function visitReadKeyExpr(ast,context){ast.receiver.visitExpression(this,context);ast.index.visitExpression(this,context);return ast;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitLiteralArrayExpr',value:function visitLiteralArrayExpr(ast,context){this.visitAllExpressions(ast.entries,context);return ast;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitLiteralMapExpr',value:function visitLiteralMapExpr(ast,context){var _this157=this;ast.entries.forEach(function(entry){return entry.value.visitExpression(_this157,context);});return ast;}/**
     * @param {?} exprs
     * @param {?} context
     * @return {?}
     */},{key:'visitAllExpressions',value:function visitAllExpressions(exprs,context){var _this158=this;exprs.forEach(function(expr){return expr.visitExpression(_this158,context);});}/**
     * @param {?} stmt
     * @param {?} context
     * @return {?}
     */},{key:'visitDeclareVarStmt',value:function visitDeclareVarStmt(stmt,context){stmt.value.visitExpression(this,context);return stmt;}/**
     * @param {?} stmt
     * @param {?} context
     * @return {?}
     */},{key:'visitDeclareFunctionStmt',value:function visitDeclareFunctionStmt(stmt,context){// Don't descend into nested functions
return stmt;}/**
     * @param {?} stmt
     * @param {?} context
     * @return {?}
     */},{key:'visitExpressionStmt',value:function visitExpressionStmt(stmt,context){stmt.expr.visitExpression(this,context);return stmt;}/**
     * @param {?} stmt
     * @param {?} context
     * @return {?}
     */},{key:'visitReturnStmt',value:function visitReturnStmt(stmt,context){stmt.value.visitExpression(this,context);return stmt;}/**
     * @param {?} stmt
     * @param {?} context
     * @return {?}
     */},{key:'visitDeclareClassStmt',value:function visitDeclareClassStmt(stmt,context){// Don't descend into nested functions
return stmt;}/**
     * @param {?} stmt
     * @param {?} context
     * @return {?}
     */},{key:'visitIfStmt',value:function visitIfStmt(stmt,context){stmt.condition.visitExpression(this,context);this.visitAllStatements(stmt.trueCase,context);this.visitAllStatements(stmt.falseCase,context);return stmt;}/**
     * @param {?} stmt
     * @param {?} context
     * @return {?}
     */},{key:'visitTryCatchStmt',value:function visitTryCatchStmt(stmt,context){this.visitAllStatements(stmt.bodyStmts,context);this.visitAllStatements(stmt.catchStmts,context);return stmt;}/**
     * @param {?} stmt
     * @param {?} context
     * @return {?}
     */},{key:'visitThrowStmt',value:function visitThrowStmt(stmt,context){stmt.error.visitExpression(this,context);return stmt;}/**
     * @param {?} stmt
     * @param {?} context
     * @return {?}
     */},{key:'visitCommentStmt',value:function visitCommentStmt(stmt,context){return stmt;}/**
     * @param {?} stmts
     * @param {?} context
     * @return {?}
     */},{key:'visitAllStatements',value:function visitAllStatements(stmts,context){var _this159=this;stmts.forEach(function(stmt){return stmt.visitStatement(_this159,context);});}}]);return RecursiveExpressionVisitor;}();/**
 * @param {?} varName
 * @param {?} newValue
 * @param {?} expression
 * @return {?}
 */function replaceVarInExpression(varName,newValue,expression){var/** @type {?} */transformer=new _ReplaceVariableTransformer(varName,newValue);return expression.visitExpression(transformer,null);}var _ReplaceVariableTransformer=function(_ExpressionTransforme){_inherits(_ReplaceVariableTransformer,_ExpressionTransforme);/**
     * @param {?} _varName
     * @param {?} _newValue
     */function _ReplaceVariableTransformer(_varName,_newValue){_classCallCheck(this,_ReplaceVariableTransformer);var _this160=_possibleConstructorReturn(this,(_ReplaceVariableTransformer.__proto__||Object.getPrototypeOf(_ReplaceVariableTransformer)).call(this));_this160._varName=_varName;_this160._newValue=_newValue;return _this160;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */_createClass(_ReplaceVariableTransformer,[{key:'visitReadVarExpr',value:function visitReadVarExpr(ast,context){return ast.name==this._varName?this._newValue:ast;}}]);return _ReplaceVariableTransformer;}(ExpressionTransformer);/**
 * @param {?} stmts
 * @return {?}
 */function findReadVarNames(stmts){var/** @type {?} */finder=new _VariableFinder();finder.visitAllStatements(stmts,null);return finder.varNames;}var _VariableFinder=function(_RecursiveExpressionV){_inherits(_VariableFinder,_RecursiveExpressionV);function _VariableFinder(){_classCallCheck(this,_VariableFinder);var _this161=_possibleConstructorReturn(this,(_VariableFinder.__proto__||Object.getPrototypeOf(_VariableFinder)).apply(this,arguments));_this161.varNames=new Set();return _this161;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */_createClass(_VariableFinder,[{key:'visitReadVarExpr',value:function visitReadVarExpr(ast,context){this.varNames.add(ast.name);return null;}}]);return _VariableFinder;}(RecursiveExpressionVisitor);/**
 * @param {?} name
 * @param {?=} type
 * @param {?=} sourceSpan
 * @return {?}
 */function variable(name){var type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var sourceSpan=arguments[2];return new ReadVarExpr(name,type,sourceSpan);}/**
 * @param {?} id
 * @param {?=} typeParams
 * @param {?=} sourceSpan
 * @return {?}
 */function importExpr(id){var typeParams=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var sourceSpan=arguments[2];return new ExternalExpr(id,null,typeParams,sourceSpan);}/**
 * @param {?} id
 * @param {?=} typeParams
 * @param {?=} typeModifiers
 * @return {?}
 */function importType(id){var typeParams=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var typeModifiers=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;return isPresent(id)?expressionType(importExpr(id,typeParams),typeModifiers):null;}/**
 * @param {?} expr
 * @param {?=} typeModifiers
 * @return {?}
 */function expressionType(expr){var typeModifiers=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return isPresent(expr)?new ExpressionType(expr,typeModifiers):null;}/**
 * @param {?} values
 * @param {?=} type
 * @param {?=} sourceSpan
 * @return {?}
 */function literalArr(values){var type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var sourceSpan=arguments[2];return new LiteralArrayExpr(values,type,sourceSpan);}/**
 * @param {?} values
 * @param {?=} type
 * @param {?=} quoted
 * @return {?}
 */function literalMap(values){var type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var quoted=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;return new LiteralMapExpr(values.map(function(entry){return new LiteralMapEntry(entry[0],entry[1],quoted);}),type);}/**
 * @param {?} expr
 * @param {?=} sourceSpan
 * @return {?}
 */function not(expr,sourceSpan){return new NotExpr(expr,sourceSpan);}/**
 * @param {?} params
 * @param {?} body
 * @param {?=} type
 * @param {?=} sourceSpan
 * @return {?}
 */function fn(params,body){var type=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var sourceSpan=arguments[3];return new FunctionExpr(params,body,type,sourceSpan);}/**
 * @param {?} value
 * @param {?=} type
 * @param {?=} sourceSpan
 * @return {?}
 */function literal(value){var type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var sourceSpan=arguments[2];return new LiteralExpr(value,type,sourceSpan);}var CheckBindingField=/**
     * @param {?} expression
     * @param {?} bindingId
     */function CheckBindingField(expression,bindingId){_classCallCheck(this,CheckBindingField);this.expression=expression;this.bindingId=bindingId;};/**
 * @param {?} builder
 * @return {?}
 */function createCheckBindingField(builder){var/** @type {?} */bindingId=''+builder.fields.length;var/** @type {?} */fieldExpr=createBindFieldExpr(bindingId);// private is fine here as no child view will reference the cached value...
builder.fields.push(new ClassField(fieldExpr.name,null,[StmtModifier.Private]));builder.ctorStmts.push(THIS_EXPR.prop(fieldExpr.name).set(literal(undefined)).toStmt());return new CheckBindingField(fieldExpr,bindingId);}/**
 * @param {?} bindingId
 * @return {?}
 */function createBindFieldExpr(bindingId){return THIS_EXPR.prop('_expr_'+bindingId);}/**
 * @param {?} view
 * @return {?}
 */function isFirstViewCheck(view){return not(view.prop('numberOfChecks'));}/**
 * @param {?} token
 * @return {?}
 */function createDiTokenExpression(token){if(isPresent(token.value)){return literal(token.value);}else{return importExpr(token.identifier);}}/**
 * @param {?} values
 * @return {?}
 */function createInlineArray(values){if(values.length===0){return importExpr(createIdentifier(Identifiers.EMPTY_INLINE_ARRAY));}var/** @type {?} */log2=Math.log(values.length)/Math.log(2);var/** @type {?} */index=Math.ceil(log2);var/** @type {?} */identifierSpec=index<Identifiers.inlineArrays.length?Identifiers.inlineArrays[index]:Identifiers.InlineArrayDynamic;var/** @type {?} */identifier=createIdentifier(identifierSpec);return importExpr(identifier).instantiate([/** @type {?} */literal(values.length)].concat(values));}/**
 * @param {?} fn
 * @param {?} argCount
 * @param {?} pureProxyProp
 * @param {?} builder
 * @return {?}
 */function createPureProxy(fn,argCount,pureProxyProp,builder){builder.fields.push(new ClassField(pureProxyProp.name,null));var/** @type {?} */pureProxyId=argCount<Identifiers.pureProxies.length?Identifiers.pureProxies[argCount]:null;if(!pureProxyId){throw new Error('Unsupported number of argument for pure functions: '+argCount);}builder.ctorStmts.push(THIS_EXPR.prop(pureProxyProp.name).set(importExpr(createIdentifier(pureProxyId)).callFn([fn])).toStmt());}/**
 * @param {?} enumType
 * @param {?} enumValue
 * @return {?}
 */function createEnumExpression(enumType,enumValue){var/** @type {?} */enumName=Object.keys(enumType.runtime).find(function(propName){return enumType.runtime[propName]===enumValue;});if(!enumName){throw new Error('Unknown enum value '+enumValue+' in '+enumType.name);}return importExpr(createEnumIdentifier(enumType,enumName));}var/** @type {?} */VAL_UNWRAPPER_VAR=variable('valUnwrapper');var EventHandlerVars=function EventHandlerVars(){_classCallCheck(this,EventHandlerVars);};EventHandlerVars.event=variable('$event');var ConvertActionBindingResult=/**
     * @param {?} stmts
     * @param {?} allowDefault
     */function ConvertActionBindingResult(stmts,allowDefault){_classCallCheck(this,ConvertActionBindingResult);this.stmts=stmts;this.allowDefault=allowDefault;};/**
 * Converts the given expression AST into an executable output AST, assuming the expression is
 * used in an action binding (e.g. an event handler).
 * @param {?} localResolver
 * @param {?} implicitReceiver
 * @param {?} action
 * @param {?} bindingId
 * @return {?}
 */function convertActionBinding(localResolver,implicitReceiver,action,bindingId){if(!localResolver){localResolver=new DefaultLocalResolver();}var/** @type {?} */actionWithoutBuiltins=convertPropertyBindingBuiltins({createLiteralArrayConverter:function createLiteralArrayConverter(argCount){// Note: no caching for literal arrays in actions.
return function(args){return literalArr(args);};},createLiteralMapConverter:function createLiteralMapConverter(keys){// Note: no caching for literal maps in actions.
return function(args){return literalMap(/** @type {?} */keys.map(function(key,i){return[key,args[i]];}));};},createPipeConverter:function createPipeConverter(name){throw new Error('Illegal State: Actions are not allowed to contain pipes. Pipe: '+name);}},action);var/** @type {?} */visitor=new _AstToIrVisitor(localResolver,implicitReceiver,bindingId);var/** @type {?} */actionStmts=[];flattenStatements(actionWithoutBuiltins.visit(visitor,_Mode.Statement),actionStmts);prependTemporaryDecls(visitor.temporaryCount,bindingId,actionStmts);var/** @type {?} */lastIndex=actionStmts.length-1;var/** @type {?} */preventDefaultVar=null;if(lastIndex>=0){var/** @type {?} */lastStatement=actionStmts[lastIndex];var/** @type {?} */returnExpr=convertStmtIntoExpression(lastStatement);if(returnExpr){// Note: We need to cast the result of the method call to dynamic,
// as it might be a void method!
preventDefaultVar=createPreventDefaultVar(bindingId);actionStmts[lastIndex]=preventDefaultVar.set(returnExpr.cast(DYNAMIC_TYPE).notIdentical(literal(false))).toDeclStmt(null,[StmtModifier.Final]);}}return new ConvertActionBindingResult(actionStmts,preventDefaultVar);}/**
 * @param {?} converterFactory
 * @param {?} ast
 * @return {?}
 */function convertPropertyBindingBuiltins(converterFactory,ast){return convertBuiltins(converterFactory,ast);}var ConvertPropertyBindingResult=/**
     * @param {?} stmts
     * @param {?} currValExpr
     */function ConvertPropertyBindingResult(stmts,currValExpr){_classCallCheck(this,ConvertPropertyBindingResult);this.stmts=stmts;this.currValExpr=currValExpr;};/**
 * Converts the given expression AST into an executable output AST, assuming the expression
 * is used in property binding. The expression has to be preprocessed via
 * `convertPropertyBindingBuiltins`.
 * @param {?} localResolver
 * @param {?} implicitReceiver
 * @param {?} expressionWithoutBuiltins
 * @param {?} bindingId
 * @return {?}
 */function convertPropertyBinding(localResolver,implicitReceiver,expressionWithoutBuiltins,bindingId){if(!localResolver){localResolver=new DefaultLocalResolver();}var/** @type {?} */currValExpr=createCurrValueExpr(bindingId);var/** @type {?} */stmts=[];var/** @type {?} */visitor=new _AstToIrVisitor(localResolver,implicitReceiver,bindingId);var/** @type {?} */outputExpr=expressionWithoutBuiltins.visit(visitor,_Mode.Expression);if(visitor.temporaryCount){for(var/** @type {?} */i=0;i<visitor.temporaryCount;i++){stmts.push(temporaryDeclaration(bindingId,i));}}stmts.push(currValExpr.set(outputExpr).toDeclStmt(null,[StmtModifier.Final]));return new ConvertPropertyBindingResult(stmts,currValExpr);}var LegacyConvertPropertyBindingResult=/**
     * @param {?} stmts
     * @param {?} currValExpr
     * @param {?} forceUpdate
     */function LegacyConvertPropertyBindingResult(stmts,currValExpr,forceUpdate){_classCallCheck(this,LegacyConvertPropertyBindingResult);this.stmts=stmts;this.currValExpr=currValExpr;this.forceUpdate=forceUpdate;};/**
 * Converts the given expression AST into an executable output AST, assuming the expression is
 * used in a property binding.
 * @param {?} builder
 * @param {?} nameResolver
 * @param {?} implicitReceiver
 * @param {?} expression
 * @param {?} bindingId
 * @return {?}
 */function legacyConvertPropertyBinding(builder,nameResolver,implicitReceiver,expression,bindingId){if(!nameResolver){nameResolver=new LegacyDefaultNameResolver();}var/** @type {?} */needsValueUnwrapper=false;var/** @type {?} */expressionWithoutBuiltins=convertBuiltins({createLiteralArrayConverter:function createLiteralArrayConverter(argCount){return function(args){return legacyCreateCachedLiteralArray(builder,args);};},createLiteralMapConverter:function createLiteralMapConverter(keys){return function(args){return legacyCreateCachedLiteralMap(builder,/** @type {?} */keys.map(function(key,i){return[key,args[i]];}));};},createPipeConverter:function createPipeConverter(name){needsValueUnwrapper=true;return function(args){return VAL_UNWRAPPER_VAR.callMethod('unwrap',[nameResolver.callPipe(name,args[0],args.slice(1))]);};}},expression);var _convertPropertyBindi=convertPropertyBinding(nameResolver,implicitReceiver,expressionWithoutBuiltins,bindingId),stmts=_convertPropertyBindi.stmts,currValExpr=_convertPropertyBindi.currValExpr;var/** @type {?} */forceUpdate=null;if(needsValueUnwrapper){var/** @type {?} */initValueUnwrapperStmt=VAL_UNWRAPPER_VAR.callMethod('reset',[]).toStmt();stmts.unshift(initValueUnwrapperStmt);forceUpdate=VAL_UNWRAPPER_VAR.prop('hasWrappedValue');}return new LegacyConvertPropertyBindingResult(stmts,currValExpr,forceUpdate);}/**
 * Creates variables that are shared by multiple calls to `convertActionBinding` /
 * `convertPropertyBinding`
 * @param {?} stmts
 * @return {?}
 */function legacyCreateSharedBindingVariablesIfNeeded(stmts){var/** @type {?} */unwrapperStmts=[];var/** @type {?} */readVars=findReadVarNames(stmts);if(readVars.has(VAL_UNWRAPPER_VAR.name)){unwrapperStmts.push(VAL_UNWRAPPER_VAR.set(importExpr(createIdentifier(Identifiers.ValueUnwrapper)).instantiate([])).toDeclStmt(null,[StmtModifier.Final]));}return unwrapperStmts;}/**
 * @param {?} converterFactory
 * @param {?} ast
 * @return {?}
 */function convertBuiltins(converterFactory,ast){var/** @type {?} */visitor=new _BuiltinAstConverter(converterFactory);return ast.visit(visitor);}/**
 * @param {?} bindingId
 * @param {?} temporaryNumber
 * @return {?}
 */function temporaryName(bindingId,temporaryNumber){return'tmp_'+bindingId+'_'+temporaryNumber;}/**
 * @param {?} bindingId
 * @param {?} temporaryNumber
 * @return {?}
 */function temporaryDeclaration(bindingId,temporaryNumber){return new DeclareVarStmt(temporaryName(bindingId,temporaryNumber),NULL_EXPR);}/**
 * @param {?} temporaryCount
 * @param {?} bindingId
 * @param {?} statements
 * @return {?}
 */function prependTemporaryDecls(temporaryCount,bindingId,statements){for(var/** @type {?} */i=temporaryCount-1;i>=0;i--){statements.unshift(temporaryDeclaration(bindingId,i));}}var _Mode={};_Mode.Statement=0;_Mode.Expression=1;_Mode[_Mode.Statement]="Statement";_Mode[_Mode.Expression]="Expression";/**
 * @param {?} mode
 * @param {?} ast
 * @return {?}
 */function ensureStatementMode(mode,ast){if(mode!==_Mode.Statement){throw new Error('Expected a statement, but saw '+ast);}}/**
 * @param {?} mode
 * @param {?} ast
 * @return {?}
 */function ensureExpressionMode(mode,ast){if(mode!==_Mode.Expression){throw new Error('Expected an expression, but saw '+ast);}}/**
 * @param {?} mode
 * @param {?} expr
 * @return {?}
 */function convertToStatementIfNeeded(mode,expr){if(mode===_Mode.Statement){return expr.toStmt();}else{return expr;}}var _BuiltinAstConverter=function(_AstTransformer){_inherits(_BuiltinAstConverter,_AstTransformer);/**
     * @param {?} _converterFactory
     */function _BuiltinAstConverter(_converterFactory){_classCallCheck(this,_BuiltinAstConverter);var _this162=_possibleConstructorReturn(this,(_BuiltinAstConverter.__proto__||Object.getPrototypeOf(_BuiltinAstConverter)).call(this));_this162._converterFactory=_converterFactory;return _this162;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */_createClass(_BuiltinAstConverter,[{key:'visitPipe',value:function visitPipe(ast,context){var _this163=this;var/** @type {?} */args=[ast.exp].concat(_toConsumableArray(ast.args)).map(function(ast){return ast.visit(_this163,context);});return new BuiltinFunctionCall(ast.span,args,this._converterFactory.createPipeConverter(ast.name,args.length));}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitLiteralArray',value:function visitLiteralArray(ast,context){var _this164=this;var/** @type {?} */args=ast.expressions.map(function(ast){return ast.visit(_this164,context);});return new BuiltinFunctionCall(ast.span,args,this._converterFactory.createLiteralArrayConverter(ast.expressions.length));}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitLiteralMap',value:function visitLiteralMap(ast,context){var _this165=this;var/** @type {?} */args=ast.values.map(function(ast){return ast.visit(_this165,context);});return new BuiltinFunctionCall(ast.span,args,this._converterFactory.createLiteralMapConverter(ast.keys));}}]);return _BuiltinAstConverter;}(AstTransformer);var _AstToIrVisitor=function(){/**
     * @param {?} _localResolver
     * @param {?} _implicitReceiver
     * @param {?} bindingId
     */function _AstToIrVisitor(_localResolver,_implicitReceiver,bindingId){_classCallCheck(this,_AstToIrVisitor);this._localResolver=_localResolver;this._implicitReceiver=_implicitReceiver;this.bindingId=bindingId;this._nodeMap=new Map();this._resultMap=new Map();this._currentTemporary=0;this.temporaryCount=0;}/**
     * @param {?} ast
     * @param {?} mode
     * @return {?}
     */_createClass(_AstToIrVisitor,[{key:'visitBinary',value:function visitBinary(ast,mode){var/** @type {?} */op=void 0;switch(ast.operation){case'+':op=BinaryOperator.Plus;break;case'-':op=BinaryOperator.Minus;break;case'*':op=BinaryOperator.Multiply;break;case'/':op=BinaryOperator.Divide;break;case'%':op=BinaryOperator.Modulo;break;case'&&':op=BinaryOperator.And;break;case'||':op=BinaryOperator.Or;break;case'==':op=BinaryOperator.Equals;break;case'!=':op=BinaryOperator.NotEquals;break;case'===':op=BinaryOperator.Identical;break;case'!==':op=BinaryOperator.NotIdentical;break;case'<':op=BinaryOperator.Lower;break;case'>':op=BinaryOperator.Bigger;break;case'<=':op=BinaryOperator.LowerEquals;break;case'>=':op=BinaryOperator.BiggerEquals;break;default:throw new Error('Unsupported operation '+ast.operation);}return convertToStatementIfNeeded(mode,new BinaryOperatorExpr(op,this.visit(ast.left,_Mode.Expression),this.visit(ast.right,_Mode.Expression)));}/**
     * @param {?} ast
     * @param {?} mode
     * @return {?}
     */},{key:'visitChain',value:function visitChain(ast,mode){ensureStatementMode(mode,ast);return this.visitAll(ast.expressions,mode);}/**
     * @param {?} ast
     * @param {?} mode
     * @return {?}
     */},{key:'visitConditional',value:function visitConditional(ast,mode){var/** @type {?} */value=this.visit(ast.condition,_Mode.Expression);return convertToStatementIfNeeded(mode,value.conditional(this.visit(ast.trueExp,_Mode.Expression),this.visit(ast.falseExp,_Mode.Expression)));}/**
     * @param {?} ast
     * @param {?} mode
     * @return {?}
     */},{key:'visitPipe',value:function visitPipe(ast,mode){throw new Error('Illegal state: Pipes should have been converted into functions. Pipe: '+ast.name);}/**
     * @param {?} ast
     * @param {?} mode
     * @return {?}
     */},{key:'visitFunctionCall',value:function visitFunctionCall(ast,mode){var/** @type {?} */convertedArgs=this.visitAll(ast.args,_Mode.Expression);var/** @type {?} */fnResult=void 0;if(ast instanceof BuiltinFunctionCall){fnResult=ast.converter(convertedArgs);}else{fnResult=this.visit(ast.target,_Mode.Expression).callFn(convertedArgs);}return convertToStatementIfNeeded(mode,fnResult);}/**
     * @param {?} ast
     * @param {?} mode
     * @return {?}
     */},{key:'visitImplicitReceiver',value:function visitImplicitReceiver(ast,mode){ensureExpressionMode(mode,ast);return this._implicitReceiver;}/**
     * @param {?} ast
     * @param {?} mode
     * @return {?}
     */},{key:'visitInterpolation',value:function visitInterpolation(ast,mode){ensureExpressionMode(mode,ast);var/** @type {?} */args=[literal(ast.expressions.length)];for(var/** @type {?} */i=0;i<ast.strings.length-1;i++){args.push(literal(ast.strings[i]));args.push(this.visit(ast.expressions[i],_Mode.Expression));}args.push(literal(ast.strings[ast.strings.length-1]));return ast.expressions.length<=9?importExpr(createIdentifier(Identifiers.inlineInterpolate)).callFn(args):importExpr(createIdentifier(Identifiers.interpolate)).callFn([args[0],literalArr(args.slice(1))]);}/**
     * @param {?} ast
     * @param {?} mode
     * @return {?}
     */},{key:'visitKeyedRead',value:function visitKeyedRead(ast,mode){var/** @type {?} */leftMostSafe=this.leftMostSafeNode(ast);if(leftMostSafe){return this.convertSafeAccess(ast,leftMostSafe,mode);}else{return convertToStatementIfNeeded(mode,this.visit(ast.obj,_Mode.Expression).key(this.visit(ast.key,_Mode.Expression)));}}/**
     * @param {?} ast
     * @param {?} mode
     * @return {?}
     */},{key:'visitKeyedWrite',value:function visitKeyedWrite(ast,mode){var/** @type {?} */obj=this.visit(ast.obj,_Mode.Expression);var/** @type {?} */key=this.visit(ast.key,_Mode.Expression);var/** @type {?} */value=this.visit(ast.value,_Mode.Expression);return convertToStatementIfNeeded(mode,obj.key(key).set(value));}/**
     * @param {?} ast
     * @param {?} mode
     * @return {?}
     */},{key:'visitLiteralArray',value:function visitLiteralArray(ast,mode){throw new Error('Illegal State: literal arrays should have been converted into functions');}/**
     * @param {?} ast
     * @param {?} mode
     * @return {?}
     */},{key:'visitLiteralMap',value:function visitLiteralMap(ast,mode){throw new Error('Illegal State: literal maps should have been converted into functions');}/**
     * @param {?} ast
     * @param {?} mode
     * @return {?}
     */},{key:'visitLiteralPrimitive',value:function visitLiteralPrimitive(ast,mode){return convertToStatementIfNeeded(mode,literal(ast.value));}/**
     * @param {?} name
     * @return {?}
     */},{key:'_getLocal',value:function _getLocal(name){return this._localResolver.getLocal(name);}/**
     * @param {?} ast
     * @param {?} mode
     * @return {?}
     */},{key:'visitMethodCall',value:function visitMethodCall(ast,mode){var/** @type {?} */leftMostSafe=this.leftMostSafeNode(ast);if(leftMostSafe){return this.convertSafeAccess(ast,leftMostSafe,mode);}else{var/** @type {?} */args=this.visitAll(ast.args,_Mode.Expression);var/** @type {?} */result=null;var/** @type {?} */receiver=this.visit(ast.receiver,_Mode.Expression);if(receiver===this._implicitReceiver){var/** @type {?} */varExpr=this._getLocal(ast.name);if(varExpr){result=varExpr.callFn(args);}}if(isBlank(result)){result=receiver.callMethod(ast.name,args);}return convertToStatementIfNeeded(mode,result);}}/**
     * @param {?} ast
     * @param {?} mode
     * @return {?}
     */},{key:'visitPrefixNot',value:function visitPrefixNot(ast,mode){return convertToStatementIfNeeded(mode,not(this.visit(ast.expression,_Mode.Expression)));}/**
     * @param {?} ast
     * @param {?} mode
     * @return {?}
     */},{key:'visitPropertyRead',value:function visitPropertyRead(ast,mode){var/** @type {?} */leftMostSafe=this.leftMostSafeNode(ast);if(leftMostSafe){return this.convertSafeAccess(ast,leftMostSafe,mode);}else{var/** @type {?} */result=null;var/** @type {?} */receiver=this.visit(ast.receiver,_Mode.Expression);if(receiver===this._implicitReceiver){result=this._getLocal(ast.name);}if(isBlank(result)){result=receiver.prop(ast.name);}return convertToStatementIfNeeded(mode,result);}}/**
     * @param {?} ast
     * @param {?} mode
     * @return {?}
     */},{key:'visitPropertyWrite',value:function visitPropertyWrite(ast,mode){var/** @type {?} */receiver=this.visit(ast.receiver,_Mode.Expression);if(receiver===this._implicitReceiver){var/** @type {?} */varExpr=this._getLocal(ast.name);if(varExpr){throw new Error('Cannot assign to a reference or variable!');}}return convertToStatementIfNeeded(mode,receiver.prop(ast.name).set(this.visit(ast.value,_Mode.Expression)));}/**
     * @param {?} ast
     * @param {?} mode
     * @return {?}
     */},{key:'visitSafePropertyRead',value:function visitSafePropertyRead(ast,mode){return this.convertSafeAccess(ast,this.leftMostSafeNode(ast),mode);}/**
     * @param {?} ast
     * @param {?} mode
     * @return {?}
     */},{key:'visitSafeMethodCall',value:function visitSafeMethodCall(ast,mode){return this.convertSafeAccess(ast,this.leftMostSafeNode(ast),mode);}/**
     * @param {?} asts
     * @param {?} mode
     * @return {?}
     */},{key:'visitAll',value:function visitAll(asts,mode){var _this166=this;return asts.map(function(ast){return _this166.visit(ast,mode);});}/**
     * @param {?} ast
     * @param {?} mode
     * @return {?}
     */},{key:'visitQuote',value:function visitQuote(ast,mode){throw new Error('Quotes are not supported for evaluation!');}/**
     * @param {?} ast
     * @param {?} mode
     * @return {?}
     */},{key:'visit',value:function visit(ast,mode){var/** @type {?} */result=this._resultMap.get(ast);if(result)return result;return(this._nodeMap.get(ast)||ast).visit(this,mode);}/**
     * @param {?} ast
     * @param {?} leftMostSafe
     * @param {?} mode
     * @return {?}
     */},{key:'convertSafeAccess',value:function convertSafeAccess(ast,leftMostSafe,mode){// If the expression contains a safe access node on the left it needs to be converted to
// an expression that guards the access to the member by checking the receiver for blank. As
// execution proceeds from left to right, the left most part of the expression must be guarded
// first but, because member access is left associative, the right side of the expression is at
// the top of the AST. The desired result requires lifting a copy of the the left part of the
// expression up to test it for blank before generating the unguarded version.
// Consider, for example the following expression: a?.b.c?.d.e
// This results in the ast:
//         .
//        / \
//       ?.   e
//      /  \
//     .    d
//    / \
//   ?.  c
//  /  \
// a    b
// The following tree should be generated:
//
//        /---- ? ----\
//       /      |      \
//     a   /--- ? ---\  null
//        /     |     \
//       .      .     null
//      / \    / \
//     .  c   .   e
//    / \    / \
//   a   b  ,   d
//         / \
//        .   c
//       / \
//      a   b
//
// Notice that the first guard condition is the left hand of the left most safe access node
// which comes in as leftMostSafe to this routine.
var/** @type {?} */guardedExpression=this.visit(leftMostSafe.receiver,_Mode.Expression);var/** @type {?} */temporary=void 0;if(this.needsTemporary(leftMostSafe.receiver)){// If the expression has method calls or pipes then we need to save the result into a
// temporary variable to avoid calling stateful or impure code more than once.
temporary=this.allocateTemporary();// Preserve the result in the temporary variable
guardedExpression=temporary.set(guardedExpression);// Ensure all further references to the guarded expression refer to the temporary instead.
this._resultMap.set(leftMostSafe.receiver,temporary);}var/** @type {?} */condition=guardedExpression.isBlank();// Convert the ast to an unguarded access to the receiver's member. The map will substitute
// leftMostNode with its unguarded version in the call to `this.visit()`.
if(leftMostSafe instanceof SafeMethodCall){this._nodeMap.set(leftMostSafe,new MethodCall(leftMostSafe.span,leftMostSafe.receiver,leftMostSafe.name,leftMostSafe.args));}else{this._nodeMap.set(leftMostSafe,new PropertyRead(leftMostSafe.span,leftMostSafe.receiver,leftMostSafe.name));}// Recursively convert the node now without the guarded member access.
var/** @type {?} */access=this.visit(ast,_Mode.Expression);// Remove the mapping. This is not strictly required as the converter only traverses each node
// once but is safer if the conversion is changed to traverse the nodes more than once.
this._nodeMap.delete(leftMostSafe);// If we allcoated a temporary, release it.
if(temporary){this.releaseTemporary(temporary);}// Produce the conditional
return convertToStatementIfNeeded(mode,condition.conditional(literal(null),access));}/**
     * @param {?} ast
     * @return {?}
     */},{key:'leftMostSafeNode',value:function leftMostSafeNode(ast){var _this167=this;var/** @type {?} */visit=function visit(visitor,ast){return(_this167._nodeMap.get(ast)||ast).visit(visitor);};return ast.visit({/**
             * @param {?} ast
             * @return {?}
             */visitBinary:function visitBinary(ast){return null;},/**
             * @param {?} ast
             * @return {?}
             */visitChain:function visitChain(ast){return null;},/**
             * @param {?} ast
             * @return {?}
             */visitConditional:function visitConditional(ast){return null;},/**
             * @param {?} ast
             * @return {?}
             */visitFunctionCall:function visitFunctionCall(ast){return null;},/**
             * @param {?} ast
             * @return {?}
             */visitImplicitReceiver:function visitImplicitReceiver(ast){return null;},/**
             * @param {?} ast
             * @return {?}
             */visitInterpolation:function visitInterpolation(ast){return null;},/**
             * @param {?} ast
             * @return {?}
             */visitKeyedRead:function visitKeyedRead(ast){return visit(this,ast.obj);},/**
             * @param {?} ast
             * @return {?}
             */visitKeyedWrite:function visitKeyedWrite(ast){return null;},/**
             * @param {?} ast
             * @return {?}
             */visitLiteralArray:function visitLiteralArray(ast){return null;},/**
             * @param {?} ast
             * @return {?}
             */visitLiteralMap:function visitLiteralMap(ast){return null;},/**
             * @param {?} ast
             * @return {?}
             */visitLiteralPrimitive:function visitLiteralPrimitive(ast){return null;},/**
             * @param {?} ast
             * @return {?}
             */visitMethodCall:function visitMethodCall(ast){return visit(this,ast.receiver);},/**
             * @param {?} ast
             * @return {?}
             */visitPipe:function visitPipe(ast){return null;},/**
             * @param {?} ast
             * @return {?}
             */visitPrefixNot:function visitPrefixNot(ast){return null;},/**
             * @param {?} ast
             * @return {?}
             */visitPropertyRead:function visitPropertyRead(ast){return visit(this,ast.receiver);},/**
             * @param {?} ast
             * @return {?}
             */visitPropertyWrite:function visitPropertyWrite(ast){return null;},/**
             * @param {?} ast
             * @return {?}
             */visitQuote:function visitQuote(ast){return null;},/**
             * @param {?} ast
             * @return {?}
             */visitSafeMethodCall:function visitSafeMethodCall(ast){return visit(this,ast.receiver)||ast;},/**
             * @param {?} ast
             * @return {?}
             */visitSafePropertyRead:function visitSafePropertyRead(ast){return visit(this,ast.receiver)||ast;}});}/**
     * @param {?} ast
     * @return {?}
     */},{key:'needsTemporary',value:function needsTemporary(ast){var _this168=this;var/** @type {?} */visit=function visit(visitor,ast){return ast&&(_this168._nodeMap.get(ast)||ast).visit(visitor);};var/** @type {?} */visitSome=function visitSome(visitor,ast){return ast.some(function(ast){return visit(visitor,ast);});};return ast.visit({/**
             * @param {?} ast
             * @return {?}
             */visitBinary:function visitBinary(ast){return visit(this,ast.left)||visit(this,ast.right);},/**
             * @param {?} ast
             * @return {?}
             */visitChain:function visitChain(ast){return false;},/**
             * @param {?} ast
             * @return {?}
             */visitConditional:function visitConditional(ast){return visit(this,ast.condition)||visit(this,ast.trueExp)||visit(this,ast.falseExp);},/**
             * @param {?} ast
             * @return {?}
             */visitFunctionCall:function visitFunctionCall(ast){return true;},/**
             * @param {?} ast
             * @return {?}
             */visitImplicitReceiver:function visitImplicitReceiver(ast){return false;},/**
             * @param {?} ast
             * @return {?}
             */visitInterpolation:function visitInterpolation(ast){return visitSome(this,ast.expressions);},/**
             * @param {?} ast
             * @return {?}
             */visitKeyedRead:function visitKeyedRead(ast){return false;},/**
             * @param {?} ast
             * @return {?}
             */visitKeyedWrite:function visitKeyedWrite(ast){return false;},/**
             * @param {?} ast
             * @return {?}
             */visitLiteralArray:function visitLiteralArray(ast){return true;},/**
             * @param {?} ast
             * @return {?}
             */visitLiteralMap:function visitLiteralMap(ast){return true;},/**
             * @param {?} ast
             * @return {?}
             */visitLiteralPrimitive:function visitLiteralPrimitive(ast){return false;},/**
             * @param {?} ast
             * @return {?}
             */visitMethodCall:function visitMethodCall(ast){return true;},/**
             * @param {?} ast
             * @return {?}
             */visitPipe:function visitPipe(ast){return true;},/**
             * @param {?} ast
             * @return {?}
             */visitPrefixNot:function visitPrefixNot(ast){return visit(this,ast.expression);},/**
             * @param {?} ast
             * @return {?}
             */visitPropertyRead:function visitPropertyRead(ast){return false;},/**
             * @param {?} ast
             * @return {?}
             */visitPropertyWrite:function visitPropertyWrite(ast){return false;},/**
             * @param {?} ast
             * @return {?}
             */visitQuote:function visitQuote(ast){return false;},/**
             * @param {?} ast
             * @return {?}
             */visitSafeMethodCall:function visitSafeMethodCall(ast){return true;},/**
             * @param {?} ast
             * @return {?}
             */visitSafePropertyRead:function visitSafePropertyRead(ast){return false;}});}/**
     * @return {?}
     */},{key:'allocateTemporary',value:function allocateTemporary(){var/** @type {?} */tempNumber=this._currentTemporary++;this.temporaryCount=Math.max(this._currentTemporary,this.temporaryCount);return new ReadVarExpr(temporaryName(this.bindingId,tempNumber));}/**
     * @param {?} temporary
     * @return {?}
     */},{key:'releaseTemporary',value:function releaseTemporary(temporary){this._currentTemporary--;if(temporary.name!=temporaryName(this.bindingId,this._currentTemporary)){throw new Error('Temporary '+temporary.name+' released out of order');}}}]);return _AstToIrVisitor;}();/**
 * @param {?} arg
 * @param {?} output
 * @return {?}
 */function flattenStatements(arg,output){if(Array.isArray(arg)){arg.forEach(function(entry){return flattenStatements(entry,output);});}else{output.push(arg);}}/**
 * @param {?} builder
 * @param {?} values
 * @return {?}
 */function legacyCreateCachedLiteralArray(builder,values){if(values.length===0){return importExpr(createIdentifier(Identifiers.EMPTY_ARRAY));}var/** @type {?} */proxyExpr=THIS_EXPR.prop('_arr_'+builder.fields.length);var/** @type {?} */proxyParams=[];var/** @type {?} */proxyReturnEntries=[];for(var/** @type {?} */i=0;i<values.length;i++){var/** @type {?} */paramName='p'+i;proxyParams.push(new FnParam(paramName));proxyReturnEntries.push(variable(paramName));}createPureProxy(fn(proxyParams,[new ReturnStatement(literalArr(proxyReturnEntries))],new ArrayType(DYNAMIC_TYPE)),values.length,proxyExpr,builder);return proxyExpr.callFn(values);}/**
 * @param {?} builder
 * @param {?} entries
 * @return {?}
 */function legacyCreateCachedLiteralMap(builder,entries){if(entries.length===0){return importExpr(createIdentifier(Identifiers.EMPTY_MAP));}var/** @type {?} */proxyExpr=THIS_EXPR.prop('_map_'+builder.fields.length);var/** @type {?} */proxyParams=[];var/** @type {?} */proxyReturnEntries=[];var/** @type {?} */values=[];for(var/** @type {?} */i=0;i<entries.length;i++){var/** @type {?} */paramName='p'+i;proxyParams.push(new FnParam(paramName));proxyReturnEntries.push([entries[i][0],variable(paramName)]);values.push(/** @type {?} */entries[i][1]);}createPureProxy(fn(proxyParams,[new ReturnStatement(literalMap(proxyReturnEntries))],new MapType(DYNAMIC_TYPE)),entries.length,proxyExpr,builder);return proxyExpr.callFn(values);}var DefaultLocalResolver=function(){function DefaultLocalResolver(){_classCallCheck(this,DefaultLocalResolver);}_createClass(DefaultLocalResolver,[{key:'getLocal',/**
     * @param {?} name
     * @return {?}
     */value:function getLocal(name){if(name===EventHandlerVars.event.name){return EventHandlerVars.event;}return null;}}]);return DefaultLocalResolver;}();var LegacyDefaultNameResolver=function(){function LegacyDefaultNameResolver(){_classCallCheck(this,LegacyDefaultNameResolver);}_createClass(LegacyDefaultNameResolver,[{key:'callPipe',/**
     * @param {?} name
     * @param {?} input
     * @param {?} args
     * @return {?}
     */value:function callPipe(name,input,args){return null;}/**
     * @param {?} name
     * @return {?}
     */},{key:'getLocal',value:function getLocal(name){if(name===EventHandlerVars.event.name){return EventHandlerVars.event;}return null;}}]);return LegacyDefaultNameResolver;}();/**
 * @param {?} bindingId
 * @return {?}
 */function createCurrValueExpr(bindingId){return variable('currVal_'+bindingId);// fix syntax highlighting: `
}/**
 * @param {?} bindingId
 * @return {?}
 */function createPreventDefaultVar(bindingId){return variable('pd_'+bindingId);}/**
 * @param {?} stmt
 * @return {?}
 */function convertStmtIntoExpression(stmt){if(stmt instanceof ExpressionStatement){return stmt.expr;}else if(stmt instanceof ReturnStatement){return stmt.value;}return null;}var BuiltinFunctionCall=function(_FunctionCall){_inherits(BuiltinFunctionCall,_FunctionCall);/**
     * @param {?} span
     * @param {?} args
     * @param {?} converter
     */function BuiltinFunctionCall(span,args,converter){_classCallCheck(this,BuiltinFunctionCall);var _this169=_possibleConstructorReturn(this,(BuiltinFunctionCall.__proto__||Object.getPrototypeOf(BuiltinFunctionCall)).call(this,span,null,args));_this169.args=args;_this169.converter=converter;return _this169;}return BuiltinFunctionCall;}(FunctionCall);/**
 * @param {?} view
 * @param {?} renderElement
 * @param {?} boundProp
 * @param {?} oldValue
 * @param {?} evalResult
 * @param {?=} securityContextExpression
 * @return {?}
 */function createCheckRenderBindingStmt(view,renderElement,boundProp,oldValue,evalResult,securityContextExpression){var/** @type {?} */checkStmts=[].concat(_toConsumableArray(evalResult.stmts));var/** @type {?} */securityContext=calcSecurityContext(boundProp,securityContextExpression);switch(boundProp.type){case PropertyBindingType.Property:checkStmts.push(importExpr(createIdentifier(Identifiers.checkRenderProperty)).callFn([view,renderElement,literal(boundProp.name),oldValue,oldValue.set(evalResult.currValExpr),evalResult.forceUpdate||literal(false),securityContext]).toStmt());break;case PropertyBindingType.Attribute:checkStmts.push(importExpr(createIdentifier(Identifiers.checkRenderAttribute)).callFn([view,renderElement,literal(boundProp.name),oldValue,oldValue.set(evalResult.currValExpr),evalResult.forceUpdate||literal(false),securityContext]).toStmt());break;case PropertyBindingType.Class:checkStmts.push(importExpr(createIdentifier(Identifiers.checkRenderClass)).callFn([view,renderElement,literal(boundProp.name),oldValue,oldValue.set(evalResult.currValExpr),evalResult.forceUpdate||literal(false)]).toStmt());break;case PropertyBindingType.Style:checkStmts.push(importExpr(createIdentifier(Identifiers.checkRenderStyle)).callFn([view,renderElement,literal(boundProp.name),literal(boundProp.unit),oldValue,oldValue.set(evalResult.currValExpr),evalResult.forceUpdate||literal(false),securityContext]).toStmt());break;case PropertyBindingType.Animation:throw new Error('Illegal state: Should not come here!');}return checkStmts;}/**
 * @param {?} boundProp
 * @param {?=} securityContextExpression
 * @return {?}
 */function calcSecurityContext(boundProp,securityContextExpression){if(boundProp.securityContext===__WEBPACK_IMPORTED_MODULE_0__angular_core__["U" /* SecurityContext */].NONE){return NULL_EXPR;// No sanitization needed.
}if(!boundProp.needsRuntimeSecurityContext){securityContextExpression=createEnumExpression(Identifiers.SecurityContext,boundProp.securityContext);}if(!securityContextExpression){throw new Error('internal error, no SecurityContext given '+boundProp.name);}return securityContextExpression;}/**
 * @param {?} view
 * @param {?} componentView
 * @param {?} boundProp
 * @param {?} boundOutputs
 * @param {?} eventListener
 * @param {?} renderElement
 * @param {?} oldValue
 * @param {?} evalResult
 * @return {?}
 */function createCheckAnimationBindingStmts(view,componentView,boundProp,boundOutputs,eventListener,renderElement,oldValue,evalResult){var/** @type {?} */detachStmts=[];var/** @type {?} */updateStmts=[];var/** @type {?} */animationName=boundProp.name;var/** @type {?} */animationFnExpr=componentView.prop('componentType').prop('animations').key(literal(animationName));// it's important to normalize the void value as `void` explicitly
// so that the styles data can be obtained from the stringmap
var/** @type {?} */emptyStateValue=literal(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_105" /* ɵEMPTY_STATE */]);var/** @type {?} */animationTransitionVar=variable('animationTransition_'+animationName);updateStmts.push(animationTransitionVar.set(animationFnExpr.callFn([view,renderElement,isFirstViewCheck(view).conditional(emptyStateValue,oldValue),evalResult.currValExpr])).toDeclStmt());updateStmts.push(oldValue.set(evalResult.currValExpr).toStmt());detachStmts.push(animationTransitionVar.set(animationFnExpr.callFn([view,renderElement,evalResult.currValExpr,emptyStateValue])).toDeclStmt());var/** @type {?} */registerStmts=[];var/** @type {?} */animationStartMethodExists=boundOutputs.find(function(event){return event.isAnimation&&event.name==animationName&&event.phase=='start';});if(animationStartMethodExists){registerStmts.push(animationTransitionVar.callMethod('onStart',[eventListener.callMethod(BuiltinMethod.Bind,[view,literal(BoundEventAst.calcFullName(animationName,null,'start'))])]).toStmt());}var/** @type {?} */animationDoneMethodExists=boundOutputs.find(function(event){return event.isAnimation&&event.name==animationName&&event.phase=='done';});if(animationDoneMethodExists){registerStmts.push(animationTransitionVar.callMethod('onDone',[eventListener.callMethod(BuiltinMethod.Bind,[view,literal(BoundEventAst.calcFullName(animationName,null,'done'))])]).toStmt());}updateStmts.push.apply(updateStmts,registerStmts);detachStmts.push.apply(detachStmts,registerStmts);var/** @type {?} */checkUpdateStmts=[].concat(_toConsumableArray(evalResult.stmts),[new IfStmt(importExpr(createIdentifier(Identifiers.checkBinding)).callFn([view,oldValue,evalResult.currValExpr,evalResult.forceUpdate||literal(false)]),updateStmts)]);var/** @type {?} */checkDetachStmts=[].concat(_toConsumableArray(evalResult.stmts),detachStmts);return{checkUpdateStmts:checkUpdateStmts,checkDetachStmts:checkDetachStmts};}/**
 * Create a new class stmts based on the given data.
 * @param {?} config
 * @return {?}
 */function createClassStmt(config){var/** @type {?} */parentArgs=config.parentArgs||[];var/** @type {?} */superCtorStmts=config.parent?[SUPER_EXPR.callFn(parentArgs).toStmt()]:[];var/** @type {?} */builder=concatClassBuilderParts(Array.isArray(config.builders)?config.builders:[config.builders]);var/** @type {?} */ctor=new ClassMethod(null,config.ctorParams||[],superCtorStmts.concat(builder.ctorStmts));return new ClassStmt(config.name,config.parent,builder.fields,builder.getters,ctor,builder.methods,config.modifiers||[],config.sourceSpan);}/**
 * @param {?} builders
 * @return {?}
 */function concatClassBuilderParts(builders){var _ref29,_ref30,_ref31,_ref32;return{fields:(_ref29=[]).concat.apply(_ref29,_toConsumableArray(builders.map(function(builder){return builder.fields||[];}))),methods:(_ref30=[]).concat.apply(_ref30,_toConsumableArray(builders.map(function(builder){return builder.methods||[];}))),getters:(_ref31=[]).concat.apply(_ref31,_toConsumableArray(builders.map(function(builder){return builder.getters||[];}))),ctorStmts:(_ref32=[]).concat.apply(_ref32,_toConsumableArray(builders.map(function(builder){return builder.ctorStmts||[];})))};}var DirectiveWrapperCompileResult=/**
     * @param {?} statements
     * @param {?} dirWrapperClassVar
     */function DirectiveWrapperCompileResult(statements,dirWrapperClassVar){_classCallCheck(this,DirectiveWrapperCompileResult);this.statements=statements;this.dirWrapperClassVar=dirWrapperClassVar;};var/** @type {?} */CONTEXT_FIELD_NAME='context';var/** @type {?} */CHANGES_FIELD_NAME='_changes';var/** @type {?} */CHANGED_FIELD_NAME='_changed';var/** @type {?} */EVENT_HANDLER_FIELD_NAME='_eventHandler';var/** @type {?} */CHANGE_VAR=variable('change');var/** @type {?} */CURR_VALUE_VAR=variable('currValue');var/** @type {?} */FORCE_UPDATE_VAR=variable('forceUpdate');var/** @type {?} */VIEW_VAR=variable('view');var/** @type {?} */COMPONENT_VIEW_VAR=variable('componentView');var/** @type {?} */RENDER_EL_VAR=variable('el');var/** @type {?} */EVENT_NAME_VAR=variable('eventName');var/** @type {?} */RESET_CHANGES_STMT=THIS_EXPR.prop(CHANGES_FIELD_NAME).set(literalMap([])).toStmt();/**
 * We generate directive wrappers to prevent code bloat when a directive is used.
 * A directive wrapper encapsulates
 * the dirty checking for `\@Input`, the handling of `\@HostListener` / `\@HostBinding`
 * and calling the lifecyclehooks `ngOnInit`, `ngOnChanges`, `ngDoCheck`.
 *
 * So far, only `\@Input` and the lifecycle hooks have been implemented.
 */var DirectiveWrapperCompiler=function(){/**
     * @param {?} compilerConfig
     * @param {?} _exprParser
     * @param {?} _schemaRegistry
     * @param {?} _console
     */function DirectiveWrapperCompiler(compilerConfig,_exprParser,_schemaRegistry,_console){_classCallCheck(this,DirectiveWrapperCompiler);this.compilerConfig=compilerConfig;this._exprParser=_exprParser;this._schemaRegistry=_schemaRegistry;this._console=_console;}/**
     * @param {?} dirMeta
     * @return {?}
     */_createClass(DirectiveWrapperCompiler,[{key:'compile',value:function compile(dirMeta){var/** @type {?} */hostParseResult=parseHostBindings(dirMeta,this._exprParser,this._schemaRegistry);reportParseErrors(hostParseResult.errors,this._console);var/** @type {?} */builder=new DirectiveWrapperBuilder(this.compilerConfig,dirMeta);Object.keys(dirMeta.inputs).forEach(function(inputFieldName){addCheckInputMethod(inputFieldName,builder);});addNgDoCheckMethod(builder);addCheckHostMethod(hostParseResult.hostProps,hostParseResult.hostListeners,builder);addHandleEventMethod(hostParseResult.hostListeners,builder);addSubscribeMethod(dirMeta,builder);var/** @type {?} */classStmt=builder.build();return new DirectiveWrapperCompileResult([classStmt],classStmt.name);}}]);return DirectiveWrapperCompiler;}();DirectiveWrapperCompiler.decorators=[{type:CompilerInjectable}];/** @nocollapse */DirectiveWrapperCompiler.ctorParameters=function(){return[{type:CompilerConfig},{type:Parser},{type:ElementSchemaRegistry},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_98" /* ɵConsole */]}];};var DirectiveWrapperBuilder=function(){/**
     * @param {?} compilerConfig
     * @param {?} dirMeta
     */function DirectiveWrapperBuilder(compilerConfig,dirMeta){_classCallCheck(this,DirectiveWrapperBuilder);this.compilerConfig=compilerConfig;this.dirMeta=dirMeta;this.fields=[];this.getters=[];this.methods=[];this.ctorStmts=[];this.detachStmts=[];this.destroyStmts=[];var dirLifecycleHooks=dirMeta.type.lifecycleHooks;this.genChanges=dirLifecycleHooks.indexOf(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_106" /* ɵLifecycleHooks */].OnChanges)!==-1||this.compilerConfig.logBindingUpdate;this.ngOnChanges=dirLifecycleHooks.indexOf(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_106" /* ɵLifecycleHooks */].OnChanges)!==-1;this.ngOnInit=dirLifecycleHooks.indexOf(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_106" /* ɵLifecycleHooks */].OnInit)!==-1;this.ngDoCheck=dirLifecycleHooks.indexOf(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_106" /* ɵLifecycleHooks */].DoCheck)!==-1;this.ngOnDestroy=dirLifecycleHooks.indexOf(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_106" /* ɵLifecycleHooks */].OnDestroy)!==-1;if(this.ngOnDestroy){this.destroyStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngOnDestroy',[]).toStmt());}}/**
     * @return {?}
     */_createClass(DirectiveWrapperBuilder,[{key:'build',value:function build(){var/** @type {?} */dirDepParamNames=[];for(var/** @type {?} */i=0;i<this.dirMeta.type.diDeps.length;i++){dirDepParamNames.push('p'+i);}var/** @type {?} */methods=[new ClassMethod('ngOnDetach',[new FnParam(VIEW_VAR.name,importType(createIdentifier(Identifiers.AppView),[DYNAMIC_TYPE])),new FnParam(COMPONENT_VIEW_VAR.name,importType(createIdentifier(Identifiers.AppView),[DYNAMIC_TYPE])),new FnParam(RENDER_EL_VAR.name,DYNAMIC_TYPE)],this.detachStmts),new ClassMethod('ngOnDestroy',[],this.destroyStmts)];var/** @type {?} */fields=[new ClassField(EVENT_HANDLER_FIELD_NAME,FUNCTION_TYPE,[StmtModifier.Private]),new ClassField(CONTEXT_FIELD_NAME,importType(this.dirMeta.type)),new ClassField(CHANGED_FIELD_NAME,BOOL_TYPE,[StmtModifier.Private])];var/** @type {?} */ctorStmts=[THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(false)).toStmt()];if(this.genChanges){fields.push(new ClassField(CHANGES_FIELD_NAME,new MapType(DYNAMIC_TYPE),[StmtModifier.Private]));ctorStmts.push(RESET_CHANGES_STMT);}ctorStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).set(importExpr(this.dirMeta.type).instantiate(dirDepParamNames.map(function(paramName){return variable(paramName);}))).toStmt());return createClassStmt({name:dirWrapperClassName(this.dirMeta.type.reference),ctorParams:dirDepParamNames.map(function(paramName){return new FnParam(paramName,DYNAMIC_TYPE);}),builders:[{fields:fields,ctorStmts:ctorStmts,methods:methods},this]});}}]);return DirectiveWrapperBuilder;}();/**
 * @param {?} builder
 * @return {?}
 */function addNgDoCheckMethod(builder){var/** @type {?} */changedVar=variable('changed');var/** @type {?} */stmts=[changedVar.set(THIS_EXPR.prop(CHANGED_FIELD_NAME)).toDeclStmt(),THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(false)).toStmt()];var/** @type {?} */lifecycleStmts=[];if(builder.genChanges){var/** @type {?} */onChangesStmts=[];if(builder.ngOnChanges){onChangesStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngOnChanges',[THIS_EXPR.prop(CHANGES_FIELD_NAME)]).toStmt());}if(builder.compilerConfig.logBindingUpdate){onChangesStmts.push(importExpr(createIdentifier(Identifiers.setBindingDebugInfoForChanges)).callFn([VIEW_VAR.prop('renderer'),RENDER_EL_VAR,THIS_EXPR.prop(CHANGES_FIELD_NAME)]).toStmt());}onChangesStmts.push(RESET_CHANGES_STMT);lifecycleStmts.push(new IfStmt(changedVar,onChangesStmts));}if(builder.ngOnInit){lifecycleStmts.push(new IfStmt(isFirstViewCheck(VIEW_VAR),[THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngOnInit',[]).toStmt()]));}if(builder.ngDoCheck){lifecycleStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngDoCheck',[]).toStmt());}if(lifecycleStmts.length>0){stmts.push(new IfStmt(not(VIEW_VAR.prop('throwOnChange')),lifecycleStmts));}stmts.push(new ReturnStatement(changedVar));builder.methods.push(new ClassMethod('ngDoCheck',[new FnParam(VIEW_VAR.name,importType(createIdentifier(Identifiers.AppView),[DYNAMIC_TYPE])),new FnParam(RENDER_EL_VAR.name,DYNAMIC_TYPE)],stmts,BOOL_TYPE));}/**
 * @param {?} input
 * @param {?} builder
 * @return {?}
 */function addCheckInputMethod(input,builder){var/** @type {?} */field=createCheckBindingField(builder);var/** @type {?} */onChangeStatements=[THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(true)).toStmt(),THIS_EXPR.prop(CONTEXT_FIELD_NAME).prop(input).set(CURR_VALUE_VAR).toStmt(),field.expression.set(CURR_VALUE_VAR).toStmt()];var/** @type {?} */methodBody=void 0;if(builder.genChanges){onChangeStatements.push(THIS_EXPR.prop(CHANGES_FIELD_NAME).key(literal(input)).set(CHANGE_VAR).toStmt());methodBody=[CHANGE_VAR.set(importExpr(createIdentifier(Identifiers.checkBindingChange)).callFn([VIEW_VAR,field.expression,CURR_VALUE_VAR,FORCE_UPDATE_VAR])).toDeclStmt(),new IfStmt(CHANGE_VAR,onChangeStatements)];}else{methodBody=[new IfStmt(importExpr(createIdentifier(Identifiers.checkBinding)).callFn([VIEW_VAR,field.expression,CURR_VALUE_VAR,FORCE_UPDATE_VAR]),onChangeStatements)];}builder.methods.push(new ClassMethod('check_'+input,[new FnParam(VIEW_VAR.name,importType(createIdentifier(Identifiers.AppView),[DYNAMIC_TYPE])),new FnParam(CURR_VALUE_VAR.name,DYNAMIC_TYPE),new FnParam(FORCE_UPDATE_VAR.name,BOOL_TYPE)],methodBody));}/**
 * @param {?} hostProps
 * @param {?} hostEvents
 * @param {?} builder
 * @return {?}
 */function addCheckHostMethod(hostProps,hostEvents,builder){var/** @type {?} */stmts=[];var/** @type {?} */methodParams=[new FnParam(VIEW_VAR.name,importType(createIdentifier(Identifiers.AppView),[DYNAMIC_TYPE])),new FnParam(COMPONENT_VIEW_VAR.name,importType(createIdentifier(Identifiers.AppView),[DYNAMIC_TYPE])),new FnParam(RENDER_EL_VAR.name,DYNAMIC_TYPE)];hostProps.forEach(function(hostProp,hostPropIdx){var/** @type {?} */field=createCheckBindingField(builder);var/** @type {?} */evalResult=legacyConvertPropertyBinding(builder,null,THIS_EXPR.prop(CONTEXT_FIELD_NAME),hostProp.value,field.bindingId);if(!evalResult){return;}var/** @type {?} */securityContextExpr=void 0;if(hostProp.needsRuntimeSecurityContext){securityContextExpr=variable('secCtx_'+methodParams.length);methodParams.push(new FnParam(securityContextExpr.name,importType(createIdentifier(Identifiers.SecurityContext))));}if(hostProp.isAnimation){var _builder$detachStmts;var _createCheckAnimation=createCheckAnimationBindingStmts(VIEW_VAR,COMPONENT_VIEW_VAR,hostProp,hostEvents,THIS_EXPR.prop(EVENT_HANDLER_FIELD_NAME).or(importExpr(createIdentifier(Identifiers.noop))),RENDER_EL_VAR,field.expression,evalResult),checkUpdateStmts=_createCheckAnimation.checkUpdateStmts,checkDetachStmts=_createCheckAnimation.checkDetachStmts;(_builder$detachStmts=builder.detachStmts).push.apply(_builder$detachStmts,_toConsumableArray(checkDetachStmts));stmts.push.apply(stmts,_toConsumableArray(checkUpdateStmts));}else{stmts.push.apply(stmts,_toConsumableArray(createCheckRenderBindingStmt(VIEW_VAR,RENDER_EL_VAR,hostProp,field.expression,evalResult,securityContextExpr)));}});builder.methods.push(new ClassMethod('checkHost',methodParams,stmts));}/**
 * @param {?} hostListeners
 * @param {?} builder
 * @return {?}
 */function addHandleEventMethod(hostListeners,builder){var/** @type {?} */resultVar=variable('result');var/** @type {?} */actionStmts=[resultVar.set(literal(true)).toDeclStmt(BOOL_TYPE)];hostListeners.forEach(function(hostListener,eventIdx){var/** @type {?} */evalResult=convertActionBinding(null,THIS_EXPR.prop(CONTEXT_FIELD_NAME),hostListener.handler,'sub_'+eventIdx);var/** @type {?} */trueStmts=evalResult.stmts;if(evalResult.allowDefault){trueStmts.push(resultVar.set(evalResult.allowDefault.and(resultVar)).toStmt());}// TODO(tbosch): convert this into a `switch` once our OutputAst supports it.
actionStmts.push(new IfStmt(EVENT_NAME_VAR.equals(literal(hostListener.fullName)),trueStmts));});actionStmts.push(new ReturnStatement(resultVar));builder.methods.push(new ClassMethod('handleEvent',[new FnParam(EVENT_NAME_VAR.name,STRING_TYPE),new FnParam(EventHandlerVars.event.name,DYNAMIC_TYPE)],actionStmts,BOOL_TYPE));}/**
 * @param {?} dirMeta
 * @param {?} builder
 * @return {?}
 */function addSubscribeMethod(dirMeta,builder){var/** @type {?} */methodParams=[new FnParam(VIEW_VAR.name,importType(createIdentifier(Identifiers.AppView),[DYNAMIC_TYPE])),new FnParam(EVENT_HANDLER_FIELD_NAME,DYNAMIC_TYPE)];var/** @type {?} */stmts=[THIS_EXPR.prop(EVENT_HANDLER_FIELD_NAME).set(variable(EVENT_HANDLER_FIELD_NAME)).toStmt()];Object.keys(dirMeta.outputs).forEach(function(emitterPropName,emitterIdx){var/** @type {?} */eventName=dirMeta.outputs[emitterPropName];var/** @type {?} */paramName='emit'+emitterIdx;methodParams.push(new FnParam(paramName,BOOL_TYPE));var/** @type {?} */subscriptionFieldName='subscription'+emitterIdx;builder.fields.push(new ClassField(subscriptionFieldName,DYNAMIC_TYPE));stmts.push(new IfStmt(variable(paramName),[THIS_EXPR.prop(subscriptionFieldName).set(THIS_EXPR.prop(CONTEXT_FIELD_NAME).prop(emitterPropName).callMethod(BuiltinMethod.SubscribeObservable,[variable(EVENT_HANDLER_FIELD_NAME).callMethod(BuiltinMethod.Bind,[VIEW_VAR,literal(eventName)])])).toStmt()]));builder.destroyStmts.push(THIS_EXPR.prop(subscriptionFieldName).and(THIS_EXPR.prop(subscriptionFieldName).callMethod('unsubscribe',[])).toStmt());});builder.methods.push(new ClassMethod('subscribe',methodParams,stmts));}var ParseResult=/**
     * @param {?} hostProps
     * @param {?} hostListeners
     * @param {?} errors
     */function ParseResult(hostProps,hostListeners,errors){_classCallCheck(this,ParseResult);this.hostProps=hostProps;this.hostListeners=hostListeners;this.errors=errors;};/**
 * @param {?} dirMeta
 * @param {?} exprParser
 * @param {?} schemaRegistry
 * @return {?}
 */function parseHostBindings(dirMeta,exprParser,schemaRegistry){var/** @type {?} */errors=[];var/** @type {?} */parser=new BindingParser(exprParser,DEFAULT_INTERPOLATION_CONFIG,schemaRegistry,[],errors);var/** @type {?} */moduleUrl=identifierModuleUrl(dirMeta.type);var/** @type {?} */sourceFileName=moduleUrl?'in Directive '+identifierName(dirMeta.type)+' in '+moduleUrl:'in Directive '+identifierName(dirMeta.type);var/** @type {?} */sourceFile=new ParseSourceFile('',sourceFileName);var/** @type {?} */sourceSpan=new ParseSourceSpan(new ParseLocation(sourceFile,null,null,null),new ParseLocation(sourceFile,null,null,null));var/** @type {?} */parsedHostProps=parser.createDirectiveHostPropertyAsts(dirMeta.toSummary(),dirMeta.selector,sourceSpan);var/** @type {?} */parsedHostListeners=parser.createDirectiveHostEventAsts(dirMeta.toSummary(),sourceSpan);return new ParseResult(parsedHostProps,parsedHostListeners,errors);}/**
 * @param {?} parseErrors
 * @param {?} console
 * @return {?}
 */function reportParseErrors(parseErrors,console){var/** @type {?} */warnings=parseErrors.filter(function(error){return error.level===ParseErrorLevel.WARNING;});var/** @type {?} */errors=parseErrors.filter(function(error){return error.level===ParseErrorLevel.FATAL;});if(warnings.length>0){this._console.warn('Directive parse warnings:\n'+warnings.join('\n'));}if(errors.length>0){throw new Error('Directive parse errors:\n'+errors.join('\n'));}}var DirectiveWrapperExpressions=function(){function DirectiveWrapperExpressions(){_classCallCheck(this,DirectiveWrapperExpressions);}_createClass(DirectiveWrapperExpressions,null,[{key:'create',/**
     * @param {?} dir
     * @param {?} depsExpr
     * @return {?}
     */value:function create(dir,depsExpr){return importExpr(dir).instantiate(depsExpr,importType(dir));}/**
     * @param {?} dirWrapper
     * @return {?}
     */},{key:'context',value:function context(dirWrapper){return dirWrapper.prop(CONTEXT_FIELD_NAME);}/**
     * @param {?} dirWrapper
     * @param {?} view
     * @param {?} renderElement
     * @return {?}
     */},{key:'ngDoCheck',value:function ngDoCheck(dirWrapper,view,renderElement){return dirWrapper.callMethod('ngDoCheck',[view,renderElement]);}/**
     * @param {?} hostProps
     * @param {?} dirWrapper
     * @param {?} view
     * @param {?} componentView
     * @param {?} renderElement
     * @param {?} runtimeSecurityContexts
     * @return {?}
     */},{key:'checkHost',value:function checkHost(hostProps,dirWrapper,view,componentView,renderElement,runtimeSecurityContexts){if(hostProps.length){return[dirWrapper.callMethod('checkHost',[view,componentView,renderElement].concat(runtimeSecurityContexts)).toStmt()];}else{return[];}}/**
     * @param {?} hostProps
     * @param {?} dirWrapper
     * @param {?} view
     * @param {?} componentView
     * @param {?} renderEl
     * @return {?}
     */},{key:'ngOnDetach',value:function ngOnDetach(hostProps,dirWrapper,view,componentView,renderEl){if(hostProps.some(function(prop){return prop.isAnimation;})){return[dirWrapper.callMethod('ngOnDetach',[view,componentView,renderEl]).toStmt()];}else{return[];}}/**
     * @param {?} dir
     * @param {?} dirWrapper
     * @return {?}
     */},{key:'ngOnDestroy',value:function ngOnDestroy(dir,dirWrapper){if(dir.type.lifecycleHooks.indexOf(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_106" /* ɵLifecycleHooks */].OnDestroy)!==-1||Object.keys(dir.outputs).length>0){return[dirWrapper.callMethod('ngOnDestroy',[]).toStmt()];}else{return[];}}/**
     * @param {?} dirMeta
     * @param {?} hostProps
     * @param {?} usedEvents
     * @param {?} dirWrapper
     * @param {?} view
     * @param {?} eventListener
     * @return {?}
     */},{key:'subscribe',value:function subscribe(dirMeta,hostProps,usedEvents,dirWrapper,view,eventListener){var/** @type {?} */needsSubscribe=false;var/** @type {?} */eventFlags=[];Object.keys(dirMeta.outputs).forEach(function(propName){var/** @type {?} */eventName=dirMeta.outputs[propName];var/** @type {?} */eventUsed=usedEvents.indexOf(eventName)>-1;needsSubscribe=needsSubscribe||eventUsed;eventFlags.push(literal(eventUsed));});hostProps.forEach(function(hostProp){if(hostProp.isAnimation&&usedEvents.length>0){needsSubscribe=true;}});if(needsSubscribe){return[dirWrapper.callMethod('subscribe',[view,eventListener].concat(eventFlags)).toStmt()];}else{return[];}}/**
     * @param {?} hostEvents
     * @param {?} dirWrapper
     * @param {?} eventName
     * @param {?} event
     * @return {?}
     */},{key:'handleEvent',value:function handleEvent(hostEvents,dirWrapper,eventName,event){return dirWrapper.callMethod('handleEvent',[eventName,event]);}}]);return DirectiveWrapperExpressions;}();/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */var/** @type {?} */STRIP_SRC_FILE_SUFFIXES=/(\.ts|\.d\.ts|\.js|\.jsx|\.tsx)$/;var/** @type {?} */NG_FACTORY=/\.ngfactory\./;/**
 * @param {?} filePath
 * @return {?}
 */function ngfactoryFilePath(filePath){var/** @type {?} */urlWithSuffix=splitTypescriptSuffix(filePath);return urlWithSuffix[0]+'.ngfactory'+urlWithSuffix[1];}/**
 * @param {?} filePath
 * @return {?}
 */function stripNgFactory(filePath){return filePath.replace(NG_FACTORY,'.');}/**
 * @param {?} filePath
 * @return {?}
 */function isNgFactoryFile(filePath){return NG_FACTORY.test(filePath);}/**
 * @param {?} path
 * @return {?}
 */function splitTypescriptSuffix(path){if(path.endsWith('.d.ts')){return[path.slice(0,-5),'.ts'];}var/** @type {?} */lastDot=path.lastIndexOf('.');if(lastDot!==-1){return[path.substring(0,lastDot),path.substring(lastDot)];}return[path,''];}/**
 * @param {?} fileName
 * @return {?}
 */function summaryFileName(fileName){var/** @type {?} */fileNameWithoutSuffix=fileName.replace(STRIP_SRC_FILE_SUFFIXES,'');return fileNameWithoutSuffix+'.ngsummary.json';}/**
 * @param {?} hook
 * @param {?} token
 * @return {?}
 */function hasLifecycleHook(hook,token){return __WEBPACK_IMPORTED_MODULE_0__angular_core__["_13" /* ɵreflector */].hasLifecycleHook(token,getHookName(hook));}/**
 * @param {?} hook
 * @return {?}
 */function getHookName(hook){switch(hook){case __WEBPACK_IMPORTED_MODULE_0__angular_core__["_106" /* ɵLifecycleHooks */].OnInit:return'ngOnInit';case __WEBPACK_IMPORTED_MODULE_0__angular_core__["_106" /* ɵLifecycleHooks */].OnDestroy:return'ngOnDestroy';case __WEBPACK_IMPORTED_MODULE_0__angular_core__["_106" /* ɵLifecycleHooks */].DoCheck:return'ngDoCheck';case __WEBPACK_IMPORTED_MODULE_0__angular_core__["_106" /* ɵLifecycleHooks */].OnChanges:return'ngOnChanges';case __WEBPACK_IMPORTED_MODULE_0__angular_core__["_106" /* ɵLifecycleHooks */].AfterContentInit:return'ngAfterContentInit';case __WEBPACK_IMPORTED_MODULE_0__angular_core__["_106" /* ɵLifecycleHooks */].AfterContentChecked:return'ngAfterContentChecked';case __WEBPACK_IMPORTED_MODULE_0__angular_core__["_106" /* ɵLifecycleHooks */].AfterViewInit:return'ngAfterViewInit';case __WEBPACK_IMPORTED_MODULE_0__angular_core__["_106" /* ɵLifecycleHooks */].AfterViewChecked:return'ngAfterViewChecked';}}/**
 * @param {?} obj
 * @return {?}
 */function _isNgModuleMetadata(obj){return obj instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["i" /* NgModule */];}/**
 * Resolves types to {\@link NgModule}.
 */var NgModuleResolver=function(){/**
     * @param {?=} _reflector
     */function NgModuleResolver(){var _reflector=arguments.length>0&&arguments[0]!==undefined?arguments[0]:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_13" /* ɵreflector */];_classCallCheck(this,NgModuleResolver);this._reflector=_reflector;}/**
     * @param {?} type
     * @return {?}
     */_createClass(NgModuleResolver,[{key:'isNgModule',value:function isNgModule(type){return this._reflector.annotations(type).some(_isNgModuleMetadata);}/**
     * @param {?} type
     * @param {?=} throwIfNotFound
     * @return {?}
     */},{key:'resolve',value:function resolve(type){var throwIfNotFound=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var/** @type {?} */ngModuleMeta=ListWrapper.findLast(this._reflector.annotations(type),_isNgModuleMetadata);if(ngModuleMeta){return ngModuleMeta;}else{if(throwIfNotFound){throw new Error('No NgModule metadata found for \''+stringify(type)+'\'.');}return null;}}}]);return NgModuleResolver;}();NgModuleResolver.decorators=[{type:CompilerInjectable}];/** @nocollapse */NgModuleResolver.ctorParameters=function(){return[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_104" /* ɵReflectorReader */]}];};/**
 * @param {?} type
 * @return {?}
 */function _isPipeMetadata(type){return type instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["_9" /* Pipe */];}/**
 * Resolve a `Type` for {\@link Pipe}.
 *
 * This interface can be overridden by the application developer to create custom behavior.
 *
 * See {\@link Compiler}
 */var PipeResolver=function(){/**
     * @param {?=} _reflector
     */function PipeResolver(){var _reflector=arguments.length>0&&arguments[0]!==undefined?arguments[0]:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_13" /* ɵreflector */];_classCallCheck(this,PipeResolver);this._reflector=_reflector;}/**
     * @param {?} type
     * @return {?}
     */_createClass(PipeResolver,[{key:'isPipe',value:function isPipe(type){var/** @type {?} */typeMetadata=this._reflector.annotations(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_102" /* resolveForwardRef */])(type));return typeMetadata&&typeMetadata.some(_isPipeMetadata);}/**
     * Return {\@link Pipe} for a given `Type`.
     * @param {?} type
     * @param {?=} throwIfNotFound
     * @return {?}
     */},{key:'resolve',value:function resolve(type){var throwIfNotFound=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var/** @type {?} */metas=this._reflector.annotations(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_102" /* resolveForwardRef */])(type));if(metas){var/** @type {?} */annotation=ListWrapper.findLast(metas,_isPipeMetadata);if(annotation){return annotation;}}if(throwIfNotFound){throw new Error('No Pipe decorator found on '+stringify(type));}return null;}}]);return PipeResolver;}();PipeResolver.decorators=[{type:CompilerInjectable}];/** @nocollapse */PipeResolver.ctorParameters=function(){return[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_104" /* ɵReflectorReader */]}];};var SummaryResolver=function(){function SummaryResolver(){_classCallCheck(this,SummaryResolver);}_createClass(SummaryResolver,[{key:'isLibraryFile',/**
     * @param {?} fileName
     * @return {?}
     */value:function isLibraryFile(fileName){return false;}},{key:'getLibraryFileName',/**
     * @param {?} fileName
     * @return {?}
     */value:function getLibraryFileName(fileName){return null;}/**
     * @param {?} reference
     * @return {?}
     */},{key:'resolveSummary',value:function resolveSummary(reference){return null;}},{key:'getSymbolsOf',/**
     * @param {?} filePath
     * @return {?}
     */value:function getSymbolsOf(filePath){return[];}/**
     * @param {?} reference
     * @return {?}
     */},{key:'getImportAs',value:function getImportAs(reference){return reference;}}]);return SummaryResolver;}();SummaryResolver.decorators=[{type:CompilerInjectable}];/** @nocollapse */SummaryResolver.ctorParameters=function(){return[];};var/** @type {?} */ERROR_COLLECTOR_TOKEN=new __WEBPACK_IMPORTED_MODULE_0__angular_core__["n" /* InjectionToken */]('ErrorCollector');var CompileMetadataResolver=function(){/**
     * @param {?} _config
     * @param {?} _ngModuleResolver
     * @param {?} _directiveResolver
     * @param {?} _pipeResolver
     * @param {?} _summaryResolver
     * @param {?} _schemaRegistry
     * @param {?} _directiveNormalizer
     * @param {?} _staticSymbolCache
     * @param {?=} _reflector
     * @param {?=} _errorCollector
     */function CompileMetadataResolver(_config,_ngModuleResolver,_directiveResolver,_pipeResolver,_summaryResolver,_schemaRegistry,_directiveNormalizer,_staticSymbolCache){var _reflector=arguments.length>8&&arguments[8]!==undefined?arguments[8]:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_13" /* ɵreflector */];var _errorCollector=arguments[9];_classCallCheck(this,CompileMetadataResolver);this._config=_config;this._ngModuleResolver=_ngModuleResolver;this._directiveResolver=_directiveResolver;this._pipeResolver=_pipeResolver;this._summaryResolver=_summaryResolver;this._schemaRegistry=_schemaRegistry;this._directiveNormalizer=_directiveNormalizer;this._staticSymbolCache=_staticSymbolCache;this._reflector=_reflector;this._errorCollector=_errorCollector;this._nonNormalizedDirectiveCache=new Map();this._directiveCache=new Map();this._summaryCache=new Map();this._pipeCache=new Map();this._ngModuleCache=new Map();this._ngModuleOfTypes=new Map();}/**
     * @param {?} type
     * @return {?}
     */_createClass(CompileMetadataResolver,[{key:'clearCacheFor',value:function clearCacheFor(type){var/** @type {?} */dirMeta=this._directiveCache.get(type);this._directiveCache.delete(type);this._nonNormalizedDirectiveCache.delete(type);this._summaryCache.delete(type);this._pipeCache.delete(type);this._ngModuleOfTypes.delete(type);// Clear all of the NgModule as they contain transitive information!
this._ngModuleCache.clear();if(dirMeta){this._directiveNormalizer.clearCacheFor(dirMeta);}}/**
     * @return {?}
     */},{key:'clearCache',value:function clearCache(){this._directiveCache.clear();this._nonNormalizedDirectiveCache.clear();this._summaryCache.clear();this._pipeCache.clear();this._ngModuleCache.clear();this._ngModuleOfTypes.clear();this._directiveNormalizer.clearCache();}/**
     * @param {?} baseType
     * @param {?} name
     * @return {?}
     */},{key:'_createProxyClass',value:function _createProxyClass(baseType,name){var/** @type {?} */delegate=null;var/** @type {?} */proxyClass=function proxyClass(){if(!delegate){throw new Error('Illegal state: Class '+name+' for type '+stringify(baseType)+' is not compiled yet!');}return delegate.apply(this,arguments);};proxyClass.setDelegate=function(d){delegate=d;proxyClass.prototype=d.prototype;};// Make stringify work correctly
proxyClass.overriddenName=name;return proxyClass;}/**
     * @param {?} dirType
     * @param {?} name
     * @return {?}
     */},{key:'getGeneratedClass',value:function getGeneratedClass(dirType,name){if(dirType instanceof StaticSymbol){return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath),name);}else{return this._createProxyClass(dirType,name);}}/**
     * @param {?} dirType
     * @return {?}
     */},{key:'getDirectiveWrapperClass',value:function getDirectiveWrapperClass(dirType){if(!this._config.useViewEngine){return this.getGeneratedClass(dirType,dirWrapperClassName(dirType));}return null;}/**
     * @param {?} dirType
     * @return {?}
     */},{key:'getComponentViewClass',value:function getComponentViewClass(dirType){return this.getGeneratedClass(dirType,viewClassName(dirType,0));}/**
     * @param {?} dirType
     * @return {?}
     */},{key:'getHostComponentViewClass',value:function getHostComponentViewClass(dirType){return this.getGeneratedClass(dirType,hostViewClassName(dirType));}/**
     * @param {?} dirType
     * @return {?}
     */},{key:'getHostComponentType',value:function getHostComponentType(dirType){var/** @type {?} */name=identifierName({reference:dirType})+'_Host';if(dirType instanceof StaticSymbol){return this._staticSymbolCache.get(dirType.filePath,name);}else{var/** @type {?} */HostClass=function HostClass(){};HostClass.overriddenName=name;return HostClass;}}/**
     * @param {?} dirType
     * @return {?}
     */},{key:'getRendererType',value:function getRendererType(dirType){if(dirType instanceof StaticSymbol){return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath),rendererTypeName(dirType));}else{// returning an object as proxy,
// that we fill later during runtime compilation.
return{};}}/**
     * @param {?} selector
     * @param {?} dirType
     * @return {?}
     */},{key:'getComponentFactory',value:function getComponentFactory(selector,dirType){if(dirType instanceof StaticSymbol){return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath),componentFactoryName(dirType));}else{var/** @type {?} */hostView=this.getHostComponentViewClass(dirType);if(this._config.useViewEngine){return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_96" /* ɵcreateComponentFactory */])(selector,dirType,/** @type {?} */hostView);}else{return new __WEBPACK_IMPORTED_MODULE_0__angular_core__["_23" /* ComponentFactory */](selector,/** @type {?} */hostView,dirType);}}}/**
     * @param {?} type
     * @param {?} kind
     * @return {?}
     */},{key:'_loadSummary',value:function _loadSummary(type,kind){var/** @type {?} */typeSummary=this._summaryCache.get(type);if(!typeSummary){var/** @type {?} */summary=this._summaryResolver.resolveSummary(type);typeSummary=summary?summary.type:null;this._summaryCache.set(type,typeSummary);}return typeSummary&&typeSummary.summaryKind===kind?typeSummary:null;}/**
     * @param {?} directiveType
     * @param {?} isSync
     * @return {?}
     */},{key:'_loadDirectiveMetadata',value:function _loadDirectiveMetadata(directiveType,isSync){var _this170=this;if(this._directiveCache.has(directiveType)){return;}directiveType=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_102" /* resolveForwardRef */])(directiveType);var _getNonNormalizedDire=this.getNonNormalizedDirectiveMetadata(directiveType),annotation=_getNonNormalizedDire.annotation,metadata=_getNonNormalizedDire.metadata;var/** @type {?} */createDirectiveMetadata=function createDirectiveMetadata(templateMetadata){var/** @type {?} */normalizedDirMeta=new CompileDirectiveMetadata({type:metadata.type,isComponent:metadata.isComponent,selector:metadata.selector,exportAs:metadata.exportAs,changeDetection:metadata.changeDetection,inputs:metadata.inputs,outputs:metadata.outputs,hostListeners:metadata.hostListeners,hostProperties:metadata.hostProperties,hostAttributes:metadata.hostAttributes,providers:metadata.providers,viewProviders:metadata.viewProviders,queries:metadata.queries,viewQueries:metadata.viewQueries,entryComponents:metadata.entryComponents,wrapperType:metadata.wrapperType,componentViewType:metadata.componentViewType,rendererType:metadata.rendererType,componentFactory:metadata.componentFactory,template:templateMetadata});_this170._directiveCache.set(directiveType,normalizedDirMeta);_this170._summaryCache.set(directiveType,normalizedDirMeta.toSummary());return normalizedDirMeta;};if(metadata.isComponent){var/** @type {?} */templateMeta=this._directiveNormalizer.normalizeTemplate({componentType:directiveType,moduleUrl:componentModuleUrl(this._reflector,directiveType,annotation),encapsulation:metadata.template.encapsulation,template:metadata.template.template,templateUrl:metadata.template.templateUrl,styles:metadata.template.styles,styleUrls:metadata.template.styleUrls,animations:metadata.template.animations,interpolation:metadata.template.interpolation});if(templateMeta.syncResult){createDirectiveMetadata(templateMeta.syncResult);return null;}else{if(isSync){this._reportError(componentStillLoadingError(directiveType),directiveType);return null;}return templateMeta.asyncResult.then(createDirectiveMetadata);}}else{// directive
createDirectiveMetadata(null);return null;}}/**
     * @param {?} directiveType
     * @return {?}
     */},{key:'getNonNormalizedDirectiveMetadata',value:function getNonNormalizedDirectiveMetadata(directiveType){var _this171=this;directiveType=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_102" /* resolveForwardRef */])(directiveType);if(!directiveType){return null;}var/** @type {?} */cacheEntry=this._nonNormalizedDirectiveCache.get(directiveType);if(cacheEntry){return cacheEntry;}var/** @type {?} */dirMeta=this._directiveResolver.resolve(directiveType,false);if(!dirMeta){return null;}var/** @type {?} */nonNormalizedTemplateMetadata=void 0;if(dirMeta instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["b" /* Component */]){// component
assertArrayOfStrings('styles',dirMeta.styles);assertArrayOfStrings('styleUrls',dirMeta.styleUrls);assertInterpolationSymbols('interpolation',dirMeta.interpolation);var/** @type {?} */animations=dirMeta.animations;nonNormalizedTemplateMetadata=new CompileTemplateMetadata({encapsulation:dirMeta.encapsulation,template:dirMeta.template,templateUrl:dirMeta.templateUrl,styles:dirMeta.styles,styleUrls:dirMeta.styleUrls,animations:animations,interpolation:dirMeta.interpolation});}var/** @type {?} */changeDetectionStrategy=null;var/** @type {?} */viewProviders=[];var/** @type {?} */entryComponentMetadata=[];var/** @type {?} */selector=dirMeta.selector;if(dirMeta instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["b" /* Component */]){// Component
changeDetectionStrategy=dirMeta.changeDetection;if(dirMeta.viewProviders){viewProviders=this._getProvidersMetadata(dirMeta.viewProviders,entryComponentMetadata,'viewProviders for "'+stringifyType(directiveType)+'"',[],directiveType);}if(dirMeta.entryComponents){entryComponentMetadata=flattenAndDedupeArray(dirMeta.entryComponents).map(function(type){return _this171._getEntryComponentMetadata(type);}).concat(entryComponentMetadata);}if(!selector){selector=this._schemaRegistry.getDefaultComponentElementName();}}else{// Directive
if(!selector){this._reportError(syntaxError('Directive '+stringifyType(directiveType)+' has no selector, please add it!'),directiveType);selector='error';}}var/** @type {?} */providers=[];if(dirMeta.providers!=null){providers=this._getProvidersMetadata(dirMeta.providers,entryComponentMetadata,'providers for "'+stringifyType(directiveType)+'"',[],directiveType);}var/** @type {?} */queries=[];var/** @type {?} */viewQueries=[];if(dirMeta.queries!=null){queries=this._getQueriesMetadata(dirMeta.queries,false,directiveType);viewQueries=this._getQueriesMetadata(dirMeta.queries,true,directiveType);}var/** @type {?} */metadata=CompileDirectiveMetadata.create({selector:selector,exportAs:dirMeta.exportAs,isComponent:!!nonNormalizedTemplateMetadata,type:this._getTypeMetadata(directiveType),template:nonNormalizedTemplateMetadata,changeDetection:changeDetectionStrategy,inputs:dirMeta.inputs,outputs:dirMeta.outputs,host:dirMeta.host,providers:providers,viewProviders:viewProviders,queries:queries,viewQueries:viewQueries,entryComponents:entryComponentMetadata,wrapperType:this.getDirectiveWrapperClass(directiveType),componentViewType:nonNormalizedTemplateMetadata?this.getComponentViewClass(directiveType):undefined,rendererType:nonNormalizedTemplateMetadata?this.getRendererType(directiveType):undefined,componentFactory:nonNormalizedTemplateMetadata?this.getComponentFactory(selector,directiveType):undefined});cacheEntry={metadata:metadata,annotation:dirMeta};this._nonNormalizedDirectiveCache.set(directiveType,cacheEntry);return cacheEntry;}/**
     * Gets the metadata for the given directive.
     * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.
     * @param {?} directiveType
     * @return {?}
     */},{key:'getDirectiveMetadata',value:function getDirectiveMetadata(directiveType){var/** @type {?} */dirMeta=this._directiveCache.get(directiveType);if(!dirMeta){this._reportError(syntaxError('Illegal state: getDirectiveMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Directive '+stringifyType(directiveType)+'.'),directiveType);}return dirMeta;}/**
     * @param {?} dirType
     * @return {?}
     */},{key:'getDirectiveSummary',value:function getDirectiveSummary(dirType){var/** @type {?} */dirSummary=this._loadSummary(dirType,CompileSummaryKind.Directive);if(!dirSummary){this._reportError(syntaxError('Illegal state: Could not load the summary for directive '+stringifyType(dirType)+'.'),dirType);}return dirSummary;}/**
     * @param {?} type
     * @return {?}
     */},{key:'isDirective',value:function isDirective(type){return this._directiveResolver.isDirective(type);}/**
     * @param {?} type
     * @return {?}
     */},{key:'isPipe',value:function isPipe(type){return this._pipeResolver.isPipe(type);}/**
     * @param {?} moduleType
     * @return {?}
     */},{key:'getNgModuleSummary',value:function getNgModuleSummary(moduleType){var/** @type {?} */moduleSummary=this._loadSummary(moduleType,CompileSummaryKind.NgModule);if(!moduleSummary){var/** @type {?} */moduleMeta=this.getNgModuleMetadata(moduleType,false);moduleSummary=moduleMeta?moduleMeta.toSummary():null;if(moduleSummary){this._summaryCache.set(moduleType,moduleSummary);}}return moduleSummary;}/**
     * Loads the declared directives and pipes of an NgModule.
     * @param {?} moduleType
     * @param {?} isSync
     * @param {?=} throwIfNotFound
     * @return {?}
     */},{key:'loadNgModuleDirectiveAndPipeMetadata',value:function loadNgModuleDirectiveAndPipeMetadata(moduleType,isSync){var _this172=this;var throwIfNotFound=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;var/** @type {?} */ngModule=this.getNgModuleMetadata(moduleType,throwIfNotFound);var/** @type {?} */loading=[];if(ngModule){ngModule.declaredDirectives.forEach(function(id){var/** @type {?} */promise=_this172._loadDirectiveMetadata(id.reference,isSync);if(promise){loading.push(promise);}});ngModule.declaredPipes.forEach(function(id){return _this172._loadPipeMetadata(id.reference);});}return Promise.all(loading);}/**
     * @param {?} moduleType
     * @param {?=} throwIfNotFound
     * @return {?}
     */},{key:'getNgModuleMetadata',value:function getNgModuleMetadata(moduleType){var _this173=this;var throwIfNotFound=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;moduleType=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_102" /* resolveForwardRef */])(moduleType);var/** @type {?} */compileMeta=this._ngModuleCache.get(moduleType);if(compileMeta){return compileMeta;}var/** @type {?} */meta=this._ngModuleResolver.resolve(moduleType,throwIfNotFound);if(!meta){return null;}var/** @type {?} */declaredDirectives=[];var/** @type {?} */exportedNonModuleIdentifiers=[];var/** @type {?} */declaredPipes=[];var/** @type {?} */importedModules=[];var/** @type {?} */exportedModules=[];var/** @type {?} */providers=[];var/** @type {?} */entryComponents=[];var/** @type {?} */bootstrapComponents=[];var/** @type {?} */schemas=[];if(meta.imports){flattenAndDedupeArray(meta.imports).forEach(function(importedType){var/** @type {?} */importedModuleType=void 0;if(isValidType(importedType)){importedModuleType=importedType;}else if(importedType&&importedType.ngModule){var/** @type {?} */moduleWithProviders=importedType;importedModuleType=moduleWithProviders.ngModule;if(moduleWithProviders.providers){providers.push.apply(providers,_toConsumableArray(_this173._getProvidersMetadata(moduleWithProviders.providers,entryComponents,'provider for the NgModule \''+stringifyType(importedModuleType)+'\'',[],importedType)));}}if(importedModuleType){var/** @type {?} */importedModuleSummary=_this173.getNgModuleSummary(importedModuleType);if(!importedModuleSummary){_this173._reportError(syntaxError('Unexpected '+_this173._getTypeDescriptor(importedType)+' \''+stringifyType(importedType)+'\' imported by the module \''+stringifyType(moduleType)+'\''),moduleType);return;}importedModules.push(importedModuleSummary);}else{_this173._reportError(syntaxError('Unexpected value \''+stringifyType(importedType)+'\' imported by the module \''+stringifyType(moduleType)+'\''),moduleType);return;}});}if(meta.exports){flattenAndDedupeArray(meta.exports).forEach(function(exportedType){if(!isValidType(exportedType)){_this173._reportError(syntaxError('Unexpected value \''+stringifyType(exportedType)+'\' exported by the module \''+stringifyType(moduleType)+'\''),moduleType);return;}var/** @type {?} */exportedModuleSummary=_this173.getNgModuleSummary(exportedType);if(exportedModuleSummary){exportedModules.push(exportedModuleSummary);}else{exportedNonModuleIdentifiers.push(_this173._getIdentifierMetadata(exportedType));}});}// Note: This will be modified later, so we rely on
// getting a new instance every time!
var/** @type {?} */transitiveModule=this._getTransitiveNgModuleMetadata(importedModules,exportedModules);if(meta.declarations){flattenAndDedupeArray(meta.declarations).forEach(function(declaredType){if(!isValidType(declaredType)){_this173._reportError(syntaxError('Unexpected value \''+stringifyType(declaredType)+'\' declared by the module \''+stringifyType(moduleType)+'\''),moduleType);return;}var/** @type {?} */declaredIdentifier=_this173._getIdentifierMetadata(declaredType);if(_this173._directiveResolver.isDirective(declaredType)){transitiveModule.addDirective(declaredIdentifier);declaredDirectives.push(declaredIdentifier);_this173._addTypeToModule(declaredType,moduleType);}else if(_this173._pipeResolver.isPipe(declaredType)){transitiveModule.addPipe(declaredIdentifier);transitiveModule.pipes.push(declaredIdentifier);declaredPipes.push(declaredIdentifier);_this173._addTypeToModule(declaredType,moduleType);}else{_this173._reportError(syntaxError('Unexpected '+_this173._getTypeDescriptor(declaredType)+' \''+stringifyType(declaredType)+'\' declared by the module \''+stringifyType(moduleType)+'\''),moduleType);return;}});}var/** @type {?} */exportedDirectives=[];var/** @type {?} */exportedPipes=[];exportedNonModuleIdentifiers.forEach(function(exportedId){if(transitiveModule.directivesSet.has(exportedId.reference)){exportedDirectives.push(exportedId);transitiveModule.addExportedDirective(exportedId);}else if(transitiveModule.pipesSet.has(exportedId.reference)){exportedPipes.push(exportedId);transitiveModule.addExportedPipe(exportedId);}else{_this173._reportError(syntaxError('Can\'t export '+_this173._getTypeDescriptor(exportedId.reference)+' '+stringifyType(exportedId.reference)+' from '+stringifyType(moduleType)+' as it was neither declared nor imported!'),moduleType);}});// The providers of the module have to go last
// so that they overwrite any other provider we already added.
if(meta.providers){providers.push.apply(providers,_toConsumableArray(this._getProvidersMetadata(meta.providers,entryComponents,'provider for the NgModule \''+stringifyType(moduleType)+'\'',[],moduleType)));}if(meta.entryComponents){entryComponents.push.apply(entryComponents,_toConsumableArray(flattenAndDedupeArray(meta.entryComponents).map(function(type){return _this173._getEntryComponentMetadata(type);})));}if(meta.bootstrap){flattenAndDedupeArray(meta.bootstrap).forEach(function(type){if(!isValidType(type)){_this173._reportError(syntaxError('Unexpected value \''+stringifyType(type)+'\' used in the bootstrap property of module \''+stringifyType(moduleType)+'\''),moduleType);return;}bootstrapComponents.push(_this173._getIdentifierMetadata(type));});}entryComponents.push.apply(entryComponents,_toConsumableArray(bootstrapComponents.map(function(type){return _this173._getEntryComponentMetadata(type.reference);})));if(meta.schemas){schemas.push.apply(schemas,_toConsumableArray(flattenAndDedupeArray(meta.schemas)));}compileMeta=new CompileNgModuleMetadata({type:this._getTypeMetadata(moduleType),providers:providers,entryComponents:entryComponents,bootstrapComponents:bootstrapComponents,schemas:schemas,declaredDirectives:declaredDirectives,exportedDirectives:exportedDirectives,declaredPipes:declaredPipes,exportedPipes:exportedPipes,importedModules:importedModules,exportedModules:exportedModules,transitiveModule:transitiveModule,id:meta.id});entryComponents.forEach(function(id){return transitiveModule.addEntryComponent(id);});providers.forEach(function(provider){return transitiveModule.addProvider(provider,compileMeta.type);});transitiveModule.addModule(compileMeta.type);this._ngModuleCache.set(moduleType,compileMeta);return compileMeta;}/**
     * @param {?} type
     * @return {?}
     */},{key:'_getTypeDescriptor',value:function _getTypeDescriptor(type){if(this._directiveResolver.isDirective(type)){return'directive';}if(this._pipeResolver.isPipe(type)){return'pipe';}if(this._ngModuleResolver.isNgModule(type)){return'module';}if(type.provide){return'provider';}return'value';}/**
     * @param {?} type
     * @param {?} moduleType
     * @return {?}
     */},{key:'_addTypeToModule',value:function _addTypeToModule(type,moduleType){var/** @type {?} */oldModule=this._ngModuleOfTypes.get(type);if(oldModule&&oldModule!==moduleType){this._reportError(syntaxError('Type '+stringifyType(type)+' is part of the declarations of 2 modules: '+stringifyType(oldModule)+' and '+stringifyType(moduleType)+'! '+('Please consider moving '+stringifyType(type)+' to a higher module that imports '+stringifyType(oldModule)+' and '+stringifyType(moduleType)+'. ')+('You can also create a new NgModule that exports and includes '+stringifyType(type)+' then import that NgModule in '+stringifyType(oldModule)+' and '+stringifyType(moduleType)+'.')),moduleType);}this._ngModuleOfTypes.set(type,moduleType);}/**
     * @param {?} importedModules
     * @param {?} exportedModules
     * @return {?}
     */},{key:'_getTransitiveNgModuleMetadata',value:function _getTransitiveNgModuleMetadata(importedModules,exportedModules){// collect `providers` / `entryComponents` from all imported and all exported modules
var/** @type {?} */result=new TransitiveCompileNgModuleMetadata();var/** @type {?} */modulesByToken=new Map();importedModules.concat(exportedModules).forEach(function(modSummary){modSummary.modules.forEach(function(mod){return result.addModule(mod);});modSummary.entryComponents.forEach(function(comp){return result.addEntryComponent(comp);});var/** @type {?} */addedTokens=new Set();modSummary.providers.forEach(function(entry){var/** @type {?} */tokenRef=tokenReference(entry.provider.token);var/** @type {?} */prevModules=modulesByToken.get(tokenRef);if(!prevModules){prevModules=new Set();modulesByToken.set(tokenRef,prevModules);}var/** @type {?} */moduleRef=entry.module.reference;// Note: the providers of one module may still contain multiple providers
// per token (e.g. for multi providers), and we need to preserve these.
if(addedTokens.has(tokenRef)||!prevModules.has(moduleRef)){prevModules.add(moduleRef);addedTokens.add(tokenRef);result.addProvider(entry.provider,entry.module);}});});exportedModules.forEach(function(modSummary){modSummary.exportedDirectives.forEach(function(id){return result.addExportedDirective(id);});modSummary.exportedPipes.forEach(function(id){return result.addExportedPipe(id);});});importedModules.forEach(function(modSummary){modSummary.exportedDirectives.forEach(function(id){return result.addDirective(id);});modSummary.exportedPipes.forEach(function(id){return result.addPipe(id);});});return result;}/**
     * @param {?} type
     * @return {?}
     */},{key:'_getIdentifierMetadata',value:function _getIdentifierMetadata(type){type=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_102" /* resolveForwardRef */])(type);return{reference:type};}/**
     * @param {?} type
     * @return {?}
     */},{key:'isInjectable',value:function isInjectable(type){var/** @type {?} */annotations=this._reflector.annotations(type);// Note: We need an exact check here as @Component / @Directive / ... inherit
// from @CompilerInjectable!
return annotations.some(function(ann){return ann.constructor===__WEBPACK_IMPORTED_MODULE_0__angular_core__["B" /* Injectable */];});}/**
     * @param {?} type
     * @return {?}
     */},{key:'getInjectableSummary',value:function getInjectableSummary(type){return{summaryKind:CompileSummaryKind.Injectable,type:this._getTypeMetadata(type)};}/**
     * @param {?} type
     * @param {?=} dependencies
     * @return {?}
     */},{key:'_getInjectableMetadata',value:function _getInjectableMetadata(type){var dependencies=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var/** @type {?} */typeSummary=this._loadSummary(type,CompileSummaryKind.Injectable);if(typeSummary){return typeSummary.type;}return this._getTypeMetadata(type,dependencies);}/**
     * @param {?} type
     * @param {?=} dependencies
     * @return {?}
     */},{key:'_getTypeMetadata',value:function _getTypeMetadata(type){var dependencies=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var/** @type {?} */identifier=this._getIdentifierMetadata(type);return{reference:identifier.reference,diDeps:this._getDependenciesMetadata(identifier.reference,dependencies),lifecycleHooks:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_107" /* ɵLIFECYCLE_HOOKS_VALUES */].filter(function(hook){return hasLifecycleHook(hook,identifier.reference);})};}/**
     * @param {?} factory
     * @param {?=} dependencies
     * @return {?}
     */},{key:'_getFactoryMetadata',value:function _getFactoryMetadata(factory){var dependencies=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;factory=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_102" /* resolveForwardRef */])(factory);return{reference:factory,diDeps:this._getDependenciesMetadata(factory,dependencies)};}/**
     * Gets the metadata for the given pipe.
     * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.
     * @param {?} pipeType
     * @return {?}
     */},{key:'getPipeMetadata',value:function getPipeMetadata(pipeType){var/** @type {?} */pipeMeta=this._pipeCache.get(pipeType);if(!pipeMeta){this._reportError(syntaxError('Illegal state: getPipeMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Pipe '+stringifyType(pipeType)+'.'),pipeType);}return pipeMeta;}/**
     * @param {?} pipeType
     * @return {?}
     */},{key:'getPipeSummary',value:function getPipeSummary(pipeType){var/** @type {?} */pipeSummary=this._loadSummary(pipeType,CompileSummaryKind.Pipe);if(!pipeSummary){this._reportError(syntaxError('Illegal state: Could not load the summary for pipe '+stringifyType(pipeType)+'.'),pipeType);}return pipeSummary;}/**
     * @param {?} pipeType
     * @return {?}
     */},{key:'getOrLoadPipeMetadata',value:function getOrLoadPipeMetadata(pipeType){var/** @type {?} */pipeMeta=this._pipeCache.get(pipeType);if(!pipeMeta){pipeMeta=this._loadPipeMetadata(pipeType);}return pipeMeta;}/**
     * @param {?} pipeType
     * @return {?}
     */},{key:'_loadPipeMetadata',value:function _loadPipeMetadata(pipeType){pipeType=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_102" /* resolveForwardRef */])(pipeType);var/** @type {?} */pipeAnnotation=this._pipeResolver.resolve(pipeType);var/** @type {?} */pipeMeta=new CompilePipeMetadata({type:this._getTypeMetadata(pipeType),name:pipeAnnotation.name,pure:pipeAnnotation.pure});this._pipeCache.set(pipeType,pipeMeta);this._summaryCache.set(pipeType,pipeMeta.toSummary());return pipeMeta;}/**
     * @param {?} typeOrFunc
     * @param {?} dependencies
     * @return {?}
     */},{key:'_getDependenciesMetadata',value:function _getDependenciesMetadata(typeOrFunc,dependencies){var _this174=this;var/** @type {?} */hasUnknownDeps=false;var/** @type {?} */params=dependencies||this._reflector.parameters(typeOrFunc)||[];var/** @type {?} */dependenciesMetadata=params.map(function(param){var/** @type {?} */isAttribute=false;var/** @type {?} */isHost=false;var/** @type {?} */isSelf=false;var/** @type {?} */isSkipSelf=false;var/** @type {?} */isOptional=false;var/** @type {?} */token=null;if(Array.isArray(param)){param.forEach(function(paramEntry){if(paramEntry instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["_7" /* Host */]){isHost=true;}else if(paramEntry instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["_11" /* Self */]){isSelf=true;}else if(paramEntry instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["H" /* SkipSelf */]){isSkipSelf=true;}else if(paramEntry instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["E" /* Optional */]){isOptional=true;}else if(paramEntry instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["r" /* Attribute */]){isAttribute=true;token=paramEntry.attributeName;}else if(paramEntry instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["I" /* Inject */]){token=paramEntry.token;}else if(paramEntry instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["n" /* InjectionToken */]){token=paramEntry;}else if(isValidType(paramEntry)&&token==null){token=paramEntry;}});}else{token=param;}if(token==null){hasUnknownDeps=true;return null;}return{isAttribute:isAttribute,isHost:isHost,isSelf:isSelf,isSkipSelf:isSkipSelf,isOptional:isOptional,token:_this174._getTokenMetadata(token)};});if(hasUnknownDeps){var/** @type {?} */depsTokens=dependenciesMetadata.map(function(dep){return dep?stringifyType(dep.token):'?';}).join(', ');this._reportError(syntaxError('Can\'t resolve all parameters for '+stringifyType(typeOrFunc)+': ('+depsTokens+').'),typeOrFunc);}return dependenciesMetadata;}/**
     * @param {?} token
     * @return {?}
     */},{key:'_getTokenMetadata',value:function _getTokenMetadata(token){token=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_102" /* resolveForwardRef */])(token);var/** @type {?} */compileToken=void 0;if(typeof token==='string'){compileToken={value:token};}else{compileToken={identifier:{reference:token}};}return compileToken;}/**
     * @param {?} providers
     * @param {?} targetEntryComponents
     * @param {?=} debugInfo
     * @param {?=} compileProviders
     * @param {?=} type
     * @return {?}
     */},{key:'_getProvidersMetadata',value:function _getProvidersMetadata(providers,targetEntryComponents,debugInfo){var _this175=this;var compileProviders=arguments.length>3&&arguments[3]!==undefined?arguments[3]:[];var type=arguments[4];providers.forEach(function(provider,providerIdx){if(Array.isArray(provider)){_this175._getProvidersMetadata(provider,targetEntryComponents,debugInfo,compileProviders);}else{provider=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_102" /* resolveForwardRef */])(provider);var/** @type {?} */providerMeta=void 0;if(provider&&(typeof provider==='undefined'?'undefined':_typeof(provider))==='object'&&provider.hasOwnProperty('provide')){_this175._validateProvider(provider);providerMeta=new ProviderMeta(provider.provide,provider);}else if(isValidType(provider)){providerMeta=new ProviderMeta(provider,{useClass:provider});}else if(provider===void 0){_this175._reportError(syntaxError('Encountered undefined provider! Usually this means you have a circular dependencies (might be caused by using \'barrel\' index.ts files.'));}else{var/** @type {?} */providersInfo=providers.reduce(function(soFar,seenProvider,seenProviderIdx){if(seenProviderIdx<providerIdx){soFar.push(''+stringifyType(seenProvider));}else if(seenProviderIdx==providerIdx){soFar.push('?'+stringifyType(seenProvider)+'?');}else if(seenProviderIdx==providerIdx+1){soFar.push('...');}return soFar;},[]).join(', ');_this175._reportError(syntaxError('Invalid '+(debugInfo?debugInfo:'provider')+' - only instances of Provider and Type are allowed, got: ['+providersInfo+']'),type);}if(providerMeta.token===resolveIdentifier(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS)){targetEntryComponents.push.apply(targetEntryComponents,_toConsumableArray(_this175._getEntryComponentsFromProvider(providerMeta,type)));}else{compileProviders.push(_this175.getProviderMetadata(providerMeta));}}});return compileProviders;}/**
     * @param {?} provider
     * @return {?}
     */},{key:'_validateProvider',value:function _validateProvider(provider){if(provider.hasOwnProperty('useClass')&&provider.useClass==null){this._reportError(syntaxError('Invalid provider for '+stringifyType(provider.provide)+'. useClass cannot be '+provider.useClass+'.\n           Usually it happens when:\n           1. There\'s a circular dependency (might be caused by using index.ts (barrel) files).\n           2. Class was used before it was declared. Use forwardRef in this case.'));}}/**
     * @param {?} provider
     * @param {?=} type
     * @return {?}
     */},{key:'_getEntryComponentsFromProvider',value:function _getEntryComponentsFromProvider(provider,type){var _this176=this;var/** @type {?} */components=[];var/** @type {?} */collectedIdentifiers=[];if(provider.useFactory||provider.useExisting||provider.useClass){this._reportError(syntaxError('The ANALYZE_FOR_ENTRY_COMPONENTS token only supports useValue!'),type);return[];}if(!provider.multi){this._reportError(syntaxError('The ANALYZE_FOR_ENTRY_COMPONENTS token only supports \'multi = true\'!'),type);return[];}extractIdentifiers(provider.useValue,collectedIdentifiers);collectedIdentifiers.forEach(function(identifier){var/** @type {?} */entry=_this176._getEntryComponentMetadata(identifier.reference,false);if(entry){components.push(entry);}});return components;}/**
     * @param {?} dirType
     * @param {?=} throwIfNotFound
     * @return {?}
     */},{key:'_getEntryComponentMetadata',value:function _getEntryComponentMetadata(dirType){var throwIfNotFound=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var/** @type {?} */dirMeta=this.getNonNormalizedDirectiveMetadata(dirType);if(dirMeta&&dirMeta.metadata.isComponent){return{componentType:dirType,componentFactory:dirMeta.metadata.componentFactory};}else{var/** @type {?} */dirSummary=this._loadSummary(dirType,CompileSummaryKind.Directive);if(dirSummary&&dirSummary.isComponent){return{componentType:dirType,componentFactory:dirSummary.componentFactory};}}if(throwIfNotFound){throw syntaxError(dirType.name+' cannot be used as an entry component.');}}/**
     * @param {?} provider
     * @return {?}
     */},{key:'getProviderMetadata',value:function getProviderMetadata(provider){var/** @type {?} */compileDeps=void 0;var/** @type {?} */compileTypeMetadata=null;var/** @type {?} */compileFactoryMetadata=null;var/** @type {?} */token=this._getTokenMetadata(provider.token);if(provider.useClass){compileTypeMetadata=this._getInjectableMetadata(provider.useClass,provider.dependencies);compileDeps=compileTypeMetadata.diDeps;if(provider.token===provider.useClass){// use the compileTypeMetadata as it contains information about lifecycleHooks...
token={identifier:compileTypeMetadata};}}else if(provider.useFactory){compileFactoryMetadata=this._getFactoryMetadata(provider.useFactory,provider.dependencies);compileDeps=compileFactoryMetadata.diDeps;}return{token:token,useClass:compileTypeMetadata,useValue:provider.useValue,useFactory:compileFactoryMetadata,useExisting:provider.useExisting?this._getTokenMetadata(provider.useExisting):null,deps:compileDeps,multi:provider.multi};}/**
     * @param {?} queries
     * @param {?} isViewQuery
     * @param {?} directiveType
     * @return {?}
     */},{key:'_getQueriesMetadata',value:function _getQueriesMetadata(queries,isViewQuery,directiveType){var _this177=this;var/** @type {?} */res=[];Object.keys(queries).forEach(function(propertyName){var/** @type {?} */query=queries[propertyName];if(query.isViewQuery===isViewQuery){res.push(_this177._getQueryMetadata(query,propertyName,directiveType));}});return res;}/**
     * @param {?} selector
     * @return {?}
     */},{key:'_queryVarBindings',value:function _queryVarBindings(selector){return selector.split(/\s*,\s*/);}/**
     * @param {?} q
     * @param {?} propertyName
     * @param {?} typeOrFunc
     * @return {?}
     */},{key:'_getQueryMetadata',value:function _getQueryMetadata(q,propertyName,typeOrFunc){var _this178=this;var/** @type {?} */selectors=void 0;if(typeof q.selector==='string'){selectors=this._queryVarBindings(q.selector).map(function(varName){return _this178._getTokenMetadata(varName);});}else{if(!q.selector){this._reportError(syntaxError('Can\'t construct a query for the property "'+propertyName+'" of "'+stringifyType(typeOrFunc)+'" since the query selector wasn\'t defined.'),typeOrFunc);}selectors=[this._getTokenMetadata(q.selector)];}return{selectors:selectors,first:q.first,descendants:q.descendants,propertyName:propertyName,read:q.read?this._getTokenMetadata(q.read):null};}/**
     * @param {?} error
     * @param {?=} type
     * @param {?=} otherType
     * @return {?}
     */},{key:'_reportError',value:function _reportError(error,type,otherType){if(this._errorCollector){this._errorCollector(error,type);if(otherType){this._errorCollector(error,otherType);}}else{throw error;}}}]);return CompileMetadataResolver;}();CompileMetadataResolver.decorators=[{type:CompilerInjectable}];/** @nocollapse */CompileMetadataResolver.ctorParameters=function(){return[{type:CompilerConfig},{type:NgModuleResolver},{type:DirectiveResolver},{type:PipeResolver},{type:SummaryResolver},{type:ElementSchemaRegistry},{type:DirectiveNormalizer},{type:StaticSymbolCache,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["E" /* Optional */]}]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_104" /* ɵReflectorReader */]},{type:undefined,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["E" /* Optional */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["I" /* Inject */],args:[ERROR_COLLECTOR_TOKEN]}]}];};/**
 * @param {?} tree
 * @param {?=} out
 * @return {?}
 */function flattenArray(tree){var out=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];if(tree){for(var/** @type {?} */i=0;i<tree.length;i++){var/** @type {?} */item=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_102" /* resolveForwardRef */])(tree[i]);if(Array.isArray(item)){flattenArray(item,out);}else{out.push(item);}}}return out;}/**
 * @param {?} array
 * @return {?}
 */function dedupeArray(array){if(array){return Array.from(new Set(array));}return[];}/**
 * @param {?} tree
 * @return {?}
 */function flattenAndDedupeArray(tree){return dedupeArray(flattenArray(tree));}/**
 * @param {?} value
 * @return {?}
 */function isValidType(value){return value instanceof StaticSymbol||value instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["_108" /* Type */];}/**
 * @param {?} reflector
 * @param {?} type
 * @param {?} cmpMetadata
 * @return {?}
 */function componentModuleUrl(reflector,type,cmpMetadata){if(type instanceof StaticSymbol){return type.filePath;}var/** @type {?} */moduleId=cmpMetadata.moduleId;if(typeof moduleId==='string'){var/** @type {?} */scheme=getUrlScheme(moduleId);return scheme?moduleId:'package:'+moduleId+MODULE_SUFFIX;}else if(moduleId!==null&&moduleId!==void 0){throw syntaxError('moduleId should be a string in "'+stringifyType(type)+'". See https://goo.gl/wIDDiL for more information.\n'+'If you\'re using Webpack you should inline the template and the styles, see https://goo.gl/X2J8zc.');}return reflector.importUri(type);}/**
 * @param {?} value
 * @param {?} targetIdentifiers
 * @return {?}
 */function extractIdentifiers(value,targetIdentifiers){visitValue(value,new _CompileValueConverter(),targetIdentifiers);}var _CompileValueConverter=function(_ValueTransformer){_inherits(_CompileValueConverter,_ValueTransformer);function _CompileValueConverter(){_classCallCheck(this,_CompileValueConverter);return _possibleConstructorReturn(this,(_CompileValueConverter.__proto__||Object.getPrototypeOf(_CompileValueConverter)).apply(this,arguments));}_createClass(_CompileValueConverter,[{key:'visitOther',/**
     * @param {?} value
     * @param {?} targetIdentifiers
     * @return {?}
     */value:function visitOther(value,targetIdentifiers){targetIdentifiers.push({reference:value});}}]);return _CompileValueConverter;}(ValueTransformer);/**
 * @param {?} type
 * @return {?}
 */function stringifyType(type){if(type instanceof StaticSymbol){return type.name+' in '+type.filePath;}else{return stringify(type);}}/**
 * Indicates that a component is still being loaded in a synchronous compile.
 * @param {?} compType
 * @return {?}
 */function componentStillLoadingError(compType){debugger;var/** @type {?} */error=Error('Can\'t compile synchronously as '+stringify(compType)+' is still being loaded!');error[__WEBPACK_IMPORTED_MODULE_0__angular_core__["_109" /* ɵERROR_COMPONENT_TYPE */]]=compType;return error;}var/** @type {?} */QUOTED_KEYS='$quoted$';/**
 * @param {?} value
 * @param {?=} type
 * @return {?}
 */function convertValueToOutputAst(value){var type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return visitValue(value,new _ValueOutputAstTransformer(),type);}var _ValueOutputAstTransformer=function(){function _ValueOutputAstTransformer(){_classCallCheck(this,_ValueOutputAstTransformer);}_createClass(_ValueOutputAstTransformer,[{key:'visitArray',/**
     * @param {?} arr
     * @param {?} type
     * @return {?}
     */value:function visitArray(arr,type){var _this180=this;return literalArr(arr.map(function(value){return visitValue(value,_this180,null);}),type);}/**
     * @param {?} map
     * @param {?} type
     * @return {?}
     */},{key:'visitStringMap',value:function visitStringMap(map,type){var _this181=this;var/** @type {?} */entries=[];var/** @type {?} */quotedSet=new Set(map&&map[QUOTED_KEYS]);Object.keys(map).forEach(function(key){entries.push(new LiteralMapEntry(key,visitValue(map[key],_this181,null),quotedSet.has(key)));});return new LiteralMapExpr(entries,type);}/**
     * @param {?} value
     * @param {?} type
     * @return {?}
     */},{key:'visitPrimitive',value:function visitPrimitive(value,type){return literal(value,type);}/**
     * @param {?} value
     * @param {?} type
     * @return {?}
     */},{key:'visitOther',value:function visitOther(value,type){if(value instanceof Expression){return value;}else{return importExpr({reference:value});}}}]);return _ValueOutputAstTransformer;}();/**
 * This is currently not read, but will probably be used in the future.
 * We keep it as we already pass it through all the rigth places...
 */var ComponentFactoryDependency=/**
     * @param {?} compType
     */function ComponentFactoryDependency(compType){_classCallCheck(this,ComponentFactoryDependency);this.compType=compType;};var NgModuleCompileResult=/**
     * @param {?} statements
     * @param {?} ngModuleFactoryVar
     * @param {?} dependencies
     */function NgModuleCompileResult(statements,ngModuleFactoryVar,dependencies){_classCallCheck(this,NgModuleCompileResult);this.statements=statements;this.ngModuleFactoryVar=ngModuleFactoryVar;this.dependencies=dependencies;};var NgModuleCompiler=function(){function NgModuleCompiler(){_classCallCheck(this,NgModuleCompiler);}_createClass(NgModuleCompiler,[{key:'compile',/**
     * @param {?} ngModuleMeta
     * @param {?} extraProviders
     * @return {?}
     */value:function compile(ngModuleMeta,extraProviders){var/** @type {?} */moduleUrl=identifierModuleUrl(ngModuleMeta.type);var/** @type {?} */sourceFileName=isPresent(moduleUrl)?'in NgModule '+identifierName(ngModuleMeta.type)+' in '+moduleUrl:'in NgModule '+identifierName(ngModuleMeta.type);var/** @type {?} */sourceFile=new ParseSourceFile('',sourceFileName);var/** @type {?} */sourceSpan=new ParseSourceSpan(new ParseLocation(sourceFile,null,null,null),new ParseLocation(sourceFile,null,null,null));var/** @type {?} */deps=[];var/** @type {?} */bootstrapComponentFactories=[];var/** @type {?} */entryComponentFactories=ngModuleMeta.transitiveModule.entryComponents.map(function(entryComponent){if(ngModuleMeta.bootstrapComponents.some(function(id){return id.reference===entryComponent.componentType;})){bootstrapComponentFactories.push({reference:entryComponent.componentFactory});}deps.push(new ComponentFactoryDependency(entryComponent.componentType));return{reference:entryComponent.componentFactory};});var/** @type {?} */builder=new _InjectorBuilder(ngModuleMeta,entryComponentFactories,bootstrapComponentFactories,sourceSpan);var/** @type {?} */providerParser=new NgModuleProviderAnalyzer(ngModuleMeta,extraProviders,sourceSpan);providerParser.parse().forEach(function(provider){return builder.addProvider(provider);});var/** @type {?} */injectorClass=builder.build();var/** @type {?} */ngModuleFactoryVar=identifierName(ngModuleMeta.type)+'NgFactory';var/** @type {?} */ngModuleFactoryStmt=variable(ngModuleFactoryVar).set(importExpr(createIdentifier(Identifiers.NgModuleFactory)).instantiate([variable(injectorClass.name),importExpr(ngModuleMeta.type)],importType(createIdentifier(Identifiers.NgModuleFactory),[importType(ngModuleMeta.type)],[TypeModifier.Const]))).toDeclStmt(null,[StmtModifier.Final]);var/** @type {?} */stmts=[injectorClass,ngModuleFactoryStmt];if(ngModuleMeta.id){var/** @type {?} */registerFactoryStmt=importExpr(createIdentifier(Identifiers.RegisterModuleFactoryFn)).callFn([literal(ngModuleMeta.id),variable(ngModuleFactoryVar)]).toStmt();stmts.push(registerFactoryStmt);}return new NgModuleCompileResult(stmts,ngModuleFactoryVar,deps);}}]);return NgModuleCompiler;}();NgModuleCompiler.decorators=[{type:CompilerInjectable}];/** @nocollapse */NgModuleCompiler.ctorParameters=function(){return[];};var _InjectorBuilder=function(){/**
     * @param {?} _ngModuleMeta
     * @param {?} _entryComponentFactories
     * @param {?} _bootstrapComponentFactories
     * @param {?} _sourceSpan
     */function _InjectorBuilder(_ngModuleMeta,_entryComponentFactories,_bootstrapComponentFactories,_sourceSpan){_classCallCheck(this,_InjectorBuilder);this._ngModuleMeta=_ngModuleMeta;this._entryComponentFactories=_entryComponentFactories;this._bootstrapComponentFactories=_bootstrapComponentFactories;this._sourceSpan=_sourceSpan;this.fields=[];this.getters=[];this.methods=[];this.ctorStmts=[];this._tokens=[];this._instances=new Map();this._createStmts=[];this._destroyStmts=[];}/**
     * @param {?} resolvedProvider
     * @return {?}
     */_createClass(_InjectorBuilder,[{key:'addProvider',value:function addProvider(resolvedProvider){var _this182=this;var/** @type {?} */providerValueExpressions=resolvedProvider.providers.map(function(provider){return _this182._getProviderValue(provider);});var/** @type {?} */propName='_'+tokenName(resolvedProvider.token)+'_'+this._instances.size;var/** @type {?} */instance=this._createProviderProperty(propName,resolvedProvider,providerValueExpressions,resolvedProvider.multiProvider,resolvedProvider.eager);if(resolvedProvider.lifecycleHooks.indexOf(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_106" /* ɵLifecycleHooks */].OnDestroy)!==-1){this._destroyStmts.push(instance.callMethod('ngOnDestroy',[]).toStmt());}this._tokens.push(resolvedProvider.token);this._instances.set(tokenReference(resolvedProvider.token),instance);}/**
     * @return {?}
     */},{key:'build',value:function build(){var _this183=this;var/** @type {?} */getMethodStmts=this._tokens.map(function(token){var/** @type {?} */providerExpr=_this183._instances.get(tokenReference(token));return new IfStmt(InjectMethodVars.token.identical(createDiTokenExpression(token)),[new ReturnStatement(providerExpr)]);});var/** @type {?} */methods=[new ClassMethod('createInternal',[],this._createStmts.concat(new ReturnStatement(this._instances.get(this._ngModuleMeta.type.reference))),importType(this._ngModuleMeta.type)),new ClassMethod('getInternal',[new FnParam(InjectMethodVars.token.name,DYNAMIC_TYPE),new FnParam(InjectMethodVars.notFoundResult.name,DYNAMIC_TYPE)],getMethodStmts.concat([new ReturnStatement(InjectMethodVars.notFoundResult)]),DYNAMIC_TYPE),new ClassMethod('destroyInternal',[],this._destroyStmts)];var/** @type {?} */parentArgs=[variable(InjectorProps.parent.name),literalArr(this._entryComponentFactories.map(function(componentFactory){return importExpr(componentFactory);})),literalArr(this._bootstrapComponentFactories.map(function(componentFactory){return importExpr(componentFactory);}))];var/** @type {?} */injClassName=identifierName(this._ngModuleMeta.type)+'Injector';return createClassStmt({name:injClassName,ctorParams:[new FnParam(InjectorProps.parent.name,importType(createIdentifier(Identifiers.Injector)))],parent:importExpr(createIdentifier(Identifiers.NgModuleInjector),[importType(this._ngModuleMeta.type)]),parentArgs:parentArgs,builders:[{methods:methods},this]});}/**
     * @param {?} provider
     * @return {?}
     */},{key:'_getProviderValue',value:function _getProviderValue(provider){var _this184=this;var/** @type {?} */result=void 0;if(isPresent(provider.useExisting)){result=this._getDependency({token:provider.useExisting});}else if(isPresent(provider.useFactory)){var/** @type {?} */deps=provider.deps||provider.useFactory.diDeps;var/** @type {?} */depsExpr=deps.map(function(dep){return _this184._getDependency(dep);});result=importExpr(provider.useFactory).callFn(depsExpr);}else if(isPresent(provider.useClass)){var/** @type {?} */_deps3=provider.deps||provider.useClass.diDeps;var/** @type {?} */_depsExpr=_deps3.map(function(dep){return _this184._getDependency(dep);});result=importExpr(provider.useClass).instantiate(_depsExpr,importType(provider.useClass));}else{result=convertValueToOutputAst(provider.useValue);}return result;}/**
     * @param {?} propName
     * @param {?} provider
     * @param {?} providerValueExpressions
     * @param {?} isMulti
     * @param {?} isEager
     * @return {?}
     */},{key:'_createProviderProperty',value:function _createProviderProperty(propName,provider,providerValueExpressions,isMulti,isEager){var/** @type {?} */resolvedProviderValueExpr=void 0;var/** @type {?} */type=void 0;if(isMulti){resolvedProviderValueExpr=literalArr(providerValueExpressions);type=new ArrayType(DYNAMIC_TYPE);}else{resolvedProviderValueExpr=providerValueExpressions[0];type=providerValueExpressions[0].type;}if(!type){type=DYNAMIC_TYPE;}if(isEager){this.fields.push(new ClassField(propName,type));this._createStmts.push(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());}else{var/** @type {?} */internalField='_'+propName;this.fields.push(new ClassField(internalField,type));// Note: Equals is important for JS so that it also checks the undefined case!
var/** @type {?} */getterStmts=[new IfStmt(THIS_EXPR.prop(internalField).isBlank(),[THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]),new ReturnStatement(THIS_EXPR.prop(internalField))];this.getters.push(new ClassGetter(propName,getterStmts,type));}return THIS_EXPR.prop(propName);}/**
     * @param {?} dep
     * @return {?}
     */},{key:'_getDependency',value:function _getDependency(dep){var/** @type {?} */result=null;if(dep.isValue){result=literal(dep.value);}if(!dep.isSkipSelf){if(dep.token&&(tokenReference(dep.token)===resolveIdentifier(Identifiers.Injector)||tokenReference(dep.token)===resolveIdentifier(Identifiers.ComponentFactoryResolver))){result=THIS_EXPR;}if(!result){result=this._instances.get(tokenReference(dep.token));}}if(!result){var/** @type {?} */args=[createDiTokenExpression(dep.token)];if(dep.isOptional){args.push(NULL_EXPR);}result=InjectorProps.parent.callMethod('get',args);}return result;}}]);return _InjectorBuilder;}();var InjectorProps=function InjectorProps(){_classCallCheck(this,InjectorProps);};InjectorProps.parent=THIS_EXPR.prop('parent');var InjectMethodVars=function InjectMethodVars(){_classCallCheck(this,InjectMethodVars);};InjectMethodVars.token=variable('token');InjectMethodVars.notFoundResult=variable('notFoundResult');/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */// https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit
var/** @type {?} */VERSION$1=3;var/** @type {?} */JS_B64_PREFIX='# sourceMappingURL=data:application/json;base64,';var SourceMapGenerator=function(){/**
     * @param {?=} file
     */function SourceMapGenerator(){var file=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;_classCallCheck(this,SourceMapGenerator);this.file=file;this.sourcesContent=new Map();this.lines=[];this.lastCol0=0;this.hasMappings=false;}/**
     * @param {?} url
     * @param {?=} content
     * @return {?}
     */_createClass(SourceMapGenerator,[{key:'addSource',value:function addSource(url){var content=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;if(!this.sourcesContent.has(url)){this.sourcesContent.set(url,content);}return this;}/**
     * @return {?}
     */},{key:'addLine',value:function addLine(){this.lines.push([]);this.lastCol0=0;return this;}/**
     * @param {?} col0
     * @param {?=} sourceUrl
     * @param {?=} sourceLine0
     * @param {?=} sourceCol0
     * @return {?}
     */},{key:'addMapping',value:function addMapping(col0,sourceUrl,sourceLine0,sourceCol0){if(!this.currentLine){throw new Error('A line must be added before mappings can be added');}if(sourceUrl!=null&&!this.sourcesContent.has(sourceUrl)){throw new Error('Unknown source file "'+sourceUrl+'"');}if(col0==null){throw new Error('The column in the generated code must be provided');}if(col0<this.lastCol0){throw new Error('Mapping should be added in output order');}if(sourceUrl&&(sourceLine0==null||sourceCol0==null)){throw new Error('The source location must be provided when a source url is provided');}this.hasMappings=true;this.lastCol0=col0;this.currentLine.push({col0:col0,sourceUrl:sourceUrl,sourceLine0:sourceLine0,sourceCol0:sourceCol0});return this;}/**
     * @return {?}
     */},{key:'toJSON',/**
     * @return {?}
     */value:function toJSON(){var _this185=this;if(!this.hasMappings){return null;}var/** @type {?} */sourcesIndex=new Map();var/** @type {?} */sources=[];var/** @type {?} */sourcesContent=[];Array.from(this.sourcesContent.keys()).forEach(function(url,i){sourcesIndex.set(url,i);sources.push(url);sourcesContent.push(_this185.sourcesContent.get(url)||null);});var/** @type {?} */mappings='';var/** @type {?} */lastCol0=0;var/** @type {?} */lastSourceIndex=0;var/** @type {?} */lastSourceLine0=0;var/** @type {?} */lastSourceCol0=0;this.lines.forEach(function(segments){lastCol0=0;mappings+=segments.map(function(segment){// zero-based starting column of the line in the generated code
var/** @type {?} */segAsStr=toBase64VLQ(segment.col0-lastCol0);lastCol0=segment.col0;if(segment.sourceUrl!=null){// zero-based index into the “sources” list
segAsStr+=toBase64VLQ(sourcesIndex.get(segment.sourceUrl)-lastSourceIndex);lastSourceIndex=sourcesIndex.get(segment.sourceUrl);// the zero-based starting line in the original source
segAsStr+=toBase64VLQ(segment.sourceLine0-lastSourceLine0);lastSourceLine0=segment.sourceLine0;// the zero-based starting column in the original source
segAsStr+=toBase64VLQ(segment.sourceCol0-lastSourceCol0);lastSourceCol0=segment.sourceCol0;}return segAsStr;}).join(',');mappings+=';';});mappings=mappings.slice(0,-1);return{'file':this.file||'','version':VERSION$1,'sourceRoot':'','sources':sources,'sourcesContent':sourcesContent,'mappings':mappings};}/**
     * @return {?}
     */},{key:'toJsComment',value:function toJsComment(){return this.hasMappings?'//'+JS_B64_PREFIX+toBase64String(JSON.stringify(this,null,0)):'';}},{key:'currentLine',get:function get(){return this.lines.slice(-1)[0];}}]);return SourceMapGenerator;}();/**
 * @param {?} value
 * @return {?}
 */function toBase64String(value){var/** @type {?} */b64='';for(var/** @type {?} */i=0;i<value.length;){var/** @type {?} */i1=value.charCodeAt(i++);var/** @type {?} */i2=value.charCodeAt(i++);var/** @type {?} */i3=value.charCodeAt(i++);b64+=toBase64Digit(i1>>2);b64+=toBase64Digit((i1&3)<<4|(isNaN(i2)?0:i2>>4));b64+=isNaN(i2)?'=':toBase64Digit((i2&15)<<2|i3>>6);b64+=isNaN(i2)||isNaN(i3)?'=':toBase64Digit(i3&63);}return b64;}/**
 * @param {?} value
 * @return {?}
 */function toBase64VLQ(value){value=value<0?(-value<<1)+1:value<<1;var/** @type {?} */out='';do{var/** @type {?} */digit=value&31;value=value>>5;if(value>0){digit=digit|32;}out+=toBase64Digit(digit);}while(value>0);return out;}var/** @type {?} */B64_DIGITS='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';/**
 * @param {?} value
 * @return {?}
 */function toBase64Digit(value){if(value<0||value>=64){throw new Error('Can only encode value in the range [0, 63]');}return B64_DIGITS[value];}var/** @type {?} */_SINGLE_QUOTE_ESCAPE_STRING_RE=/'|\\|\n|\r|\$/g;var/** @type {?} */_LEGAL_IDENTIFIER_RE=/^[$A-Z_][0-9A-Z_$]*$/i;var/** @type {?} */_INDENT_WITH='  ';var/** @type {?} */CATCH_ERROR_VAR$1=variable('error');var/** @type {?} */CATCH_STACK_VAR$1=variable('stack');var _EmittedLine=/**
     * @param {?} indent
     */function _EmittedLine(indent){_classCallCheck(this,_EmittedLine);this.indent=indent;this.parts=[];this.srcSpans=[];};var EmitterVisitorContext=function(){/**
     * @param {?} _exportedVars
     * @param {?} _indent
     */function EmitterVisitorContext(_exportedVars,_indent){_classCallCheck(this,EmitterVisitorContext);this._exportedVars=_exportedVars;this._indent=_indent;this._classes=[];this._lines=[new _EmittedLine(_indent)];}/**
     * @param {?} exportedVars
     * @return {?}
     */_createClass(EmitterVisitorContext,[{key:'isExportedVar',/**
     * @param {?} varName
     * @return {?}
     */value:function isExportedVar(varName){return this._exportedVars.indexOf(varName)!==-1;}/**
     * @param {?=} from
     * @param {?=} lastPart
     * @return {?}
     */},{key:'println',value:function println(from){var lastPart=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';this.print(from,lastPart,true);}/**
     * @return {?}
     */},{key:'lineIsEmpty',value:function lineIsEmpty(){return this._currentLine.parts.length===0;}/**
     * @param {?} from
     * @param {?} part
     * @param {?=} newLine
     * @return {?}
     */},{key:'print',value:function print(from,part){var newLine=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;if(part.length>0){this._currentLine.parts.push(part);this._currentLine.srcSpans.push(from&&from.sourceSpan||null);}if(newLine){this._lines.push(new _EmittedLine(this._indent));}}/**
     * @return {?}
     */},{key:'removeEmptyLastLine',value:function removeEmptyLastLine(){if(this.lineIsEmpty()){this._lines.pop();}}/**
     * @return {?}
     */},{key:'incIndent',value:function incIndent(){this._indent++;this._currentLine.indent=this._indent;}/**
     * @return {?}
     */},{key:'decIndent',value:function decIndent(){this._indent--;this._currentLine.indent=this._indent;}/**
     * @param {?} clazz
     * @return {?}
     */},{key:'pushClass',value:function pushClass(clazz){this._classes.push(clazz);}/**
     * @return {?}
     */},{key:'popClass',value:function popClass(){return this._classes.pop();}/**
     * @return {?}
     */},{key:'toSource',/**
     * @return {?}
     */value:function toSource(){return this.sourceLines.map(function(l){return l.parts.length>0?_createIndent(l.indent)+l.parts.join(''):'';}).join('\n');}/**
     * @param {?=} file
     * @param {?=} startsAtLine
     * @return {?}
     */},{key:'toSourceMapGenerator',value:function toSourceMapGenerator(){var file=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var startsAtLine=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var/** @type {?} */map=new SourceMapGenerator(file);for(var/** @type {?} */i=0;i<startsAtLine;i++){map.addLine();}this.sourceLines.forEach(function(line){map.addLine();var/** @type {?} */spans=line.srcSpans;var/** @type {?} */parts=line.parts;var/** @type {?} */col0=line.indent*_INDENT_WITH.length;var/** @type {?} */spanIdx=0;// skip leading parts without source spans
while(spanIdx<spans.length&&!spans[spanIdx]){col0+=parts[spanIdx].length;spanIdx++;}while(spanIdx<spans.length){var/** @type {?} */span=spans[spanIdx];var/** @type {?} */source=span.start.file;var/** @type {?} */sourceLine=span.start.line;var/** @type {?} */sourceCol=span.start.col;map.addSource(source.url,source.content).addMapping(col0,source.url,sourceLine,sourceCol);col0+=parts[spanIdx].length;spanIdx++;// assign parts without span or the same span to the previous segment
while(spanIdx<spans.length&&(span===spans[spanIdx]||!spans[spanIdx])){col0+=parts[spanIdx].length;spanIdx++;}}});return map;}/**
     * @return {?}
     */},{key:'_currentLine',/**
     * @return {?}
     */get:function get(){return this._lines[this._lines.length-1];}},{key:'currentClass',get:function get(){return this._classes.length>0?this._classes[this._classes.length-1]:null;}},{key:'sourceLines',get:function get(){if(this._lines.length&&this._lines[this._lines.length-1].parts.length===0){return this._lines.slice(0,-1);}return this._lines;}}],[{key:'createRoot',value:function createRoot(exportedVars){return new EmitterVisitorContext(exportedVars,0);}}]);return EmitterVisitorContext;}();/**
 * @abstract
 */var AbstractEmitterVisitor=function(){/**
     * @param {?} _escapeDollarInStrings
     */function AbstractEmitterVisitor(_escapeDollarInStrings){_classCallCheck(this,AbstractEmitterVisitor);this._escapeDollarInStrings=_escapeDollarInStrings;}/**
     * @param {?} stmt
     * @param {?} ctx
     * @return {?}
     */_createClass(AbstractEmitterVisitor,[{key:'visitExpressionStmt',value:function visitExpressionStmt(stmt,ctx){stmt.expr.visitExpression(this,ctx);ctx.println(stmt,';');return null;}/**
     * @param {?} stmt
     * @param {?} ctx
     * @return {?}
     */},{key:'visitReturnStmt',value:function visitReturnStmt(stmt,ctx){ctx.print(stmt,'return ');stmt.value.visitExpression(this,ctx);ctx.println(stmt,';');return null;}/**
     * @abstract
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitCastExpr',value:function visitCastExpr(ast,context){}/**
     * @abstract
     * @param {?} stmt
     * @param {?} ctx
     * @return {?}
     */},{key:'visitDeclareClassStmt',value:function visitDeclareClassStmt(stmt,ctx){}/**
     * @param {?} stmt
     * @param {?} ctx
     * @return {?}
     */},{key:'visitIfStmt',value:function visitIfStmt(stmt,ctx){ctx.print(stmt,'if (');stmt.condition.visitExpression(this,ctx);ctx.print(stmt,') {');var/** @type {?} */hasElseCase=isPresent(stmt.falseCase)&&stmt.falseCase.length>0;if(stmt.trueCase.length<=1&&!hasElseCase){ctx.print(stmt,' ');this.visitAllStatements(stmt.trueCase,ctx);ctx.removeEmptyLastLine();ctx.print(stmt,' ');}else{ctx.println();ctx.incIndent();this.visitAllStatements(stmt.trueCase,ctx);ctx.decIndent();if(hasElseCase){ctx.println(stmt,'} else {');ctx.incIndent();this.visitAllStatements(stmt.falseCase,ctx);ctx.decIndent();}}ctx.println(stmt,'}');return null;}/**
     * @abstract
     * @param {?} stmt
     * @param {?} ctx
     * @return {?}
     */},{key:'visitTryCatchStmt',value:function visitTryCatchStmt(stmt,ctx){}/**
     * @param {?} stmt
     * @param {?} ctx
     * @return {?}
     */},{key:'visitThrowStmt',value:function visitThrowStmt(stmt,ctx){ctx.print(stmt,'throw ');stmt.error.visitExpression(this,ctx);ctx.println(stmt,';');return null;}/**
     * @param {?} stmt
     * @param {?} ctx
     * @return {?}
     */},{key:'visitCommentStmt',value:function visitCommentStmt(stmt,ctx){var/** @type {?} */lines=stmt.comment.split('\n');lines.forEach(function(line){ctx.println(stmt,'// '+line);});return null;}/**
     * @abstract
     * @param {?} stmt
     * @param {?} ctx
     * @return {?}
     */},{key:'visitDeclareVarStmt',value:function visitDeclareVarStmt(stmt,ctx){}/**
     * @param {?} expr
     * @param {?} ctx
     * @return {?}
     */},{key:'visitWriteVarExpr',value:function visitWriteVarExpr(expr,ctx){var/** @type {?} */lineWasEmpty=ctx.lineIsEmpty();if(!lineWasEmpty){ctx.print(expr,'(');}ctx.print(expr,expr.name+' = ');expr.value.visitExpression(this,ctx);if(!lineWasEmpty){ctx.print(expr,')');}return null;}/**
     * @param {?} expr
     * @param {?} ctx
     * @return {?}
     */},{key:'visitWriteKeyExpr',value:function visitWriteKeyExpr(expr,ctx){var/** @type {?} */lineWasEmpty=ctx.lineIsEmpty();if(!lineWasEmpty){ctx.print(expr,'(');}expr.receiver.visitExpression(this,ctx);ctx.print(expr,'[');expr.index.visitExpression(this,ctx);ctx.print(expr,'] = ');expr.value.visitExpression(this,ctx);if(!lineWasEmpty){ctx.print(expr,')');}return null;}/**
     * @param {?} expr
     * @param {?} ctx
     * @return {?}
     */},{key:'visitWritePropExpr',value:function visitWritePropExpr(expr,ctx){var/** @type {?} */lineWasEmpty=ctx.lineIsEmpty();if(!lineWasEmpty){ctx.print(expr,'(');}expr.receiver.visitExpression(this,ctx);ctx.print(expr,'.'+expr.name+' = ');expr.value.visitExpression(this,ctx);if(!lineWasEmpty){ctx.print(expr,')');}return null;}/**
     * @param {?} expr
     * @param {?} ctx
     * @return {?}
     */},{key:'visitInvokeMethodExpr',value:function visitInvokeMethodExpr(expr,ctx){expr.receiver.visitExpression(this,ctx);var/** @type {?} */name=expr.name;if(isPresent(expr.builtin)){name=this.getBuiltinMethodName(expr.builtin);if(isBlank(name)){// some builtins just mean to skip the call.
return null;}}ctx.print(expr,'.'+name+'(');this.visitAllExpressions(expr.args,ctx,',');ctx.print(expr,')');return null;}/**
     * @abstract
     * @param {?} method
     * @return {?}
     */},{key:'getBuiltinMethodName',value:function getBuiltinMethodName(method){}/**
     * @param {?} expr
     * @param {?} ctx
     * @return {?}
     */},{key:'visitInvokeFunctionExpr',value:function visitInvokeFunctionExpr(expr,ctx){expr.fn.visitExpression(this,ctx);ctx.print(expr,'(');this.visitAllExpressions(expr.args,ctx,',');ctx.print(expr,')');return null;}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitReadVarExpr',value:function visitReadVarExpr(ast,ctx){var/** @type {?} */varName=ast.name;if(isPresent(ast.builtin)){switch(ast.builtin){case BuiltinVar.Super:varName='super';break;case BuiltinVar.This:varName='this';break;case BuiltinVar.CatchError:varName=CATCH_ERROR_VAR$1.name;break;case BuiltinVar.CatchStack:varName=CATCH_STACK_VAR$1.name;break;default:throw new Error('Unknown builtin variable '+ast.builtin);}}ctx.print(ast,varName);return null;}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitInstantiateExpr',value:function visitInstantiateExpr(ast,ctx){ctx.print(ast,'new ');ast.classExpr.visitExpression(this,ctx);ctx.print(ast,'(');this.visitAllExpressions(ast.args,ctx,',');ctx.print(ast,')');return null;}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitLiteralExpr',value:function visitLiteralExpr(ast,ctx){var/** @type {?} */value=ast.value;if(typeof value==='string'){ctx.print(ast,escapeIdentifier(value,this._escapeDollarInStrings));}else{ctx.print(ast,''+value);}return null;}/**
     * @abstract
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitExternalExpr',value:function visitExternalExpr(ast,ctx){}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitConditionalExpr',value:function visitConditionalExpr(ast,ctx){ctx.print(ast,'(');ast.condition.visitExpression(this,ctx);ctx.print(ast,'? ');ast.trueCase.visitExpression(this,ctx);ctx.print(ast,': ');ast.falseCase.visitExpression(this,ctx);ctx.print(ast,')');return null;}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitNotExpr',value:function visitNotExpr(ast,ctx){ctx.print(ast,'!');ast.condition.visitExpression(this,ctx);return null;}/**
     * @abstract
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitFunctionExpr',value:function visitFunctionExpr(ast,ctx){}/**
     * @abstract
     * @param {?} stmt
     * @param {?} context
     * @return {?}
     */},{key:'visitDeclareFunctionStmt',value:function visitDeclareFunctionStmt(stmt,context){}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitBinaryOperatorExpr',value:function visitBinaryOperatorExpr(ast,ctx){var/** @type {?} */opStr=void 0;switch(ast.operator){case BinaryOperator.Equals:opStr='==';break;case BinaryOperator.Identical:opStr='===';break;case BinaryOperator.NotEquals:opStr='!=';break;case BinaryOperator.NotIdentical:opStr='!==';break;case BinaryOperator.And:opStr='&&';break;case BinaryOperator.Or:opStr='||';break;case BinaryOperator.Plus:opStr='+';break;case BinaryOperator.Minus:opStr='-';break;case BinaryOperator.Divide:opStr='/';break;case BinaryOperator.Multiply:opStr='*';break;case BinaryOperator.Modulo:opStr='%';break;case BinaryOperator.Lower:opStr='<';break;case BinaryOperator.LowerEquals:opStr='<=';break;case BinaryOperator.Bigger:opStr='>';break;case BinaryOperator.BiggerEquals:opStr='>=';break;default:throw new Error('Unknown operator '+ast.operator);}ctx.print(ast,'(');ast.lhs.visitExpression(this,ctx);ctx.print(ast,' '+opStr+' ');ast.rhs.visitExpression(this,ctx);ctx.print(ast,')');return null;}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitReadPropExpr',value:function visitReadPropExpr(ast,ctx){ast.receiver.visitExpression(this,ctx);ctx.print(ast,'.');ctx.print(ast,ast.name);return null;}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitReadKeyExpr',value:function visitReadKeyExpr(ast,ctx){ast.receiver.visitExpression(this,ctx);ctx.print(ast,'[');ast.index.visitExpression(this,ctx);ctx.print(ast,']');return null;}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitLiteralArrayExpr',value:function visitLiteralArrayExpr(ast,ctx){var/** @type {?} */useNewLine=ast.entries.length>1;ctx.print(ast,'[',useNewLine);ctx.incIndent();this.visitAllExpressions(ast.entries,ctx,',',useNewLine);ctx.decIndent();ctx.print(ast,']',useNewLine);return null;}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitLiteralMapExpr',value:function visitLiteralMapExpr(ast,ctx){var _this186=this;var/** @type {?} */useNewLine=ast.entries.length>1;ctx.print(ast,'{',useNewLine);ctx.incIndent();this.visitAllObjects(function(entry){ctx.print(ast,escapeIdentifier(entry.key,_this186._escapeDollarInStrings,entry.quoted)+': ');entry.value.visitExpression(_this186,ctx);},ast.entries,ctx,',',useNewLine);ctx.decIndent();ctx.print(ast,'}',useNewLine);return null;}/**
     * @param {?} expressions
     * @param {?} ctx
     * @param {?} separator
     * @param {?=} newLine
     * @return {?}
     */},{key:'visitAllExpressions',value:function visitAllExpressions(expressions,ctx,separator){var _this187=this;var newLine=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;this.visitAllObjects(function(expr){return expr.visitExpression(_this187,ctx);},expressions,ctx,separator,newLine);}/**
     * @param {?} handler
     * @param {?} expressions
     * @param {?} ctx
     * @param {?} separator
     * @param {?=} newLine
     * @return {?}
     */},{key:'visitAllObjects',value:function visitAllObjects(handler,expressions,ctx,separator){var newLine=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;for(var/** @type {?} */i=0;i<expressions.length;i++){if(i>0){ctx.print(null,separator,newLine);}handler(expressions[i]);}if(newLine){ctx.println();}}/**
     * @param {?} statements
     * @param {?} ctx
     * @return {?}
     */},{key:'visitAllStatements',value:function visitAllStatements(statements,ctx){var _this188=this;statements.forEach(function(stmt){return stmt.visitStatement(_this188,ctx);});}}]);return AbstractEmitterVisitor;}();/**
 * @param {?} input
 * @param {?} escapeDollar
 * @param {?=} alwaysQuote
 * @return {?}
 */function escapeIdentifier(input,escapeDollar){var alwaysQuote=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;if(isBlank(input)){return null;}var/** @type {?} */body=input.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE,function(){if((arguments.length<=0?undefined:arguments[0])=='$'){return escapeDollar?'\\$':'$';}else if((arguments.length<=0?undefined:arguments[0])=='\n'){return'\\n';}else if((arguments.length<=0?undefined:arguments[0])=='\r'){return'\\r';}else{return'\\'+(arguments.length<=0?undefined:arguments[0]);}});var/** @type {?} */requiresQuotes=alwaysQuote||!_LEGAL_IDENTIFIER_RE.test(body);return requiresQuotes?'\''+body+'\'':body;}/**
 * @param {?} count
 * @return {?}
 */function _createIndent(count){var/** @type {?} */res='';for(var/** @type {?} */i=0;i<count;i++){res+=_INDENT_WITH;}return res;}var/** @type {?} */_debugFilePath='/debug/lib';/**
 * @param {?} ast
 * @return {?}
 */function debugOutputAstAsTypeScript(ast){var/** @type {?} */converter=new _TsEmitterVisitor(_debugFilePath,{/**
         * @param {?} filePath
         * @param {?} containingFilePath
         * @return {?}
         */fileNameToModuleName:function fileNameToModuleName(filePath,containingFilePath){return filePath;},/**
         * @param {?} symbol
         * @return {?}
         */getImportAs:function getImportAs(symbol){return null;},getTypeArity:function getTypeArity(symbol){return null;}});var/** @type {?} */ctx=EmitterVisitorContext.createRoot([]);var/** @type {?} */asts=Array.isArray(ast)?ast:[ast];asts.forEach(function(ast){if(ast instanceof Statement){ast.visitStatement(converter,ctx);}else if(ast instanceof Expression){ast.visitExpression(converter,ctx);}else if(ast instanceof Type$1){ast.visitType(converter,ctx);}else{throw new Error('Don\'t know how to print debug info for '+ast);}});return ctx.toSource();}var TypeScriptEmitter=function(){/**
     * @param {?} _importResolver
     */function TypeScriptEmitter(_importResolver){_classCallCheck(this,TypeScriptEmitter);this._importResolver=_importResolver;}/**
     * @param {?} genFilePath
     * @param {?} stmts
     * @param {?} exportedVars
     * @return {?}
     */_createClass(TypeScriptEmitter,[{key:'emitStatements',value:function emitStatements(genFilePath,stmts,exportedVars){var _this189=this;var/** @type {?} */converter=new _TsEmitterVisitor(genFilePath,this._importResolver);var/** @type {?} */ctx=EmitterVisitorContext.createRoot(exportedVars);converter.visitAllStatements(stmts,ctx);var/** @type {?} */srcParts=[];converter.reexports.forEach(function(reexports,exportedFilePath){var/** @type {?} */reexportsCode=reexports.map(function(reexport){return reexport.name+' as '+reexport.as;}).join(',');srcParts.push('export {'+reexportsCode+'} from \''+_this189._importResolver.fileNameToModuleName(exportedFilePath,genFilePath)+'\';');});converter.importsWithPrefixes.forEach(function(prefix,importedFilePath){// Note: can't write the real word for import as it screws up system.js auto detection...
srcParts.push('imp'+('ort * as '+prefix+' from \''+_this189._importResolver.fileNameToModuleName(importedFilePath,genFilePath)+'\';'));});srcParts.push(ctx.toSource());var/** @type {?} */prefixLines=converter.reexports.size+converter.importsWithPrefixes.size;var/** @type {?} */sm=ctx.toSourceMapGenerator(null,prefixLines).toJsComment();if(sm){srcParts.push(sm);}return srcParts.join('\n');}}]);return TypeScriptEmitter;}();var _TsEmitterVisitor=function(_AbstractEmitterVisit){_inherits(_TsEmitterVisitor,_AbstractEmitterVisit);/**
     * @param {?} _genFilePath
     * @param {?} _importResolver
     */function _TsEmitterVisitor(_genFilePath,_importResolver){_classCallCheck(this,_TsEmitterVisitor);var _this190=_possibleConstructorReturn(this,(_TsEmitterVisitor.__proto__||Object.getPrototypeOf(_TsEmitterVisitor)).call(this,false));_this190._genFilePath=_genFilePath;_this190._importResolver=_importResolver;_this190.typeExpression=0;_this190.importsWithPrefixes=new Map();_this190.reexports=new Map();return _this190;}/**
     * @param {?} t
     * @param {?} ctx
     * @param {?=} defaultType
     * @return {?}
     */_createClass(_TsEmitterVisitor,[{key:'visitType',value:function visitType(t,ctx){var defaultType=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'any';if(isPresent(t)){this.typeExpression++;t.visitType(this,ctx);this.typeExpression--;}else{ctx.print(null,defaultType);}}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitLiteralExpr',value:function visitLiteralExpr(ast,ctx){var/** @type {?} */value=ast.value;if(isBlank(value)&&ast.type!=INFERRED_TYPE){ctx.print(ast,'('+value+' as any)');return null;}return _get(_TsEmitterVisitor.prototype.__proto__||Object.getPrototypeOf(_TsEmitterVisitor.prototype),'visitLiteralExpr',this).call(this,ast,ctx);}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitLiteralArrayExpr',value:function visitLiteralArrayExpr(ast,ctx){if(ast.entries.length===0){ctx.print(ast,'(');}var/** @type {?} */result=_get(_TsEmitterVisitor.prototype.__proto__||Object.getPrototypeOf(_TsEmitterVisitor.prototype),'visitLiteralArrayExpr',this).call(this,ast,ctx);if(ast.entries.length===0){ctx.print(ast,' as any[])');}return result;}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitExternalExpr',value:function visitExternalExpr(ast,ctx){this._visitIdentifier(ast.value,ast.typeParams,ctx);return null;}/**
     * @param {?} stmt
     * @param {?} ctx
     * @return {?}
     */},{key:'visitDeclareVarStmt',value:function visitDeclareVarStmt(stmt,ctx){if(ctx.isExportedVar(stmt.name)&&stmt.value instanceof ExternalExpr&&!stmt.type){// check for a reexport
var _resolveStaticSymbol2=this._resolveStaticSymbol(stmt.value.value),name=_resolveStaticSymbol2.name,filePath=_resolveStaticSymbol2.filePath,members=_resolveStaticSymbol2.members;if(members.length===0&&filePath!==this._genFilePath){var/** @type {?} */reexports=this.reexports.get(filePath);if(!reexports){reexports=[];this.reexports.set(filePath,reexports);}reexports.push({name:name,as:stmt.name});return null;}}if(ctx.isExportedVar(stmt.name)){ctx.print(stmt,'export ');}if(stmt.hasModifier(StmtModifier.Final)){ctx.print(stmt,'const');}else{ctx.print(stmt,'var');}ctx.print(stmt,' '+stmt.name);this._printColonType(stmt.type,ctx);ctx.print(stmt,' = ');stmt.value.visitExpression(this,ctx);ctx.println(stmt,';');return null;}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitCastExpr',value:function visitCastExpr(ast,ctx){ctx.print(ast,'(<');ast.type.visitType(this,ctx);ctx.print(ast,'>');ast.value.visitExpression(this,ctx);ctx.print(ast,')');return null;}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitInstantiateExpr',value:function visitInstantiateExpr(ast,ctx){ctx.print(ast,'new ');this.typeExpression++;ast.classExpr.visitExpression(this,ctx);this.typeExpression--;ctx.print(ast,'(');this.visitAllExpressions(ast.args,ctx,',');ctx.print(ast,')');return null;}/**
     * @param {?} stmt
     * @param {?} ctx
     * @return {?}
     */},{key:'visitDeclareClassStmt',value:function visitDeclareClassStmt(stmt,ctx){var _this191=this;ctx.pushClass(stmt);if(ctx.isExportedVar(stmt.name)){ctx.print(stmt,'export ');}ctx.print(stmt,'class '+stmt.name);if(isPresent(stmt.parent)){ctx.print(stmt,' extends ');this.typeExpression++;stmt.parent.visitExpression(this,ctx);this.typeExpression--;}ctx.println(stmt,' {');ctx.incIndent();stmt.fields.forEach(function(field){return _this191._visitClassField(field,ctx);});if(isPresent(stmt.constructorMethod)){this._visitClassConstructor(stmt,ctx);}stmt.getters.forEach(function(getter){return _this191._visitClassGetter(getter,ctx);});stmt.methods.forEach(function(method){return _this191._visitClassMethod(method,ctx);});ctx.decIndent();ctx.println(stmt,'}');ctx.popClass();return null;}/**
     * @param {?} field
     * @param {?} ctx
     * @return {?}
     */},{key:'_visitClassField',value:function _visitClassField(field,ctx){if(field.hasModifier(StmtModifier.Private)){// comment out as a workaround for #10967
ctx.print(null,'/*private*/ ');}ctx.print(null,field.name);this._printColonType(field.type,ctx);ctx.println(null,';');}/**
     * @param {?} getter
     * @param {?} ctx
     * @return {?}
     */},{key:'_visitClassGetter',value:function _visitClassGetter(getter,ctx){if(getter.hasModifier(StmtModifier.Private)){ctx.print(null,'private ');}ctx.print(null,'get '+getter.name+'()');this._printColonType(getter.type,ctx);ctx.println(null,' {');ctx.incIndent();this.visitAllStatements(getter.body,ctx);ctx.decIndent();ctx.println(null,'}');}/**
     * @param {?} stmt
     * @param {?} ctx
     * @return {?}
     */},{key:'_visitClassConstructor',value:function _visitClassConstructor(stmt,ctx){ctx.print(stmt,'constructor(');this._visitParams(stmt.constructorMethod.params,ctx);ctx.println(stmt,') {');ctx.incIndent();this.visitAllStatements(stmt.constructorMethod.body,ctx);ctx.decIndent();ctx.println(stmt,'}');}/**
     * @param {?} method
     * @param {?} ctx
     * @return {?}
     */},{key:'_visitClassMethod',value:function _visitClassMethod(method,ctx){if(method.hasModifier(StmtModifier.Private)){ctx.print(null,'private ');}ctx.print(null,method.name+'(');this._visitParams(method.params,ctx);ctx.print(null,')');this._printColonType(method.type,ctx,'void');ctx.println(null,' {');ctx.incIndent();this.visitAllStatements(method.body,ctx);ctx.decIndent();ctx.println(null,'}');}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitFunctionExpr',value:function visitFunctionExpr(ast,ctx){ctx.print(ast,'(');this._visitParams(ast.params,ctx);ctx.print(ast,')');this._printColonType(ast.type,ctx,'void');ctx.println(ast,' => {');ctx.incIndent();this.visitAllStatements(ast.statements,ctx);ctx.decIndent();ctx.print(ast,'}');return null;}/**
     * @param {?} stmt
     * @param {?} ctx
     * @return {?}
     */},{key:'visitDeclareFunctionStmt',value:function visitDeclareFunctionStmt(stmt,ctx){if(ctx.isExportedVar(stmt.name)){ctx.print(stmt,'export ');}ctx.print(stmt,'function '+stmt.name+'(');this._visitParams(stmt.params,ctx);ctx.print(stmt,')');this._printColonType(stmt.type,ctx,'void');ctx.println(stmt,' {');ctx.incIndent();this.visitAllStatements(stmt.statements,ctx);ctx.decIndent();ctx.println(stmt,'}');return null;}/**
     * @param {?} stmt
     * @param {?} ctx
     * @return {?}
     */},{key:'visitTryCatchStmt',value:function visitTryCatchStmt(stmt,ctx){ctx.println(stmt,'try {');ctx.incIndent();this.visitAllStatements(stmt.bodyStmts,ctx);ctx.decIndent();ctx.println(stmt,'} catch ('+CATCH_ERROR_VAR$1.name+') {');ctx.incIndent();var/** @type {?} */catchStmts=[/** @type {?} */CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop('stack')).toDeclStmt(null,[StmtModifier.Final])].concat(stmt.catchStmts);this.visitAllStatements(catchStmts,ctx);ctx.decIndent();ctx.println(stmt,'}');return null;}/**
     * @param {?} type
     * @param {?} ctx
     * @return {?}
     */},{key:'visitBuiltintType',value:function visitBuiltintType(type,ctx){var/** @type {?} */typeStr=void 0;switch(type.name){case BuiltinTypeName.Bool:typeStr='boolean';break;case BuiltinTypeName.Dynamic:typeStr='any';break;case BuiltinTypeName.Function:typeStr='Function';break;case BuiltinTypeName.Number:typeStr='number';break;case BuiltinTypeName.Int:typeStr='number';break;case BuiltinTypeName.String:typeStr='string';break;default:throw new Error('Unsupported builtin type '+type.name);}ctx.print(null,typeStr);return null;}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitExpressionType',value:function visitExpressionType(ast,ctx){ast.value.visitExpression(this,ctx);return null;}/**
     * @param {?} type
     * @param {?} ctx
     * @return {?}
     */},{key:'visitArrayType',value:function visitArrayType(type,ctx){this.visitType(type.of,ctx);ctx.print(null,'[]');return null;}/**
     * @param {?} type
     * @param {?} ctx
     * @return {?}
     */},{key:'visitMapType',value:function visitMapType(type,ctx){ctx.print(null,'{[key: string]:');this.visitType(type.valueType,ctx);ctx.print(null,'}');return null;}/**
     * @param {?} method
     * @return {?}
     */},{key:'getBuiltinMethodName',value:function getBuiltinMethodName(method){var/** @type {?} */name=void 0;switch(method){case BuiltinMethod.ConcatArray:name='concat';break;case BuiltinMethod.SubscribeObservable:name='subscribe';break;case BuiltinMethod.Bind:name='bind';break;default:throw new Error('Unknown builtin method: '+method);}return name;}/**
     * @param {?} params
     * @param {?} ctx
     * @return {?}
     */},{key:'_visitParams',value:function _visitParams(params,ctx){var _this192=this;this.visitAllObjects(function(param){ctx.print(null,param.name);_this192._printColonType(param.type,ctx);},params,ctx,',');}/**
     * @param {?} value
     * @return {?}
     */},{key:'_resolveStaticSymbol',value:function _resolveStaticSymbol(value){var/** @type {?} */reference=value.reference;if(!(reference instanceof StaticSymbol)){throw new Error('Internal error: unknown identifier '+JSON.stringify(value));}var/** @type {?} */arity=this._importResolver.getTypeArity(reference)||undefined;var/** @type {?} */importReference=this._importResolver.getImportAs(reference)||reference;return{name:importReference.name,filePath:importReference.filePath,members:importReference.members,arity:arity};}/**
     * @param {?} value
     * @param {?} typeParams
     * @param {?} ctx
     * @return {?}
     */},{key:'_visitIdentifier',value:function _visitIdentifier(value,typeParams,ctx){var _this193=this;var _resolveStaticSymbol3=this._resolveStaticSymbol(value),name=_resolveStaticSymbol3.name,filePath=_resolveStaticSymbol3.filePath,members=_resolveStaticSymbol3.members,arity=_resolveStaticSymbol3.arity;if(filePath!=this._genFilePath){var/** @type {?} */prefix=this.importsWithPrefixes.get(filePath);if(isBlank(prefix)){prefix='import'+this.importsWithPrefixes.size;this.importsWithPrefixes.set(filePath,prefix);}ctx.print(null,prefix+'.');}if(members.length){ctx.print(null,name);ctx.print(null,'.');ctx.print(null,members.join('.'));}else{ctx.print(null,name);}if(this.typeExpression>0){// If we are in a type expression that refers to a generic type then supply
// the required type parameters. If there were not enough type parameters
// supplied, supply any as the type. Outside a type expression the reference
// should not supply type parameters and be treated as a simple value reference
// to the constructor function itself.
var/** @type {?} */suppliedParameters=typeParams&&typeParams.length||0;var/** @type {?} */additionalParameters=(arity||0)-suppliedParameters;if(suppliedParameters>0||additionalParameters>0){ctx.print(null,'<');if(suppliedParameters>0){this.visitAllObjects(function(type){return type.visitType(_this193,ctx);},typeParams,ctx,',');}if(additionalParameters>0){for(var/** @type {?} */i=0;i<additionalParameters;i++){if(i>0||suppliedParameters>0)ctx.print(null,',');ctx.print(null,'any');}}ctx.print(null,'>');}}}/**
     * @param {?} type
     * @param {?} ctx
     * @param {?=} defaultType
     * @return {?}
     */},{key:'_printColonType',value:function _printColonType(type,ctx,defaultType){if(type!==INFERRED_TYPE){ctx.print(null,':');this.visitType(type,ctx,defaultType);}}}]);return _TsEmitterVisitor;}(AbstractEmitterVisitor);// =================================================================================================
// =================================================================================================
// =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========
// =================================================================================================
// =================================================================================================
//
//        DO NOT EDIT THIS LIST OF SECURITY SENSITIVE PROPERTIES WITHOUT A SECURITY REVIEW!
//                               Reach out to mprobst for details.
//
// =================================================================================================
/** Map from tagName|propertyName SecurityContext. Properties applying to all tags use '*'. */var/** @type {?} */SECURITY_SCHEMA={};/**
 * @param {?} ctx
 * @param {?} specs
 * @return {?}
 */function registerContext(ctx,specs){var _iteratorNormalCompletion4=true;var _didIteratorError4=false;var _iteratorError4=undefined;try{for(var _iterator4=specs[Symbol.iterator](),_step4;!(_iteratorNormalCompletion4=(_step4=_iterator4.next()).done);_iteratorNormalCompletion4=true){var spec=_step4.value;SECURITY_SCHEMA[spec.toLowerCase()]=ctx;}}catch(err){_didIteratorError4=true;_iteratorError4=err;}finally{try{if(!_iteratorNormalCompletion4&&_iterator4.return){_iterator4.return();}}finally{if(_didIteratorError4){throw _iteratorError4;}}}}// Case is insignificant below, all element and attribute names are lower-cased for lookup.
registerContext(__WEBPACK_IMPORTED_MODULE_0__angular_core__["U" /* SecurityContext */].HTML,['iframe|srcdoc','*|innerHTML','*|outerHTML']);registerContext(__WEBPACK_IMPORTED_MODULE_0__angular_core__["U" /* SecurityContext */].STYLE,['*|style']);// NB: no SCRIPT contexts here, they are never allowed due to the parser stripping them.
registerContext(__WEBPACK_IMPORTED_MODULE_0__angular_core__["U" /* SecurityContext */].URL,['*|formAction','area|href','area|ping','audio|src','a|href','a|ping','blockquote|cite','body|background','del|cite','form|action','img|src','img|srcset','input|src','ins|cite','q|cite','source|src','source|srcset','track|src','video|poster','video|src']);registerContext(__WEBPACK_IMPORTED_MODULE_0__angular_core__["U" /* SecurityContext */].RESOURCE_URL,['applet|code','applet|codebase','base|href','embed|src','frame|src','head|profile','html|manifest','iframe|src','link|href','media|src','object|codebase','object|data','script|src']);var/** @type {?} */BOOLEAN='boolean';var/** @type {?} */NUMBER='number';var/** @type {?} */STRING='string';var/** @type {?} */OBJECT='object';/**
 * This array represents the DOM schema. It encodes inheritance, properties, and events.
 *
 * ## Overview
 *
 * Each line represents one kind of element. The `element_inheritance` and properties are joined
 * using `element_inheritance|properties` syntax.
 *
 * ## Element Inheritance
 *
 * The `element_inheritance` can be further subdivided as `element1,element2,...^parentElement`.
 * Here the individual elements are separated by `,` (commas). Every element in the list
 * has identical properties.
 *
 * An `element` may inherit additional properties from `parentElement` If no `^parentElement` is
 * specified then `""` (blank) element is assumed.
 *
 * NOTE: The blank element inherits from root `[Element]` element, the super element of all
 * elements.
 *
 * NOTE an element prefix such as `:svg:` has no special meaning to the schema.
 *
 * ## Properties
 *
 * Each element has a set of properties separated by `,` (commas). Each property can be prefixed
 * by a special character designating its type:
 *
 * - (no prefix): property is a string.
 * - `*`: property represents an event.
 * - `!`: property is a boolean.
 * - `#`: property is a number.
 * - `%`: property is an object.
 *
 * ## Query
 *
 * The class creates an internal squas representation which allows to easily answer the query of
 * if a given property exist on a given element.
 *
 * NOTE: We don't yet support querying for types or events.
 * NOTE: This schema is auto extracted from `schema_extractor.ts` located in the test folder,
 *       see dom_element_schema_registry_spec.ts
 */// =================================================================================================
// =================================================================================================
// =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========
// =================================================================================================
// =================================================================================================
//
//                       DO NOT EDIT THIS DOM SCHEMA WITHOUT A SECURITY REVIEW!
//
// Newly added properties must be security reviewed and assigned an appropriate SecurityContext in
// dom_security_schema.ts. Reach out to mprobst & rjamet for details.
//
// =================================================================================================
var/** @type {?} */SCHEMA=['[Element]|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop','[HTMLElement]^[Element]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate','abbr,address,article,aside,b,bdi,bdo,cite,code,dd,dfn,dt,em,figcaption,figure,footer,header,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate','media^[HTMLElement]|!autoplay,!controls,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,#playbackRate,preload,src,%srcObject,#volume',':svg:^[HTMLElement]|*abort,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex',':svg:graphics^:svg:|',':svg:animation^:svg:|*begin,*end,*repeat',':svg:geometry^:svg:|',':svg:componentTransferFunction^:svg:|',':svg:gradient^:svg:|',':svg:textContent^:svg:graphics|',':svg:textPositioning^:svg:textContent|','a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,rev,search,shape,target,text,type,username','area^[HTMLElement]|alt,coords,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,search,shape,target,username','audio^media|','br^[HTMLElement]|clear','base^[HTMLElement]|href,target','body^[HTMLElement]|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink','button^[HTMLElement]|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value','canvas^[HTMLElement]|#height,#width','content^[HTMLElement]|select','dl^[HTMLElement]|!compact','datalist^[HTMLElement]|','details^[HTMLElement]|!open','dialog^[HTMLElement]|!open,returnValue','dir^[HTMLElement]|!compact','div^[HTMLElement]|align','embed^[HTMLElement]|align,height,name,src,type,width','fieldset^[HTMLElement]|!disabled,name','font^[HTMLElement]|color,face,size','form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target','frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src','frameset^[HTMLElement]|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows','hr^[HTMLElement]|align,color,!noShade,size,width','head^[HTMLElement]|','h1,h2,h3,h4,h5,h6^[HTMLElement]|align','html^[HTMLElement]|version','iframe^[HTMLElement]|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width','img^[HTMLElement]|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width','input^[HTMLElement]|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width','keygen^[HTMLElement]|!autofocus,challenge,!disabled,keytype,name','li^[HTMLElement]|type,#value','label^[HTMLElement]|htmlFor','legend^[HTMLElement]|align','link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,rel,%relList,rev,%sizes,target,type','map^[HTMLElement]|name','marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width','menu^[HTMLElement]|!compact','meta^[HTMLElement]|content,httpEquiv,name,scheme','meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value','ins,del^[HTMLElement]|cite,dateTime','ol^[HTMLElement]|!compact,!reversed,#start,type','object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width','optgroup^[HTMLElement]|!disabled,label','option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value','output^[HTMLElement]|defaultValue,%htmlFor,name,value','p^[HTMLElement]|align','param^[HTMLElement]|name,type,value,valueType','picture^[HTMLElement]|','pre^[HTMLElement]|#width','progress^[HTMLElement]|#max,#value','q,blockquote,cite^[HTMLElement]|','script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type','select^[HTMLElement]|!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value','shadow^[HTMLElement]|','source^[HTMLElement]|media,sizes,src,srcset,type','span^[HTMLElement]|','style^[HTMLElement]|!disabled,media,type','caption^[HTMLElement]|align','th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width','col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width','table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width','tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign','tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign','template^[HTMLElement]|','textarea^[HTMLElement]|autocapitalize,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap','title^[HTMLElement]|text','track^[HTMLElement]|!default,kind,label,src,srclang','ul^[HTMLElement]|!compact,type','unknown^[HTMLElement]|','video^media|#height,poster,#width',':svg:a^:svg:graphics|',':svg:animate^:svg:animation|',':svg:animateMotion^:svg:animation|',':svg:animateTransform^:svg:animation|',':svg:circle^:svg:geometry|',':svg:clipPath^:svg:graphics|',':svg:cursor^:svg:|',':svg:defs^:svg:graphics|',':svg:desc^:svg:|',':svg:discard^:svg:|',':svg:ellipse^:svg:geometry|',':svg:feBlend^:svg:|',':svg:feColorMatrix^:svg:|',':svg:feComponentTransfer^:svg:|',':svg:feComposite^:svg:|',':svg:feConvolveMatrix^:svg:|',':svg:feDiffuseLighting^:svg:|',':svg:feDisplacementMap^:svg:|',':svg:feDistantLight^:svg:|',':svg:feDropShadow^:svg:|',':svg:feFlood^:svg:|',':svg:feFuncA^:svg:componentTransferFunction|',':svg:feFuncB^:svg:componentTransferFunction|',':svg:feFuncG^:svg:componentTransferFunction|',':svg:feFuncR^:svg:componentTransferFunction|',':svg:feGaussianBlur^:svg:|',':svg:feImage^:svg:|',':svg:feMerge^:svg:|',':svg:feMergeNode^:svg:|',':svg:feMorphology^:svg:|',':svg:feOffset^:svg:|',':svg:fePointLight^:svg:|',':svg:feSpecularLighting^:svg:|',':svg:feSpotLight^:svg:|',':svg:feTile^:svg:|',':svg:feTurbulence^:svg:|',':svg:filter^:svg:|',':svg:foreignObject^:svg:graphics|',':svg:g^:svg:graphics|',':svg:image^:svg:graphics|',':svg:line^:svg:geometry|',':svg:linearGradient^:svg:gradient|',':svg:mpath^:svg:|',':svg:marker^:svg:|',':svg:mask^:svg:|',':svg:metadata^:svg:|',':svg:path^:svg:geometry|',':svg:pattern^:svg:|',':svg:polygon^:svg:geometry|',':svg:polyline^:svg:geometry|',':svg:radialGradient^:svg:gradient|',':svg:rect^:svg:geometry|',':svg:svg^:svg:graphics|#currentScale,#zoomAndPan',':svg:script^:svg:|type',':svg:set^:svg:animation|',':svg:stop^:svg:|',':svg:style^:svg:|!disabled,media,title,type',':svg:switch^:svg:graphics|',':svg:symbol^:svg:|',':svg:tspan^:svg:textPositioning|',':svg:text^:svg:textPositioning|',':svg:textPath^:svg:textContent|',':svg:title^:svg:|',':svg:use^:svg:graphics|',':svg:view^:svg:|#zoomAndPan','data^[HTMLElement]|value','menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default','summary^[HTMLElement]|','time^[HTMLElement]|dateTime'];var/** @type {?} */_ATTR_TO_PROP={'class':'className','for':'htmlFor','formaction':'formAction','innerHtml':'innerHTML','readonly':'readOnly','tabindex':'tabIndex'};var DomElementSchemaRegistry=function(_ElementSchemaRegistr){_inherits(DomElementSchemaRegistry,_ElementSchemaRegistr);function DomElementSchemaRegistry(){_classCallCheck(this,DomElementSchemaRegistry);var _this194=_possibleConstructorReturn(this,(DomElementSchemaRegistry.__proto__||Object.getPrototypeOf(DomElementSchemaRegistry)).call(this));_this194._schema={};SCHEMA.forEach(function(encodedType){var type={};var _encodedType$split=encodedType.split('|'),_encodedType$split2=_slicedToArray(_encodedType$split,2),strType=_encodedType$split2[0],strProperties=_encodedType$split2[1];var properties=strProperties.split(',');var _strType$split=strType.split('^'),_strType$split2=_slicedToArray(_strType$split,2),typeNames=_strType$split2[0],superName=_strType$split2[1];typeNames.split(',').forEach(function(tag){return _this194._schema[tag.toLowerCase()]=type;});var superType=superName&&_this194._schema[superName.toLowerCase()];if(superType){Object.keys(superType).forEach(function(prop){type[prop]=superType[prop];});}properties.forEach(function(property){if(property.length>0){switch(property[0]){case'*':// We don't yet support events.
// If ever allowing to bind to events, GO THROUGH A SECURITY REVIEW, allowing events
// will
// almost certainly introduce bad XSS vulnerabilities.
// type[property.substring(1)] = EVENT;
break;case'!':type[property.substring(1)]=BOOLEAN;break;case'#':type[property.substring(1)]=NUMBER;break;case'%':type[property.substring(1)]=OBJECT;break;default:type[property]=STRING;}}});});return _this194;}/**
     * @param {?} tagName
     * @param {?} propName
     * @param {?} schemaMetas
     * @return {?}
     */_createClass(DomElementSchemaRegistry,[{key:'hasProperty',value:function hasProperty(tagName,propName,schemaMetas){if(schemaMetas.some(function(schema){return schema.name===__WEBPACK_IMPORTED_MODULE_0__angular_core__["_110" /* NO_ERRORS_SCHEMA */].name;})){return true;}if(tagName.indexOf('-')>-1){if(tagName==='ng-container'||tagName==='ng-content'){return false;}if(schemaMetas.some(function(schema){return schema.name===__WEBPACK_IMPORTED_MODULE_0__angular_core__["_111" /* CUSTOM_ELEMENTS_SCHEMA */].name;})){// Can't tell now as we don't know which properties a custom element will get
// once it is instantiated
return true;}}var/** @type {?} */elementProperties=this._schema[tagName.toLowerCase()]||this._schema['unknown'];return!!elementProperties[propName];}/**
     * @param {?} tagName
     * @param {?} schemaMetas
     * @return {?}
     */},{key:'hasElement',value:function hasElement(tagName,schemaMetas){if(schemaMetas.some(function(schema){return schema.name===__WEBPACK_IMPORTED_MODULE_0__angular_core__["_110" /* NO_ERRORS_SCHEMA */].name;})){return true;}if(tagName.indexOf('-')>-1){if(tagName==='ng-container'||tagName==='ng-content'){return true;}if(schemaMetas.some(function(schema){return schema.name===__WEBPACK_IMPORTED_MODULE_0__angular_core__["_111" /* CUSTOM_ELEMENTS_SCHEMA */].name;})){// Allow any custom elements
return true;}}return!!this._schema[tagName.toLowerCase()];}/**
     * securityContext returns the security context for the given property on the given DOM tag.
     *
     * Tag and property name are statically known and cannot change at runtime, i.e. it is not
     * possible to bind a value into a changing attribute or tag name.
     *
     * The filtering is white list based. All attributes in the schema above are assumed to have the
     * 'NONE' security context, i.e. that they are safe inert string values. Only specific well known
     * attack vectors are assigned their appropriate context.
     * @param {?} tagName
     * @param {?} propName
     * @param {?} isAttribute
     * @return {?}
     */},{key:'securityContext',value:function securityContext(tagName,propName,isAttribute){if(isAttribute){// NB: For security purposes, use the mapped property name, not the attribute name.
propName=this.getMappedPropName(propName);}// Make sure comparisons are case insensitive, so that case differences between attribute and
// property names do not have a security impact.
tagName=tagName.toLowerCase();propName=propName.toLowerCase();var/** @type {?} */ctx=SECURITY_SCHEMA[tagName+'|'+propName];if(ctx){return ctx;}ctx=SECURITY_SCHEMA['*|'+propName];return ctx?ctx:__WEBPACK_IMPORTED_MODULE_0__angular_core__["U" /* SecurityContext */].NONE;}/**
     * @param {?} propName
     * @return {?}
     */},{key:'getMappedPropName',value:function getMappedPropName(propName){return _ATTR_TO_PROP[propName]||propName;}/**
     * @return {?}
     */},{key:'getDefaultComponentElementName',value:function getDefaultComponentElementName(){return'ng-component';}/**
     * @param {?} name
     * @return {?}
     */},{key:'validateProperty',value:function validateProperty(name){if(name.toLowerCase().startsWith('on')){var/** @type {?} */msg='Binding to event property \''+name+'\' is disallowed for security reasons, '+('please use ('+name.slice(2)+')=...')+('\nIf \''+name+'\' is a directive input, make sure the directive is imported by the')+' current module.';return{error:true,msg:msg};}else{return{error:false};}}/**
     * @param {?} name
     * @return {?}
     */},{key:'validateAttribute',value:function validateAttribute(name){if(name.toLowerCase().startsWith('on')){var/** @type {?} */msg='Binding to event attribute \''+name+'\' is disallowed for security reasons, '+('please use ('+name.slice(2)+')=...');return{error:true,msg:msg};}else{return{error:false};}}/**
     * @return {?}
     */},{key:'allKnownElementNames',value:function allKnownElementNames(){return Object.keys(this._schema);}/**
     * @param {?} propName
     * @return {?}
     */},{key:'normalizeAnimationStyleProperty',value:function normalizeAnimationStyleProperty(propName){return dashCaseToCamelCase(propName);}/**
     * @param {?} camelCaseProp
     * @param {?} userProvidedProp
     * @param {?} val
     * @return {?}
     */},{key:'normalizeAnimationStyleValue',value:function normalizeAnimationStyleValue(camelCaseProp,userProvidedProp,val){var/** @type {?} */unit='';var/** @type {?} */strVal=val.toString().trim();var/** @type {?} */errorMsg=null;if(_isPixelDimensionStyle(camelCaseProp)&&val!==0&&val!=='0'){if(typeof val==='number'){unit='px';}else{var/** @type {?} */valAndSuffixMatch=val.match(/^[+-]?[\d\.]+([a-z]*)$/);if(valAndSuffixMatch&&valAndSuffixMatch[1].length==0){errorMsg='Please provide a CSS unit value for '+userProvidedProp+':'+val;}}}return{error:errorMsg,value:strVal+unit};}}]);return DomElementSchemaRegistry;}(ElementSchemaRegistry);DomElementSchemaRegistry.decorators=[{type:CompilerInjectable}];/** @nocollapse */DomElementSchemaRegistry.ctorParameters=function(){return[];};/**
 * @param {?} prop
 * @return {?}
 */function _isPixelDimensionStyle(prop){switch(prop){case'width':case'height':case'minWidth':case'minHeight':case'maxWidth':case'maxHeight':case'left':case'top':case'bottom':case'right':case'fontSize':case'outlineWidth':case'outlineOffset':case'paddingTop':case'paddingLeft':case'paddingBottom':case'paddingRight':case'marginTop':case'marginLeft':case'marginBottom':case'marginRight':case'borderRadius':case'borderWidth':case'borderTopWidth':case'borderLeftWidth':case'borderRightWidth':case'borderBottomWidth':case'textIndent':return true;default:return false;}}var ShadowCss=function(){function ShadowCss(){_classCallCheck(this,ShadowCss);this.strictStyling=true;}/**
     * @param {?} cssText
     * @param {?} selector
     * @param {?=} hostSelector
     * @return {?}
     */_createClass(ShadowCss,[{key:'shimCssText',value:function shimCssText(cssText,selector){var hostSelector=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'';var/** @type {?} */sourceMappingUrl=extractSourceMappingUrl(cssText);cssText=stripComments(cssText);cssText=this._insertDirectives(cssText);return this._scopeCssText(cssText,selector,hostSelector)+sourceMappingUrl;}/**
     * @param {?} cssText
     * @return {?}
     */},{key:'_insertDirectives',value:function _insertDirectives(cssText){cssText=this._insertPolyfillDirectivesInCssText(cssText);return this._insertPolyfillRulesInCssText(cssText);}/**
     * @param {?} cssText
     * @return {?}
     */},{key:'_insertPolyfillDirectivesInCssText',value:function _insertPolyfillDirectivesInCssText(cssText){// Difference with webcomponents.js: does not handle comments
return cssText.replace(_cssContentNextSelectorRe,function(){return(arguments.length<=2?undefined:arguments[2])+'{';});}/**
     * @param {?} cssText
     * @return {?}
     */},{key:'_insertPolyfillRulesInCssText',value:function _insertPolyfillRulesInCssText(cssText){// Difference with webcomponents.js: does not handle comments
return cssText.replace(_cssContentRuleRe,function(){for(var _len2=arguments.length,m=Array(_len2),_key2=0;_key2<_len2;_key2++){m[_key2]=arguments[_key2];}var/** @type {?} */rule=m[0].replace(m[1],'').replace(m[2],'');return m[4]+rule;});}/**
     * @param {?} cssText
     * @param {?} scopeSelector
     * @param {?} hostSelector
     * @return {?}
     */},{key:'_scopeCssText',value:function _scopeCssText(cssText,scopeSelector,hostSelector){var/** @type {?} */unscopedRules=this._extractUnscopedRulesFromCssText(cssText);// replace :host and :host-context -shadowcsshost and -shadowcsshost respectively
cssText=this._insertPolyfillHostInCssText(cssText);cssText=this._convertColonHost(cssText);cssText=this._convertColonHostContext(cssText);cssText=this._convertShadowDOMSelectors(cssText);if(scopeSelector){cssText=this._scopeSelectors(cssText,scopeSelector,hostSelector);}cssText=cssText+'\n'+unscopedRules;return cssText.trim();}/**
     * @param {?} cssText
     * @return {?}
     */},{key:'_extractUnscopedRulesFromCssText',value:function _extractUnscopedRulesFromCssText(cssText){// Difference with webcomponents.js: does not handle comments
var/** @type {?} */r='';var/** @type {?} */m=void 0;_cssContentUnscopedRuleRe.lastIndex=0;while((m=_cssContentUnscopedRuleRe.exec(cssText))!==null){var/** @type {?} */rule=m[0].replace(m[2],'').replace(m[1],m[4]);r+=rule+'\n\n';}return r;}/**
     * @param {?} cssText
     * @return {?}
     */},{key:'_convertColonHost',value:function _convertColonHost(cssText){return this._convertColonRule(cssText,_cssColonHostRe,this._colonHostPartReplacer);}/**
     * @param {?} cssText
     * @return {?}
     */},{key:'_convertColonHostContext',value:function _convertColonHostContext(cssText){return this._convertColonRule(cssText,_cssColonHostContextRe,this._colonHostContextPartReplacer);}/**
     * @param {?} cssText
     * @param {?} regExp
     * @param {?} partReplacer
     * @return {?}
     */},{key:'_convertColonRule',value:function _convertColonRule(cssText,regExp,partReplacer){// m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule
return cssText.replace(regExp,function(){for(var _len3=arguments.length,m=Array(_len3),_key3=0;_key3<_len3;_key3++){m[_key3]=arguments[_key3];}if(m[2]){var/** @type {?} */parts=m[2].split(',');var/** @type {?} */r=[];for(var/** @type {?} */i=0;i<parts.length;i++){var/** @type {?} */p=parts[i].trim();if(!p)break;r.push(partReplacer(_polyfillHostNoCombinator,p,m[3]));}return r.join(',');}else{return _polyfillHostNoCombinator+m[3];}});}/**
     * @param {?} host
     * @param {?} part
     * @param {?} suffix
     * @return {?}
     */},{key:'_colonHostContextPartReplacer',value:function _colonHostContextPartReplacer(host,part,suffix){if(part.indexOf(_polyfillHost)>-1){return this._colonHostPartReplacer(host,part,suffix);}else{return host+part+suffix+', '+part+' '+host+suffix;}}/**
     * @param {?} host
     * @param {?} part
     * @param {?} suffix
     * @return {?}
     */},{key:'_colonHostPartReplacer',value:function _colonHostPartReplacer(host,part,suffix){return host+part.replace(_polyfillHost,'')+suffix;}/**
     * @param {?} cssText
     * @return {?}
     */},{key:'_convertShadowDOMSelectors',value:function _convertShadowDOMSelectors(cssText){return _shadowDOMSelectorsRe.reduce(function(result,pattern){return result.replace(pattern,' ');},cssText);}/**
     * @param {?} cssText
     * @param {?} scopeSelector
     * @param {?} hostSelector
     * @return {?}
     */},{key:'_scopeSelectors',value:function _scopeSelectors(cssText,scopeSelector,hostSelector){var _this195=this;return processRules(cssText,function(rule){var/** @type {?} */selector=rule.selector;var/** @type {?} */content=rule.content;if(rule.selector[0]!='@'){selector=_this195._scopeSelector(rule.selector,scopeSelector,hostSelector,_this195.strictStyling);}else if(rule.selector.startsWith('@media')||rule.selector.startsWith('@supports')||rule.selector.startsWith('@page')||rule.selector.startsWith('@document')){content=_this195._scopeSelectors(rule.content,scopeSelector,hostSelector);}return new CssRule(selector,content);});}/**
     * @param {?} selector
     * @param {?} scopeSelector
     * @param {?} hostSelector
     * @param {?} strict
     * @return {?}
     */},{key:'_scopeSelector',value:function _scopeSelector(selector,scopeSelector,hostSelector,strict){var _this196=this;return selector.split(',').map(function(part){return part.trim().split(_shadowDeepSelectors);}).map(function(deepParts){var _deepParts=_toArray(deepParts),shallowPart=_deepParts[0],otherParts=_deepParts.slice(1);var/** @type {?} */applyScope=function applyScope(shallowPart){if(_this196._selectorNeedsScoping(shallowPart,scopeSelector)){return strict?_this196._applyStrictSelectorScope(shallowPart,scopeSelector,hostSelector):_this196._applySelectorScope(shallowPart,scopeSelector,hostSelector);}else{return shallowPart;}};return[applyScope(shallowPart)].concat(_toConsumableArray(otherParts)).join(' ');}).join(', ');}/**
     * @param {?} selector
     * @param {?} scopeSelector
     * @return {?}
     */},{key:'_selectorNeedsScoping',value:function _selectorNeedsScoping(selector,scopeSelector){var/** @type {?} */re=this._makeScopeMatcher(scopeSelector);return!re.test(selector);}/**
     * @param {?} scopeSelector
     * @return {?}
     */},{key:'_makeScopeMatcher',value:function _makeScopeMatcher(scopeSelector){var/** @type {?} */lre=/\[/g;var/** @type {?} */rre=/\]/g;scopeSelector=scopeSelector.replace(lre,'\\[').replace(rre,'\\]');return new RegExp('^('+scopeSelector+')'+_selectorReSuffix,'m');}/**
     * @param {?} selector
     * @param {?} scopeSelector
     * @param {?} hostSelector
     * @return {?}
     */},{key:'_applySelectorScope',value:function _applySelectorScope(selector,scopeSelector,hostSelector){// Difference from webcomponents.js: scopeSelector could not be an array
return this._applySimpleSelectorScope(selector,scopeSelector,hostSelector);}/**
     * @param {?} selector
     * @param {?} scopeSelector
     * @param {?} hostSelector
     * @return {?}
     */},{key:'_applySimpleSelectorScope',value:function _applySimpleSelectorScope(selector,scopeSelector,hostSelector){// In Android browser, the lastIndex is not reset when the regex is used in String.replace()
_polyfillHostRe.lastIndex=0;if(_polyfillHostRe.test(selector)){var/** @type {?} */replaceBy=this.strictStyling?'['+hostSelector+']':scopeSelector;return selector.replace(_polyfillHostNoCombinatorRe,function(hnc,selector){return selector.replace(/([^:]*)(:*)(.*)/,function(_,before,colon,after){return before+replaceBy+colon+after;});}).replace(_polyfillHostRe,replaceBy+' ');}return scopeSelector+' '+selector;}/**
     * @param {?} selector
     * @param {?} scopeSelector
     * @param {?} hostSelector
     * @return {?}
     */},{key:'_applyStrictSelectorScope',value:function _applyStrictSelectorScope(selector,scopeSelector,hostSelector){var _this197=this;var/** @type {?} */isRe=/\[is=([^\]]*)\]/g;scopeSelector=scopeSelector.replace(isRe,function(_){return arguments.length<=1?undefined:arguments[1];});var/** @type {?} */attrName='['+scopeSelector+']';var/** @type {?} */_scopeSelectorPart=function _scopeSelectorPart(p){var/** @type {?} */scopedP=p.trim();if(!scopedP){return'';}if(p.indexOf(_polyfillHostNoCombinator)>-1){scopedP=_this197._applySimpleSelectorScope(p,scopeSelector,hostSelector);}else{// remove :host since it should be unnecessary
var/** @type {?} */t=p.replace(_polyfillHostRe,'');if(t.length>0){var/** @type {?} */matches=t.match(/([^:]*)(:*)(.*)/);if(matches){scopedP=matches[1]+attrName+matches[2]+matches[3];}}}return scopedP;};var/** @type {?} */safeContent=new SafeSelector(selector);selector=safeContent.content();var/** @type {?} */scopedSelector='';var/** @type {?} */startIndex=0;var/** @type {?} */res=void 0;var/** @type {?} */sep=/( |>|\+|~(?!=))\s*/g;var/** @type {?} */scopeAfter=selector.indexOf(_polyfillHostNoCombinator);while((res=sep.exec(selector))!==null){var/** @type {?} */separator=res[1];var/** @type {?} */part=selector.slice(startIndex,res.index).trim();// if a selector appears before :host-context it should not be shimmed as it
// matches on ancestor elements and not on elements in the host's shadow
var/** @type {?} */scopedPart=startIndex>=scopeAfter?_scopeSelectorPart(part):part;scopedSelector+=scopedPart+' '+separator+' ';startIndex=sep.lastIndex;}scopedSelector+=_scopeSelectorPart(selector.substring(startIndex));// replace the placeholders with their original values
return safeContent.restore(scopedSelector);}/**
     * @param {?} selector
     * @return {?}
     */},{key:'_insertPolyfillHostInCssText',value:function _insertPolyfillHostInCssText(selector){return selector.replace(_colonHostContextRe,_polyfillHostContext).replace(_colonHostRe,_polyfillHost);}}]);return ShadowCss;}();var SafeSelector=function(){/**
     * @param {?} selector
     */function SafeSelector(selector){var _this198=this;_classCallCheck(this,SafeSelector);this.placeholders=[];this.index=0;// Replaces attribute selectors with placeholders.
// The WS in [attr="va lue"] would otherwise be interpreted as a selector separator.
selector=selector.replace(/(\[[^\]]*\])/g,function(_,keep){var replaceBy='__ph-'+_this198.index+'__';_this198.placeholders.push(keep);_this198.index++;return replaceBy;});// Replaces the expression in `:nth-child(2n + 1)` with a placeholder.
// WS and "+" would otherwise be interpreted as selector separators.
this._content=selector.replace(/(:nth-[-\w]+)(\([^)]+\))/g,function(_,pseudo,exp){var replaceBy='__ph-'+_this198.index+'__';_this198.placeholders.push(exp);_this198.index++;return pseudo+replaceBy;});}_createClass(SafeSelector,[{key:'restore',/**
     * @param {?} content
     * @return {?}
     */value:function restore(content){var _this199=this;return content.replace(/__ph-(\d+)__/g,function(ph,index){return _this199.placeholders[+index];});}/**
     * @return {?}
     */},{key:'content',value:function content(){return this._content;}}]);return SafeSelector;}();var/** @type {?} */_cssContentNextSelectorRe=/polyfill-next-selector[^}]*content:[\s]*?(['"])(.*?)\1[;\s]*}([^{]*?){/gim;var/** @type {?} */_cssContentRuleRe=/(polyfill-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;var/** @type {?} */_cssContentUnscopedRuleRe=/(polyfill-unscoped-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;var/** @type {?} */_polyfillHost='-shadowcsshost';// note: :host-context pre-processed to -shadowcsshostcontext.
var/** @type {?} */_polyfillHostContext='-shadowcsscontext';var/** @type {?} */_parenSuffix=')(?:\\(('+'(?:\\([^)(]*\\)|[^)(]*)+?'+')\\))?([^,{]*)';var/** @type {?} */_cssColonHostRe=new RegExp('('+_polyfillHost+_parenSuffix,'gim');var/** @type {?} */_cssColonHostContextRe=new RegExp('('+_polyfillHostContext+_parenSuffix,'gim');var/** @type {?} */_polyfillHostNoCombinator=_polyfillHost+'-no-combinator';var/** @type {?} */_polyfillHostNoCombinatorRe=/-shadowcsshost-no-combinator([^\s]*)/;var/** @type {?} */_shadowDOMSelectorsRe=[/::shadow/g,/::content/g,// Deprecated selectors
/\/shadow-deep\//g,/\/shadow\//g];var/** @type {?} */_shadowDeepSelectors=/(?:>>>)|(?:\/deep\/)/g;var/** @type {?} */_selectorReSuffix='([>\\s~+\[.,{:][\\s\\S]*)?$';var/** @type {?} */_polyfillHostRe=/-shadowcsshost/gim;var/** @type {?} */_colonHostRe=/:host/gim;var/** @type {?} */_colonHostContextRe=/:host-context/gim;var/** @type {?} */_commentRe=/\/\*\s*[\s\S]*?\*\//g;/**
 * @param {?} input
 * @return {?}
 */function stripComments(input){return input.replace(_commentRe,'');}// all comments except inline source mapping
var/** @type {?} */_sourceMappingUrlRe=/\/\*\s*#\s*sourceMappingURL=[\s\S]+?\*\//;/**
 * @param {?} input
 * @return {?}
 */function extractSourceMappingUrl(input){var/** @type {?} */matcher=input.match(_sourceMappingUrlRe);return matcher?matcher[0]:'';}var/** @type {?} */_ruleRe=/(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g;var/** @type {?} */_curlyRe=/([{}])/g;var/** @type {?} */OPEN_CURLY='{';var/** @type {?} */CLOSE_CURLY='}';var/** @type {?} */BLOCK_PLACEHOLDER='%BLOCK%';var CssRule=/**
     * @param {?} selector
     * @param {?} content
     */function CssRule(selector,content){_classCallCheck(this,CssRule);this.selector=selector;this.content=content;};/**
 * @param {?} input
 * @param {?} ruleCallback
 * @return {?}
 */function processRules(input,ruleCallback){var/** @type {?} */inputWithEscapedBlocks=escapeBlocks(input);var/** @type {?} */nextBlockIndex=0;return inputWithEscapedBlocks.escapedString.replace(_ruleRe,function(){var/** @type {?} */selector=arguments.length<=2?undefined:arguments[2];var/** @type {?} */content='';var/** @type {?} */suffix=arguments.length<=4?undefined:arguments[4];var/** @type {?} */contentPrefix='';if(suffix&&suffix.startsWith('{'+BLOCK_PLACEHOLDER)){content=inputWithEscapedBlocks.blocks[nextBlockIndex++];suffix=suffix.substring(BLOCK_PLACEHOLDER.length+1);contentPrefix='{';}var/** @type {?} */rule=ruleCallback(new CssRule(selector,content));return''+(arguments.length<=1?undefined:arguments[1])+rule.selector+(arguments.length<=3?undefined:arguments[3])+contentPrefix+rule.content+suffix;});}var StringWithEscapedBlocks=/**
     * @param {?} escapedString
     * @param {?} blocks
     */function StringWithEscapedBlocks(escapedString,blocks){_classCallCheck(this,StringWithEscapedBlocks);this.escapedString=escapedString;this.blocks=blocks;};/**
 * @param {?} input
 * @return {?}
 */function escapeBlocks(input){var/** @type {?} */inputParts=input.split(_curlyRe);var/** @type {?} */resultParts=[];var/** @type {?} */escapedBlocks=[];var/** @type {?} */bracketCount=0;var/** @type {?} */currentBlockParts=[];for(var/** @type {?} */partIndex=0;partIndex<inputParts.length;partIndex++){var/** @type {?} */part=inputParts[partIndex];if(part==CLOSE_CURLY){bracketCount--;}if(bracketCount>0){currentBlockParts.push(part);}else{if(currentBlockParts.length>0){escapedBlocks.push(currentBlockParts.join(''));resultParts.push(BLOCK_PLACEHOLDER);currentBlockParts=[];}resultParts.push(part);}if(part==OPEN_CURLY){bracketCount++;}}if(currentBlockParts.length>0){escapedBlocks.push(currentBlockParts.join(''));resultParts.push(BLOCK_PLACEHOLDER);}return new StringWithEscapedBlocks(resultParts.join(''),escapedBlocks);}var/** @type {?} */COMPONENT_VARIABLE='%COMP%';var/** @type {?} */HOST_ATTR='_nghost-'+COMPONENT_VARIABLE;var/** @type {?} */CONTENT_ATTR='_ngcontent-'+COMPONENT_VARIABLE;var StylesCompileDependency=/**
     * @param {?} name
     * @param {?} moduleUrl
     * @param {?} isShimmed
     * @param {?} valuePlaceholder
     */function StylesCompileDependency(name,moduleUrl,isShimmed,valuePlaceholder){_classCallCheck(this,StylesCompileDependency);this.name=name;this.moduleUrl=moduleUrl;this.isShimmed=isShimmed;this.valuePlaceholder=valuePlaceholder;};var StylesCompileResult=/**
     * @param {?} componentStylesheet
     * @param {?} externalStylesheets
     */function StylesCompileResult(componentStylesheet,externalStylesheets){_classCallCheck(this,StylesCompileResult);this.componentStylesheet=componentStylesheet;this.externalStylesheets=externalStylesheets;};var CompiledStylesheet=/**
     * @param {?} statements
     * @param {?} stylesVar
     * @param {?} dependencies
     * @param {?} isShimmed
     * @param {?} meta
     */function CompiledStylesheet(statements,stylesVar,dependencies,isShimmed,meta){_classCallCheck(this,CompiledStylesheet);this.statements=statements;this.stylesVar=stylesVar;this.dependencies=dependencies;this.isShimmed=isShimmed;this.meta=meta;};var StyleCompiler=function(){/**
     * @param {?} _urlResolver
     */function StyleCompiler(_urlResolver){_classCallCheck(this,StyleCompiler);this._urlResolver=_urlResolver;this._shadowCss=new ShadowCss();}/**
     * @param {?} comp
     * @return {?}
     */_createClass(StyleCompiler,[{key:'compileComponent',value:function compileComponent(comp){var _this200=this;var/** @type {?} */externalStylesheets=[];var/** @type {?} */componentStylesheet=this._compileStyles(comp,new CompileStylesheetMetadata({styles:comp.template.styles,styleUrls:comp.template.styleUrls,moduleUrl:identifierModuleUrl(comp.type)}),true);comp.template.externalStylesheets.forEach(function(stylesheetMeta){var/** @type {?} */compiledStylesheet=_this200._compileStyles(comp,stylesheetMeta,false);externalStylesheets.push(compiledStylesheet);});return new StylesCompileResult(componentStylesheet,externalStylesheets);}/**
     * @param {?} comp
     * @param {?} stylesheet
     * @param {?} isComponentStylesheet
     * @return {?}
     */},{key:'_compileStyles',value:function _compileStyles(comp,stylesheet,isComponentStylesheet){var _this201=this;var/** @type {?} */shim=comp.template.encapsulation===__WEBPACK_IMPORTED_MODULE_0__angular_core__["Q" /* ViewEncapsulation */].Emulated;var/** @type {?} */styleExpressions=stylesheet.styles.map(function(plainStyle){return literal(_this201._shimIfNeeded(plainStyle,shim));});var/** @type {?} */dependencies=[];for(var/** @type {?} */i=0;i<stylesheet.styleUrls.length;i++){var/** @type {?} */identifier={reference:null};dependencies.push(new StylesCompileDependency(getStylesVarName(null),stylesheet.styleUrls[i],shim,identifier));styleExpressions.push(new ExternalExpr(identifier));}// styles variable contains plain strings and arrays of other styles arrays (recursive),
// so we set its type to dynamic.
var/** @type {?} */stylesVar=getStylesVarName(isComponentStylesheet?comp:null);var/** @type {?} */stmt=variable(stylesVar).set(literalArr(styleExpressions,new ArrayType(DYNAMIC_TYPE,[TypeModifier.Const]))).toDeclStmt(null,[StmtModifier.Final]);return new CompiledStylesheet([stmt],stylesVar,dependencies,shim,stylesheet);}/**
     * @param {?} style
     * @param {?} shim
     * @return {?}
     */},{key:'_shimIfNeeded',value:function _shimIfNeeded(style,shim){return shim?this._shadowCss.shimCssText(style,CONTENT_ATTR,HOST_ATTR):style;}}]);return StyleCompiler;}();StyleCompiler.decorators=[{type:CompilerInjectable}];/** @nocollapse */StyleCompiler.ctorParameters=function(){return[{type:UrlResolver}];};/**
 * @param {?} component
 * @return {?}
 */function getStylesVarName(component){var/** @type {?} */result='styles';if(component){result+='_'+identifierName(component.type);}return result;}var _DebugState=/**
     * @param {?} nodeIndex
     * @param {?} sourceAst
     */function _DebugState(nodeIndex,sourceAst){_classCallCheck(this,_DebugState);this.nodeIndex=nodeIndex;this.sourceAst=sourceAst;};var/** @type {?} */NULL_DEBUG_STATE=new _DebugState(null,null);var CompileMethod=function(){/**
     * @param {?} _view
     */function CompileMethod(_view){_classCallCheck(this,CompileMethod);this._view=_view;this._newState=NULL_DEBUG_STATE;this._currState=NULL_DEBUG_STATE;this._bodyStatements=[];this._debugEnabled=this._view.genConfig.genDebugInfo;}/**
     * @return {?}
     */_createClass(CompileMethod,[{key:'_updateDebugContextIfNeeded',value:function _updateDebugContextIfNeeded(){if(this._newState.nodeIndex!==this._currState.nodeIndex||this._newState.sourceAst!==this._currState.sourceAst){var/** @type {?} */expr=this._updateDebugContext(this._newState);if(expr){this._bodyStatements.push(expr.toStmt());}}}/**
     * @param {?} newState
     * @return {?}
     */},{key:'_updateDebugContext',value:function _updateDebugContext(newState){this._currState=this._newState=newState;if(this._debugEnabled){var/** @type {?} */sourceLocation=newState.sourceAst?newState.sourceAst.sourceSpan.start:null;return THIS_EXPR.callMethod('debug',[literal(newState.nodeIndex),sourceLocation?literal(sourceLocation.line):NULL_EXPR,sourceLocation?literal(sourceLocation.col):NULL_EXPR]);}else{return null;}}/**
     * @param {?} nodeIndex
     * @param {?} templateAst
     * @return {?}
     */},{key:'resetDebugInfoExpr',value:function resetDebugInfoExpr(nodeIndex,templateAst){var/** @type {?} */res=this._updateDebugContext(new _DebugState(nodeIndex,templateAst));return res||NULL_EXPR;}/**
     * @param {?} nodeIndex
     * @param {?} templateAst
     * @return {?}
     */},{key:'resetDebugInfo',value:function resetDebugInfo(nodeIndex,templateAst){this._newState=new _DebugState(nodeIndex,templateAst);}/**
     * @param {...?} stmts
     * @return {?}
     */},{key:'push',value:function push(){for(var _len4=arguments.length,stmts=Array(_len4),_key4=0;_key4<_len4;_key4++){stmts[_key4]=arguments[_key4];}this.addStmts(stmts);}/**
     * @param {?} stmt
     * @return {?}
     */},{key:'addStmt',value:function addStmt(stmt){this._updateDebugContextIfNeeded();this._bodyStatements.push(stmt);}/**
     * @param {?} stmts
     * @return {?}
     */},{key:'addStmts',value:function addStmts(stmts){var _bodyStatements;this._updateDebugContextIfNeeded();(_bodyStatements=this._bodyStatements).push.apply(_bodyStatements,_toConsumableArray(stmts));}/**
     * @return {?}
     */},{key:'finish',value:function finish(){return this._bodyStatements;}/**
     * @return {?}
     */},{key:'isEmpty',value:function isEmpty(){return this._bodyStatements.length===0;}}]);return CompileMethod;}();/**
 * @param {?} property
 * @param {?} callingView
 * @param {?} definedView
 * @return {?}
 */function getPropertyInView(property,callingView,definedView){if(callingView===definedView){return property;}else{var/** @type {?} */viewProp=THIS_EXPR;var/** @type {?} */currView=callingView;while(currView!==definedView&&currView.declarationElement.view){currView=currView.declarationElement.view;viewProp=viewProp.prop('parentView');}if(currView!==definedView){throw new Error('Internal error: Could not calculate a property in a parent view: '+property);}return property.visitExpression(new _ReplaceViewTransformer(viewProp,definedView),null);}}var _ReplaceViewTransformer=function(_ExpressionTransforme2){_inherits(_ReplaceViewTransformer,_ExpressionTransforme2);/**
     * @param {?} _viewExpr
     * @param {?} _view
     */function _ReplaceViewTransformer(_viewExpr,_view){_classCallCheck(this,_ReplaceViewTransformer);var _this202=_possibleConstructorReturn(this,(_ReplaceViewTransformer.__proto__||Object.getPrototypeOf(_ReplaceViewTransformer)).call(this));_this202._viewExpr=_viewExpr;_this202._view=_view;return _this202;}/**
     * @param {?} expr
     * @return {?}
     */_createClass(_ReplaceViewTransformer,[{key:'_isThis',value:function _isThis(expr){return expr instanceof ReadVarExpr&&expr.builtin===BuiltinVar.This;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitReadVarExpr',value:function visitReadVarExpr(ast,context){return this._isThis(ast)?this._viewExpr:ast;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitReadPropExpr',value:function visitReadPropExpr(ast,context){if(this._isThis(ast.receiver)){// Note: Don't cast for members of the AppView base class...
if(this._view.fields.some(function(field){return field.name==ast.name;})||this._view.getters.some(function(field){return field.name==ast.name;})){return this._viewExpr.cast(this._view.classType).prop(ast.name);}}return _get(_ReplaceViewTransformer.prototype.__proto__||Object.getPrototypeOf(_ReplaceViewTransformer.prototype),'visitReadPropExpr',this).call(this,ast,context);}}]);return _ReplaceViewTransformer;}(ExpressionTransformer);/**
 * @param {?} view
 * @param {?} token
 * @param {?} optional
 * @return {?}
 */function injectFromViewParentInjector(view,token,optional){var/** @type {?} */viewExpr=void 0;if(view.viewType===__WEBPACK_IMPORTED_MODULE_0__angular_core__["_30" /* ɵViewType */].HOST){viewExpr=THIS_EXPR;}else{viewExpr=THIS_EXPR.prop('parentView');}var/** @type {?} */args=[createDiTokenExpression(token),THIS_EXPR.prop('parentIndex')];if(optional){args.push(NULL_EXPR);}return viewExpr.callMethod('injectorGet',args);}/**
 * @param {?} elementIndex
 * @return {?}
 */function getHandleEventMethodName(elementIndex){return'handleEvent_'+elementIndex;}var ViewQueryValues=/**
     * @param {?} view
     * @param {?} values
     */function ViewQueryValues(view,values){_classCallCheck(this,ViewQueryValues);this.view=view;this.values=values;};var CompileQuery=function(){/**
     * @param {?} meta
     * @param {?} queryList
     * @param {?} ownerDirectiveExpression
     * @param {?} view
     */function CompileQuery(meta,queryList,ownerDirectiveExpression,view){_classCallCheck(this,CompileQuery);this.meta=meta;this.queryList=queryList;this.ownerDirectiveExpression=ownerDirectiveExpression;this.view=view;this._values=new ViewQueryValues(view,[]);}/**
     * @param {?} value
     * @param {?} view
     * @return {?}
     */_createClass(CompileQuery,[{key:'addValue',value:function addValue(value,view){var/** @type {?} */currentView=view;var/** @type {?} */elPath=[];while(currentView&&currentView!==this.view){var/** @type {?} */parentEl=currentView.declarationElement;elPath.unshift(parentEl);currentView=parentEl.view;}var/** @type {?} */queryListForDirtyExpr=getPropertyInView(this.queryList,view,this.view);var/** @type {?} */viewValues=this._values;elPath.forEach(function(el){var/** @type {?} */last=viewValues.values.length>0?viewValues.values[viewValues.values.length-1]:null;if(last instanceof ViewQueryValues&&last.view===el.embeddedView){viewValues=last;}else{var/** @type {?} */newViewValues=new ViewQueryValues(el.embeddedView,[]);viewValues.values.push(newViewValues);viewValues=newViewValues;}});viewValues.values.push(value);if(elPath.length>0){view.dirtyParentQueriesMethod.addStmt(queryListForDirtyExpr.callMethod('setDirty',[]).toStmt());}}/**
     * @return {?}
     */},{key:'_isStatic',value:function _isStatic(){return!this._values.values.some(function(value){return value instanceof ViewQueryValues;});}/**
     * @param {?} targetStaticMethod
     * @param {?} targetDynamicMethod
     * @return {?}
     */},{key:'generateStatements',value:function generateStatements(targetStaticMethod,targetDynamicMethod){var/** @type {?} */values=createQueryValues(this._values);var/** @type {?} */updateStmts=[this.queryList.callMethod('reset',[literalArr(values)]).toStmt()];if(this.ownerDirectiveExpression){var/** @type {?} */valueExpr=this.meta.first?this.queryList.prop('first'):this.queryList;updateStmts.push(this.ownerDirectiveExpression.prop(this.meta.propertyName).set(valueExpr).toStmt());}if(!this.meta.first){updateStmts.push(this.queryList.callMethod('notifyOnChanges',[]).toStmt());}if(this.meta.first&&this._isStatic()){// for queries that don't change and the user asked for a single element,
// set it immediately. That is e.g. needed for querying for ViewContainerRefs, ...
// we don't do this for QueryLists for now as this would break the timing when
// we call QueryList listeners...
targetStaticMethod.addStmts(updateStmts);}else{targetDynamicMethod.addStmt(new IfStmt(this.queryList.prop('dirty'),updateStmts));}}}]);return CompileQuery;}();/**
 * @param {?} viewValues
 * @return {?}
 */function createQueryValues(viewValues){return ListWrapper.flatten(viewValues.values.map(function(entry){if(entry instanceof ViewQueryValues){return mapNestedViews(entry.view.declarationElement.viewContainer,entry.view,createQueryValues(entry));}else{return entry;}}));}/**
 * @param {?} viewContainer
 * @param {?} view
 * @param {?} expressions
 * @return {?}
 */function mapNestedViews(viewContainer,view,expressions){var/** @type {?} */adjustedExpressions=expressions.map(function(expr){return replaceVarInExpression(THIS_EXPR.name,variable('nestedView'),expr);});return viewContainer.callMethod('mapNestedViews',[variable(view.className),fn([new FnParam('nestedView',view.classType)],[new ReturnStatement(literalArr(adjustedExpressions))],DYNAMIC_TYPE)]);}/**
 * @param {?} propertyName
 * @param {?} compileView
 * @return {?}
 */function createQueryList(propertyName,compileView){compileView.fields.push(new ClassField(propertyName,importType(createIdentifier(Identifiers.QueryList),[DYNAMIC_TYPE])));var/** @type {?} */expr=THIS_EXPR.prop(propertyName);compileView.createMethod.addStmt(THIS_EXPR.prop(propertyName).set(importExpr(createIdentifier(Identifiers.QueryList),[DYNAMIC_TYPE]).instantiate([])).toStmt());return expr;}/**
 * @param {?} map
 * @param {?} query
 * @return {?}
 */function addQueryToTokenMap(map,query){query.meta.selectors.forEach(function(selector){var/** @type {?} */entry=map.get(tokenReference(selector));if(!entry){entry=[];map.set(tokenReference(selector),entry);}entry.push(query);});}var ViewTypeEnum=function(){function ViewTypeEnum(){_classCallCheck(this,ViewTypeEnum);}_createClass(ViewTypeEnum,null,[{key:'fromValue',/**
     * @param {?} value
     * @return {?}
     */value:function fromValue(value){return createEnumExpression(Identifiers.ViewType,value);}}]);return ViewTypeEnum;}();var ViewEncapsulationEnum=function(){function ViewEncapsulationEnum(){_classCallCheck(this,ViewEncapsulationEnum);}_createClass(ViewEncapsulationEnum,null,[{key:'fromValue',/**
     * @param {?} value
     * @return {?}
     */value:function fromValue(value){return createEnumExpression(Identifiers.ViewEncapsulation,value);}}]);return ViewEncapsulationEnum;}();var ChangeDetectorStatusEnum=function(){function ChangeDetectorStatusEnum(){_classCallCheck(this,ChangeDetectorStatusEnum);}_createClass(ChangeDetectorStatusEnum,null,[{key:'fromValue',/**
     * @param {?} value
     * @return {?}
     */value:function fromValue(value){return createEnumExpression(Identifiers.ChangeDetectorStatus,value);}}]);return ChangeDetectorStatusEnum;}();var ViewConstructorVars=function ViewConstructorVars(){_classCallCheck(this,ViewConstructorVars);};ViewConstructorVars.viewUtils=variable('viewUtils');ViewConstructorVars.parentView=variable('parentView');ViewConstructorVars.parentIndex=variable('parentIndex');ViewConstructorVars.parentElement=variable('parentElement');var ViewProperties=function ViewProperties(){_classCallCheck(this,ViewProperties);};ViewProperties.renderer=THIS_EXPR.prop('renderer');ViewProperties.viewUtils=THIS_EXPR.prop('viewUtils');ViewProperties.throwOnChange=THIS_EXPR.prop('throwOnChange');var InjectMethodVars$1=function InjectMethodVars$1(){_classCallCheck(this,InjectMethodVars$1);};InjectMethodVars$1.token=variable('token');InjectMethodVars$1.requestNodeIndex=variable('requestNodeIndex');InjectMethodVars$1.notFoundResult=variable('notFoundResult');/**
 * This is currently not read, but will probably be used in the future.
 * We keep it as we already pass it through all the right places...
 */var ComponentViewDependency=/**
     * @param {?} compType
     */function ComponentViewDependency(compType){_classCallCheck(this,ComponentViewDependency);this.compType=compType;};/**
 * This is currently not read, but will probably be used in the future.
 * We keep it as we already pass it through all the right places...
 */var ComponentFactoryDependency$1=/**
     * @param {?} compType
     */function ComponentFactoryDependency$1(compType){_classCallCheck(this,ComponentFactoryDependency$1);this.compType=compType;};/**
 * This is currently not read, but will probably be used in the future.
 * We keep it as we already pass it through all the right places...
 */var DirectiveWrapperDependency=/**
     * @param {?} dirType
     */function DirectiveWrapperDependency(dirType){_classCallCheck(this,DirectiveWrapperDependency);this.dirType=dirType;};var CompileNode=function(){/**
     * @param {?} parent
     * @param {?} view
     * @param {?} nodeIndex
     * @param {?} renderNode
     * @param {?} sourceAst
     */function CompileNode(parent,view,nodeIndex,renderNode,sourceAst){_classCallCheck(this,CompileNode);this.parent=parent;this.view=view;this.nodeIndex=nodeIndex;this.renderNode=renderNode;this.sourceAst=sourceAst;}/**
     * @return {?}
     */_createClass(CompileNode,[{key:'isNull',value:function isNull(){return!this.renderNode;}/**
     * @return {?}
     */},{key:'isRootElement',value:function isRootElement(){return this.view!=this.parent.view;}}]);return CompileNode;}();var CompileElement=function(_CompileNode){_inherits(CompileElement,_CompileNode);/**
     * @param {?} parent
     * @param {?} view
     * @param {?} nodeIndex
     * @param {?} renderNode
     * @param {?} sourceAst
     * @param {?} component
     * @param {?} _directives
     * @param {?} _resolvedProvidersArray
     * @param {?} hasViewContainer
     * @param {?} hasEmbeddedView
     * @param {?} references
     */function CompileElement(parent,view,nodeIndex,renderNode,sourceAst,component,_directives,_resolvedProvidersArray,hasViewContainer,hasEmbeddedView,references){_classCallCheck(this,CompileElement);var _this203=_possibleConstructorReturn(this,(CompileElement.__proto__||Object.getPrototypeOf(CompileElement)).call(this,parent,view,nodeIndex,renderNode,sourceAst));_this203.component=component;_this203._directives=_directives;_this203._resolvedProvidersArray=_resolvedProvidersArray;_this203.hasViewContainer=hasViewContainer;_this203.hasEmbeddedView=hasEmbeddedView;_this203.compViewExpr=null;_this203.instances=new Map();_this203.directiveWrapperInstance=new Map();_this203._queryCount=0;_this203._queries=new Map();_this203.contentNodesByNgContentIndex=null;_this203.referenceTokens={};references.forEach(function(ref){return _this203.referenceTokens[ref.name]=ref.value;});_this203.elementRef=importExpr(createIdentifier(Identifiers.ElementRef)).instantiate([_this203.renderNode]);_this203.instances.set(resolveIdentifier(Identifiers.ElementRef),_this203.elementRef);_this203.instances.set(resolveIdentifier(Identifiers.Injector),THIS_EXPR.callMethod('injector',[literal(_this203.nodeIndex)]));_this203.instances.set(resolveIdentifier(Identifiers.Renderer),THIS_EXPR.prop('renderer'));if(_this203.hasViewContainer||_this203.hasEmbeddedView){_this203._createViewContainer();}if(_this203.component){_this203._createComponentFactoryResolver();}return _this203;}/**
     * @return {?}
     */_createClass(CompileElement,[{key:'_createViewContainer',/**
     * @return {?}
     */value:function _createViewContainer(){var/** @type {?} */fieldName='_vc_'+this.nodeIndex;var/** @type {?} */parentNodeIndex=this.isRootElement()?null:this.parent.nodeIndex;// private is fine here as no child view will reference a ViewContainer
this.view.fields.push(new ClassField(fieldName,importType(createIdentifier(Identifiers.ViewContainer)),[StmtModifier.Private]));var/** @type {?} */statement=THIS_EXPR.prop(fieldName).set(importExpr(createIdentifier(Identifiers.ViewContainer)).instantiate([literal(this.nodeIndex),literal(parentNodeIndex),THIS_EXPR,this.renderNode])).toStmt();this.view.createMethod.addStmt(statement);this.viewContainer=THIS_EXPR.prop(fieldName);this.instances.set(resolveIdentifier(Identifiers.ViewContainer),this.viewContainer);this.view.viewContainers.push(this.viewContainer);}/**
     * @return {?}
     */},{key:'_createComponentFactoryResolver',value:function _createComponentFactoryResolver(){var _this204=this;var/** @type {?} */entryComponents=this.component.entryComponents.map(function(entryComponent){_this204.view.targetDependencies.push(new ComponentFactoryDependency$1(entryComponent.componentType));return{reference:entryComponent.componentFactory};});if(!entryComponents||entryComponents.length===0){return;}var/** @type {?} */createComponentFactoryResolverExpr=importExpr(createIdentifier(Identifiers.CodegenComponentFactoryResolver)).instantiate([literalArr(entryComponents.map(function(entryComponent){return importExpr(entryComponent);})),injectFromViewParentInjector(this.view,createIdentifierToken(Identifiers.ComponentFactoryResolver),false)]);var/** @type {?} */provider={token:createIdentifierToken(Identifiers.ComponentFactoryResolver),useValue:createComponentFactoryResolverExpr};// Add ComponentFactoryResolver as first provider as it does not have deps on other providers
// ProviderAstType.PrivateService as only the component and its view can see it,
// but nobody else
this._resolvedProvidersArray.unshift(new ProviderAst(provider.token,false,true,[provider],ProviderAstType.PrivateService,[],this.sourceAst.sourceSpan));}/**
     * @param {?} compViewExpr
     * @return {?}
     */},{key:'setComponentView',value:function setComponentView(compViewExpr){this.compViewExpr=compViewExpr;this.contentNodesByNgContentIndex=new Array(this.component.template.ngContentSelectors.length);for(var/** @type {?} */i=0;i<this.contentNodesByNgContentIndex.length;i++){this.contentNodesByNgContentIndex[i]=[];}}/**
     * @param {?} embeddedView
     * @return {?}
     */},{key:'setEmbeddedView',value:function setEmbeddedView(embeddedView){this.embeddedView=embeddedView;if(isPresent(embeddedView)){var/** @type {?} */createTemplateRefExpr=importExpr(createIdentifier(Identifiers.TemplateRef_)).instantiate([THIS_EXPR,literal(this.nodeIndex),this.renderNode]);var/** @type {?} */provider={token:createIdentifierToken(Identifiers.TemplateRef),useValue:createTemplateRefExpr};// Add TemplateRef as first provider as it does not have deps on other providers
this._resolvedProvidersArray.unshift(new ProviderAst(provider.token,false,true,[provider],ProviderAstType.Builtin,[],this.sourceAst.sourceSpan));}}/**
     * @return {?}
     */},{key:'beforeChildren',value:function beforeChildren(){var _this205=this;if(this.hasViewContainer){this.instances.set(resolveIdentifier(Identifiers.ViewContainerRef),this.viewContainer.prop('vcRef'));}this._resolvedProviders=new Map();this._resolvedProvidersArray.forEach(function(provider){return _this205._resolvedProviders.set(tokenReference(provider.token),provider);});// create all the provider instances, some in the view constructor,
// some as getters. We rely on the fact that they are already sorted topologically.
Array.from(this._resolvedProviders.values()).forEach(function(resolvedProvider){var/** @type {?} */isDirectiveWrapper=resolvedProvider.providerType===ProviderAstType.Component||resolvedProvider.providerType===ProviderAstType.Directive;var/** @type {?} */providerValueExpressions=resolvedProvider.providers.map(function(provider){if(provider.useExisting){return _this205._getDependency(resolvedProvider.providerType,{token:provider.useExisting});}else if(provider.useFactory){var/** @type {?} */deps=provider.deps||provider.useFactory.diDeps;var/** @type {?} */depsExpr=deps.map(function(dep){return _this205._getDependency(resolvedProvider.providerType,dep);});return importExpr(provider.useFactory).callFn(depsExpr);}else if(provider.useClass){var/** @type {?} */_deps4=provider.deps||provider.useClass.diDeps;var/** @type {?} */_depsExpr2=_deps4.map(function(dep){return _this205._getDependency(resolvedProvider.providerType,dep);});if(isDirectiveWrapper){var/** @type {?} */dirMeta=_this205._directives.find(function(dir){return dir.type.reference===provider.useClass.reference;});_this205.view.targetDependencies.push(new DirectiveWrapperDependency(dirMeta.type.reference));return DirectiveWrapperExpressions.create({reference:dirMeta.wrapperType},_depsExpr2);}else{return importExpr(provider.useClass).instantiate(_depsExpr2,importType(provider.useClass));}}else{return convertValueToOutputAst(provider.useValue);}});var/** @type {?} */propName='_'+tokenName(resolvedProvider.token)+'_'+_this205.nodeIndex+'_'+_this205.instances.size;var/** @type {?} */instance=createProviderProperty(propName,providerValueExpressions,resolvedProvider.multiProvider,resolvedProvider.eager,_this205);if(isDirectiveWrapper){_this205.directiveWrapperInstance.set(tokenReference(resolvedProvider.token),instance);_this205.instances.set(tokenReference(resolvedProvider.token),DirectiveWrapperExpressions.context(instance));}else{_this205.instances.set(tokenReference(resolvedProvider.token),instance);}});var _loop2=function _loop2(i){var/** @type {?} */directive=_this205._directives[i];var/** @type {?} */directiveInstance=_this205.instances.get(tokenReference(identifierToken(directive.type)));directive.queries.forEach(function(queryMeta){_this205._addQuery(queryMeta,directiveInstance);});};for(var/** @type {?} */i=0;i<this._directives.length;i++){_loop2(i);}Object.keys(this.referenceTokens).forEach(function(varName){var/** @type {?} */token=_this205.referenceTokens[varName];var/** @type {?} */varValue=void 0;if(token){varValue=_this205.instances.get(tokenReference(token));}else{varValue=_this205.renderNode;}_this205.view.locals.set(varName,varValue);});}/**
     * @param {?} childNodeCount
     * @return {?}
     */},{key:'afterChildren',value:function afterChildren(childNodeCount){var _this206=this;Array.from(this._resolvedProviders.values()).forEach(function(resolvedProvider){// Note: afterChildren is called after recursing into children.
// This is good so that an injector match in an element that is closer to a requesting element
// matches first.
var/** @type {?} */providerExpr=_this206.instances.get(tokenReference(resolvedProvider.token));// Note: view providers are only visible on the injector of that element.
// This is not fully correct as the rules during codegen don't allow a directive
// to get hold of a view provdier on the same element. We still do this semantic
// as it simplifies our model to having only one runtime injector per element.
var/** @type {?} */providerChildNodeCount=resolvedProvider.providerType===ProviderAstType.PrivateService?0:childNodeCount;_this206.view.injectorGetMethod.addStmt(createInjectInternalCondition(_this206.nodeIndex,providerChildNodeCount,resolvedProvider,providerExpr));});}/**
     * @return {?}
     */},{key:'finish',value:function finish(){var _this207=this;Array.from(this._queries.values()).forEach(function(queries){return queries.forEach(function(q){return q.generateStatements(_this207.view.createMethod,_this207.view.updateContentQueriesMethod);});});}/**
     * @param {?} ngContentIndex
     * @param {?} nodeExpr
     * @return {?}
     */},{key:'addContentNode',value:function addContentNode(ngContentIndex,nodeExpr){this.contentNodesByNgContentIndex[ngContentIndex].push(nodeExpr);}/**
     * @return {?}
     */},{key:'getComponent',value:function getComponent(){return isPresent(this.component)?this.instances.get(tokenReference(identifierToken(this.component.type))):null;}/**
     * @return {?}
     */},{key:'getProviderTokens',value:function getProviderTokens(){return Array.from(this._resolvedProviders.values()).map(function(provider){return provider.token;});}/**
     * @param {?} token
     * @return {?}
     */},{key:'getQueriesFor',value:function getQueriesFor(token){var/** @type {?} */result=[];var/** @type {?} */currentEl=this;var/** @type {?} */distance=0;var/** @type {?} */queries=void 0;while(!currentEl.isNull()){queries=currentEl._queries.get(tokenReference(token));if(isPresent(queries)){result.push.apply(result,_toConsumableArray(queries.filter(function(query){return query.meta.descendants||distance<=1;})));}if(currentEl._directives.length>0){distance++;}currentEl=currentEl.parent;}queries=this.view.componentView.viewQueries.get(tokenReference(token));if(isPresent(queries)){result.push.apply(result,_toConsumableArray(queries));}return result;}/**
     * @param {?} queryMeta
     * @param {?} directiveInstance
     * @return {?}
     */},{key:'_addQuery',value:function _addQuery(queryMeta,directiveInstance){var/** @type {?} */propName='_query_'+tokenName(queryMeta.selectors[0])+'_'+this.nodeIndex+'_'+this._queryCount++;var/** @type {?} */queryList=createQueryList(propName,this.view);var/** @type {?} */query=new CompileQuery(queryMeta,queryList,directiveInstance,this.view);addQueryToTokenMap(this._queries,query);return query;}/**
     * @param {?} requestingProviderType
     * @param {?} dep
     * @return {?}
     */},{key:'_getLocalDependency',value:function _getLocalDependency(requestingProviderType,dep){var/** @type {?} */result=null;if(isPresent(dep.token)){// access builtins with special visibility
if(!result){if(tokenReference(dep.token)===resolveIdentifier(Identifiers.ChangeDetectorRef)){if(requestingProviderType===ProviderAstType.Component){return this.compViewExpr.prop('ref');}else{return getPropertyInView(THIS_EXPR.prop('ref'),this.view,this.view.componentView);}}}// access regular providers on the element
if(!result){var/** @type {?} */resolvedProvider=this._resolvedProviders.get(tokenReference(dep.token));// don't allow directives / public services to access private services.
// only components and private services can access private services.
if(resolvedProvider&&(requestingProviderType===ProviderAstType.Directive||requestingProviderType===ProviderAstType.PublicService)&&resolvedProvider.providerType===ProviderAstType.PrivateService){return null;}result=this.instances.get(tokenReference(dep.token));}}return result;}/**
     * @param {?} requestingProviderType
     * @param {?} dep
     * @return {?}
     */},{key:'_getDependency',value:function _getDependency(requestingProviderType,dep){var/** @type {?} */currElement=this;var/** @type {?} */result=null;if(dep.isValue){result=literal(dep.value);}if(!result&&!dep.isSkipSelf){result=this._getLocalDependency(requestingProviderType,dep);}// check parent elements
while(!result&&!currElement.parent.isNull()){currElement=currElement.parent;result=currElement._getLocalDependency(ProviderAstType.PublicService,{token:dep.token});}if(!result){result=injectFromViewParentInjector(this.view,dep.token,dep.isOptional);}if(!result){result=NULL_EXPR;}return getPropertyInView(result,this.view,currElement.view);}}],[{key:'createNull',value:function createNull(){return new CompileElement(null,null,null,null,null,null,[],[],false,false,[]);}}]);return CompileElement;}(CompileNode);/**
 * @param {?} nodeIndex
 * @param {?} childNodeCount
 * @param {?} provider
 * @param {?} providerExpr
 * @return {?}
 */function createInjectInternalCondition(nodeIndex,childNodeCount,provider,providerExpr){var/** @type {?} */indexCondition=void 0;if(childNodeCount>0){indexCondition=literal(nodeIndex).lowerEquals(InjectMethodVars$1.requestNodeIndex).and(InjectMethodVars$1.requestNodeIndex.lowerEquals(literal(nodeIndex+childNodeCount)));}else{indexCondition=literal(nodeIndex).identical(InjectMethodVars$1.requestNodeIndex);}return new IfStmt(InjectMethodVars$1.token.identical(createDiTokenExpression(provider.token)).and(indexCondition),[new ReturnStatement(providerExpr)]);}/**
 * @param {?} propName
 * @param {?} providerValueExpressions
 * @param {?} isMulti
 * @param {?} isEager
 * @param {?} compileElement
 * @return {?}
 */function createProviderProperty(propName,providerValueExpressions,isMulti,isEager,compileElement){var/** @type {?} */view=compileElement.view;var/** @type {?} */resolvedProviderValueExpr=void 0;var/** @type {?} */type=void 0;if(isMulti){resolvedProviderValueExpr=literalArr(providerValueExpressions);type=new ArrayType(DYNAMIC_TYPE);}else{resolvedProviderValueExpr=providerValueExpressions[0];type=providerValueExpressions[0].type;}if(!type){type=DYNAMIC_TYPE;}if(isEager){view.fields.push(new ClassField(propName,type));view.createMethod.addStmt(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());}else{var/** @type {?} */internalField='_'+propName;view.fields.push(new ClassField(internalField,type));var/** @type {?} */getter=new CompileMethod(view);getter.resetDebugInfo(compileElement.nodeIndex,compileElement.sourceAst);// Note: Equals is important for JS so that it also checks the undefined case!
getter.addStmt(new IfStmt(THIS_EXPR.prop(internalField).isBlank(),[THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]));getter.addStmt(new ReturnStatement(THIS_EXPR.prop(internalField)));view.getters.push(new ClassGetter(propName,getter.finish(),type));}return THIS_EXPR.prop(propName);}var CompilePipe=function(){/**
     * @param {?} view
     * @param {?} meta
     */function CompilePipe(view,meta){var _this208=this;_classCallCheck(this,CompilePipe);this.view=view;this.meta=meta;this._purePipeProxyCount=0;this.instance=THIS_EXPR.prop('_pipe_'+meta.name+'_'+view.pipeCount++);var deps=this.meta.type.diDeps.map(function(diDep){if(tokenReference(diDep.token)===resolveIdentifier(Identifiers.ChangeDetectorRef)){return getPropertyInView(THIS_EXPR.prop('ref'),_this208.view,_this208.view.componentView);}return injectFromViewParentInjector(view,diDep.token,false);});this.view.fields.push(new ClassField(this.instance.name,importType(this.meta.type)));this.view.createMethod.resetDebugInfo(null,null);this.view.createMethod.addStmt(THIS_EXPR.prop(this.instance.name).set(importExpr(this.meta.type).instantiate(deps)).toStmt());}/**
     * @param {?} view
     * @param {?} name
     * @param {?} args
     * @return {?}
     */_createClass(CompilePipe,[{key:'_call',/**
     * @param {?} callingView
     * @param {?} args
     * @return {?}
     */value:function _call(callingView,args){if(this.meta.pure){// PurePipeProxies live on the view that called them.
var/** @type {?} */purePipeProxyInstance=THIS_EXPR.prop(this.instance.name+'_'+this._purePipeProxyCount++);var/** @type {?} */pipeInstanceSeenFromPureProxy=getPropertyInView(this.instance,callingView,this.view);createPureProxy(pipeInstanceSeenFromPureProxy.prop('transform').callMethod(BuiltinMethod.Bind,[pipeInstanceSeenFromPureProxy]),args.length,purePipeProxyInstance,{fields:callingView.fields,ctorStmts:callingView.createMethod});return importExpr(createIdentifier(Identifiers.castByValue)).callFn([purePipeProxyInstance,pipeInstanceSeenFromPureProxy.prop('transform')]).callFn(args);}else{return getPropertyInView(this.instance,callingView,this.view).callMethod('transform',args);}}},{key:'pure',/**
     * @return {?}
     */get:function get(){return this.meta.pure;}}],[{key:'call',value:function call(view,name,args){var/** @type {?} */compView=view.componentView;var/** @type {?} */meta=_findPipeMeta(compView,name);var/** @type {?} */pipe=void 0;if(meta.pure){// pure pipes live on the component view
pipe=compView.purePipes.get(name);if(!pipe){pipe=new CompilePipe(compView,meta);compView.purePipes.set(name,pipe);compView.pipes.push(pipe);}}else{// Non pure pipes live on the view that called it
pipe=new CompilePipe(view,meta);view.pipes.push(pipe);}return pipe._call(view,args);}}]);return CompilePipe;}();/**
 * @param {?} view
 * @param {?} name
 * @return {?}
 */function _findPipeMeta(view,name){var/** @type {?} */pipeMeta=null;for(var/** @type {?} */i=view.pipeMetas.length-1;i>=0;i--){var/** @type {?} */localPipeMeta=view.pipeMetas[i];if(localPipeMeta.name==name){pipeMeta=localPipeMeta;break;}}if(!pipeMeta){throw new Error('Illegal state: Could not find pipe '+name+' although the parser should have detected this error!');}return pipeMeta;}var CompileViewRootNodeType={};CompileViewRootNodeType.Node=0;CompileViewRootNodeType.ViewContainer=1;CompileViewRootNodeType.NgContent=2;CompileViewRootNodeType[CompileViewRootNodeType.Node]="Node";CompileViewRootNodeType[CompileViewRootNodeType.ViewContainer]="ViewContainer";CompileViewRootNodeType[CompileViewRootNodeType.NgContent]="NgContent";var CompileViewRootNode=/**
     * @param {?} type
     * @param {?} expr
     * @param {?=} ngContentIndex
     */function CompileViewRootNode(type,expr,ngContentIndex){_classCallCheck(this,CompileViewRootNode);this.type=type;this.expr=expr;this.ngContentIndex=ngContentIndex;};var CompileView=function(){/**
     * @param {?} component
     * @param {?} genConfig
     * @param {?} pipeMetas
     * @param {?} styles
     * @param {?} animations
     * @param {?} viewIndex
     * @param {?} declarationElement
     * @param {?} templateVariableBindings
     * @param {?} targetDependencies
     */function CompileView(component,genConfig,pipeMetas,styles,animations,viewIndex,declarationElement,templateVariableBindings,targetDependencies){var _this209=this;_classCallCheck(this,CompileView);this.component=component;this.genConfig=genConfig;this.pipeMetas=pipeMetas;this.styles=styles;this.animations=animations;this.viewIndex=viewIndex;this.declarationElement=declarationElement;this.templateVariableBindings=templateVariableBindings;this.targetDependencies=targetDependencies;this.viewChildren=[];this.nodes=[];this.rootNodes=[];this.lastRenderNode=NULL_EXPR;this.viewContainers=[];this.methods=[];this.ctorStmts=[];this.fields=[];this.getters=[];this.disposables=[];this.purePipes=new Map();this.pipes=[];this.locals=new Map();this.literalArrayCount=0;this.literalMapCount=0;this.pipeCount=0;this.createMethod=new CompileMethod(this);this.animationBindingsMethod=new CompileMethod(this);this.injectorGetMethod=new CompileMethod(this);this.updateContentQueriesMethod=new CompileMethod(this);this.dirtyParentQueriesMethod=new CompileMethod(this);this.updateViewQueriesMethod=new CompileMethod(this);this.detectChangesInInputsMethod=new CompileMethod(this);this.detectChangesRenderPropertiesMethod=new CompileMethod(this);this.afterContentLifecycleCallbacksMethod=new CompileMethod(this);this.afterViewLifecycleCallbacksMethod=new CompileMethod(this);this.destroyMethod=new CompileMethod(this);this.detachMethod=new CompileMethod(this);this.viewType=getViewType(component,viewIndex);this.className=viewClassName(component.type.reference,viewIndex);this.rendererTypeName=rendererTypeName(component.type.reference);this.classType=expressionType(variable(this.className));this.classExpr=variable(this.className);if(this.viewType===__WEBPACK_IMPORTED_MODULE_0__angular_core__["_30" /* ɵViewType */].COMPONENT||this.viewType===__WEBPACK_IMPORTED_MODULE_0__angular_core__["_30" /* ɵViewType */].HOST){this.componentView=this;}else{this.componentView=this.declarationElement.view.componentView;}this.componentContext=getPropertyInView(THIS_EXPR.prop('context'),this,this.componentView);var viewQueries=new Map();if(this.viewType===__WEBPACK_IMPORTED_MODULE_0__angular_core__["_30" /* ɵViewType */].COMPONENT){var _directiveInstance=THIS_EXPR.prop('context');this.component.viewQueries.forEach(function(queryMeta,queryIndex){var propName='_viewQuery_'+tokenName(queryMeta.selectors[0])+'_'+queryIndex;var queryList=createQueryList(propName,_this209);var query=new CompileQuery(queryMeta,queryList,_directiveInstance,_this209);addQueryToTokenMap(viewQueries,query);});}this.viewQueries=viewQueries;templateVariableBindings.forEach(function(entry){_this209.locals.set(entry[1],THIS_EXPR.prop('context').prop(entry[0]));});if(!this.declarationElement.isNull()){this.declarationElement.setEmbeddedView(this);}}/**
     * @param {?} name
     * @param {?} input
     * @param {?} args
     * @return {?}
     */_createClass(CompileView,[{key:'callPipe',value:function callPipe(name,input,args){return CompilePipe.call(this,name,[input].concat(args));}/**
     * @param {?} name
     * @return {?}
     */},{key:'getLocal',value:function getLocal(name){if(name==EventHandlerVars.event.name){return EventHandlerVars.event;}var/** @type {?} */currView=this;var/** @type {?} */result=currView.locals.get(name);while(!result&&isPresent(currView.declarationElement.view)){currView=currView.declarationElement.view;result=currView.locals.get(name);}if(isPresent(result)){return getPropertyInView(result,this,currView);}else{return null;}}/**
     * @return {?}
     */},{key:'finish',value:function finish(){var _this210=this;Array.from(this.viewQueries.values()).forEach(function(queries){return queries.forEach(function(q){return q.generateStatements(_this210.createMethod,_this210.updateViewQueriesMethod);});});}}]);return CompileView;}();/**
 * @param {?} component
 * @param {?} embeddedTemplateIndex
 * @return {?}
 */function getViewType(component,embeddedTemplateIndex){if(embeddedTemplateIndex>0){return __WEBPACK_IMPORTED_MODULE_0__angular_core__["_30" /* ɵViewType */].EMBEDDED;}if(component.isHost){return __WEBPACK_IMPORTED_MODULE_0__angular_core__["_30" /* ɵViewType */].HOST;}return __WEBPACK_IMPORTED_MODULE_0__angular_core__["_30" /* ɵViewType */].COMPONENT;}/**
 * @param {?} boundEvents
 * @param {?} directives
 * @param {?} compileElement
 * @param {?} bindToRenderer
 * @return {?}
 */function bindOutputs(boundEvents,directives,compileElement,bindToRenderer){var/** @type {?} */usedEvents=collectEvents(boundEvents,directives);if(!usedEvents.size){return false;}if(bindToRenderer){subscribeToRenderEvents(usedEvents,compileElement);}subscribeToDirectiveEvents(usedEvents,directives,compileElement);generateHandleEventMethod(boundEvents,directives,compileElement);return true;}/**
 * @param {?} boundEvents
 * @param {?} directives
 * @return {?}
 */function collectEvents(boundEvents,directives){var/** @type {?} */usedEvents=new Map();boundEvents.forEach(function(event){usedEvents.set(event.fullName,event);});directives.forEach(function(dirAst){dirAst.hostEvents.forEach(function(event){usedEvents.set(event.fullName,event);});});return usedEvents;}/**
 * @param {?} usedEvents
 * @param {?} compileElement
 * @return {?}
 */function subscribeToRenderEvents(usedEvents,compileElement){var/** @type {?} */eventAndTargetExprs=[];usedEvents.forEach(function(event){if(!event.phase){eventAndTargetExprs.push(literal(event.name),literal(event.target));}});if(eventAndTargetExprs.length){var/** @type {?} */disposableVar=variable('disposable_'+compileElement.view.disposables.length);compileElement.view.disposables.push(disposableVar);compileElement.view.createMethod.addStmt(disposableVar.set(importExpr(createIdentifier(Identifiers.subscribeToRenderElement)).callFn([THIS_EXPR,compileElement.renderNode,createInlineArray(eventAndTargetExprs),handleEventExpr(compileElement)])).toDeclStmt(FUNCTION_TYPE,[StmtModifier.Private]));}}/**
 * @param {?} usedEvents
 * @param {?} directives
 * @param {?} compileElement
 * @return {?}
 */function subscribeToDirectiveEvents(usedEvents,directives,compileElement){var/** @type {?} */usedEventNames=Array.from(usedEvents.keys());directives.forEach(function(dirAst){var/** @type {?} */dirWrapper=compileElement.directiveWrapperInstance.get(dirAst.directive.type.reference);compileElement.view.createMethod.addStmts(DirectiveWrapperExpressions.subscribe(dirAst.directive,dirAst.hostProperties,usedEventNames,dirWrapper,THIS_EXPR,handleEventExpr(compileElement)));});}/**
 * @param {?} boundEvents
 * @param {?} directives
 * @param {?} compileElement
 * @return {?}
 */function generateHandleEventMethod(boundEvents,directives,compileElement){var/** @type {?} */hasComponentHostListener=directives.some(function(dirAst){return dirAst.hostEvents.some(function(event){return dirAst.directive.isComponent;});});var/** @type {?} */markPathToRootStart=hasComponentHostListener?compileElement.compViewExpr:THIS_EXPR;var/** @type {?} */handleEventStmts=new CompileMethod(compileElement.view);handleEventStmts.resetDebugInfo(compileElement.nodeIndex,compileElement.sourceAst);handleEventStmts.push(markPathToRootStart.callMethod('markPathToRootAsCheckOnce',[]).toStmt());var/** @type {?} */eventNameVar=variable('eventName');var/** @type {?} */resultVar=variable('result');handleEventStmts.push(resultVar.set(literal(true)).toDeclStmt(BOOL_TYPE));directives.forEach(function(dirAst,dirIdx){var/** @type {?} */dirWrapper=compileElement.directiveWrapperInstance.get(dirAst.directive.type.reference);if(dirAst.hostEvents.length>0){handleEventStmts.push(resultVar.set(DirectiveWrapperExpressions.handleEvent(dirAst.hostEvents,dirWrapper,eventNameVar,EventHandlerVars.event).and(resultVar)).toStmt());}});boundEvents.forEach(function(renderEvent,renderEventIdx){var/** @type {?} */evalResult=convertActionBinding(compileElement.view,compileElement.view.componentContext,renderEvent.handler,'sub_'+renderEventIdx);var/** @type {?} */trueStmts=evalResult.stmts;if(evalResult.allowDefault){trueStmts.push(resultVar.set(evalResult.allowDefault.and(resultVar)).toStmt());}// TODO(tbosch): convert this into a `switch` once our OutputAst supports it.
handleEventStmts.push(new IfStmt(eventNameVar.equals(literal(renderEvent.fullName)),trueStmts));});handleEventStmts.push(new ReturnStatement(resultVar));compileElement.view.methods.push(new ClassMethod(getHandleEventMethodName(compileElement.nodeIndex),[new FnParam(eventNameVar.name,STRING_TYPE),new FnParam(EventHandlerVars.event.name,DYNAMIC_TYPE)],handleEventStmts.finish(),BOOL_TYPE));}/**
 * @param {?} compileElement
 * @return {?}
 */function handleEventExpr(compileElement){var/** @type {?} */handleEventMethodName=getHandleEventMethodName(compileElement.nodeIndex);return THIS_EXPR.callMethod('eventHandler',[THIS_EXPR.prop(handleEventMethodName)]);}/**
 * @param {?} directiveMeta
 * @param {?} directiveInstance
 * @param {?} compileElement
 * @return {?}
 */function bindDirectiveAfterContentLifecycleCallbacks(directiveMeta,directiveInstance,compileElement){var/** @type {?} */view=compileElement.view;var/** @type {?} */lifecycleHooks=directiveMeta.type.lifecycleHooks;var/** @type {?} */afterContentLifecycleCallbacksMethod=view.afterContentLifecycleCallbacksMethod;afterContentLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex,compileElement.sourceAst);if(lifecycleHooks.indexOf(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_106" /* ɵLifecycleHooks */].AfterContentInit)!==-1){afterContentLifecycleCallbacksMethod.addStmt(new IfStmt(isFirstViewCheck(THIS_EXPR),[directiveInstance.callMethod('ngAfterContentInit',[]).toStmt()]));}if(lifecycleHooks.indexOf(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_106" /* ɵLifecycleHooks */].AfterContentChecked)!==-1){afterContentLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod('ngAfterContentChecked',[]).toStmt());}}/**
 * @param {?} directiveMeta
 * @param {?} directiveInstance
 * @param {?} compileElement
 * @return {?}
 */function bindDirectiveAfterViewLifecycleCallbacks(directiveMeta,directiveInstance,compileElement){var/** @type {?} */view=compileElement.view;var/** @type {?} */lifecycleHooks=directiveMeta.type.lifecycleHooks;var/** @type {?} */afterViewLifecycleCallbacksMethod=view.afterViewLifecycleCallbacksMethod;afterViewLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex,compileElement.sourceAst);if(lifecycleHooks.indexOf(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_106" /* ɵLifecycleHooks */].AfterViewInit)!==-1){afterViewLifecycleCallbacksMethod.addStmt(new IfStmt(isFirstViewCheck(THIS_EXPR),[directiveInstance.callMethod('ngAfterViewInit',[]).toStmt()]));}if(lifecycleHooks.indexOf(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_106" /* ɵLifecycleHooks */].AfterViewChecked)!==-1){afterViewLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod('ngAfterViewChecked',[]).toStmt());}}/**
 * @param {?} dir
 * @param {?} directiveWrapperIntance
 * @param {?} compileElement
 * @return {?}
 */function bindDirectiveWrapperLifecycleCallbacks(dir,directiveWrapperIntance,compileElement){compileElement.view.destroyMethod.addStmts(DirectiveWrapperExpressions.ngOnDestroy(dir.directive,directiveWrapperIntance));compileElement.view.detachMethod.addStmts(DirectiveWrapperExpressions.ngOnDetach(dir.hostProperties,directiveWrapperIntance,THIS_EXPR,compileElement.compViewExpr||THIS_EXPR,compileElement.renderNode));}/**
 * @param {?} provider
 * @param {?} providerInstance
 * @param {?} compileElement
 * @return {?}
 */function bindInjectableDestroyLifecycleCallbacks(provider,providerInstance,compileElement){var/** @type {?} */onDestroyMethod=compileElement.view.destroyMethod;onDestroyMethod.resetDebugInfo(compileElement.nodeIndex,compileElement.sourceAst);if(provider.providerType!==ProviderAstType.Directive&&provider.providerType!==ProviderAstType.Component&&provider.lifecycleHooks.indexOf(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_106" /* ɵLifecycleHooks */].OnDestroy)!==-1){onDestroyMethod.addStmt(providerInstance.callMethod('ngOnDestroy',[]).toStmt());}}/**
 * @param {?} pipeMeta
 * @param {?} pipeInstance
 * @param {?} view
 * @return {?}
 */function bindPipeDestroyLifecycleCallbacks(pipeMeta,pipeInstance,view){var/** @type {?} */onDestroyMethod=view.destroyMethod;if(pipeMeta.type.lifecycleHooks.indexOf(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_106" /* ɵLifecycleHooks */].OnDestroy)!==-1){onDestroyMethod.addStmt(pipeInstance.callMethod('ngOnDestroy',[]).toStmt());}}/**
 * @param {?} boundText
 * @param {?} compileNode
 * @param {?} view
 * @return {?}
 */function bindRenderText(boundText,compileNode,view){var/** @type {?} */valueField=createCheckBindingField(view);var/** @type {?} */evalResult=legacyConvertPropertyBinding(view,view,view.componentContext,boundText.value,valueField.bindingId);if(!evalResult){return null;}view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileNode.nodeIndex,boundText);view.detectChangesRenderPropertiesMethod.addStmts(evalResult.stmts);view.detectChangesRenderPropertiesMethod.addStmt(importExpr(createIdentifier(Identifiers.checkRenderText)).callFn([THIS_EXPR,compileNode.renderNode,valueField.expression,valueField.expression.set(evalResult.currValExpr),evalResult.forceUpdate||literal(false)]).toStmt());}/**
 * @param {?} boundProps
 * @param {?} boundOutputs
 * @param {?} hasEvents
 * @param {?} compileElement
 * @return {?}
 */function bindRenderInputs(boundProps,boundOutputs,hasEvents,compileElement){var/** @type {?} */view=compileElement.view;var/** @type {?} */renderNode=compileElement.renderNode;boundProps.forEach(function(boundProp){var/** @type {?} */bindingField=createCheckBindingField(view);view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileElement.nodeIndex,boundProp);var/** @type {?} */evalResult=legacyConvertPropertyBinding(view,view,compileElement.view.componentContext,boundProp.value,bindingField.bindingId);if(!evalResult){return;}var/** @type {?} */compileMethod=view.detectChangesRenderPropertiesMethod;switch(boundProp.type){case PropertyBindingType.Property:case PropertyBindingType.Attribute:case PropertyBindingType.Class:case PropertyBindingType.Style:compileMethod.addStmts(createCheckRenderBindingStmt(THIS_EXPR,renderNode,boundProp,bindingField.expression,evalResult));break;case PropertyBindingType.Animation:compileMethod=view.animationBindingsMethod;var _createCheckAnimation2=createCheckAnimationBindingStmts(THIS_EXPR,THIS_EXPR,boundProp,boundOutputs,(hasEvents?THIS_EXPR.prop(getHandleEventMethodName(compileElement.nodeIndex)):importExpr(createIdentifier(Identifiers.noop))).callMethod(BuiltinMethod.Bind,[THIS_EXPR]),compileElement.renderNode,bindingField.expression,evalResult),checkUpdateStmts=_createCheckAnimation2.checkUpdateStmts,checkDetachStmts=_createCheckAnimation2.checkDetachStmts;view.detachMethod.addStmts(checkDetachStmts);compileMethod.addStmts(checkUpdateStmts);break;}});}/**
 * @param {?} directiveAst
 * @param {?} directiveWrapperInstance
 * @param {?} compileElement
 * @param {?} elementName
 * @param {?} schemaRegistry
 * @return {?}
 */function bindDirectiveHostProps(directiveAst,directiveWrapperInstance,compileElement,elementName,schemaRegistry){// We need to provide the SecurityContext for properties that could need sanitization.
var/** @type {?} */runtimeSecurityCtxExprs=directiveAst.hostProperties.filter(function(boundProp){return boundProp.needsRuntimeSecurityContext;}).map(function(boundProp){var/** @type {?} */ctx=void 0;switch(boundProp.type){case PropertyBindingType.Property:ctx=schemaRegistry.securityContext(elementName,boundProp.name,false);break;case PropertyBindingType.Attribute:ctx=schemaRegistry.securityContext(elementName,boundProp.name,true);break;default:throw new Error('Illegal state: Only property / attribute bindings can have an unknown security context! Binding '+boundProp.name);}return createEnumExpression(Identifiers.SecurityContext,ctx);});compileElement.view.detectChangesRenderPropertiesMethod.addStmts(DirectiveWrapperExpressions.checkHost(directiveAst.hostProperties,directiveWrapperInstance,THIS_EXPR,compileElement.compViewExpr||THIS_EXPR,compileElement.renderNode,runtimeSecurityCtxExprs));}/**
 * @param {?} directiveAst
 * @param {?} directiveWrapperInstance
 * @param {?} dirIndex
 * @param {?} compileElement
 * @return {?}
 */function bindDirectiveInputs(directiveAst,directiveWrapperInstance,dirIndex,compileElement){var/** @type {?} */view=compileElement.view;var/** @type {?} */detectChangesInInputsMethod=view.detectChangesInInputsMethod;detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex,compileElement.sourceAst);directiveAst.inputs.forEach(function(input,inputIdx){// Note: We can't use `fields.length` here, as we are not adding a field!
var/** @type {?} */bindingId=compileElement.nodeIndex+'_'+dirIndex+'_'+inputIdx;detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex,input);var/** @type {?} */evalResult=legacyConvertPropertyBinding(view,view,view.componentContext,input.value,bindingId);if(!evalResult){return;}detectChangesInInputsMethod.addStmts(evalResult.stmts);detectChangesInInputsMethod.addStmt(directiveWrapperInstance.callMethod('check_'+input.directiveName,[THIS_EXPR,evalResult.currValExpr,evalResult.forceUpdate||literal(false)]).toStmt());});var/** @type {?} */isOnPushComp=directiveAst.directive.isComponent&&!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_112" /* ɵisDefaultChangeDetectionStrategy */])(directiveAst.directive.changeDetection);var/** @type {?} */directiveDetectChangesExpr=DirectiveWrapperExpressions.ngDoCheck(directiveWrapperInstance,THIS_EXPR,compileElement.renderNode);var/** @type {?} */directiveDetectChangesStmt=isOnPushComp?new IfStmt(directiveDetectChangesExpr,[compileElement.compViewExpr.callMethod('markAsCheckOnce',[]).toStmt()]):directiveDetectChangesExpr.toStmt();detectChangesInInputsMethod.addStmt(directiveDetectChangesStmt);}/**
 * @param {?} ce
 * @return {?}
 */function bindQueryValues(ce){var/** @type {?} */queriesWithReads=[];ce.getProviderTokens().forEach(function(token){var/** @type {?} */queriesForProvider=ce.getQueriesFor(token);queriesWithReads.push.apply(queriesWithReads,_toConsumableArray(queriesForProvider.map(function(query){return new _QueryWithRead(query,token);})));});Object.keys(ce.referenceTokens).forEach(function(varName){var/** @type {?} */varToken={value:varName};queriesWithReads.push.apply(queriesWithReads,_toConsumableArray(ce.getQueriesFor(varToken).map(function(query){return new _QueryWithRead(query,varToken);})));});queriesWithReads.forEach(function(queryWithRead){var/** @type {?} */value=void 0;if(queryWithRead.read.identifier){// query for an identifier
value=ce.instances.get(tokenReference(queryWithRead.read));}else{// query for a reference
var/** @type {?} */token=ce.referenceTokens[queryWithRead.read.value];if(token){value=ce.instances.get(tokenReference(token));}else{value=ce.elementRef;}}if(value){queryWithRead.query.addValue(value,ce.view);}});}var _QueryWithRead=/**
     * @param {?} query
     * @param {?} match
     */function _QueryWithRead(query,match){_classCallCheck(this,_QueryWithRead);this.query=query;this.read=query.meta.read||match;};/**
 * @param {?} view
 * @param {?} parsedTemplate
 * @param {?} schemaRegistry
 * @return {?}
 */function bindView(view,parsedTemplate,schemaRegistry){var/** @type {?} */visitor=new ViewBinderVisitor(view,schemaRegistry);templateVisitAll(visitor,parsedTemplate);view.pipes.forEach(function(pipe){bindPipeDestroyLifecycleCallbacks(pipe.meta,pipe.instance,pipe.view);});}var ViewBinderVisitor=function(){/**
     * @param {?} view
     * @param {?} _schemaRegistry
     */function ViewBinderVisitor(view,_schemaRegistry){_classCallCheck(this,ViewBinderVisitor);this.view=view;this._schemaRegistry=_schemaRegistry;this._nodeIndex=0;}/**
     * @param {?} ast
     * @param {?} parent
     * @return {?}
     */_createClass(ViewBinderVisitor,[{key:'visitBoundText',value:function visitBoundText(ast,parent){var/** @type {?} */node=this.view.nodes[this._nodeIndex++];bindRenderText(ast,node,this.view);return null;}/**
     * @param {?} ast
     * @param {?} parent
     * @return {?}
     */},{key:'visitText',value:function visitText(ast,parent){this._nodeIndex++;return null;}/**
     * @param {?} ast
     * @param {?} parent
     * @return {?}
     */},{key:'visitNgContent',value:function visitNgContent(ast,parent){return null;}/**
     * @param {?} ast
     * @param {?} parent
     * @return {?}
     */},{key:'visitElement',value:function visitElement(ast,parent){var _this211=this;var/** @type {?} */compileElement=this.view.nodes[this._nodeIndex++];bindQueryValues(compileElement);var/** @type {?} */hasEvents=bindOutputs(ast.outputs,ast.directives,compileElement,true);bindRenderInputs(ast.inputs,ast.outputs,hasEvents,compileElement);ast.directives.forEach(function(directiveAst,dirIndex){var/** @type {?} */directiveWrapperInstance=compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference);bindDirectiveInputs(directiveAst,directiveWrapperInstance,dirIndex,compileElement);bindDirectiveHostProps(directiveAst,directiveWrapperInstance,compileElement,ast.name,_this211._schemaRegistry);});templateVisitAll(this,ast.children,compileElement);// afterContent and afterView lifecycles need to be called bottom up
// so that children are notified before parents
ast.directives.forEach(function(directiveAst){var/** @type {?} */directiveInstance=compileElement.instances.get(directiveAst.directive.type.reference);var/** @type {?} */directiveWrapperInstance=compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference);bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive,directiveInstance,compileElement);bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive,directiveInstance,compileElement);bindDirectiveWrapperLifecycleCallbacks(directiveAst,directiveWrapperInstance,compileElement);});ast.providers.forEach(function(providerAst){var/** @type {?} */providerInstance=compileElement.instances.get(tokenReference(providerAst.token));bindInjectableDestroyLifecycleCallbacks(providerAst,providerInstance,compileElement);});return null;}/**
     * @param {?} ast
     * @param {?} parent
     * @return {?}
     */},{key:'visitEmbeddedTemplate',value:function visitEmbeddedTemplate(ast,parent){var/** @type {?} */compileElement=this.view.nodes[this._nodeIndex++];bindQueryValues(compileElement);bindOutputs(ast.outputs,ast.directives,compileElement,false);ast.directives.forEach(function(directiveAst,dirIndex){var/** @type {?} */directiveInstance=compileElement.instances.get(directiveAst.directive.type.reference);var/** @type {?} */directiveWrapperInstance=compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference);bindDirectiveInputs(directiveAst,directiveWrapperInstance,dirIndex,compileElement);bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive,directiveInstance,compileElement);bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive,directiveInstance,compileElement);bindDirectiveWrapperLifecycleCallbacks(directiveAst,directiveWrapperInstance,compileElement);});ast.providers.forEach(function(providerAst){var/** @type {?} */providerInstance=compileElement.instances.get(tokenReference(providerAst.token));bindInjectableDestroyLifecycleCallbacks(providerAst,providerInstance,compileElement);});bindView(compileElement.embeddedView,ast.children,this._schemaRegistry);return null;}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitAttr',value:function visitAttr(ast,ctx){return null;}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitDirective',value:function visitDirective(ast,ctx){return null;}/**
     * @param {?} ast
     * @param {?} eventTargetAndNames
     * @return {?}
     */},{key:'visitEvent',value:function visitEvent(ast,eventTargetAndNames){return null;}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitReference',value:function visitReference(ast,ctx){return null;}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitVariable',value:function visitVariable(ast,ctx){return null;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitDirectiveProperty',value:function visitDirectiveProperty(ast,context){return null;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitElementProperty',value:function visitElementProperty(ast,context){return null;}}]);return ViewBinderVisitor;}();var/** @type {?} */IMPLICIT_TEMPLATE_VAR='\$implicit';var/** @type {?} */CLASS_ATTR$1='class';var/** @type {?} */STYLE_ATTR='style';var/** @type {?} */NG_CONTAINER_TAG='ng-container';var/** @type {?} */parentRenderNodeVar=variable('parentRenderNode');var/** @type {?} */rootSelectorVar=variable('rootSelector');/**
 * @param {?} view
 * @param {?} template
 * @param {?} targetDependencies
 * @return {?}
 */function buildView(view,template,targetDependencies){var/** @type {?} */builderVisitor=new ViewBuilderVisitor(view,targetDependencies);var/** @type {?} */parentEl=view.declarationElement.isNull()?view.declarationElement:view.declarationElement.parent;templateVisitAll(builderVisitor,template,parentEl);if(view.viewType===__WEBPACK_IMPORTED_MODULE_0__angular_core__["_30" /* ɵViewType */].EMBEDDED||view.viewType===__WEBPACK_IMPORTED_MODULE_0__angular_core__["_30" /* ɵViewType */].HOST){view.lastRenderNode=builderVisitor.getOrCreateLastRenderNode();}return builderVisitor.nestedViewCount;}/**
 * @param {?} view
 * @param {?} targetStatements
 * @return {?}
 */function finishView(view,targetStatements){view.nodes.forEach(function(node){if(node instanceof CompileElement){node.finish();if(node.hasEmbeddedView){finishView(node.embeddedView,targetStatements);}}});view.finish();createViewTopLevelStmts(view,targetStatements);}var ViewBuilderVisitor=function(){/**
     * @param {?} view
     * @param {?} targetDependencies
     */function ViewBuilderVisitor(view,targetDependencies){_classCallCheck(this,ViewBuilderVisitor);this.view=view;this.targetDependencies=targetDependencies;this.nestedViewCount=0;}/**
     * @param {?} parent
     * @return {?}
     */_createClass(ViewBuilderVisitor,[{key:'_isRootNode',value:function _isRootNode(parent){return parent.view!==this.view;}/**
     * @param {?} node
     * @return {?}
     */},{key:'_addRootNodeAndProject',value:function _addRootNodeAndProject(node){var/** @type {?} */projectedNode=_getOuterContainerOrSelf(node);var/** @type {?} */parent=projectedNode.parent;var/** @type {?} */ngContentIndex=projectedNode.sourceAst.ngContentIndex;var/** @type {?} */viewContainer=node instanceof CompileElement&&node.hasViewContainer?node.viewContainer:null;if(this._isRootNode(parent)){if(this.view.viewType!==__WEBPACK_IMPORTED_MODULE_0__angular_core__["_30" /* ɵViewType */].COMPONENT){this.view.rootNodes.push(new CompileViewRootNode(viewContainer?CompileViewRootNodeType.ViewContainer:CompileViewRootNodeType.Node,viewContainer||node.renderNode));}}else if(isPresent(parent.component)&&isPresent(ngContentIndex)){parent.addContentNode(ngContentIndex,new CompileViewRootNode(viewContainer?CompileViewRootNodeType.ViewContainer:CompileViewRootNodeType.Node,viewContainer||node.renderNode));}}/**
     * @param {?} parent
     * @return {?}
     */},{key:'_getParentRenderNode',value:function _getParentRenderNode(parent){parent=_getOuterContainerParentOrSelf(parent);if(this._isRootNode(parent)){if(this.view.viewType===__WEBPACK_IMPORTED_MODULE_0__angular_core__["_30" /* ɵViewType */].COMPONENT){return parentRenderNodeVar;}else{// root node of an embedded/host view
return NULL_EXPR;}}else{return isPresent(parent.component)&&parent.component.template.encapsulation!==__WEBPACK_IMPORTED_MODULE_0__angular_core__["Q" /* ViewEncapsulation */].Native?NULL_EXPR:parent.renderNode;}}/**
     * @return {?}
     */},{key:'getOrCreateLastRenderNode',value:function getOrCreateLastRenderNode(){var/** @type {?} */view=this.view;if(view.rootNodes.length===0||view.rootNodes[view.rootNodes.length-1].type!==CompileViewRootNodeType.Node){var/** @type {?} */fieldName='_el_'+view.nodes.length;view.fields.push(new ClassField(fieldName,importType(view.genConfig.renderTypes.renderElement)));view.createMethod.addStmt(THIS_EXPR.prop(fieldName).set(ViewProperties.renderer.callMethod('createTemplateAnchor',[NULL_EXPR,NULL_EXPR])).toStmt());view.rootNodes.push(new CompileViewRootNode(CompileViewRootNodeType.Node,THIS_EXPR.prop(fieldName)));}return view.rootNodes[view.rootNodes.length-1].expr;}/**
     * @param {?} ast
     * @param {?} parent
     * @return {?}
     */},{key:'visitBoundText',value:function visitBoundText(ast,parent){return this._visitText(ast,'',parent);}/**
     * @param {?} ast
     * @param {?} parent
     * @return {?}
     */},{key:'visitText',value:function visitText(ast,parent){return this._visitText(ast,ast.value,parent);}/**
     * @param {?} ast
     * @param {?} value
     * @param {?} parent
     * @return {?}
     */},{key:'_visitText',value:function _visitText(ast,value,parent){var/** @type {?} */fieldName='_text_'+this.view.nodes.length;this.view.fields.push(new ClassField(fieldName,importType(this.view.genConfig.renderTypes.renderText)));var/** @type {?} */renderNode=THIS_EXPR.prop(fieldName);var/** @type {?} */compileNode=new CompileNode(parent,this.view,this.view.nodes.length,renderNode,ast);var/** @type {?} */createRenderNode=THIS_EXPR.prop(fieldName).set(ViewProperties.renderer.callMethod('createText',[this._getParentRenderNode(parent),literal(value),this.view.createMethod.resetDebugInfoExpr(this.view.nodes.length,ast)])).toStmt();this.view.nodes.push(compileNode);this.view.createMethod.addStmt(createRenderNode);this._addRootNodeAndProject(compileNode);return renderNode;}/**
     * @param {?} ast
     * @param {?} parent
     * @return {?}
     */},{key:'visitNgContent',value:function visitNgContent(ast,parent){// the projected nodes originate from a different view, so we don't
// have debug information for them...
this.view.createMethod.resetDebugInfo(null,ast);var/** @type {?} */parentRenderNode=this._getParentRenderNode(parent);if(parentRenderNode!==NULL_EXPR){this.view.createMethod.addStmt(THIS_EXPR.callMethod('projectNodes',[parentRenderNode,literal(ast.index)]).toStmt());}else if(this._isRootNode(parent)){if(this.view.viewType!==__WEBPACK_IMPORTED_MODULE_0__angular_core__["_30" /* ɵViewType */].COMPONENT){// store root nodes only for embedded/host views
this.view.rootNodes.push(new CompileViewRootNode(CompileViewRootNodeType.NgContent,null,ast.index));}}else{if(isPresent(parent.component)&&isPresent(ast.ngContentIndex)){parent.addContentNode(ast.ngContentIndex,new CompileViewRootNode(CompileViewRootNodeType.NgContent,null,ast.index));}}return null;}/**
     * @param {?} ast
     * @param {?} parent
     * @return {?}
     */},{key:'visitElement',value:function visitElement(ast,parent){var/** @type {?} */nodeIndex=this.view.nodes.length;var/** @type {?} */createRenderNodeExpr=void 0;var/** @type {?} */debugContextExpr=this.view.createMethod.resetDebugInfoExpr(nodeIndex,ast);var/** @type {?} */directives=ast.directives.map(function(directiveAst){return directiveAst.directive;});var/** @type {?} */component=directives.find(function(directive){return directive.isComponent;});if(ast.name===NG_CONTAINER_TAG){createRenderNodeExpr=ViewProperties.renderer.callMethod('createTemplateAnchor',[this._getParentRenderNode(parent),debugContextExpr]);}else{var/** @type {?} */htmlAttrs=_readHtmlAttrs(ast.attrs);var/** @type {?} */attrNameAndValues=createInlineArray(_mergeHtmlAndDirectiveAttrs(htmlAttrs,directives).map(function(v){return literal(v);}));if(nodeIndex===0&&this.view.viewType===__WEBPACK_IMPORTED_MODULE_0__angular_core__["_30" /* ɵViewType */].HOST){createRenderNodeExpr=importExpr(createIdentifier(Identifiers.selectOrCreateRenderHostElement)).callFn([ViewProperties.renderer,literal(ast.name),attrNameAndValues,rootSelectorVar,debugContextExpr]);}else{createRenderNodeExpr=importExpr(createIdentifier(Identifiers.createRenderElement)).callFn([ViewProperties.renderer,this._getParentRenderNode(parent),literal(ast.name),attrNameAndValues,debugContextExpr]);}}var/** @type {?} */fieldName='_el_'+nodeIndex;this.view.fields.push(new ClassField(fieldName,importType(this.view.genConfig.renderTypes.renderElement)));this.view.createMethod.addStmt(THIS_EXPR.prop(fieldName).set(createRenderNodeExpr).toStmt());var/** @type {?} */renderNode=THIS_EXPR.prop(fieldName);var/** @type {?} */compileElement=new CompileElement(parent,this.view,nodeIndex,renderNode,ast,component,directives,ast.providers,ast.hasViewContainer,false,ast.references);this.view.nodes.push(compileElement);var/** @type {?} */compViewExpr=null;if(isPresent(component)){this.targetDependencies.push(new ComponentViewDependency(component.type.reference));compViewExpr=THIS_EXPR.prop('compView_'+nodeIndex);// fix highlighting: `
this.view.fields.push(new ClassField(compViewExpr.name,importType(createIdentifier(Identifiers.AppView),[importType(component.type)])));this.view.viewChildren.push(compViewExpr);compileElement.setComponentView(compViewExpr);this.view.createMethod.addStmt(compViewExpr.set(importExpr({reference:component.componentViewType}).instantiate([ViewProperties.viewUtils,THIS_EXPR,literal(nodeIndex),renderNode])).toStmt());}compileElement.beforeChildren();this._addRootNodeAndProject(compileElement);templateVisitAll(this,ast.children,compileElement);compileElement.afterChildren(this.view.nodes.length-nodeIndex-1);if(isPresent(compViewExpr)){this.view.createMethod.addStmt(compViewExpr.callMethod('create',[compileElement.getComponent()]).toStmt());}return null;}/**
     * @param {?} ast
     * @param {?} parent
     * @return {?}
     */},{key:'visitEmbeddedTemplate',value:function visitEmbeddedTemplate(ast,parent){var/** @type {?} */nodeIndex=this.view.nodes.length;var/** @type {?} */fieldName='_anchor_'+nodeIndex;this.view.fields.push(new ClassField(fieldName,importType(this.view.genConfig.renderTypes.renderComment)));this.view.createMethod.addStmt(THIS_EXPR.prop(fieldName).set(ViewProperties.renderer.callMethod('createTemplateAnchor',[this._getParentRenderNode(parent),this.view.createMethod.resetDebugInfoExpr(nodeIndex,ast)])).toStmt());var/** @type {?} */renderNode=THIS_EXPR.prop(fieldName);var/** @type {?} */templateVariableBindings=ast.variables.map(function(varAst){return[varAst.value.length>0?varAst.value:IMPLICIT_TEMPLATE_VAR,varAst.name];});var/** @type {?} */directives=ast.directives.map(function(directiveAst){return directiveAst.directive;});var/** @type {?} */compileElement=new CompileElement(parent,this.view,nodeIndex,renderNode,ast,null,directives,ast.providers,ast.hasViewContainer,true,ast.references);this.view.nodes.push(compileElement);this.nestedViewCount++;var/** @type {?} */embeddedView=new CompileView(this.view.component,this.view.genConfig,this.view.pipeMetas,NULL_EXPR,this.view.animations,this.view.viewIndex+this.nestedViewCount,compileElement,templateVariableBindings,this.targetDependencies);this.nestedViewCount+=buildView(embeddedView,ast.children,this.targetDependencies);compileElement.beforeChildren();this._addRootNodeAndProject(compileElement);compileElement.afterChildren(0);return null;}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitAttr',value:function visitAttr(ast,ctx){return null;}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitDirective',value:function visitDirective(ast,ctx){return null;}/**
     * @param {?} ast
     * @param {?} eventTargetAndNames
     * @return {?}
     */},{key:'visitEvent',value:function visitEvent(ast,eventTargetAndNames){return null;}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitReference',value:function visitReference(ast,ctx){return null;}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitVariable',value:function visitVariable(ast,ctx){return null;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitDirectiveProperty',value:function visitDirectiveProperty(ast,context){return null;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitElementProperty',value:function visitElementProperty(ast,context){return null;}}]);return ViewBuilderVisitor;}();/**
 * Walks up the nodes while the direct parent is a container.
 *
 * Returns the outer container or the node itself when it is not a direct child of a container.
 *
 * \@internal
 * @param {?} node
 * @return {?}
 */function _getOuterContainerOrSelf(node){var/** @type {?} */view=node.view;while(_isNgContainer(node.parent,view)){node=node.parent;}return node;}/**
 * Walks up the nodes while they are container and returns the first parent which is not.
 *
 * Returns the parent of the outer container or the node itself when it is not a container.
 *
 * \@internal
 * @param {?} el
 * @return {?}
 */function _getOuterContainerParentOrSelf(el){var/** @type {?} */view=el.view;while(_isNgContainer(el,view)){el=el.parent;}return el;}/**
 * @param {?} node
 * @param {?} view
 * @return {?}
 */function _isNgContainer(node,view){return!node.isNull()&&node.sourceAst.name===NG_CONTAINER_TAG&&node.view===view;}/**
 * @param {?} declaredHtmlAttrs
 * @param {?} directives
 * @return {?}
 */function _mergeHtmlAndDirectiveAttrs(declaredHtmlAttrs,directives){var/** @type {?} */mapResult={};Object.keys(declaredHtmlAttrs).forEach(function(key){mapResult[key]=declaredHtmlAttrs[key];});directives.forEach(function(directiveMeta){Object.keys(directiveMeta.hostAttributes).forEach(function(name){var/** @type {?} */value=directiveMeta.hostAttributes[name];var/** @type {?} */prevValue=mapResult[name];mapResult[name]=isPresent(prevValue)?mergeAttributeValue(name,prevValue,value):value;});});var/** @type {?} */arrResult=[];// Note: We need to sort to get a defined output order
// for tests and for caching generated artifacts...
Object.keys(mapResult).sort().forEach(function(attrName){arrResult.push(attrName,mapResult[attrName]);});return arrResult;}/**
 * @param {?} attrs
 * @return {?}
 */function _readHtmlAttrs(attrs){var/** @type {?} */htmlAttrs={};attrs.forEach(function(ast){htmlAttrs[ast.name]=ast.value;});return htmlAttrs;}/**
 * @param {?} attrName
 * @param {?} attrValue1
 * @param {?} attrValue2
 * @return {?}
 */function mergeAttributeValue(attrName,attrValue1,attrValue2){if(attrName==CLASS_ATTR$1||attrName==STYLE_ATTR){return attrValue1+' '+attrValue2;}else{return attrValue2;}}/**
 * @param {?} view
 * @param {?} targetStatements
 * @return {?}
 */function createViewTopLevelStmts(view,targetStatements){var/** @type {?} */nodeDebugInfosVar=NULL_EXPR;if(view.genConfig.genDebugInfo){nodeDebugInfosVar=variable('nodeDebugInfos_'+identifierName(view.component.type)+view.viewIndex);// fix
// highlighting:
// `
targetStatements.push(nodeDebugInfosVar.set(literalArr(view.nodes.map(createStaticNodeDebugInfo),new ArrayType(importType(createIdentifier(Identifiers.StaticNodeDebugInfo)),[TypeModifier.Const]))).toDeclStmt(null,[StmtModifier.Final]));}var/** @type {?} */renderCompTypeVar=variable(view.rendererTypeName);// fix highlighting: `
if(view.viewIndex===0){var/** @type {?} */templateUrlInfo=void 0;if(view.component.template.templateUrl==identifierModuleUrl(view.component.type)){templateUrlInfo=identifierModuleUrl(view.component.type)+' class '+identifierName(view.component.type)+' - inline template';}else{templateUrlInfo=view.component.template.templateUrl;}targetStatements.push(renderCompTypeVar.set(importExpr(createIdentifier(Identifiers.createRenderComponentType)).callFn([view.genConfig.genDebugInfo?literal(templateUrlInfo):literal(''),literal(view.component.template.ngContentSelectors.length),ViewEncapsulationEnum.fromValue(view.component.template.encapsulation),view.styles,literalMap(view.animations.map(function(entry){return[entry.name,entry.fnExp];}),null,true)])).toDeclStmt(importType(createIdentifier(Identifiers.RenderComponentType))));}var/** @type {?} */viewClass=createViewClass(view,renderCompTypeVar,nodeDebugInfosVar);targetStatements.push(viewClass);}/**
 * @param {?} node
 * @return {?}
 */function createStaticNodeDebugInfo(node){var/** @type {?} */compileElement=node instanceof CompileElement?node:null;var/** @type {?} */providerTokens=[];var/** @type {?} */componentToken=NULL_EXPR;var/** @type {?} */varTokenEntries=[];if(isPresent(compileElement)){providerTokens=compileElement.getProviderTokens().map(function(token){return createDiTokenExpression(token);});if(isPresent(compileElement.component)){componentToken=createDiTokenExpression(identifierToken(compileElement.component.type));}Object.keys(compileElement.referenceTokens).forEach(function(varName){var/** @type {?} */token=compileElement.referenceTokens[varName];varTokenEntries.push([varName,isPresent(token)?createDiTokenExpression(token):NULL_EXPR]);});}return importExpr(createIdentifier(Identifiers.StaticNodeDebugInfo)).instantiate([literalArr(providerTokens,new ArrayType(DYNAMIC_TYPE,[TypeModifier.Const])),componentToken,literalMap(varTokenEntries,new MapType(DYNAMIC_TYPE,[TypeModifier.Const]))],importType(createIdentifier(Identifiers.StaticNodeDebugInfo),null,[TypeModifier.Const]));}/**
 * @param {?} view
 * @param {?} renderCompTypeVar
 * @param {?} nodeDebugInfosVar
 * @return {?}
 */function createViewClass(view,renderCompTypeVar,nodeDebugInfosVar){var/** @type {?} */viewConstructorArgs=[new FnParam(ViewConstructorVars.viewUtils.name,importType(createIdentifier(Identifiers.ViewUtils))),new FnParam(ViewConstructorVars.parentView.name,importType(createIdentifier(Identifiers.AppView),[DYNAMIC_TYPE])),new FnParam(ViewConstructorVars.parentIndex.name,NUMBER_TYPE),new FnParam(ViewConstructorVars.parentElement.name,DYNAMIC_TYPE)];var/** @type {?} */superConstructorArgs=[variable(view.className),renderCompTypeVar,ViewTypeEnum.fromValue(view.viewType),ViewConstructorVars.viewUtils,ViewConstructorVars.parentView,ViewConstructorVars.parentIndex,ViewConstructorVars.parentElement,ChangeDetectorStatusEnum.fromValue(getChangeDetectionMode(view))];if(view.genConfig.genDebugInfo){superConstructorArgs.push(nodeDebugInfosVar);}if(view.viewType===__WEBPACK_IMPORTED_MODULE_0__angular_core__["_30" /* ɵViewType */].EMBEDDED){viewConstructorArgs.push(new FnParam('declaredViewContainer',importType(createIdentifier(Identifiers.ViewContainer))));superConstructorArgs.push(variable('declaredViewContainer'));}var/** @type {?} */viewMethods=[new ClassMethod('createInternal',[new FnParam(rootSelectorVar.name,STRING_TYPE)],generateCreateMethod(view),importType(createIdentifier(Identifiers.ComponentRef),[DYNAMIC_TYPE])),new ClassMethod('injectorGetInternal',[new FnParam(InjectMethodVars$1.token.name,DYNAMIC_TYPE),// Note: Can't use o.INT_TYPE here as the method in AppView uses number
new FnParam(InjectMethodVars$1.requestNodeIndex.name,NUMBER_TYPE),new FnParam(InjectMethodVars$1.notFoundResult.name,DYNAMIC_TYPE)],addReturnValuefNotEmpty(view.injectorGetMethod.finish(),InjectMethodVars$1.notFoundResult),DYNAMIC_TYPE),new ClassMethod('detectChangesInternal',[],generateDetectChangesMethod(view)),new ClassMethod('dirtyParentQueriesInternal',[],view.dirtyParentQueriesMethod.finish()),new ClassMethod('destroyInternal',[],generateDestroyMethod(view)),new ClassMethod('detachInternal',[],view.detachMethod.finish()),generateVisitRootNodesMethod(view),generateVisitProjectableNodesMethod(view),generateCreateEmbeddedViewsMethod(view)].filter(function(method){return method.body.length>0;});var/** @type {?} */superClass=view.genConfig.genDebugInfo?Identifiers.DebugAppView:Identifiers.AppView;var/** @type {?} */viewClass=createClassStmt({name:view.className,parent:importExpr(createIdentifier(superClass),[getContextType(view)]),parentArgs:superConstructorArgs,ctorParams:viewConstructorArgs,builders:[{methods:viewMethods},view]});return viewClass;}/**
 * @param {?} view
 * @return {?}
 */function generateDestroyMethod(view){var/** @type {?} */stmts=[];view.viewContainers.forEach(function(viewContainer){stmts.push(viewContainer.callMethod('destroyNestedViews',[]).toStmt());});view.viewChildren.forEach(function(viewChild){stmts.push(viewChild.callMethod('destroy',[]).toStmt());});stmts.push.apply(stmts,_toConsumableArray(view.destroyMethod.finish()));return stmts;}/**
 * @param {?} view
 * @return {?}
 */function generateCreateMethod(view){var/** @type {?} */parentRenderNodeExpr=NULL_EXPR;var/** @type {?} */parentRenderNodeStmts=[];if(view.viewType===__WEBPACK_IMPORTED_MODULE_0__angular_core__["_30" /* ɵViewType */].COMPONENT){parentRenderNodeExpr=ViewProperties.renderer.callMethod('createViewRoot',[THIS_EXPR.prop('parentElement')]);parentRenderNodeStmts=[parentRenderNodeVar.set(parentRenderNodeExpr).toDeclStmt(importType(view.genConfig.renderTypes.renderNode),[StmtModifier.Final])];}var/** @type {?} */resultExpr=void 0;if(view.viewType===__WEBPACK_IMPORTED_MODULE_0__angular_core__["_30" /* ɵViewType */].HOST){var/** @type {?} */hostEl=view.nodes[0];resultExpr=importExpr(createIdentifier(Identifiers.ComponentRef_),[DYNAMIC_TYPE]).instantiate([literal(hostEl.nodeIndex),THIS_EXPR,hostEl.renderNode,hostEl.getComponent()]);}else{resultExpr=NULL_EXPR;}var/** @type {?} */allNodesExpr=ViewProperties.renderer.cast(DYNAMIC_TYPE).prop('directRenderer').conditional(NULL_EXPR,literalArr(view.nodes.map(function(node){return node.renderNode;})));return parentRenderNodeStmts.concat(view.createMethod.finish(),[THIS_EXPR.callMethod('init',[view.lastRenderNode,allNodesExpr,view.disposables.length?literalArr(view.disposables):NULL_EXPR]).toStmt(),new ReturnStatement(resultExpr)]);}/**
 * @param {?} view
 * @return {?}
 */function generateDetectChangesMethod(view){var/** @type {?} */stmts=[];if(view.animationBindingsMethod.isEmpty()&&view.detectChangesInInputsMethod.isEmpty()&&view.updateContentQueriesMethod.isEmpty()&&view.afterContentLifecycleCallbacksMethod.isEmpty()&&view.detectChangesRenderPropertiesMethod.isEmpty()&&view.updateViewQueriesMethod.isEmpty()&&view.afterViewLifecycleCallbacksMethod.isEmpty()&&view.viewContainers.length===0&&view.viewChildren.length===0){return stmts;}stmts.push.apply(stmts,_toConsumableArray(view.animationBindingsMethod.finish()));stmts.push.apply(stmts,_toConsumableArray(view.detectChangesInInputsMethod.finish()));view.viewContainers.forEach(function(viewContainer){stmts.push(viewContainer.callMethod('detectChangesInNestedViews',[ViewProperties.throwOnChange]).toStmt());});var/** @type {?} */afterContentStmts=view.updateContentQueriesMethod.finish().concat(view.afterContentLifecycleCallbacksMethod.finish());if(afterContentStmts.length>0){stmts.push(new IfStmt(not(ViewProperties.throwOnChange),afterContentStmts));}stmts.push.apply(stmts,_toConsumableArray(view.detectChangesRenderPropertiesMethod.finish()));view.viewChildren.forEach(function(viewChild){stmts.push(viewChild.callMethod('internalDetectChanges',[ViewProperties.throwOnChange]).toStmt());});var/** @type {?} */afterViewStmts=view.updateViewQueriesMethod.finish().concat(view.afterViewLifecycleCallbacksMethod.finish());if(afterViewStmts.length>0){stmts.push(new IfStmt(not(ViewProperties.throwOnChange),afterViewStmts));}var/** @type {?} */varStmts=legacyCreateSharedBindingVariablesIfNeeded(stmts);return varStmts.concat(stmts);}/**
 * @param {?} statements
 * @param {?} value
 * @return {?}
 */function addReturnValuefNotEmpty(statements,value){if(statements.length>0){return statements.concat([new ReturnStatement(value)]);}else{return statements;}}/**
 * @param {?} view
 * @return {?}
 */function getContextType(view){if(view.viewType===__WEBPACK_IMPORTED_MODULE_0__angular_core__["_30" /* ɵViewType */].COMPONENT){return importType(view.component.type);}return DYNAMIC_TYPE;}/**
 * @param {?} view
 * @return {?}
 */function getChangeDetectionMode(view){var/** @type {?} */mode=void 0;if(view.viewType===__WEBPACK_IMPORTED_MODULE_0__angular_core__["_30" /* ɵViewType */].COMPONENT){mode=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_112" /* ɵisDefaultChangeDetectionStrategy */])(view.component.changeDetection)?__WEBPACK_IMPORTED_MODULE_0__angular_core__["_33" /* ɵChangeDetectorStatus */].CheckAlways:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_33" /* ɵChangeDetectorStatus */].CheckOnce;}else{mode=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_33" /* ɵChangeDetectorStatus */].CheckAlways;}return mode;}/**
 * @param {?} view
 * @return {?}
 */function generateVisitRootNodesMethod(view){var/** @type {?} */cbVar=variable('cb');var/** @type {?} */ctxVar=variable('ctx');var/** @type {?} */stmts=generateVisitNodesStmts(view.rootNodes,cbVar,ctxVar);return new ClassMethod('visitRootNodesInternal',[new FnParam(cbVar.name,DYNAMIC_TYPE),new FnParam(ctxVar.name,DYNAMIC_TYPE)],stmts);}/**
 * @param {?} view
 * @return {?}
 */function generateVisitProjectableNodesMethod(view){var/** @type {?} */nodeIndexVar=variable('nodeIndex');var/** @type {?} */ngContentIndexVar=variable('ngContentIndex');var/** @type {?} */cbVar=variable('cb');var/** @type {?} */ctxVar=variable('ctx');var/** @type {?} */stmts=[];view.nodes.forEach(function(node){if(node instanceof CompileElement&&node.component){node.contentNodesByNgContentIndex.forEach(function(projectedNodes,ngContentIndex){stmts.push(new IfStmt(nodeIndexVar.equals(literal(node.nodeIndex)).and(ngContentIndexVar.equals(literal(ngContentIndex))),generateVisitNodesStmts(projectedNodes,cbVar,ctxVar)));});}});return new ClassMethod('visitProjectableNodesInternal',[new FnParam(nodeIndexVar.name,NUMBER_TYPE),new FnParam(ngContentIndexVar.name,NUMBER_TYPE),new FnParam(cbVar.name,DYNAMIC_TYPE),new FnParam(ctxVar.name,DYNAMIC_TYPE)],stmts);}/**
 * @param {?} nodes
 * @param {?} cb
 * @param {?} ctx
 * @return {?}
 */function generateVisitNodesStmts(nodes,cb,ctx){var/** @type {?} */stmts=[];nodes.forEach(function(node){switch(node.type){case CompileViewRootNodeType.Node:stmts.push(cb.callFn([node.expr,ctx]).toStmt());break;case CompileViewRootNodeType.ViewContainer:stmts.push(cb.callFn([node.expr.prop('nativeElement'),ctx]).toStmt());stmts.push(node.expr.callMethod('visitNestedViewRootNodes',[cb,ctx]).toStmt());break;case CompileViewRootNodeType.NgContent:stmts.push(THIS_EXPR.callMethod('visitProjectedNodes',[literal(node.ngContentIndex),cb,ctx]).toStmt());break;}});return stmts;}/**
 * @param {?} view
 * @return {?}
 */function generateCreateEmbeddedViewsMethod(view){var/** @type {?} */nodeIndexVar=variable('nodeIndex');var/** @type {?} */stmts=[];view.nodes.forEach(function(node){if(node instanceof CompileElement){if(node.embeddedView){stmts.push(new IfStmt(nodeIndexVar.equals(literal(node.nodeIndex)),[new ReturnStatement(node.embeddedView.classExpr.instantiate([ViewProperties.viewUtils,THIS_EXPR,literal(node.nodeIndex),node.renderNode,node.viewContainer]))]));}}});if(stmts.length>0){stmts.push(new ReturnStatement(NULL_EXPR));}return new ClassMethod('createEmbeddedViewInternal',[new FnParam(nodeIndexVar.name,NUMBER_TYPE)],stmts,importType(createIdentifier(Identifiers.AppView),[DYNAMIC_TYPE]));}var ViewCompileResult=/**
     * @param {?} statements
     * @param {?} viewClassVar
     * @param {?} rendererTypeVar
     * @param {?} dependencies
     */function ViewCompileResult(statements,viewClassVar,rendererTypeVar,dependencies){_classCallCheck(this,ViewCompileResult);this.statements=statements;this.viewClassVar=viewClassVar;this.rendererTypeVar=rendererTypeVar;this.dependencies=dependencies;};var ViewCompiler=function(){/**
     * @param {?} _genConfig
     * @param {?} _schemaRegistry
     */function ViewCompiler(_genConfig,_schemaRegistry){_classCallCheck(this,ViewCompiler);this._genConfig=_genConfig;this._schemaRegistry=_schemaRegistry;}/**
     * @param {?} component
     * @param {?} template
     * @param {?} styles
     * @param {?} pipes
     * @param {?} compiledAnimations
     * @return {?}
     */_createClass(ViewCompiler,[{key:'compileComponent',value:function compileComponent(component,template,styles,pipes,compiledAnimations){var/** @type {?} */dependencies=[];var/** @type {?} */view=new CompileView(component,this._genConfig,pipes,styles,compiledAnimations,0,CompileElement.createNull(),[],dependencies);var/** @type {?} */statements=[];buildView(view,template,dependencies);// Need to separate binding from creation to be able to refer to
// variables that have been declared after usage.
bindView(view,template,this._schemaRegistry);finishView(view,statements);return new ViewCompileResult(statements,view.classExpr.name,view.rendererTypeName,dependencies);}}]);return ViewCompiler;}();ViewCompiler.decorators=[{type:CompilerInjectable}];/** @nocollapse */ViewCompiler.ctorParameters=function(){return[{type:CompilerConfig},{type:ElementSchemaRegistry}];};var/** @type {?} */CLASS_ATTR$2='class';var/** @type {?} */STYLE_ATTR$1='style';var/** @type {?} */IMPLICIT_TEMPLATE_VAR$1='\$implicit';var/** @type {?} */NG_CONTAINER_TAG$1='ng-container';var ViewCompilerNext=function(_ViewCompiler){_inherits(ViewCompilerNext,_ViewCompiler);/**
     * @param {?} _genConfigNext
     * @param {?} _schemaRegistryNext
     */function ViewCompilerNext(_genConfigNext,_schemaRegistryNext){_classCallCheck(this,ViewCompilerNext);var _this212=_possibleConstructorReturn(this,(ViewCompilerNext.__proto__||Object.getPrototypeOf(ViewCompilerNext)).call(this,_genConfigNext,_schemaRegistryNext));_this212._genConfigNext=_genConfigNext;_this212._schemaRegistryNext=_schemaRegistryNext;return _this212;}/**
     * @param {?} component
     * @param {?} template
     * @param {?} styles
     * @param {?} usedPipes
     * @param {?} compiledAnimations
     * @return {?}
     */_createClass(ViewCompilerNext,[{key:'compileComponent',value:function compileComponent(component,template,styles,usedPipes,compiledAnimations){var/** @type {?} */embeddedViewCount=0;var/** @type {?} */staticQueryIds=findStaticQueryIds(template);var/** @type {?} */statements=[];var/** @type {?} */renderComponentVar=variable(rendererTypeName(component.type.reference));statements.push(renderComponentVar.set(importExpr(createIdentifier(Identifiers.createRendererTypeV2)).callFn([new LiteralMapExpr([new LiteralMapEntry('encapsulation',literal(component.template.encapsulation)),new LiteralMapEntry('styles',styles),new LiteralMapEntry('data',literalMap([['animation',convertValueToOutputAst(component.template.animations)]]))])])).toDeclStmt(importType(createIdentifier(Identifiers.RendererTypeV2)),[StmtModifier.Final]));var/** @type {?} */viewBuilderFactory=function viewBuilderFactory(parent){var/** @type {?} */embeddedViewIndex=embeddedViewCount++;return new ViewBuilder(parent,component,embeddedViewIndex,usedPipes,staticQueryIds,viewBuilderFactory);};var/** @type {?} */visitor=viewBuilderFactory(null);visitor.visitAll([],template);statements.push.apply(statements,_toConsumableArray(visitor.build()));return new ViewCompileResult(statements,visitor.viewName,renderComponentVar.name,[]);}}]);return ViewCompilerNext;}(ViewCompiler);ViewCompilerNext.decorators=[{type:CompilerInjectable}];/** @nocollapse */ViewCompilerNext.ctorParameters=function(){return[{type:CompilerConfig},{type:ElementSchemaRegistry}];};var/** @type {?} */VIEW_VAR$1=variable('view');var/** @type {?} */CHECK_VAR=variable('check');var/** @type {?} */COMP_VAR=variable('comp');var/** @type {?} */NODE_INDEX_VAR=variable('nodeIndex');var/** @type {?} */EVENT_NAME_VAR$1=variable('eventName');var/** @type {?} */ALLOW_DEFAULT_VAR=variable('allowDefault');var ViewBuilder=function(){/**
     * @param {?} parent
     * @param {?} component
     * @param {?} embeddedViewIndex
     * @param {?} usedPipes
     * @param {?} staticQueryIds
     * @param {?} viewBuilderFactory
     */function ViewBuilder(parent,component,embeddedViewIndex,usedPipes,staticQueryIds,viewBuilderFactory){_classCallCheck(this,ViewBuilder);this.parent=parent;this.component=component;this.embeddedViewIndex=embeddedViewIndex;this.usedPipes=usedPipes;this.staticQueryIds=staticQueryIds;this.viewBuilderFactory=viewBuilderFactory;this.nodeDefs=[];this.purePipeNodeIndices=Object.create(null);this.refNodeIndices=Object.create(null);this.variables=[];this.children=[];this.updateDirectivesExpressions=[];this.updateRendererExpressions=[];// TODO(tbosch): The old view compiler used to use an `any` type
// for the context in any embedded view. We keep this behaivor for now
// to be able to introduce the new view compiler without too many errors.
this.compType=this.embeddedViewIndex>0?DYNAMIC_TYPE:importType(this.component.type);}/**
     * @return {?}
     */_createClass(ViewBuilder,[{key:'visitAll',/**
     * @param {?} variables
     * @param {?} astNodes
     * @return {?}
     */value:function visitAll(variables,astNodes){var _this213=this;this.variables=variables;// create the pipes for the pure pipes immediately, so that we know their indices.
if(!this.parent){this.usedPipes.forEach(function(pipe){if(pipe.pure){_this213.purePipeNodeIndices[pipe.name]=_this213._createPipe(pipe);}});}if(!this.parent){var/** @type {?} */queryIds=staticViewQueryIds(this.staticQueryIds);this.component.viewQueries.forEach(function(query,queryIndex){// Note: queries start with id 1 so we can use the number in a Bloom filter!
var/** @type {?} */queryId=queryIndex+1;var/** @type {?} */bindingType=query.first?__WEBPACK_IMPORTED_MODULE_0__angular_core__["_113" /* ɵQueryBindingType */].First:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_113" /* ɵQueryBindingType */].All;var/** @type {?} */flags=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_114" /* ɵNodeFlags */].HasViewQuery;if(queryIds.staticQueryIds.has(queryId)){flags|=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_114" /* ɵNodeFlags */].HasStaticQuery;}else{flags|=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_114" /* ɵNodeFlags */].HasDynamicQuery;}_this213.nodeDefs.push(function(){return importExpr(createIdentifier(Identifiers.queryDef)).callFn([literal(flags),literal(queryId),new LiteralMapExpr([new LiteralMapEntry(query.propertyName,literal(bindingType))])]);});});}templateVisitAll(this,astNodes);if(astNodes.length===0||this.parent&&needsAdditionalRootNode(astNodes[astNodes.length-1])){// if the view is empty, or an embedded view has a view container as last root nde,
// create an additional root node.
this.nodeDefs.push(function(){return importExpr(createIdentifier(Identifiers.anchorDef)).callFn([literal(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_114" /* ɵNodeFlags */].None),NULL_EXPR,NULL_EXPR,literal(0)]);});}}/**
     * @param {?=} targetStatements
     * @return {?}
     */},{key:'build',value:function build(){var targetStatements=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];this.children.forEach(function(child){return child.build(targetStatements);});var/** @type {?} */updateDirectivesFn=this._createUpdateFn(this.updateDirectivesExpressions);var/** @type {?} */updateRendererFn=this._createUpdateFn(this.updateRendererExpressions);var/** @type {?} */viewFlags=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_115" /* ɵViewFlags */].None;if(!this.parent&&this.component.changeDetection===__WEBPACK_IMPORTED_MODULE_0__angular_core__["_14" /* ChangeDetectionStrategy */].OnPush){viewFlags|=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_115" /* ɵViewFlags */].OnPush;}var/** @type {?} */viewFactory=new DeclareFunctionStmt(this.viewName,[],[new ReturnStatement(importExpr(createIdentifier(Identifiers.viewDef)).callFn([literal(viewFlags),literalArr(this.nodeDefs.map(function(nd){return nd();})),updateDirectivesFn,updateRendererFn]))],importType(createIdentifier(Identifiers.ViewDefinition)));targetStatements.push(viewFactory);return targetStatements;}/**
     * @param {?} expressions
     * @return {?}
     */},{key:'_createUpdateFn',value:function _createUpdateFn(expressions){var _this214=this;var/** @type {?} */updateStmts=[];var/** @type {?} */updateBindingCount=0;expressions.forEach(function(_ref33){var expressions=_ref33.expressions,nodeIndex=_ref33.nodeIndex;var/** @type {?} */exprs=expressions.map(function(_ref34){var context=_ref34.context,value=_ref34.value;var/** @type {?} */bindingId=''+updateBindingCount++;var/** @type {?} */nameResolver=context===COMP_VAR?_this214:null;var _convertPropertyBindi2=convertPropertyBinding(nameResolver,context,value,bindingId),stmts=_convertPropertyBindi2.stmts,currValExpr=_convertPropertyBindi2.currValExpr;updateStmts.push.apply(updateStmts,_toConsumableArray(stmts));return currValExpr;});updateStmts.push(callCheckStmt(nodeIndex,exprs).toStmt());});var/** @type {?} */updateFn=void 0;if(updateStmts.length>0){var/** @type {?} */preStmts=[];if(!this.component.isHost){preStmts.push(COMP_VAR.set(VIEW_VAR$1.prop('component')).toDeclStmt(this.compType));}updateFn=fn([new FnParam(CHECK_VAR.name,INFERRED_TYPE),new FnParam(VIEW_VAR$1.name,INFERRED_TYPE)],[].concat(preStmts,updateStmts),INFERRED_TYPE);}else{updateFn=NULL_EXPR;}return updateFn;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitNgContent',value:function visitNgContent(ast,context){// ngContentDef(ngContentIndex: number, index: number): NodeDef;
this.nodeDefs.push(function(){return importExpr(createIdentifier(Identifiers.ngContentDef)).callFn([literal(ast.ngContentIndex),literal(ast.index)]);});}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitText',value:function visitText(ast,context){// textDef(ngContentIndex: number, constants: string[]): NodeDef;
this.nodeDefs.push(function(){return importExpr(createIdentifier(Identifiers.textDef)).callFn([literal(ast.ngContentIndex),literalArr([literal(ast.value)])]);});}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitBoundText',value:function visitBoundText(ast,context){var/** @type {?} */nodeIndex=this.nodeDefs.length;// reserve the space in the nodeDefs array
this.nodeDefs.push(null);var/** @type {?} */astWithSource=ast.value;var/** @type {?} */inter=astWithSource.ast;this._addUpdateExpressions(nodeIndex,inter.expressions.map(function(expr){return{context:COMP_VAR,value:expr};}),this.updateRendererExpressions);// textDef(ngContentIndex: number, constants: string[]): NodeDef;
this.nodeDefs[nodeIndex]=function(){return importExpr(createIdentifier(Identifiers.textDef)).callFn([literal(ast.ngContentIndex),literalArr(inter.strings.map(function(s){return literal(s);}))]);};}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitEmbeddedTemplate',value:function visitEmbeddedTemplate(ast,context){var _this215=this;var/** @type {?} */nodeIndex=this.nodeDefs.length;// reserve the space in the nodeDefs array
this.nodeDefs.push(null);var _visitElementOrTempla=this._visitElementOrTemplate(nodeIndex,ast),flags=_visitElementOrTempla.flags,queryMatchesExpr=_visitElementOrTempla.queryMatchesExpr,hostEvents=_visitElementOrTempla.hostEvents;var/** @type {?} */childVisitor=this.viewBuilderFactory(this);this.children.push(childVisitor);childVisitor.visitAll(ast.variables,ast.children);var/** @type {?} */childCount=this.nodeDefs.length-nodeIndex-1;// anchorDef(
//   flags: NodeFlags, matchedQueries: [string, QueryValueType][], ngContentIndex: number,
//   childCount: number, handleEventFn?: ElementHandleEventFn, templateFactory?:
//   ViewDefinitionFactory): NodeDef;
var/** @type {?} */nodeDef=function nodeDef(){return importExpr(createIdentifier(Identifiers.anchorDef)).callFn([literal(flags),queryMatchesExpr,literal(ast.ngContentIndex),literal(childCount),_this215._createElementHandleEventFn(nodeIndex,hostEvents),variable(childVisitor.viewName)]);};this.nodeDefs[nodeIndex]=nodeDef;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitElement',value:function visitElement(ast,context){var _this216=this;var/** @type {?} */nodeIndex=this.nodeDefs.length;// reserve the space in the nodeDefs array so we can add children
this.nodeDefs.push(null);var/** @type {?} */elName=ast.name;if(ast.name===NG_CONTAINER_TAG$1){// Using a null element name creates an anchor.
elName=null;}var _visitElementOrTempla2=this._visitElementOrTemplate(nodeIndex,ast),flags=_visitElementOrTempla2.flags,usedEvents=_visitElementOrTempla2.usedEvents,queryMatchesExpr=_visitElementOrTempla2.queryMatchesExpr,hostBindings=_visitElementOrTempla2.hostBindings,hostEvents=_visitElementOrTempla2.hostEvents;var/** @type {?} */inputDefs=[];var/** @type {?} */outputDefs=[];if(elName){ast.inputs.forEach(function(inputAst){return hostBindings.push({context:COMP_VAR,value:inputAst.value});});if(hostBindings.length){this._addUpdateExpressions(nodeIndex,hostBindings,this.updateRendererExpressions);}// Note: inputDefs have to be in the same order as hostBindings:
// - first the entries from the directives, then the ones from the element.
ast.directives.forEach(function(dirAst,dirIndex){return inputDefs.push.apply(inputDefs,_toConsumableArray(elementBindingDefs(dirAst.hostProperties,dirAst)));});inputDefs.push.apply(inputDefs,_toConsumableArray(elementBindingDefs(ast.inputs,null)));outputDefs=usedEvents.map(function(_ref35){var _ref36=_slicedToArray(_ref35,2),target=_ref36[0],eventName=_ref36[1];return literalArr([literal(target),literal(eventName)]);});}templateVisitAll(this,ast.children);var/** @type {?} */childCount=this.nodeDefs.length-nodeIndex-1;var/** @type {?} */compAst=ast.directives.find(function(dirAst){return dirAst.directive.isComponent;});var/** @type {?} */compRendererType=NULL_EXPR;var/** @type {?} */compView=NULL_EXPR;if(compAst){compView=importExpr({reference:compAst.directive.componentViewType});compRendererType=importExpr({reference:compAst.directive.rendererType});}// elementDef(
//   flags: NodeFlags, matchedQueriesDsl: [string | number, QueryValueType][],
//   ngContentIndex: number, childCount: number, namespaceAndName: string,
//   fixedAttrs: [string, string][] = [],
//   bindings?:
//       ([BindingType.ElementClass, string] | [BindingType.ElementStyle, string, string] |
//        [BindingType.ElementAttribute | BindingType.ElementProperty |
//        BindingType.DirectiveHostProperty, string, SecurityContext])[],
//   outputs?: ([OutputType.ElementOutput | OutputType.DirectiveHostOutput, string, string])[],
//   handleEvent?: ElementHandleEventFn,
//   componentView?: () => ViewDefinition, componentRendererType?: RendererTypeV2): NodeDef;
var/** @type {?} */nodeDef=function nodeDef(){return importExpr(createIdentifier(Identifiers.elementDef)).callFn([literal(flags),queryMatchesExpr,literal(ast.ngContentIndex),literal(childCount),literal(elName),elName?fixedAttrsDef(ast):NULL_EXPR,inputDefs.length?literalArr(inputDefs):NULL_EXPR,outputDefs.length?literalArr(outputDefs):NULL_EXPR,_this216._createElementHandleEventFn(nodeIndex,hostEvents),compView,compRendererType]);};this.nodeDefs[nodeIndex]=nodeDef;}/**
     * @param {?} nodeIndex
     * @param {?} ast
     * @return {?}
     */},{key:'_visitElementOrTemplate',value:function _visitElementOrTemplate(nodeIndex,ast){var _this217=this;var/** @type {?} */flags=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_114" /* ɵNodeFlags */].None;if(ast.hasViewContainer){flags|=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_114" /* ɵNodeFlags */].HasEmbeddedViews;}var/** @type {?} */usedEvents=new Map();ast.outputs.forEach(function(event){var _elementEventNameAndT=elementEventNameAndTarget(event,null),name=_elementEventNameAndT.name,target=_elementEventNameAndT.target;usedEvents.set(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_116" /* ɵelementEventFullName */])(target,name),[target,name]);});ast.directives.forEach(function(dirAst){dirAst.hostEvents.forEach(function(event){var _elementEventNameAndT2=elementEventNameAndTarget(event,dirAst),name=_elementEventNameAndT2.name,target=_elementEventNameAndT2.target;usedEvents.set(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_116" /* ɵelementEventFullName */])(target,name),[target,name]);});});var/** @type {?} */hostBindings=[];var/** @type {?} */hostEvents=[];var/** @type {?} */componentFactoryResolverProvider=createComponentFactoryResolver(ast.directives);if(componentFactoryResolverProvider){this._visitProvider(componentFactoryResolverProvider,ast.queryMatches);}ast.providers.forEach(function(providerAst,providerIndex){var/** @type {?} */dirAst=void 0;var/** @type {?} */dirIndex=void 0;ast.directives.forEach(function(localDirAst,i){if(localDirAst.directive.type.reference===tokenReference(providerAst.token)){dirAst=localDirAst;dirIndex=i;}});if(dirAst){var _visitDirective2=_this217._visitDirective(providerAst,dirAst,dirIndex,nodeIndex,ast.references,ast.queryMatches,usedEvents,_this217.staticQueryIds.get(/** @type {?} */ast)),dirHostBindings=_visitDirective2.hostBindings,dirHostEvents=_visitDirective2.hostEvents;hostBindings.push.apply(hostBindings,_toConsumableArray(dirHostBindings));hostEvents.push.apply(hostEvents,_toConsumableArray(dirHostEvents));}else{_this217._visitProvider(providerAst,ast.queryMatches);}});var/** @type {?} */queryMatchExprs=[];ast.queryMatches.forEach(function(match){var/** @type {?} */valueType=void 0;if(tokenReference(match.value)===resolveIdentifier(Identifiers.ElementRef)){valueType=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_117" /* ɵQueryValueType */].ElementRef;}else if(tokenReference(match.value)===resolveIdentifier(Identifiers.ViewContainerRef)){valueType=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_117" /* ɵQueryValueType */].ViewContainerRef;}else if(tokenReference(match.value)===resolveIdentifier(Identifiers.TemplateRef)){valueType=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_117" /* ɵQueryValueType */].TemplateRef;}if(valueType!=null){queryMatchExprs.push(literalArr([literal(match.queryId),literal(valueType)]));}});ast.references.forEach(function(ref){var/** @type {?} */valueType=void 0;if(!ref.value){valueType=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_117" /* ɵQueryValueType */].RenderElement;}else if(tokenReference(ref.value)===resolveIdentifier(Identifiers.TemplateRef)){valueType=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_117" /* ɵQueryValueType */].TemplateRef;}if(valueType!=null){_this217.refNodeIndices[ref.name]=nodeIndex;queryMatchExprs.push(literalArr([literal(ref.name),literal(valueType)]));}});ast.outputs.forEach(function(outputAst){hostEvents.push({context:COMP_VAR,eventAst:outputAst,dirAst:null});});return{flags:flags,usedEvents:Array.from(usedEvents.values()),queryMatchesExpr:queryMatchExprs.length?literalArr(queryMatchExprs):NULL_EXPR,hostBindings:hostBindings,hostEvents:hostEvents};}/**
     * @param {?} providerAst
     * @param {?} dirAst
     * @param {?} directiveIndex
     * @param {?} elementNodeIndex
     * @param {?} refs
     * @param {?} queryMatches
     * @param {?} usedEvents
     * @param {?} queryIds
     * @return {?}
     */},{key:'_visitDirective',value:function _visitDirective(providerAst,dirAst,directiveIndex,elementNodeIndex,refs,queryMatches,usedEvents,queryIds){var _this218=this;var/** @type {?} */nodeIndex=this.nodeDefs.length;// reserve the space in the nodeDefs array so we can add children
this.nodeDefs.push(null);dirAst.directive.queries.forEach(function(query,queryIndex){var/** @type {?} */flags=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_114" /* ɵNodeFlags */].HasContentQuery;var/** @type {?} */queryId=dirAst.contentQueryStartId+queryIndex;// Note: We only make queries static that query for a single item.
// This is because of backwards compatibility with the old view compiler...
if(queryIds.staticQueryIds.has(queryId)&&query.first){flags|=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_114" /* ɵNodeFlags */].HasStaticQuery;}else{flags|=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_114" /* ɵNodeFlags */].HasDynamicQuery;}var/** @type {?} */bindingType=query.first?__WEBPACK_IMPORTED_MODULE_0__angular_core__["_113" /* ɵQueryBindingType */].First:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_113" /* ɵQueryBindingType */].All;_this218.nodeDefs.push(function(){return importExpr(createIdentifier(Identifiers.queryDef)).callFn([literal(flags),literal(queryId),new LiteralMapExpr([new LiteralMapEntry(query.propertyName,literal(bindingType))])]);});});// Note: the operation below might also create new nodeDefs,
// but we don't want them to be a child of a directive,
// as they might be a provider/pipe on their own.
// I.e. we only allow queries as children of directives nodes.
var/** @type {?} */childCount=this.nodeDefs.length-nodeIndex-1;var _visitProviderOrDirec=this._visitProviderOrDirective(providerAst,queryMatches),flags=_visitProviderOrDirec.flags,queryMatchExprs=_visitProviderOrDirec.queryMatchExprs,providerExpr=_visitProviderOrDirec.providerExpr,providerType=_visitProviderOrDirec.providerType,depsExpr=_visitProviderOrDirec.depsExpr;refs.forEach(function(ref){if(ref.value&&tokenReference(ref.value)===tokenReference(providerAst.token)){_this218.refNodeIndices[ref.name]=nodeIndex;queryMatchExprs.push(literalArr([literal(ref.name),literal(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_117" /* ɵQueryValueType */].Provider)]));}});if(dirAst.directive.isComponent){flags|=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_114" /* ɵNodeFlags */].IsComponent;}var/** @type {?} */inputDefs=dirAst.inputs.map(function(inputAst,inputIndex){var/** @type {?} */mapValue=literalArr([literal(inputIndex),literal(inputAst.directiveName)]);// Note: it's important to not quote the key so that we can capture renames by minifiers!
return new LiteralMapEntry(inputAst.directiveName,mapValue,false);});var/** @type {?} */outputDefs=[];var/** @type {?} */dirMeta=dirAst.directive;Object.keys(dirMeta.outputs).forEach(function(propName){var/** @type {?} */eventName=dirMeta.outputs[propName];if(usedEvents.has(eventName)){// Note: it's important to not quote the key so that we can capture renames by minifiers!
outputDefs.push(new LiteralMapEntry(propName,literal(eventName),false));}});if(dirAst.inputs.length||(flags&(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_114" /* ɵNodeFlags */].DoCheck|__WEBPACK_IMPORTED_MODULE_0__angular_core__["_114" /* ɵNodeFlags */].OnInit))>0){this._addUpdateExpressions(nodeIndex,dirAst.inputs.map(function(input){return{context:COMP_VAR,value:input.value};}),this.updateDirectivesExpressions);}var/** @type {?} */dirContextExpr=importExpr(createIdentifier(Identifiers.nodeValue)).callFn([VIEW_VAR$1,literal(nodeIndex)]);var/** @type {?} */hostBindings=dirAst.hostProperties.map(function(hostBindingAst){return{value:hostBindingAst.value.ast,context:dirContextExpr};});var/** @type {?} */hostEvents=dirAst.hostEvents.map(function(hostEventAst){return{context:dirContextExpr,eventAst:hostEventAst,dirAst:dirAst};});// directiveDef(
//   flags: NodeFlags, matchedQueries: [string, QueryValueType][], childCount: number, ctor:
//   any,
//   deps: ([DepFlags, any] | any)[], props?: {[name: string]: [number, string]},
//   outputs?: {[name: string]: string}, component?: () => ViewDefinition): NodeDef;
var/** @type {?} */nodeDef=function nodeDef(){return importExpr(createIdentifier(Identifiers.directiveDef)).callFn([literal(flags),queryMatchExprs.length?literalArr(queryMatchExprs):NULL_EXPR,literal(childCount),providerExpr,depsExpr,inputDefs.length?new LiteralMapExpr(inputDefs):NULL_EXPR,outputDefs.length?new LiteralMapExpr(outputDefs):NULL_EXPR]);};this.nodeDefs[nodeIndex]=nodeDef;return{hostBindings:hostBindings,hostEvents:hostEvents};}/**
     * @param {?} providerAst
     * @param {?} queryMatches
     * @return {?}
     */},{key:'_visitProvider',value:function _visitProvider(providerAst,queryMatches){var/** @type {?} */nodeIndex=this.nodeDefs.length;// reserve the space in the nodeDefs array so we can add children
this.nodeDefs.push(null);var _visitProviderOrDirec2=this._visitProviderOrDirective(providerAst,queryMatches),flags=_visitProviderOrDirec2.flags,queryMatchExprs=_visitProviderOrDirec2.queryMatchExprs,providerExpr=_visitProviderOrDirec2.providerExpr,providerType=_visitProviderOrDirec2.providerType,depsExpr=_visitProviderOrDirec2.depsExpr;// providerDef(
//   flags: NodeFlags, matchedQueries: [string, QueryValueType][], type: ProviderType, token:
//   any,
//   value: any, deps: ([DepFlags, any] | any)[]): NodeDef;
var/** @type {?} */nodeDef=function nodeDef(){return importExpr(createIdentifier(Identifiers.providerDef)).callFn([literal(flags),queryMatchExprs.length?literalArr(queryMatchExprs):NULL_EXPR,literal(providerType),tokenExpr(providerAst.token),providerExpr,depsExpr]);};this.nodeDefs[nodeIndex]=nodeDef;}/**
     * @param {?} providerAst
     * @param {?} queryMatches
     * @return {?}
     */},{key:'_visitProviderOrDirective',value:function _visitProviderOrDirective(providerAst,queryMatches){var/** @type {?} */flags=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_114" /* ɵNodeFlags */].None;if(!providerAst.eager){flags|=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_114" /* ɵNodeFlags */].LazyProvider;}if(providerAst.providerType===ProviderAstType.PrivateService){flags|=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_114" /* ɵNodeFlags */].PrivateProvider;}providerAst.lifecycleHooks.forEach(function(lifecycleHook){// for regular providers, we only support ngOnDestroy
if(lifecycleHook===__WEBPACK_IMPORTED_MODULE_0__angular_core__["_106" /* ɵLifecycleHooks */].OnDestroy||providerAst.providerType===ProviderAstType.Directive||providerAst.providerType===ProviderAstType.Component){flags|=lifecycleHookToNodeFlag(lifecycleHook);}});var/** @type {?} */queryMatchExprs=[];queryMatches.forEach(function(match){if(tokenReference(match.value)===tokenReference(providerAst.token)){queryMatchExprs.push(literalArr([literal(match.queryId),literal(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_117" /* ɵQueryValueType */].Provider)]));}});var _providerDef=providerDef(providerAst),providerExpr=_providerDef.providerExpr,providerType=_providerDef.providerType,depsExpr=_providerDef.depsExpr;return{flags:flags,queryMatchExprs:queryMatchExprs,providerExpr:providerExpr,providerType:providerType,depsExpr:depsExpr};}/**
     * @param {?} name
     * @return {?}
     */},{key:'getLocal',value:function getLocal(name){if(name==EventHandlerVars.event.name){return EventHandlerVars.event;}var/** @type {?} */currViewExpr=VIEW_VAR$1;for(var/** @type {?} */currBuilder=this;currBuilder;currBuilder=currBuilder.parent,currViewExpr=currViewExpr.prop('parent')){// check references
var/** @type {?} */refNodeIndex=currBuilder.refNodeIndices[name];if(refNodeIndex!=null){return importExpr(createIdentifier(Identifiers.nodeValue)).callFn([currViewExpr,literal(refNodeIndex)]);}// check variables
var/** @type {?} */varAst=currBuilder.variables.find(function(varAst){return varAst.name===name;});if(varAst){var/** @type {?} */varValue=varAst.value||IMPLICIT_TEMPLATE_VAR$1;return currViewExpr.prop('context').prop(varValue);}}return null;}/**
     * @param {?} argCount
     * @return {?}
     */},{key:'createLiteralArrayConverter',value:function createLiteralArrayConverter(argCount){if(argCount===0){var/** @type {?} */valueExpr=importExpr(createIdentifier(Identifiers.EMPTY_ARRAY));return function(){return valueExpr;};}var/** @type {?} */nodeIndex=this.nodeDefs.length;// pureArrayDef(argCount: number): NodeDef;
var/** @type {?} */nodeDef=function nodeDef(){return importExpr(createIdentifier(Identifiers.pureArrayDef)).callFn([literal(argCount)]);};this.nodeDefs.push(nodeDef);return function(args){return callCheckStmt(nodeIndex,args);};}/**
     * @param {?} keys
     * @return {?}
     */},{key:'createLiteralMapConverter',value:function createLiteralMapConverter(keys){if(keys.length===0){var/** @type {?} */valueExpr=importExpr(createIdentifier(Identifiers.EMPTY_MAP));return function(){return valueExpr;};}var/** @type {?} */nodeIndex=this.nodeDefs.length;// function pureObjectDef(propertyNames: string[]): NodeDef
var/** @type {?} */nodeDef=function nodeDef(){return importExpr(createIdentifier(Identifiers.pureObjectDef)).callFn([literalArr(keys.map(function(key){return literal(key);}))]);};this.nodeDefs.push(nodeDef);return function(args){return callCheckStmt(nodeIndex,args);};}/**
     * @param {?} name
     * @param {?} argCount
     * @return {?}
     */},{key:'createPipeConverter',value:function createPipeConverter(name,argCount){var/** @type {?} */pipe=this._findPipe(name);if(pipe.pure){var/** @type {?} */nodeIndex=this.nodeDefs.length;// function purePipeDef(argCount: number): NodeDef;
var/** @type {?} */nodeDef=function nodeDef(){return importExpr(createIdentifier(Identifiers.purePipeDef)).callFn([literal(argCount)]);};this.nodeDefs.push(nodeDef);// find underlying pipe in the component view
var/** @type {?} */compViewExpr=VIEW_VAR$1;var/** @type {?} */compBuilder=this;while(compBuilder.parent){compBuilder=compBuilder.parent;compViewExpr=compViewExpr.prop('parent');}var/** @type {?} */pipeNodeIndex=compBuilder.purePipeNodeIndices[name];var/** @type {?} */pipeValueExpr=importExpr(createIdentifier(Identifiers.nodeValue)).callFn([compViewExpr,literal(pipeNodeIndex)]);return function(args){return callUnwrapValue(callCheckStmt(nodeIndex,[pipeValueExpr].concat(args)));};}else{var/** @type {?} */_nodeIndex=this._createPipe(pipe);var/** @type {?} */nodeValueExpr=importExpr(createIdentifier(Identifiers.nodeValue)).callFn([VIEW_VAR$1,literal(_nodeIndex)]);return function(args){return callUnwrapValue(nodeValueExpr.callMethod('transform',args));};}}/**
     * @param {?} name
     * @return {?}
     */},{key:'_findPipe',value:function _findPipe(name){return this.usedPipes.find(function(pipeSummary){return pipeSummary.name===name;});}/**
     * @param {?} pipe
     * @return {?}
     */},{key:'_createPipe',value:function _createPipe(pipe){var/** @type {?} */nodeIndex=this.nodeDefs.length;var/** @type {?} */flags=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_114" /* ɵNodeFlags */].None;pipe.type.lifecycleHooks.forEach(function(lifecycleHook){// for pipes, we only support ngOnDestroy
if(lifecycleHook===__WEBPACK_IMPORTED_MODULE_0__angular_core__["_106" /* ɵLifecycleHooks */].OnDestroy){flags|=lifecycleHookToNodeFlag(lifecycleHook);}});var/** @type {?} */depExprs=pipe.type.diDeps.map(depDef);// function pipeDef(
//   flags: NodeFlags, ctor: any, deps: ([DepFlags, any] | any)[]): NodeDef
var/** @type {?} */nodeDef=function nodeDef(){return importExpr(createIdentifier(Identifiers.pipeDef)).callFn([literal(flags),importExpr(pipe.type),literalArr(depExprs)]);};this.nodeDefs.push(nodeDef);return nodeIndex;}/**
     * @param {?} nodeIndex
     * @param {?} expressions
     * @param {?} target
     * @return {?}
     */},{key:'_addUpdateExpressions',value:function _addUpdateExpressions(nodeIndex,expressions,target){var _this219=this;var/** @type {?} */transformedExpressions=expressions.map(function(_ref37){var context=_ref37.context,value=_ref37.value;if(value instanceof ASTWithSource){value=value.ast;}return{context:context,value:convertPropertyBindingBuiltins(_this219,value)};});target.push({nodeIndex:nodeIndex,expressions:transformedExpressions});}/**
     * @param {?} nodeIndex
     * @param {?} handlers
     * @return {?}
     */},{key:'_createElementHandleEventFn',value:function _createElementHandleEventFn(nodeIndex,handlers){var _this220=this;var/** @type {?} */handleEventStmts=[];var/** @type {?} */handleEventBindingCount=0;handlers.forEach(function(_ref38){var context=_ref38.context,eventAst=_ref38.eventAst,dirAst=_ref38.dirAst;var/** @type {?} */bindingId=''+handleEventBindingCount++;var/** @type {?} */nameResolver=context===COMP_VAR?_this220:null;var/** @type {?} */expression=eventAst.handler instanceof ASTWithSource?eventAst.handler.ast:eventAst.handler;var _convertActionBinding=convertActionBinding(nameResolver,context,expression,bindingId),stmts=_convertActionBinding.stmts,allowDefault=_convertActionBinding.allowDefault;var/** @type {?} */trueStmts=stmts;if(allowDefault){trueStmts.push(ALLOW_DEFAULT_VAR.set(allowDefault.and(ALLOW_DEFAULT_VAR)).toStmt());}var _elementEventNameAndT3=elementEventNameAndTarget(eventAst,dirAst),eventTarget=_elementEventNameAndT3.target,eventName=_elementEventNameAndT3.name;var/** @type {?} */fullEventName=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_116" /* ɵelementEventFullName */])(eventTarget,eventName);handleEventStmts.push(new IfStmt(literal(fullEventName).identical(EVENT_NAME_VAR$1),trueStmts));});var/** @type {?} */handleEventFn=void 0;if(handleEventStmts.length>0){var/** @type {?} */preStmts=[ALLOW_DEFAULT_VAR.set(literal(true)).toDeclStmt(BOOL_TYPE)];if(!this.component.isHost){preStmts.push(COMP_VAR.set(VIEW_VAR$1.prop('component')).toDeclStmt(this.compType));}handleEventFn=fn([new FnParam(VIEW_VAR$1.name,INFERRED_TYPE),new FnParam(EVENT_NAME_VAR$1.name,INFERRED_TYPE),new FnParam(EventHandlerVars.event.name,INFERRED_TYPE)],[].concat(preStmts,handleEventStmts,[new ReturnStatement(ALLOW_DEFAULT_VAR)]),INFERRED_TYPE);}else{handleEventFn=NULL_EXPR;}return handleEventFn;}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitDirective',value:function visitDirective(ast,context){}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitDirectiveProperty',value:function visitDirectiveProperty(ast,context){}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitReference',value:function visitReference(ast,context){}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitVariable',value:function visitVariable(ast,context){}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitEvent',value:function visitEvent(ast,context){}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitElementProperty',value:function visitElementProperty(ast,context){}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitAttr',value:function visitAttr(ast,context){}},{key:'viewName',get:function get(){return viewClassName(this.component.type.reference,this.embeddedViewIndex);}}]);return ViewBuilder;}();/**
 * @param {?} providerAst
 * @return {?}
 */function providerDef(providerAst){return providerAst.multiProvider?multiProviderDef(providerAst.providers):singleProviderDef(providerAst.providers[0]);}/**
 * @param {?} providers
 * @return {?}
 */function multiProviderDef(providers){var/** @type {?} */allDepDefs=[];var/** @type {?} */allParams=[];var/** @type {?} */exprs=providers.map(function(provider,providerIndex){var/** @type {?} */expr=void 0;if(provider.useClass){var/** @type {?} */depExprs=convertDeps(providerIndex,provider.deps||provider.useClass.diDeps);expr=importExpr(provider.useClass).instantiate(depExprs);}else if(provider.useFactory){var/** @type {?} */_depExprs=convertDeps(providerIndex,provider.deps||provider.useFactory.diDeps);expr=importExpr(provider.useFactory).callFn(_depExprs);}else if(provider.useExisting){var/** @type {?} */_depExprs2=convertDeps(providerIndex,[{token:provider.useExisting}]);expr=_depExprs2[0];}else{expr=convertValueToOutputAst(provider.useValue);}return expr;});var/** @type {?} */providerExpr=fn(allParams,[new ReturnStatement(literalArr(exprs))],INFERRED_TYPE);return{providerExpr:providerExpr,providerType:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_118" /* ɵProviderType */].Factory,depsExpr:literalArr(allDepDefs)};/**
     * @param {?} providerIndex
     * @param {?} deps
     * @return {?}
     */function convertDeps(providerIndex,deps){return deps.map(function(dep,depIndex){var/** @type {?} */paramName='p'+providerIndex+'_'+depIndex;allParams.push(new FnParam(paramName,DYNAMIC_TYPE));allDepDefs.push(depDef(dep));return variable(paramName);});}}/**
 * @param {?} providerMeta
 * @return {?}
 */function singleProviderDef(providerMeta){var/** @type {?} */providerExpr=void 0;var/** @type {?} */providerType=void 0;var/** @type {?} */deps=void 0;if(providerMeta.useClass){providerExpr=importExpr(providerMeta.useClass);providerType=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_118" /* ɵProviderType */].Class;deps=providerMeta.deps||providerMeta.useClass.diDeps;}else if(providerMeta.useFactory){providerExpr=importExpr(providerMeta.useFactory);providerType=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_118" /* ɵProviderType */].Factory;deps=providerMeta.deps||providerMeta.useFactory.diDeps;}else if(providerMeta.useExisting){providerExpr=NULL_EXPR;providerType=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_118" /* ɵProviderType */].UseExisting;deps=[{token:providerMeta.useExisting}];}else{providerExpr=convertValueToOutputAst(providerMeta.useValue);providerType=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_118" /* ɵProviderType */].Value;deps=[];}var/** @type {?} */depsExpr=literalArr(deps.map(function(dep){return depDef(dep);}));return{providerExpr:providerExpr,providerType:providerType,depsExpr:depsExpr};}/**
 * @param {?} tokenMeta
 * @return {?}
 */function tokenExpr(tokenMeta){return tokenMeta.identifier?importExpr(tokenMeta.identifier):literal(tokenMeta.value);}/**
 * @param {?} dep
 * @return {?}
 */function depDef(dep){// Note: the following fields have already been normalized out by provider_analyzer:
// - isAttribute, isSelf, isHost
var/** @type {?} */expr=dep.isValue?convertValueToOutputAst(dep.value):tokenExpr(dep.token);var/** @type {?} */flags=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_119" /* ɵDepFlags */].None;if(dep.isSkipSelf){flags|=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_119" /* ɵDepFlags */].SkipSelf;}if(dep.isOptional){flags|=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_119" /* ɵDepFlags */].Optional;}if(dep.isValue){flags|=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_119" /* ɵDepFlags */].Value;}return flags===__WEBPACK_IMPORTED_MODULE_0__angular_core__["_119" /* ɵDepFlags */].None?expr:literalArr([literal(flags),expr]);}/**
 * @param {?} ast
 * @return {?}
 */function needsAdditionalRootNode(ast){if(ast instanceof EmbeddedTemplateAst){return ast.hasViewContainer;}if(ast instanceof ElementAst){if(ast.name===NG_CONTAINER_TAG$1&&ast.children.length){return needsAdditionalRootNode(ast.children[ast.children.length-1]);}return ast.hasViewContainer;}return ast instanceof NgContentAst;}/**
 * @param {?} lifecycleHook
 * @return {?}
 */function lifecycleHookToNodeFlag(lifecycleHook){var/** @type {?} */nodeFlag=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_114" /* ɵNodeFlags */].None;switch(lifecycleHook){case __WEBPACK_IMPORTED_MODULE_0__angular_core__["_106" /* ɵLifecycleHooks */].AfterContentChecked:nodeFlag=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_114" /* ɵNodeFlags */].AfterContentChecked;break;case __WEBPACK_IMPORTED_MODULE_0__angular_core__["_106" /* ɵLifecycleHooks */].AfterContentInit:nodeFlag=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_114" /* ɵNodeFlags */].AfterContentInit;break;case __WEBPACK_IMPORTED_MODULE_0__angular_core__["_106" /* ɵLifecycleHooks */].AfterViewChecked:nodeFlag=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_114" /* ɵNodeFlags */].AfterViewChecked;break;case __WEBPACK_IMPORTED_MODULE_0__angular_core__["_106" /* ɵLifecycleHooks */].AfterViewInit:nodeFlag=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_114" /* ɵNodeFlags */].AfterViewInit;break;case __WEBPACK_IMPORTED_MODULE_0__angular_core__["_106" /* ɵLifecycleHooks */].DoCheck:nodeFlag=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_114" /* ɵNodeFlags */].DoCheck;break;case __WEBPACK_IMPORTED_MODULE_0__angular_core__["_106" /* ɵLifecycleHooks */].OnChanges:nodeFlag=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_114" /* ɵNodeFlags */].OnChanges;break;case __WEBPACK_IMPORTED_MODULE_0__angular_core__["_106" /* ɵLifecycleHooks */].OnDestroy:nodeFlag=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_114" /* ɵNodeFlags */].OnDestroy;break;case __WEBPACK_IMPORTED_MODULE_0__angular_core__["_106" /* ɵLifecycleHooks */].OnInit:nodeFlag=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_114" /* ɵNodeFlags */].OnInit;break;}return nodeFlag;}/**
 * @param {?} inputAsts
 * @param {?} dirAst
 * @return {?}
 */function elementBindingDefs(inputAsts,dirAst){return inputAsts.map(function(inputAst){switch(inputAst.type){case PropertyBindingType.Attribute:return literalArr([literal(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_120" /* ɵBindingType */].ElementAttribute),literal(inputAst.name),literal(inputAst.securityContext)]);case PropertyBindingType.Property:return literalArr([literal(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_120" /* ɵBindingType */].ElementProperty),literal(inputAst.name),literal(inputAst.securityContext)]);case PropertyBindingType.Animation:var/** @type {?} */bindingType=dirAst&&dirAst.directive.isComponent?__WEBPACK_IMPORTED_MODULE_0__angular_core__["_120" /* ɵBindingType */].ComponentHostProperty:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_120" /* ɵBindingType */].ElementProperty;return literalArr([literal(bindingType),literal('@'+inputAst.name),literal(inputAst.securityContext)]);case PropertyBindingType.Class:return literalArr([literal(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_120" /* ɵBindingType */].ElementClass),literal(inputAst.name)]);case PropertyBindingType.Style:return literalArr([literal(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_120" /* ɵBindingType */].ElementStyle),literal(inputAst.name),literal(inputAst.unit)]);}});}/**
 * @param {?} elementAst
 * @return {?}
 */function fixedAttrsDef(elementAst){var/** @type {?} */mapResult=Object.create(null);elementAst.attrs.forEach(function(attrAst){mapResult[attrAst.name]=attrAst.value;});elementAst.directives.forEach(function(dirAst){Object.keys(dirAst.directive.hostAttributes).forEach(function(name){var/** @type {?} */value=dirAst.directive.hostAttributes[name];var/** @type {?} */prevValue=mapResult[name];mapResult[name]=prevValue!=null?mergeAttributeValue$1(name,prevValue,value):value;});});var/** @type {?} */mapEntries=[];// Note: We need to sort to get a defined output order
// for tests and for caching generated artifacts...
return literalArr(Object.keys(mapResult).sort().map(function(attrName){return literalArr([literal(attrName),literal(mapResult[attrName])]);}));}/**
 * @param {?} attrName
 * @param {?} attrValue1
 * @param {?} attrValue2
 * @return {?}
 */function mergeAttributeValue$1(attrName,attrValue1,attrValue2){if(attrName==CLASS_ATTR$2||attrName==STYLE_ATTR$1){return attrValue1+' '+attrValue2;}else{return attrValue2;}}/**
 * @param {?} nodeIndex
 * @param {?} exprs
 * @return {?}
 */function callCheckStmt(nodeIndex,exprs){if(exprs.length>10){return CHECK_VAR.callFn([VIEW_VAR$1,literal(nodeIndex),literal(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_121" /* ɵArgumentType */].Dynamic),literalArr(exprs)]);}else{return CHECK_VAR.callFn([VIEW_VAR$1,literal(nodeIndex),literal(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_121" /* ɵArgumentType */].Inline)].concat(_toConsumableArray(exprs)));}}/**
 * @param {?} expr
 * @return {?}
 */function callUnwrapValue(expr){return importExpr(createIdentifier(Identifiers.unwrapValue)).callFn([expr]);}/**
 * @param {?} nodes
 * @param {?=} result
 * @return {?}
 */function findStaticQueryIds(nodes){var result=arguments.length>1&&arguments[1]!==undefined?arguments[1]:new Map();nodes.forEach(function(node){var/** @type {?} */staticQueryIds=new Set();var/** @type {?} */dynamicQueryIds=new Set();var/** @type {?} */queryMatches=void 0;if(node instanceof ElementAst){findStaticQueryIds(node.children,result);node.children.forEach(function(child){var/** @type {?} */childData=result.get(child);childData.staticQueryIds.forEach(function(queryId){return staticQueryIds.add(queryId);});childData.dynamicQueryIds.forEach(function(queryId){return dynamicQueryIds.add(queryId);});});queryMatches=node.queryMatches;}else if(node instanceof EmbeddedTemplateAst){findStaticQueryIds(node.children,result);node.children.forEach(function(child){var/** @type {?} */childData=result.get(child);childData.staticQueryIds.forEach(function(queryId){return dynamicQueryIds.add(queryId);});childData.dynamicQueryIds.forEach(function(queryId){return dynamicQueryIds.add(queryId);});});queryMatches=node.queryMatches;}if(queryMatches){queryMatches.forEach(function(match){return staticQueryIds.add(match.queryId);});}dynamicQueryIds.forEach(function(queryId){return staticQueryIds.delete(queryId);});result.set(node,{staticQueryIds:staticQueryIds,dynamicQueryIds:dynamicQueryIds});});return result;}/**
 * @param {?} nodeStaticQueryIds
 * @return {?}
 */function staticViewQueryIds(nodeStaticQueryIds){var/** @type {?} */staticQueryIds=new Set();var/** @type {?} */dynamicQueryIds=new Set();Array.from(nodeStaticQueryIds.values()).forEach(function(entry){entry.staticQueryIds.forEach(function(queryId){return staticQueryIds.add(queryId);});entry.dynamicQueryIds.forEach(function(queryId){return dynamicQueryIds.add(queryId);});});dynamicQueryIds.forEach(function(queryId){return staticQueryIds.delete(queryId);});return{staticQueryIds:staticQueryIds,dynamicQueryIds:dynamicQueryIds};}/**
 * @param {?} directives
 * @return {?}
 */function createComponentFactoryResolver(directives){var/** @type {?} */componentDirMeta=directives.find(function(dirAst){return dirAst.directive.isComponent;});if(componentDirMeta&&componentDirMeta.directive.entryComponents.length){var/** @type {?} */entryComponentFactories=componentDirMeta.directive.entryComponents.map(function(entryComponent){return importExpr({reference:entryComponent.componentFactory});});var/** @type {?} */cfrExpr=importExpr(createIdentifier(Identifiers.CodegenComponentFactoryResolver)).instantiate([literalArr(entryComponentFactories)]);var/** @type {?} */token=createIdentifierToken(Identifiers.ComponentFactoryResolver);var/** @type {?} */classMeta={diDeps:[{isValue:true,value:literalArr(entryComponentFactories)},{token:token,isSkipSelf:true,isOptional:true}],lifecycleHooks:[],reference:resolveIdentifier(Identifiers.CodegenComponentFactoryResolver)};return new ProviderAst(token,false,true,[{token:token,multi:false,useClass:classMeta}],ProviderAstType.PrivateService,[],componentDirMeta.sourceSpan);}return null;}/**
 * @param {?} eventAst
 * @param {?} dirAst
 * @return {?}
 */function elementEventNameAndTarget(eventAst,dirAst){if(eventAst.isAnimation){return{name:'@'+eventAst.name+'.'+eventAst.phase,target:dirAst&&dirAst.directive.isComponent?'component':null};}else{return eventAst;}}var AnimationEntryCompileResult=/**
     * @param {?} name
     * @param {?} statements
     * @param {?} fnExp
     */function AnimationEntryCompileResult(name,statements,fnExp){_classCallCheck(this,AnimationEntryCompileResult);this.name=name;this.statements=statements;this.fnExp=fnExp;};var AnimationCompiler=function(){function AnimationCompiler(){_classCallCheck(this,AnimationCompiler);}_createClass(AnimationCompiler,[{key:'compile',/**
     * @param {?} factoryNamePrefix
     * @param {?} parsedAnimations
     * @return {?}
     */value:function compile(factoryNamePrefix,parsedAnimations){return parsedAnimations.map(function(entry){var/** @type {?} */factoryName=factoryNamePrefix+'_'+entry.name;var/** @type {?} */visitor=new _AnimationBuilder(entry.name,factoryName);return visitor.build(entry);});}}]);return AnimationCompiler;}();var/** @type {?} */_ANIMATION_FACTORY_ELEMENT_VAR=variable('element');var/** @type {?} */_ANIMATION_DEFAULT_STATE_VAR=variable('defaultStateStyles');var/** @type {?} */_ANIMATION_FACTORY_VIEW_VAR=variable('view');var/** @type {?} */_ANIMATION_FACTORY_VIEW_CONTEXT=_ANIMATION_FACTORY_VIEW_VAR.prop('animationContext');var/** @type {?} */_ANIMATION_FACTORY_RENDERER_VAR=_ANIMATION_FACTORY_VIEW_VAR.prop('renderer');var/** @type {?} */_ANIMATION_CURRENT_STATE_VAR=variable('currentState');var/** @type {?} */_ANIMATION_NEXT_STATE_VAR=variable('nextState');var/** @type {?} */_ANIMATION_PLAYER_VAR=variable('player');var/** @type {?} */_ANIMATION_TIME_VAR=variable('totalTime');var/** @type {?} */_ANIMATION_START_STATE_STYLES_VAR=variable('startStateStyles');var/** @type {?} */_ANIMATION_END_STATE_STYLES_VAR=variable('endStateStyles');var/** @type {?} */_ANIMATION_COLLECTED_STYLES=variable('collectedStyles');var/** @type {?} */_PREVIOUS_ANIMATION_PLAYERS=variable('previousPlayers');var/** @type {?} */_EMPTY_MAP=literalMap([]);var/** @type {?} */_EMPTY_ARRAY=literalArr([]);var _AnimationBuilder=function(){/**
     * @param {?} animationName
     * @param {?} factoryName
     */function _AnimationBuilder(animationName,factoryName){_classCallCheck(this,_AnimationBuilder);this.animationName=animationName;this._fnVarName=factoryName+'_factory';this._statesMapVarName=factoryName+'_states';this._statesMapVar=variable(this._statesMapVarName);}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */_createClass(_AnimationBuilder,[{key:'visitAnimationStyles',value:function visitAnimationStyles(ast,context){var/** @type {?} */stylesArr=[];if(context.isExpectingFirstStyleStep){stylesArr.push(_ANIMATION_START_STATE_STYLES_VAR);context.isExpectingFirstStyleStep=false;}ast.styles.forEach(function(entry){var/** @type {?} */entries=Object.keys(entry).map(function(key){return[key,literal(entry[key])];});stylesArr.push(literalMap(entries,null,true));});return importExpr(createIdentifier(Identifiers.AnimationStyles)).instantiate([importExpr(createIdentifier(Identifiers.collectAndResolveStyles)).callFn([_ANIMATION_COLLECTED_STYLES,literalArr(stylesArr)])]);}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitAnimationKeyframe',value:function visitAnimationKeyframe(ast,context){return importExpr(createIdentifier(Identifiers.AnimationKeyframe)).instantiate([literal(ast.offset),ast.styles.visit(this,context)]);}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitAnimationStep',value:function visitAnimationStep(ast,context){var _this221=this;if(context.endStateAnimateStep===ast){return this._visitEndStateAnimation(ast,context);}var/** @type {?} */startingStylesExpr=ast.startingStyles.visit(this,context);var/** @type {?} */keyframeExpressions=ast.keyframes.map(function(keyframeEntry){return keyframeEntry.visit(_this221,context);});return this._callAnimateMethod(ast,startingStylesExpr,literalArr(keyframeExpressions),context);}/**
     * \@internal
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'_visitEndStateAnimation',value:function _visitEndStateAnimation(ast,context){var _this222=this;var/** @type {?} */startingStylesExpr=ast.startingStyles.visit(this,context);var/** @type {?} */keyframeExpressions=ast.keyframes.map(function(keyframe){return keyframe.visit(_this222,context);});var/** @type {?} */keyframesExpr=importExpr(createIdentifier(Identifiers.balanceAnimationKeyframes)).callFn([_ANIMATION_COLLECTED_STYLES,_ANIMATION_END_STATE_STYLES_VAR,literalArr(keyframeExpressions)]);return this._callAnimateMethod(ast,startingStylesExpr,keyframesExpr,context);}/**
     * \@internal
     * @param {?} ast
     * @param {?} startingStylesExpr
     * @param {?} keyframesExpr
     * @param {?} context
     * @return {?}
     */},{key:'_callAnimateMethod',value:function _callAnimateMethod(ast,startingStylesExpr,keyframesExpr,context){var/** @type {?} */previousStylesValue=_EMPTY_ARRAY;if(context.isExpectingFirstAnimateStep){previousStylesValue=_PREVIOUS_ANIMATION_PLAYERS;context.isExpectingFirstAnimateStep=false;}context.totalTransitionTime+=ast.duration+ast.delay;return _ANIMATION_FACTORY_RENDERER_VAR.callMethod('animate',[_ANIMATION_FACTORY_ELEMENT_VAR,startingStylesExpr,keyframesExpr,literal(ast.duration),literal(ast.delay),literal(ast.easing),previousStylesValue]);}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitAnimationSequence',value:function visitAnimationSequence(ast,context){var _this223=this;var/** @type {?} */playerExprs=ast.steps.map(function(step){return step.visit(_this223,context);});return importExpr(createIdentifier(Identifiers.AnimationSequencePlayer)).instantiate([literalArr(playerExprs)]);}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitAnimationGroup',value:function visitAnimationGroup(ast,context){var _this224=this;var/** @type {?} */playerExprs=ast.steps.map(function(step){return step.visit(_this224,context);});return importExpr(createIdentifier(Identifiers.AnimationGroupPlayer)).instantiate([literalArr(playerExprs)]);}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitAnimationStateDeclaration',value:function visitAnimationStateDeclaration(ast,context){var/** @type {?} */flatStyles={};_getStylesArray(ast).forEach(function(entry){Object.keys(entry).forEach(function(key){flatStyles[key]=entry[key];});});context.stateMap.registerState(ast.stateName,flatStyles);}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitAnimationStateTransition',value:function visitAnimationStateTransition(ast,context){var/** @type {?} */steps=ast.animation.steps;var/** @type {?} */lastStep=steps[steps.length-1];if(_isEndStateAnimateStep(lastStep)){context.endStateAnimateStep=lastStep;}context.totalTransitionTime=0;context.isExpectingFirstStyleStep=true;context.isExpectingFirstAnimateStep=true;var/** @type {?} */stateChangePreconditions=[];ast.stateChanges.forEach(function(stateChange){if(stateChange instanceof AnimationStateTransitionFnExpression){stateChangePreconditions.push(importExpr({reference:stateChange.fn}).callFn([_ANIMATION_CURRENT_STATE_VAR,_ANIMATION_NEXT_STATE_VAR]));}else{stateChangePreconditions.push(_compareToAnimationStateExpr(_ANIMATION_CURRENT_STATE_VAR,stateChange.fromState).and(_compareToAnimationStateExpr(_ANIMATION_NEXT_STATE_VAR,stateChange.toState)));if(stateChange.fromState!=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_99" /* ɵANY_STATE */]){context.stateMap.registerState(stateChange.fromState);}if(stateChange.toState!=__WEBPACK_IMPORTED_MODULE_0__angular_core__["_99" /* ɵANY_STATE */]){context.stateMap.registerState(stateChange.toState);}}});var/** @type {?} */animationPlayerExpr=ast.animation.visit(this,context);var/** @type {?} */reducedStateChangesPrecondition=stateChangePreconditions.reduce(function(a,b){return a.or(b);});var/** @type {?} */precondition=_ANIMATION_PLAYER_VAR.equals(NULL_EXPR).and(reducedStateChangesPrecondition);var/** @type {?} */animationStmt=_ANIMATION_PLAYER_VAR.set(animationPlayerExpr).toStmt();var/** @type {?} */totalTimeStmt=_ANIMATION_TIME_VAR.set(literal(context.totalTransitionTime)).toStmt();return new IfStmt(precondition,[animationStmt,totalTimeStmt]);}/**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */},{key:'visitAnimationEntry',value:function visitAnimationEntry(ast,context){var _this225=this;// visit each of the declarations first to build the context state map
ast.stateDeclarations.forEach(function(def){return def.visit(_this225,context);});// this should always be defined even if the user overrides it
context.stateMap.registerState(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_122" /* ɵDEFAULT_STATE */],{});var/** @type {?} */statements=[];statements.push(_PREVIOUS_ANIMATION_PLAYERS.set(_ANIMATION_FACTORY_VIEW_CONTEXT.callMethod('getAnimationPlayers',[_ANIMATION_FACTORY_ELEMENT_VAR,_ANIMATION_NEXT_STATE_VAR.equals(literal(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_105" /* ɵEMPTY_STATE */])).conditional(NULL_EXPR,literal(this.animationName))])).toDeclStmt());statements.push(_ANIMATION_COLLECTED_STYLES.set(_EMPTY_MAP).toDeclStmt());statements.push(_ANIMATION_PLAYER_VAR.set(NULL_EXPR).toDeclStmt());statements.push(_ANIMATION_TIME_VAR.set(literal(0)).toDeclStmt());statements.push(_ANIMATION_DEFAULT_STATE_VAR.set(this._statesMapVar.key(literal(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_122" /* ɵDEFAULT_STATE */]))).toDeclStmt());statements.push(_ANIMATION_START_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_CURRENT_STATE_VAR)).toDeclStmt());statements.push(new IfStmt(_ANIMATION_START_STATE_STYLES_VAR.equals(NULL_EXPR),[_ANIMATION_START_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()]));statements.push(_ANIMATION_END_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_NEXT_STATE_VAR)).toDeclStmt());statements.push(new IfStmt(_ANIMATION_END_STATE_STYLES_VAR.equals(NULL_EXPR),[_ANIMATION_END_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()]));var/** @type {?} */RENDER_STYLES_FN=importExpr(createIdentifier(Identifiers.renderStyles));ast.stateTransitions.forEach(function(transAst){return statements.push(transAst.visit(_this225,context));});// this check ensures that the animation factory always returns a player
// so that the onDone callback can be used for tracking
statements.push(new IfStmt(_ANIMATION_PLAYER_VAR.equals(NULL_EXPR),[_ANIMATION_PLAYER_VAR.set(importExpr(createIdentifier(Identifiers.NoOpAnimationPlayer)).instantiate([])).toStmt()]));// once complete we want to apply the styles on the element
// since the destination state's values should persist once
// the animation sequence has completed.
statements.push(_ANIMATION_PLAYER_VAR.callMethod('onDone',[fn([],[_ANIMATION_PLAYER_VAR.callMethod('destroy',[]).toStmt(),RENDER_STYLES_FN.callFn([_ANIMATION_FACTORY_ELEMENT_VAR,_ANIMATION_FACTORY_RENDERER_VAR,importExpr(createIdentifier(Identifiers.prepareFinalAnimationStyles)).callFn([_ANIMATION_START_STATE_STYLES_VAR,_ANIMATION_END_STATE_STYLES_VAR])]).toStmt()])]).toStmt());statements.push(importExpr(createIdentifier(Identifiers.AnimationSequencePlayer)).instantiate([_PREVIOUS_ANIMATION_PLAYERS]).callMethod('destroy',[]).toStmt());// before we start any animation we want to clear out the starting
// styles from the element's style property (since they were placed
// there at the end of the last animation
statements.push(RENDER_STYLES_FN.callFn([_ANIMATION_FACTORY_ELEMENT_VAR,_ANIMATION_FACTORY_RENDERER_VAR,importExpr(createIdentifier(Identifiers.clearStyles)).callFn([_ANIMATION_START_STATE_STYLES_VAR])]).toStmt());statements.push(_ANIMATION_FACTORY_VIEW_CONTEXT.callMethod('queueAnimation',[_ANIMATION_FACTORY_ELEMENT_VAR,literal(this.animationName),_ANIMATION_PLAYER_VAR]).toStmt());statements.push(new ReturnStatement(importExpr(createIdentifier(Identifiers.AnimationTransition)).instantiate([_ANIMATION_PLAYER_VAR,_ANIMATION_FACTORY_ELEMENT_VAR,literal(this.animationName),_ANIMATION_CURRENT_STATE_VAR,_ANIMATION_NEXT_STATE_VAR,_ANIMATION_TIME_VAR])));return fn([new FnParam(_ANIMATION_FACTORY_VIEW_VAR.name,importType(createIdentifier(Identifiers.AppView),[DYNAMIC_TYPE])),new FnParam(_ANIMATION_FACTORY_ELEMENT_VAR.name,DYNAMIC_TYPE),new FnParam(_ANIMATION_CURRENT_STATE_VAR.name,DYNAMIC_TYPE),new FnParam(_ANIMATION_NEXT_STATE_VAR.name,DYNAMIC_TYPE)],statements,importType(createIdentifier(Identifiers.AnimationTransition)));}/**
     * @param {?} ast
     * @return {?}
     */},{key:'build',value:function build(ast){var/** @type {?} */context=new _AnimationBuilderContext();var/** @type {?} */fnStatement=ast.visit(this,context).toDeclStmt(this._fnVarName);var/** @type {?} */fnVariable=variable(this._fnVarName);var/** @type {?} */lookupMap=[];Object.keys(context.stateMap.states).forEach(function(stateName){var/** @type {?} */value=context.stateMap.states[stateName];var/** @type {?} */variableValue=_EMPTY_MAP;if(isPresent(value)){var/** @type {?} */styleMap=[];Object.keys(value).forEach(function(key){styleMap.push([key,literal(value[key])]);});variableValue=literalMap(styleMap,null,true);}lookupMap.push([stateName,variableValue]);});var/** @type {?} */compiledStatesMapStmt=this._statesMapVar.set(literalMap(lookupMap,null,true)).toDeclStmt();var/** @type {?} */statements=[compiledStatesMapStmt,fnStatement];return new AnimationEntryCompileResult(this.animationName,statements,fnVariable);}}]);return _AnimationBuilder;}();var _AnimationBuilderContext=function _AnimationBuilderContext(){_classCallCheck(this,_AnimationBuilderContext);this.stateMap=new _AnimationBuilderStateMap();this.endStateAnimateStep=null;this.isExpectingFirstStyleStep=false;this.isExpectingFirstAnimateStep=false;this.totalTransitionTime=0;};var _AnimationBuilderStateMap=function(){function _AnimationBuilderStateMap(){_classCallCheck(this,_AnimationBuilderStateMap);this._states={};}/**
     * @return {?}
     */_createClass(_AnimationBuilderStateMap,[{key:'registerState',/**
     * @param {?} name
     * @param {?=} value
     * @return {?}
     */value:function registerState(name){var value=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var/** @type {?} */existingEntry=this._states[name];if(!existingEntry){this._states[name]=value;}}},{key:'states',get:function get(){return this._states;}}]);return _AnimationBuilderStateMap;}();/**
 * @param {?} value
 * @param {?} animationState
 * @return {?}
 */function _compareToAnimationStateExpr(value,animationState){var/** @type {?} */emptyStateLiteral=literal(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_105" /* ɵEMPTY_STATE */]);switch(animationState){case __WEBPACK_IMPORTED_MODULE_0__angular_core__["_105" /* ɵEMPTY_STATE */]:return value.equals(emptyStateLiteral);case __WEBPACK_IMPORTED_MODULE_0__angular_core__["_99" /* ɵANY_STATE */]:return literal(true);default:return value.equals(literal(animationState));}}/**
 * @param {?} step
 * @return {?}
 */function _isEndStateAnimateStep(step){// the final animation step is characterized by having only TWO
// keyframe values and it must have zero styles for both keyframes
if(step instanceof AnimationStepAst&&step.duration>0&&step.keyframes.length==2){var/** @type {?} */styles1=_getStylesArray(step.keyframes[0])[0];var/** @type {?} */styles2=_getStylesArray(step.keyframes[1])[0];return Object.keys(styles1).length===0&&Object.keys(styles2).length===0;}return false;}/**
 * @param {?} obj
 * @return {?}
 */function _getStylesArray(obj){return obj.styles.styles;}/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */var GeneratedFile=/**
     * @param {?} srcFileUrl
     * @param {?} genFileUrl
     * @param {?} source
     */function GeneratedFile(srcFileUrl,genFileUrl,source){_classCallCheck(this,GeneratedFile);this.srcFileUrl=srcFileUrl;this.genFileUrl=genFileUrl;this.source=source;};/**
 * @param {?} summaryResolver
 * @param {?} symbolResolver
 * @param {?} symbols
 * @param {?} types
 * @return {?}
 */function serializeSummaries(summaryResolver,symbolResolver,symbols,types){var/** @type {?} */serializer=new Serializer$1(symbolResolver,summaryResolver);// for symbols, we use everything except for the class metadata itself
// (we keep the statics though), as the class metadata is contained in the
// CompileTypeSummary.
symbols.forEach(function(resolvedSymbol){return serializer.addOrMergeSummary({symbol:resolvedSymbol.symbol,metadata:resolvedSymbol.metadata});});// Add summaries that are referenced by the given symbols (transitively)
// Note: the serializer.symbols array might be growing while
// we execute the loop!
for(var/** @type {?} */processedIndex=0;processedIndex<serializer.symbols.length;processedIndex++){var/** @type {?} */symbol=serializer.symbols[processedIndex];if(summaryResolver.isLibraryFile(symbol.filePath)){var/** @type {?} */summary=summaryResolver.resolveSummary(symbol);if(!summary){// some symbols might originate from a plain typescript library
// that just exported .d.ts and .metadata.json files, i.e. where no summary
// files were created.
var/** @type {?} */resolvedSymbol=symbolResolver.resolveSymbol(symbol);if(resolvedSymbol){summary={symbol:resolvedSymbol.symbol,metadata:resolvedSymbol.metadata};}}if(summary){serializer.addOrMergeSummary(summary);}}}// Add type summaries.
// Note: We don't add the summaries of all referenced symbols as for the ResolvedSymbols,
// as the type summaries already contain the transitive data that they require
// (in a minimal way).
types.forEach(function(typeSummary){serializer.addOrMergeSummary({symbol:typeSummary.type.reference,metadata:{__symbolic:'class'},type:typeSummary});if(typeSummary.summaryKind===CompileSummaryKind.NgModule){var/** @type {?} */ngModuleSummary=typeSummary;ngModuleSummary.exportedDirectives.concat(ngModuleSummary.exportedPipes).forEach(function(id){var/** @type {?} */symbol=id.reference;if(summaryResolver.isLibraryFile(symbol.filePath)){var/** @type {?} */_summary=summaryResolver.resolveSummary(symbol);if(_summary){serializer.addOrMergeSummary(_summary);}}});}});return serializer.serialize();}/**
 * @param {?} symbolCache
 * @param {?} json
 * @return {?}
 */function deserializeSummaries(symbolCache,json){var/** @type {?} */deserializer=new Deserializer(symbolCache);return deserializer.deserialize(json);}var Serializer$1=function(_ValueTransformer2){_inherits(Serializer$1,_ValueTransformer2);/**
     * @param {?} symbolResolver
     * @param {?} summaryResolver
     */function Serializer$1(symbolResolver,summaryResolver){_classCallCheck(this,Serializer$1);var _this226=_possibleConstructorReturn(this,(Serializer$1.__proto__||Object.getPrototypeOf(Serializer$1)).call(this));_this226.symbolResolver=symbolResolver;_this226.summaryResolver=summaryResolver;// Note: This only contains symbols without members.
_this226.symbols=[];_this226.indexBySymbol=new Map();_this226.processedSummaryBySymbol=new Map();_this226.processedSummaries=[];return _this226;}/**
     * @param {?} summary
     * @return {?}
     */_createClass(Serializer$1,[{key:'addOrMergeSummary',value:function addOrMergeSummary(summary){var/** @type {?} */symbolMeta=summary.metadata;if(symbolMeta&&symbolMeta.__symbolic==='class'){// For classes, we only keep their statics and arity, but not the metadata
// of the class itself as that has been captured already via other summaries
// (e.g. DirectiveSummary, ...).
symbolMeta={__symbolic:'class',statics:symbolMeta.statics,arity:symbolMeta.arity};}var/** @type {?} */processedSummary=this.processedSummaryBySymbol.get(summary.symbol);if(!processedSummary){processedSummary=this.processValue({symbol:summary.symbol});this.processedSummaries.push(processedSummary);this.processedSummaryBySymbol.set(summary.symbol,processedSummary);}// Note: == on purpose to compare with undefined!
if(processedSummary.metadata==null&&symbolMeta!=null){processedSummary.metadata=this.processValue(symbolMeta);}// Note: == on purpose to compare with undefined!
if(processedSummary.type==null&&summary.type!=null){processedSummary.type=this.processValue(summary.type);}}/**
     * @return {?}
     */},{key:'serialize',value:function serialize(){var _this227=this;var/** @type {?} */exportAs=[];var/** @type {?} */json=JSON.stringify({summaries:this.processedSummaries,symbols:this.symbols.map(function(symbol,index){symbol.assertNoMembers();var/** @type {?} */importAs=void 0;if(_this227.summaryResolver.isLibraryFile(symbol.filePath)){importAs=symbol.name+'_'+index;exportAs.push({symbol:symbol,exportAs:importAs});}return{__symbol:index,name:symbol.name,// We convert the source filenames tinto output filenames,
// as the generated summary file will be used when teh current
// compilation unit is used as a library
filePath:_this227.summaryResolver.getLibraryFileName(symbol.filePath),importAs:importAs};})});return{json:json,exportAs:exportAs};}/**
     * @param {?} value
     * @return {?}
     */},{key:'processValue',value:function processValue(value){return visitValue(value,this,null);}/**
     * @param {?} value
     * @param {?} context
     * @return {?}
     */},{key:'visitOther',value:function visitOther(value,context){if(value instanceof StaticSymbol){var/** @type {?} */baseSymbol=this.symbolResolver.getStaticSymbol(value.filePath,value.name);var/** @type {?} */index=this.indexBySymbol.get(baseSymbol);// Note: == on purpose to compare with undefined!
if(index==null){index=this.indexBySymbol.size;this.indexBySymbol.set(baseSymbol,index);this.symbols.push(baseSymbol);}return{__symbol:index,members:value.members};}}}]);return Serializer$1;}(ValueTransformer);var Deserializer=function(_ValueTransformer3){_inherits(Deserializer,_ValueTransformer3);/**
     * @param {?} symbolCache
     */function Deserializer(symbolCache){_classCallCheck(this,Deserializer);var _this228=_possibleConstructorReturn(this,(Deserializer.__proto__||Object.getPrototypeOf(Deserializer)).call(this));_this228.symbolCache=symbolCache;return _this228;}/**
     * @param {?} json
     * @return {?}
     */_createClass(Deserializer,[{key:'deserialize',value:function deserialize(json){var _this229=this;var/** @type {?} */data=JSON.parse(json);var/** @type {?} */importAs=[];this.symbols=[];data.symbols.forEach(function(serializedSymbol){var/** @type {?} */symbol=_this229.symbolCache.get(serializedSymbol.filePath,serializedSymbol.name);_this229.symbols.push(symbol);if(serializedSymbol.importAs){importAs.push({symbol:symbol,importAs:serializedSymbol.importAs});}});var/** @type {?} */summaries=visitValue(data.summaries,this,null);return{summaries:summaries,importAs:importAs};}/**
     * @param {?} map
     * @param {?} context
     * @return {?}
     */},{key:'visitStringMap',value:function visitStringMap(map,context){if('__symbol'in map){var/** @type {?} */baseSymbol=this.symbols[map['__symbol']];var/** @type {?} */members=map['members'];return members.length?this.symbolCache.get(baseSymbol.filePath,baseSymbol.name,members):baseSymbol;}else{return _get(Deserializer.prototype.__proto__||Object.getPrototypeOf(Deserializer.prototype),'visitStringMap',this).call(this,map,context);}}}]);return Deserializer;}(ValueTransformer);var AotCompiler=function(){/**
     * @param {?} _config
     * @param {?} _host
     * @param {?} _metadataResolver
     * @param {?} _templateParser
     * @param {?} _styleCompiler
     * @param {?} _viewCompiler
     * @param {?} _dirWrapperCompiler
     * @param {?} _ngModuleCompiler
     * @param {?} _outputEmitter
     * @param {?} _summaryResolver
     * @param {?} _localeId
     * @param {?} _translationFormat
     * @param {?} _animationParser
     * @param {?} _symbolResolver
     */function AotCompiler(_config,_host,_metadataResolver,_templateParser,_styleCompiler,_viewCompiler,_dirWrapperCompiler,_ngModuleCompiler,_outputEmitter,_summaryResolver,_localeId,_translationFormat,_animationParser,_symbolResolver){_classCallCheck(this,AotCompiler);this._config=_config;this._host=_host;this._metadataResolver=_metadataResolver;this._templateParser=_templateParser;this._styleCompiler=_styleCompiler;this._viewCompiler=_viewCompiler;this._dirWrapperCompiler=_dirWrapperCompiler;this._ngModuleCompiler=_ngModuleCompiler;this._outputEmitter=_outputEmitter;this._summaryResolver=_summaryResolver;this._localeId=_localeId;this._translationFormat=_translationFormat;this._animationParser=_animationParser;this._symbolResolver=_symbolResolver;this._animationCompiler=new AnimationCompiler();}/**
     * @return {?}
     */_createClass(AotCompiler,[{key:'clearCache',value:function clearCache(){this._metadataResolver.clearCache();}/**
     * @param {?} rootFiles
     * @return {?}
     */},{key:'compileAll',value:function compileAll(rootFiles){var _this230=this;var/** @type {?} */programSymbols=extractProgramSymbols(this._symbolResolver,rootFiles,this._host);var _analyzeAndValidateNg=analyzeAndValidateNgModules(programSymbols,this._host,this._metadataResolver),ngModuleByPipeOrDirective=_analyzeAndValidateNg.ngModuleByPipeOrDirective,files=_analyzeAndValidateNg.files,ngModules=_analyzeAndValidateNg.ngModules;return Promise.all(ngModules.map(function(ngModule){return _this230._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference,false);})).then(function(){var/** @type {?} */sourceModules=files.map(function(file){return _this230._compileSrcFile(file.srcUrl,ngModuleByPipeOrDirective,file.directives,file.pipes,file.ngModules,file.injectables);});return ListWrapper.flatten(sourceModules);});}/**
     * @param {?} srcFileUrl
     * @param {?} ngModuleByPipeOrDirective
     * @param {?} directives
     * @param {?} pipes
     * @param {?} ngModules
     * @param {?} injectables
     * @return {?}
     */},{key:'_compileSrcFile',value:function _compileSrcFile(srcFileUrl,ngModuleByPipeOrDirective,directives,pipes,ngModules,injectables){var _this231=this;var/** @type {?} */fileSuffix=splitTypescriptSuffix(srcFileUrl)[1];var/** @type {?} */statements=[];var/** @type {?} */exportedVars=[];var/** @type {?} */generatedFiles=[];generatedFiles.push(this._createSummary(srcFileUrl,directives,pipes,ngModules,injectables,statements,exportedVars));// compile all ng modules
exportedVars.push.apply(exportedVars,_toConsumableArray(ngModules.map(function(ngModuleType){return _this231._compileModule(ngModuleType,statements);})));// compile directive wrappers
if(!this._config.useViewEngine){exportedVars.push.apply(exportedVars,_toConsumableArray(directives.map(function(directiveType){return _this231._compileDirectiveWrapper(directiveType,statements);})));}// compile components
directives.forEach(function(dirType){var/** @type {?} */compMeta=_this231._metadataResolver.getDirectiveMetadata(/** @type {?} */dirType);if(!compMeta.isComponent){return Promise.resolve(null);}var/** @type {?} */ngModule=ngModuleByPipeOrDirective.get(dirType);if(!ngModule){throw new Error('Internal Error: cannot determine the module for component '+identifierName(compMeta.type)+'!');}_assertComponent(compMeta);// compile styles
var/** @type {?} */stylesCompileResults=_this231._styleCompiler.compileComponent(compMeta);stylesCompileResults.externalStylesheets.forEach(function(compiledStyleSheet){generatedFiles.push(_this231._codgenStyles(srcFileUrl,compiledStyleSheet,fileSuffix));});// compile components
var/** @type {?} */compViewVars=_this231._compileComponent(compMeta,ngModule,ngModule.transitiveModule.directives,stylesCompileResults.componentStylesheet,fileSuffix,statements);exportedVars.push(_this231._compileComponentFactory(compMeta,ngModule,fileSuffix,statements),compViewVars.viewClassVar,compViewVars.compRenderTypeVar);});if(statements.length>0){var/** @type {?} */srcModule=this._codegenSourceModule(srcFileUrl,ngfactoryFilePath(srcFileUrl),statements,exportedVars);generatedFiles.unshift(srcModule);}return generatedFiles;}/**
     * @param {?} srcFileUrl
     * @param {?} directives
     * @param {?} pipes
     * @param {?} ngModules
     * @param {?} injectables
     * @param {?} targetStatements
     * @param {?} targetExportedVars
     * @return {?}
     */},{key:'_createSummary',value:function _createSummary(srcFileUrl,directives,pipes,ngModules,injectables,targetStatements,targetExportedVars){var _this232=this;var/** @type {?} */symbolSummaries=this._symbolResolver.getSymbolsOf(srcFileUrl).map(function(symbol){return _this232._symbolResolver.resolveSymbol(symbol);});var/** @type {?} */typeSummaries=[].concat(_toConsumableArray(ngModules.map(function(ref){return _this232._metadataResolver.getNgModuleSummary(ref);})),_toConsumableArray(directives.map(function(ref){return _this232._metadataResolver.getDirectiveSummary(ref);})),_toConsumableArray(pipes.map(function(ref){return _this232._metadataResolver.getPipeSummary(ref);})),_toConsumableArray(injectables.map(function(ref){return _this232._metadataResolver.getInjectableSummary(ref);})));var _serializeSummaries=serializeSummaries(this._summaryResolver,this._symbolResolver,symbolSummaries,typeSummaries),json=_serializeSummaries.json,exportAs=_serializeSummaries.exportAs;exportAs.forEach(function(entry){targetStatements.push(variable(entry.exportAs).set(importExpr({reference:entry.symbol})).toDeclStmt());targetExportedVars.push(entry.exportAs);});return new GeneratedFile(srcFileUrl,summaryFileName(srcFileUrl),json);}/**
     * @param {?} ngModuleType
     * @param {?} targetStatements
     * @return {?}
     */},{key:'_compileModule',value:function _compileModule(ngModuleType,targetStatements){var/** @type {?} */ngModule=this._metadataResolver.getNgModuleMetadata(ngModuleType);var/** @type {?} */providers=[];if(this._localeId){providers.push({token:createIdentifierToken(Identifiers.LOCALE_ID),useValue:this._localeId});}if(this._translationFormat){providers.push({token:createIdentifierToken(Identifiers.TRANSLATIONS_FORMAT),useValue:this._translationFormat});}var/** @type {?} */appCompileResult=this._ngModuleCompiler.compile(ngModule,providers);targetStatements.push.apply(targetStatements,_toConsumableArray(appCompileResult.statements));return appCompileResult.ngModuleFactoryVar;}/**
     * @param {?} directiveType
     * @param {?} targetStatements
     * @return {?}
     */},{key:'_compileDirectiveWrapper',value:function _compileDirectiveWrapper(directiveType,targetStatements){var/** @type {?} */dirMeta=this._metadataResolver.getDirectiveMetadata(directiveType);var/** @type {?} */dirCompileResult=this._dirWrapperCompiler.compile(dirMeta);targetStatements.push.apply(targetStatements,_toConsumableArray(dirCompileResult.statements));return dirCompileResult.dirWrapperClassVar;}/**
     * @param {?} compMeta
     * @param {?} ngModule
     * @param {?} fileSuffix
     * @param {?} targetStatements
     * @return {?}
     */},{key:'_compileComponentFactory',value:function _compileComponentFactory(compMeta,ngModule,fileSuffix,targetStatements){var/** @type {?} */hostType=this._metadataResolver.getHostComponentType(compMeta.type.reference);var/** @type {?} */hostMeta=createHostComponentMeta(hostType,compMeta,this._metadataResolver.getHostComponentViewClass(hostType));var/** @type {?} */hostViewFactoryVar=this._compileComponent(hostMeta,ngModule,[compMeta.type],null,fileSuffix,targetStatements).viewClassVar;var/** @type {?} */compFactoryVar=componentFactoryName(compMeta.type.reference);if(this._config.useViewEngine){targetStatements.push(variable(compFactoryVar).set(importExpr(createIdentifier(Identifiers.createComponentFactory)).callFn([literal(compMeta.selector),importExpr(compMeta.type),variable(hostViewFactoryVar)])).toDeclStmt(importType(createIdentifier(Identifiers.ComponentFactory),[importType(compMeta.type)],[TypeModifier.Const]),[StmtModifier.Final]));}else{targetStatements.push(variable(compFactoryVar).set(importExpr(createIdentifier(Identifiers.ComponentFactory),[importType(compMeta.type)]).instantiate([literal(compMeta.selector),variable(hostViewFactoryVar),importExpr(compMeta.type)],importType(createIdentifier(Identifiers.ComponentFactory),[importType(compMeta.type)],[TypeModifier.Const]))).toDeclStmt(null,[StmtModifier.Final]));}return compFactoryVar;}/**
     * @param {?} compMeta
     * @param {?} ngModule
     * @param {?} directiveIdentifiers
     * @param {?} componentStyles
     * @param {?} fileSuffix
     * @param {?} targetStatements
     * @return {?}
     */},{key:'_compileComponent',value:function _compileComponent(compMeta,ngModule,directiveIdentifiers,componentStyles,fileSuffix,targetStatements){var _this233=this;var/** @type {?} */directives=directiveIdentifiers.map(function(dir){return _this233._metadataResolver.getDirectiveSummary(dir.reference);});var/** @type {?} */pipes=ngModule.transitiveModule.pipes.map(function(pipe){return _this233._metadataResolver.getPipeSummary(pipe.reference);});var _templateParser$parse=this._templateParser.parse(compMeta,compMeta.template.template,directives,pipes,ngModule.schemas,identifierName(compMeta.type)),parsedTemplate=_templateParser$parse.template,usedPipes=_templateParser$parse.pipes;var/** @type {?} */stylesExpr=componentStyles?variable(componentStyles.stylesVar):literalArr([]);var/** @type {?} */viewResult=this._viewCompiler.compileComponent(compMeta,parsedTemplate,stylesExpr,usedPipes,null);if(componentStyles){targetStatements.push.apply(targetStatements,_toConsumableArray(_resolveStyleStatements(this._symbolResolver,componentStyles,fileSuffix)));}targetStatements.push.apply(targetStatements,_toConsumableArray(viewResult.statements));return{viewClassVar:viewResult.viewClassVar,compRenderTypeVar:viewResult.rendererTypeVar};}/**
     * @param {?} fileUrl
     * @param {?} stylesCompileResult
     * @param {?} fileSuffix
     * @return {?}
     */},{key:'_codgenStyles',value:function _codgenStyles(fileUrl,stylesCompileResult,fileSuffix){_resolveStyleStatements(this._symbolResolver,stylesCompileResult,fileSuffix);return this._codegenSourceModule(fileUrl,_stylesModuleUrl(stylesCompileResult.meta.moduleUrl,stylesCompileResult.isShimmed,fileSuffix),stylesCompileResult.statements,[stylesCompileResult.stylesVar]);}/**
     * @param {?} srcFileUrl
     * @param {?} genFileUrl
     * @param {?} statements
     * @param {?} exportedVars
     * @return {?}
     */},{key:'_codegenSourceModule',value:function _codegenSourceModule(srcFileUrl,genFileUrl,statements,exportedVars){return new GeneratedFile(srcFileUrl,genFileUrl,this._outputEmitter.emitStatements(genFileUrl,statements,exportedVars));}}]);return AotCompiler;}();/**
 * @param {?} reflector
 * @param {?} compileResult
 * @param {?} fileSuffix
 * @return {?}
 */function _resolveStyleStatements(reflector,compileResult,fileSuffix){compileResult.dependencies.forEach(function(dep){dep.valuePlaceholder.reference=reflector.getStaticSymbol(_stylesModuleUrl(dep.moduleUrl,dep.isShimmed,fileSuffix),dep.name);});return compileResult.statements;}/**
 * @param {?} stylesheetUrl
 * @param {?} shim
 * @param {?} suffix
 * @return {?}
 */function _stylesModuleUrl(stylesheetUrl,shim,suffix){return''+stylesheetUrl+(shim?'.shim':'')+'.ngstyle'+suffix;}/**
 * @param {?} meta
 * @return {?}
 */function _assertComponent(meta){if(!meta.isComponent){throw new Error('Could not compile \''+identifierName(meta.type)+'\' because it is not a component.');}}/**
 * @param {?} programStaticSymbols
 * @param {?} host
 * @param {?} metadataResolver
 * @return {?}
 */function analyzeNgModules(programStaticSymbols,host,metadataResolver){var _createNgModules2=_createNgModules(programStaticSymbols,host,metadataResolver),ngModules=_createNgModules2.ngModules,symbolsMissingModule=_createNgModules2.symbolsMissingModule;return _analyzeNgModules(programStaticSymbols,ngModules,symbolsMissingModule,metadataResolver);}/**
 * @param {?} programStaticSymbols
 * @param {?} host
 * @param {?} metadataResolver
 * @return {?}
 */function analyzeAndValidateNgModules(programStaticSymbols,host,metadataResolver){var/** @type {?} */result=analyzeNgModules(programStaticSymbols,host,metadataResolver);if(result.symbolsMissingModule&&result.symbolsMissingModule.length){var/** @type {?} */messages=result.symbolsMissingModule.map(function(s){return'Cannot determine the module for class '+s.name+' in '+s.filePath+'! Add '+s.name+' to the NgModule to fix it.';});throw syntaxError(messages.join('\n'));}return result;}/**
 * @param {?} programSymbols
 * @param {?} ngModuleMetas
 * @param {?} symbolsMissingModule
 * @param {?} metadataResolver
 * @return {?}
 */function _analyzeNgModules(programSymbols,ngModuleMetas,symbolsMissingModule,metadataResolver){var/** @type {?} */moduleMetasByRef=new Map();ngModuleMetas.forEach(function(ngModule){return moduleMetasByRef.set(ngModule.type.reference,ngModule);});var/** @type {?} */ngModuleByPipeOrDirective=new Map();var/** @type {?} */ngModulesByFile=new Map();var/** @type {?} */ngDirectivesByFile=new Map();var/** @type {?} */ngPipesByFile=new Map();var/** @type {?} */ngInjectablesByFile=new Map();var/** @type {?} */filePaths=new Set();// Make sure we produce an analyzed file for each input file
programSymbols.forEach(function(symbol){var/** @type {?} */filePath=symbol.filePath;filePaths.add(filePath);if(metadataResolver.isInjectable(symbol)){ngInjectablesByFile.set(filePath,(ngInjectablesByFile.get(filePath)||[]).concat(symbol));}});// Looping over all modules to construct:
// - a map from file to modules `ngModulesByFile`,
// - a map from file to directives `ngDirectivesByFile`,
// - a map from file to pipes `ngPipesByFile`,
// - a map from directive/pipe to module `ngModuleByPipeOrDirective`.
ngModuleMetas.forEach(function(ngModuleMeta){var/** @type {?} */srcFileUrl=ngModuleMeta.type.reference.filePath;filePaths.add(srcFileUrl);ngModulesByFile.set(srcFileUrl,(ngModulesByFile.get(srcFileUrl)||[]).concat(ngModuleMeta.type.reference));ngModuleMeta.declaredDirectives.forEach(function(dirIdentifier){var/** @type {?} */fileUrl=dirIdentifier.reference.filePath;filePaths.add(fileUrl);ngDirectivesByFile.set(fileUrl,(ngDirectivesByFile.get(fileUrl)||[]).concat(dirIdentifier.reference));ngModuleByPipeOrDirective.set(dirIdentifier.reference,ngModuleMeta);});ngModuleMeta.declaredPipes.forEach(function(pipeIdentifier){var/** @type {?} */fileUrl=pipeIdentifier.reference.filePath;filePaths.add(fileUrl);ngPipesByFile.set(fileUrl,(ngPipesByFile.get(fileUrl)||[]).concat(pipeIdentifier.reference));ngModuleByPipeOrDirective.set(pipeIdentifier.reference,ngModuleMeta);});});var/** @type {?} */files=[];filePaths.forEach(function(srcUrl){var/** @type {?} */directives=ngDirectivesByFile.get(srcUrl)||[];var/** @type {?} */pipes=ngPipesByFile.get(srcUrl)||[];var/** @type {?} */ngModules=ngModulesByFile.get(srcUrl)||[];var/** @type {?} */injectables=ngInjectablesByFile.get(srcUrl)||[];files.push({srcUrl:srcUrl,directives:directives,pipes:pipes,ngModules:ngModules,injectables:injectables});});return{// map directive/pipe to module
ngModuleByPipeOrDirective:ngModuleByPipeOrDirective,// list modules and directives for every source file
files:files,ngModules:ngModuleMetas,symbolsMissingModule:symbolsMissingModule};}/**
 * @param {?} staticSymbolResolver
 * @param {?} files
 * @param {?} host
 * @return {?}
 */function extractProgramSymbols(staticSymbolResolver,files,host){var/** @type {?} */staticSymbols=[];files.filter(function(fileName){return host.isSourceFile(fileName);}).forEach(function(sourceFile){staticSymbolResolver.getSymbolsOf(sourceFile).forEach(function(symbol){var/** @type {?} */resolvedSymbol=staticSymbolResolver.resolveSymbol(symbol);var/** @type {?} */symbolMeta=resolvedSymbol.metadata;if(symbolMeta){if(symbolMeta.__symbolic!='error'){// Ignore symbols that are only included to record error information.
staticSymbols.push(resolvedSymbol.symbol);}}});});return staticSymbols;}/**
 * @param {?} programStaticSymbols
 * @param {?} host
 * @param {?} metadataResolver
 * @return {?}
 */function _createNgModules(programStaticSymbols,host,metadataResolver){var/** @type {?} */ngModules=new Map();var/** @type {?} */programPipesAndDirectives=[];var/** @type {?} */ngModulePipesAndDirective=new Set();var/** @type {?} */addNgModule=function addNgModule(staticSymbol){if(ngModules.has(staticSymbol)||!host.isSourceFile(staticSymbol.filePath)){return false;}var/** @type {?} */ngModule=metadataResolver.getNgModuleMetadata(staticSymbol,false);if(ngModule){ngModules.set(ngModule.type.reference,ngModule);ngModule.declaredDirectives.forEach(function(dir){return ngModulePipesAndDirective.add(dir.reference);});ngModule.declaredPipes.forEach(function(pipe){return ngModulePipesAndDirective.add(pipe.reference);});// For every input module add the list of transitively included modules
ngModule.transitiveModule.modules.forEach(function(modMeta){return addNgModule(modMeta.reference);});}return!!ngModule;};programStaticSymbols.forEach(function(staticSymbol){if(!addNgModule(staticSymbol)&&(metadataResolver.isDirective(staticSymbol)||metadataResolver.isPipe(staticSymbol))){programPipesAndDirectives.push(staticSymbol);}});// Throw an error if any of the program pipe or directives is not declared by a module
var/** @type {?} */symbolsMissingModule=programPipesAndDirectives.filter(function(s){return!ngModulePipesAndDirective.has(s);});return{ngModules:Array.from(ngModules.values()),symbolsMissingModule:symbolsMissingModule};}var StaticAndDynamicReflectionCapabilities=function(){/**
     * @param {?} staticDelegate
     */function StaticAndDynamicReflectionCapabilities(staticDelegate){_classCallCheck(this,StaticAndDynamicReflectionCapabilities);this.staticDelegate=staticDelegate;this.dynamicDelegate=new __WEBPACK_IMPORTED_MODULE_0__angular_core__["_123" /* ɵReflectionCapabilities */]();}/**
     * @param {?} staticDelegate
     * @return {?}
     */_createClass(StaticAndDynamicReflectionCapabilities,[{key:'isReflectionEnabled',/**
     * @return {?}
     */value:function isReflectionEnabled(){return true;}/**
     * @param {?} type
     * @return {?}
     */},{key:'factory',value:function factory(type){return this.dynamicDelegate.factory(type);}/**
     * @param {?} type
     * @param {?} lcProperty
     * @return {?}
     */},{key:'hasLifecycleHook',value:function hasLifecycleHook(type,lcProperty){return isStaticType(type)?this.staticDelegate.hasLifecycleHook(type,lcProperty):this.dynamicDelegate.hasLifecycleHook(type,lcProperty);}/**
     * @param {?} type
     * @return {?}
     */},{key:'parameters',value:function parameters(type){return isStaticType(type)?this.staticDelegate.parameters(type):this.dynamicDelegate.parameters(type);}/**
     * @param {?} type
     * @return {?}
     */},{key:'annotations',value:function annotations(type){return isStaticType(type)?this.staticDelegate.annotations(type):this.dynamicDelegate.annotations(type);}/**
     * @param {?} typeOrFunc
     * @return {?}
     */},{key:'propMetadata',value:function propMetadata(typeOrFunc){return isStaticType(typeOrFunc)?this.staticDelegate.propMetadata(typeOrFunc):this.dynamicDelegate.propMetadata(typeOrFunc);}/**
     * @param {?} name
     * @return {?}
     */},{key:'getter',value:function getter(name){return this.dynamicDelegate.getter(name);}/**
     * @param {?} name
     * @return {?}
     */},{key:'setter',value:function setter(name){return this.dynamicDelegate.setter(name);}/**
     * @param {?} name
     * @return {?}
     */},{key:'method',value:function method(name){return this.dynamicDelegate.method(name);}/**
     * @param {?} type
     * @return {?}
     */},{key:'importUri',value:function importUri(type){return this.staticDelegate.importUri(type);}/**
     * @param {?} name
     * @param {?} moduleUrl
     * @param {?} members
     * @param {?} runtime
     * @return {?}
     */},{key:'resolveIdentifier',value:function resolveIdentifier(name,moduleUrl,members,runtime){return this.staticDelegate.resolveIdentifier(name,moduleUrl,members);}/**
     * @param {?} enumIdentifier
     * @param {?} name
     * @return {?}
     */},{key:'resolveEnum',value:function resolveEnum(enumIdentifier,name){if(isStaticType(enumIdentifier)){return this.staticDelegate.resolveEnum(enumIdentifier,name);}else{return null;}}}],[{key:'install',value:function install(staticDelegate){__WEBPACK_IMPORTED_MODULE_0__angular_core__["_13" /* ɵreflector */].updateCapabilities(new StaticAndDynamicReflectionCapabilities(staticDelegate));}}]);return StaticAndDynamicReflectionCapabilities;}();/**
 * @param {?} type
 * @return {?}
 */function isStaticType(type){return(typeof type==='undefined'?'undefined':_typeof(type))==='object'&&type.name&&type.filePath;}var/** @type {?} */ANGULAR_CORE='@angular/core';var/** @type {?} */HIDDEN_KEY=/^\$.*\$$/;/**
 * A static reflector implements enough of the Reflector API that is necessary to compile
 * templates statically.
 */var StaticReflector=function(){/**
     * @param {?} symbolResolver
     * @param {?=} knownMetadataClasses
     * @param {?=} knownMetadataFunctions
     * @param {?=} errorRecorder
     */function StaticReflector(symbolResolver){var knownMetadataClasses=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];var _this234=this;var knownMetadataFunctions=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];var errorRecorder=arguments[3];_classCallCheck(this,StaticReflector);this.symbolResolver=symbolResolver;this.errorRecorder=errorRecorder;this.annotationCache=new Map();this.propertyCache=new Map();this.parameterCache=new Map();this.methodCache=new Map();this.conversionMap=new Map();this.initializeConversionMap();knownMetadataClasses.forEach(function(kc){return _this234._registerDecoratorOrConstructor(_this234.getStaticSymbol(kc.filePath,kc.name),kc.ctor);});knownMetadataFunctions.forEach(function(kf){return _this234._registerFunction(_this234.getStaticSymbol(kf.filePath,kf.name),kf.fn);});}/**
     * @param {?} typeOrFunc
     * @return {?}
     */_createClass(StaticReflector,[{key:'importUri',value:function importUri(typeOrFunc){var/** @type {?} */staticSymbol=this.findSymbolDeclaration(typeOrFunc);return staticSymbol?staticSymbol.filePath:null;}/**
     * @param {?} name
     * @param {?} moduleUrl
     * @param {?} members
     * @return {?}
     */},{key:'resolveIdentifier',value:function resolveIdentifier(name,moduleUrl,members){var/** @type {?} */importSymbol=this.getStaticSymbol(moduleUrl,name);var/** @type {?} */rootSymbol=this.findDeclaration(moduleUrl,name);if(importSymbol!=rootSymbol){this.symbolResolver.recordImportAs(rootSymbol,importSymbol);}if(members&&members.length){return this.getStaticSymbol(rootSymbol.filePath,rootSymbol.name,members);}return rootSymbol;}/**
     * @param {?} moduleUrl
     * @param {?} name
     * @param {?=} containingFile
     * @return {?}
     */},{key:'findDeclaration',value:function findDeclaration(moduleUrl,name,containingFile){return this.findSymbolDeclaration(this.symbolResolver.getSymbolByModule(moduleUrl,name,containingFile));}/**
     * @param {?} symbol
     * @return {?}
     */},{key:'findSymbolDeclaration',value:function findSymbolDeclaration(symbol){var/** @type {?} */resolvedSymbol=this.symbolResolver.resolveSymbol(symbol);if(resolvedSymbol&&resolvedSymbol.metadata instanceof StaticSymbol){return this.findSymbolDeclaration(resolvedSymbol.metadata);}else{return symbol;}}/**
     * @param {?} enumIdentifier
     * @param {?} name
     * @return {?}
     */},{key:'resolveEnum',value:function resolveEnum(enumIdentifier,name){var/** @type {?} */staticSymbol=enumIdentifier;var/** @type {?} */members=(staticSymbol.members||[]).concat(name);return this.getStaticSymbol(staticSymbol.filePath,staticSymbol.name,members);}/**
     * @param {?} type
     * @return {?}
     */},{key:'annotations',value:function annotations(type){var/** @type {?} */annotations=this.annotationCache.get(type);if(!annotations){annotations=[];var/** @type {?} */classMetadata=this.getTypeMetadata(type);if(classMetadata['extends']){var/** @type {?} */parentType=this.trySimplify(type,classMetadata['extends']);if(parentType&&parentType instanceof StaticSymbol){var _annotations;var/** @type {?} */parentAnnotations=this.annotations(parentType);(_annotations=annotations).push.apply(_annotations,_toConsumableArray(parentAnnotations));}}if(classMetadata['decorators']){var _annotations2;var/** @type {?} */ownAnnotations=this.simplify(type,classMetadata['decorators']);(_annotations2=annotations).push.apply(_annotations2,_toConsumableArray(ownAnnotations));}this.annotationCache.set(type,annotations.filter(function(ann){return!!ann;}));}return annotations;}/**
     * @param {?} type
     * @return {?}
     */},{key:'propMetadata',value:function propMetadata(type){var _this235=this;var/** @type {?} */propMetadata=this.propertyCache.get(type);if(!propMetadata){var/** @type {?} */classMetadata=this.getTypeMetadata(type);propMetadata={};if(classMetadata['extends']){var/** @type {?} */parentType=this.simplify(type,classMetadata['extends']);if(parentType instanceof StaticSymbol){var/** @type {?} */parentPropMetadata=this.propMetadata(parentType);Object.keys(parentPropMetadata).forEach(function(parentProp){propMetadata[parentProp]=parentPropMetadata[parentProp];});}}var/** @type {?} */members=classMetadata['members']||{};Object.keys(members).forEach(function(propName){var/** @type {?} */propData=members[propName];var/** @type {?} */prop=propData.find(function(a){return a['__symbolic']=='property'||a['__symbolic']=='method';});var/** @type {?} */decorators=[];if(propMetadata[propName]){decorators.push.apply(decorators,_toConsumableArray(propMetadata[propName]));}propMetadata[propName]=decorators;if(prop&&prop['decorators']){decorators.push.apply(decorators,_toConsumableArray(_this235.simplify(type,prop['decorators'])));}});this.propertyCache.set(type,propMetadata);}return propMetadata;}/**
     * @param {?} type
     * @return {?}
     */},{key:'parameters',value:function parameters(type){if(!(type instanceof StaticSymbol)){this.reportError(new Error('parameters received '+JSON.stringify(type)+' which is not a StaticSymbol'),type);return[];}try{var/** @type {?} */parameters=this.parameterCache.get(type);if(!parameters){var/** @type {?} */classMetadata=this.getTypeMetadata(type);var/** @type {?} */members=classMetadata?classMetadata['members']:null;var/** @type {?} */ctorData=members?members['__ctor__']:null;if(ctorData){var/** @type {?} */ctor=ctorData.find(function(a){return a['__symbolic']=='constructor';});var/** @type {?} */parameterTypes=this.simplify(type,ctor['parameters']||[]);var/** @type {?} */parameterDecorators=this.simplify(type,ctor['parameterDecorators']||[]);parameters=[];parameterTypes.forEach(function(paramType,index){var/** @type {?} */nestedResult=[];if(paramType){nestedResult.push(paramType);}var/** @type {?} */decorators=parameterDecorators?parameterDecorators[index]:null;if(decorators){nestedResult.push.apply(nestedResult,_toConsumableArray(decorators));}parameters.push(nestedResult);});}else if(classMetadata['extends']){var/** @type {?} */parentType=this.simplify(type,classMetadata['extends']);if(parentType instanceof StaticSymbol){parameters=this.parameters(parentType);}}if(!parameters){parameters=[];}this.parameterCache.set(type,parameters);}return parameters;}catch(e){console.error('Failed on type '+JSON.stringify(type)+' with error '+e);throw e;}}/**
     * @param {?} type
     * @return {?}
     */},{key:'_methodNames',value:function _methodNames(type){var/** @type {?} */methodNames=this.methodCache.get(type);if(!methodNames){var/** @type {?} */classMetadata=this.getTypeMetadata(type);methodNames={};if(classMetadata['extends']){var/** @type {?} */parentType=this.simplify(type,classMetadata['extends']);if(parentType instanceof StaticSymbol){var/** @type {?} */parentMethodNames=this._methodNames(parentType);Object.keys(parentMethodNames).forEach(function(parentProp){methodNames[parentProp]=parentMethodNames[parentProp];});}}var/** @type {?} */members=classMetadata['members']||{};Object.keys(members).forEach(function(propName){var/** @type {?} */propData=members[propName];var/** @type {?} */isMethod=propData.some(function(a){return a['__symbolic']=='method';});methodNames[propName]=methodNames[propName]||isMethod;});this.methodCache.set(type,methodNames);}return methodNames;}/**
     * @param {?} type
     * @param {?} lcProperty
     * @return {?}
     */},{key:'hasLifecycleHook',value:function hasLifecycleHook(type,lcProperty){if(!(type instanceof StaticSymbol)){this.reportError(new Error('hasLifecycleHook received '+JSON.stringify(type)+' which is not a StaticSymbol'),type);}try{return!!this._methodNames(type)[lcProperty];}catch(e){console.error('Failed on type '+JSON.stringify(type)+' with error '+e);throw e;}}/**
     * @param {?} type
     * @param {?} ctor
     * @return {?}
     */},{key:'_registerDecoratorOrConstructor',value:function _registerDecoratorOrConstructor(type,ctor){this.conversionMap.set(type,function(context,args){return new(Function.prototype.bind.apply(ctor,[null].concat(_toConsumableArray(args))))();});}/**
     * @param {?} type
     * @param {?} fn
     * @return {?}
     */},{key:'_registerFunction',value:function _registerFunction(type,fn){this.conversionMap.set(type,function(context,args){return fn.apply(undefined,args);});}/**
     * @return {?}
     */},{key:'initializeConversionMap',value:function initializeConversionMap(){this.injectionToken=this.findDeclaration(ANGULAR_CORE,'InjectionToken');this.opaqueToken=this.findDeclaration(ANGULAR_CORE,'OpaqueToken');this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE,'Host'),__WEBPACK_IMPORTED_MODULE_0__angular_core__["_7" /* Host */]);this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE,'Injectable'),__WEBPACK_IMPORTED_MODULE_0__angular_core__["B" /* Injectable */]);this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE,'Self'),__WEBPACK_IMPORTED_MODULE_0__angular_core__["_11" /* Self */]);this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE,'SkipSelf'),__WEBPACK_IMPORTED_MODULE_0__angular_core__["H" /* SkipSelf */]);this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE,'Inject'),__WEBPACK_IMPORTED_MODULE_0__angular_core__["I" /* Inject */]);this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE,'Optional'),__WEBPACK_IMPORTED_MODULE_0__angular_core__["E" /* Optional */]);this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE,'Attribute'),__WEBPACK_IMPORTED_MODULE_0__angular_core__["r" /* Attribute */]);this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE,'ContentChild'),__WEBPACK_IMPORTED_MODULE_0__angular_core__["_124" /* ContentChild */]);this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE,'ContentChildren'),__WEBPACK_IMPORTED_MODULE_0__angular_core__["y" /* ContentChildren */]);this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE,'ViewChild'),__WEBPACK_IMPORTED_MODULE_0__angular_core__["_125" /* ViewChild */]);this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE,'ViewChildren'),__WEBPACK_IMPORTED_MODULE_0__angular_core__["_126" /* ViewChildren */]);this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE,'Input'),__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */]);this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE,'Output'),__WEBPACK_IMPORTED_MODULE_0__angular_core__["A" /* Output */]);this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE,'Pipe'),__WEBPACK_IMPORTED_MODULE_0__angular_core__["_9" /* Pipe */]);this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE,'HostBinding'),__WEBPACK_IMPORTED_MODULE_0__angular_core__["w" /* HostBinding */]);this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE,'HostListener'),__WEBPACK_IMPORTED_MODULE_0__angular_core__["v" /* HostListener */]);this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE,'Directive'),__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */]);this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE,'Component'),__WEBPACK_IMPORTED_MODULE_0__angular_core__["b" /* Component */]);this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE,'NgModule'),__WEBPACK_IMPORTED_MODULE_0__angular_core__["i" /* NgModule */]);// Note: Some metadata classes can be used directly with Provider.deps.
this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE,'Host'),__WEBPACK_IMPORTED_MODULE_0__angular_core__["_7" /* Host */]);this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE,'Self'),__WEBPACK_IMPORTED_MODULE_0__angular_core__["_11" /* Self */]);this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE,'SkipSelf'),__WEBPACK_IMPORTED_MODULE_0__angular_core__["H" /* SkipSelf */]);this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE,'Optional'),__WEBPACK_IMPORTED_MODULE_0__angular_core__["E" /* Optional */]);this._registerFunction(this.findDeclaration(ANGULAR_CORE,'trigger'),__WEBPACK_IMPORTED_MODULE_0__angular_core__["_127" /* trigger */]);this._registerFunction(this.findDeclaration(ANGULAR_CORE,'state'),__WEBPACK_IMPORTED_MODULE_0__angular_core__["_128" /* state */]);this._registerFunction(this.findDeclaration(ANGULAR_CORE,'transition'),__WEBPACK_IMPORTED_MODULE_0__angular_core__["_129" /* transition */]);this._registerFunction(this.findDeclaration(ANGULAR_CORE,'style'),__WEBPACK_IMPORTED_MODULE_0__angular_core__["_130" /* style */]);this._registerFunction(this.findDeclaration(ANGULAR_CORE,'animate'),__WEBPACK_IMPORTED_MODULE_0__angular_core__["_131" /* animate */]);this._registerFunction(this.findDeclaration(ANGULAR_CORE,'keyframes'),__WEBPACK_IMPORTED_MODULE_0__angular_core__["_132" /* keyframes */]);this._registerFunction(this.findDeclaration(ANGULAR_CORE,'sequence'),__WEBPACK_IMPORTED_MODULE_0__angular_core__["_133" /* sequence */]);this._registerFunction(this.findDeclaration(ANGULAR_CORE,'group'),__WEBPACK_IMPORTED_MODULE_0__angular_core__["_134" /* group */]);}/**
     * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.
     * All types passed to the StaticResolver should be pseudo-types returned by this method.
     *
     * @param {?} declarationFile the absolute path of the file where the symbol is declared
     * @param {?} name the name of the type.
     * @param {?=} members
     * @return {?}
     */},{key:'getStaticSymbol',value:function getStaticSymbol(declarationFile,name,members){return this.symbolResolver.getStaticSymbol(declarationFile,name,members);}/**
     * @param {?} error
     * @param {?} context
     * @param {?=} path
     * @return {?}
     */},{key:'reportError',value:function reportError(error,context,path){if(this.errorRecorder){this.errorRecorder(error,context&&context.filePath||path);}else{throw error;}}/**
     * Simplify but discard any errors
     * @param {?} context
     * @param {?} value
     * @return {?}
     */},{key:'trySimplify',value:function trySimplify(context,value){var/** @type {?} */originalRecorder=this.errorRecorder;this.errorRecorder=function(error,fileName){};var/** @type {?} */result=this.simplify(context,value);this.errorRecorder=originalRecorder;return result;}/**
     * \@internal
     * @param {?} context
     * @param {?} value
     * @return {?}
     */},{key:'simplify',value:function simplify(context,value){var _this236=this;var/** @type {?} */self=this;var/** @type {?} */scope=BindingScope.empty;var/** @type {?} */calling=new Map();/**
         * @param {?} context
         * @param {?} value
         * @param {?} depth
         * @return {?}
         */function simplifyInContext(context,value,depth){/**
             * @param {?} staticSymbol
             * @return {?}
             */function resolveReferenceValue(staticSymbol){var/** @type {?} */resolvedSymbol=self.symbolResolver.resolveSymbol(staticSymbol);return resolvedSymbol?resolvedSymbol.metadata:null;}/**
             * @param {?} functionSymbol
             * @param {?} targetFunction
             * @param {?} args
             * @return {?}
             */function simplifyCall(functionSymbol,targetFunction,args){if(targetFunction&&targetFunction['__symbolic']=='function'){if(calling.get(functionSymbol)){throw new Error('Recursion not supported');}calling.set(functionSymbol,true);try{var/** @type {?} */_value=targetFunction['value'];if(_value&&(depth!=0||_value.__symbolic!='error')){var/** @type {?} */parameters=targetFunction['parameters'];var/** @type {?} */defaults=targetFunction.defaults;args=args.map(function(arg){return simplifyInContext(context,arg,depth+1);});if(defaults&&defaults.length>args.length){var _args;(_args=args).push.apply(_args,_toConsumableArray(defaults.slice(args.length).map(function(value){return simplify(value);})));}var/** @type {?} */functionScope=BindingScope.build();for(var/** @type {?} */i=0;i<parameters.length;i++){functionScope.define(parameters[i],args[i]);}var/** @type {?} */oldScope=scope;var/** @type {?} */_result=void 0;try{scope=functionScope.done();_result=simplifyInContext(functionSymbol,_value,depth+1);}finally{scope=oldScope;}return _result;}}finally{calling.delete(functionSymbol);}}if(depth===0){// If depth is 0 we are evaluating the top level expression that is describing element
// decorator. In this case, it is a decorator we don't understand, such as a custom
// non-angular decorator, and we should just ignore it.
return{__symbolic:'ignore'};}return simplify({__symbolic:'error',message:'Function call not supported',context:functionSymbol});}/**
             * @param {?} expression
             * @return {?}
             */function simplify(expression){if(isPrimitive$1(expression)){return expression;}if(expression instanceof Array){var/** @type {?} */_result2=[];var _iteratorNormalCompletion5=true;var _didIteratorError5=false;var _iteratorError5=undefined;try{for(var _iterator5=expression[Symbol.iterator](),_step5;!(_iteratorNormalCompletion5=(_step5=_iterator5.next()).done);_iteratorNormalCompletion5=true){var item=_step5.value;// Check for a spread expression
if(item&&item.__symbolic==='spread'){var/** @type {?} */spreadArray=simplify(item.expression);if(Array.isArray(spreadArray)){var _iteratorNormalCompletion6=true;var _didIteratorError6=false;var _iteratorError6=undefined;try{for(var _iterator6=spreadArray[Symbol.iterator](),_step6;!(_iteratorNormalCompletion6=(_step6=_iterator6.next()).done);_iteratorNormalCompletion6=true){var spreadItem=_step6.value;_result2.push(spreadItem);}}catch(err){_didIteratorError6=true;_iteratorError6=err;}finally{try{if(!_iteratorNormalCompletion6&&_iterator6.return){_iterator6.return();}}finally{if(_didIteratorError6){throw _iteratorError6;}}}continue;}}var/** @type {?} */_value2=simplify(item);if(shouldIgnore(_value2)){continue;}_result2.push(_value2);}}catch(err){_didIteratorError5=true;_iteratorError5=err;}finally{try{if(!_iteratorNormalCompletion5&&_iterator5.return){_iterator5.return();}}finally{if(_didIteratorError5){throw _iteratorError5;}}}return _result2;}if(expression instanceof StaticSymbol){// Stop simplification at builtin symbols
if(expression===self.injectionToken||expression===self.opaqueToken||self.conversionMap.has(expression)){return expression;}else{var/** @type {?} */staticSymbol=expression;var/** @type {?} */declarationValue=resolveReferenceValue(staticSymbol);if(declarationValue){return simplifyInContext(staticSymbol,declarationValue,depth+1);}else{return staticSymbol;}}}if(expression){if(expression['__symbolic']){var/** @type {?} */_staticSymbol=void 0;switch(expression['__symbolic']){case'binop':var/** @type {?} */left=simplify(expression['left']);if(shouldIgnore(left))return left;var/** @type {?} */right=simplify(expression['right']);if(shouldIgnore(right))return right;switch(expression['operator']){case'&&':return left&&right;case'||':return left||right;case'|':return left|right;case'^':return left^right;case'&':return left&right;case'==':return left==right;case'!=':return left!=right;case'===':return left===right;case'!==':return left!==right;case'<':return left<right;case'>':return left>right;case'<=':return left<=right;case'>=':return left>=right;case'<<':return left<<right;case'>>':return left>>right;case'+':return left+right;case'-':return left-right;case'*':return left*right;case'/':return left/right;case'%':return left%right;}return null;case'if':var/** @type {?} */condition=simplify(expression['condition']);return condition?simplify(expression['thenExpression']):simplify(expression['elseExpression']);case'pre':var/** @type {?} */operand=simplify(expression['operand']);if(shouldIgnore(operand))return operand;switch(expression['operator']){case'+':return operand;case'-':return-operand;case'!':return!operand;case'~':return~operand;}return null;case'index':var/** @type {?} */indexTarget=simplify(expression['expression']);var/** @type {?} */index=simplify(expression['index']);if(indexTarget&&isPrimitive$1(index))return indexTarget[index];return null;case'select':var/** @type {?} */member=expression['member'];var/** @type {?} */selectContext=context;var/** @type {?} */selectTarget=simplify(expression['expression']);if(selectTarget instanceof StaticSymbol){var/** @type {?} */members=selectTarget.members.concat(member);selectContext=self.getStaticSymbol(selectTarget.filePath,selectTarget.name,members);var/** @type {?} */_declarationValue=resolveReferenceValue(selectContext);if(_declarationValue){return simplifyInContext(selectContext,_declarationValue,depth+1);}else{return selectContext;}}if(selectTarget&&isPrimitive$1(member))return simplifyInContext(selectContext,selectTarget[member],depth+1);return null;case'reference':// Note: This only has to deal with variable references,
// as symbol references have been converted into StaticSymbols already
// in the StaticSymbolResolver!
var/** @type {?} */name=expression['name'];var/** @type {?} */localValue=scope.resolve(name);if(localValue!=BindingScope.missing){return localValue;}break;case'class':return context;case'function':return context;case'new':case'call':// Determine if the function is a built-in conversion
_staticSymbol=simplifyInContext(context,expression['expression'],depth+1);if(_staticSymbol instanceof StaticSymbol){if(_staticSymbol===self.injectionToken||_staticSymbol===self.opaqueToken){// if somebody calls new InjectionToken, don't create an InjectionToken,
// but rather return the symbol to which the InjectionToken is assigned to.
return context;}var/** @type {?} */argExpressions=expression['arguments']||[];var/** @type {?} */converter=self.conversionMap.get(_staticSymbol);if(converter){var/** @type {?} */args=argExpressions.map(function(arg){return simplifyInContext(context,arg,depth+1);});return converter(context,args);}else{// Determine if the function is one we can simplify.
var/** @type {?} */targetFunction=resolveReferenceValue(_staticSymbol);return simplifyCall(_staticSymbol,targetFunction,argExpressions);}}break;case'error':var/** @type {?} */message=produceErrorMessage(expression);if(expression['line']){message=message+' (position '+(expression['line']+1)+':'+(expression['character']+1)+' in the original .ts file)';throw positionalError(message,context.filePath,expression['line'],expression['character']);}throw new Error(message);}return null;}return mapStringMap(expression,function(value,name){return simplify(value);});}return null;}try{return simplify(value);}catch(e){var/** @type {?} */members=context.members.length?'.'+context.members.join('.'):'';var/** @type {?} */message=e.message+', resolving symbol '+context.name+members+' in '+context.filePath;if(e.fileName){throw positionalError(message,e.fileName,e.line,e.column);}throw syntaxError(message);}}var/** @type {?} */recordedSimplifyInContext=function recordedSimplifyInContext(context,value,depth){try{return simplifyInContext(context,value,depth);}catch(e){_this236.reportError(e,context);}};var/** @type {?} */result=this.errorRecorder?recordedSimplifyInContext(context,value,0):simplifyInContext(context,value,0);if(shouldIgnore(result)){return undefined;}return result;}/**
     * @param {?} type
     * @return {?}
     */},{key:'getTypeMetadata',value:function getTypeMetadata(type){var/** @type {?} */resolvedSymbol=this.symbolResolver.resolveSymbol(type);return resolvedSymbol&&resolvedSymbol.metadata?resolvedSymbol.metadata:{__symbolic:'class'};}}]);return StaticReflector;}();/**
 * @param {?} error
 * @return {?}
 */function expandedMessage(error){switch(error.message){case'Reference to non-exported class':if(error.context&&error.context.className){return'Reference to a non-exported class '+error.context.className+'. Consider exporting the class';}break;case'Variable not initialized':return'Only initialized variables and constants can be referenced because the value of this variable is needed by the template compiler';case'Destructuring not supported':return'Referencing an exported destructured variable or constant is not supported by the template compiler. Consider simplifying this to avoid destructuring';case'Could not resolve type':if(error.context&&error.context.typeName){return'Could not resolve type '+error.context.typeName;}break;case'Function call not supported':var/** @type {?} */prefix=error.context&&error.context.name?'Calling function \''+error.context.name+'\', f':'F';return prefix+'unction calls are not supported. Consider replacing the function or lambda with a reference to an exported function';case'Reference to a local symbol':if(error.context&&error.context.name){return'Reference to a local (non-exported) symbol \''+error.context.name+'\'. Consider exporting the symbol';}break;}return error.message;}/**
 * @param {?} error
 * @return {?}
 */function produceErrorMessage(error){return'Error encountered resolving symbol values statically. '+expandedMessage(error);}/**
 * @param {?} input
 * @param {?} transform
 * @return {?}
 */function mapStringMap(input,transform){if(!input)return{};var/** @type {?} */result={};Object.keys(input).forEach(function(key){var/** @type {?} */value=transform(input[key],key);if(!shouldIgnore(value)){if(HIDDEN_KEY.test(key)){Object.defineProperty(result,key,{enumerable:false,configurable:true,value:value});}else{result[key]=value;}}});return result;}/**
 * @param {?} o
 * @return {?}
 */function isPrimitive$1(o){return o===null||typeof o!=='function'&&(typeof o==='undefined'?'undefined':_typeof(o))!=='object';}/**
 * @abstract
 */var BindingScope=function(){function BindingScope(){_classCallCheck(this,BindingScope);}_createClass(BindingScope,[{key:'resolve',/**
     * @abstract
     * @param {?} name
     * @return {?}
     */value:function resolve(name){}/**
     * @return {?}
     */}],[{key:'build',value:function build(){var/** @type {?} */current=new Map();return{define:function define(name,value){current.set(name,value);return this;},done:function done(){return current.size>0?new PopulatedScope(current):BindingScope.empty;}};}}]);return BindingScope;}();BindingScope.missing={};BindingScope.empty={resolve:function resolve(name){return BindingScope.missing;}};var PopulatedScope=function(_BindingScope){_inherits(PopulatedScope,_BindingScope);/**
     * @param {?} bindings
     */function PopulatedScope(bindings){_classCallCheck(this,PopulatedScope);var _this237=_possibleConstructorReturn(this,(PopulatedScope.__proto__||Object.getPrototypeOf(PopulatedScope)).call(this));_this237.bindings=bindings;return _this237;}/**
     * @param {?} name
     * @return {?}
     */_createClass(PopulatedScope,[{key:'resolve',value:function resolve(name){return this.bindings.has(name)?this.bindings.get(name):BindingScope.missing;}}]);return PopulatedScope;}(BindingScope);/**
 * @param {?} value
 * @return {?}
 */function shouldIgnore(value){return value&&value.__symbolic=='ignore';}/**
 * @param {?} message
 * @param {?} fileName
 * @param {?} line
 * @param {?} column
 * @return {?}
 */function positionalError(message,fileName,line,column){var/** @type {?} */result=new Error(message);result.fileName=fileName;result.line=line;result.column=column;return result;}var ResolvedStaticSymbol=/**
     * @param {?} symbol
     * @param {?} metadata
     */function ResolvedStaticSymbol(symbol,metadata){_classCallCheck(this,ResolvedStaticSymbol);this.symbol=symbol;this.metadata=metadata;};var/** @type {?} */SUPPORTED_SCHEMA_VERSION=3;/**
 * This class is responsible for loading metadata per symbol,
 * and normalizing references between symbols.
 *
 * Internally, it only uses symbols without members,
 * and deduces the values for symbols with members based
 * on these symbols.
 */var StaticSymbolResolver=function(){/**
     * @param {?} host
     * @param {?} staticSymbolCache
     * @param {?} summaryResolver
     * @param {?=} errorRecorder
     */function StaticSymbolResolver(host,staticSymbolCache,summaryResolver,errorRecorder){_classCallCheck(this,StaticSymbolResolver);this.host=host;this.staticSymbolCache=staticSymbolCache;this.summaryResolver=summaryResolver;this.errorRecorder=errorRecorder;this.metadataCache=new Map();this.resolvedSymbols=new Map();this.resolvedFilePaths=new Set();this.importAs=new Map();}/**
     * @param {?} staticSymbol
     * @return {?}
     */_createClass(StaticSymbolResolver,[{key:'resolveSymbol',value:function resolveSymbol(staticSymbol){if(staticSymbol.members.length>0){return this._resolveSymbolMembers(staticSymbol);}var/** @type {?} */result=this.resolvedSymbols.get(staticSymbol);if(result){return result;}result=this._resolveSymbolFromSummary(staticSymbol);if(result){return result;}// Note: Some users use libraries that were not compiled with ngc, i.e. they don't
// have summaries, only .d.ts files. So we always need to check both, the summary
// and metadata.
this._createSymbolsOf(staticSymbol.filePath);result=this.resolvedSymbols.get(staticSymbol);return result;}/**
     * getImportAs produces a symbol that can be used to import the given symbol.
     * The import might be different than the symbol if the symbol is exported from
     * a library with a summary; in which case we want to import the symbol from the
     * ngfactory re-export instead of directly to avoid introducing a direct dependency
     * on an otherwise indirect dependency.
     *
     * @param {?} staticSymbol the symbol for which to generate a import symbol
     * @return {?}
     */},{key:'getImportAs',value:function getImportAs(staticSymbol){if(staticSymbol.members.length){var/** @type {?} */baseSymbol=this.getStaticSymbol(staticSymbol.filePath,staticSymbol.name);var/** @type {?} */baseImportAs=this.getImportAs(baseSymbol);return baseImportAs?this.getStaticSymbol(baseImportAs.filePath,baseImportAs.name,staticSymbol.members):null;}var/** @type {?} */result=this.summaryResolver.getImportAs(staticSymbol);if(!result){result=this.importAs.get(staticSymbol);}return result;}/**
     * getTypeArity returns the number of generic type parameters the given symbol
     * has. If the symbol is not a type the result is null.
     * @param {?} staticSymbol
     * @return {?}
     */},{key:'getTypeArity',value:function getTypeArity(staticSymbol){// If the file is a factory file, don't resolve the symbol as doing so would
// cause the metadata for an factory file to be loaded which doesn't exist.
// All references to generated classes must include the correct arity whenever
// generating code.
if(isNgFactoryFile(staticSymbol.filePath)){return null;}var/** @type {?} */resolvedSymbol=this.resolveSymbol(staticSymbol);while(resolvedSymbol&&resolvedSymbol.metadata instanceof StaticSymbol){resolvedSymbol=this.resolveSymbol(resolvedSymbol.metadata);}return resolvedSymbol&&resolvedSymbol.metadata&&resolvedSymbol.metadata.arity||null;}/**
     * @param {?} sourceSymbol
     * @param {?} targetSymbol
     * @return {?}
     */},{key:'recordImportAs',value:function recordImportAs(sourceSymbol,targetSymbol){sourceSymbol.assertNoMembers();targetSymbol.assertNoMembers();this.importAs.set(sourceSymbol,targetSymbol);}/**
     * @param {?} staticSymbol
     * @return {?}
     */},{key:'_resolveSymbolMembers',value:function _resolveSymbolMembers(staticSymbol){var/** @type {?} */members=staticSymbol.members;var/** @type {?} */baseResolvedSymbol=this.resolveSymbol(this.getStaticSymbol(staticSymbol.filePath,staticSymbol.name));if(!baseResolvedSymbol){return null;}var/** @type {?} */baseMetadata=baseResolvedSymbol.metadata;if(baseMetadata instanceof StaticSymbol){return new ResolvedStaticSymbol(staticSymbol,this.getStaticSymbol(baseMetadata.filePath,baseMetadata.name,members));}else if(baseMetadata&&baseMetadata.__symbolic==='class'){if(baseMetadata.statics&&members.length===1){return new ResolvedStaticSymbol(staticSymbol,baseMetadata.statics[members[0]]);}}else{var/** @type {?} */value=baseMetadata;for(var/** @type {?} */i=0;i<members.length&&value;i++){value=value[members[i]];}return new ResolvedStaticSymbol(staticSymbol,value);}return null;}/**
     * @param {?} staticSymbol
     * @return {?}
     */},{key:'_resolveSymbolFromSummary',value:function _resolveSymbolFromSummary(staticSymbol){var/** @type {?} */summary=this.summaryResolver.resolveSummary(staticSymbol);return summary?new ResolvedStaticSymbol(staticSymbol,summary.metadata):null;}/**
     * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.
     * All types passed to the StaticResolver should be pseudo-types returned by this method.
     *
     * @param {?} declarationFile the absolute path of the file where the symbol is declared
     * @param {?} name the name of the type.
     * @param {?=} members a symbol for a static member of the named type
     * @return {?}
     */},{key:'getStaticSymbol',value:function getStaticSymbol(declarationFile,name,members){return this.staticSymbolCache.get(declarationFile,name,members);}/**
     * @param {?} filePath
     * @return {?}
     */},{key:'getSymbolsOf',value:function getSymbolsOf(filePath){// Note: Some users use libraries that were not compiled with ngc, i.e. they don't
// have summaries, only .d.ts files. So we always need to check both, the summary
// and metadata.
var/** @type {?} */symbols=new Set(this.summaryResolver.getSymbolsOf(filePath));this._createSymbolsOf(filePath);this.resolvedSymbols.forEach(function(resolvedSymbol){if(resolvedSymbol.symbol.filePath===filePath){symbols.add(resolvedSymbol.symbol);}});return Array.from(symbols);}/**
     * @param {?} filePath
     * @return {?}
     */},{key:'_createSymbolsOf',value:function _createSymbolsOf(filePath){var _this238=this;if(this.resolvedFilePaths.has(filePath)){return;}this.resolvedFilePaths.add(filePath);var/** @type {?} */resolvedSymbols=[];var/** @type {?} */metadata=this.getModuleMetadata(filePath);if(metadata['metadata']){// handle direct declarations of the symbol
var/** @type {?} */topLevelSymbolNames=new Set(Object.keys(metadata['metadata']).map(unescapeIdentifier));Object.keys(metadata['metadata']).forEach(function(metadataKey){var/** @type {?} */symbolMeta=metadata['metadata'][metadataKey];var/** @type {?} */name=unescapeIdentifier(metadataKey);var/** @type {?} */canonicalSymbol=_this238.getStaticSymbol(filePath,name);if(metadata['importAs']){// Index bundle indexes should use the importAs module name instead of a reference
// to the .d.ts file directly.
var/** @type {?} */importSymbol=_this238.getStaticSymbol(metadata['importAs'],name);_this238.recordImportAs(canonicalSymbol,importSymbol);}resolvedSymbols.push(_this238.createResolvedSymbol(canonicalSymbol,topLevelSymbolNames,symbolMeta));});}// handle the symbols in one of the re-export location
if(metadata['exports']){var _iteratorNormalCompletion7=true;var _didIteratorError7=false;var _iteratorError7=undefined;try{var _loop3=function _loop3(){var moduleExport=_step7.value;// handle the symbols in the list of explicitly re-exported symbols.
if(moduleExport.export){moduleExport.export.forEach(function(exportSymbol){var/** @type {?} */symbolName=void 0;if(typeof exportSymbol==='string'){symbolName=exportSymbol;}else{symbolName=exportSymbol.as;}symbolName=unescapeIdentifier(symbolName);var/** @type {?} */symName=symbolName;if(typeof exportSymbol!=='string'){symName=unescapeIdentifier(exportSymbol.name);}var/** @type {?} */resolvedModule=_this238.resolveModule(moduleExport.from,filePath);if(resolvedModule){var/** @type {?} */targetSymbol=_this238.getStaticSymbol(resolvedModule,symName);var/** @type {?} */sourceSymbol=_this238.getStaticSymbol(filePath,symbolName);resolvedSymbols.push(_this238.createExport(sourceSymbol,targetSymbol));}});}else{// handle the symbols via export * directives.
var/** @type {?} */resolvedModule=_this238.resolveModule(moduleExport.from,filePath);if(resolvedModule){var/** @type {?} */nestedExports=_this238.getSymbolsOf(resolvedModule);nestedExports.forEach(function(targetSymbol){var/** @type {?} */sourceSymbol=_this238.getStaticSymbol(filePath,targetSymbol.name);resolvedSymbols.push(_this238.createExport(sourceSymbol,targetSymbol));});}}};for(var _iterator7=metadata['exports'][Symbol.iterator](),_step7;!(_iteratorNormalCompletion7=(_step7=_iterator7.next()).done);_iteratorNormalCompletion7=true){_loop3();}}catch(err){_didIteratorError7=true;_iteratorError7=err;}finally{try{if(!_iteratorNormalCompletion7&&_iterator7.return){_iterator7.return();}}finally{if(_didIteratorError7){throw _iteratorError7;}}}}resolvedSymbols.forEach(function(resolvedSymbol){return _this238.resolvedSymbols.set(resolvedSymbol.symbol,resolvedSymbol);});}/**
     * @param {?} sourceSymbol
     * @param {?} topLevelSymbolNames
     * @param {?} metadata
     * @return {?}
     */},{key:'createResolvedSymbol',value:function createResolvedSymbol(sourceSymbol,topLevelSymbolNames,metadata){var/** @type {?} */self=this;var ReferenceTransformer=function(_ValueTransformer4){_inherits(ReferenceTransformer,_ValueTransformer4);function ReferenceTransformer(){_classCallCheck(this,ReferenceTransformer);return _possibleConstructorReturn(this,(ReferenceTransformer.__proto__||Object.getPrototypeOf(ReferenceTransformer)).apply(this,arguments));}_createClass(ReferenceTransformer,[{key:'visitStringMap',/**
             * @param {?} map
             * @param {?} functionParams
             * @return {?}
             */value:function visitStringMap(map,functionParams){var/** @type {?} */symbolic=map['__symbolic'];if(symbolic==='function'){var/** @type {?} */oldLen=functionParams.length;functionParams.push.apply(functionParams,_toConsumableArray(map['parameters']||[]));var/** @type {?} */result=_get(ReferenceTransformer.prototype.__proto__||Object.getPrototypeOf(ReferenceTransformer.prototype),'visitStringMap',this).call(this,map,functionParams);functionParams.length=oldLen;return result;}else if(symbolic==='reference'){var/** @type {?} */module=map['module'];var/** @type {?} */name=map['name']?unescapeIdentifier(map['name']):map['name'];if(!name){return null;}var/** @type {?} */filePath=void 0;if(module){filePath=self.resolveModule(module,sourceSymbol.filePath);if(!filePath){return{__symbolic:'error',message:'Could not resolve '+module+' relative to '+sourceSymbol.filePath+'.'};}return self.getStaticSymbol(filePath,name);}else if(functionParams.indexOf(name)>=0){// reference to a function parameter
return{__symbolic:'reference',name:name};}else{if(topLevelSymbolNames.has(name)){return self.getStaticSymbol(sourceSymbol.filePath,name);}// ambient value
null;}}else{return _get(ReferenceTransformer.prototype.__proto__||Object.getPrototypeOf(ReferenceTransformer.prototype),'visitStringMap',this).call(this,map,functionParams);}}}]);return ReferenceTransformer;}(ValueTransformer);var/** @type {?} */transformedMeta=visitValue(metadata,new ReferenceTransformer(),[]);if(transformedMeta instanceof StaticSymbol){return this.createExport(sourceSymbol,transformedMeta);}return new ResolvedStaticSymbol(sourceSymbol,transformedMeta);}/**
     * @param {?} sourceSymbol
     * @param {?} targetSymbol
     * @return {?}
     */},{key:'createExport',value:function createExport(sourceSymbol,targetSymbol){sourceSymbol.assertNoMembers();targetSymbol.assertNoMembers();if(this.summaryResolver.isLibraryFile(sourceSymbol.filePath)){// This case is for an ng library importing symbols from a plain ts library
// transitively.
// Note: We rely on the fact that we discover symbols in the direction
// from source files to library files
this.importAs.set(targetSymbol,this.getImportAs(sourceSymbol)||sourceSymbol);}return new ResolvedStaticSymbol(sourceSymbol,targetSymbol);}/**
     * @param {?} error
     * @param {?} context
     * @param {?=} path
     * @return {?}
     */},{key:'reportError',value:function reportError(error,context,path){if(this.errorRecorder){this.errorRecorder(error,context&&context.filePath||path);}else{throw error;}}/**
     * @param {?} module an absolute path to a module file.
     * @return {?}
     */},{key:'getModuleMetadata',value:function getModuleMetadata(module){var/** @type {?} */moduleMetadata=this.metadataCache.get(module);if(!moduleMetadata){var/** @type {?} */moduleMetadatas=this.host.getMetadataFor(module);if(moduleMetadatas){var/** @type {?} */maxVersion=-1;moduleMetadatas.forEach(function(md){if(md['version']>maxVersion){maxVersion=md['version'];moduleMetadata=md;}});}if(!moduleMetadata){moduleMetadata={__symbolic:'module',version:SUPPORTED_SCHEMA_VERSION,module:module,metadata:{}};}if(moduleMetadata['version']!=SUPPORTED_SCHEMA_VERSION){var/** @type {?} */errorMessage=moduleMetadata['version']==2?'Unsupported metadata version '+moduleMetadata['version']+' for module '+module+'. This module should be compiled with a newer version of ngc':'Metadata version mismatch for module '+module+', found version '+moduleMetadata['version']+', expected '+SUPPORTED_SCHEMA_VERSION;this.reportError(new Error(errorMessage),null);}this.metadataCache.set(module,moduleMetadata);}return moduleMetadata;}/**
     * @param {?} module
     * @param {?} symbolName
     * @param {?=} containingFile
     * @return {?}
     */},{key:'getSymbolByModule',value:function getSymbolByModule(module,symbolName,containingFile){var/** @type {?} */filePath=this.resolveModule(module,containingFile);if(!filePath){this.reportError(new Error('Could not resolve module '+module+(containingFile?' relative to $ {\n            containingFile\n          } ':'')),null);return this.getStaticSymbol('ERROR:'+module,symbolName);}return this.getStaticSymbol(filePath,symbolName);}/**
     * @param {?} module
     * @param {?} containingFile
     * @return {?}
     */},{key:'resolveModule',value:function resolveModule(module,containingFile){try{return this.host.moduleNameToFileName(module,containingFile);}catch(e){console.error('Could not resolve module \''+module+'\' relative to file '+containingFile);this.reportError(e,null,containingFile);}}}]);return StaticSymbolResolver;}();/**
 * @param {?} identifier
 * @return {?}
 */function unescapeIdentifier(identifier){return identifier.startsWith('___')?identifier.substr(1):identifier;}var AotSummaryResolver=function(){/**
     * @param {?} host
     * @param {?} staticSymbolCache
     */function AotSummaryResolver(host,staticSymbolCache){_classCallCheck(this,AotSummaryResolver);this.host=host;this.staticSymbolCache=staticSymbolCache;this.summaryCache=new Map();this.loadedFilePaths=new Set();this.importAs=new Map();}/**
     * @param {?} filePath
     * @return {?}
     */_createClass(AotSummaryResolver,[{key:'isLibraryFile',value:function isLibraryFile(filePath){// Note: We need to strip the .ngfactory. file path,
// so this method also works for generated files
// (for which host.isSourceFile will always return false).
return!this.host.isSourceFile(stripNgFactory(filePath));}/**
     * @param {?} filePath
     * @return {?}
     */},{key:'getLibraryFileName',value:function getLibraryFileName(filePath){return this.host.getOutputFileName(filePath);}/**
     * @param {?} staticSymbol
     * @return {?}
     */},{key:'resolveSummary',value:function resolveSummary(staticSymbol){staticSymbol.assertNoMembers();var/** @type {?} */summary=this.summaryCache.get(staticSymbol);if(!summary){this._loadSummaryFile(staticSymbol.filePath);summary=this.summaryCache.get(staticSymbol);}return summary;}/**
     * @param {?} filePath
     * @return {?}
     */},{key:'getSymbolsOf',value:function getSymbolsOf(filePath){this._loadSummaryFile(filePath);return Array.from(this.summaryCache.keys()).filter(function(symbol){return symbol.filePath===filePath;});}/**
     * @param {?} staticSymbol
     * @return {?}
     */},{key:'getImportAs',value:function getImportAs(staticSymbol){staticSymbol.assertNoMembers();return this.importAs.get(staticSymbol);}/**
     * @param {?} filePath
     * @return {?}
     */},{key:'_loadSummaryFile',value:function _loadSummaryFile(filePath){var _this240=this;if(this.loadedFilePaths.has(filePath)){return;}this.loadedFilePaths.add(filePath);if(this.isLibraryFile(filePath)){var/** @type {?} */summaryFilePath=summaryFileName(filePath);var/** @type {?} */json=void 0;try{json=this.host.loadSummary(summaryFilePath);}catch(e){console.error('Error loading summary file '+summaryFilePath);throw e;}if(json){var _deserializeSummaries=deserializeSummaries(this.staticSymbolCache,json),summaries=_deserializeSummaries.summaries,importAs=_deserializeSummaries.importAs;summaries.forEach(function(summary){return _this240.summaryCache.set(summary.symbol,summary);});importAs.forEach(function(importAs){_this240.importAs.set(importAs.symbol,_this240.staticSymbolCache.get(ngfactoryFilePath(filePath),importAs.importAs));});}}}}]);return AotSummaryResolver;}();/**
 * Creates a new AotCompiler based on options and a host.
 * @param {?} compilerHost
 * @param {?} options
 * @return {?}
 */function createAotCompiler(compilerHost,options){var/** @type {?} */translations=options.translations||'';var/** @type {?} */urlResolver=createOfflineCompileUrlResolver();var/** @type {?} */symbolCache=new StaticSymbolCache();var/** @type {?} */summaryResolver=new AotSummaryResolver(compilerHost,symbolCache);var/** @type {?} */symbolResolver=new StaticSymbolResolver(compilerHost,symbolCache,summaryResolver);var/** @type {?} */staticReflector=new StaticReflector(symbolResolver);StaticAndDynamicReflectionCapabilities.install(staticReflector);var/** @type {?} */console=new __WEBPACK_IMPORTED_MODULE_0__angular_core__["_98" /* ɵConsole */]();var/** @type {?} */htmlParser=new I18NHtmlParser(new HtmlParser(),translations,options.i18nFormat,__WEBPACK_IMPORTED_MODULE_0__angular_core__["_97" /* MissingTranslationStrategy */].Warning,console);var/** @type {?} */config=new CompilerConfig({genDebugInfo:options.debug===true,defaultEncapsulation:__WEBPACK_IMPORTED_MODULE_0__angular_core__["Q" /* ViewEncapsulation */].Emulated,logBindingUpdate:false,useJit:false,useViewEngine:options.useViewEngine,enableLegacyTemplate:options.enableLegacyTemplate!==false});var/** @type {?} */normalizer=new DirectiveNormalizer({get:function get(url){return compilerHost.loadResource(url);}},urlResolver,htmlParser,config);var/** @type {?} */expressionParser=new Parser(new Lexer());var/** @type {?} */elementSchemaRegistry=new DomElementSchemaRegistry();var/** @type {?} */tmplParser=new TemplateParser(config,expressionParser,elementSchemaRegistry,htmlParser,console,[]);var/** @type {?} */resolver=new CompileMetadataResolver(config,new NgModuleResolver(staticReflector),new DirectiveResolver(staticReflector),new PipeResolver(staticReflector),summaryResolver,elementSchemaRegistry,normalizer,symbolCache,staticReflector);// TODO(vicb): do not pass options.i18nFormat here
var/** @type {?} */importResolver={getImportAs:function getImportAs(symbol){return symbolResolver.getImportAs(symbol);},fileNameToModuleName:function fileNameToModuleName(fileName,containingFilePath){return compilerHost.fileNameToModuleName(fileName,containingFilePath);},getTypeArity:function getTypeArity(symbol){return symbolResolver.getTypeArity(symbol);}};var/** @type {?} */viewCompiler=config.useViewEngine?new ViewCompilerNext(config,elementSchemaRegistry):new ViewCompiler(config,elementSchemaRegistry);var/** @type {?} */compiler=new AotCompiler(config,compilerHost,resolver,tmplParser,new StyleCompiler(urlResolver),viewCompiler,new DirectiveWrapperCompiler(config,expressionParser,elementSchemaRegistry,console),new NgModuleCompiler(),new TypeScriptEmitter(importResolver),summaryResolver,options.locale,options.i18nFormat,new AnimationParser(elementSchemaRegistry),symbolResolver);return{compiler:compiler,reflector:staticReflector};}/**
 * @param {?} statements
 * @param {?} resultVars
 * @return {?}
 */function interpretStatements(statements,resultVars){var/** @type {?} */stmtsWithReturn=statements.concat([new ReturnStatement(literalArr(resultVars.map(function(resultVar){return variable(resultVar);})))]);var/** @type {?} */ctx=new _ExecutionContext(null,null,null,new Map());var/** @type {?} */visitor=new StatementInterpreter();var/** @type {?} */result=visitor.visitAllStatements(stmtsWithReturn,ctx);return isPresent(result)?result.value:null;}/**
 * @param {?} varNames
 * @param {?} varValues
 * @param {?} statements
 * @param {?} ctx
 * @param {?} visitor
 * @return {?}
 */function _executeFunctionStatements(varNames,varValues,statements,ctx,visitor){var/** @type {?} */childCtx=ctx.createChildWihtLocalVars();for(var/** @type {?} */i=0;i<varNames.length;i++){childCtx.vars.set(varNames[i],varValues[i]);}var/** @type {?} */result=visitor.visitAllStatements(statements,childCtx);return result?result.value:null;}var _ExecutionContext=function(){/**
     * @param {?} parent
     * @param {?} instance
     * @param {?} className
     * @param {?} vars
     */function _ExecutionContext(parent,instance,className,vars){_classCallCheck(this,_ExecutionContext);this.parent=parent;this.instance=instance;this.className=className;this.vars=vars;}/**
     * @return {?}
     */_createClass(_ExecutionContext,[{key:'createChildWihtLocalVars',value:function createChildWihtLocalVars(){return new _ExecutionContext(this,this.instance,this.className,new Map());}}]);return _ExecutionContext;}();var ReturnValue=/**
     * @param {?} value
     */function ReturnValue(value){_classCallCheck(this,ReturnValue);this.value=value;};/**
 * @param {?} _classStmt
 * @param {?} _ctx
 * @param {?} _visitor
 * @return {?}
 */function createDynamicClass(_classStmt,_ctx,_visitor){var/** @type {?} */propertyDescriptors={};_classStmt.getters.forEach(function(getter){// Note: use `function` instead of arrow function to capture `this`
propertyDescriptors[getter.name]={configurable:false,get:function get(){var/** @type {?} */instanceCtx=new _ExecutionContext(_ctx,this,_classStmt.name,_ctx.vars);return _executeFunctionStatements([],[],getter.body,instanceCtx,_visitor);}};});_classStmt.methods.forEach(function(method){var/** @type {?} */paramNames=method.params.map(function(param){return param.name;});// Note: use `function` instead of arrow function to capture `this`
propertyDescriptors[method.name]={writable:false,configurable:false,value:function value(){var/** @type {?} */instanceCtx=new _ExecutionContext(_ctx,this,_classStmt.name,_ctx.vars);for(var _len5=arguments.length,args=Array(_len5),_key5=0;_key5<_len5;_key5++){args[_key5]=arguments[_key5];}return _executeFunctionStatements(paramNames,args,method.body,instanceCtx,_visitor);}};});var/** @type {?} */ctorParamNames=_classStmt.constructorMethod.params.map(function(param){return param.name;});// Note: use `function` instead of arrow function to capture `this`
var/** @type {?} */ctor=function ctor(){var _this241=this;var/** @type {?} */instanceCtx=new _ExecutionContext(_ctx,this,_classStmt.name,_ctx.vars);_classStmt.fields.forEach(function(field){_this241[field.name]=undefined;});for(var _len6=arguments.length,args=Array(_len6),_key6=0;_key6<_len6;_key6++){args[_key6]=arguments[_key6];}_executeFunctionStatements(ctorParamNames,args,_classStmt.constructorMethod.body,instanceCtx,_visitor);};var/** @type {?} */superClass=_classStmt.parent?_classStmt.parent.visitExpression(_visitor,_ctx):Object;ctor.prototype=Object.create(superClass.prototype,propertyDescriptors);return ctor;}var StatementInterpreter=function(){function StatementInterpreter(){_classCallCheck(this,StatementInterpreter);}_createClass(StatementInterpreter,[{key:'debugAst',/**
     * @param {?} ast
     * @return {?}
     */value:function debugAst(ast){return debugOutputAstAsTypeScript(ast);}/**
     * @param {?} stmt
     * @param {?} ctx
     * @return {?}
     */},{key:'visitDeclareVarStmt',value:function visitDeclareVarStmt(stmt,ctx){ctx.vars.set(stmt.name,stmt.value.visitExpression(this,ctx));return null;}/**
     * @param {?} expr
     * @param {?} ctx
     * @return {?}
     */},{key:'visitWriteVarExpr',value:function visitWriteVarExpr(expr,ctx){var/** @type {?} */value=expr.value.visitExpression(this,ctx);var/** @type {?} */currCtx=ctx;while(currCtx!=null){if(currCtx.vars.has(expr.name)){currCtx.vars.set(expr.name,value);return value;}currCtx=currCtx.parent;}throw new Error('Not declared variable '+expr.name);}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitReadVarExpr',value:function visitReadVarExpr(ast,ctx){var/** @type {?} */varName=ast.name;if(isPresent(ast.builtin)){switch(ast.builtin){case BuiltinVar.Super:return ctx.instance.__proto__;case BuiltinVar.This:return ctx.instance;case BuiltinVar.CatchError:varName=CATCH_ERROR_VAR$2;break;case BuiltinVar.CatchStack:varName=CATCH_STACK_VAR$2;break;default:throw new Error('Unknown builtin variable '+ast.builtin);}}var/** @type {?} */currCtx=ctx;while(currCtx!=null){if(currCtx.vars.has(varName)){return currCtx.vars.get(varName);}currCtx=currCtx.parent;}throw new Error('Not declared variable '+varName);}/**
     * @param {?} expr
     * @param {?} ctx
     * @return {?}
     */},{key:'visitWriteKeyExpr',value:function visitWriteKeyExpr(expr,ctx){var/** @type {?} */receiver=expr.receiver.visitExpression(this,ctx);var/** @type {?} */index=expr.index.visitExpression(this,ctx);var/** @type {?} */value=expr.value.visitExpression(this,ctx);receiver[index]=value;return value;}/**
     * @param {?} expr
     * @param {?} ctx
     * @return {?}
     */},{key:'visitWritePropExpr',value:function visitWritePropExpr(expr,ctx){var/** @type {?} */receiver=expr.receiver.visitExpression(this,ctx);var/** @type {?} */value=expr.value.visitExpression(this,ctx);receiver[expr.name]=value;return value;}/**
     * @param {?} expr
     * @param {?} ctx
     * @return {?}
     */},{key:'visitInvokeMethodExpr',value:function visitInvokeMethodExpr(expr,ctx){var/** @type {?} */receiver=expr.receiver.visitExpression(this,ctx);var/** @type {?} */args=this.visitAllExpressions(expr.args,ctx);var/** @type {?} */result=void 0;if(isPresent(expr.builtin)){switch(expr.builtin){case BuiltinMethod.ConcatArray:result=receiver.concat.apply(receiver,_toConsumableArray(args));break;case BuiltinMethod.SubscribeObservable:result=receiver.subscribe({next:args[0]});break;case BuiltinMethod.Bind:result=receiver.bind.apply(receiver,_toConsumableArray(args));break;default:throw new Error('Unknown builtin method '+expr.builtin);}}else{result=receiver[expr.name].apply(receiver,args);}return result;}/**
     * @param {?} stmt
     * @param {?} ctx
     * @return {?}
     */},{key:'visitInvokeFunctionExpr',value:function visitInvokeFunctionExpr(stmt,ctx){var/** @type {?} */args=this.visitAllExpressions(stmt.args,ctx);var/** @type {?} */fnExpr=stmt.fn;if(fnExpr instanceof ReadVarExpr&&fnExpr.builtin===BuiltinVar.Super){ctx.instance.constructor.prototype.constructor.apply(ctx.instance,args);return null;}else{var/** @type {?} */_fn=stmt.fn.visitExpression(this,ctx);return _fn.apply(null,args);}}/**
     * @param {?} stmt
     * @param {?} ctx
     * @return {?}
     */},{key:'visitReturnStmt',value:function visitReturnStmt(stmt,ctx){return new ReturnValue(stmt.value.visitExpression(this,ctx));}/**
     * @param {?} stmt
     * @param {?} ctx
     * @return {?}
     */},{key:'visitDeclareClassStmt',value:function visitDeclareClassStmt(stmt,ctx){var/** @type {?} */clazz=createDynamicClass(stmt,ctx,this);ctx.vars.set(stmt.name,clazz);return null;}/**
     * @param {?} stmt
     * @param {?} ctx
     * @return {?}
     */},{key:'visitExpressionStmt',value:function visitExpressionStmt(stmt,ctx){return stmt.expr.visitExpression(this,ctx);}/**
     * @param {?} stmt
     * @param {?} ctx
     * @return {?}
     */},{key:'visitIfStmt',value:function visitIfStmt(stmt,ctx){var/** @type {?} */condition=stmt.condition.visitExpression(this,ctx);if(condition){return this.visitAllStatements(stmt.trueCase,ctx);}else if(isPresent(stmt.falseCase)){return this.visitAllStatements(stmt.falseCase,ctx);}return null;}/**
     * @param {?} stmt
     * @param {?} ctx
     * @return {?}
     */},{key:'visitTryCatchStmt',value:function visitTryCatchStmt(stmt,ctx){try{return this.visitAllStatements(stmt.bodyStmts,ctx);}catch(e){var/** @type {?} */childCtx=ctx.createChildWihtLocalVars();childCtx.vars.set(CATCH_ERROR_VAR$2,e);childCtx.vars.set(CATCH_STACK_VAR$2,e.stack);return this.visitAllStatements(stmt.catchStmts,childCtx);}}/**
     * @param {?} stmt
     * @param {?} ctx
     * @return {?}
     */},{key:'visitThrowStmt',value:function visitThrowStmt(stmt,ctx){throw stmt.error.visitExpression(this,ctx);}/**
     * @param {?} stmt
     * @param {?=} context
     * @return {?}
     */},{key:'visitCommentStmt',value:function visitCommentStmt(stmt,context){return null;}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitInstantiateExpr',value:function visitInstantiateExpr(ast,ctx){var/** @type {?} */args=this.visitAllExpressions(ast.args,ctx);var/** @type {?} */clazz=ast.classExpr.visitExpression(this,ctx);return new(Function.prototype.bind.apply(clazz,[null].concat(_toConsumableArray(args))))();}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitLiteralExpr',value:function visitLiteralExpr(ast,ctx){return ast.value;}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitExternalExpr',value:function visitExternalExpr(ast,ctx){return ast.value.reference;}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitConditionalExpr',value:function visitConditionalExpr(ast,ctx){if(ast.condition.visitExpression(this,ctx)){return ast.trueCase.visitExpression(this,ctx);}else if(isPresent(ast.falseCase)){return ast.falseCase.visitExpression(this,ctx);}return null;}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitNotExpr',value:function visitNotExpr(ast,ctx){return!ast.condition.visitExpression(this,ctx);}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitCastExpr',value:function visitCastExpr(ast,ctx){return ast.value.visitExpression(this,ctx);}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitFunctionExpr',value:function visitFunctionExpr(ast,ctx){var/** @type {?} */paramNames=ast.params.map(function(param){return param.name;});return _declareFn(paramNames,ast.statements,ctx,this);}/**
     * @param {?} stmt
     * @param {?} ctx
     * @return {?}
     */},{key:'visitDeclareFunctionStmt',value:function visitDeclareFunctionStmt(stmt,ctx){var/** @type {?} */paramNames=stmt.params.map(function(param){return param.name;});ctx.vars.set(stmt.name,_declareFn(paramNames,stmt.statements,ctx,this));return null;}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitBinaryOperatorExpr',value:function visitBinaryOperatorExpr(ast,ctx){var _this242=this;var/** @type {?} */lhs=function lhs(){return ast.lhs.visitExpression(_this242,ctx);};var/** @type {?} */rhs=function rhs(){return ast.rhs.visitExpression(_this242,ctx);};switch(ast.operator){case BinaryOperator.Equals:return lhs()==rhs();case BinaryOperator.Identical:return lhs()===rhs();case BinaryOperator.NotEquals:return lhs()!=rhs();case BinaryOperator.NotIdentical:return lhs()!==rhs();case BinaryOperator.And:return lhs()&&rhs();case BinaryOperator.Or:return lhs()||rhs();case BinaryOperator.Plus:return lhs()+rhs();case BinaryOperator.Minus:return lhs()-rhs();case BinaryOperator.Divide:return lhs()/rhs();case BinaryOperator.Multiply:return lhs()*rhs();case BinaryOperator.Modulo:return lhs()%rhs();case BinaryOperator.Lower:return lhs()<rhs();case BinaryOperator.LowerEquals:return lhs()<=rhs();case BinaryOperator.Bigger:return lhs()>rhs();case BinaryOperator.BiggerEquals:return lhs()>=rhs();default:throw new Error('Unknown operator '+ast.operator);}}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitReadPropExpr',value:function visitReadPropExpr(ast,ctx){var/** @type {?} */result=void 0;var/** @type {?} */receiver=ast.receiver.visitExpression(this,ctx);result=receiver[ast.name];return result;}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitReadKeyExpr',value:function visitReadKeyExpr(ast,ctx){var/** @type {?} */receiver=ast.receiver.visitExpression(this,ctx);var/** @type {?} */prop=ast.index.visitExpression(this,ctx);return receiver[prop];}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitLiteralArrayExpr',value:function visitLiteralArrayExpr(ast,ctx){return this.visitAllExpressions(ast.entries,ctx);}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitLiteralMapExpr',value:function visitLiteralMapExpr(ast,ctx){var _this243=this;var/** @type {?} */result={};ast.entries.forEach(function(entry){return result[entry.key]=entry.value.visitExpression(_this243,ctx);});return result;}/**
     * @param {?} expressions
     * @param {?} ctx
     * @return {?}
     */},{key:'visitAllExpressions',value:function visitAllExpressions(expressions,ctx){var _this244=this;return expressions.map(function(expr){return expr.visitExpression(_this244,ctx);});}/**
     * @param {?} statements
     * @param {?} ctx
     * @return {?}
     */},{key:'visitAllStatements',value:function visitAllStatements(statements,ctx){for(var/** @type {?} */i=0;i<statements.length;i++){var/** @type {?} */stmt=statements[i];var/** @type {?} */val=stmt.visitStatement(this,ctx);if(val instanceof ReturnValue){return val;}}return null;}}]);return StatementInterpreter;}();/**
 * @param {?} varNames
 * @param {?} statements
 * @param {?} ctx
 * @param {?} visitor
 * @return {?}
 */function _declareFn(varNames,statements,ctx,visitor){return function(){for(var _len7=arguments.length,args=Array(_len7),_key7=0;_key7<_len7;_key7++){args[_key7]=arguments[_key7];}return _executeFunctionStatements(varNames,args,statements,ctx,visitor);};}var/** @type {?} */CATCH_ERROR_VAR$2='error';var/** @type {?} */CATCH_STACK_VAR$2='stack';/**
 * @abstract
 */var AbstractJsEmitterVisitor=function(_AbstractEmitterVisit2){_inherits(AbstractJsEmitterVisitor,_AbstractEmitterVisit2);function AbstractJsEmitterVisitor(){_classCallCheck(this,AbstractJsEmitterVisitor);return _possibleConstructorReturn(this,(AbstractJsEmitterVisitor.__proto__||Object.getPrototypeOf(AbstractJsEmitterVisitor)).call(this,false));}/**
     * @param {?} stmt
     * @param {?} ctx
     * @return {?}
     */_createClass(AbstractJsEmitterVisitor,[{key:'visitDeclareClassStmt',value:function visitDeclareClassStmt(stmt,ctx){var _this246=this;ctx.pushClass(stmt);this._visitClassConstructor(stmt,ctx);if(isPresent(stmt.parent)){ctx.print(stmt,stmt.name+'.prototype = Object.create(');stmt.parent.visitExpression(this,ctx);ctx.println(stmt,'.prototype);');}stmt.getters.forEach(function(getter){return _this246._visitClassGetter(stmt,getter,ctx);});stmt.methods.forEach(function(method){return _this246._visitClassMethod(stmt,method,ctx);});ctx.popClass();return null;}/**
     * @param {?} stmt
     * @param {?} ctx
     * @return {?}
     */},{key:'_visitClassConstructor',value:function _visitClassConstructor(stmt,ctx){ctx.print(stmt,'function '+stmt.name+'(');if(isPresent(stmt.constructorMethod)){this._visitParams(stmt.constructorMethod.params,ctx);}ctx.println(stmt,') {');ctx.incIndent();if(isPresent(stmt.constructorMethod)){if(stmt.constructorMethod.body.length>0){ctx.println(stmt,'var self = this;');this.visitAllStatements(stmt.constructorMethod.body,ctx);}}ctx.decIndent();ctx.println(stmt,'}');}/**
     * @param {?} stmt
     * @param {?} getter
     * @param {?} ctx
     * @return {?}
     */},{key:'_visitClassGetter',value:function _visitClassGetter(stmt,getter,ctx){ctx.println(stmt,'Object.defineProperty('+stmt.name+'.prototype, \''+getter.name+'\', { get: function() {');ctx.incIndent();if(getter.body.length>0){ctx.println(stmt,'var self = this;');this.visitAllStatements(getter.body,ctx);}ctx.decIndent();ctx.println(stmt,'}});');}/**
     * @param {?} stmt
     * @param {?} method
     * @param {?} ctx
     * @return {?}
     */},{key:'_visitClassMethod',value:function _visitClassMethod(stmt,method,ctx){ctx.print(stmt,stmt.name+'.prototype.'+method.name+' = function(');this._visitParams(method.params,ctx);ctx.println(stmt,') {');ctx.incIndent();if(method.body.length>0){ctx.println(stmt,'var self = this;');this.visitAllStatements(method.body,ctx);}ctx.decIndent();ctx.println(stmt,'};');}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitReadVarExpr',value:function visitReadVarExpr(ast,ctx){if(ast.builtin===BuiltinVar.This){ctx.print(ast,'self');}else if(ast.builtin===BuiltinVar.Super){throw new Error('\'super\' needs to be handled at a parent ast node, not at the variable level!');}else{_get(AbstractJsEmitterVisitor.prototype.__proto__||Object.getPrototypeOf(AbstractJsEmitterVisitor.prototype),'visitReadVarExpr',this).call(this,ast,ctx);}return null;}/**
     * @param {?} stmt
     * @param {?} ctx
     * @return {?}
     */},{key:'visitDeclareVarStmt',value:function visitDeclareVarStmt(stmt,ctx){ctx.print(stmt,'var '+stmt.name+' = ');stmt.value.visitExpression(this,ctx);ctx.println(stmt,';');return null;}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitCastExpr',value:function visitCastExpr(ast,ctx){ast.value.visitExpression(this,ctx);return null;}/**
     * @param {?} expr
     * @param {?} ctx
     * @return {?}
     */},{key:'visitInvokeFunctionExpr',value:function visitInvokeFunctionExpr(expr,ctx){var/** @type {?} */fnExpr=expr.fn;if(fnExpr instanceof ReadVarExpr&&fnExpr.builtin===BuiltinVar.Super){ctx.currentClass.parent.visitExpression(this,ctx);ctx.print(expr,'.call(this');if(expr.args.length>0){ctx.print(expr,', ');this.visitAllExpressions(expr.args,ctx,',');}ctx.print(expr,')');}else{_get(AbstractJsEmitterVisitor.prototype.__proto__||Object.getPrototypeOf(AbstractJsEmitterVisitor.prototype),'visitInvokeFunctionExpr',this).call(this,expr,ctx);}return null;}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitFunctionExpr',value:function visitFunctionExpr(ast,ctx){ctx.print(ast,'function(');this._visitParams(ast.params,ctx);ctx.println(ast,') {');ctx.incIndent();this.visitAllStatements(ast.statements,ctx);ctx.decIndent();ctx.print(ast,'}');return null;}/**
     * @param {?} stmt
     * @param {?} ctx
     * @return {?}
     */},{key:'visitDeclareFunctionStmt',value:function visitDeclareFunctionStmt(stmt,ctx){ctx.print(stmt,'function '+stmt.name+'(');this._visitParams(stmt.params,ctx);ctx.println(stmt,') {');ctx.incIndent();this.visitAllStatements(stmt.statements,ctx);ctx.decIndent();ctx.println(stmt,'}');return null;}/**
     * @param {?} stmt
     * @param {?} ctx
     * @return {?}
     */},{key:'visitTryCatchStmt',value:function visitTryCatchStmt(stmt,ctx){ctx.println(stmt,'try {');ctx.incIndent();this.visitAllStatements(stmt.bodyStmts,ctx);ctx.decIndent();ctx.println(stmt,'} catch ('+CATCH_ERROR_VAR$1.name+') {');ctx.incIndent();var/** @type {?} */catchStmts=[/** @type {?} */CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop('stack')).toDeclStmt(null,[StmtModifier.Final])].concat(stmt.catchStmts);this.visitAllStatements(catchStmts,ctx);ctx.decIndent();ctx.println(stmt,'}');return null;}/**
     * @param {?} params
     * @param {?} ctx
     * @return {?}
     */},{key:'_visitParams',value:function _visitParams(params,ctx){this.visitAllObjects(function(param){return ctx.print(null,param.name);},params,ctx,',');}/**
     * @param {?} method
     * @return {?}
     */},{key:'getBuiltinMethodName',value:function getBuiltinMethodName(method){var/** @type {?} */name=void 0;switch(method){case BuiltinMethod.ConcatArray:name='concat';break;case BuiltinMethod.SubscribeObservable:name='subscribe';break;case BuiltinMethod.Bind:name='bind';break;default:throw new Error('Unknown builtin method: '+method);}return name;}}]);return AbstractJsEmitterVisitor;}(AbstractEmitterVisitor);/**
 * @param {?} sourceUrl
 * @param {?} ctx
 * @param {?} vars
 * @return {?}
 */function evalExpression(sourceUrl,ctx,vars){var/** @type {?} */fnBody=ctx.toSource()+'\n//# sourceURL='+sourceUrl+'\n'+ctx.toSourceMapGenerator().toJsComment();var/** @type {?} */fnArgNames=[];var/** @type {?} */fnArgValues=[];for(var/** @type {?} */argName in vars){fnArgNames.push(argName);fnArgValues.push(vars[argName]);}return new(Function.prototype.bind.apply(Function,[null].concat(_toConsumableArray(fnArgNames.concat(fnBody)))))().apply(undefined,fnArgValues);}/**
 * @param {?} sourceUrl
 * @param {?} statements
 * @param {?} resultVars
 * @return {?}
 */function jitStatements(sourceUrl,statements,resultVars){var/** @type {?} */converter=new JitEmitterVisitor();var/** @type {?} */ctx=EmitterVisitorContext.createRoot(resultVars);var/** @type {?} */returnStmt=new ReturnStatement(literalArr(resultVars.map(function(resultVar){return variable(resultVar);})));converter.visitAllStatements(statements.concat([returnStmt]),ctx);return evalExpression(sourceUrl,ctx,converter.getArgs());}var JitEmitterVisitor=function(_AbstractJsEmitterVis){_inherits(JitEmitterVisitor,_AbstractJsEmitterVis);function JitEmitterVisitor(){_classCallCheck(this,JitEmitterVisitor);var _this247=_possibleConstructorReturn(this,(JitEmitterVisitor.__proto__||Object.getPrototypeOf(JitEmitterVisitor)).apply(this,arguments));_this247._evalArgNames=[];_this247._evalArgValues=[];return _this247;}/**
     * @return {?}
     */_createClass(JitEmitterVisitor,[{key:'getArgs',value:function getArgs(){var/** @type {?} */result={};for(var/** @type {?} */i=0;i<this._evalArgNames.length;i++){result[this._evalArgNames[i]]=this._evalArgValues[i];}return result;}/**
     * @param {?} ast
     * @param {?} ctx
     * @return {?}
     */},{key:'visitExternalExpr',value:function visitExternalExpr(ast,ctx){var/** @type {?} */value=ast.value.reference;var/** @type {?} */id=this._evalArgValues.indexOf(value);if(id===-1){id=this._evalArgValues.length;this._evalArgValues.push(value);var/** @type {?} */name=identifierName(ast.value)||'val';this._evalArgNames.push('jit_'+name+id);}ctx.print(ast,this._evalArgNames[id]);return null;}}]);return JitEmitterVisitor;}(AbstractJsEmitterVisitor);/**
 * An internal module of the Angular compiler that begins with component types,
 * extracts templates, and eventually produces a compiled version of the component
 * ready for linking into an application.
 *
 * \@security When compiling templates at runtime, you must ensure that the entire template comes
 * from a trusted source. Attacker-controlled data introduced by a template could expose your
 * application to XSS risks.  For more detail, see the [Security Guide](http://g.co/ng/security).
 */var JitCompiler=function(){/**
     * @param {?} _injector
     * @param {?} _metadataResolver
     * @param {?} _templateParser
     * @param {?} _styleCompiler
     * @param {?} _viewCompiler
     * @param {?} _ngModuleCompiler
     * @param {?} _directiveWrapperCompiler
     * @param {?} _compilerConfig
     * @param {?} _animationParser
     */function JitCompiler(_injector,_metadataResolver,_templateParser,_styleCompiler,_viewCompiler,_ngModuleCompiler,_directiveWrapperCompiler,_compilerConfig,_animationParser){_classCallCheck(this,JitCompiler);this._injector=_injector;this._metadataResolver=_metadataResolver;this._templateParser=_templateParser;this._styleCompiler=_styleCompiler;this._viewCompiler=_viewCompiler;this._ngModuleCompiler=_ngModuleCompiler;this._directiveWrapperCompiler=_directiveWrapperCompiler;this._compilerConfig=_compilerConfig;this._animationParser=_animationParser;this._compiledTemplateCache=new Map();this._compiledHostTemplateCache=new Map();this._compiledDirectiveWrapperCache=new Map();this._compiledNgModuleCache=new Map();this._animationCompiler=new AnimationCompiler();}/**
     * @return {?}
     */_createClass(JitCompiler,[{key:'compileModuleSync',/**
     * @param {?} moduleType
     * @return {?}
     */value:function compileModuleSync(moduleType){return this._compileModuleAndComponents(moduleType,true).syncResult;}/**
     * @param {?} moduleType
     * @return {?}
     */},{key:'compileModuleAsync',value:function compileModuleAsync(moduleType){return this._compileModuleAndComponents(moduleType,false).asyncResult;}/**
     * @param {?} moduleType
     * @return {?}
     */},{key:'compileModuleAndAllComponentsSync',value:function compileModuleAndAllComponentsSync(moduleType){return this._compileModuleAndAllComponents(moduleType,true).syncResult;}/**
     * @param {?} moduleType
     * @return {?}
     */},{key:'compileModuleAndAllComponentsAsync',value:function compileModuleAndAllComponentsAsync(moduleType){return this._compileModuleAndAllComponents(moduleType,false).asyncResult;}/**
     * @param {?} component
     * @return {?}
     */},{key:'getNgContentSelectors',value:function getNgContentSelectors(component){var/** @type {?} */template=this._compiledTemplateCache.get(component);if(!template){throw new Error('The component '+stringify(component)+' is not yet compiled!');}return template.compMeta.template.ngContentSelectors;}/**
     * @param {?} moduleType
     * @param {?} isSync
     * @return {?}
     */},{key:'_compileModuleAndComponents',value:function _compileModuleAndComponents(moduleType,isSync){var _this248=this;var/** @type {?} */loadingPromise=this._loadModules(moduleType,isSync);var/** @type {?} */createResult=function createResult(){_this248._compileComponents(moduleType,null);return _this248._compileModule(moduleType);};if(isSync){return new SyncAsyncResult(createResult());}else{return new SyncAsyncResult(null,loadingPromise.then(createResult));}}/**
     * @param {?} moduleType
     * @param {?} isSync
     * @return {?}
     */},{key:'_compileModuleAndAllComponents',value:function _compileModuleAndAllComponents(moduleType,isSync){var _this249=this;var/** @type {?} */loadingPromise=this._loadModules(moduleType,isSync);var/** @type {?} */createResult=function createResult(){var/** @type {?} */componentFactories=[];_this249._compileComponents(moduleType,componentFactories);return new __WEBPACK_IMPORTED_MODULE_0__angular_core__["_135" /* ModuleWithComponentFactories */](_this249._compileModule(moduleType),componentFactories);};if(isSync){return new SyncAsyncResult(createResult());}else{return new SyncAsyncResult(null,loadingPromise.then(createResult));}}/**
     * @param {?} mainModule
     * @param {?} isSync
     * @return {?}
     */},{key:'_loadModules',value:function _loadModules(mainModule,isSync){var _this250=this;var/** @type {?} */loadingPromises=[];var/** @type {?} */ngModule=this._metadataResolver.getNgModuleMetadata(mainModule);// Note: the loadingPromise for a module only includes the loading of the exported directives
// of imported modules.
// However, for runtime compilation, we want to transitively compile all modules,
// so we also need to call loadNgModuleDirectiveAndPipeMetadata for all nested modules.
ngModule.transitiveModule.modules.forEach(function(localModuleMeta){loadingPromises.push(_this250._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(localModuleMeta.reference,isSync));});return Promise.all(loadingPromises);}/**
     * @param {?} moduleType
     * @return {?}
     */},{key:'_compileModule',value:function _compileModule(moduleType){var _this251=this;var/** @type {?} */ngModuleFactory=this._compiledNgModuleCache.get(moduleType);if(!ngModuleFactory){var/** @type {?} */moduleMeta=this._metadataResolver.getNgModuleMetadata(moduleType);// Always provide a bound Compiler
var/** @type {?} */extraProviders=[this._metadataResolver.getProviderMetadata(new ProviderMeta(__WEBPACK_IMPORTED_MODULE_0__angular_core__["o" /* Compiler */],{useFactory:function useFactory(){return new ModuleBoundCompiler(_this251,moduleMeta.type.reference);}}))];var/** @type {?} */compileResult=this._ngModuleCompiler.compile(moduleMeta,extraProviders);if(!this._compilerConfig.useJit){ngModuleFactory=interpretStatements(compileResult.statements,[compileResult.ngModuleFactoryVar])[0];}else{ngModuleFactory=jitStatements('/'+identifierName(moduleMeta.type)+'/module.ngfactory.js',compileResult.statements,[compileResult.ngModuleFactoryVar])[0];}this._compiledNgModuleCache.set(moduleMeta.type.reference,ngModuleFactory);}return ngModuleFactory;}/**
     * \@internal
     * @param {?} mainModule
     * @param {?} allComponentFactories
     * @return {?}
     */},{key:'_compileComponents',value:function _compileComponents(mainModule,allComponentFactories){var _this252=this;var/** @type {?} */ngModule=this._metadataResolver.getNgModuleMetadata(mainModule);var/** @type {?} */moduleByDirective=new Map();var/** @type {?} */templates=new Set();ngModule.transitiveModule.modules.forEach(function(localModuleSummary){var/** @type {?} */localModuleMeta=_this252._metadataResolver.getNgModuleMetadata(localModuleSummary.reference);localModuleMeta.declaredDirectives.forEach(function(dirIdentifier){moduleByDirective.set(dirIdentifier.reference,localModuleMeta);var/** @type {?} */dirMeta=_this252._metadataResolver.getDirectiveMetadata(dirIdentifier.reference);_this252._compileDirectiveWrapper(dirMeta,localModuleMeta);if(dirMeta.isComponent){templates.add(_this252._createCompiledTemplate(dirMeta,localModuleMeta));if(allComponentFactories){var/** @type {?} */template=_this252._createCompiledHostTemplate(dirMeta.type.reference,localModuleMeta);templates.add(template);allComponentFactories.push(/** @type {?} */dirMeta.componentFactory);}}});});ngModule.transitiveModule.modules.forEach(function(localModuleSummary){var/** @type {?} */localModuleMeta=_this252._metadataResolver.getNgModuleMetadata(localModuleSummary.reference);localModuleMeta.declaredDirectives.forEach(function(dirIdentifier){var/** @type {?} */dirMeta=_this252._metadataResolver.getDirectiveMetadata(dirIdentifier.reference);if(dirMeta.isComponent){dirMeta.entryComponents.forEach(function(entryComponentType){var/** @type {?} */moduleMeta=moduleByDirective.get(entryComponentType.componentType);templates.add(_this252._createCompiledHostTemplate(entryComponentType.componentType,moduleMeta));});}});localModuleMeta.entryComponents.forEach(function(entryComponentType){var/** @type {?} */moduleMeta=moduleByDirective.get(entryComponentType.componentType);templates.add(_this252._createCompiledHostTemplate(entryComponentType.componentType,moduleMeta));});});templates.forEach(function(template){return _this252._compileTemplate(template);});}/**
     * @param {?} type
     * @return {?}
     */},{key:'clearCacheFor',value:function clearCacheFor(type){this._compiledNgModuleCache.delete(type);this._metadataResolver.clearCacheFor(type);this._compiledHostTemplateCache.delete(type);var/** @type {?} */compiledTemplate=this._compiledTemplateCache.get(type);if(compiledTemplate){this._compiledTemplateCache.delete(type);}}/**
     * @return {?}
     */},{key:'clearCache',value:function clearCache(){this._metadataResolver.clearCache();this._compiledTemplateCache.clear();this._compiledHostTemplateCache.clear();this._compiledNgModuleCache.clear();}/**
     * @param {?} compType
     * @param {?} ngModule
     * @return {?}
     */},{key:'_createCompiledHostTemplate',value:function _createCompiledHostTemplate(compType,ngModule){if(!ngModule){throw new Error('Component '+stringify(compType)+' is not part of any NgModule or the module has not been imported into your module.');}var/** @type {?} */compiledTemplate=this._compiledHostTemplateCache.get(compType);if(!compiledTemplate){var/** @type {?} */compMeta=this._metadataResolver.getDirectiveMetadata(compType);assertComponent(compMeta);var/** @type {?} */componentFactory=compMeta.componentFactory;var/** @type {?} */hostClass=this._metadataResolver.getHostComponentType(compType);var/** @type {?} */hostMeta=createHostComponentMeta(hostClass,compMeta,/** @type {?} */__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_136" /* ɵgetComponentFactoryViewClass */])(componentFactory));compiledTemplate=new CompiledTemplate(true,compMeta.type,hostMeta,ngModule,[compMeta.type]);this._compiledHostTemplateCache.set(compType,compiledTemplate);}return compiledTemplate;}/**
     * @param {?} compMeta
     * @param {?} ngModule
     * @return {?}
     */},{key:'_createCompiledTemplate',value:function _createCompiledTemplate(compMeta,ngModule){var/** @type {?} */compiledTemplate=this._compiledTemplateCache.get(compMeta.type.reference);if(!compiledTemplate){assertComponent(compMeta);compiledTemplate=new CompiledTemplate(false,compMeta.type,compMeta,ngModule,ngModule.transitiveModule.directives);this._compiledTemplateCache.set(compMeta.type.reference,compiledTemplate);}return compiledTemplate;}/**
     * @param {?} dirMeta
     * @param {?} moduleMeta
     * @return {?}
     */},{key:'_compileDirectiveWrapper',value:function _compileDirectiveWrapper(dirMeta,moduleMeta){if(this._compilerConfig.useViewEngine){return;}var/** @type {?} */compileResult=this._directiveWrapperCompiler.compile(dirMeta);var/** @type {?} */statements=compileResult.statements;var/** @type {?} */directiveWrapperClass=void 0;if(!this._compilerConfig.useJit){directiveWrapperClass=interpretStatements(statements,[compileResult.dirWrapperClassVar])[0];}else{directiveWrapperClass=jitStatements('/'+identifierName(moduleMeta.type)+'/'+identifierName(dirMeta.type)+'/wrapper.ngfactory.js',statements,[compileResult.dirWrapperClassVar])[0];}dirMeta.wrapperType.setDelegate(directiveWrapperClass);this._compiledDirectiveWrapperCache.set(dirMeta.type.reference,directiveWrapperClass);}/**
     * @param {?} template
     * @return {?}
     */},{key:'_compileTemplate',value:function _compileTemplate(template){var _this253=this,_stylesCompileResult$;if(template.isCompiled){return;}var/** @type {?} */compMeta=template.compMeta;var/** @type {?} */externalStylesheetsByModuleUrl=new Map();var/** @type {?} */stylesCompileResult=this._styleCompiler.compileComponent(compMeta);stylesCompileResult.externalStylesheets.forEach(function(r){externalStylesheetsByModuleUrl.set(r.meta.moduleUrl,r);});this._resolveStylesCompileResult(stylesCompileResult.componentStylesheet,externalStylesheetsByModuleUrl);var/** @type {?} */parsedAnimations=this._compilerConfig.useViewEngine?[]:this._animationParser.parseComponent(compMeta);var/** @type {?} */directives=template.directives.map(function(dir){return _this253._metadataResolver.getDirectiveSummary(dir.reference);});var/** @type {?} */pipes=template.ngModule.transitiveModule.pipes.map(function(pipe){return _this253._metadataResolver.getPipeSummary(pipe.reference);});var _templateParser$parse2=this._templateParser.parse(compMeta,compMeta.template.template,directives,pipes,template.ngModule.schemas,identifierName(compMeta.type)),parsedTemplate=_templateParser$parse2.template,usedPipes=_templateParser$parse2.pipes;var/** @type {?} */compiledAnimations=this._compilerConfig.useViewEngine?[]:this._animationCompiler.compile(identifierName(compMeta.type),parsedAnimations);var/** @type {?} */compileResult=this._viewCompiler.compileComponent(compMeta,parsedTemplate,variable(stylesCompileResult.componentStylesheet.stylesVar),usedPipes,compiledAnimations);var/** @type {?} */statements=(_stylesCompileResult$=stylesCompileResult.componentStylesheet.statements).concat.apply(_stylesCompileResult$,_toConsumableArray(compiledAnimations.map(function(ca){return ca.statements;}))).concat(compileResult.statements);var/** @type {?} */viewClass=void 0;var/** @type {?} */rendererType=void 0;if(!this._compilerConfig.useJit){var _interpretStatements=interpretStatements(statements,[compileResult.viewClassVar,compileResult.rendererTypeVar]);var _interpretStatements2=_slicedToArray(_interpretStatements,2);viewClass=_interpretStatements2[0];rendererType=_interpretStatements2[1];}else{var/** @type {?} */sourceUrl='/'+identifierName(template.ngModule.type)+'/'+identifierName(template.compType)+'/'+(template.isHost?'host':'component')+'.ngfactory.js';var _jitStatements=jitStatements(sourceUrl,statements,[compileResult.viewClassVar,compileResult.rendererTypeVar]);var _jitStatements2=_slicedToArray(_jitStatements,2);viewClass=_jitStatements2[0];rendererType=_jitStatements2[1];}template.compiled(viewClass,rendererType);}/**
     * @param {?} result
     * @param {?} externalStylesheetsByModuleUrl
     * @return {?}
     */},{key:'_resolveStylesCompileResult',value:function _resolveStylesCompileResult(result,externalStylesheetsByModuleUrl){var _this254=this;result.dependencies.forEach(function(dep,i){var/** @type {?} */nestedCompileResult=externalStylesheetsByModuleUrl.get(dep.moduleUrl);var/** @type {?} */nestedStylesArr=_this254._resolveAndEvalStylesCompileResult(nestedCompileResult,externalStylesheetsByModuleUrl);dep.valuePlaceholder.reference=nestedStylesArr;});}/**
     * @param {?} result
     * @param {?} externalStylesheetsByModuleUrl
     * @return {?}
     */},{key:'_resolveAndEvalStylesCompileResult',value:function _resolveAndEvalStylesCompileResult(result,externalStylesheetsByModuleUrl){this._resolveStylesCompileResult(result,externalStylesheetsByModuleUrl);if(!this._compilerConfig.useJit){return interpretStatements(result.statements,[result.stylesVar])[0];}else{return jitStatements('/'+result.meta.moduleUrl+'.ngstyle.js',result.statements,[result.stylesVar])[0];}}},{key:'injector',get:function get(){return this._injector;}}]);return JitCompiler;}();JitCompiler.decorators=[{type:CompilerInjectable}];/** @nocollapse */JitCompiler.ctorParameters=function(){return[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["j" /* Injector */]},{type:CompileMetadataResolver},{type:TemplateParser},{type:StyleCompiler},{type:ViewCompiler},{type:NgModuleCompiler},{type:DirectiveWrapperCompiler},{type:CompilerConfig},{type:AnimationParser}];};var CompiledTemplate=function(){/**
     * @param {?} isHost
     * @param {?} compType
     * @param {?} compMeta
     * @param {?} ngModule
     * @param {?} directives
     */function CompiledTemplate(isHost,compType,compMeta,ngModule,directives){_classCallCheck(this,CompiledTemplate);this.isHost=isHost;this.compType=compType;this.compMeta=compMeta;this.ngModule=ngModule;this.directives=directives;this._viewClass=null;this.isCompiled=false;}/**
     * @param {?} viewClass
     * @param {?} rendererType
     * @return {?}
     */_createClass(CompiledTemplate,[{key:'compiled',value:function compiled(viewClass,rendererType){this._viewClass=viewClass;this.compMeta.componentViewType.setDelegate(viewClass);for(var/** @type {?} */prop in rendererType){this.compMeta.rendererType[prop]=rendererType[prop];}this.isCompiled=true;}}]);return CompiledTemplate;}();/**
 * @param {?} meta
 * @return {?}
 */function assertComponent(meta){if(!meta.isComponent){throw new Error('Could not compile \''+identifierName(meta.type)+'\' because it is not a component.');}}/**
 * Implements `Compiler` by delegating to the JitCompiler using a known module.
 */var ModuleBoundCompiler=function(){/**
     * @param {?} _delegate
     * @param {?} _ngModule
     */function ModuleBoundCompiler(_delegate,_ngModule){_classCallCheck(this,ModuleBoundCompiler);this._delegate=_delegate;this._ngModule=_ngModule;}/**
     * @return {?}
     */_createClass(ModuleBoundCompiler,[{key:'compileModuleSync',/**
     * @param {?} moduleType
     * @return {?}
     */value:function compileModuleSync(moduleType){return this._delegate.compileModuleSync(moduleType);}/**
     * @param {?} moduleType
     * @return {?}
     */},{key:'compileModuleAsync',value:function compileModuleAsync(moduleType){return this._delegate.compileModuleAsync(moduleType);}/**
     * @param {?} moduleType
     * @return {?}
     */},{key:'compileModuleAndAllComponentsSync',value:function compileModuleAndAllComponentsSync(moduleType){return this._delegate.compileModuleAndAllComponentsSync(moduleType);}/**
     * @param {?} moduleType
     * @return {?}
     */},{key:'compileModuleAndAllComponentsAsync',value:function compileModuleAndAllComponentsAsync(moduleType){return this._delegate.compileModuleAndAllComponentsAsync(moduleType);}/**
     * @param {?} component
     * @return {?}
     */},{key:'getNgContentSelectors',value:function getNgContentSelectors(component){return this._delegate.getNgContentSelectors(component);}/**
     * Clears all caches
     * @return {?}
     */},{key:'clearCache',value:function clearCache(){this._delegate.clearCache();}/**
     * Clears the cache for the given component/ngModule.
     * @param {?} type
     * @return {?}
     */},{key:'clearCacheFor',value:function clearCacheFor(type){this._delegate.clearCacheFor(type);}},{key:'_injector',get:function get(){return this._delegate.injector;}}]);return ModuleBoundCompiler;}();/**
 * A container for message extracted from the templates.
 */var MessageBundle=function(){/**
     * @param {?} _htmlParser
     * @param {?} _implicitTags
     * @param {?} _implicitAttrs
     * @param {?=} _locale
     */function MessageBundle(_htmlParser,_implicitTags,_implicitAttrs){var _locale=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;_classCallCheck(this,MessageBundle);this._htmlParser=_htmlParser;this._implicitTags=_implicitTags;this._implicitAttrs=_implicitAttrs;this._locale=_locale;this._messages=[];}/**
     * @param {?} html
     * @param {?} url
     * @param {?} interpolationConfig
     * @return {?}
     */_createClass(MessageBundle,[{key:'updateFromTemplate',value:function updateFromTemplate(html,url,interpolationConfig){var _messages;var/** @type {?} */htmlParserResult=this._htmlParser.parse(html,url,true,interpolationConfig);if(htmlParserResult.errors.length){return htmlParserResult.errors;}var/** @type {?} */i18nParserResult=extractMessages(htmlParserResult.rootNodes,interpolationConfig,this._implicitTags,this._implicitAttrs);if(i18nParserResult.errors.length){return i18nParserResult.errors;}(_messages=this._messages).push.apply(_messages,_toConsumableArray(i18nParserResult.messages));}/**
     * @return {?}
     */},{key:'getMessages',value:function getMessages(){return this._messages;}/**
     * @param {?} serializer
     * @return {?}
     */},{key:'write',value:function write(serializer){var/** @type {?} */messages={};var/** @type {?} */mapperVisitor=new MapPlaceholderNames();// Deduplicate messages based on their ID
this._messages.forEach(function(message){var/** @type {?} */id=serializer.digest(message);if(!messages.hasOwnProperty(id)){messages[id]=message;}});// Transform placeholder names using the serializer mapping
var/** @type {?} */msgList=Object.keys(messages).map(function(id){var/** @type {?} */mapper=serializer.createNameMapper(messages[id]);var/** @type {?} */src=messages[id];var/** @type {?} */nodes=mapper?mapperVisitor.convert(src.nodes,mapper):src.nodes;return new Message(nodes,{},{},src.meaning,src.description,id);});return serializer.write(msgList,this._locale);}}]);return MessageBundle;}();var MapPlaceholderNames=function(_CloneVisitor){_inherits(MapPlaceholderNames,_CloneVisitor);function MapPlaceholderNames(){_classCallCheck(this,MapPlaceholderNames);return _possibleConstructorReturn(this,(MapPlaceholderNames.__proto__||Object.getPrototypeOf(MapPlaceholderNames)).apply(this,arguments));}_createClass(MapPlaceholderNames,[{key:'convert',/**
     * @param {?} nodes
     * @param {?} mapper
     * @return {?}
     */value:function convert(nodes,mapper){var _this256=this;return mapper?nodes.map(function(n){return n.visit(_this256,mapper);}):nodes;}/**
     * @param {?} ph
     * @param {?} mapper
     * @return {?}
     */},{key:'visitTagPlaceholder',value:function visitTagPlaceholder(ph,mapper){var _this257=this;var/** @type {?} */startName=mapper.toPublicName(ph.startName);var/** @type {?} */closeName=ph.closeName?mapper.toPublicName(ph.closeName):ph.closeName;var/** @type {?} */children=ph.children.map(function(n){return n.visit(_this257,mapper);});return new TagPlaceholder(ph.tag,ph.attrs,startName,closeName,children,ph.isVoid,ph.sourceSpan);}/**
     * @param {?} ph
     * @param {?} mapper
     * @return {?}
     */},{key:'visitPlaceholder',value:function visitPlaceholder(ph,mapper){return new Placeholder(ph.value,mapper.toPublicName(ph.name),ph.sourceSpan);}/**
     * @param {?} ph
     * @param {?} mapper
     * @return {?}
     */},{key:'visitIcuPlaceholder',value:function visitIcuPlaceholder(ph,mapper){return new IcuPlaceholder(ph.value,mapper.toPublicName(ph.name),ph.sourceSpan);}}]);return MapPlaceholderNames;}(CloneVisitor);var Extractor=function(){/**
     * @param {?} host
     * @param {?} staticSymbolResolver
     * @param {?} messageBundle
     * @param {?} metadataResolver
     */function Extractor(host,staticSymbolResolver,messageBundle,metadataResolver){_classCallCheck(this,Extractor);this.host=host;this.staticSymbolResolver=staticSymbolResolver;this.messageBundle=messageBundle;this.metadataResolver=metadataResolver;}/**
     * @param {?} rootFiles
     * @return {?}
     */_createClass(Extractor,[{key:'extract',value:function extract(rootFiles){var _this258=this;var/** @type {?} */programSymbols=extractProgramSymbols(this.staticSymbolResolver,rootFiles,this.host);var _analyzeAndValidateNg2=analyzeAndValidateNgModules(programSymbols,this.host,this.metadataResolver),files=_analyzeAndValidateNg2.files,ngModules=_analyzeAndValidateNg2.ngModules;return Promise.all(ngModules.map(function(ngModule){return _this258.metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference,false);})).then(function(){var/** @type {?} */errors=[];files.forEach(function(file){var/** @type {?} */compMetas=[];file.directives.forEach(function(directiveType){var/** @type {?} */dirMeta=_this258.metadataResolver.getDirectiveMetadata(directiveType);if(dirMeta&&dirMeta.isComponent){compMetas.push(dirMeta);}});compMetas.forEach(function(compMeta){var/** @type {?} */html=compMeta.template.template;var/** @type {?} */interpolationConfig=InterpolationConfig.fromArray(compMeta.template.interpolation);errors.push.apply(errors,_toConsumableArray(_this258.messageBundle.updateFromTemplate(html,file.srcUrl,interpolationConfig)));});});if(errors.length){throw new Error(errors.map(function(e){return e.toString();}).join('\n'));}return _this258.messageBundle;});}/**
     * @param {?} host
     * @param {?} locale
     * @return {?}
     */}],[{key:'create',value:function create(host,locale){var/** @type {?} */htmlParser=new I18NHtmlParser(new HtmlParser());var/** @type {?} */urlResolver=createOfflineCompileUrlResolver();var/** @type {?} */symbolCache=new StaticSymbolCache();var/** @type {?} */summaryResolver=new AotSummaryResolver(host,symbolCache);var/** @type {?} */staticSymbolResolver=new StaticSymbolResolver(host,symbolCache,summaryResolver);var/** @type {?} */staticReflector=new StaticReflector(staticSymbolResolver);StaticAndDynamicReflectionCapabilities.install(staticReflector);var/** @type {?} */config=new CompilerConfig({genDebugInfo:false,defaultEncapsulation:__WEBPACK_IMPORTED_MODULE_0__angular_core__["Q" /* ViewEncapsulation */].Emulated,logBindingUpdate:false,useJit:false});var/** @type {?} */normalizer=new DirectiveNormalizer({get:function get(url){return host.loadResource(url);}},urlResolver,htmlParser,config);var/** @type {?} */elementSchemaRegistry=new DomElementSchemaRegistry();var/** @type {?} */resolver=new CompileMetadataResolver(config,new NgModuleResolver(staticReflector),new DirectiveResolver(staticReflector),new PipeResolver(staticReflector),summaryResolver,elementSchemaRegistry,normalizer,symbolCache,staticReflector);// TODO(vicb): implicit tags & attributes
var/** @type {?} */messageBundle=new MessageBundle(htmlParser,[],{},locale);var/** @type {?} */extractor=new Extractor(host,staticSymbolResolver,messageBundle,resolver);return{extractor:extractor,staticReflector:staticReflector};}}]);return Extractor;}();var/** @type {?} */_NO_RESOURCE_LOADER={/**
     * @param {?} url
     * @return {?}
     */get:function get(url){throw new Error('No ResourceLoader implementation has been provided. Can\'t read the url "'+url+'"');}};var/** @type {?} */baseHtmlParser=new __WEBPACK_IMPORTED_MODULE_0__angular_core__["n" /* InjectionToken */]('HtmlParser');/**
 * @param {?} cc
 * @param {?} sr
 * @return {?}
 */function viewCompilerFactory(cc,sr){return cc.useViewEngine?new ViewCompilerNext(cc,sr):new ViewCompiler(cc,sr);}/**
 * A set of providers that provide `JitCompiler` and its dependencies to use for
 * template compilation.
 */var/** @type {?} */COMPILER_PROVIDERS=[{provide:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_137" /* ɵReflector */],useValue:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_13" /* ɵreflector */]},{provide:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_104" /* ɵReflectorReader */],useExisting:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_137" /* ɵReflector */]},{provide:ResourceLoader,useValue:_NO_RESOURCE_LOADER},SummaryResolver,__WEBPACK_IMPORTED_MODULE_0__angular_core__["_98" /* ɵConsole */],Lexer,Parser,{provide:baseHtmlParser,useClass:HtmlParser},{provide:I18NHtmlParser,useFactory:function useFactory(parser,translations,format,config,console){return new I18NHtmlParser(parser,translations,format,config.missingTranslation,console);},deps:[baseHtmlParser,[new __WEBPACK_IMPORTED_MODULE_0__angular_core__["E" /* Optional */](),new __WEBPACK_IMPORTED_MODULE_0__angular_core__["I" /* Inject */](__WEBPACK_IMPORTED_MODULE_0__angular_core__["_138" /* TRANSLATIONS */])],[new __WEBPACK_IMPORTED_MODULE_0__angular_core__["E" /* Optional */](),new __WEBPACK_IMPORTED_MODULE_0__angular_core__["I" /* Inject */](__WEBPACK_IMPORTED_MODULE_0__angular_core__["_68" /* TRANSLATIONS_FORMAT */])],[CompilerConfig],[__WEBPACK_IMPORTED_MODULE_0__angular_core__["_98" /* ɵConsole */]]]},{provide:HtmlParser,useExisting:I18NHtmlParser},TemplateParser,DirectiveNormalizer,CompileMetadataResolver,DEFAULT_PACKAGE_URL_PROVIDER,StyleCompiler,{provide:USE_VIEW_ENGINE,useValue:false},{provide:ViewCompiler,useFactory:viewCompilerFactory,deps:[CompilerConfig,ElementSchemaRegistry]},NgModuleCompiler,DirectiveWrapperCompiler,{provide:CompilerConfig,useValue:new CompilerConfig()},JitCompiler,{provide:__WEBPACK_IMPORTED_MODULE_0__angular_core__["o" /* Compiler */],useExisting:JitCompiler},DomElementSchemaRegistry,{provide:ElementSchemaRegistry,useExisting:DomElementSchemaRegistry},UrlResolver,DirectiveResolver,PipeResolver,NgModuleResolver,AnimationParser];var JitCompilerFactory=function(){/**
     * @param {?} defaultOptions
     */function JitCompilerFactory(defaultOptions){_classCallCheck(this,JitCompilerFactory);var compilerOptions={useDebug:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["p" /* isDevMode */])(),useJit:true,defaultEncapsulation:__WEBPACK_IMPORTED_MODULE_0__angular_core__["Q" /* ViewEncapsulation */].Emulated,missingTranslation:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_97" /* MissingTranslationStrategy */].Warning,enableLegacyTemplate:true};this._defaultOptions=[compilerOptions].concat(_toConsumableArray(defaultOptions));}/**
     * @param {?=} options
     * @return {?}
     */_createClass(JitCompilerFactory,[{key:'createCompiler',value:function createCompiler(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var/** @type {?} */opts=_mergeOptions(this._defaultOptions.concat(options));var/** @type {?} */injector=__WEBPACK_IMPORTED_MODULE_0__angular_core__["c" /* ReflectiveInjector */].resolveAndCreate([COMPILER_PROVIDERS,{provide:CompilerConfig,useFactory:function useFactory(useViewEngine){return new CompilerConfig({// let explicit values from the compiler options overwrite options
// from the app providers. E.g. important for the testing platform.
genDebugInfo:opts.useDebug,// let explicit values from the compiler options overwrite options
// from the app providers
useJit:opts.useJit,// let explicit values from the compiler options overwrite options
// from the app providers
defaultEncapsulation:opts.defaultEncapsulation,logBindingUpdate:opts.useDebug,missingTranslation:opts.missingTranslation,useViewEngine:useViewEngine,enableLegacyTemplate:opts.enableLegacyTemplate});},deps:[USE_VIEW_ENGINE]},opts.providers]);return injector.get(__WEBPACK_IMPORTED_MODULE_0__angular_core__["o" /* Compiler */]);}}]);return JitCompilerFactory;}();JitCompilerFactory.decorators=[{type:CompilerInjectable}];/** @nocollapse */JitCompilerFactory.ctorParameters=function(){return[{type:Array,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["I" /* Inject */],args:[__WEBPACK_IMPORTED_MODULE_0__angular_core__["_12" /* COMPILER_OPTIONS */]]}]}];};/**
 * @return {?}
 */function _initReflector(){__WEBPACK_IMPORTED_MODULE_0__angular_core__["_13" /* ɵreflector */].reflectionCapabilities=new __WEBPACK_IMPORTED_MODULE_0__angular_core__["_123" /* ɵReflectionCapabilities */]();}/**
 * A platform that included corePlatform and the compiler.
 *
 * @experimental
 */var/** @type {?} */platformCoreDynamic=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Y" /* createPlatformFactory */])(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Z" /* platformCore */],'coreDynamic',[{provide:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_12" /* COMPILER_OPTIONS */],useValue:{},multi:true},{provide:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_139" /* CompilerFactory */],useClass:JitCompilerFactory},{provide:__WEBPACK_IMPORTED_MODULE_0__angular_core__["W" /* PLATFORM_INITIALIZER */],useValue:_initReflector,multi:true}]);/**
 * @param {?} optionsArr
 * @return {?}
 */function _mergeOptions(optionsArr){return{useDebug:_lastDefined(optionsArr.map(function(options){return options.useDebug;})),useJit:_lastDefined(optionsArr.map(function(options){return options.useJit;})),defaultEncapsulation:_lastDefined(optionsArr.map(function(options){return options.defaultEncapsulation;})),providers:_mergeArrays(optionsArr.map(function(options){return options.providers;})),missingTranslation:_lastDefined(optionsArr.map(function(options){return options.missingTranslation;}))};}/**
 * @param {?} args
 * @return {?}
 */function _lastDefined(args){for(var/** @type {?} */i=args.length-1;i>=0;i--){if(args[i]!==undefined){return args[i];}}return undefined;}/**
 * @param {?} parts
 * @return {?}
 */function _mergeArrays(parts){var/** @type {?} */result=[];parts.forEach(function(part){return part&&result.push.apply(result,_toConsumableArray(part));});return result;}/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 *//**
 * Interface that defines how import statements should be generated.
 * @abstract
 */var ImportResolver=function(){function ImportResolver(){_classCallCheck(this,ImportResolver);}_createClass(ImportResolver,[{key:'fileNameToModuleName',/**
     * Converts a file path to a module name that can be used as an `import.
     * I.e. `path/to/importedFile.ts` should be imported by `path/to/containingFile.ts`.
     * @abstract
     * @param {?} importedFilePath
     * @param {?} containingFilePath
     * @return {?}
     */value:function fileNameToModuleName(importedFilePath,containingFilePath){}/**
     * Converts the given StaticSymbol into another StaticSymbol that should be used
     * to generate the import from.
     * @abstract
     * @param {?} symbol
     * @return {?}
     */},{key:'getImportAs',value:function getImportAs(symbol){}/**
     * Determine the airty of a type.
     * @abstract
     * @param {?} symbol
     * @return {?}
     */},{key:'getTypeArity',value:function getTypeArity(symbol){}}]);return ImportResolver;}();


/***/ }),
/* 96 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs_operator_toPromise__ = __webpack_require__(208);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs_operator_toPromise___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_rxjs_operator_toPromise__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Subject__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Subject___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_rxjs_Subject__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_Observable__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_Observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_rxjs_Observable__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs_observable_fromPromise__ = __webpack_require__(73);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs_observable_fromPromise___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_rxjs_observable_fromPromise__);
/* unused harmony export AbstractControlDirective */
/* unused harmony export AbstractFormGroupDirective */
/* unused harmony export CheckboxControlValueAccessor */
/* unused harmony export ControlContainer */
/* unused harmony export NG_VALUE_ACCESSOR */
/* unused harmony export DefaultValueAccessor */
/* unused harmony export NgControl */
/* unused harmony export NgControlStatus */
/* unused harmony export NgControlStatusGroup */
/* unused harmony export NgForm */
/* unused harmony export NgModel */
/* unused harmony export NgModelGroup */
/* unused harmony export RadioControlValueAccessor */
/* unused harmony export FormControlDirective */
/* unused harmony export FormControlName */
/* unused harmony export FormGroupDirective */
/* unused harmony export FormArrayName */
/* unused harmony export FormGroupName */
/* unused harmony export NgSelectOption */
/* unused harmony export SelectControlValueAccessor */
/* unused harmony export SelectMultipleControlValueAccessor */
/* unused harmony export CheckboxRequiredValidator */
/* unused harmony export EmailValidator */
/* unused harmony export MaxLengthValidator */
/* unused harmony export MinLengthValidator */
/* unused harmony export PatternValidator */
/* unused harmony export RequiredValidator */
/* unused harmony export FormBuilder */
/* unused harmony export AbstractControl */
/* unused harmony export FormArray */
/* unused harmony export FormControl */
/* unused harmony export FormGroup */
/* unused harmony export NG_ASYNC_VALIDATORS */
/* unused harmony export NG_VALIDATORS */
/* unused harmony export Validators */
/* unused harmony export VERSION */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FormsModule; });
/* unused harmony export ReactiveFormsModule */
/* unused harmony export ɵba */
/* unused harmony export ɵz */
/* unused harmony export ɵx */
/* unused harmony export ɵy */
/* unused harmony export ɵa */
/* unused harmony export ɵb */
/* unused harmony export ɵc */
/* unused harmony export ɵd */
/* unused harmony export ɵe */
/* unused harmony export ɵf */
/* unused harmony export ɵg */
/* unused harmony export ɵbf */
/* unused harmony export ɵbb */
/* unused harmony export ɵbc */
/* unused harmony export ɵh */
/* unused harmony export ɵi */
/* unused harmony export ɵbd */
/* unused harmony export ɵbe */
/* unused harmony export ɵj */
/* unused harmony export ɵk */
/* unused harmony export ɵl */
/* unused harmony export ɵn */
/* unused harmony export ɵm */
/* unused harmony export ɵo */
/* unused harmony export ɵq */
/* unused harmony export ɵp */
/* unused harmony export ɵs */
/* unused harmony export ɵt */
/* unused harmony export ɵv */
/* unused harmony export ɵu */
/* unused harmony export ɵw */
/* unused harmony export ɵr */
var _get=function get(object,property,receiver){if(object===null)object=Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc===undefined){var parent=Object.getPrototypeOf(object);if(parent===null){return undefined;}else{return get(parent,property,receiver);}}else if("value"in desc){return desc.value;}else{var getter=desc.get;if(getter===undefined){return undefined;}return getter.call(receiver);}};var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++){arr2[i]=arr[i];}return arr2;}else{return Array.from(arr);}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}/**
 * @license Angular v4.0.0-rc.1
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 *//**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 *//**
 * Base class for control directives.
 *
 * Only used internally in the forms module.
 *
 * \@stable
 * @abstract
 */var AbstractControlDirective=function(){function AbstractControlDirective(){_classCallCheck(this,AbstractControlDirective);}_createClass(AbstractControlDirective,[{key:'reset',/**
     * @param {?=} value
     * @return {?}
     */value:function reset(){var value=arguments.length>0&&arguments[0]!==undefined?arguments[0]:undefined;if(this.control)this.control.reset(value);}/**
     * @param {?} errorCode
     * @param {?=} path
     * @return {?}
     */},{key:'hasError',value:function hasError(errorCode){var path=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return this.control?this.control.hasError(errorCode,path):false;}/**
     * @param {?} errorCode
     * @param {?=} path
     * @return {?}
     */},{key:'getError',value:function getError(errorCode){var path=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return this.control?this.control.getError(errorCode,path):null;}},{key:'control',/**
     * @return {?}
     */get:function get(){throw new Error('unimplemented');}/**
     * @return {?}
     */},{key:'value',get:function get(){return this.control?this.control.value:null;}/**
     * @return {?}
     */},{key:'valid',get:function get(){return this.control?this.control.valid:null;}/**
     * @return {?}
     */},{key:'invalid',get:function get(){return this.control?this.control.invalid:null;}/**
     * @return {?}
     */},{key:'pending',get:function get(){return this.control?this.control.pending:null;}/**
     * @return {?}
     */},{key:'errors',get:function get(){return this.control?this.control.errors:null;}/**
     * @return {?}
     */},{key:'pristine',get:function get(){return this.control?this.control.pristine:null;}/**
     * @return {?}
     */},{key:'dirty',get:function get(){return this.control?this.control.dirty:null;}/**
     * @return {?}
     */},{key:'touched',get:function get(){return this.control?this.control.touched:null;}/**
     * @return {?}
     */},{key:'untouched',get:function get(){return this.control?this.control.untouched:null;}/**
     * @return {?}
     */},{key:'disabled',get:function get(){return this.control?this.control.disabled:null;}/**
     * @return {?}
     */},{key:'enabled',get:function get(){return this.control?this.control.enabled:null;}/**
     * @return {?}
     */},{key:'statusChanges',get:function get(){return this.control?this.control.statusChanges:null;}/**
     * @return {?}
     */},{key:'valueChanges',get:function get(){return this.control?this.control.valueChanges:null;}/**
     * @return {?}
     */},{key:'path',get:function get(){return null;}}]);return AbstractControlDirective;}();/**
 * A directive that contains multiple {\@link NgControl}s.
 *
 * Only used by the forms module.
 *
 * \@stable
 */var ControlContainer=function(_AbstractControlDirec){_inherits(ControlContainer,_AbstractControlDirec);function ControlContainer(){_classCallCheck(this,ControlContainer);return _possibleConstructorReturn(this,(ControlContainer.__proto__||Object.getPrototypeOf(ControlContainer)).apply(this,arguments));}_createClass(ControlContainer,[{key:'formDirective',/**
     * Get the form to which this container belongs.
     * @return {?}
     */get:function get(){return null;}/**
     * Get the path to this container.
     * @return {?}
     */},{key:'path',get:function get(){return null;}}]);return ControlContainer;}(AbstractControlDirective);/**
 * @param {?} obj
 * @return {?}
 */function isPresent(obj){return obj!=null;}/**
 * @param {?} obj
 * @return {?}
 */function isBlank(obj){return obj==null;}/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */function looseIdentical(a,b){return a===b||typeof a==='number'&&typeof b==='number'&&isNaN(a)&&isNaN(b);}/**
 * @param {?} o
 * @return {?}
 */function isJsObject(o){return o!==null&&(typeof o==='function'||(typeof o==='undefined'?'undefined':_typeof(o))==='object');}/**
 * @param {?} obj
 * @return {?}
 */function isPrimitive(obj){return!isJsObject(obj);}/**
 * Wraps Javascript Objects
 */var StringMapWrapper=function(){function StringMapWrapper(){_classCallCheck(this,StringMapWrapper);}_createClass(StringMapWrapper,null,[{key:'merge',/**
     * @param {?} m1
     * @param {?} m2
     * @return {?}
     */value:function merge(m1,m2){var/** @type {?} */m={};var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=Object.keys(m1)[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var k=_step.value;m[k]=m1[k];}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return();}}finally{if(_didIteratorError){throw _iteratorError;}}}var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=Object.keys(m2)[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=true){var _k=_step2.value;m[_k]=m2[_k];}}catch(err){_didIteratorError2=true;_iteratorError2=err;}finally{try{if(!_iteratorNormalCompletion2&&_iterator2.return){_iterator2.return();}}finally{if(_didIteratorError2){throw _iteratorError2;}}}return m;}/**
     * @param {?} m1
     * @param {?} m2
     * @return {?}
     */},{key:'equals',value:function equals(m1,m2){var/** @type {?} */k1=Object.keys(m1);var/** @type {?} */k2=Object.keys(m2);if(k1.length!=k2.length){return false;}for(var/** @type {?} */i=0;i<k1.length;i++){var/** @type {?} */key=k1[i];if(m1[key]!==m2[key]){return false;}}return true;}}]);return StringMapWrapper;}();var ListWrapper=function(){function ListWrapper(){_classCallCheck(this,ListWrapper);}_createClass(ListWrapper,null,[{key:'findLast',/**
     * @param {?} arr
     * @param {?} condition
     * @return {?}
     */value:function findLast(arr,condition){for(var/** @type {?} */i=arr.length-1;i>=0;i--){if(condition(arr[i])){return arr[i];}}return null;}/**
     * @param {?} list
     * @param {?} items
     * @return {?}
     */},{key:'removeAll',value:function removeAll(list,items){for(var/** @type {?} */i=0;i<items.length;++i){var/** @type {?} */index=list.indexOf(items[i]);if(index>-1){list.splice(index,1);}}}/**
     * @param {?} list
     * @param {?} el
     * @return {?}
     */},{key:'remove',value:function remove(list,el){var/** @type {?} */index=list.indexOf(el);if(index>-1){list.splice(index,1);return true;}return false;}/**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */},{key:'equals',value:function equals(a,b){if(a.length!=b.length)return false;for(var/** @type {?} */i=0;i<a.length;++i){if(a[i]!==b[i])return false;}return true;}/**
     * @param {?} list
     * @return {?}
     */},{key:'flatten',value:function flatten(list){return list.reduce(function(flat,item){var/** @type {?} */flatItem=Array.isArray(item)?ListWrapper.flatten(item):item;return flat.concat(flatItem);},[]);}}]);return ListWrapper;}();/**
 * @param {?} value
 * @return {?}
 */function isEmptyInputValue(value){// we don't check for string here so it also works with arrays
return value==null||value.length===0;}/**
 * Providers for validators to be used for {@link FormControl}s in a form.
 *
 * Provide this using `multi: true` to add validators.
 *
 * ### Example
 *
 * {@example core/forms/ts/ng_validators/ng_validators.ts region='ng_validators'}
 * @stable
 */var/** @type {?} */NG_VALIDATORS=new __WEBPACK_IMPORTED_MODULE_0__angular_core__["n" /* InjectionToken */]('NgValidators');/**
 * Providers for asynchronous validators to be used for {@link FormControl}s
 * in a form.
 *
 * Provide this using `multi: true` to add validators.
 *
 * See {@link NG_VALIDATORS} for more details.
 *
 * @stable
 */var/** @type {?} */NG_ASYNC_VALIDATORS=new __WEBPACK_IMPORTED_MODULE_0__angular_core__["n" /* InjectionToken */]('NgAsyncValidators');var/** @type {?} */EMAIL_REGEXP=/^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;/**
 * Provides a set of validators used by form controls.
 *
 * A validator is a function that processes a {\@link FormControl} or collection of
 * controls and returns a map of errors. A null map means that validation has passed.
 *
 * ### Example
 *
 * ```typescript
 * var loginControl = new FormControl("", Validators.required)
 * ```
 *
 * \@stable
 */var Validators=function(){function Validators(){_classCallCheck(this,Validators);}_createClass(Validators,null,[{key:'equalsTo',/**
     * Validator that compares the value of the given FormControls
     * @param {...?} fieldPaths
     * @return {?}
     */value:function equalsTo(){for(var _len=arguments.length,fieldPaths=Array(_len),_key=0;_key<_len;_key++){fieldPaths[_key]=arguments[_key];}return function(control){if(fieldPaths.length<1){throw new Error('You must compare to at least 1 other field');}var _iteratorNormalCompletion3=true;var _didIteratorError3=false;var _iteratorError3=undefined;try{for(var _iterator3=fieldPaths[Symbol.iterator](),_step3;!(_iteratorNormalCompletion3=(_step3=_iterator3.next()).done);_iteratorNormalCompletion3=true){var fieldName=_step3.value;var/** @type {?} */field=control.parent.get(fieldName);if(!field){throw new Error('Field: '+fieldName+' undefined, are you sure that '+fieldName+' exists in the group');}if(field.value!==control.value){return{'equalsTo':{'unequalField':fieldName}};}}}catch(err){_didIteratorError3=true;_iteratorError3=err;}finally{try{if(!_iteratorNormalCompletion3&&_iterator3.return){_iterator3.return();}}finally{if(_didIteratorError3){throw _iteratorError3;}}}return null;};}/**
     * Validator that requires controls to have a non-empty value.
     * @param {?} control
     * @return {?}
     */},{key:'required',value:function required(control){return isEmptyInputValue(control.value)?{'required':true}:null;}/**
     * Validator that requires control value to be true.
     * @param {?} control
     * @return {?}
     */},{key:'requiredTrue',value:function requiredTrue(control){return control.value===true?null:{'required':true};}/**
     * Validator that performs email validation.
     * @param {?} control
     * @return {?}
     */},{key:'email',value:function email(control){return EMAIL_REGEXP.test(control.value)?null:{'email':true};}/**
     * Validator that requires controls to have a value of a minimum length.
     * @param {?} minLength
     * @return {?}
     */},{key:'minLength',value:function minLength(_minLength){return function(control){if(isEmptyInputValue(control.value)){return null;// don't validate empty values to allow optional controls
}var/** @type {?} */length=control.value?control.value.length:0;return length<_minLength?{'minlength':{'requiredLength':_minLength,'actualLength':length}}:null;};}/**
     * Validator that requires controls to have a value of a maximum length.
     * @param {?} maxLength
     * @return {?}
     */},{key:'maxLength',value:function maxLength(_maxLength){return function(control){var/** @type {?} */length=control.value?control.value.length:0;return length>_maxLength?{'maxlength':{'requiredLength':_maxLength,'actualLength':length}}:null;};}/**
     * Validator that requires a control to match a regex to its value.
     * @param {?} pattern
     * @return {?}
     */},{key:'pattern',value:function pattern(_pattern){if(!_pattern)return Validators.nullValidator;var/** @type {?} */regex=void 0;var/** @type {?} */regexStr=void 0;if(typeof _pattern==='string'){regexStr='^'+_pattern+'$';regex=new RegExp(regexStr);}else{regexStr=_pattern.toString();regex=_pattern;}return function(control){if(isEmptyInputValue(control.value)){return null;// don't validate empty values to allow optional controls
}var/** @type {?} */value=control.value;return regex.test(value)?null:{'pattern':{'requiredPattern':regexStr,'actualValue':value}};};}/**
     * No-op validator.
     * @param {?} c
     * @return {?}
     */},{key:'nullValidator',value:function nullValidator(c){return null;}/**
     * Compose multiple validators into a single function that returns the union
     * of the individual error maps.
     * @param {?} validators
     * @return {?}
     */},{key:'compose',value:function compose(validators){if(!validators)return null;var/** @type {?} */presentValidators=validators.filter(isPresent);if(presentValidators.length==0)return null;return function(control){return _mergeErrors(_executeValidators(control,presentValidators));};}/**
     * @param {?} validators
     * @return {?}
     */},{key:'composeAsync',value:function composeAsync(validators){if(!validators)return null;var/** @type {?} */presentValidators=validators.filter(isPresent);if(presentValidators.length==0)return null;return function(control){var/** @type {?} */promises=_executeAsyncValidators(control,presentValidators).map(_convertToPromise);return Promise.all(promises).then(_mergeErrors);};}}]);return Validators;}();/**
 * @param {?} obj
 * @return {?}
 */function _convertToPromise(obj){return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["m" /* ɵisPromise */])(obj)?obj:__WEBPACK_IMPORTED_MODULE_1_rxjs_operator_toPromise__["toPromise"].call(obj);}/**
 * @param {?} control
 * @param {?} validators
 * @return {?}
 */function _executeValidators(control,validators){return validators.map(function(v){return v(control);});}/**
 * @param {?} control
 * @param {?} validators
 * @return {?}
 */function _executeAsyncValidators(control,validators){return validators.map(function(v){return v(control);});}/**
 * @param {?} arrayOfErrors
 * @return {?}
 */function _mergeErrors(arrayOfErrors){var/** @type {?} */res=arrayOfErrors.reduce(function(res,errors){return isPresent(errors)?StringMapWrapper.merge(res,errors):res;},{});return Object.keys(res).length===0?null:res;}/**
 * Used to provide a {@link ControlValueAccessor} for form controls.
 *
 * See {@link DefaultValueAccessor} for how to implement one.
 * @stable
 */var/** @type {?} */NG_VALUE_ACCESSOR=new __WEBPACK_IMPORTED_MODULE_0__angular_core__["n" /* InjectionToken */]('NgValueAccessor');var/** @type {?} */CHECKBOX_VALUE_ACCESSOR={provide:NG_VALUE_ACCESSOR,useExisting:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_10" /* forwardRef */])(function(){return CheckboxControlValueAccessor;}),multi:true};/**
 * The accessor for writing a value and listening to changes on a checkbox input element.
 *
 *  ### Example
 *  ```
 *  <input type="checkbox" name="rememberLogin" ngModel>
 *  ```
 *
 *  \@stable
 */var CheckboxControlValueAccessor=function(){/**
     * @param {?} _renderer
     * @param {?} _elementRef
     */function CheckboxControlValueAccessor(_renderer,_elementRef){_classCallCheck(this,CheckboxControlValueAccessor);this._renderer=_renderer;this._elementRef=_elementRef;this.onChange=function(_){};this.onTouched=function(){};}/**
     * @param {?} value
     * @return {?}
     */_createClass(CheckboxControlValueAccessor,[{key:'writeValue',value:function writeValue(value){this._renderer.setElementProperty(this._elementRef.nativeElement,'checked',value);}/**
     * @param {?} fn
     * @return {?}
     */},{key:'registerOnChange',value:function registerOnChange(fn){this.onChange=fn;}/**
     * @param {?} fn
     * @return {?}
     */},{key:'registerOnTouched',value:function registerOnTouched(fn){this.onTouched=fn;}/**
     * @param {?} isDisabled
     * @return {?}
     */},{key:'setDisabledState',value:function setDisabledState(isDisabled){this._renderer.setElementProperty(this._elementRef.nativeElement,'disabled',isDisabled);}}]);return CheckboxControlValueAccessor;}();CheckboxControlValueAccessor.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',host:{'(change)':'onChange($event.target.checked)','(blur)':'onTouched()'},providers:[CHECKBOX_VALUE_ACCESSOR]}]}];/** @nocollapse */CheckboxControlValueAccessor.ctorParameters=function(){return[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["s" /* Renderer */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["t" /* ElementRef */]}];};var/** @type {?} */DEFAULT_VALUE_ACCESSOR={provide:NG_VALUE_ACCESSOR,useExisting:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_10" /* forwardRef */])(function(){return DefaultValueAccessor;}),multi:true};/**
 * The default accessor for writing a value and listening to changes that is used by the
 * {\@link NgModel}, {\@link FormControlDirective}, and {\@link FormControlName} directives.
 *
 *  ### Example
 *  ```
 *  <input type="text" name="searchQuery" ngModel>
 *  ```
 *
 *  \@stable
 */var DefaultValueAccessor=function(){/**
     * @param {?} _renderer
     * @param {?} _elementRef
     */function DefaultValueAccessor(_renderer,_elementRef){_classCallCheck(this,DefaultValueAccessor);this._renderer=_renderer;this._elementRef=_elementRef;this.onChange=function(_){};this.onTouched=function(){};}/**
     * @param {?} value
     * @return {?}
     */_createClass(DefaultValueAccessor,[{key:'writeValue',value:function writeValue(value){var/** @type {?} */normalizedValue=value==null?'':value;this._renderer.setElementProperty(this._elementRef.nativeElement,'value',normalizedValue);}/**
     * @param {?} fn
     * @return {?}
     */},{key:'registerOnChange',value:function registerOnChange(fn){this.onChange=fn;}/**
     * @param {?} fn
     * @return {?}
     */},{key:'registerOnTouched',value:function registerOnTouched(fn){this.onTouched=fn;}/**
     * @param {?} isDisabled
     * @return {?}
     */},{key:'setDisabledState',value:function setDisabledState(isDisabled){this._renderer.setElementProperty(this._elementRef.nativeElement,'disabled',isDisabled);}}]);return DefaultValueAccessor;}();DefaultValueAccessor.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',// TODO: vsavkin replace the above selector with the one below it once
// https://github.com/angular/angular/issues/3011 is implemented
// selector: '[ngControl],[ngModel],[ngFormControl]',
host:{'(input)':'onChange($event.target.value)','(blur)':'onTouched()'},providers:[DEFAULT_VALUE_ACCESSOR]}]}];/** @nocollapse */DefaultValueAccessor.ctorParameters=function(){return[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["s" /* Renderer */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["t" /* ElementRef */]}];};/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 *//**
 * @param {?} validator
 * @return {?}
 */function normalizeValidator(validator){if(validator.validate){return function(c){return validator.validate(c);};}else{return validator;}}/**
 * @param {?} validator
 * @return {?}
 */function normalizeAsyncValidator(validator){if(validator.validate){return function(c){return validator.validate(c);};}else{return validator;}}var/** @type {?} */NUMBER_VALUE_ACCESSOR={provide:NG_VALUE_ACCESSOR,useExisting:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_10" /* forwardRef */])(function(){return NumberValueAccessor;}),multi:true};/**
 * The accessor for writing a number value and listening to changes that is used by the
 * {\@link NgModel}, {\@link FormControlDirective}, and {\@link FormControlName} directives.
 *
 *  ### Example
 *  ```
 *  <input type="number" [(ngModel)]="age">
 *  ```
 */var NumberValueAccessor=function(){/**
     * @param {?} _renderer
     * @param {?} _elementRef
     */function NumberValueAccessor(_renderer,_elementRef){_classCallCheck(this,NumberValueAccessor);this._renderer=_renderer;this._elementRef=_elementRef;this.onChange=function(_){};this.onTouched=function(){};}/**
     * @param {?} value
     * @return {?}
     */_createClass(NumberValueAccessor,[{key:'writeValue',value:function writeValue(value){// The value needs to be normalized for IE9, otherwise it is set to 'null' when null
var/** @type {?} */normalizedValue=value==null?'':value;this._renderer.setElementProperty(this._elementRef.nativeElement,'value',normalizedValue);}/**
     * @param {?} fn
     * @return {?}
     */},{key:'registerOnChange',value:function registerOnChange(fn){this.onChange=function(value){fn(value==''?null:parseFloat(value));};}/**
     * @param {?} fn
     * @return {?}
     */},{key:'registerOnTouched',value:function registerOnTouched(fn){this.onTouched=fn;}/**
     * @param {?} isDisabled
     * @return {?}
     */},{key:'setDisabledState',value:function setDisabledState(isDisabled){this._renderer.setElementProperty(this._elementRef.nativeElement,'disabled',isDisabled);}}]);return NumberValueAccessor;}();NumberValueAccessor.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',host:{'(change)':'onChange($event.target.value)','(input)':'onChange($event.target.value)','(blur)':'onTouched()'},providers:[NUMBER_VALUE_ACCESSOR]}]}];/** @nocollapse */NumberValueAccessor.ctorParameters=function(){return[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["s" /* Renderer */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["t" /* ElementRef */]}];};/**
 * @return {?}
 */function unimplemented(){throw new Error('unimplemented');}/**
 * A base class that all control directive extend.
 * It binds a {\@link FormControl} object to a DOM element.
 *
 * Used internally by Angular forms.
 *
 * \@stable
 * @abstract
 */var NgControl=function(_AbstractControlDirec2){_inherits(NgControl,_AbstractControlDirec2);function NgControl(){_classCallCheck(this,NgControl);/** @internal */var _this2=_possibleConstructorReturn(this,(NgControl.__proto__||Object.getPrototypeOf(NgControl)).apply(this,arguments));_this2._parent=null;_this2.name=null;_this2.valueAccessor=null;/** @internal */_this2._rawValidators=[];/** @internal */_this2._rawAsyncValidators=[];return _this2;}/**
     * @return {?}
     */_createClass(NgControl,[{key:'viewToModelUpdate',/**
     * @abstract
     * @param {?} newValue
     * @return {?}
     */value:function viewToModelUpdate(newValue){}},{key:'validator',get:function get(){return unimplemented();}/**
     * @return {?}
     */},{key:'asyncValidator',get:function get(){return unimplemented();}}]);return NgControl;}(AbstractControlDirective);var/** @type {?} */RADIO_VALUE_ACCESSOR={provide:NG_VALUE_ACCESSOR,useExisting:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_10" /* forwardRef */])(function(){return RadioControlValueAccessor;}),multi:true};/**
 * Internal class used by Angular to uncheck radio buttons with the matching name.
 */var RadioControlRegistry=function(){function RadioControlRegistry(){_classCallCheck(this,RadioControlRegistry);this._accessors=[];}/**
     * @param {?} control
     * @param {?} accessor
     * @return {?}
     */_createClass(RadioControlRegistry,[{key:'add',value:function add(control,accessor){this._accessors.push([control,accessor]);}/**
     * @param {?} accessor
     * @return {?}
     */},{key:'remove',value:function remove(accessor){for(var/** @type {?} */i=this._accessors.length-1;i>=0;--i){if(this._accessors[i][1]===accessor){this._accessors.splice(i,1);return;}}}/**
     * @param {?} accessor
     * @return {?}
     */},{key:'select',value:function select(accessor){var _this3=this;this._accessors.forEach(function(c){if(_this3._isSameGroup(c,accessor)&&c[1]!==accessor){c[1].fireUncheck(accessor.value);}});}/**
     * @param {?} controlPair
     * @param {?} accessor
     * @return {?}
     */},{key:'_isSameGroup',value:function _isSameGroup(controlPair,accessor){if(!controlPair[0].control)return false;return controlPair[0]._parent===accessor._control._parent&&controlPair[1].name===accessor.name;}}]);return RadioControlRegistry;}();RadioControlRegistry.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["B" /* Injectable */]}];/** @nocollapse */RadioControlRegistry.ctorParameters=function(){return[];};/**
 * \@whatItDoes Writes radio control values and listens to radio control changes.
 *
 * Used by {\@link NgModel}, {\@link FormControlDirective}, and {\@link FormControlName}
 * to keep the view synced with the {\@link FormControl} model.
 *
 * \@howToUse
 *
 * If you have imported the {\@link FormsModule} or the {\@link ReactiveFormsModule}, this
 * value accessor will be active on any radio control that has a form directive. You do
 * **not** need to add a special selector to activate it.
 *
 * ### How to use radio buttons with form directives
 *
 * To use radio buttons in a template-driven form, you'll want to ensure that radio buttons
 * in the same group have the same `name` attribute.  Radio buttons with different `name`
 * attributes do not affect each other.
 *
 * {\@example forms/ts/radioButtons/radio_button_example.ts region='TemplateDriven'}
 *
 * When using radio buttons in a reactive form, radio buttons in the same group should have the
 * same `formControlName`. You can also add a `name` attribute, but it's optional.
 *
 * {\@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}
 *
 *  * **npm package**: `\@angular/forms`
 *
 *  \@stable
 */var RadioControlValueAccessor=function(){/**
     * @param {?} _renderer
     * @param {?} _elementRef
     * @param {?} _registry
     * @param {?} _injector
     */function RadioControlValueAccessor(_renderer,_elementRef,_registry,_injector){_classCallCheck(this,RadioControlValueAccessor);this._renderer=_renderer;this._elementRef=_elementRef;this._registry=_registry;this._injector=_injector;this.onChange=function(){};this.onTouched=function(){};}/**
     * @return {?}
     */_createClass(RadioControlValueAccessor,[{key:'ngOnInit',value:function ngOnInit(){this._control=this._injector.get(NgControl);this._checkName();this._registry.add(this._control,this);}/**
     * @return {?}
     */},{key:'ngOnDestroy',value:function ngOnDestroy(){this._registry.remove(this);}/**
     * @param {?} value
     * @return {?}
     */},{key:'writeValue',value:function writeValue(value){this._state=value===this.value;this._renderer.setElementProperty(this._elementRef.nativeElement,'checked',this._state);}/**
     * @param {?} fn
     * @return {?}
     */},{key:'registerOnChange',value:function registerOnChange(fn){var _this4=this;this._fn=fn;this.onChange=function(){fn(_this4.value);_this4._registry.select(_this4);};}/**
     * @param {?} value
     * @return {?}
     */},{key:'fireUncheck',value:function fireUncheck(value){this.writeValue(value);}/**
     * @param {?} fn
     * @return {?}
     */},{key:'registerOnTouched',value:function registerOnTouched(fn){this.onTouched=fn;}/**
     * @param {?} isDisabled
     * @return {?}
     */},{key:'setDisabledState',value:function setDisabledState(isDisabled){this._renderer.setElementProperty(this._elementRef.nativeElement,'disabled',isDisabled);}/**
     * @return {?}
     */},{key:'_checkName',value:function _checkName(){if(this.name&&this.formControlName&&this.name!==this.formControlName){this._throwNameError();}if(!this.name&&this.formControlName)this.name=this.formControlName;}/**
     * @return {?}
     */},{key:'_throwNameError',value:function _throwNameError(){throw new Error('\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type="radio" formControlName="food" name="food">\n    ');}}]);return RadioControlValueAccessor;}();RadioControlValueAccessor.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',host:{'(change)':'onChange()','(blur)':'onTouched()'},providers:[RADIO_VALUE_ACCESSOR]}]}];/** @nocollapse */RadioControlValueAccessor.ctorParameters=function(){return[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["s" /* Renderer */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["t" /* ElementRef */]},{type:RadioControlRegistry},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["j" /* Injector */]}];};RadioControlValueAccessor.propDecorators={'name':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */]}],'formControlName':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */]}],'value':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */]}]};var/** @type {?} */RANGE_VALUE_ACCESSOR={provide:NG_VALUE_ACCESSOR,useExisting:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_10" /* forwardRef */])(function(){return RangeValueAccessor;}),multi:true};/**
 * The accessor for writing a range value and listening to changes that is used by the
 * {\@link NgModel}, {\@link FormControlDirective}, and {\@link FormControlName} directives.
 *
 *  ### Example
 *  ```
 *  <input type="range" [(ngModel)]="age" >
 *  ```
 */var RangeValueAccessor=function(){/**
     * @param {?} _renderer
     * @param {?} _elementRef
     */function RangeValueAccessor(_renderer,_elementRef){_classCallCheck(this,RangeValueAccessor);this._renderer=_renderer;this._elementRef=_elementRef;this.onChange=function(_){};this.onTouched=function(){};}/**
     * @param {?} value
     * @return {?}
     */_createClass(RangeValueAccessor,[{key:'writeValue',value:function writeValue(value){this._renderer.setElementProperty(this._elementRef.nativeElement,'value',parseFloat(value));}/**
     * @param {?} fn
     * @return {?}
     */},{key:'registerOnChange',value:function registerOnChange(fn){this.onChange=function(value){fn(value==''?null:parseFloat(value));};}/**
     * @param {?} fn
     * @return {?}
     */},{key:'registerOnTouched',value:function registerOnTouched(fn){this.onTouched=fn;}/**
     * @param {?} isDisabled
     * @return {?}
     */},{key:'setDisabledState',value:function setDisabledState(isDisabled){this._renderer.setElementProperty(this._elementRef.nativeElement,'disabled',isDisabled);}}]);return RangeValueAccessor;}();RangeValueAccessor.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',host:{'(change)':'onChange($event.target.value)','(input)':'onChange($event.target.value)','(blur)':'onTouched()'},providers:[RANGE_VALUE_ACCESSOR]}]}];/** @nocollapse */RangeValueAccessor.ctorParameters=function(){return[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["s" /* Renderer */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["t" /* ElementRef */]}];};var/** @type {?} */SELECT_VALUE_ACCESSOR={provide:NG_VALUE_ACCESSOR,useExisting:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_10" /* forwardRef */])(function(){return SelectControlValueAccessor;}),multi:true};/**
 * @param {?} id
 * @param {?} value
 * @return {?}
 */function _buildValueString(id,value){if(id==null)return''+value;if(!isPrimitive(value))value='Object';return(id+': '+value).slice(0,50);}/**
 * @param {?} valueString
 * @return {?}
 */function _extractId(valueString){return valueString.split(':')[0];}/**
 * \@whatItDoes Writes values and listens to changes on a select element.
 *
 * Used by {\@link NgModel}, {\@link FormControlDirective}, and {\@link FormControlName}
 * to keep the view synced with the {\@link FormControl} model.
 *
 * \@howToUse
 *
 * If you have imported the {\@link FormsModule} or the {\@link ReactiveFormsModule}, this
 * value accessor will be active on any select control that has a form directive. You do
 * **not** need to add a special selector to activate it.
 *
 * ### How to use select controls with form directives
 *
 * To use a select in a template-driven form, simply add an `ngModel` and a `name`
 * attribute to the main `<select>` tag.
 *
 * If your option values are simple strings, you can bind to the normal `value` property
 * on the option.  If your option values happen to be objects (and you'd like to save the
 * selection in your form as an object), use `ngValue` instead:
 *
 * {\@example forms/ts/selectControl/select_control_example.ts region='Component'}
 *
 * In reactive forms, you'll also want to add your form directive (`formControlName` or
 * `formControl`) on the main `<select>` tag. Like in the former example, you have the
 * choice of binding to the  `value` or `ngValue` property on the select's options.
 *
 * {\@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}
 *
 * ### Caveat: Option selection
 *
 * Angular uses object identity to select option. It's possible for the identities of items
 * to change while the data does not. This can happen, for example, if the items are produced
 * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the
 * second response will produce objects with different identities.
 *
 * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.
 * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.
 * If `compareWith` is given, Angular selects option by the return value of the function.
 *
 * #### Syntax
 *
 * ```
 * <select [compareWith]="compareFn"  [(ngModel)]="selectedCountries">
 *     <option *ngFor="let country of countries" [ngValue]="country">
 *         {{country.name}}
 *     </option>
 * </select>
 *
 * compareFn(c1: Country, c2: Country): boolean {
 *     return c1 && c2 ? c1.id === c2.id : c1 === c2;
 * }
 * ```
 *
 * Note: We listen to the 'change' event because 'input' events aren't fired
 * for selects in Firefox and IE:
 * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350
 * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/
 *
 * * **npm package**: `\@angular/forms`
 *
 * \@stable
 */var SelectControlValueAccessor=function(){/**
     * @param {?} _renderer
     * @param {?} _elementRef
     */function SelectControlValueAccessor(_renderer,_elementRef){_classCallCheck(this,SelectControlValueAccessor);this._renderer=_renderer;this._elementRef=_elementRef;/** @internal */this._optionMap=new Map();/** @internal */this._idCounter=0;this.onChange=function(_){};this.onTouched=function(){};this._compareWith=looseIdentical;}/**
     * @param {?} fn
     * @return {?}
     */_createClass(SelectControlValueAccessor,[{key:'writeValue',/**
     * @param {?} value
     * @return {?}
     */value:function writeValue(value){this.value=value;var/** @type {?} */id=this._getOptionId(value);if(id==null){this._renderer.setElementProperty(this._elementRef.nativeElement,'selectedIndex',-1);}var/** @type {?} */valueString=_buildValueString(id,value);this._renderer.setElementProperty(this._elementRef.nativeElement,'value',valueString);}/**
     * @param {?} fn
     * @return {?}
     */},{key:'registerOnChange',value:function registerOnChange(fn){var _this5=this;this.onChange=function(valueString){_this5.value=valueString;fn(_this5._getOptionValue(valueString));};}/**
     * @param {?} fn
     * @return {?}
     */},{key:'registerOnTouched',value:function registerOnTouched(fn){this.onTouched=fn;}/**
     * @param {?} isDisabled
     * @return {?}
     */},{key:'setDisabledState',value:function setDisabledState(isDisabled){this._renderer.setElementProperty(this._elementRef.nativeElement,'disabled',isDisabled);}/**
     * \@internal
     * @return {?}
     */},{key:'_registerOption',value:function _registerOption(){return(this._idCounter++).toString();}/**
     * \@internal
     * @param {?} value
     * @return {?}
     */},{key:'_getOptionId',value:function _getOptionId(value){var _iteratorNormalCompletion4=true;var _didIteratorError4=false;var _iteratorError4=undefined;try{for(var _iterator4=Array.from(this._optionMap.keys())[Symbol.iterator](),_step4;!(_iteratorNormalCompletion4=(_step4=_iterator4.next()).done);_iteratorNormalCompletion4=true){var id=_step4.value;if(this._compareWith(this._optionMap.get(id),value))return id;}}catch(err){_didIteratorError4=true;_iteratorError4=err;}finally{try{if(!_iteratorNormalCompletion4&&_iterator4.return){_iterator4.return();}}finally{if(_didIteratorError4){throw _iteratorError4;}}}return null;}/**
     * \@internal
     * @param {?} valueString
     * @return {?}
     */},{key:'_getOptionValue',value:function _getOptionValue(valueString){var/** @type {?} */id=_extractId(valueString);return this._optionMap.has(id)?this._optionMap.get(id):valueString;}},{key:'compareWith',set:function set(fn){if(typeof fn!=='function'){throw new Error('compareWith must be a function, but received '+JSON.stringify(fn));}this._compareWith=fn;}}]);return SelectControlValueAccessor;}();SelectControlValueAccessor.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',host:{'(change)':'onChange($event.target.value)','(blur)':'onTouched()'},providers:[SELECT_VALUE_ACCESSOR]}]}];/** @nocollapse */SelectControlValueAccessor.ctorParameters=function(){return[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["s" /* Renderer */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["t" /* ElementRef */]}];};SelectControlValueAccessor.propDecorators={'compareWith':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */]}]};/**
 * \@whatItDoes Marks `<option>` as dynamic, so Angular can be notified when options change.
 *
 * \@howToUse
 *
 * See docs for {\@link SelectControlValueAccessor} for usage examples.
 *
 * \@stable
 */var NgSelectOption=function(){/**
     * @param {?} _element
     * @param {?} _renderer
     * @param {?} _select
     */function NgSelectOption(_element,_renderer,_select){_classCallCheck(this,NgSelectOption);this._element=_element;this._renderer=_renderer;this._select=_select;if(this._select)this.id=this._select._registerOption();}/**
     * @param {?} value
     * @return {?}
     */_createClass(NgSelectOption,[{key:'_setElementValue',/**
     * \@internal
     * @param {?} value
     * @return {?}
     */value:function _setElementValue(value){this._renderer.setElementProperty(this._element.nativeElement,'value',value);}/**
     * @return {?}
     */},{key:'ngOnDestroy',value:function ngOnDestroy(){if(this._select){this._select._optionMap.delete(this.id);this._select.writeValue(this._select.value);}}},{key:'ngValue',set:function set(value){if(this._select==null)return;this._select._optionMap.set(this.id,value);this._setElementValue(_buildValueString(this.id,value));this._select.writeValue(this._select.value);}/**
     * @param {?} value
     * @return {?}
     */},{key:'value',set:function set(value){this._setElementValue(value);if(this._select)this._select.writeValue(this._select.value);}}]);return NgSelectOption;}();NgSelectOption.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'option'}]}];/** @nocollapse */NgSelectOption.ctorParameters=function(){return[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["t" /* ElementRef */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["s" /* Renderer */]},{type:SelectControlValueAccessor,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["E" /* Optional */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_7" /* Host */]}]}];};NgSelectOption.propDecorators={'ngValue':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */],args:['ngValue']}],'value':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */],args:['value']}]};var/** @type {?} */SELECT_MULTIPLE_VALUE_ACCESSOR={provide:NG_VALUE_ACCESSOR,useExisting:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_10" /* forwardRef */])(function(){return SelectMultipleControlValueAccessor;}),multi:true};/**
 * @param {?} id
 * @param {?} value
 * @return {?}
 */function _buildValueString$1(id,value){if(id==null)return''+value;if(typeof value==='string')value='\''+value+'\'';if(!isPrimitive(value))value='Object';return(id+': '+value).slice(0,50);}/**
 * @param {?} valueString
 * @return {?}
 */function _extractId$1(valueString){return valueString.split(':')[0];}/**
 * The accessor for writing a value and listening to changes on a select element.
 *
 *  ### Caveat: Options selection
 *
 * Angular uses object identity to select options. It's possible for the identities of items
 * to change while the data does not. This can happen, for example, if the items are produced
 * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the
 * second response will produce objects with different identities.
 *
 * To customize the default option comparison algorithm, `<select multiple>` supports `compareWith`
 * input. `compareWith` takes a **function** which has two arguments: `option1` and `option2`.
 * If `compareWith` is given, Angular selects options by the return value of the function.
 *
 * #### Syntax
 *
 * ```
 * <select multiple [compareWith]="compareFn"  [(ngModel)]="selectedCountries">
 *     <option *ngFor="let country of countries" [ngValue]="country">
 *         {{country.name}}
 *     </option>
 * </select>
 *
 * compareFn(c1: Country, c2: Country): boolean {
 *     return c1 && c2 ? c1.id === c2.id : c1 === c2;
 * }
 * ```
 *
 * \@stable
 */var SelectMultipleControlValueAccessor=function(){/**
     * @param {?} _renderer
     * @param {?} _elementRef
     */function SelectMultipleControlValueAccessor(_renderer,_elementRef){_classCallCheck(this,SelectMultipleControlValueAccessor);this._renderer=_renderer;this._elementRef=_elementRef;/** @internal */this._optionMap=new Map();/** @internal */this._idCounter=0;this.onChange=function(_){};this.onTouched=function(){};this._compareWith=looseIdentical;}/**
     * @param {?} fn
     * @return {?}
     */_createClass(SelectMultipleControlValueAccessor,[{key:'writeValue',/**
     * @param {?} value
     * @return {?}
     */value:function writeValue(value){var _this6=this;this.value=value;var/** @type {?} */optionSelectedStateSetter=void 0;if(Array.isArray(value)){// convert values to ids
var/** @type {?} */ids=value.map(function(v){return _this6._getOptionId(v);});optionSelectedStateSetter=function optionSelectedStateSetter(opt,o){opt._setSelected(ids.indexOf(o.toString())>-1);};}else{optionSelectedStateSetter=function optionSelectedStateSetter(opt,o){opt._setSelected(false);};}this._optionMap.forEach(optionSelectedStateSetter);}/**
     * @param {?} fn
     * @return {?}
     */},{key:'registerOnChange',value:function registerOnChange(fn){var _this7=this;this.onChange=function(_){var/** @type {?} */selected=[];if(_.hasOwnProperty('selectedOptions')){var/** @type {?} */options=_.selectedOptions;for(var/** @type {?} */i=0;i<options.length;i++){var/** @type {?} */opt=options.item(i);var/** @type {?} */val=_this7._getOptionValue(opt.value);selected.push(val);}}else{var/** @type {?} */_options=_.options;for(var/** @type {?} */_i=0;_i<_options.length;_i++){var/** @type {?} */_opt=_options.item(_i);if(_opt.selected){var/** @type {?} */_val=_this7._getOptionValue(_opt.value);selected.push(_val);}}}_this7.value=selected;fn(selected);};}/**
     * @param {?} fn
     * @return {?}
     */},{key:'registerOnTouched',value:function registerOnTouched(fn){this.onTouched=fn;}/**
     * @param {?} isDisabled
     * @return {?}
     */},{key:'setDisabledState',value:function setDisabledState(isDisabled){this._renderer.setElementProperty(this._elementRef.nativeElement,'disabled',isDisabled);}/**
     * \@internal
     * @param {?} value
     * @return {?}
     */},{key:'_registerOption',value:function _registerOption(value){var/** @type {?} */id=(this._idCounter++).toString();this._optionMap.set(id,value);return id;}/**
     * \@internal
     * @param {?} value
     * @return {?}
     */},{key:'_getOptionId',value:function _getOptionId(value){var _iteratorNormalCompletion5=true;var _didIteratorError5=false;var _iteratorError5=undefined;try{for(var _iterator5=Array.from(this._optionMap.keys())[Symbol.iterator](),_step5;!(_iteratorNormalCompletion5=(_step5=_iterator5.next()).done);_iteratorNormalCompletion5=true){var id=_step5.value;if(this._compareWith(this._optionMap.get(id)._value,value))return id;}}catch(err){_didIteratorError5=true;_iteratorError5=err;}finally{try{if(!_iteratorNormalCompletion5&&_iterator5.return){_iterator5.return();}}finally{if(_didIteratorError5){throw _iteratorError5;}}}return null;}/**
     * \@internal
     * @param {?} valueString
     * @return {?}
     */},{key:'_getOptionValue',value:function _getOptionValue(valueString){var/** @type {?} */id=_extractId$1(valueString);return this._optionMap.has(id)?this._optionMap.get(id)._value:valueString;}},{key:'compareWith',set:function set(fn){if(typeof fn!=='function'){throw new Error('compareWith must be a function, but received '+JSON.stringify(fn));}this._compareWith=fn;}}]);return SelectMultipleControlValueAccessor;}();SelectMultipleControlValueAccessor.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',host:{'(change)':'onChange($event.target)','(blur)':'onTouched()'},providers:[SELECT_MULTIPLE_VALUE_ACCESSOR]}]}];/** @nocollapse */SelectMultipleControlValueAccessor.ctorParameters=function(){return[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["s" /* Renderer */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["t" /* ElementRef */]}];};SelectMultipleControlValueAccessor.propDecorators={'compareWith':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */]}]};/**
 * Marks `<option>` as dynamic, so Angular can be notified when options change.
 *
 * ### Example
 *
 * ```
 * <select multiple name="city" ngModel>
 *   <option *ngFor="let c of cities" [value]="c"></option>
 * </select>
 * ```
 */var NgSelectMultipleOption=function(){/**
     * @param {?} _element
     * @param {?} _renderer
     * @param {?} _select
     */function NgSelectMultipleOption(_element,_renderer,_select){_classCallCheck(this,NgSelectMultipleOption);this._element=_element;this._renderer=_renderer;this._select=_select;if(this._select){this.id=this._select._registerOption(this);}}/**
     * @param {?} value
     * @return {?}
     */_createClass(NgSelectMultipleOption,[{key:'_setElementValue',/**
     * \@internal
     * @param {?} value
     * @return {?}
     */value:function _setElementValue(value){this._renderer.setElementProperty(this._element.nativeElement,'value',value);}/**
     * \@internal
     * @param {?} selected
     * @return {?}
     */},{key:'_setSelected',value:function _setSelected(selected){this._renderer.setElementProperty(this._element.nativeElement,'selected',selected);}/**
     * @return {?}
     */},{key:'ngOnDestroy',value:function ngOnDestroy(){if(this._select){this._select._optionMap.delete(this.id);this._select.writeValue(this._select.value);}}},{key:'ngValue',set:function set(value){if(this._select==null)return;this._value=value;this._setElementValue(_buildValueString$1(this.id,value));this._select.writeValue(this._select.value);}/**
     * @param {?} value
     * @return {?}
     */},{key:'value',set:function set(value){if(this._select){this._value=value;this._setElementValue(_buildValueString$1(this.id,value));this._select.writeValue(this._select.value);}else{this._setElementValue(value);}}}]);return NgSelectMultipleOption;}();NgSelectMultipleOption.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'option'}]}];/** @nocollapse */NgSelectMultipleOption.ctorParameters=function(){return[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["t" /* ElementRef */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["s" /* Renderer */]},{type:SelectMultipleControlValueAccessor,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["E" /* Optional */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_7" /* Host */]}]}];};NgSelectMultipleOption.propDecorators={'ngValue':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */],args:['ngValue']}],'value':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */],args:['value']}]};/**
 * @param {?} name
 * @param {?} parent
 * @return {?}
 */function controlPath(name,parent){return[].concat(_toConsumableArray(parent.path),[name]);}/**
 * @param {?} control
 * @param {?} dir
 * @return {?}
 */function setUpControl(control,dir){if(!control)_throwError(dir,'Cannot find control with');if(!dir.valueAccessor)_throwError(dir,'No value accessor for form control with');control.validator=Validators.compose([control.validator,dir.validator]);control.asyncValidator=Validators.composeAsync([control.asyncValidator,dir.asyncValidator]);dir.valueAccessor.writeValue(control.value);// view -> model
dir.valueAccessor.registerOnChange(function(newValue){dir.viewToModelUpdate(newValue);control.markAsDirty();control.setValue(newValue,{emitModelToViewChange:false});});// touched
dir.valueAccessor.registerOnTouched(function(){return control.markAsTouched();});control.registerOnChange(function(newValue,emitModelEvent){// control -> view
dir.valueAccessor.writeValue(newValue);// control -> ngModel
if(emitModelEvent)dir.viewToModelUpdate(newValue);});if(dir.valueAccessor.setDisabledState){control.registerOnDisabledChange(function(isDisabled){dir.valueAccessor.setDisabledState(isDisabled);});}// re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4
dir._rawValidators.forEach(function(validator){if(validator.registerOnValidatorChange)validator.registerOnValidatorChange(function(){return control.updateValueAndValidity();});});dir._rawAsyncValidators.forEach(function(validator){if(validator.registerOnValidatorChange)validator.registerOnValidatorChange(function(){return control.updateValueAndValidity();});});}/**
 * @param {?} control
 * @param {?} dir
 * @return {?}
 */function cleanUpControl(control,dir){dir.valueAccessor.registerOnChange(function(){return _noControlError(dir);});dir.valueAccessor.registerOnTouched(function(){return _noControlError(dir);});dir._rawValidators.forEach(function(validator){if(validator.registerOnValidatorChange){validator.registerOnValidatorChange(null);}});dir._rawAsyncValidators.forEach(function(validator){if(validator.registerOnValidatorChange){validator.registerOnValidatorChange(null);}});if(control)control._clearChangeFns();}/**
 * @param {?} control
 * @param {?} dir
 * @return {?}
 */function setUpFormContainer(control,dir){if(isBlank(control))_throwError(dir,'Cannot find control with');control.validator=Validators.compose([control.validator,dir.validator]);control.asyncValidator=Validators.composeAsync([control.asyncValidator,dir.asyncValidator]);}/**
 * @param {?} dir
 * @return {?}
 */function _noControlError(dir){return _throwError(dir,'There is no FormControl instance attached to form control element with');}/**
 * @param {?} dir
 * @param {?} message
 * @return {?}
 */function _throwError(dir,message){var/** @type {?} */messageEnd=void 0;if(dir.path.length>1){messageEnd='path: \''+dir.path.join(' -> ')+'\'';}else if(dir.path[0]){messageEnd='name: \''+dir.path+'\'';}else{messageEnd='unspecified name attribute';}throw new Error(message+' '+messageEnd);}/**
 * @param {?} validators
 * @return {?}
 */function composeValidators(validators){return isPresent(validators)?Validators.compose(validators.map(normalizeValidator)):null;}/**
 * @param {?} validators
 * @return {?}
 */function composeAsyncValidators(validators){return isPresent(validators)?Validators.composeAsync(validators.map(normalizeAsyncValidator)):null;}/**
 * @param {?} changes
 * @param {?} viewModel
 * @return {?}
 */function isPropertyUpdated(changes,viewModel){if(!changes.hasOwnProperty('model'))return false;var/** @type {?} */change=changes['model'];if(change.isFirstChange())return true;return!looseIdentical(viewModel,change.currentValue);}var/** @type {?} */BUILTIN_ACCESSORS=[CheckboxControlValueAccessor,RangeValueAccessor,NumberValueAccessor,SelectControlValueAccessor,SelectMultipleControlValueAccessor,RadioControlValueAccessor];/**
 * @param {?} valueAccessor
 * @return {?}
 */function isBuiltInAccessor(valueAccessor){return BUILTIN_ACCESSORS.some(function(a){return valueAccessor.constructor===a;});}/**
 * @param {?} dir
 * @param {?} valueAccessors
 * @return {?}
 */function selectValueAccessor(dir,valueAccessors){if(!valueAccessors)return null;var/** @type {?} */defaultAccessor=void 0;var/** @type {?} */builtinAccessor=void 0;var/** @type {?} */customAccessor=void 0;valueAccessors.forEach(function(v){if(v.constructor===DefaultValueAccessor){defaultAccessor=v;}else if(isBuiltInAccessor(v)){if(builtinAccessor)_throwError(dir,'More than one built-in value accessor matches form control with');builtinAccessor=v;}else{if(customAccessor)_throwError(dir,'More than one custom value accessor matches form control with');customAccessor=v;}});if(customAccessor)return customAccessor;if(builtinAccessor)return builtinAccessor;if(defaultAccessor)return defaultAccessor;_throwError(dir,'No valid value accessor for form control with');return null;}/**
 * This is a base class for code shared between {\@link NgModelGroup} and {\@link FormGroupName}.
 *
 * \@stable
 */var AbstractFormGroupDirective=function(_ControlContainer){_inherits(AbstractFormGroupDirective,_ControlContainer);function AbstractFormGroupDirective(){_classCallCheck(this,AbstractFormGroupDirective);return _possibleConstructorReturn(this,(AbstractFormGroupDirective.__proto__||Object.getPrototypeOf(AbstractFormGroupDirective)).apply(this,arguments));}_createClass(AbstractFormGroupDirective,[{key:'ngOnInit',/**
     * @return {?}
     */value:function ngOnInit(){this._checkParentType();this.formDirective.addFormGroup(this);}/**
     * @return {?}
     */},{key:'ngOnDestroy',value:function ngOnDestroy(){if(this.formDirective){this.formDirective.removeFormGroup(this);}}/**
     * Get the {\@link FormGroup} backing this binding.
     * @return {?}
     */},{key:'_checkParentType',/**
     * \@internal
     * @return {?}
     */value:function _checkParentType(){}},{key:'control',get:function get(){return this.formDirective.getFormGroup(this);}/**
     * Get the path to this control group.
     * @return {?}
     */},{key:'path',get:function get(){return controlPath(this.name,this._parent);}/**
     * Get the {\@link Form} to which this group belongs.
     * @return {?}
     */},{key:'formDirective',get:function get(){return this._parent?this._parent.formDirective:null;}/**
     * @return {?}
     */},{key:'validator',get:function get(){return composeValidators(this._validators);}/**
     * @return {?}
     */},{key:'asyncValidator',get:function get(){return composeAsyncValidators(this._asyncValidators);}}]);return AbstractFormGroupDirective;}(ControlContainer);var AbstractControlStatus=function(){/**
     * @param {?} cd
     */function AbstractControlStatus(cd){_classCallCheck(this,AbstractControlStatus);this._cd=cd;}/**
     * @return {?}
     */_createClass(AbstractControlStatus,[{key:'ngClassUntouched',get:function get(){return this._cd.control?this._cd.control.untouched:false;}/**
     * @return {?}
     */},{key:'ngClassTouched',get:function get(){return this._cd.control?this._cd.control.touched:false;}/**
     * @return {?}
     */},{key:'ngClassPristine',get:function get(){return this._cd.control?this._cd.control.pristine:false;}/**
     * @return {?}
     */},{key:'ngClassDirty',get:function get(){return this._cd.control?this._cd.control.dirty:false;}/**
     * @return {?}
     */},{key:'ngClassValid',get:function get(){return this._cd.control?this._cd.control.valid:false;}/**
     * @return {?}
     */},{key:'ngClassInvalid',get:function get(){return this._cd.control?this._cd.control.invalid:false;}/**
     * @return {?}
     */},{key:'ngClassPending',get:function get(){return this._cd.control?this._cd.control.pending:false;}}]);return AbstractControlStatus;}();var/** @type {?} */ngControlStatusHost={'[class.ng-untouched]':'ngClassUntouched','[class.ng-touched]':'ngClassTouched','[class.ng-pristine]':'ngClassPristine','[class.ng-dirty]':'ngClassDirty','[class.ng-valid]':'ngClassValid','[class.ng-invalid]':'ngClassInvalid','[class.ng-pending]':'ngClassPending'};/**
 * Directive automatically applied to Angular form controls that sets CSS classes
 * based on control status (valid/invalid/dirty/etc).
 *
 * \@stable
 */var NgControlStatus=function(_AbstractControlStatu){_inherits(NgControlStatus,_AbstractControlStatu);/**
     * @param {?} cd
     */function NgControlStatus(cd){_classCallCheck(this,NgControlStatus);return _possibleConstructorReturn(this,(NgControlStatus.__proto__||Object.getPrototypeOf(NgControlStatus)).call(this,cd));}return NgControlStatus;}(AbstractControlStatus);NgControlStatus.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'[formControlName],[ngModel],[formControl]',host:ngControlStatusHost}]}];/** @nocollapse */NgControlStatus.ctorParameters=function(){return[{type:NgControl,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_11" /* Self */]}]}];};/**
 * Directive automatically applied to Angular form groups that sets CSS classes
 * based on control status (valid/invalid/dirty/etc).
 *
 * \@stable
 */var NgControlStatusGroup=function(_AbstractControlStatu2){_inherits(NgControlStatusGroup,_AbstractControlStatu2);/**
     * @param {?} cd
     */function NgControlStatusGroup(cd){_classCallCheck(this,NgControlStatusGroup);return _possibleConstructorReturn(this,(NgControlStatusGroup.__proto__||Object.getPrototypeOf(NgControlStatusGroup)).call(this,cd));}return NgControlStatusGroup;}(AbstractControlStatus);NgControlStatusGroup.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',host:ngControlStatusHost}]}];/** @nocollapse */NgControlStatusGroup.ctorParameters=function(){return[{type:ControlContainer,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_11" /* Self */]}]}];};/**
 * Use by directives and components to emit custom Events.
 *
 * ### Examples
 *
 * In the following example, `Zippy` alternatively emits `open` and `close` events when its
 * title gets clicked:
 *
 * ```
 * \@Component({
 *   selector: 'zippy',
 *   template: `
 *   <div class="zippy">
 *     <div (click)="toggle()">Toggle</div>
 *     <div [hidden]="!visible">
 *       <ng-content></ng-content>
 *     </div>
 *  </div>`})
 * export class Zippy {
 *   visible: boolean = true;
 *   \@Output() open: EventEmitter<any> = new EventEmitter();
 *   \@Output() close: EventEmitter<any> = new EventEmitter();
 *
 *   toggle() {
 *     this.visible = !this.visible;
 *     if (this.visible) {
 *       this.open.emit(null);
 *     } else {
 *       this.close.emit(null);
 *     }
 *   }
 * }
 * ```
 *
 * The events payload can be accessed by the parameter `$event` on the components output event
 * handler:
 *
 * ```
 * <zippy (open)="onOpen($event)" (close)="onClose($event)"></zippy>
 * ```
 *
 * Uses Rx.Observable but provides an adapter to make it work as specified here:
 * https://github.com/jhusain/observable-spec
 *
 * Once a reference implementation of the spec is available, switch to it.
 * \@stable
 */var EventEmitter=function(_Subject){_inherits(EventEmitter,_Subject);/**
     * Creates an instance of [EventEmitter], which depending on [isAsync],
     * delivers events synchronously or asynchronously.
     * @param {?=} isAsync
     */function EventEmitter(){var isAsync=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;_classCallCheck(this,EventEmitter);var _this11=_possibleConstructorReturn(this,(EventEmitter.__proto__||Object.getPrototypeOf(EventEmitter)).call(this));_this11.__isAsync=isAsync;return _this11;}/**
     * @param {?=} value
     * @return {?}
     */_createClass(EventEmitter,[{key:'emit',value:function emit(value){_get(EventEmitter.prototype.__proto__||Object.getPrototypeOf(EventEmitter.prototype),'next',this).call(this,value);}/**
     * @param {?=} generatorOrNext
     * @param {?=} error
     * @param {?=} complete
     * @return {?}
     */},{key:'subscribe',value:function subscribe(generatorOrNext,error,complete){var/** @type {?} */schedulerFn=void 0;var/** @type {?} */errorFn=function errorFn(err){return null;};var/** @type {?} */completeFn=function completeFn(){return null;};if(generatorOrNext&&(typeof generatorOrNext==='undefined'?'undefined':_typeof(generatorOrNext))==='object'){schedulerFn=this.__isAsync?function(value){setTimeout(function(){return generatorOrNext.next(value);});}:function(value){generatorOrNext.next(value);};if(generatorOrNext.error){errorFn=this.__isAsync?function(err){setTimeout(function(){return generatorOrNext.error(err);});}:function(err){generatorOrNext.error(err);};}if(generatorOrNext.complete){completeFn=this.__isAsync?function(){setTimeout(function(){return generatorOrNext.complete();});}:function(){generatorOrNext.complete();};}}else{schedulerFn=this.__isAsync?function(value){setTimeout(function(){return generatorOrNext(value);});}:function(value){generatorOrNext(value);};if(error){errorFn=this.__isAsync?function(err){setTimeout(function(){return error(err);});}:function(err){error(err);};}if(complete){completeFn=this.__isAsync?function(){setTimeout(function(){return complete();});}:function(){complete();};}}return _get(EventEmitter.prototype.__proto__||Object.getPrototypeOf(EventEmitter.prototype),'subscribe',this).call(this,schedulerFn,errorFn,completeFn);}}]);return EventEmitter;}(__WEBPACK_IMPORTED_MODULE_2_rxjs_Subject__["Subject"]);/**
 * Indicates that a FormControl is valid, i.e. that no errors exist in the input value.
 */var/** @type {?} */VALID='VALID';/**
 * Indicates that a FormControl is invalid, i.e. that an error exists in the input value.
 */var/** @type {?} */INVALID='INVALID';/**
 * Indicates that a FormControl is pending, i.e. that async validation is occurring and
 * errors are not yet available for the input value.
 */var/** @type {?} */PENDING='PENDING';/**
 * Indicates that a FormControl is disabled, i.e. that the control is exempt from ancestor
 * calculations of validity or value.
 */var/** @type {?} */DISABLED='DISABLED';/**
 * @param {?} control
 * @param {?} path
 * @param {?} delimiter
 * @return {?}
 */function _find(control,path,delimiter){if(path==null)return null;if(!(path instanceof Array)){path=path.split(delimiter);}if(path instanceof Array&&path.length===0)return null;return path.reduce(function(v,name){if(v instanceof FormGroup){return v.controls[name]||null;}if(v instanceof FormArray){return v.at(/** @type {?} */name)||null;}return null;},control);}/**
 * @param {?} r
 * @return {?}
 */function toObservable(r){return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["m" /* ɵisPromise */])(r)?__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_rxjs_observable_fromPromise__["fromPromise"])(r):r;}/**
 * @param {?} validator
 * @return {?}
 */function coerceToValidator(validator){return Array.isArray(validator)?composeValidators(validator):validator;}/**
 * @param {?} asyncValidator
 * @return {?}
 */function coerceToAsyncValidator(asyncValidator){return Array.isArray(asyncValidator)?composeAsyncValidators(asyncValidator):asyncValidator;}/**
 * \@whatItDoes This is the base class for {\@link FormControl}, {\@link FormGroup}, and
 * {\@link FormArray}.
 *
 * It provides some of the shared behavior that all controls and groups of controls have, like
 * running validators, calculating status, and resetting state. It also defines the properties
 * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be
 * instantiated directly.
 *
 * \@stable
 * @abstract
 */var AbstractControl=function(){/**
     * @param {?} validator
     * @param {?} asyncValidator
     */function AbstractControl(validator,asyncValidator){_classCallCheck(this,AbstractControl);this.validator=validator;this.asyncValidator=asyncValidator;/** @internal */this._onCollectionChange=function(){};this._pristine=true;this._touched=false;/** @internal */this._onDisabledChange=[];}/**
     * The value of the control.
     * @return {?}
     */_createClass(AbstractControl,[{key:'setValidators',/**
     * Sets the synchronous validators that are active on this control.  Calling
     * this will overwrite any existing sync validators.
     * @param {?} newValidator
     * @return {?}
     */value:function setValidators(newValidator){this.validator=coerceToValidator(newValidator);}/**
     * Sets the async validators that are active on this control. Calling this
     * will overwrite any existing async validators.
     * @param {?} newValidator
     * @return {?}
     */},{key:'setAsyncValidators',value:function setAsyncValidators(newValidator){this.asyncValidator=coerceToAsyncValidator(newValidator);}/**
     * Empties out the sync validator list.
     * @return {?}
     */},{key:'clearValidators',value:function clearValidators(){this.validator=null;}/**
     * Empties out the async validator list.
     * @return {?}
     */},{key:'clearAsyncValidators',value:function clearAsyncValidators(){this.asyncValidator=null;}/**
     * Marks the control as `touched`.
     *
     * This will also mark all direct ancestors as `touched` to maintain
     * the model.
     * @param {?=} __0
     * @return {?}
     */},{key:'markAsTouched',value:function markAsTouched(){var _ref=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},onlySelf=_ref.onlySelf;this._touched=true;if(this._parent&&!onlySelf){this._parent.markAsTouched({onlySelf:onlySelf});}}/**
     * Marks the control as `untouched`.
     *
     * If the control has any children, it will also mark all children as `untouched`
     * to maintain the model, and re-calculate the `touched` status of all parent
     * controls.
     * @param {?=} __0
     * @return {?}
     */},{key:'markAsUntouched',value:function markAsUntouched(){var _ref2=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},onlySelf=_ref2.onlySelf;this._touched=false;this._forEachChild(function(control){control.markAsUntouched({onlySelf:true});});if(this._parent&&!onlySelf){this._parent._updateTouched({onlySelf:onlySelf});}}/**
     * Marks the control as `dirty`.
     *
     * This will also mark all direct ancestors as `dirty` to maintain
     * the model.
     * @param {?=} __0
     * @return {?}
     */},{key:'markAsDirty',value:function markAsDirty(){var _ref3=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},onlySelf=_ref3.onlySelf;this._pristine=false;if(this._parent&&!onlySelf){this._parent.markAsDirty({onlySelf:onlySelf});}}/**
     * Marks the control as `pristine`.
     *
     * If the control has any children, it will also mark all children as `pristine`
     * to maintain the model, and re-calculate the `pristine` status of all parent
     * controls.
     * @param {?=} __0
     * @return {?}
     */},{key:'markAsPristine',value:function markAsPristine(){var _ref4=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},onlySelf=_ref4.onlySelf;this._pristine=true;this._forEachChild(function(control){control.markAsPristine({onlySelf:true});});if(this._parent&&!onlySelf){this._parent._updatePristine({onlySelf:onlySelf});}}/**
     * Marks the control as `pending`.
     * @param {?=} __0
     * @return {?}
     */},{key:'markAsPending',value:function markAsPending(){var _ref5=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},onlySelf=_ref5.onlySelf;this._status=PENDING;if(this._parent&&!onlySelf){this._parent.markAsPending({onlySelf:onlySelf});}}/**
     * Disables the control. This means the control will be exempt from validation checks and
     * excluded from the aggregate value of any parent. Its status is `DISABLED`.
     *
     * If the control has children, all children will be disabled to maintain the model.
     * @param {?=} __0
     * @return {?}
     */},{key:'disable',value:function disable(){var _ref6=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},onlySelf=_ref6.onlySelf,emitEvent=_ref6.emitEvent;this._status=DISABLED;this._errors=null;this._forEachChild(function(control){control.disable({onlySelf:true});});this._updateValue();if(emitEvent!==false){this._valueChanges.emit(this._value);this._statusChanges.emit(this._status);}this._updateAncestors(onlySelf);this._onDisabledChange.forEach(function(changeFn){return changeFn(true);});}/**
     * Enables the control. This means the control will be included in validation checks and
     * the aggregate value of its parent. Its status is re-calculated based on its value and
     * its validators.
     *
     * If the control has children, all children will be enabled.
     * @param {?=} __0
     * @return {?}
     */},{key:'enable',value:function enable(){var _ref7=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},onlySelf=_ref7.onlySelf,emitEvent=_ref7.emitEvent;this._status=VALID;this._forEachChild(function(control){control.enable({onlySelf:true});});this.updateValueAndValidity({onlySelf:true,emitEvent:emitEvent});this._updateAncestors(onlySelf);this._onDisabledChange.forEach(function(changeFn){return changeFn(false);});}/**
     * @param {?} onlySelf
     * @return {?}
     */},{key:'_updateAncestors',value:function _updateAncestors(onlySelf){if(this._parent&&!onlySelf){this._parent.updateValueAndValidity();this._parent._updatePristine();this._parent._updateTouched();}}/**
     * @param {?} parent
     * @return {?}
     */},{key:'setParent',value:function setParent(parent){this._parent=parent;}/**
     * Sets the value of the control. Abstract method (implemented in sub-classes).
     * @abstract
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */},{key:'setValue',value:function setValue(value,options){}/**
     * Patches the value of the control. Abstract method (implemented in sub-classes).
     * @abstract
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */},{key:'patchValue',value:function patchValue(value,options){}/**
     * Resets the control. Abstract method (implemented in sub-classes).
     * @abstract
     * @param {?=} value
     * @param {?=} options
     * @return {?}
     */},{key:'reset',value:function reset(value,options){}/**
     * Re-calculates the value and validation status of the control.
     *
     * By default, it will also update the value and validity of its ancestors.
     * @param {?=} __0
     * @return {?}
     */},{key:'updateValueAndValidity',value:function updateValueAndValidity(){var _ref8=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},onlySelf=_ref8.onlySelf,emitEvent=_ref8.emitEvent;this._setInitialStatus();this._updateValue();if(this.enabled){this._cancelExistingSubscription();this._errors=this._runValidator();this._status=this._calculateStatus();if(this._status===VALID||this._status===PENDING){this._runAsyncValidator(emitEvent);}}if(emitEvent!==false){this._valueChanges.emit(this._value);this._statusChanges.emit(this._status);}if(this._parent&&!onlySelf){this._parent.updateValueAndValidity({onlySelf:onlySelf,emitEvent:emitEvent});}}/**
     * \@internal
     * @param {?=} __0
     * @return {?}
     */},{key:'_updateTreeValidity',value:function _updateTreeValidity(){var _ref9=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{emitEvent:true},emitEvent=_ref9.emitEvent;this._forEachChild(function(ctrl){return ctrl._updateTreeValidity({emitEvent:emitEvent});});this.updateValueAndValidity({onlySelf:true,emitEvent:emitEvent});}/**
     * @return {?}
     */},{key:'_setInitialStatus',value:function _setInitialStatus(){this._status=this._allControlsDisabled()?DISABLED:VALID;}/**
     * @return {?}
     */},{key:'_runValidator',value:function _runValidator(){return this.validator?this.validator(this):null;}/**
     * @param {?} emitEvent
     * @return {?}
     */},{key:'_runAsyncValidator',value:function _runAsyncValidator(emitEvent){var _this12=this;if(this.asyncValidator){this._status=PENDING;var/** @type {?} */obs=toObservable(this.asyncValidator(this));if(!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["l" /* ɵisObservable */])(obs)){throw new Error('expected the following validator to return Promise or Observable: '+this.asyncValidator+'. If you are using FormBuilder; did you forget to brace your validators in an array?');}this._asyncValidationSubscription=obs.subscribe({next:function next(res){return _this12.setErrors(res,{emitEvent:emitEvent});}});}}/**
     * @return {?}
     */},{key:'_cancelExistingSubscription',value:function _cancelExistingSubscription(){if(this._asyncValidationSubscription){this._asyncValidationSubscription.unsubscribe();}}/**
     * Sets errors on a form control.
     *
     * This is used when validations are run manually by the user, rather than automatically.
     *
     * Calling `setErrors` will also update the validity of the parent control.
     *
     * ### Example
     *
     * ```
     * const login = new FormControl("someLogin");
     * login.setErrors({
     *   "notUnique": true
     * });
     *
     * expect(login.valid).toEqual(false);
     * expect(login.errors).toEqual({"notUnique": true});
     *
     * login.setValue("someOtherLogin");
     *
     * expect(login.valid).toEqual(true);
     * ```
     * @param {?} errors
     * @param {?=} __1
     * @return {?}
     */},{key:'setErrors',value:function setErrors(errors){var _ref10=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},emitEvent=_ref10.emitEvent;this._errors=errors;this._updateControlsErrors(emitEvent!==false);}/**
     * Retrieves a child control given the control's name or path.
     *
     * Paths can be passed in as an array or a string delimited by a dot.
     *
     * To get a control nested within a `person` sub-group:
     *
     * * `this.form.get('person.name');`
     *
     * -OR-
     *
     * * `this.form.get(['person', 'name']);`
     * @param {?} path
     * @return {?}
     */},{key:'get',value:function get(path){return _find(this,path,'.');}/**
     * Returns true if the control with the given path has the error specified. Otherwise
     * returns null or undefined.
     *
     * If no path is given, it checks for the error on the present control.
     * @param {?} errorCode
     * @param {?=} path
     * @return {?}
     */},{key:'getError',value:function getError(errorCode){var path=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var/** @type {?} */control=path?this.get(path):this;return control&&control._errors?control._errors[errorCode]:null;}/**
     * Returns true if the control with the given path has the error specified. Otherwise
     * returns false.
     *
     * If no path is given, it checks for the error on the present control.
     * @param {?} errorCode
     * @param {?=} path
     * @return {?}
     */},{key:'hasError',value:function hasError(errorCode){var path=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return!!this.getError(errorCode,path);}/**
     * Retrieves the top-level ancestor of this control.
     * @return {?}
     */},{key:'_updateControlsErrors',/**
     * \@internal
     * @param {?} emitEvent
     * @return {?}
     */value:function _updateControlsErrors(emitEvent){this._status=this._calculateStatus();if(emitEvent){this._statusChanges.emit(this._status);}if(this._parent){this._parent._updateControlsErrors(emitEvent);}}/**
     * \@internal
     * @return {?}
     */},{key:'_initObservables',value:function _initObservables(){this._valueChanges=new EventEmitter();this._statusChanges=new EventEmitter();}/**
     * @return {?}
     */},{key:'_calculateStatus',value:function _calculateStatus(){if(this._allControlsDisabled())return DISABLED;if(this._errors)return INVALID;if(this._anyControlsHaveStatus(PENDING))return PENDING;if(this._anyControlsHaveStatus(INVALID))return INVALID;return VALID;}/**
     * \@internal
     * @abstract
     * @return {?}
     */},{key:'_updateValue',value:function _updateValue(){}/**
     * \@internal
     * @abstract
     * @param {?} cb
     * @return {?}
     */},{key:'_forEachChild',value:function _forEachChild(cb){}/**
     * \@internal
     * @abstract
     * @param {?} condition
     * @return {?}
     */},{key:'_anyControls',value:function _anyControls(condition){}/**
     * \@internal
     * @abstract
     * @return {?}
     */},{key:'_allControlsDisabled',value:function _allControlsDisabled(){}/**
     * \@internal
     * @param {?} status
     * @return {?}
     */},{key:'_anyControlsHaveStatus',value:function _anyControlsHaveStatus(status){return this._anyControls(function(control){return control.status===status;});}/**
     * \@internal
     * @return {?}
     */},{key:'_anyControlsDirty',value:function _anyControlsDirty(){return this._anyControls(function(control){return control.dirty;});}/**
     * \@internal
     * @return {?}
     */},{key:'_anyControlsTouched',value:function _anyControlsTouched(){return this._anyControls(function(control){return control.touched;});}/**
     * \@internal
     * @param {?=} __0
     * @return {?}
     */},{key:'_updatePristine',value:function _updatePristine(){var _ref11=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},onlySelf=_ref11.onlySelf;this._pristine=!this._anyControlsDirty();if(this._parent&&!onlySelf){this._parent._updatePristine({onlySelf:onlySelf});}}/**
     * \@internal
     * @param {?=} __0
     * @return {?}
     */},{key:'_updateTouched',value:function _updateTouched(){var _ref12=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},onlySelf=_ref12.onlySelf;this._touched=this._anyControlsTouched();if(this._parent&&!onlySelf){this._parent._updateTouched({onlySelf:onlySelf});}}/**
     * \@internal
     * @param {?} formState
     * @return {?}
     */},{key:'_isBoxedValue',value:function _isBoxedValue(formState){return(typeof formState==='undefined'?'undefined':_typeof(formState))==='object'&&formState!==null&&Object.keys(formState).length===2&&'value'in formState&&'disabled'in formState;}/**
     * \@internal
     * @param {?} fn
     * @return {?}
     */},{key:'_registerOnCollectionChange',value:function _registerOnCollectionChange(fn){this._onCollectionChange=fn;}},{key:'value',get:function get(){return this._value;}/**
     * The parent control.
     * @return {?}
     */},{key:'parent',get:function get(){return this._parent;}/**
     * The validation status of the control. There are four possible
     * validation statuses:
     *
     * * **VALID**:  control has passed all validation checks
     * * **INVALID**: control has failed at least one validation check
     * * **PENDING**: control is in the midst of conducting a validation check
     * * **DISABLED**: control is exempt from validation checks
     *
     * These statuses are mutually exclusive, so a control cannot be
     * both valid AND invalid or invalid AND disabled.
     * @return {?}
     */},{key:'status',get:function get(){return this._status;}/**
     * A control is `valid` when its `status === VALID`.
     *
     * In order to have this status, the control must have passed all its
     * validation checks.
     * @return {?}
     */},{key:'valid',get:function get(){return this._status===VALID;}/**
     * A control is `invalid` when its `status === INVALID`.
     *
     * In order to have this status, the control must have failed
     * at least one of its validation checks.
     * @return {?}
     */},{key:'invalid',get:function get(){return this._status===INVALID;}/**
     * A control is `pending` when its `status === PENDING`.
     *
     * In order to have this status, the control must be in the
     * middle of conducting a validation check.
     * @return {?}
     */},{key:'pending',get:function get(){return this._status==PENDING;}/**
     * A control is `disabled` when its `status === DISABLED`.
     *
     * Disabled controls are exempt from validation checks and
     * are not included in the aggregate value of their ancestor
     * controls.
     * @return {?}
     */},{key:'disabled',get:function get(){return this._status===DISABLED;}/**
     * A control is `enabled` as long as its `status !== DISABLED`.
     *
     * In other words, it has a status of `VALID`, `INVALID`, or
     * `PENDING`.
     * @return {?}
     */},{key:'enabled',get:function get(){return this._status!==DISABLED;}/**
     * Returns any errors generated by failing validation. If there
     * are no errors, it will return null.
     * @return {?}
     */},{key:'errors',get:function get(){return this._errors;}/**
     * A control is `pristine` if the user has not yet changed
     * the value in the UI.
     *
     * Note that programmatic changes to a control's value will
     * *not* mark it dirty.
     * @return {?}
     */},{key:'pristine',get:function get(){return this._pristine;}/**
     * A control is `dirty` if the user has changed the value
     * in the UI.
     *
     * Note that programmatic changes to a control's value will
     * *not* mark it dirty.
     * @return {?}
     */},{key:'dirty',get:function get(){return!this.pristine;}/**
     * A control is marked `touched` once the user has triggered
     * a `blur` event on it.
     * @return {?}
     */},{key:'touched',get:function get(){return this._touched;}/**
     * A control is `untouched` if the user has not yet triggered
     * a `blur` event on it.
     * @return {?}
     */},{key:'untouched',get:function get(){return!this._touched;}/**
     * Emits an event every time the value of the control changes, in
     * the UI or programmatically.
     * @return {?}
     */},{key:'valueChanges',get:function get(){return this._valueChanges;}/**
     * Emits an event every time the validation status of the control
     * is re-calculated.
     * @return {?}
     */},{key:'statusChanges',get:function get(){return this._statusChanges;}},{key:'root',get:function get(){var/** @type {?} */x=this;while(x._parent){x=x._parent;}return x;}}]);return AbstractControl;}();/**
 * \@whatItDoes Tracks the value and validation status of an individual form control.
 *
 * It is one of the three fundamental building blocks of Angular forms, along with
 * {\@link FormGroup} and {\@link FormArray}.
 *
 * \@howToUse
 *
 * When instantiating a {\@link FormControl}, you can pass in an initial value as the
 * first argument. Example:
 *
 * ```ts
 * const ctrl = new FormControl('some value');
 * console.log(ctrl.value);     // 'some value'
 * ```
 *
 * You can also initialize the control with a form state object on instantiation,
 * which includes both the value and whether or not the control is disabled.
 * You can't use the value key without the disabled key; both are required
 * to use this way of initialization.
 *
 * ```ts
 * const ctrl = new FormControl({value: 'n/a', disabled: true});
 * console.log(ctrl.value);     // 'n/a'
 * console.log(ctrl.status);   // 'DISABLED'
 * ```
 *
 * To include a sync validator (or an array of sync validators) with the control,
 * pass it in as the second argument. Async validators are also supported, but
 * have to be passed in separately as the third arg.
 *
 * ```ts
 * const ctrl = new FormControl('', Validators.required);
 * console.log(ctrl.value);     // ''
 * console.log(ctrl.status);   // 'INVALID'
 * ```
 *
 * See its superclass, {\@link AbstractControl}, for more properties and methods.
 *
 * * **npm package**: `\@angular/forms`
 *
 * \@stable
 */var FormControl=function(_AbstractControl){_inherits(FormControl,_AbstractControl);/**
     * @param {?=} formState
     * @param {?=} validator
     * @param {?=} asyncValidator
     */function FormControl(){var formState=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var validator=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var asyncValidator=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;_classCallCheck(this,FormControl);/** @internal */var _this13=_possibleConstructorReturn(this,(FormControl.__proto__||Object.getPrototypeOf(FormControl)).call(this,coerceToValidator(validator),coerceToAsyncValidator(asyncValidator)));_this13._onChange=[];_this13._applyFormState(formState);_this13.updateValueAndValidity({onlySelf:true,emitEvent:false});_this13._initObservables();return _this13;}/**
     * Set the value of the form control to `value`.
     *
     * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`
     * and not its parent component. This defaults to false.
     *
     * If `emitEvent` is `true`, this
     * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults
     * to true (as it falls through to `updateValueAndValidity`).
     *
     * If `emitModelToViewChange` is `true`, the view will be notified about the new value
     * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not
     * specified.
     *
     * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the
     * model.  This is the default behavior if `emitViewToModelChange` is not specified.
     * @param {?} value
     * @param {?=} __1
     * @return {?}
     */_createClass(FormControl,[{key:'setValue',value:function setValue(value){var _this14=this;var _ref13=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},onlySelf=_ref13.onlySelf,emitEvent=_ref13.emitEvent,emitModelToViewChange=_ref13.emitModelToViewChange,emitViewToModelChange=_ref13.emitViewToModelChange;this._value=value;if(this._onChange.length&&emitModelToViewChange!==false){this._onChange.forEach(function(changeFn){return changeFn(_this14._value,emitViewToModelChange!==false);});}this.updateValueAndValidity({onlySelf:onlySelf,emitEvent:emitEvent});}/**
     * Patches the value of a control.
     *
     * This function is functionally the same as {\@link FormControl.setValue} at this level.
     * It exists for symmetry with {\@link FormGroup.patchValue} on `FormGroups` and `FormArrays`,
     * where it does behave differently.
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */},{key:'patchValue',value:function patchValue(value){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};this.setValue(value,options);}/**
     * Resets the form control. This means by default:
     *
     * * it is marked as `pristine`
     * * it is marked as `untouched`
     * * value is set to null
     *
     * You can also reset to a specific form state by passing through a standalone
     * value or a form state object that contains both a value and a disabled state
     * (these are the only two properties that cannot be calculated).
     *
     * Ex:
     *
     * ```ts
     * this.control.reset('Nancy');
     *
     * console.log(this.control.value);  // 'Nancy'
     * ```
     *
     * OR
     *
     * ```
     * this.control.reset({value: 'Nancy', disabled: true});
     *
     * console.log(this.control.value);  // 'Nancy'
     * console.log(this.control.status);  // 'DISABLED'
     * ```
     * @param {?=} formState
     * @param {?=} __1
     * @return {?}
     */},{key:'reset',value:function reset(){var formState=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var _ref14=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},onlySelf=_ref14.onlySelf,emitEvent=_ref14.emitEvent;this._applyFormState(formState);this.markAsPristine({onlySelf:onlySelf});this.markAsUntouched({onlySelf:onlySelf});this.setValue(this._value,{onlySelf:onlySelf,emitEvent:emitEvent});}/**
     * \@internal
     * @return {?}
     */},{key:'_updateValue',value:function _updateValue(){}/**
     * \@internal
     * @param {?} condition
     * @return {?}
     */},{key:'_anyControls',value:function _anyControls(condition){return false;}/**
     * \@internal
     * @return {?}
     */},{key:'_allControlsDisabled',value:function _allControlsDisabled(){return this.disabled;}/**
     * Register a listener for change events.
     * @param {?} fn
     * @return {?}
     */},{key:'registerOnChange',value:function registerOnChange(fn){this._onChange.push(fn);}/**
     * \@internal
     * @return {?}
     */},{key:'_clearChangeFns',value:function _clearChangeFns(){this._onChange=[];this._onDisabledChange=[];this._onCollectionChange=function(){};}/**
     * Register a listener for disabled events.
     * @param {?} fn
     * @return {?}
     */},{key:'registerOnDisabledChange',value:function registerOnDisabledChange(fn){this._onDisabledChange.push(fn);}/**
     * \@internal
     * @param {?} cb
     * @return {?}
     */},{key:'_forEachChild',value:function _forEachChild(cb){}/**
     * @param {?} formState
     * @return {?}
     */},{key:'_applyFormState',value:function _applyFormState(formState){if(this._isBoxedValue(formState)){this._value=formState.value;formState.disabled?this.disable({onlySelf:true,emitEvent:false}):this.enable({onlySelf:true,emitEvent:false});}else{this._value=formState;}}}]);return FormControl;}(AbstractControl);/**
 * \@whatItDoes Tracks the value and validity state of a group of {\@link FormControl}
 * instances.
 *
 * A `FormGroup` aggregates the values of each child {\@link FormControl} into one object,
 * with each control name as the key.  It calculates its status by reducing the statuses
 * of its children. For example, if one of the controls in a group is invalid, the entire
 * group becomes invalid.
 *
 * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,
 * along with {\@link FormControl} and {\@link FormArray}.
 *
 * \@howToUse
 *
 * When instantiating a {\@link FormGroup}, pass in a collection of child controls as the first
 * argument. The key for each child will be the name under which it is registered.
 *
 * ### Example
 *
 * ```
 * const form = new FormGroup({
 *   first: new FormControl('Nancy', Validators.minLength(2)),
 *   last: new FormControl('Drew'),
 * });
 *
 * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}
 * console.log(form.status);  // 'VALID'
 * ```
 *
 * You can also include group-level validators as the second arg, or group-level async
 * validators as the third arg. These come in handy when you want to perform validation
 * that considers the value of more than one child control.
 *
 * ### Example
 *
 * ```
 * const form = new FormGroup({
 *   password: new FormControl('', Validators.minLength(2)),
 *   passwordConfirm: new FormControl('', Validators.minLength(2)),
 * }, passwordMatchValidator);
 *
 *
 * function passwordMatchValidator(g: FormGroup) {
 *    return g.get('password').value === g.get('passwordConfirm').value
 *       ? null : {'mismatch': true};
 * }
 * ```
 *
 * * **npm package**: `\@angular/forms`
 *
 * \@stable
 */var FormGroup=function(_AbstractControl2){_inherits(FormGroup,_AbstractControl2);/**
     * @param {?} controls
     * @param {?=} validator
     * @param {?=} asyncValidator
     */function FormGroup(controls){var validator=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var asyncValidator=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;_classCallCheck(this,FormGroup);var _this15=_possibleConstructorReturn(this,(FormGroup.__proto__||Object.getPrototypeOf(FormGroup)).call(this,validator,asyncValidator));_this15.controls=controls;_this15._initObservables();_this15._setUpControls();_this15.updateValueAndValidity({onlySelf:true,emitEvent:false});return _this15;}/**
     * Registers a control with the group's list of controls.
     *
     * This method does not update value or validity of the control, so for
     * most cases you'll want to use {\@link FormGroup.addControl} instead.
     * @param {?} name
     * @param {?} control
     * @return {?}
     */_createClass(FormGroup,[{key:'registerControl',value:function registerControl(name,control){if(this.controls[name])return this.controls[name];this.controls[name]=control;control.setParent(this);control._registerOnCollectionChange(this._onCollectionChange);return control;}/**
     * Add a control to this group.
     * @param {?} name
     * @param {?} control
     * @return {?}
     */},{key:'addControl',value:function addControl(name,control){this.registerControl(name,control);this.updateValueAndValidity();this._onCollectionChange();}/**
     * Remove a control from this group.
     * @param {?} name
     * @return {?}
     */},{key:'removeControl',value:function removeControl(name){if(this.controls[name])this.controls[name]._registerOnCollectionChange(function(){});delete this.controls[name];this.updateValueAndValidity();this._onCollectionChange();}/**
     * Replace an existing control.
     * @param {?} name
     * @param {?} control
     * @return {?}
     */},{key:'setControl',value:function setControl(name,control){if(this.controls[name])this.controls[name]._registerOnCollectionChange(function(){});delete this.controls[name];if(control)this.registerControl(name,control);this.updateValueAndValidity();this._onCollectionChange();}/**
     * Check whether there is an enabled control with the given name in the group.
     *
     * It will return false for disabled controls. If you'd like to check for
     * existence in the group only, use {\@link AbstractControl.get} instead.
     * @param {?} controlName
     * @return {?}
     */},{key:'contains',value:function contains(controlName){return this.controls.hasOwnProperty(controlName)&&this.controls[controlName].enabled;}/**
     *  Sets the value of the {\@link FormGroup}. It accepts an object that matches
     *  the structure of the group, with control names as keys.
     *
     * This method performs strict checks, so it will throw an error if you try
     * to set the value of a control that doesn't exist or if you exclude the
     * value of a control.
     *
     *  ### Example
     *
     *  ```
     *  const form = new FormGroup({
     *     first: new FormControl(),
     *     last: new FormControl()
     *  });
     *  console.log(form.value);   // {first: null, last: null}
     *
     *  form.setValue({first: 'Nancy', last: 'Drew'});
     *  console.log(form.value);   // {first: 'Nancy', last: 'Drew'}
     *
     *  ```
     * @param {?} value
     * @param {?=} __1
     * @return {?}
     */},{key:'setValue',value:function setValue(value){var _this16=this;var _ref15=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},onlySelf=_ref15.onlySelf,emitEvent=_ref15.emitEvent;this._checkAllValuesPresent(value);Object.keys(value).forEach(function(name){_this16._throwIfControlMissing(name);_this16.controls[name].setValue(value[name],{onlySelf:true,emitEvent:emitEvent});});this.updateValueAndValidity({onlySelf:onlySelf,emitEvent:emitEvent});}/**
     *  Patches the value of the {\@link FormGroup}. It accepts an object with control
     *  names as keys, and will do its best to match the values to the correct controls
     *  in the group.
     *
     *  It accepts both super-sets and sub-sets of the group without throwing an error.
     *
     *  ### Example
     *
     *  ```
     *  const form = new FormGroup({
     *     first: new FormControl(),
     *     last: new FormControl()
     *  });
     *  console.log(form.value);   // {first: null, last: null}
     *
     *  form.patchValue({first: 'Nancy'});
     *  console.log(form.value);   // {first: 'Nancy', last: null}
     *
     *  ```
     * @param {?} value
     * @param {?=} __1
     * @return {?}
     */},{key:'patchValue',value:function patchValue(value){var _this17=this;var _ref16=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},onlySelf=_ref16.onlySelf,emitEvent=_ref16.emitEvent;Object.keys(value).forEach(function(name){if(_this17.controls[name]){_this17.controls[name].patchValue(value[name],{onlySelf:true,emitEvent:emitEvent});}});this.updateValueAndValidity({onlySelf:onlySelf,emitEvent:emitEvent});}/**
     * Resets the {\@link FormGroup}. This means by default:
     *
     * * The group and all descendants are marked `pristine`
     * * The group and all descendants are marked `untouched`
     * * The value of all descendants will be null or null maps
     *
     * You can also reset to a specific form state by passing in a map of states
     * that matches the structure of your form, with control names as keys. The state
     * can be a standalone value or a form state object with both a value and a disabled
     * status.
     *
     * ### Example
     *
     * ```ts
     * this.form.reset({first: 'name', last: 'last name'});
     *
     * console.log(this.form.value);  // {first: 'name', last: 'last name'}
     * ```
     *
     * - OR -
     *
     * ```
     * this.form.reset({
     *   first: {value: 'name', disabled: true},
     *   last: 'last'
     * });
     *
     * console.log(this.form.value);  // {first: 'name', last: 'last name'}
     * console.log(this.form.get('first').status);  // 'DISABLED'
     * ```
     * @param {?=} value
     * @param {?=} __1
     * @return {?}
     */},{key:'reset',value:function reset(){var value=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var _ref17=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},onlySelf=_ref17.onlySelf,emitEvent=_ref17.emitEvent;this._forEachChild(function(control,name){control.reset(value[name],{onlySelf:true,emitEvent:emitEvent});});this.updateValueAndValidity({onlySelf:onlySelf,emitEvent:emitEvent});this._updatePristine({onlySelf:onlySelf});this._updateTouched({onlySelf:onlySelf});}/**
     * The aggregate value of the {\@link FormGroup}, including any disabled controls.
     *
     * If you'd like to include all values regardless of disabled status, use this method.
     * Otherwise, the `value` property is the best way to get the value of the group.
     * @return {?}
     */},{key:'getRawValue',value:function getRawValue(){return this._reduceChildren({},function(acc,control,name){acc[name]=control instanceof FormControl?control.value:control.getRawValue();return acc;});}/**
     * \@internal
     * @param {?} name
     * @return {?}
     */},{key:'_throwIfControlMissing',value:function _throwIfControlMissing(name){if(!Object.keys(this.controls).length){throw new Error('\n        There are no form controls registered with this group yet.  If you\'re using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ');}if(!this.controls[name]){throw new Error('Cannot find form control with name: '+name+'.');}}/**
     * \@internal
     * @param {?} cb
     * @return {?}
     */},{key:'_forEachChild',value:function _forEachChild(cb){var _this18=this;Object.keys(this.controls).forEach(function(k){return cb(_this18.controls[k],k);});}/**
     * \@internal
     * @return {?}
     */},{key:'_setUpControls',value:function _setUpControls(){var _this19=this;this._forEachChild(function(control){control.setParent(_this19);control._registerOnCollectionChange(_this19._onCollectionChange);});}/**
     * \@internal
     * @return {?}
     */},{key:'_updateValue',value:function _updateValue(){this._value=this._reduceValue();}/**
     * \@internal
     * @param {?} condition
     * @return {?}
     */},{key:'_anyControls',value:function _anyControls(condition){var _this20=this;var/** @type {?} */res=false;this._forEachChild(function(control,name){res=res||_this20.contains(name)&&condition(control);});return res;}/**
     * \@internal
     * @return {?}
     */},{key:'_reduceValue',value:function _reduceValue(){var _this21=this;return this._reduceChildren({},function(acc,control,name){if(control.enabled||_this21.disabled){acc[name]=control.value;}return acc;});}/**
     * \@internal
     * @param {?} initValue
     * @param {?} fn
     * @return {?}
     */},{key:'_reduceChildren',value:function _reduceChildren(initValue,fn){var/** @type {?} */res=initValue;this._forEachChild(function(control,name){res=fn(res,control,name);});return res;}/**
     * \@internal
     * @return {?}
     */},{key:'_allControlsDisabled',value:function _allControlsDisabled(){var _iteratorNormalCompletion6=true;var _didIteratorError6=false;var _iteratorError6=undefined;try{for(var _iterator6=Object.keys(this.controls)[Symbol.iterator](),_step6;!(_iteratorNormalCompletion6=(_step6=_iterator6.next()).done);_iteratorNormalCompletion6=true){var controlName=_step6.value;if(this.controls[controlName].enabled){return false;}}}catch(err){_didIteratorError6=true;_iteratorError6=err;}finally{try{if(!_iteratorNormalCompletion6&&_iterator6.return){_iterator6.return();}}finally{if(_didIteratorError6){throw _iteratorError6;}}}return Object.keys(this.controls).length>0||this.disabled;}/**
     * \@internal
     * @param {?} value
     * @return {?}
     */},{key:'_checkAllValuesPresent',value:function _checkAllValuesPresent(value){this._forEachChild(function(control,name){if(value[name]===undefined){throw new Error('Must supply a value for form control with name: \''+name+'\'.');}});}}]);return FormGroup;}(AbstractControl);/**
 * \@whatItDoes Tracks the value and validity state of an array of {\@link FormControl},
 * {\@link FormGroup} or {\@link FormArray} instances.
 *
 * A `FormArray` aggregates the values of each child {\@link FormControl} into an array.
 * It calculates its status by reducing the statuses of its children. For example, if one of
 * the controls in a `FormArray` is invalid, the entire array becomes invalid.
 *
 * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,
 * along with {\@link FormControl} and {\@link FormGroup}.
 *
 * \@howToUse
 *
 * When instantiating a {\@link FormArray}, pass in an array of child controls as the first
 * argument.
 *
 * ### Example
 *
 * ```
 * const arr = new FormArray([
 *   new FormControl('Nancy', Validators.minLength(2)),
 *   new FormControl('Drew'),
 * ]);
 *
 * console.log(arr.value);   // ['Nancy', 'Drew']
 * console.log(arr.status);  // 'VALID'
 * ```
 *
 * You can also include array-level validators as the second arg, or array-level async
 * validators as the third arg. These come in handy when you want to perform validation
 * that considers the value of more than one child control.
 *
 * ### Adding or removing controls
 *
 * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods
 * in `FormArray` itself. These methods ensure the controls are properly tracked in the
 * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate
 * the `FormArray` directly, as that will result in strange and unexpected behavior such
 * as broken change detection.
 *
 * * **npm package**: `\@angular/forms`
 *
 * \@stable
 */var FormArray=function(_AbstractControl3){_inherits(FormArray,_AbstractControl3);/**
     * @param {?} controls
     * @param {?=} validator
     * @param {?=} asyncValidator
     */function FormArray(controls){var validator=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var asyncValidator=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;_classCallCheck(this,FormArray);var _this22=_possibleConstructorReturn(this,(FormArray.__proto__||Object.getPrototypeOf(FormArray)).call(this,validator,asyncValidator));_this22.controls=controls;_this22._initObservables();_this22._setUpControls();_this22.updateValueAndValidity({onlySelf:true,emitEvent:false});return _this22;}/**
     * Get the {\@link AbstractControl} at the given `index` in the array.
     * @param {?} index
     * @return {?}
     */_createClass(FormArray,[{key:'at',value:function at(index){return this.controls[index];}/**
     * Insert a new {\@link AbstractControl} at the end of the array.
     * @param {?} control
     * @return {?}
     */},{key:'push',value:function push(control){this.controls.push(control);this._registerControl(control);this.updateValueAndValidity();this._onCollectionChange();}/**
     * Insert a new {\@link AbstractControl} at the given `index` in the array.
     * @param {?} index
     * @param {?} control
     * @return {?}
     */},{key:'insert',value:function insert(index,control){this.controls.splice(index,0,control);this._registerControl(control);this.updateValueAndValidity();this._onCollectionChange();}/**
     * Remove the control at the given `index` in the array.
     * @param {?} index
     * @return {?}
     */},{key:'removeAt',value:function removeAt(index){if(this.controls[index])this.controls[index]._registerOnCollectionChange(function(){});this.controls.splice(index,1);this.updateValueAndValidity();this._onCollectionChange();}/**
     * Replace an existing control.
     * @param {?} index
     * @param {?} control
     * @return {?}
     */},{key:'setControl',value:function setControl(index,control){if(this.controls[index])this.controls[index]._registerOnCollectionChange(function(){});this.controls.splice(index,1);if(control){this.controls.splice(index,0,control);this._registerControl(control);}this.updateValueAndValidity();this._onCollectionChange();}/**
     * Length of the control array.
     * @return {?}
     */},{key:'setValue',/**
     *  Sets the value of the {\@link FormArray}. It accepts an array that matches
     *  the structure of the control.
     *
     * This method performs strict checks, so it will throw an error if you try
     * to set the value of a control that doesn't exist or if you exclude the
     * value of a control.
     *
     *  ### Example
     *
     *  ```
     *  const arr = new FormArray([
     *     new FormControl(),
     *     new FormControl()
     *  ]);
     *  console.log(arr.value);   // [null, null]
     *
     *  arr.setValue(['Nancy', 'Drew']);
     *  console.log(arr.value);   // ['Nancy', 'Drew']
     *  ```
     * @param {?} value
     * @param {?=} __1
     * @return {?}
     */value:function setValue(value){var _this23=this;var _ref18=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},onlySelf=_ref18.onlySelf,emitEvent=_ref18.emitEvent;this._checkAllValuesPresent(value);value.forEach(function(newValue,index){_this23._throwIfControlMissing(index);_this23.at(index).setValue(newValue,{onlySelf:true,emitEvent:emitEvent});});this.updateValueAndValidity({onlySelf:onlySelf,emitEvent:emitEvent});}/**
     *  Patches the value of the {\@link FormArray}. It accepts an array that matches the
     *  structure of the control, and will do its best to match the values to the correct
     *  controls in the group.
     *
     *  It accepts both super-sets and sub-sets of the array without throwing an error.
     *
     *  ### Example
     *
     *  ```
     *  const arr = new FormArray([
     *     new FormControl(),
     *     new FormControl()
     *  ]);
     *  console.log(arr.value);   // [null, null]
     *
     *  arr.patchValue(['Nancy']);
     *  console.log(arr.value);   // ['Nancy', null]
     *  ```
     * @param {?} value
     * @param {?=} __1
     * @return {?}
     */},{key:'patchValue',value:function patchValue(value){var _this24=this;var _ref19=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},onlySelf=_ref19.onlySelf,emitEvent=_ref19.emitEvent;value.forEach(function(newValue,index){if(_this24.at(index)){_this24.at(index).patchValue(newValue,{onlySelf:true,emitEvent:emitEvent});}});this.updateValueAndValidity({onlySelf:onlySelf,emitEvent:emitEvent});}/**
     * Resets the {\@link FormArray}. This means by default:
     *
     * * The array and all descendants are marked `pristine`
     * * The array and all descendants are marked `untouched`
     * * The value of all descendants will be null or null maps
     *
     * You can also reset to a specific form state by passing in an array of states
     * that matches the structure of the control. The state can be a standalone value
     * or a form state object with both a value and a disabled status.
     *
     * ### Example
     *
     * ```ts
     * this.arr.reset(['name', 'last name']);
     *
     * console.log(this.arr.value);  // ['name', 'last name']
     * ```
     *
     * - OR -
     *
     * ```
     * this.arr.reset([
     *   {value: 'name', disabled: true},
     *   'last'
     * ]);
     *
     * console.log(this.arr.value);  // ['name', 'last name']
     * console.log(this.arr.get(0).status);  // 'DISABLED'
     * ```
     * @param {?=} value
     * @param {?=} __1
     * @return {?}
     */},{key:'reset',value:function reset(){var value=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var _ref20=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},onlySelf=_ref20.onlySelf,emitEvent=_ref20.emitEvent;this._forEachChild(function(control,index){control.reset(value[index],{onlySelf:true,emitEvent:emitEvent});});this.updateValueAndValidity({onlySelf:onlySelf,emitEvent:emitEvent});this._updatePristine({onlySelf:onlySelf});this._updateTouched({onlySelf:onlySelf});}/**
     * The aggregate value of the array, including any disabled controls.
     *
     * If you'd like to include all values regardless of disabled status, use this method.
     * Otherwise, the `value` property is the best way to get the value of the array.
     * @return {?}
     */},{key:'getRawValue',value:function getRawValue(){return this.controls.map(function(control){return control instanceof FormControl?control.value:control.getRawValue();});}/**
     * \@internal
     * @param {?} index
     * @return {?}
     */},{key:'_throwIfControlMissing',value:function _throwIfControlMissing(index){if(!this.controls.length){throw new Error('\n        There are no form controls registered with this array yet.  If you\'re using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ');}if(!this.at(index)){throw new Error('Cannot find form control at index '+index);}}/**
     * \@internal
     * @param {?} cb
     * @return {?}
     */},{key:'_forEachChild',value:function _forEachChild(cb){this.controls.forEach(function(control,index){cb(control,index);});}/**
     * \@internal
     * @return {?}
     */},{key:'_updateValue',value:function _updateValue(){var _this25=this;this._value=this.controls.filter(function(control){return control.enabled||_this25.disabled;}).map(function(control){return control.value;});}/**
     * \@internal
     * @param {?} condition
     * @return {?}
     */},{key:'_anyControls',value:function _anyControls(condition){return this.controls.some(function(control){return control.enabled&&condition(control);});}/**
     * \@internal
     * @return {?}
     */},{key:'_setUpControls',value:function _setUpControls(){var _this26=this;this._forEachChild(function(control){return _this26._registerControl(control);});}/**
     * \@internal
     * @param {?} value
     * @return {?}
     */},{key:'_checkAllValuesPresent',value:function _checkAllValuesPresent(value){this._forEachChild(function(control,i){if(value[i]===undefined){throw new Error('Must supply a value for form control at index: '+i+'.');}});}/**
     * \@internal
     * @return {?}
     */},{key:'_allControlsDisabled',value:function _allControlsDisabled(){var _iteratorNormalCompletion7=true;var _didIteratorError7=false;var _iteratorError7=undefined;try{for(var _iterator7=this.controls[Symbol.iterator](),_step7;!(_iteratorNormalCompletion7=(_step7=_iterator7.next()).done);_iteratorNormalCompletion7=true){var control=_step7.value;if(control.enabled)return false;}}catch(err){_didIteratorError7=true;_iteratorError7=err;}finally{try{if(!_iteratorNormalCompletion7&&_iterator7.return){_iterator7.return();}}finally{if(_didIteratorError7){throw _iteratorError7;}}}return this.controls.length>0||this.disabled;}/**
     * @param {?} control
     * @return {?}
     */},{key:'_registerControl',value:function _registerControl(control){control.setParent(this);control._registerOnCollectionChange(this._onCollectionChange);}},{key:'length',get:function get(){return this.controls.length;}}]);return FormArray;}(AbstractControl);var/** @type {?} */formDirectiveProvider={provide:ControlContainer,useExisting:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_10" /* forwardRef */])(function(){return NgForm;})};var/** @type {?} */resolvedPromise=Promise.resolve(null);/**
 * \@whatItDoes Creates a top-level {\@link FormGroup} instance and binds it to a form
 * to track aggregate form value and validation status.
 *
 * \@howToUse
 *
 * As soon as you import the `FormsModule`, this directive becomes active by default on
 * all `<form>` tags.  You don't need to add a special selector.
 *
 * You can export the directive into a local template variable using `ngForm` as the key
 * (ex: `#myForm="ngForm"`). This is optional, but useful.  Many properties from the underlying
 * {\@link FormGroup} instance are duplicated on the directive itself, so a reference to it
 * will give you access to the aggregate value and validity status of the form, as well as
 * user interaction properties like `dirty` and `touched`.
 *
 * To register child controls with the form, you'll want to use {\@link NgModel} with a
 * `name` attribute.  You can also use {\@link NgModelGroup} if you'd like to create
 * sub-groups within the form.
 *
 * You can listen to the directive's `ngSubmit` event to be notified when the user has
 * triggered a form submission. The `ngSubmit` event will be emitted with the original form
 * submission event.
 *
 * {\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}
 *
 * * **npm package**: `\@angular/forms`
 *
 * * **NgModule**: `FormsModule`
 *
 *  \@stable
 */var NgForm=function(_ControlContainer2){_inherits(NgForm,_ControlContainer2);/**
     * @param {?} validators
     * @param {?} asyncValidators
     */function NgForm(validators,asyncValidators){_classCallCheck(this,NgForm);var _this27=_possibleConstructorReturn(this,(NgForm.__proto__||Object.getPrototypeOf(NgForm)).call(this));_this27._submitted=false;_this27.ngSubmit=new EventEmitter();_this27.form=new FormGroup({},composeValidators(validators),composeAsyncValidators(asyncValidators));return _this27;}/**
     * @return {?}
     */_createClass(NgForm,[{key:'addControl',/**
     * @param {?} dir
     * @return {?}
     */value:function addControl(dir){var _this28=this;resolvedPromise.then(function(){var/** @type {?} */container=_this28._findContainer(dir.path);dir._control=container.registerControl(dir.name,dir.control);setUpControl(dir.control,dir);dir.control.updateValueAndValidity({emitEvent:false});});}/**
     * @param {?} dir
     * @return {?}
     */},{key:'getControl',value:function getControl(dir){return this.form.get(dir.path);}/**
     * @param {?} dir
     * @return {?}
     */},{key:'removeControl',value:function removeControl(dir){var _this29=this;resolvedPromise.then(function(){var/** @type {?} */container=_this29._findContainer(dir.path);if(container){container.removeControl(dir.name);}});}/**
     * @param {?} dir
     * @return {?}
     */},{key:'addFormGroup',value:function addFormGroup(dir){var _this30=this;resolvedPromise.then(function(){var/** @type {?} */container=_this30._findContainer(dir.path);var/** @type {?} */group=new FormGroup({});setUpFormContainer(group,dir);container.registerControl(dir.name,group);group.updateValueAndValidity({emitEvent:false});});}/**
     * @param {?} dir
     * @return {?}
     */},{key:'removeFormGroup',value:function removeFormGroup(dir){var _this31=this;resolvedPromise.then(function(){var/** @type {?} */container=_this31._findContainer(dir.path);if(container){container.removeControl(dir.name);}});}/**
     * @param {?} dir
     * @return {?}
     */},{key:'getFormGroup',value:function getFormGroup(dir){return this.form.get(dir.path);}/**
     * @param {?} dir
     * @param {?} value
     * @return {?}
     */},{key:'updateModel',value:function updateModel(dir,value){var _this32=this;resolvedPromise.then(function(){var/** @type {?} */ctrl=_this32.form.get(dir.path);ctrl.setValue(value);});}/**
     * @param {?} value
     * @return {?}
     */},{key:'setValue',value:function setValue(value){this.control.setValue(value);}/**
     * @param {?} $event
     * @return {?}
     */},{key:'onSubmit',value:function onSubmit($event){this._submitted=true;this.ngSubmit.emit($event);return false;}/**
     * @return {?}
     */},{key:'onReset',value:function onReset(){this.resetForm();}/**
     * @param {?=} value
     * @return {?}
     */},{key:'resetForm',value:function resetForm(){var value=arguments.length>0&&arguments[0]!==undefined?arguments[0]:undefined;this.form.reset(value);this._submitted=false;}/**
     * \@internal
     * @param {?} path
     * @return {?}
     */},{key:'_findContainer',value:function _findContainer(path){path.pop();return path.length?this.form.get(path):this.form;}},{key:'submitted',get:function get(){return this._submitted;}/**
     * @return {?}
     */},{key:'formDirective',get:function get(){return this;}/**
     * @return {?}
     */},{key:'control',get:function get(){return this.form;}/**
     * @return {?}
     */},{key:'path',get:function get(){return[];}/**
     * @return {?}
     */},{key:'controls',get:function get(){return this.form.controls;}}]);return NgForm;}(ControlContainer);NgForm.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',providers:[formDirectiveProvider],host:{'(submit)':'onSubmit($event)','(reset)':'onReset()'},outputs:['ngSubmit'],exportAs:'ngForm'}]}];/** @nocollapse */NgForm.ctorParameters=function(){return[{type:Array,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["E" /* Optional */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_11" /* Self */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["I" /* Inject */],args:[NG_VALIDATORS]}]},{type:Array,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["E" /* Optional */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_11" /* Self */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["I" /* Inject */],args:[NG_ASYNC_VALIDATORS]}]}];};/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 *//**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */var/** @type {?} */Examples={formControlName:'\n    <div [formGroup]="myGroup">\n      <input formControlName="firstName">\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       firstName: new FormControl()\n    });',formGroupName:'\n    <div [formGroup]="myGroup">\n       <div formGroupName="person">\n          <input formControlName="firstName">\n       </div>\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       person: new FormGroup({ firstName: new FormControl() })\n    });',formArrayName:'\n    <div [formGroup]="myGroup">\n      <div formArrayName="cities">\n        <div *ngFor="let city of cityArray.controls; let i=index">\n          <input [formControlName]="i">\n        </div>\n      </div>\n    </div>\n\n    In your class:\n\n    this.cityArray = new FormArray([new FormControl(\'SF\')]);\n    this.myGroup = new FormGroup({\n      cities: this.cityArray\n    });',ngModelGroup:'\n    <form>\n       <div ngModelGroup="person">\n          <input [(ngModel)]="person.name" name="firstName">\n       </div>\n    </form>',ngModelWithFormGroup:'\n    <div [formGroup]="myGroup">\n       <input formControlName="firstName">\n       <input [(ngModel)]="showMoreControls" [ngModelOptions]="{standalone: true}">\n    </div>\n  '};var TemplateDrivenErrors=function(){function TemplateDrivenErrors(){_classCallCheck(this,TemplateDrivenErrors);}_createClass(TemplateDrivenErrors,null,[{key:'modelParentException',/**
     * @return {?}
     */value:function modelParentException(){throw new Error('\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n      formGroup\'s partner directive "formControlName" instead.  Example:\n\n      '+Examples.formControlName+'\n\n      Or, if you\'d like to avoid registering this form control, indicate that it\'s standalone in ngModelOptions:\n\n      Example:\n\n      '+Examples.ngModelWithFormGroup);}/**
     * @return {?}
     */},{key:'formGroupNameException',value:function formGroupNameException(){throw new Error('\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n      '+Examples.formGroupName+'\n\n      Option 2:  Update ngModel\'s parent be ngModelGroup (template-driven strategy):\n\n      '+Examples.ngModelGroup);}/**
     * @return {?}
     */},{key:'missingNameException',value:function missingNameException(){throw new Error('If ngModel is used within a form tag, either the name attribute must be set or the form\n      control must be defined as \'standalone\' in ngModelOptions.\n\n      Example 1: <input [(ngModel)]="person.firstName" name="first">\n      Example 2: <input [(ngModel)]="person.firstName" [ngModelOptions]="{standalone: true}">');}/**
     * @return {?}
     */},{key:'modelGroupParentException',value:function modelGroupParentException(){throw new Error('\n      ngModelGroup cannot be used with a parent formGroup directive.\n\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n      '+Examples.formGroupName+'\n\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n      '+Examples.ngModelGroup);}}]);return TemplateDrivenErrors;}();var/** @type {?} */modelGroupProvider={provide:ControlContainer,useExisting:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_10" /* forwardRef */])(function(){return NgModelGroup;})};/**
 * \@whatItDoes Creates and binds a {\@link FormGroup} instance to a DOM element.
 *
 * \@howToUse
 *
 * This directive can only be used as a child of {\@link NgForm} (or in other words,
 * within `<form>` tags).
 *
 * Use this directive if you'd like to create a sub-group within a form. This can
 * come in handy if you want to validate a sub-group of your form separately from
 * the rest of your form, or if some values in your domain model make more sense to
 * consume together in a nested object.
 *
 * Pass in the name you'd like this sub-group to have and it will become the key
 * for the sub-group in the form's full value. You can also export the directive into
 * a local template variable using `ngModelGroup` (ex: `#myGroup="ngModelGroup"`).
 *
 * {\@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}
 *
 * * **npm package**: `\@angular/forms`
 *
 * * **NgModule**: `FormsModule`
 *
 * \@stable
 */var NgModelGroup=function(_AbstractFormGroupDir){_inherits(NgModelGroup,_AbstractFormGroupDir);/**
     * @param {?} parent
     * @param {?} validators
     * @param {?} asyncValidators
     */function NgModelGroup(parent,validators,asyncValidators){_classCallCheck(this,NgModelGroup);var _this33=_possibleConstructorReturn(this,(NgModelGroup.__proto__||Object.getPrototypeOf(NgModelGroup)).call(this));_this33._parent=parent;_this33._validators=validators;_this33._asyncValidators=asyncValidators;return _this33;}/**
     * \@internal
     * @return {?}
     */_createClass(NgModelGroup,[{key:'_checkParentType',value:function _checkParentType(){if(!(this._parent instanceof NgModelGroup)&&!(this._parent instanceof NgForm)){TemplateDrivenErrors.modelGroupParentException();}}}]);return NgModelGroup;}(AbstractFormGroupDirective);NgModelGroup.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'[ngModelGroup]',providers:[modelGroupProvider],exportAs:'ngModelGroup'}]}];/** @nocollapse */NgModelGroup.ctorParameters=function(){return[{type:ControlContainer,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_7" /* Host */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["H" /* SkipSelf */]}]},{type:Array,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["E" /* Optional */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_11" /* Self */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["I" /* Inject */],args:[NG_VALIDATORS]}]},{type:Array,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["E" /* Optional */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_11" /* Self */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["I" /* Inject */],args:[NG_ASYNC_VALIDATORS]}]}];};NgModelGroup.propDecorators={'name':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */],args:['ngModelGroup']}]};var/** @type {?} */formControlBinding={provide:NgControl,useExisting:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_10" /* forwardRef */])(function(){return NgModel;})};/**
 * `ngModel` forces an additional change detection run when its inputs change:
 * E.g.:
 * ```
 * <div>{{myModel.valid}}</div>
 * <input [(ngModel)]="myValue" #myModel="ngModel">
 * ```
 * I.e. `ngModel` can export itself on the element and then be used in the template.
 * Normally, this would result in expressions before the `input` that use the exported directive
 * to have and old value as they have been
 * dirty checked before. As this is a very common case for `ngModel`, we added this second change
 * detection run.
 *
 * Notes:
 * - this is just one extra run no matter how many `ngModel` have been changed.
 * - this is a general problem when using `exportAs` for directives!
 */var/** @type {?} */resolvedPromise$1=Promise.resolve(null);/**
 * \@whatItDoes Creates a {\@link FormControl} instance from a domain model and binds it
 * to a form control element.
 *
 * The {\@link FormControl} instance will track the value, user interaction, and
 * validation status of the control and keep the view synced with the model. If used
 * within a parent form, the directive will also register itself with the form as a child
 * control.
 *
 * \@howToUse
 *
 * This directive can be used by itself or as part of a larger form. All you need is the
 * `ngModel` selector to activate it.
 *
 * It accepts a domain model as an optional {\@link \@Input}. If you have a one-way binding
 * to `ngModel` with `[]` syntax, changing the value of the domain model in the component
 * class will set the value in the view. If you have a two-way binding with `[()]` syntax
 * (also known as 'banana-box syntax'), the value in the UI will always be synced back to
 * the domain model in your class as well.
 *
 * If you wish to inspect the properties of the associated {\@link FormControl} (like
 * validity state), you can also export the directive into a local template variable using
 * `ngModel` as the key (ex: `#myVar="ngModel"`). You can then access the control using the
 * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)
 * will fall through to the control anyway, so you can access them directly. You can see a
 * full list of properties directly available in {\@link AbstractControlDirective}.
 *
 * The following is an example of a simple standalone control using `ngModel`:
 *
 * {\@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}
 *
 * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute
 * so that the control can be registered with the parent form under that name.
 *
 * It's worth noting that in the context of a parent form, you often can skip one-way or
 * two-way binding because the parent form will sync the value for you. You can access
 * its properties by exporting it into a local template variable using `ngForm` (ex:
 * `#f="ngForm"`). Then you can pass it where it needs to go on submit.
 *
 * If you do need to populate initial values into your form, using a one-way binding for
 * `ngModel` tends to be sufficient as long as you use the exported form's value rather
 * than the domain model's value on submit.
 *
 * Take a look at an example of using `ngModel` within a form:
 *
 * {\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}
 *
 * To see `ngModel` examples with different form control types, see:
 *
 * * Radio buttons: {\@link RadioControlValueAccessor}
 * * Selects: {\@link SelectControlValueAccessor}
 *
 * **npm package**: `\@angular/forms`
 *
 * **NgModule**: `FormsModule`
 *
 *  \@stable
 */var NgModel=function(_NgControl){_inherits(NgModel,_NgControl);/**
     * @param {?} parent
     * @param {?} validators
     * @param {?} asyncValidators
     * @param {?} valueAccessors
     */function NgModel(parent,validators,asyncValidators,valueAccessors){_classCallCheck(this,NgModel);/** @internal */var _this34=_possibleConstructorReturn(this,(NgModel.__proto__||Object.getPrototypeOf(NgModel)).call(this));_this34._control=new FormControl();/** @internal */_this34._registered=false;_this34._composing=false;_this34.update=new EventEmitter();_this34._parent=parent;_this34._rawValidators=validators||[];_this34._rawAsyncValidators=asyncValidators||[];_this34.valueAccessor=selectValueAccessor(_this34,valueAccessors);return _this34;}/**
     * @return {?}
     */_createClass(NgModel,[{key:'compositionStart',value:function compositionStart(){this._composing=true;}/**
     * @return {?}
     */},{key:'compositionEnd',value:function compositionEnd(){this._composing=false;this.update.emit(this.viewModel);}/**
     * @param {?} changes
     * @return {?}
     */},{key:'ngOnChanges',value:function ngOnChanges(changes){this._checkForErrors();if(!this._registered)this._setUpControl();if('isDisabled'in changes){this._updateDisabled(changes);}if(isPropertyUpdated(changes,this.viewModel)){this._updateValue(this.model);this.viewModel=this.model;}}/**
     * @return {?}
     */},{key:'ngOnDestroy',value:function ngOnDestroy(){this.formDirective&&this.formDirective.removeControl(this);}/**
     * @return {?}
     */},{key:'viewToModelUpdate',/**
     * @param {?} newValue
     * @return {?}
     */value:function viewToModelUpdate(newValue){this.viewModel=newValue;!this._composing&&this.update.emit(newValue);}/**
     * @return {?}
     */},{key:'_setUpControl',value:function _setUpControl(){this._isStandalone()?this._setUpStandalone():this.formDirective.addControl(this);this._registered=true;}/**
     * @return {?}
     */},{key:'_isStandalone',value:function _isStandalone(){return!this._parent||this.options&&this.options.standalone;}/**
     * @return {?}
     */},{key:'_setUpStandalone',value:function _setUpStandalone(){setUpControl(this._control,this);this._control.updateValueAndValidity({emitEvent:false});}/**
     * @return {?}
     */},{key:'_checkForErrors',value:function _checkForErrors(){if(!this._isStandalone()){this._checkParentType();}this._checkName();}/**
     * @return {?}
     */},{key:'_checkParentType',value:function _checkParentType(){if(!(this._parent instanceof NgModelGroup)&&this._parent instanceof AbstractFormGroupDirective){TemplateDrivenErrors.formGroupNameException();}else if(!(this._parent instanceof NgModelGroup)&&!(this._parent instanceof NgForm)){TemplateDrivenErrors.modelParentException();}}/**
     * @return {?}
     */},{key:'_checkName',value:function _checkName(){if(this.options&&this.options.name)this.name=this.options.name;if(!this._isStandalone()&&!this.name){TemplateDrivenErrors.missingNameException();}}/**
     * @param {?} value
     * @return {?}
     */},{key:'_updateValue',value:function _updateValue(value){var _this35=this;resolvedPromise$1.then(function(){_this35.control.setValue(value,{emitViewToModelChange:false});});}/**
     * @param {?} changes
     * @return {?}
     */},{key:'_updateDisabled',value:function _updateDisabled(changes){var _this36=this;var/** @type {?} */disabledValue=changes['isDisabled'].currentValue;var/** @type {?} */isDisabled=disabledValue===''||disabledValue&&disabledValue!=='false';resolvedPromise$1.then(function(){if(isDisabled&&!_this36.control.disabled){_this36.control.disable();}else if(!isDisabled&&_this36.control.disabled){_this36.control.enable();}});}},{key:'control',get:function get(){return this._control;}/**
     * @return {?}
     */},{key:'path',get:function get(){return this._parent?controlPath(this.name,this._parent):[this.name];}/**
     * @return {?}
     */},{key:'formDirective',get:function get(){return this._parent?this._parent.formDirective:null;}/**
     * @return {?}
     */},{key:'validator',get:function get(){return composeValidators(this._rawValidators);}/**
     * @return {?}
     */},{key:'asyncValidator',get:function get(){return composeAsyncValidators(this._rawAsyncValidators);}}]);return NgModel;}(NgControl);NgModel.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'[ngModel]:not([formControlName]):not([formControl])',providers:[formControlBinding],exportAs:'ngModel'}]}];/** @nocollapse */NgModel.ctorParameters=function(){return[{type:ControlContainer,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["E" /* Optional */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_7" /* Host */]}]},{type:Array,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["E" /* Optional */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_11" /* Self */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["I" /* Inject */],args:[NG_VALIDATORS]}]},{type:Array,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["E" /* Optional */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_11" /* Self */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["I" /* Inject */],args:[NG_ASYNC_VALIDATORS]}]},{type:Array,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["E" /* Optional */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_11" /* Self */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["I" /* Inject */],args:[NG_VALUE_ACCESSOR]}]}];};NgModel.propDecorators={'name':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */]}],'isDisabled':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */],args:['disabled']}],'model':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */],args:['ngModel']}],'options':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */],args:['ngModelOptions']}],'update':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["A" /* Output */],args:['ngModelChange']}],'compositionStart':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["v" /* HostListener */],args:['compositionstart']}],'compositionEnd':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["v" /* HostListener */],args:['compositionend']}]};var ReactiveErrors=function(){function ReactiveErrors(){_classCallCheck(this,ReactiveErrors);}_createClass(ReactiveErrors,null,[{key:'controlParentException',/**
     * @return {?}
     */value:function controlParentException(){throw new Error('formControlName must be used with a parent formGroup directive.  You\'ll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      '+Examples.formControlName);}/**
     * @return {?}
     */},{key:'ngModelGroupException',value:function ngModelGroupException(){throw new Error('formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n       that also have a "form" prefix: formGroupName, formArrayName, or formGroup.\n\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n        '+Examples.formGroupName+'\n\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n        '+Examples.ngModelGroup);}/**
     * @return {?}
     */},{key:'missingFormException',value:function missingFormException(){throw new Error('formGroup expects a FormGroup instance. Please pass one in.\n\n       Example:\n\n       '+Examples.formControlName);}/**
     * @return {?}
     */},{key:'groupParentException',value:function groupParentException(){throw new Error('formGroupName must be used with a parent formGroup directive.  You\'ll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      '+Examples.formGroupName);}/**
     * @return {?}
     */},{key:'arrayParentException',value:function arrayParentException(){throw new Error('formArrayName must be used with a parent formGroup directive.  You\'ll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n        Example:\n\n        '+Examples.formArrayName);}/**
     * @return {?}
     */},{key:'disabledAttrWarning',value:function disabledAttrWarning(){console.warn('\n      It looks like you\'re using the disabled attribute with a reactive form directive. If you set disabled to true\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n      you. We recommend using this approach to avoid \'changed after checked\' errors.\n       \n      Example: \n      form = new FormGroup({\n        first: new FormControl({value: \'Nancy\', disabled: true}, Validators.required),\n        last: new FormControl(\'Drew\', Validators.required)\n      });\n    ');}}]);return ReactiveErrors;}();var/** @type {?} */formControlBinding$1={provide:NgControl,useExisting:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_10" /* forwardRef */])(function(){return FormControlDirective;})};/**
 * \@whatItDoes Syncs a standalone {\@link FormControl} instance to a form control element.
 *
 * In other words, this directive ensures that any values written to the {\@link FormControl}
 * instance programmatically will be written to the DOM element (model -> view). Conversely,
 * any values written to the DOM element through user input will be reflected in the
 * {\@link FormControl} instance (view -> model).
 *
 * \@howToUse
 *
 * Use this directive if you'd like to create and manage a {\@link FormControl} instance directly.
 * Simply create a {\@link FormControl}, save it to your component class, and pass it into the
 * {\@link FormControlDirective}.
 *
 * This directive is designed to be used as a standalone control.  Unlike {\@link FormControlName},
 * it does not require that your {\@link FormControl} instance be part of any parent
 * {\@link FormGroup}, and it won't be registered to any {\@link FormGroupDirective} that
 * exists above it.
 *
 * **Get the value**: the `value` property is always synced and available on the
 * {\@link FormControl} instance. See a full list of available properties in
 * {\@link AbstractControl}.
 *
 * **Set the value**: You can pass in an initial value when instantiating the {\@link FormControl},
 * or you can set it programmatically later using {\@link AbstractControl.setValue} or
 * {\@link AbstractControl.patchValue}.
 *
 * **Listen to value**: If you want to listen to changes in the value of the control, you can
 * subscribe to the {\@link AbstractControl.valueChanges} event.  You can also listen to
 * {\@link AbstractControl.statusChanges} to be notified when the validation status is
 * re-calculated.
 *
 * ### Example
 *
 * {\@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}
 *
 * * **npm package**: `\@angular/forms`
 *
 * * **NgModule**: `ReactiveFormsModule`
 *
 *  \@stable
 */var FormControlDirective=function(_NgControl2){_inherits(FormControlDirective,_NgControl2);/**
     * @param {?} validators
     * @param {?} asyncValidators
     * @param {?} valueAccessors
     */function FormControlDirective(validators,asyncValidators,valueAccessors){_classCallCheck(this,FormControlDirective);var _this37=_possibleConstructorReturn(this,(FormControlDirective.__proto__||Object.getPrototypeOf(FormControlDirective)).call(this));_this37.update=new EventEmitter();_this37._rawValidators=validators||[];_this37._rawAsyncValidators=asyncValidators||[];_this37.valueAccessor=selectValueAccessor(_this37,valueAccessors);return _this37;}/**
     * @param {?} isDisabled
     * @return {?}
     */_createClass(FormControlDirective,[{key:'ngOnChanges',/**
     * @param {?} changes
     * @return {?}
     */value:function ngOnChanges(changes){if(this._isControlChanged(changes)){setUpControl(this.form,this);if(this.control.disabled&&this.valueAccessor.setDisabledState){this.valueAccessor.setDisabledState(true);}this.form.updateValueAndValidity({emitEvent:false});}if(isPropertyUpdated(changes,this.viewModel)){this.form.setValue(this.model);this.viewModel=this.model;}}/**
     * @return {?}
     */},{key:'viewToModelUpdate',/**
     * @param {?} newValue
     * @return {?}
     */value:function viewToModelUpdate(newValue){this.viewModel=newValue;this.update.emit(newValue);}/**
     * @param {?} changes
     * @return {?}
     */},{key:'_isControlChanged',value:function _isControlChanged(changes){return changes.hasOwnProperty('form');}},{key:'isDisabled',set:function set(isDisabled){ReactiveErrors.disabledAttrWarning();}},{key:'path',get:function get(){return[];}/**
     * @return {?}
     */},{key:'validator',get:function get(){return composeValidators(this._rawValidators);}/**
     * @return {?}
     */},{key:'asyncValidator',get:function get(){return composeAsyncValidators(this._rawAsyncValidators);}/**
     * @return {?}
     */},{key:'control',get:function get(){return this.form;}}]);return FormControlDirective;}(NgControl);FormControlDirective.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'[formControl]',providers:[formControlBinding$1],exportAs:'ngForm'}]}];/** @nocollapse */FormControlDirective.ctorParameters=function(){return[{type:Array,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["E" /* Optional */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_11" /* Self */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["I" /* Inject */],args:[NG_VALIDATORS]}]},{type:Array,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["E" /* Optional */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_11" /* Self */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["I" /* Inject */],args:[NG_ASYNC_VALIDATORS]}]},{type:Array,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["E" /* Optional */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_11" /* Self */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["I" /* Inject */],args:[NG_VALUE_ACCESSOR]}]}];};FormControlDirective.propDecorators={'form':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */],args:['formControl']}],'model':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */],args:['ngModel']}],'update':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["A" /* Output */],args:['ngModelChange']}],'isDisabled':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */],args:['disabled']}]};var/** @type {?} */formDirectiveProvider$1={provide:ControlContainer,useExisting:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_10" /* forwardRef */])(function(){return FormGroupDirective;})};/**
 * \@whatItDoes Binds an existing {\@link FormGroup} to a DOM element.
 *
 * \@howToUse
 *
 * This directive accepts an existing {\@link FormGroup} instance. It will then use this
 * {\@link FormGroup} instance to match any child {\@link FormControl}, {\@link FormGroup},
 * and {\@link FormArray} instances to child {\@link FormControlName}, {\@link FormGroupName},
 * and {\@link FormArrayName} directives.
 *
 * **Set value**: You can set the form's initial value when instantiating the
 * {\@link FormGroup}, or you can set it programmatically later using the {\@link FormGroup}'s
 * {\@link AbstractControl.setValue} or {\@link AbstractControl.patchValue} methods.
 *
 * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe
 * to the {\@link FormGroup}'s {\@link AbstractControl.valueChanges} event.  You can also listen to
 * its {\@link AbstractControl.statusChanges} event to be notified when the validation status is
 * re-calculated.
 *
 * Furthermore, you can listen to the directive's `ngSubmit` event to be notified when the user has
 * triggered a form submission. The `ngSubmit` event will be emitted with the original form
 * submission event.
 *
 * ### Example
 *
 * In this example, we create form controls for first name and last name.
 *
 * {\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}
 *
 * **npm package**: `\@angular/forms`
 *
 * **NgModule**: {\@link ReactiveFormsModule}
 *
 *  \@stable
 */var FormGroupDirective=function(_ControlContainer3){_inherits(FormGroupDirective,_ControlContainer3);/**
     * @param {?} _validators
     * @param {?} _asyncValidators
     */function FormGroupDirective(_validators,_asyncValidators){_classCallCheck(this,FormGroupDirective);var _this38=_possibleConstructorReturn(this,(FormGroupDirective.__proto__||Object.getPrototypeOf(FormGroupDirective)).call(this));_this38._validators=_validators;_this38._asyncValidators=_asyncValidators;_this38._submitted=false;_this38.directives=[];_this38.form=null;_this38.ngSubmit=new EventEmitter();return _this38;}/**
     * @param {?} changes
     * @return {?}
     */_createClass(FormGroupDirective,[{key:'ngOnChanges',value:function ngOnChanges(changes){this._checkFormPresent();if(changes.hasOwnProperty('form')){this._updateValidators();this._updateDomValue();this._updateRegistrations();}}/**
     * @return {?}
     */},{key:'addControl',/**
     * @param {?} dir
     * @return {?}
     */value:function addControl(dir){var/** @type {?} */ctrl=this.form.get(dir.path);setUpControl(ctrl,dir);ctrl.updateValueAndValidity({emitEvent:false});this.directives.push(dir);return ctrl;}/**
     * @param {?} dir
     * @return {?}
     */},{key:'getControl',value:function getControl(dir){return this.form.get(dir.path);}/**
     * @param {?} dir
     * @return {?}
     */},{key:'removeControl',value:function removeControl(dir){ListWrapper.remove(this.directives,dir);}/**
     * @param {?} dir
     * @return {?}
     */},{key:'addFormGroup',value:function addFormGroup(dir){var/** @type {?} */ctrl=this.form.get(dir.path);setUpFormContainer(ctrl,dir);ctrl.updateValueAndValidity({emitEvent:false});}/**
     * @param {?} dir
     * @return {?}
     */},{key:'removeFormGroup',value:function removeFormGroup(dir){}/**
     * @param {?} dir
     * @return {?}
     */},{key:'getFormGroup',value:function getFormGroup(dir){return this.form.get(dir.path);}/**
     * @param {?} dir
     * @return {?}
     */},{key:'addFormArray',value:function addFormArray(dir){var/** @type {?} */ctrl=this.form.get(dir.path);setUpFormContainer(ctrl,dir);ctrl.updateValueAndValidity({emitEvent:false});}/**
     * @param {?} dir
     * @return {?}
     */},{key:'removeFormArray',value:function removeFormArray(dir){}/**
     * @param {?} dir
     * @return {?}
     */},{key:'getFormArray',value:function getFormArray(dir){return this.form.get(dir.path);}/**
     * @param {?} dir
     * @param {?} value
     * @return {?}
     */},{key:'updateModel',value:function updateModel(dir,value){var/** @type {?} */ctrl=this.form.get(dir.path);ctrl.setValue(value);}/**
     * @param {?} $event
     * @return {?}
     */},{key:'onSubmit',value:function onSubmit($event){this._submitted=true;this.ngSubmit.emit($event);return false;}/**
     * @return {?}
     */},{key:'onReset',value:function onReset(){this.resetForm();}/**
     * @param {?=} value
     * @return {?}
     */},{key:'resetForm',value:function resetForm(){var value=arguments.length>0&&arguments[0]!==undefined?arguments[0]:undefined;this.form.reset(value);this._submitted=false;}/**
     * \@internal
     * @return {?}
     */},{key:'_updateDomValue',value:function _updateDomValue(){var _this39=this;this.directives.forEach(function(dir){var/** @type {?} */newCtrl=_this39.form.get(dir.path);if(dir._control!==newCtrl){cleanUpControl(dir._control,dir);if(newCtrl)setUpControl(newCtrl,dir);dir._control=newCtrl;}});this.form._updateTreeValidity({emitEvent:false});}/**
     * @return {?}
     */},{key:'_updateRegistrations',value:function _updateRegistrations(){var _this40=this;this.form._registerOnCollectionChange(function(){return _this40._updateDomValue();});if(this._oldForm)this._oldForm._registerOnCollectionChange(function(){});this._oldForm=this.form;}/**
     * @return {?}
     */},{key:'_updateValidators',value:function _updateValidators(){var/** @type {?} */sync=composeValidators(this._validators);this.form.validator=Validators.compose([this.form.validator,sync]);var/** @type {?} */async=composeAsyncValidators(this._asyncValidators);this.form.asyncValidator=Validators.composeAsync([this.form.asyncValidator,async]);}/**
     * @return {?}
     */},{key:'_checkFormPresent',value:function _checkFormPresent(){if(!this.form){ReactiveErrors.missingFormException();}}},{key:'submitted',get:function get(){return this._submitted;}/**
     * @return {?}
     */},{key:'formDirective',get:function get(){return this;}/**
     * @return {?}
     */},{key:'control',get:function get(){return this.form;}/**
     * @return {?}
     */},{key:'path',get:function get(){return[];}}]);return FormGroupDirective;}(ControlContainer);FormGroupDirective.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'[formGroup]',providers:[formDirectiveProvider$1],host:{'(submit)':'onSubmit($event)','(reset)':'onReset()'},exportAs:'ngForm'}]}];/** @nocollapse */FormGroupDirective.ctorParameters=function(){return[{type:Array,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["E" /* Optional */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_11" /* Self */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["I" /* Inject */],args:[NG_VALIDATORS]}]},{type:Array,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["E" /* Optional */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_11" /* Self */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["I" /* Inject */],args:[NG_ASYNC_VALIDATORS]}]}];};FormGroupDirective.propDecorators={'form':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */],args:['formGroup']}],'ngSubmit':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["A" /* Output */]}]};var/** @type {?} */formGroupNameProvider={provide:ControlContainer,useExisting:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_10" /* forwardRef */])(function(){return FormGroupName;})};/**
 * \@whatItDoes Syncs a nested {\@link FormGroup} to a DOM element.
 *
 * \@howToUse
 *
 * This directive can only be used with a parent {\@link FormGroupDirective} (selector:
 * `[formGroup]`).
 *
 * It accepts the string name of the nested {\@link FormGroup} you want to link, and
 * will look for a {\@link FormGroup} registered with that name in the parent
 * {\@link FormGroup} instance you passed into {\@link FormGroupDirective}.
 *
 * Nested form groups can come in handy when you want to validate a sub-group of a
 * form separately from the rest or when you'd like to group the values of certain
 * controls into their own nested object.
 *
 * **Access the group**: You can access the associated {\@link FormGroup} using the
 * {\@link AbstractControl.get} method. Ex: `this.form.get('name')`.
 *
 * You can also access individual controls within the group using dot syntax.
 * Ex: `this.form.get('name.first')`
 *
 * **Get the value**: the `value` property is always synced and available on the
 * {\@link FormGroup}. See a full list of available properties in {\@link AbstractControl}.
 *
 * **Set the value**: You can set an initial value for each child control when instantiating
 * the {\@link FormGroup}, or you can set it programmatically later using
 * {\@link AbstractControl.setValue} or {\@link AbstractControl.patchValue}.
 *
 * **Listen to value**: If you want to listen to changes in the value of the group, you can
 * subscribe to the {\@link AbstractControl.valueChanges} event.  You can also listen to
 * {\@link AbstractControl.statusChanges} to be notified when the validation status is
 * re-calculated.
 *
 * ### Example
 *
 * {\@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}
 *
 * * **npm package**: `\@angular/forms`
 *
 * * **NgModule**: `ReactiveFormsModule`
 *
 * \@stable
 */var FormGroupName=function(_AbstractFormGroupDir2){_inherits(FormGroupName,_AbstractFormGroupDir2);/**
     * @param {?} parent
     * @param {?} validators
     * @param {?} asyncValidators
     */function FormGroupName(parent,validators,asyncValidators){_classCallCheck(this,FormGroupName);var _this41=_possibleConstructorReturn(this,(FormGroupName.__proto__||Object.getPrototypeOf(FormGroupName)).call(this));_this41._parent=parent;_this41._validators=validators;_this41._asyncValidators=asyncValidators;return _this41;}/**
     * \@internal
     * @return {?}
     */_createClass(FormGroupName,[{key:'_checkParentType',value:function _checkParentType(){if(_hasInvalidParent(this._parent)){ReactiveErrors.groupParentException();}}}]);return FormGroupName;}(AbstractFormGroupDirective);FormGroupName.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'[formGroupName]',providers:[formGroupNameProvider]}]}];/** @nocollapse */FormGroupName.ctorParameters=function(){return[{type:ControlContainer,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["E" /* Optional */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_7" /* Host */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["H" /* SkipSelf */]}]},{type:Array,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["E" /* Optional */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_11" /* Self */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["I" /* Inject */],args:[NG_VALIDATORS]}]},{type:Array,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["E" /* Optional */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_11" /* Self */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["I" /* Inject */],args:[NG_ASYNC_VALIDATORS]}]}];};FormGroupName.propDecorators={'name':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */],args:['formGroupName']}]};var/** @type {?} */formArrayNameProvider={provide:ControlContainer,useExisting:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_10" /* forwardRef */])(function(){return FormArrayName;})};/**
 * \@whatItDoes Syncs a nested {\@link FormArray} to a DOM element.
 *
 * \@howToUse
 *
 * This directive is designed to be used with a parent {\@link FormGroupDirective} (selector:
 * `[formGroup]`).
 *
 * It accepts the string name of the nested {\@link FormArray} you want to link, and
 * will look for a {\@link FormArray} registered with that name in the parent
 * {\@link FormGroup} instance you passed into {\@link FormGroupDirective}.
 *
 * Nested form arrays can come in handy when you have a group of form controls but
 * you're not sure how many there will be. Form arrays allow you to create new
 * form controls dynamically.
 *
 * **Access the array**: You can access the associated {\@link FormArray} using the
 * {\@link AbstractControl.get} method on the parent {\@link FormGroup}.
 * Ex: `this.form.get('cities')`.
 *
 * **Get the value**: the `value` property is always synced and available on the
 * {\@link FormArray}. See a full list of available properties in {\@link AbstractControl}.
 *
 * **Set the value**: You can set an initial value for each child control when instantiating
 * the {\@link FormArray}, or you can set the value programmatically later using the
 * {\@link FormArray}'s {\@link AbstractControl.setValue} or {\@link AbstractControl.patchValue}
 * methods.
 *
 * **Listen to value**: If you want to listen to changes in the value of the array, you can
 * subscribe to the {\@link FormArray}'s {\@link AbstractControl.valueChanges} event.  You can also
 * listen to its {\@link AbstractControl.statusChanges} event to be notified when the validation
 * status is re-calculated.
 *
 * **Add new controls**: You can add new controls to the {\@link FormArray} dynamically by
 * calling its {\@link FormArray.push} method.
 *  Ex: `this.form.get('cities').push(new FormControl());`
 *
 * ### Example
 *
 * {\@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}
 *
 * * **npm package**: `\@angular/forms`
 *
 * * **NgModule**: `ReactiveFormsModule`
 *
 * \@stable
 */var FormArrayName=function(_ControlContainer4){_inherits(FormArrayName,_ControlContainer4);/**
     * @param {?} parent
     * @param {?} validators
     * @param {?} asyncValidators
     */function FormArrayName(parent,validators,asyncValidators){_classCallCheck(this,FormArrayName);var _this42=_possibleConstructorReturn(this,(FormArrayName.__proto__||Object.getPrototypeOf(FormArrayName)).call(this));_this42._parent=parent;_this42._validators=validators;_this42._asyncValidators=asyncValidators;return _this42;}/**
     * @return {?}
     */_createClass(FormArrayName,[{key:'ngOnInit',value:function ngOnInit(){this._checkParentType();this.formDirective.addFormArray(this);}/**
     * @return {?}
     */},{key:'ngOnDestroy',value:function ngOnDestroy(){if(this.formDirective){this.formDirective.removeFormArray(this);}}/**
     * @return {?}
     */},{key:'_checkParentType',/**
     * @return {?}
     */value:function _checkParentType(){if(_hasInvalidParent(this._parent)){ReactiveErrors.arrayParentException();}}},{key:'control',get:function get(){return this.formDirective.getFormArray(this);}/**
     * @return {?}
     */},{key:'formDirective',get:function get(){return this._parent?this._parent.formDirective:null;}/**
     * @return {?}
     */},{key:'path',get:function get(){return controlPath(this.name,this._parent);}/**
     * @return {?}
     */},{key:'validator',get:function get(){return composeValidators(this._validators);}/**
     * @return {?}
     */},{key:'asyncValidator',get:function get(){return composeAsyncValidators(this._asyncValidators);}}]);return FormArrayName;}(ControlContainer);FormArrayName.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'[formArrayName]',providers:[formArrayNameProvider]}]}];/** @nocollapse */FormArrayName.ctorParameters=function(){return[{type:ControlContainer,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["E" /* Optional */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_7" /* Host */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["H" /* SkipSelf */]}]},{type:Array,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["E" /* Optional */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_11" /* Self */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["I" /* Inject */],args:[NG_VALIDATORS]}]},{type:Array,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["E" /* Optional */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_11" /* Self */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["I" /* Inject */],args:[NG_ASYNC_VALIDATORS]}]}];};FormArrayName.propDecorators={'name':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */],args:['formArrayName']}]};/**
 * @param {?} parent
 * @return {?}
 */function _hasInvalidParent(parent){return!(parent instanceof FormGroupName)&&!(parent instanceof FormGroupDirective)&&!(parent instanceof FormArrayName);}var/** @type {?} */controlNameBinding={provide:NgControl,useExisting:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_10" /* forwardRef */])(function(){return FormControlName;})};/**
 * \@whatItDoes Syncs a {\@link FormControl} in an existing {\@link FormGroup} to a form control
 * element by name.
 *
 * In other words, this directive ensures that any values written to the {\@link FormControl}
 * instance programmatically will be written to the DOM element (model -> view). Conversely,
 * any values written to the DOM element through user input will be reflected in the
 * {\@link FormControl} instance (view -> model).
 *
 * \@howToUse
 *
 * This directive is designed to be used with a parent {\@link FormGroupDirective} (selector:
 * `[formGroup]`).
 *
 * It accepts the string name of the {\@link FormControl} instance you want to
 * link, and will look for a {\@link FormControl} registered with that name in the
 * closest {\@link FormGroup} or {\@link FormArray} above it.
 *
 * **Access the control**: You can access the {\@link FormControl} associated with
 * this directive by using the {\@link AbstractControl.get} method.
 * Ex: `this.form.get('first');`
 *
 * **Get value**: the `value` property is always synced and available on the {\@link FormControl}.
 * See a full list of available properties in {\@link AbstractControl}.
 *
 *  **Set value**: You can set an initial value for the control when instantiating the
 *  {\@link FormControl}, or you can set it programmatically later using
 *  {\@link AbstractControl.setValue} or {\@link AbstractControl.patchValue}.
 *
 * **Listen to value**: If you want to listen to changes in the value of the control, you can
 * subscribe to the {\@link AbstractControl.valueChanges} event.  You can also listen to
 * {\@link AbstractControl.statusChanges} to be notified when the validation status is
 * re-calculated.
 *
 * ### Example
 *
 * In this example, we create form controls for first name and last name.
 *
 * {\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}
 *
 * To see `formControlName` examples with different form control types, see:
 *
 * * Radio buttons: {\@link RadioControlValueAccessor}
 * * Selects: {\@link SelectControlValueAccessor}
 *
 * **npm package**: `\@angular/forms`
 *
 * **NgModule**: {\@link ReactiveFormsModule}
 *
 *  \@stable
 */var FormControlName=function(_NgControl3){_inherits(FormControlName,_NgControl3);/**
     * @param {?} parent
     * @param {?} validators
     * @param {?} asyncValidators
     * @param {?} valueAccessors
     */function FormControlName(parent,validators,asyncValidators,valueAccessors){_classCallCheck(this,FormControlName);var _this43=_possibleConstructorReturn(this,(FormControlName.__proto__||Object.getPrototypeOf(FormControlName)).call(this));_this43._added=false;_this43.update=new EventEmitter();_this43._parent=parent;_this43._rawValidators=validators||[];_this43._rawAsyncValidators=asyncValidators||[];_this43.valueAccessor=selectValueAccessor(_this43,valueAccessors);return _this43;}/**
     * @param {?} isDisabled
     * @return {?}
     */_createClass(FormControlName,[{key:'ngOnChanges',/**
     * @param {?} changes
     * @return {?}
     */value:function ngOnChanges(changes){if(!this._added)this._setUpControl();if(isPropertyUpdated(changes,this.viewModel)){this.viewModel=this.model;this.formDirective.updateModel(this,this.model);}}/**
     * @return {?}
     */},{key:'ngOnDestroy',value:function ngOnDestroy(){if(this.formDirective){this.formDirective.removeControl(this);}}/**
     * @param {?} newValue
     * @return {?}
     */},{key:'viewToModelUpdate',value:function viewToModelUpdate(newValue){this.viewModel=newValue;this.update.emit(newValue);}/**
     * @return {?}
     */},{key:'_checkParentType',/**
     * @return {?}
     */value:function _checkParentType(){if(!(this._parent instanceof FormGroupName)&&this._parent instanceof AbstractFormGroupDirective){ReactiveErrors.ngModelGroupException();}else if(!(this._parent instanceof FormGroupName)&&!(this._parent instanceof FormGroupDirective)&&!(this._parent instanceof FormArrayName)){ReactiveErrors.controlParentException();}}/**
     * @return {?}
     */},{key:'_setUpControl',value:function _setUpControl(){this._checkParentType();this._control=this.formDirective.addControl(this);if(this.control.disabled&&this.valueAccessor.setDisabledState){this.valueAccessor.setDisabledState(true);}this._added=true;}},{key:'isDisabled',set:function set(isDisabled){ReactiveErrors.disabledAttrWarning();}},{key:'path',get:function get(){return controlPath(this.name,this._parent);}/**
     * @return {?}
     */},{key:'formDirective',get:function get(){return this._parent?this._parent.formDirective:null;}/**
     * @return {?}
     */},{key:'validator',get:function get(){return composeValidators(this._rawValidators);}/**
     * @return {?}
     */},{key:'asyncValidator',get:function get(){return composeAsyncValidators(this._rawAsyncValidators);}/**
     * @return {?}
     */},{key:'control',get:function get(){return this._control;}}]);return FormControlName;}(NgControl);FormControlName.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'[formControlName]',providers:[controlNameBinding]}]}];/** @nocollapse */FormControlName.ctorParameters=function(){return[{type:ControlContainer,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["E" /* Optional */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_7" /* Host */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["H" /* SkipSelf */]}]},{type:Array,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["E" /* Optional */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_11" /* Self */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["I" /* Inject */],args:[NG_VALIDATORS]}]},{type:Array,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["E" /* Optional */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_11" /* Self */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["I" /* Inject */],args:[NG_ASYNC_VALIDATORS]}]},{type:Array,decorators:[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["E" /* Optional */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["_11" /* Self */]},{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["I" /* Inject */],args:[NG_VALUE_ACCESSOR]}]}];};FormControlName.propDecorators={'name':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */],args:['formControlName']}],'model':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */],args:['ngModel']}],'update':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["A" /* Output */],args:['ngModelChange']}],'isDisabled':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */],args:['disabled']}]};var/** @type {?} */REQUIRED_VALIDATOR={provide:NG_VALIDATORS,useExisting:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_10" /* forwardRef */])(function(){return RequiredValidator;}),multi:true};var/** @type {?} */CHECKBOX_REQUIRED_VALIDATOR={provide:NG_VALIDATORS,useExisting:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_10" /* forwardRef */])(function(){return CheckboxRequiredValidator;}),multi:true};/**
 * A Directive that adds the `required` validator to any controls marked with the
 * `required` attribute, via the {\@link NG_VALIDATORS} binding.
 *
 * ### Example
 *
 * ```
 * <input name="fullName" ngModel required>
 * ```
 *
 * \@stable
 */var RequiredValidator=function(){function RequiredValidator(){_classCallCheck(this,RequiredValidator);}_createClass(RequiredValidator,[{key:'validate',/**
     * @param {?} c
     * @return {?}
     */value:function validate(c){return this.required?Validators.required(c):null;}/**
     * @param {?} fn
     * @return {?}
     */},{key:'registerOnValidatorChange',value:function registerOnValidatorChange(fn){this._onChange=fn;}},{key:'required',/**
     * @return {?}
     */get:function get(){return this._required;}/**
     * @param {?} value
     * @return {?}
     */,set:function set(value){this._required=value!=null&&value!==false&&''+value!=='false';if(this._onChange)this._onChange();}}]);return RequiredValidator;}();RequiredValidator.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',providers:[REQUIRED_VALIDATOR],host:{'[attr.required]':'required ? "" : null'}}]}];/** @nocollapse */RequiredValidator.ctorParameters=function(){return[];};RequiredValidator.propDecorators={'required':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */]}]};/**
 * A Directive that adds the `required` validator to checkbox controls marked with the
 * `required` attribute, via the {\@link NG_VALIDATORS} binding.
 *
 * ### Example
 *
 * ```
 * <input type="checkbox" name="active" ngModel required>
 * ```
 *
 * \@experimental
 */var CheckboxRequiredValidator=function(_RequiredValidator){_inherits(CheckboxRequiredValidator,_RequiredValidator);function CheckboxRequiredValidator(){_classCallCheck(this,CheckboxRequiredValidator);return _possibleConstructorReturn(this,(CheckboxRequiredValidator.__proto__||Object.getPrototypeOf(CheckboxRequiredValidator)).apply(this,arguments));}_createClass(CheckboxRequiredValidator,[{key:'validate',/**
     * @param {?} c
     * @return {?}
     */value:function validate(c){return this.required?Validators.requiredTrue(c):null;}}]);return CheckboxRequiredValidator;}(RequiredValidator);CheckboxRequiredValidator.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',providers:[CHECKBOX_REQUIRED_VALIDATOR],host:{'[attr.required]':'required ? "" : null'}}]}];/** @nocollapse */CheckboxRequiredValidator.ctorParameters=function(){return[];};/**
 * Provider which adds {@link EmailValidator} to {@link NG_VALIDATORS}.
 */var/** @type {?} */EMAIL_VALIDATOR={provide:NG_VALIDATORS,useExisting:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_10" /* forwardRef */])(function(){return EmailValidator;}),multi:true};/**
 * A Directive that adds the `email` validator to controls marked with the
 * `email` attribute, via the {\@link NG_VALIDATORS} binding.
 *
 * ### Example
 *
 * ```
 * <input type="email" name="email" ngModel email>
 * <input type="email" name="email" ngModel email="true">
 * <input type="email" name="email" ngModel [email]="true">
 * ```
 *
 * \@experimental
 */var EmailValidator=function(){function EmailValidator(){_classCallCheck(this,EmailValidator);}_createClass(EmailValidator,[{key:'validate',/**
     * @param {?} c
     * @return {?}
     */value:function validate(c){return this._enabled?Validators.email(c):null;}/**
     * @param {?} fn
     * @return {?}
     */},{key:'registerOnValidatorChange',value:function registerOnValidatorChange(fn){this._onChange=fn;}},{key:'email',/**
     * @param {?} value
     * @return {?}
     */set:function set(value){this._enabled=value===''||value===true||value==='true';if(this._onChange)this._onChange();}}]);return EmailValidator;}();EmailValidator.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'[email][formControlName],[email][formControl],[email][ngModel]',providers:[EMAIL_VALIDATOR]}]}];/** @nocollapse */EmailValidator.ctorParameters=function(){return[];};EmailValidator.propDecorators={'email':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */]}]};/**
 * Provider which adds {@link MinLengthValidator} to {@link NG_VALIDATORS}.
 *
 * ## Example:
 *
 * {@example common/forms/ts/validators/validators.ts region='min'}
 */var/** @type {?} */MIN_LENGTH_VALIDATOR={provide:NG_VALIDATORS,useExisting:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_10" /* forwardRef */])(function(){return MinLengthValidator;}),multi:true};/**
 * A directive which installs the {\@link MinLengthValidator} for any `formControlName`,
 * `formControl`, or control with `ngModel` that also has a `minlength` attribute.
 *
 * \@stable
 */var MinLengthValidator=function(){function MinLengthValidator(){_classCallCheck(this,MinLengthValidator);}_createClass(MinLengthValidator,[{key:'ngOnChanges',/**
     * @param {?} changes
     * @return {?}
     */value:function ngOnChanges(changes){if('minlength'in changes){this._createValidator();if(this._onChange)this._onChange();}}/**
     * @param {?} c
     * @return {?}
     */},{key:'validate',value:function validate(c){return this.minlength==null?null:this._validator(c);}/**
     * @param {?} fn
     * @return {?}
     */},{key:'registerOnValidatorChange',value:function registerOnValidatorChange(fn){this._onChange=fn;}/**
     * @return {?}
     */},{key:'_createValidator',value:function _createValidator(){this._validator=Validators.minLength(parseInt(this.minlength,10));}}]);return MinLengthValidator;}();MinLengthValidator.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',providers:[MIN_LENGTH_VALIDATOR],host:{'[attr.minlength]':'minlength ? minlength : null'}}]}];/** @nocollapse */MinLengthValidator.ctorParameters=function(){return[];};MinLengthValidator.propDecorators={'minlength':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */]}]};/**
 * Provider which adds {@link MaxLengthValidator} to {@link NG_VALIDATORS}.
 *
 * ## Example:
 *
 * {@example common/forms/ts/validators/validators.ts region='max'}
 */var/** @type {?} */MAX_LENGTH_VALIDATOR={provide:NG_VALIDATORS,useExisting:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_10" /* forwardRef */])(function(){return MaxLengthValidator;}),multi:true};/**
 * A directive which installs the {\@link MaxLengthValidator} for any `formControlName,
 * `formControl`,
 * or control with `ngModel` that also has a `maxlength` attribute.
 *
 * \@stable
 */var MaxLengthValidator=function(){function MaxLengthValidator(){_classCallCheck(this,MaxLengthValidator);}_createClass(MaxLengthValidator,[{key:'ngOnChanges',/**
     * @param {?} changes
     * @return {?}
     */value:function ngOnChanges(changes){if('maxlength'in changes){this._createValidator();if(this._onChange)this._onChange();}}/**
     * @param {?} c
     * @return {?}
     */},{key:'validate',value:function validate(c){return this.maxlength!=null?this._validator(c):null;}/**
     * @param {?} fn
     * @return {?}
     */},{key:'registerOnValidatorChange',value:function registerOnValidatorChange(fn){this._onChange=fn;}/**
     * @return {?}
     */},{key:'_createValidator',value:function _createValidator(){this._validator=Validators.maxLength(parseInt(this.maxlength,10));}}]);return MaxLengthValidator;}();MaxLengthValidator.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',providers:[MAX_LENGTH_VALIDATOR],host:{'[attr.maxlength]':'maxlength ? maxlength : null'}}]}];/** @nocollapse */MaxLengthValidator.ctorParameters=function(){return[];};MaxLengthValidator.propDecorators={'maxlength':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */]}]};var/** @type {?} */PATTERN_VALIDATOR={provide:NG_VALIDATORS,useExisting:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["_10" /* forwardRef */])(function(){return PatternValidator;}),multi:true};/**
 * A Directive that adds the `pattern` validator to any controls marked with the
 * `pattern` attribute, via the {\@link NG_VALIDATORS} binding. Uses attribute value
 * as the regex to validate Control value against.  Follows pattern attribute
 * semantics; i.e. regex must match entire Control value.
 *
 * ### Example
 *
 * ```
 * <input [name]="fullName" pattern="[a-zA-Z ]*" ngModel>
 * ```
 * \@stable
 */var PatternValidator=function(){function PatternValidator(){_classCallCheck(this,PatternValidator);}_createClass(PatternValidator,[{key:'ngOnChanges',/**
     * @param {?} changes
     * @return {?}
     */value:function ngOnChanges(changes){if('pattern'in changes){this._createValidator();if(this._onChange)this._onChange();}}/**
     * @param {?} c
     * @return {?}
     */},{key:'validate',value:function validate(c){return this._validator(c);}/**
     * @param {?} fn
     * @return {?}
     */},{key:'registerOnValidatorChange',value:function registerOnValidatorChange(fn){this._onChange=fn;}/**
     * @return {?}
     */},{key:'_createValidator',value:function _createValidator(){this._validator=Validators.pattern(this.pattern);}}]);return PatternValidator;}();PatternValidator.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',providers:[PATTERN_VALIDATOR],host:{'[attr.pattern]':'pattern ? pattern : null'}}]}];/** @nocollapse */PatternValidator.ctorParameters=function(){return[];};PatternValidator.propDecorators={'pattern':[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["u" /* Input */]}]};/**
 * \@whatItDoes Creates an {\@link AbstractControl} from a user-specified configuration.
 *
 * It is essentially syntactic sugar that shortens the `new FormGroup()`,
 * `new FormControl()`, and `new FormArray()` boilerplate that can build up in larger
 * forms.
 *
 * \@howToUse
 *
 * To use, inject `FormBuilder` into your component class. You can then call its methods
 * directly.
 *
 * {\@example forms/ts/formBuilder/form_builder_example.ts region='Component'}
 *
 *  * **npm package**: `\@angular/forms`
 *
 *  * **NgModule**: {\@link ReactiveFormsModule}
 *
 * \@stable
 */var FormBuilder=function(){function FormBuilder(){_classCallCheck(this,FormBuilder);}_createClass(FormBuilder,[{key:'group',/**
     * Construct a new {\@link FormGroup} with the given map of configuration.
     * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.
     *
     * See the {\@link FormGroup} constructor for more details.
     * @param {?} controlsConfig
     * @param {?=} extra
     * @return {?}
     */value:function group(controlsConfig){var extra=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var/** @type {?} */controls=this._reduceControls(controlsConfig);var/** @type {?} */validator=isPresent(extra)?extra['validator']:null;var/** @type {?} */asyncValidator=isPresent(extra)?extra['asyncValidator']:null;return new FormGroup(controls,validator,asyncValidator);}/**
     * Construct a new {\@link FormControl} with the given `formState`,`validator`, and
     * `asyncValidator`.
     *
     * `formState` can either be a standalone value for the form control or an object
     * that contains both a value and a disabled status.
     *
     * @param {?} formState
     * @param {?=} validator
     * @param {?=} asyncValidator
     * @return {?}
     */},{key:'control',value:function control(formState){var validator=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var asyncValidator=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;return new FormControl(formState,validator,asyncValidator);}/**
     * Construct a {\@link FormArray} from the given `controlsConfig` array of
     * configuration, with the given optional `validator` and `asyncValidator`.
     * @param {?} controlsConfig
     * @param {?=} validator
     * @param {?=} asyncValidator
     * @return {?}
     */},{key:'array',value:function array(controlsConfig){var _this45=this;var validator=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var asyncValidator=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var/** @type {?} */controls=controlsConfig.map(function(c){return _this45._createControl(c);});return new FormArray(controls,validator,asyncValidator);}/**
     * \@internal
     * @param {?} controlsConfig
     * @return {?}
     */},{key:'_reduceControls',value:function _reduceControls(controlsConfig){var _this46=this;var/** @type {?} */controls={};Object.keys(controlsConfig).forEach(function(controlName){controls[controlName]=_this46._createControl(controlsConfig[controlName]);});return controls;}/**
     * \@internal
     * @param {?} controlConfig
     * @return {?}
     */},{key:'_createControl',value:function _createControl(controlConfig){if(controlConfig instanceof FormControl||controlConfig instanceof FormGroup||controlConfig instanceof FormArray){return controlConfig;}else if(Array.isArray(controlConfig)){var/** @type {?} */value=controlConfig[0];var/** @type {?} */validator=controlConfig.length>1?controlConfig[1]:null;var/** @type {?} */asyncValidator=controlConfig.length>2?controlConfig[2]:null;return this.control(value,validator,asyncValidator);}else{return this.control(controlConfig);}}}]);return FormBuilder;}();FormBuilder.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["B" /* Injectable */]}];/** @nocollapse */FormBuilder.ctorParameters=function(){return[];};/**
 * @stable
 */var/** @type {?} */VERSION=new __WEBPACK_IMPORTED_MODULE_0__angular_core__["f" /* Version */]('4.0.0-rc.1');/**
 * \@whatItDoes Adds `novalidate` attribute to all forms by default.
 *
 * `novalidate` is used to disable browser's native form validation.
 *
 * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:
 *
 * ```
 * <form ngNativeValidate></form>
 * ```
 *
 * \@experimental
 */var NgNoValidate=function NgNoValidate(){_classCallCheck(this,NgNoValidate);};NgNoValidate.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["q" /* Directive */],args:[{selector:'form:not([ngNoForm]):not([ngNativeValidate])',host:{'novalidate':''}}]}];/** @nocollapse */NgNoValidate.ctorParameters=function(){return[];};var/** @type {?} */SHARED_FORM_DIRECTIVES=[NgNoValidate,NgSelectOption,NgSelectMultipleOption,DefaultValueAccessor,NumberValueAccessor,RangeValueAccessor,CheckboxControlValueAccessor,SelectControlValueAccessor,SelectMultipleControlValueAccessor,RadioControlValueAccessor,NgControlStatus,NgControlStatusGroup,RequiredValidator,MinLengthValidator,MaxLengthValidator,PatternValidator,CheckboxRequiredValidator,EmailValidator];var/** @type {?} */TEMPLATE_DRIVEN_DIRECTIVES=[NgModel,NgModelGroup,NgForm];var/** @type {?} */REACTIVE_DRIVEN_DIRECTIVES=[FormControlDirective,FormGroupDirective,FormControlName,FormGroupName,FormArrayName];/**
 * Internal module used for sharing directives between FormsModule and ReactiveFormsModule
 */var InternalFormsSharedModule=function InternalFormsSharedModule(){_classCallCheck(this,InternalFormsSharedModule);};InternalFormsSharedModule.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["i" /* NgModule */],args:[{declarations:SHARED_FORM_DIRECTIVES,exports:SHARED_FORM_DIRECTIVES}]}];/** @nocollapse */InternalFormsSharedModule.ctorParameters=function(){return[];};/**
 * The ng module for forms.
 * \@stable
 */var FormsModule=function FormsModule(){_classCallCheck(this,FormsModule);};FormsModule.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["i" /* NgModule */],args:[{declarations:TEMPLATE_DRIVEN_DIRECTIVES,providers:[RadioControlRegistry],exports:[InternalFormsSharedModule,TEMPLATE_DRIVEN_DIRECTIVES]}]}];/** @nocollapse */FormsModule.ctorParameters=function(){return[];};/**
 * The ng module for reactive forms.
 * \@stable
 */var ReactiveFormsModule=function ReactiveFormsModule(){_classCallCheck(this,ReactiveFormsModule);};ReactiveFormsModule.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["i" /* NgModule */],args:[{declarations:[REACTIVE_DRIVEN_DIRECTIVES],providers:[FormBuilder,RadioControlRegistry],exports:[InternalFormsSharedModule,REACTIVE_DRIVEN_DIRECTIVES]}]}];/** @nocollapse */ReactiveFormsModule.ctorParameters=function(){return[];};


/***/ }),
/* 97 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs_Observable__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs_Observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_rxjs_Observable__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_platform_browser__ = __webpack_require__(25);
/* unused harmony export BrowserXhr */
/* unused harmony export JSONPBackend */
/* unused harmony export JSONPConnection */
/* unused harmony export CookieXSRFStrategy */
/* unused harmony export XHRBackend */
/* unused harmony export XHRConnection */
/* unused harmony export BaseRequestOptions */
/* unused harmony export RequestOptions */
/* unused harmony export BaseResponseOptions */
/* unused harmony export ResponseOptions */
/* unused harmony export ReadyState */
/* unused harmony export RequestMethod */
/* unused harmony export ResponseContentType */
/* unused harmony export ResponseType */
/* unused harmony export Headers */
/* unused harmony export Http */
/* unused harmony export Jsonp */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return HttpModule; });
/* unused harmony export JsonpModule */
/* unused harmony export Connection */
/* unused harmony export ConnectionBackend */
/* unused harmony export XSRFStrategy */
/* unused harmony export Request */
/* unused harmony export Response */
/* unused harmony export QueryEncoder */
/* unused harmony export URLSearchParams */
/* unused harmony export VERSION */
/* unused harmony export ɵg */
/* unused harmony export ɵa */
/* unused harmony export ɵe */
/* unused harmony export ɵb */
/* unused harmony export ɵc */
/* unused harmony export ɵd */
var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i["return"])_i["return"]();}finally{if(_d)throw _e;}}return _arr;}return function(arr,i){if(Array.isArray(arr)){return arr;}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i);}else{throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++){arr2[i]=arr[i];}return arr2;}else{return Array.from(arr);}}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}/**
 * @license Angular v4.0.0-rc.1
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 *//**
 * A backend for http that uses the `XMLHttpRequest` browser API.
 *
 * Take care not to evaluate this in non-browser contexts.
 *
 * \@experimental
 */var BrowserXhr=function(){function BrowserXhr(){_classCallCheck(this,BrowserXhr);}/**
     * @return {?}
     */_createClass(BrowserXhr,[{key:'build',value:function build(){return new XMLHttpRequest();}}]);return BrowserXhr;}();BrowserXhr.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["B" /* Injectable */]}];/** @nocollapse */BrowserXhr.ctorParameters=function(){return[];};var RequestMethod={};RequestMethod.Get=0;RequestMethod.Post=1;RequestMethod.Put=2;RequestMethod.Delete=3;RequestMethod.Options=4;RequestMethod.Head=5;RequestMethod.Patch=6;RequestMethod[RequestMethod.Get]="Get";RequestMethod[RequestMethod.Post]="Post";RequestMethod[RequestMethod.Put]="Put";RequestMethod[RequestMethod.Delete]="Delete";RequestMethod[RequestMethod.Options]="Options";RequestMethod[RequestMethod.Head]="Head";RequestMethod[RequestMethod.Patch]="Patch";var ReadyState={};ReadyState.Unsent=0;ReadyState.Open=1;ReadyState.HeadersReceived=2;ReadyState.Loading=3;ReadyState.Done=4;ReadyState.Cancelled=5;ReadyState[ReadyState.Unsent]="Unsent";ReadyState[ReadyState.Open]="Open";ReadyState[ReadyState.HeadersReceived]="HeadersReceived";ReadyState[ReadyState.Loading]="Loading";ReadyState[ReadyState.Done]="Done";ReadyState[ReadyState.Cancelled]="Cancelled";var ResponseType={};ResponseType.Basic=0;ResponseType.Cors=1;ResponseType.Default=2;ResponseType.Error=3;ResponseType.Opaque=4;ResponseType[ResponseType.Basic]="Basic";ResponseType[ResponseType.Cors]="Cors";ResponseType[ResponseType.Default]="Default";ResponseType[ResponseType.Error]="Error";ResponseType[ResponseType.Opaque]="Opaque";var ContentType={};ContentType.NONE=0;ContentType.JSON=1;ContentType.FORM=2;ContentType.FORM_DATA=3;ContentType.TEXT=4;ContentType.BLOB=5;ContentType.ARRAY_BUFFER=6;ContentType[ContentType.NONE]="NONE";ContentType[ContentType.JSON]="JSON";ContentType[ContentType.FORM]="FORM";ContentType[ContentType.FORM_DATA]="FORM_DATA";ContentType[ContentType.TEXT]="TEXT";ContentType[ContentType.BLOB]="BLOB";ContentType[ContentType.ARRAY_BUFFER]="ARRAY_BUFFER";var ResponseContentType={};ResponseContentType.Text=0;ResponseContentType.Json=1;ResponseContentType.ArrayBuffer=2;ResponseContentType.Blob=3;ResponseContentType[ResponseContentType.Text]="Text";ResponseContentType[ResponseContentType.Json]="Json";ResponseContentType[ResponseContentType.ArrayBuffer]="ArrayBuffer";ResponseContentType[ResponseContentType.Blob]="Blob";/**
 * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as
 * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).
 *
 * The only known difference between this `Headers` implementation and the spec is the
 * lack of an `entries` method.
 *
 * ### Example
 *
 * ```
 * import {Headers} from '\@angular/http';
 *
 * var firstHeaders = new Headers();
 * firstHeaders.append('Content-Type', 'image/jpeg');
 * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'
 *
 * // Create headers from Plain Old JavaScript Object
 * var secondHeaders = new Headers({
 *   'X-My-Custom-Header': 'Angular'
 * });
 * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'
 *
 * var thirdHeaders = new Headers(secondHeaders);
 * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'
 * ```
 *
 * \@experimental
 */var Headers=function(){/**
     * @param {?=} headers
     */function Headers(headers){var _this=this;_classCallCheck(this,Headers);/** @internal header names are lower case */this._headers=new Map();/** @internal map lower case names to actual names */this._normalizedNames=new Map();if(!headers){return;}if(headers instanceof Headers){headers.forEach(function(values,name){values.forEach(function(value){return _this.append(name,value);});});return;}Object.keys(headers).forEach(function(name){var values=Array.isArray(headers[name])?headers[name]:[headers[name]];_this.delete(name);values.forEach(function(value){return _this.append(name,value);});});}/**
     * Returns a new Headers instance from the given DOMString of Response Headers
     * @param {?} headersString
     * @return {?}
     */_createClass(Headers,[{key:'append',/**
     * Appends a header to existing list of header values for a given header name.
     * @param {?} name
     * @param {?} value
     * @return {?}
     */value:function append(name,value){var/** @type {?} */values=this.getAll(name);if(values===null){this.set(name,value);}else{values.push(value);}}/**
     * Deletes all header values for the given name.
     * @param {?} name
     * @return {?}
     */},{key:'delete',value:function _delete(name){var/** @type {?} */lcName=name.toLowerCase();this._normalizedNames.delete(lcName);this._headers.delete(lcName);}/**
     * @param {?} fn
     * @return {?}
     */},{key:'forEach',value:function forEach(fn){var _this2=this;this._headers.forEach(function(values,lcName){return fn(values,_this2._normalizedNames.get(lcName),_this2._headers);});}/**
     * Returns first header that matches given name.
     * @param {?} name
     * @return {?}
     */},{key:'get',value:function get(name){var/** @type {?} */values=this.getAll(name);if(values===null){return null;}return values.length>0?values[0]:null;}/**
     * Checks for existence of header by given name.
     * @param {?} name
     * @return {?}
     */},{key:'has',value:function has(name){return this._headers.has(name.toLowerCase());}/**
     * Returns the names of the headers
     * @return {?}
     */},{key:'keys',value:function keys(){return Array.from(this._normalizedNames.values());}/**
     * Sets or overrides header value for given name.
     * @param {?} name
     * @param {?} value
     * @return {?}
     */},{key:'set',value:function set(name,value){if(Array.isArray(value)){if(value.length){this._headers.set(name.toLowerCase(),[value.join(',')]);}}else{this._headers.set(name.toLowerCase(),[value]);}this.mayBeSetNormalizedName(name);}/**
     * Returns values of all headers.
     * @return {?}
     */},{key:'values',value:function values(){return Array.from(this._headers.values());}/**
     * @return {?}
     */},{key:'toJSON',value:function toJSON(){var _this3=this;var/** @type {?} */serialized={};this._headers.forEach(function(values,name){var/** @type {?} */split=[];values.forEach(function(v){return split.push.apply(split,_toConsumableArray(v.split(',')));});serialized[_this3._normalizedNames.get(name)]=split;});return serialized;}/**
     * Returns list of header values for a given name.
     * @param {?} name
     * @return {?}
     */},{key:'getAll',value:function getAll(name){return this.has(name)?this._headers.get(name.toLowerCase()):null;}/**
     * This method is not implemented.
     * @return {?}
     */},{key:'entries',value:function entries(){throw new Error('"entries" method is not implemented on Headers class');}/**
     * @param {?} name
     * @return {?}
     */},{key:'mayBeSetNormalizedName',value:function mayBeSetNormalizedName(name){var/** @type {?} */lcName=name.toLowerCase();if(!this._normalizedNames.has(lcName)){this._normalizedNames.set(lcName,name);}}}],[{key:'fromResponseHeaderString',value:function fromResponseHeaderString(headersString){var/** @type {?} */headers=new Headers();headersString.split('\n').forEach(function(line){var/** @type {?} */index=line.indexOf(':');if(index>0){var/** @type {?} */name=line.slice(0,index);var/** @type {?} */value=line.slice(index+1).trim();headers.set(name,value);}});return headers;}}]);return Headers;}();/**
 * Creates a response options object to be optionally provided when instantiating a
 * {\@link Response}.
 *
 * This class is based on the `ResponseInit` description in the [Fetch
 * Spec](https://fetch.spec.whatwg.org/#responseinit).
 *
 * All values are null by default. Typical defaults can be found in the
 * {\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.
 *
 * This class may be used in tests to build {\@link Response Responses} for
 * mock responses (see {\@link MockBackend}).
 *
 * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))
 *
 * ```typescript
 * import {ResponseOptions, Response} from '\@angular/http';
 *
 * var options = new ResponseOptions({
 *   body: '{"name":"Jeff"}'
 * });
 * var res = new Response(options);
 *
 * console.log('res.json():', res.json()); // Object {name: "Jeff"}
 * ```
 *
 * \@experimental
 */var ResponseOptions=function(){/**
     * @param {?=} __0
     */function ResponseOptions(){var _ref=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},body=_ref.body,status=_ref.status,headers=_ref.headers,statusText=_ref.statusText,type=_ref.type,url=_ref.url;_classCallCheck(this,ResponseOptions);this.body=body!=null?body:null;this.status=status!=null?status:null;this.headers=headers!=null?headers:null;this.statusText=statusText!=null?statusText:null;this.type=type!=null?type:null;this.url=url!=null?url:null;}/**
     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to
     * override
     * existing values. This method will not change the values of the instance on which it is being
     * called.
     *
     * This may be useful when sharing a base `ResponseOptions` object inside tests,
     * where certain properties may change from test to test.
     *
     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))
     *
     * ```typescript
     * import {ResponseOptions, Response} from '\@angular/http';
     *
     * var options = new ResponseOptions({
     *   body: {name: 'Jeff'}
     * });
     * var res = new Response(options.merge({
     *   url: 'https://google.com'
     * }));
     * console.log('options.url:', options.url); // null
     * console.log('res.json():', res.json()); // Object {name: "Jeff"}
     * console.log('res.url:', res.url); // https://google.com
     * ```
     * @param {?=} options
     * @return {?}
     */_createClass(ResponseOptions,[{key:'merge',value:function merge(options){return new ResponseOptions({body:options&&options.body!=null?options.body:this.body,status:options&&options.status!=null?options.status:this.status,headers:options&&options.headers!=null?options.headers:this.headers,statusText:options&&options.statusText!=null?options.statusText:this.statusText,type:options&&options.type!=null?options.type:this.type,url:options&&options.url!=null?options.url:this.url});}}]);return ResponseOptions;}();/**
 * Subclass of {\@link ResponseOptions}, with default values.
 *
 * Default values:
 *  * status: 200
 *  * headers: empty {\@link Headers} object
 *
 * This class could be extended and bound to the {\@link ResponseOptions} class
 * when configuring an {\@link Injector}, in order to override the default options
 * used by {\@link Http} to create {\@link Response Responses}.
 *
 * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))
 *
 * ```typescript
 * import {provide} from '\@angular/core';
 * import {bootstrap} from '\@angular/platform-browser/browser';
 * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from
 * '\@angular/http';
 * import {App} from './myapp';
 *
 * class MyOptions extends BaseResponseOptions {
 *   headers:Headers = new Headers({network: 'github'});
 * }
 *
 * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);
 * ```
 *
 * The options could also be extended when manually creating a {\@link Response}
 * object.
 *
 * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))
 *
 * ```
 * import {BaseResponseOptions, Response} from '\@angular/http';
 *
 * var options = new BaseResponseOptions();
 * var res = new Response(options.merge({
 *   body: 'Angular',
 *   headers: new Headers({framework: 'angular'})
 * }));
 * console.log('res.headers.get("framework"):', res.headers.get('framework')); // angular
 * console.log('res.text():', res.text()); // Angular;
 * ```
 *
 * \@experimental
 */var BaseResponseOptions=function(_ResponseOptions){_inherits(BaseResponseOptions,_ResponseOptions);function BaseResponseOptions(){_classCallCheck(this,BaseResponseOptions);return _possibleConstructorReturn(this,(BaseResponseOptions.__proto__||Object.getPrototypeOf(BaseResponseOptions)).call(this,{status:200,statusText:'Ok',type:ResponseType.Default,headers:new Headers()}));}return BaseResponseOptions;}(ResponseOptions);BaseResponseOptions.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["B" /* Injectable */]}];/** @nocollapse */BaseResponseOptions.ctorParameters=function(){return[];};/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 *//**
 * Abstract class from which real backends are derived.
 *
 * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given
 * {\@link Request}.
 *
 * \@experimental
 * @abstract
 */var ConnectionBackend=function(){function ConnectionBackend(){_classCallCheck(this,ConnectionBackend);}_createClass(ConnectionBackend,[{key:'createConnection',/**
     * @abstract
     * @param {?} request
     * @return {?}
     */value:function createConnection(request){}}]);return ConnectionBackend;}();/**
 * Abstract class from which real connections are derived.
 *
 * \@experimental
 * @abstract
 */var Connection=function Connection(){_classCallCheck(this,Connection);};/**
 * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.
 *
 * \@experimental
 * @abstract
 */var XSRFStrategy=function(){function XSRFStrategy(){_classCallCheck(this,XSRFStrategy);}_createClass(XSRFStrategy,[{key:'configureRequest',/**
     * @abstract
     * @param {?} req
     * @return {?}
     */value:function configureRequest(req){}}]);return XSRFStrategy;}();/**
 * @param {?} method
 * @return {?}
 */function normalizeMethodName(method){if(typeof method!=='string')return method;switch(method.toUpperCase()){case'GET':return RequestMethod.Get;case'POST':return RequestMethod.Post;case'PUT':return RequestMethod.Put;case'DELETE':return RequestMethod.Delete;case'OPTIONS':return RequestMethod.Options;case'HEAD':return RequestMethod.Head;case'PATCH':return RequestMethod.Patch;}throw new Error('Invalid request method. The method "'+method+'" is not supported.');}var/** @type {?} */isSuccess=function isSuccess(status){return status>=200&&status<300;};/**
 * @param {?} xhr
 * @return {?}
 */function getResponseURL(xhr){if('responseURL'in xhr){return xhr.responseURL;}if(/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())){return xhr.getResponseHeader('X-Request-URL');}return;}/**
 * @param {?} input
 * @return {?}
 */function stringToArrayBuffer(input){var/** @type {?} */view=new Uint16Array(input.length);for(var/** @type {?} */i=0,/** @type {?} */strLen=input.length;i<strLen;i++){view[i]=input.charCodeAt(i);}return view.buffer;}/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 * @param {?=} rawParams
 * @return {?}
 */function paramParser(){var rawParams=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';var/** @type {?} */map=new Map();if(rawParams.length>0){var/** @type {?} */params=rawParams.split('&');params.forEach(function(param){var/** @type {?} */eqIdx=param.indexOf('=');var _ref2=eqIdx==-1?[param,'']:[param.slice(0,eqIdx),param.slice(eqIdx+1)],_ref3=_slicedToArray(_ref2,2),key=_ref3[0],val=_ref3[1];var/** @type {?} */list=map.get(key)||[];list.push(val);map.set(key,list);});}return map;}/**
 * \@experimental
 *
 */var QueryEncoder=function(){function QueryEncoder(){_classCallCheck(this,QueryEncoder);}_createClass(QueryEncoder,[{key:'encodeKey',/**
     * @param {?} k
     * @return {?}
     */value:function encodeKey(k){return standardEncoding(k);}/**
     * @param {?} v
     * @return {?}
     */},{key:'encodeValue',value:function encodeValue(v){return standardEncoding(v);}}]);return QueryEncoder;}();/**
 * @param {?} v
 * @return {?}
 */function standardEncoding(v){return encodeURIComponent(v).replace(/%40/gi,'@').replace(/%3A/gi,':').replace(/%24/gi,'$').replace(/%2C/gi,',').replace(/%3B/gi,';').replace(/%2B/gi,'+').replace(/%3D/gi,'=').replace(/%3F/gi,'?').replace(/%2F/gi,'/');}/**
 * Map-like representation of url search parameters, based on
 * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,
 * with several extensions for merging URLSearchParams objects:
 *   - setAll()
 *   - appendAll()
 *   - replaceAll()
 *
 * This class accepts an optional second parameter of ${\@link QueryEncoder},
 * which is used to serialize parameters before making a request. By default,
 * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,
 * and then un-encodes certain characters that are allowed to be part of the query
 * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.
 *
 * These are the characters that are not encoded: `! $ \' ( ) * + , ; A 9 - . _ ~ ? /`
 *
 * If the set of allowed query characters is not acceptable for a particular backend,
 * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.
 *
 * ```
 * import {URLSearchParams, QueryEncoder} from '\@angular/http';
 * class MyQueryEncoder extends QueryEncoder {
 *   encodeKey(k: string): string {
 *     return myEncodingFunction(k);
 *   }
 *
 *   encodeValue(v: string): string {
 *     return myEncodingFunction(v);
 *   }
 * }
 *
 * let params = new URLSearchParams('', new MyQueryEncoder());
 * ```
 * \@experimental
 */var URLSearchParams=function(){/**
     * @param {?=} rawParams
     * @param {?=} queryEncoder
     */function URLSearchParams(){var rawParams=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';var queryEncoder=arguments.length>1&&arguments[1]!==undefined?arguments[1]:new QueryEncoder();_classCallCheck(this,URLSearchParams);this.rawParams=rawParams;this.queryEncoder=queryEncoder;this.paramsMap=paramParser(rawParams);}/**
     * @return {?}
     */_createClass(URLSearchParams,[{key:'clone',value:function clone(){var/** @type {?} */clone=new URLSearchParams('',this.queryEncoder);clone.appendAll(this);return clone;}/**
     * @param {?} param
     * @return {?}
     */},{key:'has',value:function has(param){return this.paramsMap.has(param);}/**
     * @param {?} param
     * @return {?}
     */},{key:'get',value:function get(param){var/** @type {?} */storedParam=this.paramsMap.get(param);return Array.isArray(storedParam)?storedParam[0]:null;}/**
     * @param {?} param
     * @return {?}
     */},{key:'getAll',value:function getAll(param){return this.paramsMap.get(param)||[];}/**
     * @param {?} param
     * @param {?} val
     * @return {?}
     */},{key:'set',value:function set(param,val){if(val===void 0||val===null){this.delete(param);return;}var/** @type {?} */list=this.paramsMap.get(param)||[];list.length=0;list.push(val);this.paramsMap.set(param,list);}/**
     * @param {?} searchParams
     * @return {?}
     */},{key:'setAll',value:function setAll(searchParams){var _this5=this;searchParams.paramsMap.forEach(function(value,param){var/** @type {?} */list=_this5.paramsMap.get(param)||[];list.length=0;list.push(value[0]);_this5.paramsMap.set(param,list);});}/**
     * @param {?} param
     * @param {?} val
     * @return {?}
     */},{key:'append',value:function append(param,val){if(val===void 0||val===null)return;var/** @type {?} */list=this.paramsMap.get(param)||[];list.push(val);this.paramsMap.set(param,list);}/**
     * @param {?} searchParams
     * @return {?}
     */},{key:'appendAll',value:function appendAll(searchParams){var _this6=this;searchParams.paramsMap.forEach(function(value,param){var/** @type {?} */list=_this6.paramsMap.get(param)||[];for(var/** @type {?} */i=0;i<value.length;++i){list.push(value[i]);}_this6.paramsMap.set(param,list);});}/**
     * @param {?} searchParams
     * @return {?}
     */},{key:'replaceAll',value:function replaceAll(searchParams){var _this7=this;searchParams.paramsMap.forEach(function(value,param){var/** @type {?} */list=_this7.paramsMap.get(param)||[];list.length=0;for(var/** @type {?} */i=0;i<value.length;++i){list.push(value[i]);}_this7.paramsMap.set(param,list);});}/**
     * @return {?}
     */},{key:'toString',value:function toString(){var _this8=this;var/** @type {?} */paramsList=[];this.paramsMap.forEach(function(values,k){values.forEach(function(v){return paramsList.push(_this8.queryEncoder.encodeKey(k)+'='+_this8.queryEncoder.encodeValue(v));});});return paramsList.join('&');}/**
     * @param {?} param
     * @return {?}
     */},{key:'delete',value:function _delete(param){this.paramsMap.delete(param);}}]);return URLSearchParams;}();/**
 * HTTP request body used by both {\@link Request} and {\@link Response}
 * https://fetch.spec.whatwg.org/#body
 * @abstract
 */var Body=function(){function Body(){_classCallCheck(this,Body);}_createClass(Body,[{key:'json',/**
     * Attempts to return body as parsed `JSON` object, or raises an exception.
     * @return {?}
     */value:function json(){if(typeof this._body==='string'){return JSON.parse(/** @type {?} */this._body);}if(this._body instanceof ArrayBuffer){return JSON.parse(this.text());}return this._body;}/**
     * Returns the body as a string, presuming `toString()` can be called on the response body.
     * @return {?}
     */},{key:'text',value:function text(){if(this._body instanceof URLSearchParams){return this._body.toString();}if(this._body instanceof ArrayBuffer){return String.fromCharCode.apply(null,new Uint16Array(/** @type {?} */this._body));}if(this._body==null){return'';}if(_typeof(this._body)==='object'){return JSON.stringify(this._body,null,2);}return this._body.toString();}/**
     * Return the body as an ArrayBuffer
     * @return {?}
     */},{key:'arrayBuffer',value:function arrayBuffer(){if(this._body instanceof ArrayBuffer){return this._body;}return stringToArrayBuffer(this.text());}/**
     * Returns the request's body as a Blob, assuming that body exists.
     * @return {?}
     */},{key:'blob',value:function blob(){if(this._body instanceof Blob){return this._body;}if(this._body instanceof ArrayBuffer){return new Blob([this._body]);}throw new Error('The request body isn\'t either a blob or an array buffer');}}]);return Body;}();/**
 * Creates `Response` instances from provided values.
 *
 * Though this object isn't
 * usually instantiated by end-users, it is the primary object interacted with when it comes time to
 * add data to a view.
 *
 * ### Example
 *
 * ```
 * http.request('my-friends.txt').subscribe(response => this.friends = response.text());
 * ```
 *
 * The Response's interface is inspired by the Response constructor defined in the [Fetch
 * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body
 * can be accessed many times. There are other differences in the implementation, but this is the
 * most significant.
 *
 * \@experimental
 */var Response=function(_Body){_inherits(Response,_Body);/**
     * @param {?} responseOptions
     */function Response(responseOptions){_classCallCheck(this,Response);var _this9=_possibleConstructorReturn(this,(Response.__proto__||Object.getPrototypeOf(Response)).call(this));_this9._body=responseOptions.body;_this9.status=responseOptions.status;_this9.ok=_this9.status>=200&&_this9.status<=299;_this9.statusText=responseOptions.statusText;_this9.headers=responseOptions.headers;_this9.type=responseOptions.type;_this9.url=responseOptions.url;return _this9;}/**
     * @return {?}
     */_createClass(Response,[{key:'toString',value:function toString(){return'Response with status: '+this.status+' '+this.statusText+' for URL: '+this.url;}}]);return Response;}(Body);var/** @type {?} */_nextRequestId=0;var/** @type {?} */JSONP_HOME='__ng_jsonp__';var/** @type {?} */_jsonpConnections=null;/**
 * @return {?}
 */function _getJsonpConnections(){var/** @type {?} */w=(typeof window==='undefined'?'undefined':_typeof(window))=='object'?window:{};if(_jsonpConnections===null){_jsonpConnections=w[JSONP_HOME]={};}return _jsonpConnections;}var BrowserJsonp=function(){function BrowserJsonp(){_classCallCheck(this,BrowserJsonp);}_createClass(BrowserJsonp,[{key:'build',/**
     * @param {?} url
     * @return {?}
     */value:function build(url){var/** @type {?} */node=document.createElement('script');node.src=url;return node;}/**
     * @return {?}
     */},{key:'nextRequestID',value:function nextRequestID(){return'__req'+_nextRequestId++;}/**
     * @param {?} id
     * @return {?}
     */},{key:'requestCallback',value:function requestCallback(id){return JSONP_HOME+'.'+id+'.finished';}/**
     * @param {?} id
     * @param {?} connection
     * @return {?}
     */},{key:'exposeConnection',value:function exposeConnection(id,connection){var/** @type {?} */connections=_getJsonpConnections();connections[id]=connection;}/**
     * @param {?} id
     * @return {?}
     */},{key:'removeConnection',value:function removeConnection(id){var/** @type {?} */connections=_getJsonpConnections();connections[id]=null;}/**
     * @param {?} node
     * @return {?}
     */},{key:'send',value:function send(node){document.body.appendChild(/** @type {?} */node);}/**
     * @param {?} node
     * @return {?}
     */},{key:'cleanup',value:function cleanup(node){if(node.parentNode){node.parentNode.removeChild(/** @type {?} */node);}}}]);return BrowserJsonp;}();BrowserJsonp.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["B" /* Injectable */]}];/** @nocollapse */BrowserJsonp.ctorParameters=function(){return[];};var/** @type {?} */JSONP_ERR_NO_CALLBACK='JSONP injected script did not invoke callback.';var/** @type {?} */JSONP_ERR_WRONG_METHOD='JSONP requests must use GET request method.';/**
 * Abstract base class for an in-flight JSONP request.
 *
 * \@experimental
 * @abstract
 */var JSONPConnection=function(){function JSONPConnection(){_classCallCheck(this,JSONPConnection);}_createClass(JSONPConnection,[{key:'finished',/**
     * Callback called when the JSONP request completes, to notify the application
     * of the new data.
     * @abstract
     * @param {?=} data
     * @return {?}
     */value:function finished(data){}}]);return JSONPConnection;}();var JSONPConnection_=function(_JSONPConnection){_inherits(JSONPConnection_,_JSONPConnection);/**
     * @param {?} req
     * @param {?} _dom
     * @param {?=} baseResponseOptions
     */function JSONPConnection_(req,_dom,baseResponseOptions){_classCallCheck(this,JSONPConnection_);var _this10=_possibleConstructorReturn(this,(JSONPConnection_.__proto__||Object.getPrototypeOf(JSONPConnection_)).call(this));_this10._dom=_dom;_this10.baseResponseOptions=baseResponseOptions;_this10._finished=false;if(req.method!==RequestMethod.Get){throw new TypeError(JSONP_ERR_WRONG_METHOD);}_this10.request=req;_this10.response=new __WEBPACK_IMPORTED_MODULE_1_rxjs_Observable__["Observable"](function(responseObserver){_this10.readyState=ReadyState.Loading;var id=_this10._id=_dom.nextRequestID();_dom.exposeConnection(id,_this10);// Workaround Dart
// url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);
var callback=_dom.requestCallback(_this10._id);var url=req.url;if(url.indexOf('=JSONP_CALLBACK&')>-1){url=url.replace('=JSONP_CALLBACK&','='+callback+'&');}else if(url.lastIndexOf('=JSONP_CALLBACK')===url.length-'=JSONP_CALLBACK'.length){url=url.substring(0,url.length-'=JSONP_CALLBACK'.length)+('='+callback);}var script=_this10._script=_dom.build(url);var onLoad=function onLoad(event){if(_this10.readyState===ReadyState.Cancelled)return;_this10.readyState=ReadyState.Done;_dom.cleanup(script);if(!_this10._finished){var _responseOptions=new ResponseOptions({body:JSONP_ERR_NO_CALLBACK,type:ResponseType.Error,url:url});if(baseResponseOptions){_responseOptions=baseResponseOptions.merge(_responseOptions);}responseObserver.error(new Response(_responseOptions));return;}var responseOptions=new ResponseOptions({body:_this10._responseData,url:url});if(_this10.baseResponseOptions){responseOptions=_this10.baseResponseOptions.merge(responseOptions);}responseObserver.next(new Response(responseOptions));responseObserver.complete();};var onError=function onError(error){if(_this10.readyState===ReadyState.Cancelled)return;_this10.readyState=ReadyState.Done;_dom.cleanup(script);var responseOptions=new ResponseOptions({body:error.message,type:ResponseType.Error});if(baseResponseOptions){responseOptions=baseResponseOptions.merge(responseOptions);}responseObserver.error(new Response(responseOptions));};script.addEventListener('load',onLoad);script.addEventListener('error',onError);_dom.send(script);return function(){_this10.readyState=ReadyState.Cancelled;script.removeEventListener('load',onLoad);script.removeEventListener('error',onError);_this10._dom.cleanup(script);};});return _this10;}/**
     * @param {?=} data
     * @return {?}
     */_createClass(JSONPConnection_,[{key:'finished',value:function finished(data){// Don't leak connections
this._finished=true;this._dom.removeConnection(this._id);if(this.readyState===ReadyState.Cancelled)return;this._responseData=data;}}]);return JSONPConnection_;}(JSONPConnection);/**
 * A {\@link ConnectionBackend} that uses the JSONP strategy of making requests.
 *
 * \@experimental
 * @abstract
 */var JSONPBackend=function(_ConnectionBackend){_inherits(JSONPBackend,_ConnectionBackend);function JSONPBackend(){_classCallCheck(this,JSONPBackend);return _possibleConstructorReturn(this,(JSONPBackend.__proto__||Object.getPrototypeOf(JSONPBackend)).apply(this,arguments));}return JSONPBackend;}(ConnectionBackend);var JSONPBackend_=function(_JSONPBackend){_inherits(JSONPBackend_,_JSONPBackend);/**
     * @param {?} _browserJSONP
     * @param {?} _baseResponseOptions
     */function JSONPBackend_(_browserJSONP,_baseResponseOptions){_classCallCheck(this,JSONPBackend_);var _this12=_possibleConstructorReturn(this,(JSONPBackend_.__proto__||Object.getPrototypeOf(JSONPBackend_)).call(this));_this12._browserJSONP=_browserJSONP;_this12._baseResponseOptions=_baseResponseOptions;return _this12;}/**
     * @param {?} request
     * @return {?}
     */_createClass(JSONPBackend_,[{key:'createConnection',value:function createConnection(request){return new JSONPConnection_(request,this._browserJSONP,this._baseResponseOptions);}}]);return JSONPBackend_;}(JSONPBackend);JSONPBackend_.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["B" /* Injectable */]}];/** @nocollapse */JSONPBackend_.ctorParameters=function(){return[{type:BrowserJsonp},{type:ResponseOptions}];};var/** @type {?} */XSSI_PREFIX=/^\)\]\}',?\n/;/**
 * Creates connections using `XMLHttpRequest`. Given a fully-qualified
 * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the
 * request.
 *
 * This class would typically not be created or interacted with directly inside applications, though
 * the {\@link MockConnection} may be interacted with in tests.
 *
 * \@experimental
 */var XHRConnection=function(){/**
     * @param {?} req
     * @param {?} browserXHR
     * @param {?=} baseResponseOptions
     */function XHRConnection(req,browserXHR,baseResponseOptions){var _this13=this;_classCallCheck(this,XHRConnection);this.request=req;this.response=new __WEBPACK_IMPORTED_MODULE_1_rxjs_Observable__["Observable"](function(responseObserver){var _xhr=browserXHR.build();_xhr.open(RequestMethod[req.method].toUpperCase(),req.url);if(req.withCredentials!=null){_xhr.withCredentials=req.withCredentials;}// load event handler
var onLoad=function onLoad(){// normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
var status=_xhr.status===1223?204:_xhr.status;var body=null;// HTTP 204 means no content
if(status!==204){// responseText is the old-school way of retrieving response (supported by IE8 & 9)
// response/responseType properties were introduced in ResourceLoader Level2 spec
// (supported by IE10)
body=typeof _xhr.response==='undefined'?_xhr.responseText:_xhr.response;// Implicitly strip a potential XSSI prefix.
if(typeof body==='string'){body=body.replace(XSSI_PREFIX,'');}}// fix status code when it is 0 (0 status is undocumented).
// Occurs when accessing file resources or on Android 4.1 stock browser
// while retrieving files from application cache.
if(status===0){status=body?200:0;}var headers=Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());// IE 9 does not provide the way to get URL of response
var url=getResponseURL(_xhr)||req.url;var statusText=_xhr.statusText||'OK';var responseOptions=new ResponseOptions({body:body,status:status,headers:headers,statusText:statusText,url:url});if(baseResponseOptions!=null){responseOptions=baseResponseOptions.merge(responseOptions);}var response=new Response(responseOptions);response.ok=isSuccess(status);if(response.ok){responseObserver.next(response);// TODO(gdi2290): defer complete if array buffer until done
responseObserver.complete();return;}responseObserver.error(response);};// error event handler
var onError=function onError(err){var responseOptions=new ResponseOptions({body:err,type:ResponseType.Error,status:_xhr.status,statusText:_xhr.statusText});if(baseResponseOptions!=null){responseOptions=baseResponseOptions.merge(responseOptions);}responseObserver.error(new Response(responseOptions));};_this13.setDetectedContentType(req,_xhr);if(req.headers==null){req.headers=new Headers();}if(!req.headers.has('Accept')){req.headers.append('Accept','application/json, text/plain, */*');}req.headers.forEach(function(values,name){return _xhr.setRequestHeader(name,values.join(','));});// Select the correct buffer type to store the response
if(req.responseType!=null&&_xhr.responseType!=null){switch(req.responseType){case ResponseContentType.ArrayBuffer:_xhr.responseType='arraybuffer';break;case ResponseContentType.Json:_xhr.responseType='json';break;case ResponseContentType.Text:_xhr.responseType='text';break;case ResponseContentType.Blob:_xhr.responseType='blob';break;default:throw new Error('The selected responseType is not supported');}}_xhr.addEventListener('load',onLoad);_xhr.addEventListener('error',onError);_xhr.send(_this13.request.getBody());return function(){_xhr.removeEventListener('load',onLoad);_xhr.removeEventListener('error',onError);_xhr.abort();};});}/**
     * @param {?} req
     * @param {?} _xhr
     * @return {?}
     */_createClass(XHRConnection,[{key:'setDetectedContentType',value:function setDetectedContentType(req/** TODO Request */,_xhr/** XMLHttpRequest */){// Skip if a custom Content-Type header is provided
if(req.headers!=null&&req.headers.get('Content-Type')!=null){return;}// Set the detected content type
switch(req.contentType){case ContentType.NONE:break;case ContentType.JSON:_xhr.setRequestHeader('content-type','application/json');break;case ContentType.FORM:_xhr.setRequestHeader('content-type','application/x-www-form-urlencoded;charset=UTF-8');break;case ContentType.TEXT:_xhr.setRequestHeader('content-type','text/plain');break;case ContentType.BLOB:var/** @type {?} */blob=req.blob();if(blob.type){_xhr.setRequestHeader('content-type',blob.type);}break;}}}]);return XHRConnection;}();/**
 * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application
 * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)
 * for more information on XSRF.
 *
 * Applications can configure custom cookie and header names by binding an instance of this class
 * with different `cookieName` and `headerName` values. See the main HTTP documentation for more
 * details.
 *
 * \@experimental
 */var CookieXSRFStrategy=function(){/**
     * @param {?=} _cookieName
     * @param {?=} _headerName
     */function CookieXSRFStrategy(){var _cookieName=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'XSRF-TOKEN';var _headerName=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'X-XSRF-TOKEN';_classCallCheck(this,CookieXSRFStrategy);this._cookieName=_cookieName;this._headerName=_headerName;}/**
     * @param {?} req
     * @return {?}
     */_createClass(CookieXSRFStrategy,[{key:'configureRequest',value:function configureRequest(req){var/** @type {?} */xsrfToken=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__angular_platform_browser__["b" /* ɵgetDOM */])().getCookie(this._cookieName);if(xsrfToken){req.headers.set(this._headerName,xsrfToken);}}}]);return CookieXSRFStrategy;}();/**
 * Creates {\@link XHRConnection} instances.
 *
 * This class would typically not be used by end users, but could be
 * overridden if a different backend implementation should be used,
 * such as in a node backend.
 *
 * ### Example
 *
 * ```
 * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\@angular/http';
 * \@Component({
 *   viewProviders: [
 *     HTTP_PROVIDERS,
 *     {provide: Http, useFactory: (backend, options) => {
 *       return new Http(backend, options);
 *     }, deps: [MyNodeBackend, BaseRequestOptions]}]
 * })
 * class MyComponent {
 *   constructor(http:Http) {
 *     http.request('people.json').subscribe(res => this.people = res.json());
 *   }
 * }
 * ```
 * \@experimental
 */var XHRBackend=function(){/**
     * @param {?} _browserXHR
     * @param {?} _baseResponseOptions
     * @param {?} _xsrfStrategy
     */function XHRBackend(_browserXHR,_baseResponseOptions,_xsrfStrategy){_classCallCheck(this,XHRBackend);this._browserXHR=_browserXHR;this._baseResponseOptions=_baseResponseOptions;this._xsrfStrategy=_xsrfStrategy;}/**
     * @param {?} request
     * @return {?}
     */_createClass(XHRBackend,[{key:'createConnection',value:function createConnection(request){this._xsrfStrategy.configureRequest(request);return new XHRConnection(request,this._browserXHR,this._baseResponseOptions);}}]);return XHRBackend;}();XHRBackend.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["B" /* Injectable */]}];/** @nocollapse */XHRBackend.ctorParameters=function(){return[{type:BrowserXhr},{type:ResponseOptions},{type:XSRFStrategy}];};/**
 * Creates a request options object to be optionally provided when instantiating a
 * {\@link Request}.
 *
 * This class is based on the `RequestInit` description in the [Fetch
 * Spec](https://fetch.spec.whatwg.org/#requestinit).
 *
 * All values are null by default. Typical defaults can be found in the {\@link BaseRequestOptions}
 * class, which sub-classes `RequestOptions`.
 *
 * ### Example ([live demo](http://plnkr.co/edit/7Wvi3lfLq41aQPKlxB4O?p=preview))
 *
 * ```typescript
 * import {RequestOptions, Request, RequestMethod} from '\@angular/http';
 *
 * var options = new RequestOptions({
 *   method: RequestMethod.Post,
 *   url: 'https://google.com'
 * });
 * var req = new Request(options);
 * console.log('req.method:', RequestMethod[req.method]); // Post
 * console.log('options.url:', options.url); // https://google.com
 * ```
 *
 * \@experimental
 */var RequestOptions=function(){_createClass(RequestOptions,[{key:'search',/**
     * @deprecated from 4.0.0. Use params instead.
     * @return {?}
     */get:function get(){return this.params;}/**
     * @deprecated from 4.0.0. Use params instead.
     * @param {?} params
     * @return {?}
     */,set:function set(params){this.params=params;}/**
     * @param {?=} __0
     */}]);function RequestOptions(){var _ref4=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},method=_ref4.method,headers=_ref4.headers,body=_ref4.body,url=_ref4.url,search=_ref4.search,params=_ref4.params,withCredentials=_ref4.withCredentials,responseType=_ref4.responseType;_classCallCheck(this,RequestOptions);this.method=method!=null?normalizeMethodName(method):null;this.headers=headers!=null?headers:null;this.body=body!=null?body:null;this.url=url!=null?url:null;this.params=this._mergeSearchParams(params||search);this.withCredentials=withCredentials!=null?withCredentials:null;this.responseType=responseType!=null?responseType:null;}/**
     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override
     * existing values. This method will not change the values of the instance on which it is being
     * called.
     *
     * Note that `headers` and `search` will override existing values completely if present in
     * the `options` object. If these values should be merged, it should be done prior to calling
     * `merge` on the `RequestOptions` instance.
     *
     * ### Example ([live demo](http://plnkr.co/edit/6w8XA8YTkDRcPYpdB9dk?p=preview))
     *
     * ```typescript
     * import {RequestOptions, Request, RequestMethod} from '\@angular/http';
     *
     * var options = new RequestOptions({
     *   method: RequestMethod.Post
     * });
     * var req = new Request(options.merge({
     *   url: 'https://google.com'
     * }));
     * console.log('req.method:', RequestMethod[req.method]); // Post
     * console.log('options.url:', options.url); // null
     * console.log('req.url:', req.url); // https://google.com
     * ```
     * @param {?=} options
     * @return {?}
     */_createClass(RequestOptions,[{key:'merge',value:function merge(options){return new RequestOptions({method:options&&options.method!=null?options.method:this.method,headers:options&&options.headers!=null?options.headers:new Headers(this.headers),body:options&&options.body!=null?options.body:this.body,url:options&&options.url!=null?options.url:this.url,params:options&&this._mergeSearchParams(options.params||options.search),withCredentials:options&&options.withCredentials!=null?options.withCredentials:this.withCredentials,responseType:options&&options.responseType!=null?options.responseType:this.responseType});}/**
     * @param {?} params
     * @return {?}
     */},{key:'_mergeSearchParams',value:function _mergeSearchParams(params){if(!params)return this.params;if(params instanceof URLSearchParams){return params.clone();}if(typeof params==='string'){return new URLSearchParams(params);}return this._parseParams(params);}/**
     * @param {?=} objParams
     * @return {?}
     */},{key:'_parseParams',value:function _parseParams(){var _this14=this;var objParams=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var/** @type {?} */params=new URLSearchParams();Object.keys(objParams).forEach(function(key){var/** @type {?} */value=objParams[key];if(Array.isArray(value)){value.forEach(function(item){return _this14._appendParam(key,item,params);});}else{_this14._appendParam(key,value,params);}});return params;}/**
     * @param {?} key
     * @param {?} value
     * @param {?} params
     * @return {?}
     */},{key:'_appendParam',value:function _appendParam(key,value,params){if(typeof value!=='string'){value=JSON.stringify(value);}params.append(key,value);}}]);return RequestOptions;}();/**
 * Subclass of {\@link RequestOptions}, with default values.
 *
 * Default values:
 *  * method: {\@link RequestMethod RequestMethod.Get}
 *  * headers: empty {\@link Headers} object
 *
 * This class could be extended and bound to the {\@link RequestOptions} class
 * when configuring an {\@link Injector}, in order to override the default options
 * used by {\@link Http} to create and send {\@link Request Requests}.
 *
 * ### Example ([live demo](http://plnkr.co/edit/LEKVSx?p=preview))
 *
 * ```typescript
 * import {provide} from '\@angular/core';
 * import {bootstrap} from '\@angular/platform-browser/browser';
 * import {HTTP_PROVIDERS, Http, BaseRequestOptions, RequestOptions} from '\@angular/http';
 * import {App} from './myapp';
 *
 * class MyOptions extends BaseRequestOptions {
 *   search: string = 'coreTeam=true';
 * }
 *
 * bootstrap(App, [HTTP_PROVIDERS, {provide: RequestOptions, useClass: MyOptions}]);
 * ```
 *
 * The options could also be extended when manually creating a {\@link Request}
 * object.
 *
 * ### Example ([live demo](http://plnkr.co/edit/oyBoEvNtDhOSfi9YxaVb?p=preview))
 *
 * ```
 * import {BaseRequestOptions, Request, RequestMethod} from '\@angular/http';
 *
 * var options = new BaseRequestOptions();
 * var req = new Request(options.merge({
 *   method: RequestMethod.Post,
 *   url: 'https://google.com'
 * }));
 * console.log('req.method:', RequestMethod[req.method]); // Post
 * console.log('options.url:', options.url); // null
 * console.log('req.url:', req.url); // https://google.com
 * ```
 *
 * \@experimental
 */var BaseRequestOptions=function(_RequestOptions){_inherits(BaseRequestOptions,_RequestOptions);function BaseRequestOptions(){_classCallCheck(this,BaseRequestOptions);return _possibleConstructorReturn(this,(BaseRequestOptions.__proto__||Object.getPrototypeOf(BaseRequestOptions)).call(this,{method:RequestMethod.Get,headers:new Headers()}));}return BaseRequestOptions;}(RequestOptions);BaseRequestOptions.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["B" /* Injectable */]}];/** @nocollapse */BaseRequestOptions.ctorParameters=function(){return[];};/**
 * Creates `Request` instances from provided values.
 *
 * The Request's interface is inspired by the Request constructor defined in the [Fetch
 * Spec](https://fetch.spec.whatwg.org/#request-class),
 * but is considered a static value whose body can be accessed many times. There are other
 * differences in the implementation, but this is the most significant.
 *
 * `Request` instances are typically created by higher-level classes, like {\@link Http} and
 * {\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.
 * One such example is when creating services that wrap higher-level services, like {\@link Http},
 * where it may be useful to generate a `Request` with arbitrary headers and search params.
 *
 * ```typescript
 * import {Injectable, Injector} from '\@angular/core';
 * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\@angular/http';
 *
 * \@Injectable()
 * class AutoAuthenticator {
 *   constructor(public http:Http) {}
 *   request(url:string) {
 *     return this.http.request(new Request({
 *       method: RequestMethod.Get,
 *       url: url,
 *       search: 'password=123'
 *     }));
 *   }
 * }
 *
 * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);
 * var authenticator = injector.get(AutoAuthenticator);
 * authenticator.request('people.json').subscribe(res => {
 *   //URL should have included '?password=123'
 *   console.log('people', res.json());
 * });
 * ```
 *
 * \@experimental
 */var Request=function(_Body2){_inherits(Request,_Body2);/**
     * @param {?} requestOptions
     */function Request(requestOptions){_classCallCheck(this,Request);// TODO: assert that url is present
var _this16=_possibleConstructorReturn(this,(Request.__proto__||Object.getPrototypeOf(Request)).call(this));var url=requestOptions.url;_this16.url=requestOptions.url;if(requestOptions.params){var params=requestOptions.params.toString();if(params.length>0){var prefix='?';if(_this16.url.indexOf('?')!=-1){prefix=_this16.url[_this16.url.length-1]=='&'?'':'&';}// TODO: just delete search-query-looking string in url?
_this16.url=url+prefix+params;}}_this16._body=requestOptions.body;_this16.method=normalizeMethodName(requestOptions.method);// TODO(jeffbcross): implement behavior
// Defaults to 'omit', consistent with browser
_this16.headers=new Headers(requestOptions.headers);_this16.contentType=_this16.detectContentType();_this16.withCredentials=requestOptions.withCredentials;_this16.responseType=requestOptions.responseType;return _this16;}/**
     * Returns the content type enum based on header options.
     * @return {?}
     */_createClass(Request,[{key:'detectContentType',value:function detectContentType(){switch(this.headers.get('content-type')){case'application/json':return ContentType.JSON;case'application/x-www-form-urlencoded':return ContentType.FORM;case'multipart/form-data':return ContentType.FORM_DATA;case'text/plain':case'text/html':return ContentType.TEXT;case'application/octet-stream':return this._body instanceof ArrayBuffer$1?ContentType.ARRAY_BUFFER:ContentType.BLOB;default:return this.detectContentTypeFromBody();}}/**
     * Returns the content type of request's body based on its type.
     * @return {?}
     */},{key:'detectContentTypeFromBody',value:function detectContentTypeFromBody(){if(this._body==null){return ContentType.NONE;}else if(this._body instanceof URLSearchParams){return ContentType.FORM;}else if(this._body instanceof FormData){return ContentType.FORM_DATA;}else if(this._body instanceof Blob$1){return ContentType.BLOB;}else if(this._body instanceof ArrayBuffer$1){return ContentType.ARRAY_BUFFER;}else if(this._body&&_typeof(this._body)==='object'){return ContentType.JSON;}else{return ContentType.TEXT;}}/**
     * Returns the request's body according to its type. If body is undefined, return
     * null.
     * @return {?}
     */},{key:'getBody',value:function getBody(){switch(this.contentType){case ContentType.JSON:return this.text();case ContentType.FORM:return this.text();case ContentType.FORM_DATA:return this._body;case ContentType.TEXT:return this.text();case ContentType.BLOB:return this.blob();case ContentType.ARRAY_BUFFER:return this.arrayBuffer();default:return null;}}}]);return Request;}(Body);var/** @type {?} */noop=function noop(){};var/** @type {?} */w=(typeof window==='undefined'?'undefined':_typeof(window))=='object'?window:noop;var/** @type {?} */FormData=w[/** TODO #9100 */'FormData']||noop;var/** @type {?} */Blob$1=w[/** TODO #9100 */'Blob']||noop;var/** @type {?} */ArrayBuffer$1=w[/** TODO #9100 */'ArrayBuffer']||noop;/**
 * @param {?} backend
 * @param {?} request
 * @return {?}
 */function httpRequest(backend,request){return backend.createConnection(request).response;}/**
 * @param {?} defaultOpts
 * @param {?} providedOpts
 * @param {?} method
 * @param {?} url
 * @return {?}
 */function mergeOptions(defaultOpts,providedOpts,method,url){var/** @type {?} */newOptions=defaultOpts;if(providedOpts){// Hack so Dart can used named parameters
return newOptions.merge(new RequestOptions({method:providedOpts.method||method,url:providedOpts.url||url,search:providedOpts.search,params:providedOpts.params,headers:providedOpts.headers,body:providedOpts.body,withCredentials:providedOpts.withCredentials,responseType:providedOpts.responseType}));}return newOptions.merge(new RequestOptions({method:method,url:url}));}/**
 * Performs http requests using `XMLHttpRequest` as the default backend.
 *
 * `Http` is available as an injectable class, with methods to perform http requests. Calling
 * `request` returns an `Observable` which will emit a single {\@link Response} when a
 * response is received.
 *
 * ### Example
 *
 * ```typescript
 * import {Http, HTTP_PROVIDERS} from '\@angular/http';
 * import 'rxjs/add/operator/map'
 * \@Component({
 *   selector: 'http-app',
 *   viewProviders: [HTTP_PROVIDERS],
 *   templateUrl: 'people.html'
 * })
 * class PeopleComponent {
 *   constructor(http: Http) {
 *     http.get('people.json')
 *       // Call map on the response observable to get the parsed people object
 *       .map(res => res.json())
 *       // Subscribe to the observable to get the parsed people object and attach it to the
 *       // component
 *       .subscribe(people => this.people = people);
 *   }
 * }
 * ```
 *
 *
 * ### Example
 *
 * ```
 * http.get('people.json').subscribe((res:Response) => this.people = res.json());
 * ```
 *
 * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a "Backend" (
 * {\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing
 * the {\@link XHRBackend} provider, as in the following example:
 *
 * ### Example
 *
 * ```typescript
 * import {BaseRequestOptions, Http} from '\@angular/http';
 * import {MockBackend} from '\@angular/http/testing';
 * var injector = Injector.resolveAndCreate([
 *   BaseRequestOptions,
 *   MockBackend,
 *   {provide: Http, useFactory:
 *       function(backend, defaultOptions) {
 *         return new Http(backend, defaultOptions);
 *       },
 *       deps: [MockBackend, BaseRequestOptions]}
 * ]);
 * var http = injector.get(Http);
 * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));
 * ```
 *
 * \@experimental
 */var Http=function(){/**
     * @param {?} _backend
     * @param {?} _defaultOptions
     */function Http(_backend,_defaultOptions){_classCallCheck(this,Http);this._backend=_backend;this._defaultOptions=_defaultOptions;}/**
     * Performs any type of http request. First argument is required, and can either be a url or
     * a {\@link Request} instance. If the first argument is a url, an optional {\@link RequestOptions}
     * object can be provided as the 2nd argument. The options object will be merged with the values
     * of {\@link BaseRequestOptions} before performing the request.
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */_createClass(Http,[{key:'request',value:function request(url,options){var/** @type {?} */responseObservable=void 0;if(typeof url==='string'){responseObservable=httpRequest(this._backend,new Request(mergeOptions(this._defaultOptions,options,RequestMethod.Get,/** @type {?} */url)));}else if(url instanceof Request){responseObservable=httpRequest(this._backend,url);}else{throw new Error('First argument must be a url string or Request instance.');}return responseObservable;}/**
     * Performs a request with `get` http method.
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */},{key:'get',value:function get(url,options){return this.request(new Request(mergeOptions(this._defaultOptions,options,RequestMethod.Get,url)));}/**
     * Performs a request with `post` http method.
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */},{key:'post',value:function post(url,body,options){return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({body:body})),options,RequestMethod.Post,url)));}/**
     * Performs a request with `put` http method.
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */},{key:'put',value:function put(url,body,options){return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({body:body})),options,RequestMethod.Put,url)));}/**
     * Performs a request with `delete` http method.
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */},{key:'delete',value:function _delete(url,options){return this.request(new Request(mergeOptions(this._defaultOptions,options,RequestMethod.Delete,url)));}/**
     * Performs a request with `patch` http method.
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */},{key:'patch',value:function patch(url,body,options){return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({body:body})),options,RequestMethod.Patch,url)));}/**
     * Performs a request with `head` http method.
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */},{key:'head',value:function head(url,options){return this.request(new Request(mergeOptions(this._defaultOptions,options,RequestMethod.Head,url)));}/**
     * Performs a request with `options` http method.
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */},{key:'options',value:function options(url,_options){return this.request(new Request(mergeOptions(this._defaultOptions,_options,RequestMethod.Options,url)));}}]);return Http;}();Http.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["B" /* Injectable */]}];/** @nocollapse */Http.ctorParameters=function(){return[{type:ConnectionBackend},{type:RequestOptions}];};/**
 * \@experimental
 */var Jsonp=function(_Http){_inherits(Jsonp,_Http);/**
     * @param {?} backend
     * @param {?} defaultOptions
     */function Jsonp(backend,defaultOptions){_classCallCheck(this,Jsonp);return _possibleConstructorReturn(this,(Jsonp.__proto__||Object.getPrototypeOf(Jsonp)).call(this,backend,defaultOptions));}/**
     * Performs any type of http request. First argument is required, and can either be a url or
     * a {\@link Request} instance. If the first argument is a url, an optional {\@link RequestOptions}
     * object can be provided as the 2nd argument. The options object will be merged with the values
     * of {\@link BaseRequestOptions} before performing the request.
     *
     * \@security Regular XHR is the safest alternative to JSONP for most applications, and is
     * supported by all current browsers. Because JSONP creates a `<script>` element with
     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted
     * source could expose your application to XSS risks. Data exposed by JSONP may also be
     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for
     * future security issues (e.g. content sniffing).  For more detail, see the
     * [Security Guide](http://g.co/ng/security).
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */_createClass(Jsonp,[{key:'request',value:function request(url,options){var/** @type {?} */responseObservable=void 0;if(typeof url==='string'){url=new Request(mergeOptions(this._defaultOptions,options,RequestMethod.Get,/** @type {?} */url));}if(url instanceof Request){if(url.method!==RequestMethod.Get){throw new Error('JSONP requests must use GET request method.');}responseObservable=httpRequest(this._backend,url);}else{throw new Error('First argument must be a url string or Request instance.');}return responseObservable;}}]);return Jsonp;}(Http);Jsonp.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["B" /* Injectable */]}];/** @nocollapse */Jsonp.ctorParameters=function(){return[{type:ConnectionBackend},{type:RequestOptions}];};/**
 * @return {?}
 */function _createDefaultCookieXSRFStrategy(){return new CookieXSRFStrategy();}/**
 * @param {?} xhrBackend
 * @param {?} requestOptions
 * @return {?}
 */function httpFactory(xhrBackend,requestOptions){return new Http(xhrBackend,requestOptions);}/**
 * @param {?} jsonpBackend
 * @param {?} requestOptions
 * @return {?}
 */function jsonpFactory(jsonpBackend,requestOptions){return new Jsonp(jsonpBackend,requestOptions);}/**
 * The module that includes http's providers
 *
 * \@experimental
 */var HttpModule=function HttpModule(){_classCallCheck(this,HttpModule);};HttpModule.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["i" /* NgModule */],args:[{providers:[// TODO(pascal): use factory type annotations once supported in DI
// issue: https://github.com/angular/angular/issues/3183
{provide:Http,useFactory:httpFactory,deps:[XHRBackend,RequestOptions]},BrowserXhr,{provide:RequestOptions,useClass:BaseRequestOptions},{provide:ResponseOptions,useClass:BaseResponseOptions},XHRBackend,{provide:XSRFStrategy,useFactory:_createDefaultCookieXSRFStrategy}]}]}];/** @nocollapse */HttpModule.ctorParameters=function(){return[];};/**
 * The module that includes jsonp's providers
 *
 * \@experimental
 */var JsonpModule=function JsonpModule(){_classCallCheck(this,JsonpModule);};JsonpModule.decorators=[{type:__WEBPACK_IMPORTED_MODULE_0__angular_core__["i" /* NgModule */],args:[{providers:[// TODO(pascal): use factory type annotations once supported in DI
// issue: https://github.com/angular/angular/issues/3183
{provide:Jsonp,useFactory:jsonpFactory,deps:[JSONPBackend,RequestOptions]},BrowserJsonp,{provide:RequestOptions,useClass:BaseRequestOptions},{provide:ResponseOptions,useClass:BaseResponseOptions},{provide:JSONPBackend,useClass:JSONPBackend_}]}]}];/** @nocollapse */JsonpModule.ctorParameters=function(){return[];};/**
 * @stable
 */var/** @type {?} */VERSION=new __WEBPACK_IMPORTED_MODULE_0__angular_core__["f" /* Version */]('4.0.0-rc.1');


/***/ }),
/* 98 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_compiler__ = __webpack_require__(95);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_core__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_common__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_platform_browser__ = __webpack_require__(25);
/* unused harmony export RESOURCE_CACHE_PROVIDER */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return platformBrowserDynamic; });
/* unused harmony export VERSION */
/* unused harmony export ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS */
/* unused harmony export ɵResourceLoaderImpl */
var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}/**
 * @license Angular v4.0.0-rc.1
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 */var ResourceLoaderImpl=function(_ResourceLoader){_inherits(ResourceLoaderImpl,_ResourceLoader);function ResourceLoaderImpl(){_classCallCheck(this,ResourceLoaderImpl);return _possibleConstructorReturn(this,(ResourceLoaderImpl.__proto__||Object.getPrototypeOf(ResourceLoaderImpl)).apply(this,arguments));}_createClass(ResourceLoaderImpl,[{key:'get',value:function get(url){var resolve=void 0;var reject=void 0;var promise=new Promise(function(res,rej){resolve=res;reject=rej;});var xhr=new XMLHttpRequest();xhr.open('GET',url,true);xhr.responseType='text';xhr.onload=function(){// responseText is the old-school way of retrieving response (supported by IE8 & 9)
// response/responseType properties were introduced in ResourceLoader Level2 spec (supported
// by IE10)
var response=xhr.response||xhr.responseText;// normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
var status=xhr.status===1223?204:xhr.status;// fix status code when it is 0 (0 status is undocumented).
// Occurs when accessing file resources or on Android 4.1 stock browser
// while retrieving files from application cache.
if(status===0){status=response?200:0;}if(200<=status&&status<=300){resolve(response);}else{reject('Failed to load '+url);}};xhr.onerror=function(){reject('Failed to load '+url);};xhr.send();return promise;}}]);return ResourceLoaderImpl;}(__WEBPACK_IMPORTED_MODULE_0__angular_compiler__["a" /* ResourceLoader */]);ResourceLoaderImpl.decorators=[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["B" /* Injectable */]}];/** @nocollapse */ResourceLoaderImpl.ctorParameters=function(){return[];};var INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS=[__WEBPACK_IMPORTED_MODULE_3__angular_platform_browser__["c" /* ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS */],{provide:__WEBPACK_IMPORTED_MODULE_1__angular_core__["_12" /* COMPILER_OPTIONS */],useValue:{providers:[{provide:__WEBPACK_IMPORTED_MODULE_0__angular_compiler__["a" /* ResourceLoader */],useClass:ResourceLoaderImpl}]},multi:true},{provide:__WEBPACK_IMPORTED_MODULE_1__angular_core__["V" /* PLATFORM_ID */],useValue:__WEBPACK_IMPORTED_MODULE_2__angular_common__["g" /* ɵPLATFORM_BROWSER_ID */]}];/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */var globalScope=void 0;if(typeof window==='undefined'){if(typeof WorkerGlobalScope!=='undefined'&&self instanceof WorkerGlobalScope){// TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
globalScope=self;}else{globalScope=global;}}else{globalScope=window;}// Need to declare a new variable for global here since TypeScript
// exports the original value of the symbol.
var _global=globalScope;// TODO: remove calls to assert in production environment
// Note: Can't just export this and import in in other files
// as `assert` is a reserved keyword in Dart
_global.assert=function assert(condition){// TODO: to be fixed properly via #2830, noop for now
};/**
 * An implementation of ResourceLoader that uses a template cache to avoid doing an actual
 * ResourceLoader.
 *
 * The template cache needs to be built and loaded into window.$templateCache
 * via a separate mechanism.
 */var CachedResourceLoader=function(_ResourceLoader2){_inherits(CachedResourceLoader,_ResourceLoader2);function CachedResourceLoader(){_classCallCheck(this,CachedResourceLoader);var _this2=_possibleConstructorReturn(this,(CachedResourceLoader.__proto__||Object.getPrototypeOf(CachedResourceLoader)).call(this));_this2._cache=_global.$templateCache;if(_this2._cache==null){throw new Error('CachedResourceLoader: Template cache was not found in $templateCache.');}return _this2;}_createClass(CachedResourceLoader,[{key:'get',value:function get(url){if(this._cache.hasOwnProperty(url)){return Promise.resolve(this._cache[url]);}else{return Promise.reject('CachedResourceLoader: Did not find cached template for '+url);}}}]);return CachedResourceLoader;}(__WEBPACK_IMPORTED_MODULE_0__angular_compiler__["a" /* ResourceLoader */]);/**
 * @stable
 */var VERSION=new __WEBPACK_IMPORTED_MODULE_1__angular_core__["f" /* Version */]('4.0.0-rc.1');/**
 * @experimental
 */var RESOURCE_CACHE_PROVIDER=[{provide:__WEBPACK_IMPORTED_MODULE_0__angular_compiler__["a" /* ResourceLoader */],useClass:CachedResourceLoader}];/**
 * @stable
 */var platformBrowserDynamic=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["Y" /* createPlatformFactory */])(__WEBPACK_IMPORTED_MODULE_0__angular_compiler__["b" /* platformCoreDynamic */],'browserDynamic',INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);

/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(16)))

/***/ }),
/* 99 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_common__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_core__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_BehaviorSubject__ = __webpack_require__(184);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_BehaviorSubject___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_rxjs_BehaviorSubject__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_Subject__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_Subject___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_rxjs_Subject__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs_observable_from__ = __webpack_require__(192);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs_observable_from___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_rxjs_observable_from__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_rxjs_observable_of__ = __webpack_require__(194);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_rxjs_observable_of___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_of__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_rxjs_operator_concatMap__ = __webpack_require__(197);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_rxjs_operator_concatMap___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_rxjs_operator_concatMap__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_rxjs_operator_every__ = __webpack_require__(198);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_rxjs_operator_every___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_rxjs_operator_every__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_rxjs_operator_first__ = __webpack_require__(200);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_rxjs_operator_first___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_rxjs_operator_first__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_rxjs_operator_map__ = __webpack_require__(202);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_rxjs_operator_map___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_rxjs_operator_map__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_rxjs_operator_mergeMap__ = __webpack_require__(74);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_rxjs_operator_mergeMap___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_rxjs_operator_mergeMap__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_reduce__ = __webpack_require__(206);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_reduce___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11_rxjs_operator_reduce__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_rxjs_Observable__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_rxjs_Observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12_rxjs_Observable__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_rxjs_operator_catch__ = __webpack_require__(195);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_rxjs_operator_catch___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13_rxjs_operator_catch__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_rxjs_operator_concatAll__ = __webpack_require__(196);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_rxjs_operator_concatAll___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_14_rxjs_operator_concatAll__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_rxjs_util_EmptyError__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_rxjs_util_EmptyError___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_15_rxjs_util_EmptyError__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_rxjs_observable_fromPromise__ = __webpack_require__(73);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_rxjs_observable_fromPromise___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_16_rxjs_observable_fromPromise__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_rxjs_operator_last__ = __webpack_require__(201);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_rxjs_operator_last___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_17_rxjs_operator_last__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18_rxjs_operator_mergeAll__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18_rxjs_operator_mergeAll___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_18_rxjs_operator_mergeAll__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__angular_platform_browser__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20_rxjs_operator_filter__ = __webpack_require__(199);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20_rxjs_operator_filter___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_20_rxjs_operator_filter__);
/* unused harmony export RouterLink */
/* unused harmony export RouterLinkWithHref */
/* unused harmony export RouterLinkActive */
/* unused harmony export RouterOutlet */
/* unused harmony export NavigationCancel */
/* unused harmony export NavigationEnd */
/* unused harmony export NavigationError */
/* unused harmony export NavigationStart */
/* unused harmony export RouteConfigLoadEnd */
/* unused harmony export RouteConfigLoadStart */
/* unused harmony export RoutesRecognized */
/* unused harmony export RouteReuseStrategy */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Router; });
/* unused harmony export ROUTES */
/* unused harmony export ROUTER_CONFIGURATION */
/* unused harmony export ROUTER_INITIALIZER */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return RouterModule; });
/* unused harmony export provideRoutes */
/* unused harmony export RouterOutletMap */
/* unused harmony export NoPreloading */
/* unused harmony export PreloadAllModules */
/* unused harmony export PreloadingStrategy */
/* unused harmony export RouterPreloader */
/* unused harmony export ActivatedRoute */
/* unused harmony export ActivatedRouteSnapshot */
/* unused harmony export RouterState */
/* unused harmony export RouterStateSnapshot */
/* unused harmony export PRIMARY_OUTLET */
/* unused harmony export UrlHandlingStrategy */
/* unused harmony export DefaultUrlSerializer */
/* unused harmony export UrlSegment */
/* unused harmony export UrlSegmentGroup */
/* unused harmony export UrlSerializer */
/* unused harmony export UrlTree */
/* unused harmony export VERSION */
/* unused harmony export ɵROUTER_PROVIDERS */
/* unused harmony export ɵflatten */
/* unused harmony export ɵa */
/* unused harmony export ɵg */
/* unused harmony export ɵd */
/* unused harmony export ɵc */
/* unused harmony export ɵh */
/* unused harmony export ɵf */
/* unused harmony export ɵb */
/* unused harmony export ɵe */
/* unused harmony export ɵi */
/* unused harmony export ɵj */
var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++){arr2[i]=arr[i];}return arr2;}else{return Array.from(arr);}}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}/**
 * @license Angular v4.0.0-rc.1
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 *//**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 *//**
 * \@whatItDoes Represents an event triggered when a navigation starts.
 *
 * \@stable
 */var NavigationStart=function(){/**
     * @param {?} id
     * @param {?} url
     */function NavigationStart(id,url){_classCallCheck(this,NavigationStart);this.id=id;this.url=url;}/**
     * \@docsNotRequired
     * @return {?}
     */_createClass(NavigationStart,[{key:'toString',value:function toString(){return'NavigationStart(id: '+this.id+', url: \''+this.url+'\')';}}]);return NavigationStart;}();/**
 * \@whatItDoes Represents an event triggered when a navigation ends successfully.
 *
 * \@stable
 */var NavigationEnd=function(){/**
     * @param {?} id
     * @param {?} url
     * @param {?} urlAfterRedirects
     */function NavigationEnd(id,url,urlAfterRedirects){_classCallCheck(this,NavigationEnd);this.id=id;this.url=url;this.urlAfterRedirects=urlAfterRedirects;}/**
     * \@docsNotRequired
     * @return {?}
     */_createClass(NavigationEnd,[{key:'toString',value:function toString(){return'NavigationEnd(id: '+this.id+', url: \''+this.url+'\', urlAfterRedirects: \''+this.urlAfterRedirects+'\')';}}]);return NavigationEnd;}();/**
 * \@whatItDoes Represents an event triggered when a navigation is canceled.
 *
 * \@stable
 */var NavigationCancel=function(){/**
     * @param {?} id
     * @param {?} url
     * @param {?} reason
     */function NavigationCancel(id,url,reason){_classCallCheck(this,NavigationCancel);this.id=id;this.url=url;this.reason=reason;}/**
     * \@docsNotRequired
     * @return {?}
     */_createClass(NavigationCancel,[{key:'toString',value:function toString(){return'NavigationCancel(id: '+this.id+', url: \''+this.url+'\')';}}]);return NavigationCancel;}();/**
 * \@whatItDoes Represents an event triggered when a navigation fails due to an unexpected error.
 *
 * \@stable
 */var NavigationError=function(){/**
     * @param {?} id
     * @param {?} url
     * @param {?} error
     */function NavigationError(id,url,error){_classCallCheck(this,NavigationError);this.id=id;this.url=url;this.error=error;}/**
     * \@docsNotRequired
     * @return {?}
     */_createClass(NavigationError,[{key:'toString',value:function toString(){return'NavigationError(id: '+this.id+', url: \''+this.url+'\', error: '+this.error+')';}}]);return NavigationError;}();/**
 * \@whatItDoes Represents an event triggered when routes are recognized.
 *
 * \@stable
 */var RoutesRecognized=function(){/**
     * @param {?} id
     * @param {?} url
     * @param {?} urlAfterRedirects
     * @param {?} state
     */function RoutesRecognized(id,url,urlAfterRedirects,state){_classCallCheck(this,RoutesRecognized);this.id=id;this.url=url;this.urlAfterRedirects=urlAfterRedirects;this.state=state;}/**
     * \@docsNotRequired
     * @return {?}
     */_createClass(RoutesRecognized,[{key:'toString',value:function toString(){return'RoutesRecognized(id: '+this.id+', url: \''+this.url+'\', urlAfterRedirects: \''+this.urlAfterRedirects+'\', state: '+this.state+')';}}]);return RoutesRecognized;}();/**
 * \@whatItDoes Represents an event triggered before lazy loading a route config.
 *
 * \@experimental
 */var RouteConfigLoadStart=function(){/**
     * @param {?} route
     */function RouteConfigLoadStart(route){_classCallCheck(this,RouteConfigLoadStart);this.route=route;}/**
     * @return {?}
     */_createClass(RouteConfigLoadStart,[{key:'toString',value:function toString(){return'RouteConfigLoadStart(path: '+this.route.path+')';}}]);return RouteConfigLoadStart;}();/**
 * \@whatItDoes Represents an event triggered when a route has been lazy loaded.
 *
 * \@experimental
 */var RouteConfigLoadEnd=function(){/**
     * @param {?} route
     */function RouteConfigLoadEnd(route){_classCallCheck(this,RouteConfigLoadEnd);this.route=route;}/**
     * @return {?}
     */_createClass(RouteConfigLoadEnd,[{key:'toString',value:function toString(){return'RouteConfigLoadEnd(path: '+this.route.path+')';}}]);return RouteConfigLoadEnd;}();/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 *//**
 * @whatItDoes Name of the primary outlet.
 *
 * @stable
 */var/** @type {?} */PRIMARY_OUTLET='primary';var/** @type {?} */NAVIGATION_CANCELING_ERROR='ngNavigationCancelingError';/**
 * @param {?} message
 * @return {?}
 */function navigationCancelingError(message){var/** @type {?} */error=Error('NavigationCancelingError: '+message);error[NAVIGATION_CANCELING_ERROR]=true;return error;}/**
 * @param {?} error
 * @return {?}
 */function isNavigationCancelingError(error){return error[NAVIGATION_CANCELING_ERROR];}/**
 * @param {?} segments
 * @param {?} segmentGroup
 * @param {?} route
 * @return {?}
 */function defaultUrlMatcher(segments,segmentGroup,route){var/** @type {?} */path=route.path;var/** @type {?} */parts=path.split('/');var/** @type {?} */posParams={};var/** @type {?} */consumed=[];var/** @type {?} */currentIndex=0;for(var/** @type {?} */i=0;i<parts.length;++i){if(currentIndex>=segments.length)return null;var/** @type {?} */current=segments[currentIndex];var/** @type {?} */p=parts[i];var/** @type {?} */isPosParam=p.startsWith(':');if(!isPosParam&&p!==current.path)return null;if(isPosParam){posParams[p.substring(1)]=current;}consumed.push(current);currentIndex++;}if(route.pathMatch==='full'&&(segmentGroup.hasChildren()||currentIndex<segments.length)){return null;}else{return{consumed:consumed,posParams:posParams};}}/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */function shallowEqualArrays(a,b){if(a.length!==b.length)return false;for(var/** @type {?} */i=0;i<a.length;++i){if(!shallowEqual(a[i],b[i]))return false;}return true;}/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */function shallowEqual(a,b){var/** @type {?} */k1=Object.keys(a);var/** @type {?} */k2=Object.keys(b);if(k1.length!=k2.length){return false;}var/** @type {?} */key=void 0;for(var/** @type {?} */i=0;i<k1.length;i++){key=k1[i];if(a[key]!==b[key]){return false;}}return true;}/**
 * @param {?} a
 * @return {?}
 */function flatten(a){var/** @type {?} */target=[];for(var/** @type {?} */i=0;i<a.length;++i){for(var/** @type {?} */j=0;j<a[i].length;++j){target.push(a[i][j]);}}return target;}/**
 * @param {?} a
 * @return {?}
 */function last(a){return a.length>0?a[a.length-1]:null;}/**
 * @param {?} m1
 * @param {?} m2
 * @return {?}
 */function merge(m1,m2){var/** @type {?} */m={};for(var/** @type {?} */attr in m1){if(m1.hasOwnProperty(attr)){m[attr]=m1[attr];}}for(var/** @type {?} */_attr in m2){if(m2.hasOwnProperty(_attr)){m[_attr]=m2[_attr];}}return m;}/**
 * @param {?} map
 * @param {?} callback
 * @return {?}
 */function forEach(map,callback){for(var/** @type {?} */prop in map){if(map.hasOwnProperty(prop)){callback(map[prop],prop);}}}/**
 * @param {?} obj
 * @param {?} fn
 * @return {?}
 */function waitForMap(obj,fn){var/** @type {?} */waitFor=[];var/** @type {?} */res={};forEach(obj,function(a,k){if(k===PRIMARY_OUTLET){waitFor.push(__WEBPACK_IMPORTED_MODULE_9_rxjs_operator_map__["map"].call(fn(k,a),function(_){res[k]=_;return _;}));}});forEach(obj,function(a,k){if(k!==PRIMARY_OUTLET){waitFor.push(__WEBPACK_IMPORTED_MODULE_9_rxjs_operator_map__["map"].call(fn(k,a),function(_){res[k]=_;return _;}));}});if(waitFor.length>0){var/** @type {?} */concatted$=__WEBPACK_IMPORTED_MODULE_14_rxjs_operator_concatAll__["concatAll"].call(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_of__["of"].apply(undefined,waitFor));var/** @type {?} */last$=__WEBPACK_IMPORTED_MODULE_17_rxjs_operator_last__["last"].call(concatted$);return __WEBPACK_IMPORTED_MODULE_9_rxjs_operator_map__["map"].call(last$,function(){return res;});}return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_of__["of"])(res);}/**
 * @param {?} observables
 * @return {?}
 */function andObservables(observables){var/** @type {?} */merged$=__WEBPACK_IMPORTED_MODULE_18_rxjs_operator_mergeAll__["mergeAll"].call(observables);return __WEBPACK_IMPORTED_MODULE_7_rxjs_operator_every__["every"].call(merged$,function(result){return result===true;});}/**
 * @param {?} value
 * @return {?}
 */function wrapIntoObservable(value){if(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["l" /* ɵisObservable */])(value)){return value;}if(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["m" /* ɵisPromise */])(value)){return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_16_rxjs_observable_fromPromise__["fromPromise"])(value);}return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_of__["of"])(value);}/**
 * @docsNotRequired
 * @experimental
 */var/** @type {?} */ROUTES=new __WEBPACK_IMPORTED_MODULE_1__angular_core__["n" /* InjectionToken */]('ROUTES');var LoadedRouterConfig=/**
     * @param {?} routes
     * @param {?} injector
     * @param {?} factoryResolver
     * @param {?} injectorFactory
     */function LoadedRouterConfig(routes,injector,factoryResolver,injectorFactory){_classCallCheck(this,LoadedRouterConfig);this.routes=routes;this.injector=injector;this.factoryResolver=factoryResolver;this.injectorFactory=injectorFactory;};var RouterConfigLoader=function(){/**
     * @param {?} loader
     * @param {?} compiler
     * @param {?=} onLoadStartListener
     * @param {?=} onLoadEndListener
     */function RouterConfigLoader(loader,compiler,onLoadStartListener,onLoadEndListener){_classCallCheck(this,RouterConfigLoader);this.loader=loader;this.compiler=compiler;this.onLoadStartListener=onLoadStartListener;this.onLoadEndListener=onLoadEndListener;}/**
     * @param {?} parentInjector
     * @param {?} route
     * @return {?}
     */_createClass(RouterConfigLoader,[{key:'load',value:function load(parentInjector,route){var _this=this;if(this.onLoadStartListener){this.onLoadStartListener(route);}var/** @type {?} */moduleFactory$=this.loadModuleFactory(route.loadChildren);return __WEBPACK_IMPORTED_MODULE_9_rxjs_operator_map__["map"].call(moduleFactory$,function(factory){if(_this.onLoadEndListener){_this.onLoadEndListener(route);}var/** @type {?} */module=factory.create(parentInjector);var/** @type {?} */injectorFactory=function injectorFactory(parent){return factory.create(parent).injector;};return new LoadedRouterConfig(flatten(module.injector.get(ROUTES)),module.injector,module.componentFactoryResolver,injectorFactory);});}/**
     * @param {?} loadChildren
     * @return {?}
     */},{key:'loadModuleFactory',value:function loadModuleFactory(loadChildren){var _this2=this;if(typeof loadChildren==='string'){return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_16_rxjs_observable_fromPromise__["fromPromise"])(this.loader.load(loadChildren));}else{var/** @type {?} */offlineMode=this.compiler instanceof __WEBPACK_IMPORTED_MODULE_1__angular_core__["o" /* Compiler */];return __WEBPACK_IMPORTED_MODULE_10_rxjs_operator_mergeMap__["mergeMap"].call(wrapIntoObservable(loadChildren()),function(t){return offlineMode?__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_of__["of"])(/** @type {?} */t):__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_16_rxjs_observable_fromPromise__["fromPromise"])(_this2.compiler.compileModuleAsync(t));});}}}]);return RouterConfigLoader;}();/**
 * @return {?}
 */function createEmptyUrlTree(){return new UrlTree(new UrlSegmentGroup([],{}),{},null);}/**
 * @param {?} container
 * @param {?} containee
 * @param {?} exact
 * @return {?}
 */function containsTree(container,containee,exact){if(exact){return equalQueryParams(container.queryParams,containee.queryParams)&&equalSegmentGroups(container.root,containee.root);}return containsQueryParams(container.queryParams,containee.queryParams)&&containsSegmentGroup(container.root,containee.root);}/**
 * @param {?} container
 * @param {?} containee
 * @return {?}
 */function equalQueryParams(container,containee){return shallowEqual(container,containee);}/**
 * @param {?} container
 * @param {?} containee
 * @return {?}
 */function equalSegmentGroups(container,containee){if(!equalPath(container.segments,containee.segments))return false;if(container.numberOfChildren!==containee.numberOfChildren)return false;for(var/** @type {?} */c in containee.children){if(!container.children[c])return false;if(!equalSegmentGroups(container.children[c],containee.children[c]))return false;}return true;}/**
 * @param {?} container
 * @param {?} containee
 * @return {?}
 */function containsQueryParams(container,containee){return Object.keys(containee).length<=Object.keys(container).length&&Object.keys(containee).every(function(key){return containee[key]===container[key];});}/**
 * @param {?} container
 * @param {?} containee
 * @return {?}
 */function containsSegmentGroup(container,containee){return containsSegmentGroupHelper(container,containee,containee.segments);}/**
 * @param {?} container
 * @param {?} containee
 * @param {?} containeePaths
 * @return {?}
 */function containsSegmentGroupHelper(container,containee,containeePaths){if(container.segments.length>containeePaths.length){var/** @type {?} */current=container.segments.slice(0,containeePaths.length);if(!equalPath(current,containeePaths))return false;if(containee.hasChildren())return false;return true;}else if(container.segments.length===containeePaths.length){if(!equalPath(container.segments,containeePaths))return false;for(var/** @type {?} */c in containee.children){if(!container.children[c])return false;if(!containsSegmentGroup(container.children[c],containee.children[c]))return false;}return true;}else{var/** @type {?} */_current=containeePaths.slice(0,container.segments.length);var/** @type {?} */next=containeePaths.slice(container.segments.length);if(!equalPath(container.segments,_current))return false;if(!container.children[PRIMARY_OUTLET])return false;return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET],containee,next);}}/**
 * \@whatItDoes Represents the parsed URL.
 *
 * \@howToUse
 *
 * ```
 * \@Component({templateUrl:'template.html'})
 * class MyComponent {
 *   constructor(router: Router) {
 *     const tree: UrlTree =
 *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');
 *     const f = tree.fragment; // return 'fragment'
 *     const q = tree.queryParams; // returns {debug: 'true'}
 *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];
 *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'
 *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'
 *     g.children['support'].segments; // return 1 segment 'help'
 *   }
 * }
 * ```
 *
 * \@description
 *
 * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a
 * serialized tree.
 * UrlTree is a data structure that provides a lot of affordances in dealing with URLs
 *
 * \@stable
 */var UrlTree=function(){/**
     * \@internal
     * @param {?} root
     * @param {?} queryParams
     * @param {?} fragment
     */function UrlTree(root,queryParams,fragment){_classCallCheck(this,UrlTree);this.root=root;this.queryParams=queryParams;this.fragment=fragment;}/**
     * \@docsNotRequired
     * @return {?}
     */_createClass(UrlTree,[{key:'toString',value:function toString(){return new DefaultUrlSerializer().serialize(this);}}]);return UrlTree;}();/**
 * \@whatItDoes Represents the parsed URL segment group.
 *
 * See {\@link UrlTree} for more information.
 *
 * \@stable
 */var UrlSegmentGroup=function(){/**
     * @param {?} segments
     * @param {?} children
     */function UrlSegmentGroup(segments,children){var _this3=this;_classCallCheck(this,UrlSegmentGroup);this.segments=segments;this.children=children;/** The parent node in the url tree */this.parent=null;forEach(children,function(v,k){return v.parent=_this3;});}/**
     * Wether the segment has child segments
     * @return {?}
     */_createClass(UrlSegmentGroup,[{key:'hasChildren',value:function hasChildren(){return this.numberOfChildren>0;}/**
     * Number of child segments
     * @return {?}
     */},{key:'toString',/**
     * \@docsNotRequired
     * @return {?}
     */value:function toString(){return serializePaths(this);}},{key:'numberOfChildren',get:function get(){return Object.keys(this.children).length;}}]);return UrlSegmentGroup;}();/**
 * \@whatItDoes Represents a single URL segment.
 *
 * \@howToUse
 *
 * ```
 * \@Component({templateUrl:'template.html'})
 * class MyComponent {
 *   constructor(router: Router) {
 *     const tree: UrlTree = router.parseUrl('/team;id=33');
 *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];
 *     const s: UrlSegment[] = g.segments;
 *     s[0].path; // returns 'team'
 *     s[0].parameters; // returns {id: 33}
 *   }
 * }
 * ```
 *
 * \@description
 *
 * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix
 * parameters associated with the segment.
 *
 * \@stable
 */var UrlSegment=function(){/**
     * @param {?} path
     * @param {?} parameters
     */function UrlSegment(path,parameters){_classCallCheck(this,UrlSegment);this.path=path;this.parameters=parameters;}/**
     * \@docsNotRequired
     * @return {?}
     */_createClass(UrlSegment,[{key:'toString',value:function toString(){return serializePath(this);}}]);return UrlSegment;}();/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */function equalSegments(a,b){if(a.length!==b.length)return false;for(var/** @type {?} */i=0;i<a.length;++i){if(a[i].path!==b[i].path)return false;if(!shallowEqual(a[i].parameters,b[i].parameters))return false;}return true;}/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */function equalPath(a,b){if(a.length!==b.length)return false;for(var/** @type {?} */i=0;i<a.length;++i){if(a[i].path!==b[i].path)return false;}return true;}/**
 * @param {?} segment
 * @param {?} fn
 * @return {?}
 */function mapChildrenIntoArray(segment,fn){var/** @type {?} */res=[];forEach(segment.children,function(child,childOutlet){if(childOutlet===PRIMARY_OUTLET){res=res.concat(fn(child,childOutlet));}});forEach(segment.children,function(child,childOutlet){if(childOutlet!==PRIMARY_OUTLET){res=res.concat(fn(child,childOutlet));}});return res;}/**
 * \@whatItDoes Serializes and deserializes a URL string into a URL tree.
 *
 * \@description The url serialization strategy is customizable. You can
 * make all URLs case insensitive by providing a custom UrlSerializer.
 *
 * See {\@link DefaultUrlSerializer} for an example of a URL serializer.
 *
 * \@stable
 * @abstract
 */var UrlSerializer=function(){function UrlSerializer(){_classCallCheck(this,UrlSerializer);}_createClass(UrlSerializer,[{key:'parse',/**
     * Parse a url into a {\@link UrlTree}
     * @abstract
     * @param {?} url
     * @return {?}
     */value:function parse(url){}/**
     * Converts a {\@link UrlTree} into a url
     * @abstract
     * @param {?} tree
     * @return {?}
     */},{key:'serialize',value:function serialize(tree){}}]);return UrlSerializer;}();/**
 * \@whatItDoes A default implementation of the {\@link UrlSerializer}.
 *
 * \@description
 *
 * Example URLs:
 *
 * ```
 * /inbox/33(popup:compose)
 * /inbox/33;open=true/messages/44
 * ```
 *
 * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the
 * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to
 * specify route specific parameters.
 *
 * \@stable
 */var DefaultUrlSerializer=function(){function DefaultUrlSerializer(){_classCallCheck(this,DefaultUrlSerializer);}_createClass(DefaultUrlSerializer,[{key:'parse',/**
     * Parses a url into a {\@link UrlTree}
     * @param {?} url
     * @return {?}
     */value:function parse(url){var/** @type {?} */p=new UrlParser(url);return new UrlTree(p.parseRootSegment(),p.parseQueryParams(),p.parseFragment());}/**
     * Converts a {\@link UrlTree} into a url
     * @param {?} tree
     * @return {?}
     */},{key:'serialize',value:function serialize(tree){var/** @type {?} */segment='/'+serializeSegment(tree.root,true);var/** @type {?} */query=serializeQueryParams(tree.queryParams);var/** @type {?} */fragment=tree.fragment!==null&&tree.fragment!==undefined?'#'+encodeURI(tree.fragment):'';return''+segment+query+fragment;}}]);return DefaultUrlSerializer;}();/**
 * @param {?} segment
 * @return {?}
 */function serializePaths(segment){return segment.segments.map(function(p){return serializePath(p);}).join('/');}/**
 * @param {?} segment
 * @param {?} root
 * @return {?}
 */function serializeSegment(segment,root){if(segment.hasChildren()&&root){var/** @type {?} */primary=segment.children[PRIMARY_OUTLET]?serializeSegment(segment.children[PRIMARY_OUTLET],false):'';var/** @type {?} */children=[];forEach(segment.children,function(v,k){if(k!==PRIMARY_OUTLET){children.push(k+':'+serializeSegment(v,false));}});if(children.length>0){return primary+'('+children.join('//')+')';}else{return''+primary;}}else if(segment.hasChildren()&&!root){var/** @type {?} */_children=mapChildrenIntoArray(segment,function(v,k){if(k===PRIMARY_OUTLET){return[serializeSegment(segment.children[PRIMARY_OUTLET],false)];}else{return[k+':'+serializeSegment(v,false)];}});return serializePaths(segment)+'/('+_children.join('//')+')';}else{return serializePaths(segment);}}/**
 * @param {?} s
 * @return {?}
 */function encode(s){return encodeURIComponent(s);}/**
 * @param {?} s
 * @return {?}
 */function decode(s){return decodeURIComponent(s);}/**
 * @param {?} path
 * @return {?}
 */function serializePath(path){return''+encode(path.path)+serializeParams(path.parameters);}/**
 * @param {?} params
 * @return {?}
 */function serializeParams(params){return pairs(params).map(function(p){return';'+encode(p.first)+'='+encode(p.second);}).join('');}/**
 * @param {?} params
 * @return {?}
 */function serializeQueryParams(params){var/** @type {?} */strParams=Object.keys(params).map(function(name){var/** @type {?} */value=params[name];return Array.isArray(value)?value.map(function(v){return encode(name)+'='+encode(v);}).join('&'):encode(name)+'='+encode(value);});return strParams.length?'?'+strParams.join("&"):'';}var Pair=/**
     * @param {?} first
     * @param {?} second
     */function Pair(first,second){_classCallCheck(this,Pair);this.first=first;this.second=second;};/**
 * @param {?} obj
 * @return {?}
 */function pairs(obj){var/** @type {?} */res=[];for(var/** @type {?} */prop in obj){if(obj.hasOwnProperty(prop)){res.push(new Pair(prop,obj[prop]));}}return res;}var/** @type {?} */SEGMENT_RE=/^[^\/()?;=&#]+/;/**
 * @param {?} str
 * @return {?}
 */function matchSegments(str){SEGMENT_RE.lastIndex=0;var/** @type {?} */match=str.match(SEGMENT_RE);return match?match[0]:'';}var/** @type {?} */QUERY_PARAM_RE=/^[^=?&#]+/;/**
 * @param {?} str
 * @return {?}
 */function matchQueryParams(str){QUERY_PARAM_RE.lastIndex=0;var/** @type {?} */match=str.match(SEGMENT_RE);return match?match[0]:'';}var/** @type {?} */QUERY_PARAM_VALUE_RE=/^[^?&#]+/;/**
 * @param {?} str
 * @return {?}
 */function matchUrlQueryParamValue(str){QUERY_PARAM_VALUE_RE.lastIndex=0;var/** @type {?} */match=str.match(QUERY_PARAM_VALUE_RE);return match?match[0]:'';}var UrlParser=function(){/**
     * @param {?} url
     */function UrlParser(url){_classCallCheck(this,UrlParser);this.url=url;this.remaining=url;}/**
     * @param {?} str
     * @return {?}
     */_createClass(UrlParser,[{key:'peekStartsWith',value:function peekStartsWith(str){return this.remaining.startsWith(str);}/**
     * @param {?} str
     * @return {?}
     */},{key:'capture',value:function capture(str){if(!this.remaining.startsWith(str)){throw new Error('Expected "'+str+'".');}this.remaining=this.remaining.substring(str.length);}/**
     * @return {?}
     */},{key:'parseRootSegment',value:function parseRootSegment(){if(this.remaining.startsWith('/')){this.capture('/');}if(this.remaining===''||this.remaining.startsWith('?')||this.remaining.startsWith('#')){return new UrlSegmentGroup([],{});}return new UrlSegmentGroup([],this.parseChildren());}/**
     * @return {?}
     */},{key:'parseChildren',value:function parseChildren(){if(this.remaining.length==0){return{};}if(this.peekStartsWith('/')){this.capture('/');}var/** @type {?} */paths=[];if(!this.peekStartsWith('(')){paths.push(this.parseSegments());}while(this.peekStartsWith('/')&&!this.peekStartsWith('//')&&!this.peekStartsWith('/(')){this.capture('/');paths.push(this.parseSegments());}var/** @type {?} */children={};if(this.peekStartsWith('/(')){this.capture('/');children=this.parseParens(true);}var/** @type {?} */res={};if(this.peekStartsWith('(')){res=this.parseParens(false);}if(paths.length>0||Object.keys(children).length>0){res[PRIMARY_OUTLET]=new UrlSegmentGroup(paths,children);}return res;}/**
     * @return {?}
     */},{key:'parseSegments',value:function parseSegments(){var/** @type {?} */path=matchSegments(this.remaining);if(path===''&&this.peekStartsWith(';')){throw new Error('Empty path url segment cannot have parameters: \''+this.remaining+'\'.');}this.capture(path);var/** @type {?} */matrixParams={};if(this.peekStartsWith(';')){matrixParams=this.parseMatrixParams();}return new UrlSegment(decode(path),matrixParams);}/**
     * @return {?}
     */},{key:'parseQueryParams',value:function parseQueryParams(){var/** @type {?} */params={};if(this.peekStartsWith('?')){this.capture('?');this.parseQueryParam(params);while(this.remaining.length>0&&this.peekStartsWith('&')){this.capture('&');this.parseQueryParam(params);}}return params;}/**
     * @return {?}
     */},{key:'parseFragment',value:function parseFragment(){if(this.peekStartsWith('#')){return decodeURI(this.remaining.substring(1));}return null;}/**
     * @return {?}
     */},{key:'parseMatrixParams',value:function parseMatrixParams(){var/** @type {?} */params={};while(this.remaining.length>0&&this.peekStartsWith(';')){this.capture(';');this.parseParam(params);}return params;}/**
     * @param {?} params
     * @return {?}
     */},{key:'parseParam',value:function parseParam(params){var/** @type {?} */key=matchSegments(this.remaining);if(!key){return;}this.capture(key);var/** @type {?} */value='';if(this.peekStartsWith('=')){this.capture('=');var/** @type {?} */valueMatch=matchSegments(this.remaining);if(valueMatch){value=valueMatch;this.capture(value);}}params[decode(key)]=decode(value);}/**
     * @param {?} params
     * @return {?}
     */},{key:'parseQueryParam',value:function parseQueryParam(params){var/** @type {?} */key=matchQueryParams(this.remaining);if(!key){return;}this.capture(key);var/** @type {?} */value='';if(this.peekStartsWith('=')){this.capture('=');var/** @type {?} */valueMatch=matchUrlQueryParamValue(this.remaining);if(valueMatch){value=valueMatch;this.capture(value);}}var/** @type {?} */decodedKey=decode(key);var/** @type {?} */decodedVal=decode(value);if(params.hasOwnProperty(decodedKey)){// Append to existing values
var/** @type {?} */currentVal=params[decodedKey];if(!Array.isArray(currentVal)){currentVal=[currentVal];params[decodedKey]=currentVal;}currentVal.push(decodedVal);}else{// Create a new value
params[decodedKey]=decodedVal;}}/**
     * @param {?} allowPrimary
     * @return {?}
     */},{key:'parseParens',value:function parseParens(allowPrimary){var/** @type {?} */segments={};this.capture('(');while(!this.peekStartsWith(')')&&this.remaining.length>0){var/** @type {?} */path=matchSegments(this.remaining);var/** @type {?} */next=this.remaining[path.length];// if is is not one of these characters, then the segment was unescaped
// or the group was not closed
if(next!=='/'&&next!==')'&&next!==';'){throw new Error('Cannot parse url \''+this.url+'\'');}var/** @type {?} */outletName=void 0;if(path.indexOf(':')>-1){outletName=path.substr(0,path.indexOf(':'));this.capture(outletName);this.capture(':');}else if(allowPrimary){outletName=PRIMARY_OUTLET;}var/** @type {?} */children=this.parseChildren();segments[outletName]=Object.keys(children).length===1?children[PRIMARY_OUTLET]:new UrlSegmentGroup([],children);if(this.peekStartsWith('//')){this.capture('//');}}this.capture(')');return segments;}}]);return UrlParser;}();var NoMatch=/**
     * @param {?=} segmentGroup
     */function NoMatch(){var segmentGroup=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;_classCallCheck(this,NoMatch);this.segmentGroup=segmentGroup;};var AbsoluteRedirect=/**
     * @param {?} urlTree
     */function AbsoluteRedirect(urlTree){_classCallCheck(this,AbsoluteRedirect);this.urlTree=urlTree;};/**
 * @param {?} segmentGroup
 * @return {?}
 */function noMatch(segmentGroup){return new __WEBPACK_IMPORTED_MODULE_12_rxjs_Observable__["Observable"](function(obs){return obs.error(new NoMatch(segmentGroup));});}/**
 * @param {?} newTree
 * @return {?}
 */function absoluteRedirect(newTree){return new __WEBPACK_IMPORTED_MODULE_12_rxjs_Observable__["Observable"](function(obs){return obs.error(new AbsoluteRedirect(newTree));});}/**
 * @param {?} redirectTo
 * @return {?}
 */function namedOutletsRedirect(redirectTo){return new __WEBPACK_IMPORTED_MODULE_12_rxjs_Observable__["Observable"](function(obs){return obs.error(new Error('Only absolute redirects can have named outlets. redirectTo: \''+redirectTo+'\''));});}/**
 * @param {?} route
 * @return {?}
 */function canLoadFails(route){return new __WEBPACK_IMPORTED_MODULE_12_rxjs_Observable__["Observable"](function(obs){return obs.error(navigationCancelingError('Cannot load children because the guard of the route "path: \''+route.path+'\'" returned false'));});}/**
 * @param {?} injector
 * @param {?} configLoader
 * @param {?} urlSerializer
 * @param {?} urlTree
 * @param {?} config
 * @return {?}
 */function applyRedirects(injector,configLoader,urlSerializer,urlTree,config){return new ApplyRedirects(injector,configLoader,urlSerializer,urlTree,config).apply();}var ApplyRedirects=function(){/**
     * @param {?} injector
     * @param {?} configLoader
     * @param {?} urlSerializer
     * @param {?} urlTree
     * @param {?} config
     */function ApplyRedirects(injector,configLoader,urlSerializer,urlTree,config){_classCallCheck(this,ApplyRedirects);this.injector=injector;this.configLoader=configLoader;this.urlSerializer=urlSerializer;this.urlTree=urlTree;this.config=config;this.allowRedirects=true;}/**
     * @return {?}
     */_createClass(ApplyRedirects,[{key:'apply',value:function apply(){var _this4=this;var/** @type {?} */expanded$=this.expandSegmentGroup(this.injector,this.config,this.urlTree.root,PRIMARY_OUTLET);var/** @type {?} */urlTrees$=__WEBPACK_IMPORTED_MODULE_9_rxjs_operator_map__["map"].call(expanded$,function(rootSegmentGroup){return _this4.createUrlTree(rootSegmentGroup,_this4.urlTree.queryParams,_this4.urlTree.fragment);});return __WEBPACK_IMPORTED_MODULE_13_rxjs_operator_catch__["_catch"].call(urlTrees$,function(e){if(e instanceof AbsoluteRedirect){// after an absolute redirect we do not apply any more redirects!
_this4.allowRedirects=false;// we need to run matching, so we can fetch all lazy-loaded modules
return _this4.match(e.urlTree);}if(e instanceof NoMatch){throw _this4.noMatchError(e);}throw e;});}/**
     * @param {?} tree
     * @return {?}
     */},{key:'match',value:function match(tree){var _this5=this;var/** @type {?} */expanded$=this.expandSegmentGroup(this.injector,this.config,tree.root,PRIMARY_OUTLET);var/** @type {?} */mapped$=__WEBPACK_IMPORTED_MODULE_9_rxjs_operator_map__["map"].call(expanded$,function(rootSegmentGroup){return _this5.createUrlTree(rootSegmentGroup,tree.queryParams,tree.fragment);});return __WEBPACK_IMPORTED_MODULE_13_rxjs_operator_catch__["_catch"].call(mapped$,function(e){if(e instanceof NoMatch){throw _this5.noMatchError(e);}throw e;});}/**
     * @param {?} e
     * @return {?}
     */},{key:'noMatchError',value:function noMatchError(e){return new Error('Cannot match any routes. URL Segment: \''+e.segmentGroup+'\'');}/**
     * @param {?} rootCandidate
     * @param {?} queryParams
     * @param {?} fragment
     * @return {?}
     */},{key:'createUrlTree',value:function createUrlTree(rootCandidate,queryParams,fragment){var/** @type {?} */root=rootCandidate.segments.length>0?new UrlSegmentGroup([],_defineProperty({},PRIMARY_OUTLET,rootCandidate)):rootCandidate;return new UrlTree(root,queryParams,fragment);}/**
     * @param {?} injector
     * @param {?} routes
     * @param {?} segmentGroup
     * @param {?} outlet
     * @return {?}
     */},{key:'expandSegmentGroup',value:function expandSegmentGroup(injector,routes,segmentGroup,outlet){if(segmentGroup.segments.length===0&&segmentGroup.hasChildren()){return __WEBPACK_IMPORTED_MODULE_9_rxjs_operator_map__["map"].call(this.expandChildren(injector,routes,segmentGroup),function(children){return new UrlSegmentGroup([],children);});}return this.expandSegment(injector,segmentGroup,routes,segmentGroup.segments,outlet,true);}/**
     * @param {?} injector
     * @param {?} routes
     * @param {?} segmentGroup
     * @return {?}
     */},{key:'expandChildren',value:function expandChildren(injector,routes,segmentGroup){var _this6=this;return waitForMap(segmentGroup.children,function(childOutlet,child){return _this6.expandSegmentGroup(injector,routes,child,childOutlet);});}/**
     * @param {?} injector
     * @param {?} segmentGroup
     * @param {?} routes
     * @param {?} segments
     * @param {?} outlet
     * @param {?} allowRedirects
     * @return {?}
     */},{key:'expandSegment',value:function expandSegment(injector,segmentGroup,routes,segments,outlet,allowRedirects){var _this7=this;var/** @type {?} */routes$=__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_of__["of"].apply(undefined,_toConsumableArray(routes));var/** @type {?} */processedRoutes$=__WEBPACK_IMPORTED_MODULE_9_rxjs_operator_map__["map"].call(routes$,function(r){var/** @type {?} */expanded$=_this7.expandSegmentAgainstRoute(injector,segmentGroup,routes,r,segments,outlet,allowRedirects);return __WEBPACK_IMPORTED_MODULE_13_rxjs_operator_catch__["_catch"].call(expanded$,function(e){if(e instanceof NoMatch){return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_of__["of"])(null);}throw e;});});var/** @type {?} */concattedProcessedRoutes$=__WEBPACK_IMPORTED_MODULE_14_rxjs_operator_concatAll__["concatAll"].call(processedRoutes$);var/** @type {?} */first$=__WEBPACK_IMPORTED_MODULE_8_rxjs_operator_first__["first"].call(concattedProcessedRoutes$,function(s){return!!s;});return __WEBPACK_IMPORTED_MODULE_13_rxjs_operator_catch__["_catch"].call(first$,function(e,_){if(e instanceof __WEBPACK_IMPORTED_MODULE_15_rxjs_util_EmptyError__["EmptyError"]){if(_this7.noLeftoversInUrl(segmentGroup,segments,outlet)){return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_of__["of"])(new UrlSegmentGroup([],{}));}throw new NoMatch(segmentGroup);}throw e;});}/**
     * @param {?} segmentGroup
     * @param {?} segments
     * @param {?} outlet
     * @return {?}
     */},{key:'noLeftoversInUrl',value:function noLeftoversInUrl(segmentGroup,segments,outlet){return segments.length===0&&!segmentGroup.children[outlet];}/**
     * @param {?} injector
     * @param {?} segmentGroup
     * @param {?} routes
     * @param {?} route
     * @param {?} paths
     * @param {?} outlet
     * @param {?} allowRedirects
     * @return {?}
     */},{key:'expandSegmentAgainstRoute',value:function expandSegmentAgainstRoute(injector,segmentGroup,routes,route,paths,outlet,allowRedirects){if(getOutlet$1(route)!==outlet){return noMatch(segmentGroup);}if(route.redirectTo!==undefined&&!(allowRedirects&&this.allowRedirects)){return noMatch(segmentGroup);}if(route.redirectTo===undefined){return this.matchSegmentAgainstRoute(injector,segmentGroup,route,paths);}return this.expandSegmentAgainstRouteUsingRedirect(injector,segmentGroup,routes,route,paths,outlet);}/**
     * @param {?} injector
     * @param {?} segmentGroup
     * @param {?} routes
     * @param {?} route
     * @param {?} segments
     * @param {?} outlet
     * @return {?}
     */},{key:'expandSegmentAgainstRouteUsingRedirect',value:function expandSegmentAgainstRouteUsingRedirect(injector,segmentGroup,routes,route,segments,outlet){if(route.path==='**'){return this.expandWildCardWithParamsAgainstRouteUsingRedirect(injector,routes,route,outlet);}return this.expandRegularSegmentAgainstRouteUsingRedirect(injector,segmentGroup,routes,route,segments,outlet);}/**
     * @param {?} injector
     * @param {?} routes
     * @param {?} route
     * @param {?} outlet
     * @return {?}
     */},{key:'expandWildCardWithParamsAgainstRouteUsingRedirect',value:function expandWildCardWithParamsAgainstRouteUsingRedirect(injector,routes,route,outlet){var _this8=this;var/** @type {?} */newTree=this.applyRedirectCommands([],route.redirectTo,{});if(route.redirectTo.startsWith('/')){return absoluteRedirect(newTree);}return __WEBPACK_IMPORTED_MODULE_10_rxjs_operator_mergeMap__["mergeMap"].call(this.lineralizeSegments(route,newTree),function(newSegments){var/** @type {?} */group=new UrlSegmentGroup(newSegments,{});return _this8.expandSegment(injector,group,routes,newSegments,outlet,false);});}/**
     * @param {?} injector
     * @param {?} segmentGroup
     * @param {?} routes
     * @param {?} route
     * @param {?} segments
     * @param {?} outlet
     * @return {?}
     */},{key:'expandRegularSegmentAgainstRouteUsingRedirect',value:function expandRegularSegmentAgainstRouteUsingRedirect(injector,segmentGroup,routes,route,segments,outlet){var _this9=this;var _match=match(segmentGroup,route,segments),matched=_match.matched,consumedSegments=_match.consumedSegments,lastChild=_match.lastChild,positionalParamSegments=_match.positionalParamSegments;if(!matched)return noMatch(segmentGroup);var/** @type {?} */newTree=this.applyRedirectCommands(consumedSegments,route.redirectTo,/** @type {?} */positionalParamSegments);if(route.redirectTo.startsWith('/')){return absoluteRedirect(newTree);}return __WEBPACK_IMPORTED_MODULE_10_rxjs_operator_mergeMap__["mergeMap"].call(this.lineralizeSegments(route,newTree),function(newSegments){return _this9.expandSegment(injector,segmentGroup,routes,newSegments.concat(segments.slice(lastChild)),outlet,false);});}/**
     * @param {?} injector
     * @param {?} rawSegmentGroup
     * @param {?} route
     * @param {?} segments
     * @return {?}
     */},{key:'matchSegmentAgainstRoute',value:function matchSegmentAgainstRoute(injector,rawSegmentGroup,route,segments){var _this10=this;if(route.path==='**'){if(route.loadChildren){return __WEBPACK_IMPORTED_MODULE_9_rxjs_operator_map__["map"].call(this.configLoader.load(injector,route),function(cfg){route._loadedConfig=cfg;return new UrlSegmentGroup(segments,{});});}return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_of__["of"])(new UrlSegmentGroup(segments,{}));}var _match2=match(rawSegmentGroup,route,segments),matched=_match2.matched,consumedSegments=_match2.consumedSegments,lastChild=_match2.lastChild;if(!matched)return noMatch(rawSegmentGroup);var/** @type {?} */rawSlicedSegments=segments.slice(lastChild);var/** @type {?} */childConfig$=this.getChildConfig(injector,route);return __WEBPACK_IMPORTED_MODULE_10_rxjs_operator_mergeMap__["mergeMap"].call(childConfig$,function(routerConfig){var/** @type {?} */childInjector=routerConfig.injector;var/** @type {?} */childConfig=routerConfig.routes;var _split=split(rawSegmentGroup,consumedSegments,rawSlicedSegments,childConfig),segmentGroup=_split.segmentGroup,slicedSegments=_split.slicedSegments;if(slicedSegments.length===0&&segmentGroup.hasChildren()){var/** @type {?} */_expanded$=_this10.expandChildren(childInjector,childConfig,segmentGroup);return __WEBPACK_IMPORTED_MODULE_9_rxjs_operator_map__["map"].call(_expanded$,function(children){return new UrlSegmentGroup(consumedSegments,children);});}if(childConfig.length===0&&slicedSegments.length===0){return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_of__["of"])(new UrlSegmentGroup(consumedSegments,{}));}var/** @type {?} */expanded$=_this10.expandSegment(childInjector,segmentGroup,childConfig,slicedSegments,PRIMARY_OUTLET,true);return __WEBPACK_IMPORTED_MODULE_9_rxjs_operator_map__["map"].call(expanded$,function(cs){return new UrlSegmentGroup(consumedSegments.concat(cs.segments),cs.children);});});}/**
     * @param {?} injector
     * @param {?} route
     * @return {?}
     */},{key:'getChildConfig',value:function getChildConfig(injector,route){var _this11=this;if(route.children){return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_of__["of"])(new LoadedRouterConfig(route.children,injector,null,null));}if(route.loadChildren){return __WEBPACK_IMPORTED_MODULE_10_rxjs_operator_mergeMap__["mergeMap"].call(runGuards(injector,route),function(shouldLoad){if(shouldLoad){return route._loadedConfig?__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_of__["of"])(route._loadedConfig):__WEBPACK_IMPORTED_MODULE_9_rxjs_operator_map__["map"].call(_this11.configLoader.load(injector,route),function(cfg){route._loadedConfig=cfg;return cfg;});}return canLoadFails(route);});}return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_of__["of"])(new LoadedRouterConfig([],injector,null,null));}/**
     * @param {?} route
     * @param {?} urlTree
     * @return {?}
     */},{key:'lineralizeSegments',value:function lineralizeSegments(route,urlTree){var/** @type {?} */res=[];var/** @type {?} */c=urlTree.root;while(true){res=res.concat(c.segments);if(c.numberOfChildren===0){return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_of__["of"])(res);}if(c.numberOfChildren>1||!c.children[PRIMARY_OUTLET]){return namedOutletsRedirect(route.redirectTo);}c=c.children[PRIMARY_OUTLET];}}/**
     * @param {?} segments
     * @param {?} redirectTo
     * @param {?} posParams
     * @return {?}
     */},{key:'applyRedirectCommands',value:function applyRedirectCommands(segments,redirectTo,posParams){return this.applyRedirectCreatreUrlTree(redirectTo,this.urlSerializer.parse(redirectTo),segments,posParams);}/**
     * @param {?} redirectTo
     * @param {?} urlTree
     * @param {?} segments
     * @param {?} posParams
     * @return {?}
     */},{key:'applyRedirectCreatreUrlTree',value:function applyRedirectCreatreUrlTree(redirectTo,urlTree,segments,posParams){var/** @type {?} */newRoot=this.createSegmentGroup(redirectTo,urlTree.root,segments,posParams);return new UrlTree(newRoot,this.createQueryParams(urlTree.queryParams,this.urlTree.queryParams),urlTree.fragment);}/**
     * @param {?} redirectToParams
     * @param {?} actualParams
     * @return {?}
     */},{key:'createQueryParams',value:function createQueryParams(redirectToParams,actualParams){var/** @type {?} */res={};forEach(redirectToParams,function(v,k){res[k]=v.startsWith(':')?actualParams[v.substring(1)]:v;});return res;}/**
     * @param {?} redirectTo
     * @param {?} group
     * @param {?} segments
     * @param {?} posParams
     * @return {?}
     */},{key:'createSegmentGroup',value:function createSegmentGroup(redirectTo,group,segments,posParams){var _this12=this;var/** @type {?} */updatedSegments=this.createSegments(redirectTo,group.segments,segments,posParams);var/** @type {?} */children={};forEach(group.children,function(child,name){children[name]=_this12.createSegmentGroup(redirectTo,child,segments,posParams);});return new UrlSegmentGroup(updatedSegments,children);}/**
     * @param {?} redirectTo
     * @param {?} redirectToSegments
     * @param {?} actualSegments
     * @param {?} posParams
     * @return {?}
     */},{key:'createSegments',value:function createSegments(redirectTo,redirectToSegments,actualSegments,posParams){var _this13=this;return redirectToSegments.map(function(s){return s.path.startsWith(':')?_this13.findPosParam(redirectTo,s,posParams):_this13.findOrReturn(s,actualSegments);});}/**
     * @param {?} redirectTo
     * @param {?} redirectToUrlSegment
     * @param {?} posParams
     * @return {?}
     */},{key:'findPosParam',value:function findPosParam(redirectTo,redirectToUrlSegment,posParams){var/** @type {?} */pos=posParams[redirectToUrlSegment.path.substring(1)];if(!pos)throw new Error('Cannot redirect to \''+redirectTo+'\'. Cannot find \''+redirectToUrlSegment.path+'\'.');return pos;}/**
     * @param {?} redirectToUrlSegment
     * @param {?} actualSegments
     * @return {?}
     */},{key:'findOrReturn',value:function findOrReturn(redirectToUrlSegment,actualSegments){var/** @type {?} */idx=0;var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=actualSegments[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var s=_step.value;if(s.path===redirectToUrlSegment.path){actualSegments.splice(idx);return s;}idx++;}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return();}}finally{if(_didIteratorError){throw _iteratorError;}}}return redirectToUrlSegment;}}]);return ApplyRedirects;}();/**
 * @param {?} injector
 * @param {?} route
 * @return {?}
 */function runGuards(injector,route){var/** @type {?} */canLoad=route.canLoad;if(!canLoad||canLoad.length===0)return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_of__["of"])(true);var/** @type {?} */obs=__WEBPACK_IMPORTED_MODULE_9_rxjs_operator_map__["map"].call(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_rxjs_observable_from__["from"])(canLoad),function(c){var/** @type {?} */guard=injector.get(c);return wrapIntoObservable(guard.canLoad?guard.canLoad(route):guard(route));});return andObservables(obs);}/**
 * @param {?} segmentGroup
 * @param {?} route
 * @param {?} segments
 * @return {?}
 */function match(segmentGroup,route,segments){var/** @type {?} */noMatch={matched:false,consumedSegments:/** @type {?} */[],lastChild:0,positionalParamSegments:{}};if(route.path===''){if(route.pathMatch==='full'&&(segmentGroup.hasChildren()||segments.length>0)){return{matched:false,consumedSegments:[],lastChild:0,positionalParamSegments:{}};}return{matched:true,consumedSegments:[],lastChild:0,positionalParamSegments:{}};}var/** @type {?} */matcher=route.matcher||defaultUrlMatcher;var/** @type {?} */res=matcher(segments,segmentGroup,route);if(!res)return noMatch;return{matched:true,consumedSegments:res.consumed,lastChild:res.consumed.length,positionalParamSegments:res.posParams};}/**
 * @param {?} segmentGroup
 * @param {?} consumedSegments
 * @param {?} slicedSegments
 * @param {?} config
 * @return {?}
 */function split(segmentGroup,consumedSegments,slicedSegments,config){if(slicedSegments.length>0&&containsEmptyPathRedirectsWithNamedOutlets(segmentGroup,slicedSegments,config)){var/** @type {?} */s=new UrlSegmentGroup(consumedSegments,createChildrenForEmptySegments(config,new UrlSegmentGroup(slicedSegments,segmentGroup.children)));return{segmentGroup:mergeTrivialChildren(s),slicedSegments:[]};}if(slicedSegments.length===0&&containsEmptyPathRedirects(segmentGroup,slicedSegments,config)){var/** @type {?} */_s=new UrlSegmentGroup(segmentGroup.segments,addEmptySegmentsToChildrenIfNeeded(segmentGroup,slicedSegments,config,segmentGroup.children));return{segmentGroup:mergeTrivialChildren(_s),slicedSegments:slicedSegments};}return{segmentGroup:segmentGroup,slicedSegments:slicedSegments};}/**
 * @param {?} s
 * @return {?}
 */function mergeTrivialChildren(s){if(s.numberOfChildren===1&&s.children[PRIMARY_OUTLET]){var/** @type {?} */c=s.children[PRIMARY_OUTLET];return new UrlSegmentGroup(s.segments.concat(c.segments),c.children);}return s;}/**
 * @param {?} segmentGroup
 * @param {?} slicedSegments
 * @param {?} routes
 * @param {?} children
 * @return {?}
 */function addEmptySegmentsToChildrenIfNeeded(segmentGroup,slicedSegments,routes,children){var/** @type {?} */res={};var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=routes[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=true){var r=_step2.value;if(emptyPathRedirect(segmentGroup,slicedSegments,r)&&!children[getOutlet$1(r)]){res[getOutlet$1(r)]=new UrlSegmentGroup([],{});}}}catch(err){_didIteratorError2=true;_iteratorError2=err;}finally{try{if(!_iteratorNormalCompletion2&&_iterator2.return){_iterator2.return();}}finally{if(_didIteratorError2){throw _iteratorError2;}}}return merge(children,res);}/**
 * @param {?} routes
 * @param {?} primarySegmentGroup
 * @return {?}
 */function createChildrenForEmptySegments(routes,primarySegmentGroup){var/** @type {?} */res={};res[PRIMARY_OUTLET]=primarySegmentGroup;var _iteratorNormalCompletion3=true;var _didIteratorError3=false;var _iteratorError3=undefined;try{for(var _iterator3=routes[Symbol.iterator](),_step3;!(_iteratorNormalCompletion3=(_step3=_iterator3.next()).done);_iteratorNormalCompletion3=true){var r=_step3.value;if(r.path===''&&getOutlet$1(r)!==PRIMARY_OUTLET){res[getOutlet$1(r)]=new UrlSegmentGroup([],{});}}}catch(err){_didIteratorError3=true;_iteratorError3=err;}finally{try{if(!_iteratorNormalCompletion3&&_iterator3.return){_iterator3.return();}}finally{if(_didIteratorError3){throw _iteratorError3;}}}return res;}/**
 * @param {?} segmentGroup
 * @param {?} slicedSegments
 * @param {?} routes
 * @return {?}
 */function containsEmptyPathRedirectsWithNamedOutlets(segmentGroup,slicedSegments,routes){return routes.filter(function(r){return emptyPathRedirect(segmentGroup,slicedSegments,r)&&getOutlet$1(r)!==PRIMARY_OUTLET;}).length>0;}/**
 * @param {?} segmentGroup
 * @param {?} slicedSegments
 * @param {?} routes
 * @return {?}
 */function containsEmptyPathRedirects(segmentGroup,slicedSegments,routes){return routes.filter(function(r){return emptyPathRedirect(segmentGroup,slicedSegments,r);}).length>0;}/**
 * @param {?} segmentGroup
 * @param {?} slicedSegments
 * @param {?} r
 * @return {?}
 */function emptyPathRedirect(segmentGroup,slicedSegments,r){if((segmentGroup.hasChildren()||slicedSegments.length>0)&&r.pathMatch==='full'){return false;}return r.path===''&&r.redirectTo!==undefined;}/**
 * @param {?} route
 * @return {?}
 */function getOutlet$1(route){return route.outlet?route.outlet:PRIMARY_OUTLET;}/**
 * @param {?} config
 * @param {?=} parentPath
 * @return {?}
 */function validateConfig(config){var parentPath=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';// forEach doesn't iterate undefined values
for(var/** @type {?} */i=0;i<config.length;i++){var/** @type {?} */route=config[i];var/** @type {?} */fullPath=getFullPath(parentPath,route);validateNode(route,fullPath);}}/**
 * @param {?} route
 * @param {?} fullPath
 * @return {?}
 */function validateNode(route,fullPath){if(!route){throw new Error('\n      Invalid configuration of route \''+fullPath+'\': Encountered undefined route.\n      The reason might be an extra comma.\n\n      Example:\n      const routes: Routes = [\n        { path: \'\', redirectTo: \'/dashboard\', pathMatch: \'full\' },\n        { path: \'dashboard\',  component: DashboardComponent },, << two commas\n        { path: \'detail/:id\', component: HeroDetailComponent }\n      ];\n    ');}if(Array.isArray(route)){throw new Error('Invalid configuration of route \''+fullPath+'\': Array cannot be specified');}if(!route.component&&route.outlet&&route.outlet!==PRIMARY_OUTLET){throw new Error('Invalid configuration of route \''+fullPath+'\': a componentless route cannot have a named outlet set');}if(route.redirectTo&&route.children){throw new Error('Invalid configuration of route \''+fullPath+'\': redirectTo and children cannot be used together');}if(route.redirectTo&&route.loadChildren){throw new Error('Invalid configuration of route \''+fullPath+'\': redirectTo and loadChildren cannot be used together');}if(route.children&&route.loadChildren){throw new Error('Invalid configuration of route \''+fullPath+'\': children and loadChildren cannot be used together');}if(route.redirectTo&&route.component){throw new Error('Invalid configuration of route \''+fullPath+'\': redirectTo and component cannot be used together');}if(route.path&&route.matcher){throw new Error('Invalid configuration of route \''+fullPath+'\': path and matcher cannot be used together');}if(route.redirectTo===void 0&&!route.component&&!route.children&&!route.loadChildren){throw new Error('Invalid configuration of route \''+fullPath+'\'. One of the following must be provided: component, redirectTo, children or loadChildren');}if(route.path===void 0&&route.matcher===void 0){throw new Error('Invalid configuration of route \''+fullPath+'\': routes must have either a path or a matcher specified');}if(typeof route.path==='string'&&route.path.charAt(0)==='/'){throw new Error('Invalid configuration of route \''+fullPath+'\': path cannot start with a slash');}if(route.path===''&&route.redirectTo!==void 0&&route.pathMatch===void 0){var/** @type {?} */exp='The default value of \'pathMatch\' is \'prefix\', but often the intent is to use \'full\'.';throw new Error('Invalid configuration of route \'{path: "'+fullPath+'", redirectTo: "'+route.redirectTo+'"}\': please provide \'pathMatch\'. '+exp);}if(route.pathMatch!==void 0&&route.pathMatch!=='full'&&route.pathMatch!=='prefix'){throw new Error('Invalid configuration of route \''+fullPath+'\': pathMatch can only be set to \'prefix\' or \'full\'');}if(route.children){validateConfig(route.children,fullPath);}}/**
 * @param {?} parentPath
 * @param {?} currentRoute
 * @return {?}
 */function getFullPath(parentPath,currentRoute){if(!currentRoute){return parentPath;}if(!parentPath&&!currentRoute.path){return'';}else if(parentPath&&!currentRoute.path){return parentPath+'/';}else if(!parentPath&&currentRoute.path){return currentRoute.path;}else{return parentPath+'/'+currentRoute.path;}}/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */var Tree=function(){/**
     * @param {?} root
     */function Tree(root){_classCallCheck(this,Tree);this._root=root;}/**
     * @return {?}
     */_createClass(Tree,[{key:'parent',/**
     * \@internal
     * @param {?} t
     * @return {?}
     */value:function parent(t){var/** @type {?} */p=this.pathFromRoot(t);return p.length>1?p[p.length-2]:null;}/**
     * \@internal
     * @param {?} t
     * @return {?}
     */},{key:'children',value:function children(t){var/** @type {?} */n=findNode(t,this._root);return n?n.children.map(function(t){return t.value;}):[];}/**
     * \@internal
     * @param {?} t
     * @return {?}
     */},{key:'firstChild',value:function firstChild(t){var/** @type {?} */n=findNode(t,this._root);return n&&n.children.length>0?n.children[0].value:null;}/**
     * \@internal
     * @param {?} t
     * @return {?}
     */},{key:'siblings',value:function siblings(t){var/** @type {?} */p=findPath(t,this._root,[]);if(p.length<2)return[];var/** @type {?} */c=p[p.length-2].children.map(function(c){return c.value;});return c.filter(function(cc){return cc!==t;});}/**
     * \@internal
     * @param {?} t
     * @return {?}
     */},{key:'pathFromRoot',value:function pathFromRoot(t){return findPath(t,this._root,[]).map(function(s){return s.value;});}},{key:'root',get:function get(){return this._root.value;}}]);return Tree;}();/**
 * @param {?} expected
 * @param {?} c
 * @return {?}
 */function findNode(expected,c){if(expected===c.value)return c;var _iteratorNormalCompletion4=true;var _didIteratorError4=false;var _iteratorError4=undefined;try{for(var _iterator4=c.children[Symbol.iterator](),_step4;!(_iteratorNormalCompletion4=(_step4=_iterator4.next()).done);_iteratorNormalCompletion4=true){var cc=_step4.value;var/** @type {?} */r=findNode(expected,cc);if(r)return r;}}catch(err){_didIteratorError4=true;_iteratorError4=err;}finally{try{if(!_iteratorNormalCompletion4&&_iterator4.return){_iterator4.return();}}finally{if(_didIteratorError4){throw _iteratorError4;}}}return null;}/**
 * @param {?} expected
 * @param {?} c
 * @param {?} collected
 * @return {?}
 */function findPath(expected,c,collected){collected.push(c);if(expected===c.value)return collected;var _iteratorNormalCompletion5=true;var _didIteratorError5=false;var _iteratorError5=undefined;try{for(var _iterator5=c.children[Symbol.iterator](),_step5;!(_iteratorNormalCompletion5=(_step5=_iterator5.next()).done);_iteratorNormalCompletion5=true){var cc=_step5.value;var/** @type {?} */cloned=collected.slice(0);var/** @type {?} */r=findPath(expected,cc,cloned);if(r.length>0)return r;}}catch(err){_didIteratorError5=true;_iteratorError5=err;}finally{try{if(!_iteratorNormalCompletion5&&_iterator5.return){_iterator5.return();}}finally{if(_didIteratorError5){throw _iteratorError5;}}}return[];}var TreeNode=function(){/**
     * @param {?} value
     * @param {?} children
     */function TreeNode(value,children){_classCallCheck(this,TreeNode);this.value=value;this.children=children;}/**
     * @return {?}
     */_createClass(TreeNode,[{key:'toString',value:function toString(){return'TreeNode('+this.value+')';}}]);return TreeNode;}();/**
 * \@whatItDoes Represents the state of the router.
 *
 * \@howToUse
 *
 * ```
 * \@Component({templateUrl:'template.html'})
 * class MyComponent {
 *   constructor(router: Router) {
 *     const state: RouterState = router.routerState;
 *     const root: ActivatedRoute = state.root;
 *     const child = root.firstChild;
 *     const id: Observable<string> = child.params.map(p => p.id);
 *     //...
 *   }
 * }
 * ```
 *
 * \@description
 * RouterState is a tree of activated routes. Every node in this tree knows about the "consumed" URL
 * segments,
 * the extracted parameters, and the resolved data.
 *
 * See {\@link ActivatedRoute} for more information.
 *
 * \@stable
 */var RouterState=function(_Tree){_inherits(RouterState,_Tree);/**
     * \@internal
     * @param {?} root
     * @param {?} snapshot
     */function RouterState(root,snapshot){_classCallCheck(this,RouterState);var _this14=_possibleConstructorReturn(this,(RouterState.__proto__||Object.getPrototypeOf(RouterState)).call(this,root));_this14.snapshot=snapshot;setRouterStateSnapshot(_this14,root);return _this14;}/**
     * @return {?}
     */_createClass(RouterState,[{key:'toString',value:function toString(){return this.snapshot.toString();}}]);return RouterState;}(Tree);/**
 * @param {?} urlTree
 * @param {?} rootComponent
 * @return {?}
 */function createEmptyState(urlTree,rootComponent){var/** @type {?} */snapshot=createEmptyStateSnapshot(urlTree,rootComponent);var/** @type {?} */emptyUrl=new __WEBPACK_IMPORTED_MODULE_2_rxjs_BehaviorSubject__["BehaviorSubject"]([new UrlSegment('',{})]);var/** @type {?} */emptyParams=new __WEBPACK_IMPORTED_MODULE_2_rxjs_BehaviorSubject__["BehaviorSubject"]({});var/** @type {?} */emptyData=new __WEBPACK_IMPORTED_MODULE_2_rxjs_BehaviorSubject__["BehaviorSubject"]({});var/** @type {?} */emptyQueryParams=new __WEBPACK_IMPORTED_MODULE_2_rxjs_BehaviorSubject__["BehaviorSubject"]({});var/** @type {?} */fragment=new __WEBPACK_IMPORTED_MODULE_2_rxjs_BehaviorSubject__["BehaviorSubject"]('');var/** @type {?} */activated=new ActivatedRoute(emptyUrl,emptyParams,emptyQueryParams,fragment,emptyData,PRIMARY_OUTLET,rootComponent,snapshot.root);activated.snapshot=snapshot.root;return new RouterState(new TreeNode(activated,[]),snapshot);}/**
 * @param {?} urlTree
 * @param {?} rootComponent
 * @return {?}
 */function createEmptyStateSnapshot(urlTree,rootComponent){var/** @type {?} */emptyParams={};var/** @type {?} */emptyData={};var/** @type {?} */emptyQueryParams={};var/** @type {?} */fragment='';var/** @type {?} */activated=new ActivatedRouteSnapshot([],emptyParams,emptyQueryParams,fragment,emptyData,PRIMARY_OUTLET,rootComponent,null,urlTree.root,-1,{});return new RouterStateSnapshot('',new TreeNode(activated,[]));}/**
 * \@whatItDoes Contains the information about a route associated with a component loaded in an
 * outlet.
 * An `ActivatedRoute` can also be used to traverse the router state tree.
 *
 * \@howToUse
 *
 * ```
 * \@Component({...})
 * class MyComponent {
 *   constructor(route: ActivatedRoute) {
 *     const id: Observable<string> = route.params.map(p => p.id);
 *     const url: Observable<string> = route.url.map(segments => segments.join(''));
 *     // route.data includes both `data` and `resolve`
 *     const user = route.data.map(d => d.user);
 *   }
 * }
 * ```
 *
 * \@stable
 */var ActivatedRoute=function(){/**
     * \@internal
     * @param {?} url
     * @param {?} params
     * @param {?} queryParams
     * @param {?} fragment
     * @param {?} data
     * @param {?} outlet
     * @param {?} component
     * @param {?} futureSnapshot
     */function ActivatedRoute(url,params,queryParams,fragment,data,outlet,component,futureSnapshot){_classCallCheck(this,ActivatedRoute);this.url=url;this.params=params;this.queryParams=queryParams;this.fragment=fragment;this.data=data;this.outlet=outlet;this.component=component;this._futureSnapshot=futureSnapshot;}/**
     * The configuration used to match this route
     * @return {?}
     */_createClass(ActivatedRoute,[{key:'toString',/**
     * @return {?}
     */value:function toString(){return this.snapshot?this.snapshot.toString():'Future('+this._futureSnapshot+')';}},{key:'routeConfig',get:function get(){return this._futureSnapshot.routeConfig;}/**
     * The root of the router state
     * @return {?}
     */},{key:'root',get:function get(){return this._routerState.root;}/**
     * The parent of this route in the router state tree
     * @return {?}
     */},{key:'parent',get:function get(){return this._routerState.parent(this);}/**
     * The first child of this route in the router state tree
     * @return {?}
     */},{key:'firstChild',get:function get(){return this._routerState.firstChild(this);}/**
     * The children of this route in the router state tree
     * @return {?}
     */},{key:'children',get:function get(){return this._routerState.children(this);}/**
     * The path from the root of the router state tree to this route
     * @return {?}
     */},{key:'pathFromRoot',get:function get(){return this._routerState.pathFromRoot(this);}}]);return ActivatedRoute;}();/**
 * \@internal
 * @param {?} route
 * @return {?}
 */function inheritedParamsDataResolve(route){var/** @type {?} */pathToRoot=route.pathFromRoot;var/** @type {?} */inhertingStartingFrom=pathToRoot.length-1;while(inhertingStartingFrom>=1){var/** @type {?} */current=pathToRoot[inhertingStartingFrom];var/** @type {?} */parent=pathToRoot[inhertingStartingFrom-1];// current route is an empty path => inherits its parent's params and data
if(current.routeConfig&&current.routeConfig.path===''){inhertingStartingFrom--;}else if(!parent.component){inhertingStartingFrom--;}else{break;}}return pathToRoot.slice(inhertingStartingFrom).reduce(function(res,curr){var/** @type {?} */params=merge(res.params,curr.params);var/** @type {?} */data=merge(res.data,curr.data);var/** @type {?} */resolve=merge(res.resolve,curr._resolvedData);return{params:params,data:data,resolve:resolve};},/** @type {?} */{params:{},data:{},resolve:{}});}/**
 * \@whatItDoes Contains the information about a route associated with a component loaded in an
 * outlet
 * at a particular moment in time. ActivatedRouteSnapshot can also be used to traverse the router
 * state tree.
 *
 * \@howToUse
 *
 * ```
 * \@Component({templateUrl:'./my-component.html'})
 * class MyComponent {
 *   constructor(route: ActivatedRoute) {
 *     const id: string = route.snapshot.params.id;
 *     const url: string = route.snapshot.url.join('');
 *     const user = route.snapshot.data.user;
 *   }
 * }
 * ```
 *
 * \@stable
 */var ActivatedRouteSnapshot=function(){/**
     * \@internal
     * @param {?} url
     * @param {?} params
     * @param {?} queryParams
     * @param {?} fragment
     * @param {?} data
     * @param {?} outlet
     * @param {?} component
     * @param {?} routeConfig
     * @param {?} urlSegment
     * @param {?} lastPathIndex
     * @param {?} resolve
     */function ActivatedRouteSnapshot(url,params,queryParams,fragment,data,outlet,component,routeConfig,urlSegment,lastPathIndex,resolve){_classCallCheck(this,ActivatedRouteSnapshot);this.url=url;this.params=params;this.queryParams=queryParams;this.fragment=fragment;this.data=data;this.outlet=outlet;this.component=component;this._routeConfig=routeConfig;this._urlSegment=urlSegment;this._lastPathIndex=lastPathIndex;this._resolve=resolve;}/**
     * The configuration used to match this route
     * @return {?}
     */_createClass(ActivatedRouteSnapshot,[{key:'toString',/**
     * @return {?}
     */value:function toString(){var/** @type {?} */url=this.url.map(function(segment){return segment.toString();}).join('/');var/** @type {?} */matched=this._routeConfig?this._routeConfig.path:'';return'Route(url:\''+url+'\', path:\''+matched+'\')';}},{key:'routeConfig',get:function get(){return this._routeConfig;}/**
     * The root of the router state
     * @return {?}
     */},{key:'root',get:function get(){return this._routerState.root;}/**
     * The parent of this route in the router state tree
     * @return {?}
     */},{key:'parent',get:function get(){return this._routerState.parent(this);}/**
     * The first child of this route in the router state tree
     * @return {?}
     */},{key:'firstChild',get:function get(){return this._routerState.firstChild(this);}/**
     * The children of this route in the router state tree
     * @return {?}
     */},{key:'children',get:function get(){return this._routerState.children(this);}/**
     * The path from the root of the router state tree to this route
     * @return {?}
     */},{key:'pathFromRoot',get:function get(){return this._routerState.pathFromRoot(this);}}]);return ActivatedRouteSnapshot;}();/**
 * \@whatItDoes Represents the state of the router at a moment in time.
 *
 * \@howToUse
 *
 * ```
 * \@Component({templateUrl:'template.html'})
 * class MyComponent {
 *   constructor(router: Router) {
 *     const state: RouterState = router.routerState;
 *     const snapshot: RouterStateSnapshot = state.snapshot;
 *     const root: ActivatedRouteSnapshot = snapshot.root;
 *     const child = root.firstChild;
 *     const id: Observable<string> = child.params.map(p => p.id);
 *     //...
 *   }
 * }
 * ```
 *
 * \@description
 * RouterStateSnapshot is a tree of activated route snapshots. Every node in this tree knows about
 * the "consumed" URL segments, the extracted parameters, and the resolved data.
 *
 * \@stable
 */var RouterStateSnapshot=function(_Tree2){_inherits(RouterStateSnapshot,_Tree2);/**
     * \@internal
     * @param {?} url
     * @param {?} root
     */function RouterStateSnapshot(url,root){_classCallCheck(this,RouterStateSnapshot);var _this15=_possibleConstructorReturn(this,(RouterStateSnapshot.__proto__||Object.getPrototypeOf(RouterStateSnapshot)).call(this,root));_this15.url=url;setRouterStateSnapshot(_this15,root);return _this15;}/**
     * @return {?}
     */_createClass(RouterStateSnapshot,[{key:'toString',value:function toString(){return serializeNode(this._root);}}]);return RouterStateSnapshot;}(Tree);/**
 * @param {?} state
 * @param {?} node
 * @return {?}
 */function setRouterStateSnapshot(state,node){node.value._routerState=state;node.children.forEach(function(c){return setRouterStateSnapshot(state,c);});}/**
 * @param {?} node
 * @return {?}
 */function serializeNode(node){var/** @type {?} */c=node.children.length>0?' { '+node.children.map(serializeNode).join(", ")+' } ':'';return''+node.value+c;}/**
 * The expectation is that the activate route is created with the right set of parameters.
 * So we push new values into the observables only when they are not the initial values.
 * And we detect that by checking if the snapshot field is set.
 * @param {?} route
 * @return {?}
 */function advanceActivatedRoute(route){if(route.snapshot){var/** @type {?} */currentSnapshot=route.snapshot;route.snapshot=route._futureSnapshot;if(!shallowEqual(currentSnapshot.queryParams,route._futureSnapshot.queryParams)){route.queryParams.next(route._futureSnapshot.queryParams);}if(currentSnapshot.fragment!==route._futureSnapshot.fragment){route.fragment.next(route._futureSnapshot.fragment);}if(!shallowEqual(currentSnapshot.params,route._futureSnapshot.params)){route.params.next(route._futureSnapshot.params);}if(!shallowEqualArrays(currentSnapshot.url,route._futureSnapshot.url)){route.url.next(route._futureSnapshot.url);}if(!equalParamsAndUrlSegments(currentSnapshot,route._futureSnapshot)){route.data.next(route._futureSnapshot.data);}}else{route.snapshot=route._futureSnapshot;// this is for resolved data
route.data.next(route._futureSnapshot.data);}}/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */function equalParamsAndUrlSegments(a,b){var/** @type {?} */equalUrlParams=shallowEqual(a.params,b.params)&&equalSegments(a.url,b.url);var/** @type {?} */parentsMismatch=!a.parent!==!b.parent;return equalUrlParams&&!parentsMismatch&&(!a.parent||equalParamsAndUrlSegments(a.parent,b.parent));}/**
 * @param {?} routeReuseStrategy
 * @param {?} curr
 * @param {?} prevState
 * @return {?}
 */function createRouterState(routeReuseStrategy,curr,prevState){var/** @type {?} */root=createNode(routeReuseStrategy,curr._root,prevState?prevState._root:undefined);return new RouterState(root,curr);}/**
 * @param {?} routeReuseStrategy
 * @param {?} curr
 * @param {?=} prevState
 * @return {?}
 */function createNode(routeReuseStrategy,curr,prevState){// reuse an activated route that is currently displayed on the screen
if(prevState&&routeReuseStrategy.shouldReuseRoute(curr.value,prevState.value.snapshot)){var/** @type {?} */value=prevState.value;value._futureSnapshot=curr.value;var/** @type {?} */children=createOrReuseChildren(routeReuseStrategy,curr,prevState);return new TreeNode(value,children);}else if(routeReuseStrategy.retrieve(curr.value)){var/** @type {?} */_tree=routeReuseStrategy.retrieve(curr.value).route;setFutureSnapshotsOfActivatedRoutes(curr,_tree);return _tree;}else{var/** @type {?} */_value=createActivatedRoute(curr.value);var/** @type {?} */_children2=curr.children.map(function(c){return createNode(routeReuseStrategy,c);});return new TreeNode(_value,_children2);}}/**
 * @param {?} curr
 * @param {?} result
 * @return {?}
 */function setFutureSnapshotsOfActivatedRoutes(curr,result){if(curr.value.routeConfig!==result.value.routeConfig){throw new Error('Cannot reattach ActivatedRouteSnapshot created from a different route');}if(curr.children.length!==result.children.length){throw new Error('Cannot reattach ActivatedRouteSnapshot with a different number of children');}result.value._futureSnapshot=curr.value;for(var/** @type {?} */i=0;i<curr.children.length;++i){setFutureSnapshotsOfActivatedRoutes(curr.children[i],result.children[i]);}}/**
 * @param {?} routeReuseStrategy
 * @param {?} curr
 * @param {?} prevState
 * @return {?}
 */function createOrReuseChildren(routeReuseStrategy,curr,prevState){return curr.children.map(function(child){var _iteratorNormalCompletion6=true;var _didIteratorError6=false;var _iteratorError6=undefined;try{for(var _iterator6=prevState.children[Symbol.iterator](),_step6;!(_iteratorNormalCompletion6=(_step6=_iterator6.next()).done);_iteratorNormalCompletion6=true){var p=_step6.value;if(routeReuseStrategy.shouldReuseRoute(p.value.snapshot,child.value)){return createNode(routeReuseStrategy,child,p);}}}catch(err){_didIteratorError6=true;_iteratorError6=err;}finally{try{if(!_iteratorNormalCompletion6&&_iterator6.return){_iterator6.return();}}finally{if(_didIteratorError6){throw _iteratorError6;}}}return createNode(routeReuseStrategy,child);});}/**
 * @param {?} c
 * @return {?}
 */function createActivatedRoute(c){return new ActivatedRoute(new __WEBPACK_IMPORTED_MODULE_2_rxjs_BehaviorSubject__["BehaviorSubject"](c.url),new __WEBPACK_IMPORTED_MODULE_2_rxjs_BehaviorSubject__["BehaviorSubject"](c.params),new __WEBPACK_IMPORTED_MODULE_2_rxjs_BehaviorSubject__["BehaviorSubject"](c.queryParams),new __WEBPACK_IMPORTED_MODULE_2_rxjs_BehaviorSubject__["BehaviorSubject"](c.fragment),new __WEBPACK_IMPORTED_MODULE_2_rxjs_BehaviorSubject__["BehaviorSubject"](c.data),c.outlet,c.component,c);}/**
 * @param {?} route
 * @param {?} urlTree
 * @param {?} commands
 * @param {?} queryParams
 * @param {?} fragment
 * @return {?}
 */function _createUrlTree(route,urlTree,commands,queryParams,fragment){if(commands.length===0){return tree(urlTree.root,urlTree.root,urlTree,queryParams,fragment);}var/** @type {?} */nav=computeNavigation(commands);if(nav.toRoot()){return tree(urlTree.root,new UrlSegmentGroup([],{}),urlTree,queryParams,fragment);}var/** @type {?} */startingPosition=findStartingPosition(nav,urlTree,route);var/** @type {?} */segmentGroup=startingPosition.processChildren?updateSegmentGroupChildren(startingPosition.segmentGroup,startingPosition.index,nav.commands):updateSegmentGroup(startingPosition.segmentGroup,startingPosition.index,nav.commands);return tree(startingPosition.segmentGroup,segmentGroup,urlTree,queryParams,fragment);}/**
 * @param {?} command
 * @return {?}
 */function isMatrixParams(command){return(typeof command==='undefined'?'undefined':_typeof(command))==='object'&&command!=null&&!command.outlets&&!command.segmentPath;}/**
 * @param {?} oldSegmentGroup
 * @param {?} newSegmentGroup
 * @param {?} urlTree
 * @param {?} queryParams
 * @param {?} fragment
 * @return {?}
 */function tree(oldSegmentGroup,newSegmentGroup,urlTree,queryParams,fragment){if(urlTree.root===oldSegmentGroup){return new UrlTree(newSegmentGroup,stringify(queryParams),fragment);}return new UrlTree(replaceSegment(urlTree.root,oldSegmentGroup,newSegmentGroup),stringify(queryParams),fragment);}/**
 * @param {?} current
 * @param {?} oldSegment
 * @param {?} newSegment
 * @return {?}
 */function replaceSegment(current,oldSegment,newSegment){var/** @type {?} */children={};forEach(current.children,function(c,outletName){if(c===oldSegment){children[outletName]=newSegment;}else{children[outletName]=replaceSegment(c,oldSegment,newSegment);}});return new UrlSegmentGroup(current.segments,children);}var Navigation=function(){/**
     * @param {?} isAbsolute
     * @param {?} numberOfDoubleDots
     * @param {?} commands
     */function Navigation(isAbsolute,numberOfDoubleDots,commands){_classCallCheck(this,Navigation);this.isAbsolute=isAbsolute;this.numberOfDoubleDots=numberOfDoubleDots;this.commands=commands;if(isAbsolute&&commands.length>0&&isMatrixParams(commands[0])){throw new Error('Root segment cannot have matrix parameters');}var cmdWithOutlet=commands.find(function(c){return(typeof c==='undefined'?'undefined':_typeof(c))==='object'&&c!=null&&c.outlets;});if(cmdWithOutlet&&cmdWithOutlet!==last(commands)){throw new Error('{outlets:{}} has to be the last command');}}/**
     * @return {?}
     */_createClass(Navigation,[{key:'toRoot',value:function toRoot(){return this.isAbsolute&&this.commands.length===1&&this.commands[0]=='/';}}]);return Navigation;}();/**
 * Transforms commands to a normalized `Navigation`
 * @param {?} commands
 * @return {?}
 */function computeNavigation(commands){if(typeof commands[0]==='string'&&commands.length===1&&commands[0]==='/'){return new Navigation(true,0,commands);}var/** @type {?} */numberOfDoubleDots=0;var/** @type {?} */isAbsolute=false;var/** @type {?} */res=commands.reduce(function(res,cmd,cmdIdx){if((typeof cmd==='undefined'?'undefined':_typeof(cmd))==='object'&&cmd!=null){if(cmd.outlets){var/** @type {?} */outlets={};forEach(cmd.outlets,function(commands,name){outlets[name]=typeof commands==='string'?commands.split('/'):commands;});return[].concat(_toConsumableArray(res),[{outlets:outlets}]);}if(cmd.segmentPath){return[].concat(_toConsumableArray(res),[cmd.segmentPath]);}}if(!(typeof cmd==='string')){return[].concat(_toConsumableArray(res),[cmd]);}if(cmdIdx===0){cmd.split('/').forEach(function(urlPart,partIndex){if(partIndex==0&&urlPart==='.'){}else if(partIndex==0&&urlPart===''){isAbsolute=true;}else if(urlPart==='..'){numberOfDoubleDots++;}else if(urlPart!=''){res.push(urlPart);}});return res;}return[].concat(_toConsumableArray(res),[cmd]);},[]);return new Navigation(isAbsolute,numberOfDoubleDots,res);}var Position=/**
     * @param {?} segmentGroup
     * @param {?} processChildren
     * @param {?} index
     */function Position(segmentGroup,processChildren,index){_classCallCheck(this,Position);this.segmentGroup=segmentGroup;this.processChildren=processChildren;this.index=index;};/**
 * @param {?} nav
 * @param {?} tree
 * @param {?} route
 * @return {?}
 */function findStartingPosition(nav,tree,route){if(nav.isAbsolute){return new Position(tree.root,true,0);}if(route.snapshot._lastPathIndex===-1){return new Position(route.snapshot._urlSegment,true,0);}var/** @type {?} */modifier=isMatrixParams(nav.commands[0])?0:1;var/** @type {?} */index=route.snapshot._lastPathIndex+modifier;return createPositionApplyingDoubleDots(route.snapshot._urlSegment,index,nav.numberOfDoubleDots);}/**
 * @param {?} group
 * @param {?} index
 * @param {?} numberOfDoubleDots
 * @return {?}
 */function createPositionApplyingDoubleDots(group,index,numberOfDoubleDots){var/** @type {?} */g=group;var/** @type {?} */ci=index;var/** @type {?} */dd=numberOfDoubleDots;while(dd>ci){dd-=ci;g=g.parent;if(!g){throw new Error('Invalid number of \'../\'');}ci=g.segments.length;}return new Position(g,false,ci-dd);}/**
 * @param {?} command
 * @return {?}
 */function getPath(command){if((typeof command==='undefined'?'undefined':_typeof(command))==='object'&&command!=null&&command.outlets){return command.outlets[PRIMARY_OUTLET];}return''+command;}/**
 * @param {?} commands
 * @return {?}
 */function getOutlets(commands){if(!(_typeof(commands[0])==='object'))return _defineProperty({},PRIMARY_OUTLET,commands);if(commands[0].outlets===undefined)return _defineProperty({},PRIMARY_OUTLET,commands);return commands[0].outlets;}/**
 * @param {?} segmentGroup
 * @param {?} startIndex
 * @param {?} commands
 * @return {?}
 */function updateSegmentGroup(segmentGroup,startIndex,commands){if(!segmentGroup){segmentGroup=new UrlSegmentGroup([],{});}if(segmentGroup.segments.length===0&&segmentGroup.hasChildren()){return updateSegmentGroupChildren(segmentGroup,startIndex,commands);}var/** @type {?} */m=prefixedWith(segmentGroup,startIndex,commands);var/** @type {?} */slicedCommands=commands.slice(m.commandIndex);if(m.match&&m.pathIndex<segmentGroup.segments.length){var/** @type {?} */g=new UrlSegmentGroup(segmentGroup.segments.slice(0,m.pathIndex),{});g.children[PRIMARY_OUTLET]=new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex),segmentGroup.children);return updateSegmentGroupChildren(g,0,slicedCommands);}else if(m.match&&slicedCommands.length===0){return new UrlSegmentGroup(segmentGroup.segments,{});}else if(m.match&&!segmentGroup.hasChildren()){return createNewSegmentGroup(segmentGroup,startIndex,commands);}else if(m.match){return updateSegmentGroupChildren(segmentGroup,0,slicedCommands);}else{return createNewSegmentGroup(segmentGroup,startIndex,commands);}}/**
 * @param {?} segmentGroup
 * @param {?} startIndex
 * @param {?} commands
 * @return {?}
 */function updateSegmentGroupChildren(segmentGroup,startIndex,commands){if(commands.length===0){return new UrlSegmentGroup(segmentGroup.segments,{});}else{var/** @type {?} */outlets=getOutlets(commands);var/** @type {?} */children={};forEach(outlets,function(commands,outlet){if(commands!==null){children[outlet]=updateSegmentGroup(segmentGroup.children[outlet],startIndex,commands);}});forEach(segmentGroup.children,function(child,childOutlet){if(outlets[childOutlet]===undefined){children[childOutlet]=child;}});return new UrlSegmentGroup(segmentGroup.segments,children);}}/**
 * @param {?} segmentGroup
 * @param {?} startIndex
 * @param {?} commands
 * @return {?}
 */function prefixedWith(segmentGroup,startIndex,commands){var/** @type {?} */currentCommandIndex=0;var/** @type {?} */currentPathIndex=startIndex;var/** @type {?} */noMatch={match:false,pathIndex:0,commandIndex:0};while(currentPathIndex<segmentGroup.segments.length){if(currentCommandIndex>=commands.length)return noMatch;var/** @type {?} */path=segmentGroup.segments[currentPathIndex];var/** @type {?} */curr=getPath(commands[currentCommandIndex]);var/** @type {?} */next=currentCommandIndex<commands.length-1?commands[currentCommandIndex+1]:null;if(currentPathIndex>0&&curr===undefined)break;if(curr&&next&&(typeof next==='undefined'?'undefined':_typeof(next))==='object'&&next.outlets===undefined){if(!compare(curr,next,path))return noMatch;currentCommandIndex+=2;}else{if(!compare(curr,{},path))return noMatch;currentCommandIndex++;}currentPathIndex++;}return{match:true,pathIndex:currentPathIndex,commandIndex:currentCommandIndex};}/**
 * @param {?} segmentGroup
 * @param {?} startIndex
 * @param {?} commands
 * @return {?}
 */function createNewSegmentGroup(segmentGroup,startIndex,commands){var/** @type {?} */paths=segmentGroup.segments.slice(0,startIndex);var/** @type {?} */i=0;while(i<commands.length){if(_typeof(commands[i])==='object'&&commands[i].outlets!==undefined){var/** @type {?} */children=createNewSegmentChildren(commands[i].outlets);return new UrlSegmentGroup(paths,children);}// if we start with an object literal, we need to reuse the path part from the segment
if(i===0&&isMatrixParams(commands[0])){var/** @type {?} */p=segmentGroup.segments[startIndex];paths.push(new UrlSegment(p.path,commands[0]));i++;continue;}var/** @type {?} */curr=getPath(commands[i]);var/** @type {?} */next=i<commands.length-1?commands[i+1]:null;if(curr&&next&&isMatrixParams(next)){paths.push(new UrlSegment(curr,stringify(next)));i+=2;}else{paths.push(new UrlSegment(curr,{}));i++;}}return new UrlSegmentGroup(paths,{});}/**
 * @param {?} outlets
 * @return {?}
 */function createNewSegmentChildren(outlets){var/** @type {?} */children={};forEach(outlets,function(commands,outlet){if(commands!==null){children[outlet]=createNewSegmentGroup(new UrlSegmentGroup([],{}),0,commands);}});return children;}/**
 * @param {?} params
 * @return {?}
 */function stringify(params){var/** @type {?} */res={};forEach(params,function(v,k){return res[k]=''+v;});return res;}/**
 * @param {?} path
 * @param {?} params
 * @param {?} segment
 * @return {?}
 */function compare(path,params,segment){return path==segment.path&&shallowEqual(params,segment.parameters);}var NoMatch$1=function NoMatch$1(){_classCallCheck(this,NoMatch$1);};/**
 * @param {?} rootComponentType
 * @param {?} config
 * @param {?} urlTree
 * @param {?} url
 * @return {?}
 */function recognize(rootComponentType,config,urlTree,url){return new Recognizer(rootComponentType,config,urlTree,url).recognize();}var Recognizer=function(){/**
     * @param {?} rootComponentType
     * @param {?} config
     * @param {?} urlTree
     * @param {?} url
     */function Recognizer(rootComponentType,config,urlTree,url){_classCallCheck(this,Recognizer);this.rootComponentType=rootComponentType;this.config=config;this.urlTree=urlTree;this.url=url;}/**
     * @return {?}
     */_createClass(Recognizer,[{key:'recognize',value:function recognize(){try{var/** @type {?} */rootSegmentGroup=split$1(this.urlTree.root,[],[],this.config).segmentGroup;var/** @type {?} */children=this.processSegmentGroup(this.config,rootSegmentGroup,PRIMARY_OUTLET);var/** @type {?} */root=new ActivatedRouteSnapshot([],Object.freeze({}),Object.freeze(this.urlTree.queryParams),this.urlTree.fragment,{},PRIMARY_OUTLET,this.rootComponentType,null,this.urlTree.root,-1,{});var/** @type {?} */rootNode=new TreeNode(root,children);var/** @type {?} */routeState=new RouterStateSnapshot(this.url,rootNode);this.inheriteParamsAndData(routeState._root);return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_of__["of"])(routeState);}catch(e){return new __WEBPACK_IMPORTED_MODULE_12_rxjs_Observable__["Observable"](function(obs){return obs.error(e);});}}/**
     * @param {?} routeNode
     * @return {?}
     */},{key:'inheriteParamsAndData',value:function inheriteParamsAndData(routeNode){var _this16=this;var/** @type {?} */route=routeNode.value;var/** @type {?} */i=inheritedParamsDataResolve(route);route.params=Object.freeze(i.params);route.data=Object.freeze(i.data);routeNode.children.forEach(function(n){return _this16.inheriteParamsAndData(n);});}/**
     * @param {?} config
     * @param {?} segmentGroup
     * @param {?} outlet
     * @return {?}
     */},{key:'processSegmentGroup',value:function processSegmentGroup(config,segmentGroup,outlet){if(segmentGroup.segments.length===0&&segmentGroup.hasChildren()){return this.processChildren(config,segmentGroup);}else{return this.processSegment(config,segmentGroup,segmentGroup.segments,outlet);}}/**
     * @param {?} config
     * @param {?} segmentGroup
     * @return {?}
     */},{key:'processChildren',value:function processChildren(config,segmentGroup){var _this17=this;var/** @type {?} */children=mapChildrenIntoArray(segmentGroup,function(child,childOutlet){return _this17.processSegmentGroup(config,child,childOutlet);});checkOutletNameUniqueness(children);sortActivatedRouteSnapshots(children);return children;}/**
     * @param {?} config
     * @param {?} segmentGroup
     * @param {?} segments
     * @param {?} outlet
     * @return {?}
     */},{key:'processSegment',value:function processSegment(config,segmentGroup,segments,outlet){var _iteratorNormalCompletion7=true;var _didIteratorError7=false;var _iteratorError7=undefined;try{for(var _iterator7=config[Symbol.iterator](),_step7;!(_iteratorNormalCompletion7=(_step7=_iterator7.next()).done);_iteratorNormalCompletion7=true){var r=_step7.value;try{return this.processSegmentAgainstRoute(r,segmentGroup,segments,outlet);}catch(e){if(!(e instanceof NoMatch$1))throw e;}}}catch(err){_didIteratorError7=true;_iteratorError7=err;}finally{try{if(!_iteratorNormalCompletion7&&_iterator7.return){_iterator7.return();}}finally{if(_didIteratorError7){throw _iteratorError7;}}}if(this.noLeftoversInUrl(segmentGroup,segments,outlet)){return[];}else{throw new NoMatch$1();}}/**
     * @param {?} segmentGroup
     * @param {?} segments
     * @param {?} outlet
     * @return {?}
     */},{key:'noLeftoversInUrl',value:function noLeftoversInUrl(segmentGroup,segments,outlet){return segments.length===0&&!segmentGroup.children[outlet];}/**
     * @param {?} route
     * @param {?} rawSegment
     * @param {?} segments
     * @param {?} outlet
     * @return {?}
     */},{key:'processSegmentAgainstRoute',value:function processSegmentAgainstRoute(route,rawSegment,segments,outlet){if(route.redirectTo)throw new NoMatch$1();if((route.outlet?route.outlet:PRIMARY_OUTLET)!==outlet)throw new NoMatch$1();if(route.path==='**'){var/** @type {?} */params=segments.length>0?last(segments).parameters:{};var/** @type {?} */_snapshot=new ActivatedRouteSnapshot(segments,params,Object.freeze(this.urlTree.queryParams),this.urlTree.fragment,getData(route),outlet,route.component,route,getSourceSegmentGroup(rawSegment),getPathIndexShift(rawSegment)+segments.length,getResolve(route));return[new TreeNode(_snapshot,[])];}var _match$=match$1(rawSegment,route,segments),consumedSegments=_match$.consumedSegments,parameters=_match$.parameters,lastChild=_match$.lastChild;var/** @type {?} */rawSlicedSegments=segments.slice(lastChild);var/** @type {?} */childConfig=getChildConfig(route);var _split$=split$1(rawSegment,consumedSegments,rawSlicedSegments,childConfig),segmentGroup=_split$.segmentGroup,slicedSegments=_split$.slicedSegments;var/** @type {?} */snapshot=new ActivatedRouteSnapshot(consumedSegments,parameters,Object.freeze(this.urlTree.queryParams),this.urlTree.fragment,getData(route),outlet,route.component,route,getSourceSegmentGroup(rawSegment),getPathIndexShift(rawSegment)+consumedSegments.length,getResolve(route));if(slicedSegments.length===0&&segmentGroup.hasChildren()){var/** @type {?} */children=this.processChildren(childConfig,segmentGroup);return[new TreeNode(snapshot,children)];}else if(childConfig.length===0&&slicedSegments.length===0){return[new TreeNode(snapshot,[])];}else{var/** @type {?} */_children3=this.processSegment(childConfig,segmentGroup,slicedSegments,PRIMARY_OUTLET);return[new TreeNode(snapshot,_children3)];}}}]);return Recognizer;}();/**
 * @param {?} nodes
 * @return {?}
 */function sortActivatedRouteSnapshots(nodes){nodes.sort(function(a,b){if(a.value.outlet===PRIMARY_OUTLET)return-1;if(b.value.outlet===PRIMARY_OUTLET)return 1;return a.value.outlet.localeCompare(b.value.outlet);});}/**
 * @param {?} route
 * @return {?}
 */function getChildConfig(route){if(route.children){return route.children;}else if(route.loadChildren){return route._loadedConfig.routes;}else{return[];}}/**
 * @param {?} segmentGroup
 * @param {?} route
 * @param {?} segments
 * @return {?}
 */function match$1(segmentGroup,route,segments){if(route.path===''){if(route.pathMatch==='full'&&(segmentGroup.hasChildren()||segments.length>0)){throw new NoMatch$1();}else{return{consumedSegments:[],lastChild:0,parameters:{}};}}var/** @type {?} */matcher=route.matcher||defaultUrlMatcher;var/** @type {?} */res=matcher(segments,segmentGroup,route);if(!res)throw new NoMatch$1();var/** @type {?} */posParams={};forEach(res.posParams,function(v,k){posParams[k]=v.path;});var/** @type {?} */parameters=merge(posParams,res.consumed[res.consumed.length-1].parameters);return{consumedSegments:res.consumed,lastChild:res.consumed.length,parameters:parameters};}/**
 * @param {?} nodes
 * @return {?}
 */function checkOutletNameUniqueness(nodes){var/** @type {?} */names={};nodes.forEach(function(n){var/** @type {?} */routeWithSameOutletName=names[n.value.outlet];if(routeWithSameOutletName){var/** @type {?} */p=routeWithSameOutletName.url.map(function(s){return s.toString();}).join('/');var/** @type {?} */c=n.value.url.map(function(s){return s.toString();}).join('/');throw new Error('Two segments cannot have the same outlet name: \''+p+'\' and \''+c+'\'.');}names[n.value.outlet]=n.value;});}/**
 * @param {?} segmentGroup
 * @return {?}
 */function getSourceSegmentGroup(segmentGroup){var/** @type {?} */s=segmentGroup;while(s._sourceSegment){s=s._sourceSegment;}return s;}/**
 * @param {?} segmentGroup
 * @return {?}
 */function getPathIndexShift(segmentGroup){var/** @type {?} */s=segmentGroup;var/** @type {?} */res=s._segmentIndexShift?s._segmentIndexShift:0;while(s._sourceSegment){s=s._sourceSegment;res+=s._segmentIndexShift?s._segmentIndexShift:0;}return res-1;}/**
 * @param {?} segmentGroup
 * @param {?} consumedSegments
 * @param {?} slicedSegments
 * @param {?} config
 * @return {?}
 */function split$1(segmentGroup,consumedSegments,slicedSegments,config){if(slicedSegments.length>0&&containsEmptyPathMatchesWithNamedOutlets(segmentGroup,slicedSegments,config)){var/** @type {?} */s=new UrlSegmentGroup(consumedSegments,createChildrenForEmptyPaths(segmentGroup,consumedSegments,config,new UrlSegmentGroup(slicedSegments,segmentGroup.children)));s._sourceSegment=segmentGroup;s._segmentIndexShift=consumedSegments.length;return{segmentGroup:s,slicedSegments:[]};}else if(slicedSegments.length===0&&containsEmptyPathMatches(segmentGroup,slicedSegments,config)){var/** @type {?} */_s2=new UrlSegmentGroup(segmentGroup.segments,addEmptyPathsToChildrenIfNeeded(segmentGroup,slicedSegments,config,segmentGroup.children));_s2._sourceSegment=segmentGroup;_s2._segmentIndexShift=consumedSegments.length;return{segmentGroup:_s2,slicedSegments:slicedSegments};}else{var/** @type {?} */_s3=new UrlSegmentGroup(segmentGroup.segments,segmentGroup.children);_s3._sourceSegment=segmentGroup;_s3._segmentIndexShift=consumedSegments.length;return{segmentGroup:_s3,slicedSegments:slicedSegments};}}/**
 * @param {?} segmentGroup
 * @param {?} slicedSegments
 * @param {?} routes
 * @param {?} children
 * @return {?}
 */function addEmptyPathsToChildrenIfNeeded(segmentGroup,slicedSegments,routes,children){var/** @type {?} */res={};var _iteratorNormalCompletion8=true;var _didIteratorError8=false;var _iteratorError8=undefined;try{for(var _iterator8=routes[Symbol.iterator](),_step8;!(_iteratorNormalCompletion8=(_step8=_iterator8.next()).done);_iteratorNormalCompletion8=true){var r=_step8.value;if(emptyPathMatch(segmentGroup,slicedSegments,r)&&!children[getOutlet$2(r)]){var/** @type {?} */s=new UrlSegmentGroup([],{});s._sourceSegment=segmentGroup;s._segmentIndexShift=segmentGroup.segments.length;res[getOutlet$2(r)]=s;}}}catch(err){_didIteratorError8=true;_iteratorError8=err;}finally{try{if(!_iteratorNormalCompletion8&&_iterator8.return){_iterator8.return();}}finally{if(_didIteratorError8){throw _iteratorError8;}}}return merge(children,res);}/**
 * @param {?} segmentGroup
 * @param {?} consumedSegments
 * @param {?} routes
 * @param {?} primarySegment
 * @return {?}
 */function createChildrenForEmptyPaths(segmentGroup,consumedSegments,routes,primarySegment){var/** @type {?} */res={};res[PRIMARY_OUTLET]=primarySegment;primarySegment._sourceSegment=segmentGroup;primarySegment._segmentIndexShift=consumedSegments.length;var _iteratorNormalCompletion9=true;var _didIteratorError9=false;var _iteratorError9=undefined;try{for(var _iterator9=routes[Symbol.iterator](),_step9;!(_iteratorNormalCompletion9=(_step9=_iterator9.next()).done);_iteratorNormalCompletion9=true){var r=_step9.value;if(r.path===''&&getOutlet$2(r)!==PRIMARY_OUTLET){var/** @type {?} */s=new UrlSegmentGroup([],{});s._sourceSegment=segmentGroup;s._segmentIndexShift=consumedSegments.length;res[getOutlet$2(r)]=s;}}}catch(err){_didIteratorError9=true;_iteratorError9=err;}finally{try{if(!_iteratorNormalCompletion9&&_iterator9.return){_iterator9.return();}}finally{if(_didIteratorError9){throw _iteratorError9;}}}return res;}/**
 * @param {?} segmentGroup
 * @param {?} slicedSegments
 * @param {?} routes
 * @return {?}
 */function containsEmptyPathMatchesWithNamedOutlets(segmentGroup,slicedSegments,routes){return routes.filter(function(r){return emptyPathMatch(segmentGroup,slicedSegments,r)&&getOutlet$2(r)!==PRIMARY_OUTLET;}).length>0;}/**
 * @param {?} segmentGroup
 * @param {?} slicedSegments
 * @param {?} routes
 * @return {?}
 */function containsEmptyPathMatches(segmentGroup,slicedSegments,routes){return routes.filter(function(r){return emptyPathMatch(segmentGroup,slicedSegments,r);}).length>0;}/**
 * @param {?} segmentGroup
 * @param {?} slicedSegments
 * @param {?} r
 * @return {?}
 */function emptyPathMatch(segmentGroup,slicedSegments,r){if((segmentGroup.hasChildren()||slicedSegments.length>0)&&r.pathMatch==='full')return false;return r.path===''&&r.redirectTo===undefined;}/**
 * @param {?} route
 * @return {?}
 */function getOutlet$2(route){return route.outlet?route.outlet:PRIMARY_OUTLET;}/**
 * @param {?} route
 * @return {?}
 */function getData(route){return route.data?route.data:{};}/**
 * @param {?} route
 * @return {?}
 */function getResolve(route){return route.resolve?route.resolve:{};}/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 *//**
 * \@whatItDoes Contains all the router outlets created in a component.
 *
 * \@stable
 */var RouterOutletMap=function(){function RouterOutletMap(){_classCallCheck(this,RouterOutletMap);/** @internal */this._outlets={};}/**
     * Adds an outlet to this map.
     * @param {?} name
     * @param {?} outlet
     * @return {?}
     */_createClass(RouterOutletMap,[{key:'registerOutlet',value:function registerOutlet(name,outlet){this._outlets[name]=outlet;}/**
     * Removes an outlet from this map.
     * @param {?} name
     * @return {?}
     */},{key:'removeOutlet',value:function removeOutlet(name){this._outlets[name]=undefined;}}]);return RouterOutletMap;}();/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 *//**
 * \@whatItDoes Provides a way to migrate AngularJS applications to Angular.
 *
 * \@experimental
 * @abstract
 */var UrlHandlingStrategy=function(){function UrlHandlingStrategy(){_classCallCheck(this,UrlHandlingStrategy);}_createClass(UrlHandlingStrategy,[{key:'shouldProcessUrl',/**
     * Tells the router if this URL should be processed.
     *
     * When it returns true, the router will execute the regular navigation.
     * When it returns false, the router will set the router state to an empty state.
     * As a result, all the active components will be destroyed.
     *
     * @abstract
     * @param {?} url
     * @return {?}
     */value:function shouldProcessUrl(url){}/**
     * Extracts the part of the URL that should be handled by the router.
     * The rest of the URL will remain untouched.
     * @abstract
     * @param {?} url
     * @return {?}
     */},{key:'extract',value:function extract(url){}/**
     * Merges the URL fragment with the rest of the URL.
     * @abstract
     * @param {?} newUrlPart
     * @param {?} rawUrl
     * @return {?}
     */},{key:'merge',value:function merge(newUrlPart,rawUrl){}}]);return UrlHandlingStrategy;}();/**
 * \@experimental
 */var DefaultUrlHandlingStrategy=function(){function DefaultUrlHandlingStrategy(){_classCallCheck(this,DefaultUrlHandlingStrategy);}_createClass(DefaultUrlHandlingStrategy,[{key:'shouldProcessUrl',/**
     * @param {?} url
     * @return {?}
     */value:function shouldProcessUrl(url){return true;}/**
     * @param {?} url
     * @return {?}
     */},{key:'extract',value:function extract(url){return url;}/**
     * @param {?} newUrlPart
     * @param {?} wholeUrl
     * @return {?}
     */},{key:'merge',value:function merge(newUrlPart,wholeUrl){return newUrlPart;}}]);return DefaultUrlHandlingStrategy;}();/**
 * @param {?} error
 * @return {?}
 */function defaultErrorHandler(error){throw error;}/**
 * Does not detach any subtrees. Reuses routes as long as their route config is the same.
 */var DefaultRouteReuseStrategy=function(){function DefaultRouteReuseStrategy(){_classCallCheck(this,DefaultRouteReuseStrategy);}_createClass(DefaultRouteReuseStrategy,[{key:'shouldDetach',/**
     * @param {?} route
     * @return {?}
     */value:function shouldDetach(route){return false;}/**
     * @param {?} route
     * @param {?} detachedTree
     * @return {?}
     */},{key:'store',value:function store(route,detachedTree){}/**
     * @param {?} route
     * @return {?}
     */},{key:'shouldAttach',value:function shouldAttach(route){return false;}/**
     * @param {?} route
     * @return {?}
     */},{key:'retrieve',value:function retrieve(route){return null;}/**
     * @param {?} future
     * @param {?} curr
     * @return {?}
     */},{key:'shouldReuseRoute',value:function shouldReuseRoute(future,curr){return future.routeConfig===curr.routeConfig;}}]);return DefaultRouteReuseStrategy;}();/**
 * \@whatItDoes Provides the navigation and url manipulation capabilities.
 *
 * See {\@link Routes} for more details and examples.
 *
 * \@ngModule RouterModule
 *
 * \@stable
 */var Router=function(){/**
     * @param {?} rootComponentType
     * @param {?} urlSerializer
     * @param {?} outletMap
     * @param {?} location
     * @param {?} injector
     * @param {?} loader
     * @param {?} compiler
     * @param {?} config
     */function Router(rootComponentType,urlSerializer,outletMap,location,injector,loader,compiler,config){var _this18=this;_classCallCheck(this,Router);this.rootComponentType=rootComponentType;this.urlSerializer=urlSerializer;this.outletMap=outletMap;this.location=location;this.injector=injector;this.config=config;this.navigations=new __WEBPACK_IMPORTED_MODULE_2_rxjs_BehaviorSubject__["BehaviorSubject"](null);this.routerEvents=new __WEBPACK_IMPORTED_MODULE_3_rxjs_Subject__["Subject"]();this.navigationId=0;/**
         * Error handler that is invoked when a navigation errors.
         *
         * See {@link ErrorHandler} for more information.
         */this.errorHandler=defaultErrorHandler;/**
         * Indicates if at least one navigation happened.
         */this.navigated=false;/**
         * Extracts and merges URLs. Used for AngularJS to Angular migrations.
         */this.urlHandlingStrategy=new DefaultUrlHandlingStrategy();this.routeReuseStrategy=new DefaultRouteReuseStrategy();var onLoadStart=function onLoadStart(r){return _this18.triggerEvent(new RouteConfigLoadStart(r));};var onLoadEnd=function onLoadEnd(r){return _this18.triggerEvent(new RouteConfigLoadEnd(r));};this.resetConfig(config);this.currentUrlTree=createEmptyUrlTree();this.rawUrlTree=this.currentUrlTree;this.configLoader=new RouterConfigLoader(loader,compiler,onLoadStart,onLoadEnd);this.currentRouterState=createEmptyState(this.currentUrlTree,this.rootComponentType);this.processNavigations();}/**
     * \@internal
     * TODO: this should be removed once the constructor of the router made internal
     * @param {?} rootComponentType
     * @return {?}
     */_createClass(Router,[{key:'resetRootComponentType',value:function resetRootComponentType(rootComponentType){this.rootComponentType=rootComponentType;// TODO: vsavkin router 4.0 should make the root component set to null
// this will simplify the lifecycle of the router.
this.currentRouterState.root.component=this.rootComponentType;}/**
     * Sets up the location change listener and performs the initial navigation.
     * @return {?}
     */},{key:'initialNavigation',value:function initialNavigation(){this.setUpLocationChangeListener();if(this.navigationId===0){this.navigateByUrl(this.location.path(true),{replaceUrl:true});}}/**
     * Sets up the location change listener.
     * @return {?}
     */},{key:'setUpLocationChangeListener',value:function setUpLocationChangeListener(){var _this19=this;// Zone.current.wrap is needed because of the issue with RxJS scheduler,
// which does not work properly with zone.js in IE and Safari
if(!this.locationSubscription){this.locationSubscription=this.location.subscribe(Zone.current.wrap(function(change){var/** @type {?} */rawUrlTree=_this19.urlSerializer.parse(change['url']);var/** @type {?} */source=change['type']==='popstate'?'popstate':'hashchange';setTimeout(function(){_this19.scheduleNavigation(rawUrlTree,source,{replaceUrl:true});},0);}));}}/**
     * The current route state
     * @return {?}
     */},{key:'triggerEvent',/**
     * \@internal
     * @param {?} e
     * @return {?}
     */value:function triggerEvent(e){this.routerEvents.next(e);}/**
     * Resets the configuration used for navigation and generating links.
     *
     * ### Usage
     *
     * ```
     * router.resetConfig([
     *  { path: 'team/:id', component: TeamCmp, children: [
     *    { path: 'simple', component: SimpleCmp },
     *    { path: 'user/:name', component: UserCmp }
     *  ]}
     * ]);
     * ```
     * @param {?} config
     * @return {?}
     */},{key:'resetConfig',value:function resetConfig(config){validateConfig(config);this.config=config;}/**
     * \@docsNotRequired
     * @return {?}
     */},{key:'ngOnDestroy',value:function ngOnDestroy(){this.dispose();}/**
     * Disposes of the router
     * @return {?}
     */},{key:'dispose',value:function dispose(){if(this.locationSubscription){this.locationSubscription.unsubscribe();this.locationSubscription=null;}}/**
     * Applies an array of commands to the current url tree and creates a new url tree.
     *
     * When given an activate route, applies the given commands starting from the route.
     * When not given a route, applies the given command starting from the root.
     *
     * ### Usage
     *
     * ```
     * // create /team/33/user/11
     * router.createUrlTree(['/team', 33, 'user', 11]);
     *
     * // create /team/33;expand=true/user/11
     * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);
     *
     * // you can collapse static segments like this (this works only with the first passed-in value):
     * router.createUrlTree(['/team/33/user', userId]);
     *
     * // If the first segment can contain slashes, and you do not want the router to split it, you
     * // can do the following:
     *
     * router.createUrlTree([{segmentPath: '/one/two'}]);
     *
     * // create /team/33/(user/11//right:chat)
     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);
     *
     * // remove the right secondary node
     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);
     *
     * // assuming the current url is `/team/33/user/11` and the route points to `user/11`
     *
     * // navigate to /team/33/user/11/details
     * router.createUrlTree(['details'], {relativeTo: route});
     *
     * // navigate to /team/33/user/22
     * router.createUrlTree(['../22'], {relativeTo: route});
     *
     * // navigate to /team/44/user/22
     * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});
     * ```
     * @param {?} commands
     * @param {?=} __1
     * @return {?}
     */},{key:'createUrlTree',value:function createUrlTree(commands){var _ref4=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},relativeTo=_ref4.relativeTo,queryParams=_ref4.queryParams,fragment=_ref4.fragment,preserveQueryParams=_ref4.preserveQueryParams,queryParamsHandling=_ref4.queryParamsHandling,preserveFragment=_ref4.preserveFragment;if(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["p" /* isDevMode */])()&&preserveQueryParams&&console&&console.warn){console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');}var/** @type {?} */a=relativeTo||this.routerState.root;var/** @type {?} */f=preserveFragment?this.currentUrlTree.fragment:fragment;var/** @type {?} */q=null;if(queryParamsHandling){switch(queryParamsHandling){case'merge':q=merge(this.currentUrlTree.queryParams,queryParams);break;case'preserve':q=this.currentUrlTree.queryParams;break;default:q=queryParams;}}else{q=preserveQueryParams?this.currentUrlTree.queryParams:queryParams;}return _createUrlTree(a,this.currentUrlTree,commands,q,f);}/**
     * Navigate based on the provided url. This navigation is always absolute.
     *
     * Returns a promise that:
     * - resolves to 'true' when navigation succeeds,
     * - resolves to 'false' when navigation fails,
     * - is rejected when an error happens.
     *
     * ### Usage
     *
     * ```
     * router.navigateByUrl("/team/33/user/11");
     *
     * // Navigate without updating the URL
     * router.navigateByUrl("/team/33/user/11", { skipLocationChange: true });
     * ```
     *
     * In opposite to `navigate`, `navigateByUrl` takes a whole URL
     * and does not apply any delta to the current one.
     * @param {?} url
     * @param {?=} extras
     * @return {?}
     */},{key:'navigateByUrl',value:function navigateByUrl(url){var extras=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{skipLocationChange:false};var/** @type {?} */urlTree=url instanceof UrlTree?url:this.parseUrl(url);var/** @type {?} */mergedTree=this.urlHandlingStrategy.merge(urlTree,this.rawUrlTree);return this.scheduleNavigation(mergedTree,'imperative',extras);}/**
     * Navigate based on the provided array of commands and a starting point.
     * If no starting route is provided, the navigation is absolute.
     *
     * Returns a promise that:
     * - resolves to 'true' when navigation succeeds,
     * - resolves to 'false' when navigation fails,
     * - is rejected when an error happens.
     *
     * ### Usage
     *
     * ```
     * router.navigate(['team', 33, 'user', 11], {relativeTo: route});
     *
     * // Navigate without updating the URL
     * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});
     * ```
     *
     * In opposite to `navigateByUrl`, `navigate` always takes a delta that is applied to the current
     * URL.
     * @param {?} commands
     * @param {?=} extras
     * @return {?}
     */},{key:'navigate',value:function navigate(commands){var extras=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{skipLocationChange:false};validateCommands(commands);if(_typeof(extras.queryParams)==='object'&&extras.queryParams!==null){extras.queryParams=this.removeEmptyProps(extras.queryParams);}return this.navigateByUrl(this.createUrlTree(commands,extras),extras);}/**
     * Serializes a {\@link UrlTree} into a string
     * @param {?} url
     * @return {?}
     */},{key:'serializeUrl',value:function serializeUrl(url){return this.urlSerializer.serialize(url);}/**
     * Parses a string into a {\@link UrlTree}
     * @param {?} url
     * @return {?}
     */},{key:'parseUrl',value:function parseUrl(url){return this.urlSerializer.parse(url);}/**
     * Returns whether the url is activated
     * @param {?} url
     * @param {?} exact
     * @return {?}
     */},{key:'isActive',value:function isActive(url,exact){if(url instanceof UrlTree){return containsTree(this.currentUrlTree,url,exact);}else{var/** @type {?} */urlTree=this.urlSerializer.parse(url);return containsTree(this.currentUrlTree,urlTree,exact);}}/**
     * @param {?} params
     * @return {?}
     */},{key:'removeEmptyProps',value:function removeEmptyProps(params){return Object.keys(params).reduce(function(result,key){var/** @type {?} */value=params[key];if(value!==null&&value!==undefined){result[key]=value;}return result;},{});}/**
     * @return {?}
     */},{key:'processNavigations',value:function processNavigations(){var _this20=this;__WEBPACK_IMPORTED_MODULE_6_rxjs_operator_concatMap__["concatMap"].call(this.navigations,function(nav){if(nav){_this20.executeScheduledNavigation(nav);// a failed navigation should not stop the router from processing
// further navigations => the catch
return nav.promise.catch(function(){});}else{return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_of__["of"])(null);}}).subscribe(function(){});}/**
     * @param {?} rawUrl
     * @param {?} source
     * @param {?} extras
     * @return {?}
     */},{key:'scheduleNavigation',value:function scheduleNavigation(rawUrl,source,extras){var/** @type {?} */lastNavigation=this.navigations.value;// If the user triggers a navigation imperatively (e.g., by using navigateByUrl),
// and that navigation results in 'replaceState' that leads to the same URL,
// we should skip those.
if(lastNavigation&&source!=='imperative'&&lastNavigation.source==='imperative'&&lastNavigation.rawUrl.toString()===rawUrl.toString()){return null;// return value is not used
}// Because of a bug in IE and Edge, the location class fires two events (popstate and
// hashchange) every single time. The second one should be ignored. Otherwise, the URL will
// flicker.
if(lastNavigation&&source=='hashchange'&&lastNavigation.source==='popstate'&&lastNavigation.rawUrl.toString()===rawUrl.toString()){return null;// return value is not used
}var/** @type {?} */resolve=null;var/** @type {?} */reject=null;var/** @type {?} */promise=new Promise(function(res,rej){resolve=res;reject=rej;});var/** @type {?} */id=++this.navigationId;this.navigations.next({id:id,source:source,rawUrl:rawUrl,extras:extras,resolve:resolve,reject:reject,promise:promise});// Make sure that the error is propagated even though `processNavigations` catch
// handler does not rethrow
return promise.catch(function(e){return Promise.reject(e);});}/**
     * @param {?} __0
     * @return {?}
     */},{key:'executeScheduledNavigation',value:function executeScheduledNavigation(_ref5){var _this21=this;var id=_ref5.id,rawUrl=_ref5.rawUrl,extras=_ref5.extras,resolve=_ref5.resolve,reject=_ref5.reject;var/** @type {?} */url=this.urlHandlingStrategy.extract(rawUrl);var/** @type {?} */urlTransition=!this.navigated||url.toString()!==this.currentUrlTree.toString();if(urlTransition&&this.urlHandlingStrategy.shouldProcessUrl(rawUrl)){this.routerEvents.next(new NavigationStart(id,this.serializeUrl(url)));Promise.resolve().then(function(_){return _this21.runNavigate(url,rawUrl,extras.skipLocationChange,extras.replaceUrl,id,null);}).then(resolve,reject);}else if(urlTransition&&this.rawUrlTree&&this.urlHandlingStrategy.shouldProcessUrl(this.rawUrlTree)){this.routerEvents.next(new NavigationStart(id,this.serializeUrl(url)));Promise.resolve().then(function(_){return _this21.runNavigate(url,rawUrl,false,false,id,createEmptyState(url,_this21.rootComponentType).snapshot);}).then(resolve,reject);}else{this.rawUrlTree=rawUrl;resolve(null);}}/**
     * @param {?} url
     * @param {?} rawUrl
     * @param {?} shouldPreventPushState
     * @param {?} shouldReplaceUrl
     * @param {?} id
     * @param {?} precreatedState
     * @return {?}
     */},{key:'runNavigate',value:function runNavigate(url,rawUrl,shouldPreventPushState,shouldReplaceUrl,id,precreatedState){var _this22=this;if(id!==this.navigationId){this.location.go(this.urlSerializer.serialize(this.currentUrlTree));this.routerEvents.next(new NavigationCancel(id,this.serializeUrl(url),'Navigation ID '+id+' is not equal to the current navigation id '+this.navigationId));return Promise.resolve(false);}return new Promise(function(resolvePromise,rejectPromise){// create an observable of the url and route state snapshot
// this operation do not result in any side effects
var/** @type {?} */urlAndSnapshot$=void 0;if(!precreatedState){var/** @type {?} */redirectsApplied$=applyRedirects(_this22.injector,_this22.configLoader,_this22.urlSerializer,url,_this22.config);urlAndSnapshot$=__WEBPACK_IMPORTED_MODULE_10_rxjs_operator_mergeMap__["mergeMap"].call(redirectsApplied$,function(appliedUrl){return __WEBPACK_IMPORTED_MODULE_9_rxjs_operator_map__["map"].call(recognize(_this22.rootComponentType,_this22.config,appliedUrl,_this22.serializeUrl(appliedUrl)),function(snapshot){_this22.routerEvents.next(new RoutesRecognized(id,_this22.serializeUrl(url),_this22.serializeUrl(appliedUrl),snapshot));return{appliedUrl:appliedUrl,snapshot:snapshot};});});}else{urlAndSnapshot$=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_of__["of"])({appliedUrl:url,snapshot:precreatedState});}// run preactivation: guards and data resolvers
var/** @type {?} */preActivation=void 0;var/** @type {?} */preactivationTraverse$=__WEBPACK_IMPORTED_MODULE_9_rxjs_operator_map__["map"].call(urlAndSnapshot$,function(_ref6){var appliedUrl=_ref6.appliedUrl,snapshot=_ref6.snapshot;preActivation=new PreActivation(snapshot,_this22.currentRouterState.snapshot,_this22.injector);preActivation.traverse(_this22.outletMap);return{appliedUrl:appliedUrl,snapshot:snapshot};});var/** @type {?} */preactivationCheckGuards=__WEBPACK_IMPORTED_MODULE_10_rxjs_operator_mergeMap__["mergeMap"].call(preactivationTraverse$,function(_ref7){var appliedUrl=_ref7.appliedUrl,snapshot=_ref7.snapshot;if(_this22.navigationId!==id)return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_of__["of"])(false);return __WEBPACK_IMPORTED_MODULE_9_rxjs_operator_map__["map"].call(preActivation.checkGuards(),function(shouldActivate){return{appliedUrl:appliedUrl,snapshot:snapshot,shouldActivate:shouldActivate};});});var/** @type {?} */preactivationResolveData$=__WEBPACK_IMPORTED_MODULE_10_rxjs_operator_mergeMap__["mergeMap"].call(preactivationCheckGuards,function(p){if(_this22.navigationId!==id)return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_of__["of"])(false);if(p.shouldActivate){return __WEBPACK_IMPORTED_MODULE_9_rxjs_operator_map__["map"].call(preActivation.resolveData(),function(){return p;});}else{return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_of__["of"])(p);}});// create router state
// this operation has side effects => route state is being affected
var/** @type {?} */routerState$=__WEBPACK_IMPORTED_MODULE_9_rxjs_operator_map__["map"].call(preactivationResolveData$,function(_ref8){var appliedUrl=_ref8.appliedUrl,snapshot=_ref8.snapshot,shouldActivate=_ref8.shouldActivate;if(shouldActivate){var/** @type {?} */state=createRouterState(_this22.routeReuseStrategy,snapshot,_this22.currentRouterState);return{appliedUrl:appliedUrl,state:state,shouldActivate:shouldActivate};}else{return{appliedUrl:appliedUrl,state:null,shouldActivate:shouldActivate};}});// applied the new router state
// this operation has side effects
var/** @type {?} */navigationIsSuccessful=void 0;var/** @type {?} */storedState=_this22.currentRouterState;var/** @type {?} */storedUrl=_this22.currentUrlTree;routerState$.forEach(function(_ref9){var appliedUrl=_ref9.appliedUrl,state=_ref9.state,shouldActivate=_ref9.shouldActivate;if(!shouldActivate||id!==_this22.navigationId){navigationIsSuccessful=false;return;}_this22.currentUrlTree=appliedUrl;_this22.rawUrlTree=_this22.urlHandlingStrategy.merge(_this22.currentUrlTree,rawUrl);_this22.currentRouterState=state;if(!shouldPreventPushState){var/** @type {?} */path=_this22.urlSerializer.serialize(_this22.rawUrlTree);if(_this22.location.isCurrentPathEqualTo(path)||shouldReplaceUrl){_this22.location.replaceState(path);}else{_this22.location.go(path);}}new ActivateRoutes(_this22.routeReuseStrategy,state,storedState).activate(_this22.outletMap);navigationIsSuccessful=true;}).then(function(){if(navigationIsSuccessful){_this22.navigated=true;_this22.routerEvents.next(new NavigationEnd(id,_this22.serializeUrl(url),_this22.serializeUrl(_this22.currentUrlTree)));resolvePromise(true);}else{_this22.resetUrlToCurrentUrlTree();_this22.routerEvents.next(new NavigationCancel(id,_this22.serializeUrl(url),''));resolvePromise(false);}},function(e){if(isNavigationCancelingError(e)){_this22.resetUrlToCurrentUrlTree();_this22.navigated=true;_this22.routerEvents.next(new NavigationCancel(id,_this22.serializeUrl(url),e.message));resolvePromise(false);}else{_this22.routerEvents.next(new NavigationError(id,_this22.serializeUrl(url),e));try{resolvePromise(_this22.errorHandler(e));}catch(ee){rejectPromise(ee);}}_this22.currentRouterState=storedState;_this22.currentUrlTree=storedUrl;_this22.rawUrlTree=_this22.urlHandlingStrategy.merge(_this22.currentUrlTree,rawUrl);_this22.location.replaceState(_this22.serializeUrl(_this22.rawUrlTree));});});}/**
     * @return {?}
     */},{key:'resetUrlToCurrentUrlTree',value:function resetUrlToCurrentUrlTree(){var/** @type {?} */path=this.urlSerializer.serialize(this.rawUrlTree);this.location.replaceState(path);}},{key:'routerState',get:function get(){return this.currentRouterState;}/**
     * The current url
     * @return {?}
     */},{key:'url',get:function get(){return this.serializeUrl(this.currentUrlTree);}/**
     * An observable of router events
     * @return {?}
     */},{key:'events',get:function get(){return this.routerEvents;}}]);return Router;}();var CanActivate=function(){/**
     * @param {?} path
     */function CanActivate(path){_classCallCheck(this,CanActivate);this.path=path;}/**
     * @return {?}
     */_createClass(CanActivate,[{key:'route',get:function get(){return this.path[this.path.length-1];}}]);return CanActivate;}();var CanDeactivate=/**
     * @param {?} component
     * @param {?} route
     */function CanDeactivate(component,route){_classCallCheck(this,CanDeactivate);this.component=component;this.route=route;};var PreActivation=function(){/**
     * @param {?} future
     * @param {?} curr
     * @param {?} injector
     */function PreActivation(future,curr,injector){_classCallCheck(this,PreActivation);this.future=future;this.curr=curr;this.injector=injector;this.checks=[];}/**
     * @param {?} parentOutletMap
     * @return {?}
     */_createClass(PreActivation,[{key:'traverse',value:function traverse(parentOutletMap){var/** @type {?} */futureRoot=this.future._root;var/** @type {?} */currRoot=this.curr?this.curr._root:null;this.traverseChildRoutes(futureRoot,currRoot,parentOutletMap,[futureRoot.value]);}/**
     * @return {?}
     */},{key:'checkGuards',value:function checkGuards(){var _this23=this;if(this.checks.length===0)return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_of__["of"])(true);var/** @type {?} */checks$=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_rxjs_observable_from__["from"])(this.checks);var/** @type {?} */runningChecks$=__WEBPACK_IMPORTED_MODULE_10_rxjs_operator_mergeMap__["mergeMap"].call(checks$,function(s){if(s instanceof CanActivate){return andObservables(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_rxjs_observable_from__["from"])([_this23.runCanActivateChild(s.path),_this23.runCanActivate(s.route)]));}else if(s instanceof CanDeactivate){// workaround https://github.com/Microsoft/TypeScript/issues/7271
var/** @type {?} */s2=s;return _this23.runCanDeactivate(s2.component,s2.route);}else{throw new Error('Cannot be reached');}});return __WEBPACK_IMPORTED_MODULE_7_rxjs_operator_every__["every"].call(runningChecks$,function(result){return result===true;});}/**
     * @return {?}
     */},{key:'resolveData',value:function resolveData(){var _this24=this;if(this.checks.length===0)return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_of__["of"])(null);var/** @type {?} */checks$=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_rxjs_observable_from__["from"])(this.checks);var/** @type {?} */runningChecks$=__WEBPACK_IMPORTED_MODULE_6_rxjs_operator_concatMap__["concatMap"].call(checks$,function(s){if(s instanceof CanActivate){return _this24.runResolve(s.route);}else{return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_of__["of"])(null);}});return __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_reduce__["reduce"].call(runningChecks$,function(_,__){return _;});}/**
     * @param {?} futureNode
     * @param {?} currNode
     * @param {?} outletMap
     * @param {?} futurePath
     * @return {?}
     */},{key:'traverseChildRoutes',value:function traverseChildRoutes(futureNode,currNode,outletMap,futurePath){var _this25=this;var/** @type {?} */prevChildren=nodeChildrenAsMap(currNode);futureNode.children.forEach(function(c){_this25.traverseRoutes(c,prevChildren[c.value.outlet],outletMap,futurePath.concat([c.value]));delete prevChildren[c.value.outlet];});forEach(prevChildren,function(v,k){return _this25.deactiveRouteAndItsChildren(v,outletMap._outlets[k]);});}/**
     * @param {?} futureNode
     * @param {?} currNode
     * @param {?} parentOutletMap
     * @param {?} futurePath
     * @return {?}
     */},{key:'traverseRoutes',value:function traverseRoutes(futureNode,currNode,parentOutletMap,futurePath){var/** @type {?} */future=futureNode.value;var/** @type {?} */curr=currNode?currNode.value:null;var/** @type {?} */outlet=parentOutletMap?parentOutletMap._outlets[futureNode.value.outlet]:null;// reusing the node
if(curr&&future._routeConfig===curr._routeConfig){if(this.shouldRunGuardsAndResolvers(curr,future,future._routeConfig.runGuardsAndResolvers)){this.checks.push(new CanDeactivate(outlet.component,curr),new CanActivate(futurePath));}else{// we need to set the data
future.data=curr.data;future._resolvedData=curr._resolvedData;}// If we have a component, we need to go through an outlet.
if(future.component){this.traverseChildRoutes(futureNode,currNode,outlet?outlet.outletMap:null,futurePath);}else{this.traverseChildRoutes(futureNode,currNode,parentOutletMap,futurePath);}}else{if(curr){this.deactiveRouteAndItsChildren(currNode,outlet);}this.checks.push(new CanActivate(futurePath));// If we have a component, we need to go through an outlet.
if(future.component){this.traverseChildRoutes(futureNode,null,outlet?outlet.outletMap:null,futurePath);}else{this.traverseChildRoutes(futureNode,null,parentOutletMap,futurePath);}}}/**
     * @param {?} curr
     * @param {?} future
     * @param {?} mode
     * @return {?}
     */},{key:'shouldRunGuardsAndResolvers',value:function shouldRunGuardsAndResolvers(curr,future,mode){switch(mode){case'always':return true;case'paramsOrQueryParamsChange':return!equalParamsAndUrlSegments(curr,future)||!shallowEqual(curr.queryParams,future.queryParams);case'paramsChange':default:return!equalParamsAndUrlSegments(curr,future);}}/**
     * @param {?} route
     * @param {?} outlet
     * @return {?}
     */},{key:'deactiveRouteAndItsChildren',value:function deactiveRouteAndItsChildren(route,outlet){var _this26=this;var/** @type {?} */prevChildren=nodeChildrenAsMap(route);var/** @type {?} */r=route.value;forEach(prevChildren,function(v,k){if(!r.component){_this26.deactiveRouteAndItsChildren(v,outlet);}else if(!!outlet){_this26.deactiveRouteAndItsChildren(v,outlet.outletMap._outlets[k]);}else{_this26.deactiveRouteAndItsChildren(v,null);}});if(!r.component){this.checks.push(new CanDeactivate(null,r));}else if(outlet&&outlet.isActivated){this.checks.push(new CanDeactivate(outlet.component,r));}else{this.checks.push(new CanDeactivate(null,r));}}/**
     * @param {?} future
     * @return {?}
     */},{key:'runCanActivate',value:function runCanActivate(future){var _this27=this;var/** @type {?} */canActivate=future._routeConfig?future._routeConfig.canActivate:null;if(!canActivate||canActivate.length===0)return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_of__["of"])(true);var/** @type {?} */obs=__WEBPACK_IMPORTED_MODULE_9_rxjs_operator_map__["map"].call(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_rxjs_observable_from__["from"])(canActivate),function(c){var/** @type {?} */guard=_this27.getToken(c,future);var/** @type {?} */observable=void 0;if(guard.canActivate){observable=wrapIntoObservable(guard.canActivate(future,_this27.future));}else{observable=wrapIntoObservable(guard(future,_this27.future));}return __WEBPACK_IMPORTED_MODULE_8_rxjs_operator_first__["first"].call(observable);});return andObservables(obs);}/**
     * @param {?} path
     * @return {?}
     */},{key:'runCanActivateChild',value:function runCanActivateChild(path){var _this28=this;var/** @type {?} */future=path[path.length-1];var/** @type {?} */canActivateChildGuards=path.slice(0,path.length-1).reverse().map(function(p){return _this28.extractCanActivateChild(p);}).filter(function(_){return _!==null;});return andObservables(__WEBPACK_IMPORTED_MODULE_9_rxjs_operator_map__["map"].call(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_rxjs_observable_from__["from"])(canActivateChildGuards),function(d){var/** @type {?} */obs=__WEBPACK_IMPORTED_MODULE_9_rxjs_operator_map__["map"].call(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_rxjs_observable_from__["from"])(d.guards),function(c){var/** @type {?} */guard=_this28.getToken(c,d.node);var/** @type {?} */observable=void 0;if(guard.canActivateChild){observable=wrapIntoObservable(guard.canActivateChild(future,_this28.future));}else{observable=wrapIntoObservable(guard(future,_this28.future));}return __WEBPACK_IMPORTED_MODULE_8_rxjs_operator_first__["first"].call(observable);});return andObservables(obs);}));}/**
     * @param {?} p
     * @return {?}
     */},{key:'extractCanActivateChild',value:function extractCanActivateChild(p){var/** @type {?} */canActivateChild=p._routeConfig?p._routeConfig.canActivateChild:null;if(!canActivateChild||canActivateChild.length===0)return null;return{node:p,guards:canActivateChild};}/**
     * @param {?} component
     * @param {?} curr
     * @return {?}
     */},{key:'runCanDeactivate',value:function runCanDeactivate(component,curr){var _this29=this;var/** @type {?} */canDeactivate=curr&&curr._routeConfig?curr._routeConfig.canDeactivate:null;if(!canDeactivate||canDeactivate.length===0)return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_of__["of"])(true);var/** @type {?} */canDeactivate$=__WEBPACK_IMPORTED_MODULE_10_rxjs_operator_mergeMap__["mergeMap"].call(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_rxjs_observable_from__["from"])(canDeactivate),function(c){var/** @type {?} */guard=_this29.getToken(c,curr);var/** @type {?} */observable=void 0;if(guard.canDeactivate){observable=wrapIntoObservable(guard.canDeactivate(component,curr,_this29.curr,_this29.future));}else{observable=wrapIntoObservable(guard(component,curr,_this29.curr,_this29.future));}return __WEBPACK_IMPORTED_MODULE_8_rxjs_operator_first__["first"].call(observable);});return __WEBPACK_IMPORTED_MODULE_7_rxjs_operator_every__["every"].call(canDeactivate$,function(result){return result===true;});}/**
     * @param {?} future
     * @return {?}
     */},{key:'runResolve',value:function runResolve(future){var/** @type {?} */resolve=future._resolve;return __WEBPACK_IMPORTED_MODULE_9_rxjs_operator_map__["map"].call(this.resolveNode(resolve,future),function(resolvedData){future._resolvedData=resolvedData;future.data=merge(future.data,inheritedParamsDataResolve(future).resolve);return null;});}/**
     * @param {?} resolve
     * @param {?} future
     * @return {?}
     */},{key:'resolveNode',value:function resolveNode(resolve,future){var _this30=this;return waitForMap(resolve,function(k,v){var/** @type {?} */resolver=_this30.getToken(v,future);return resolver.resolve?wrapIntoObservable(resolver.resolve(future,_this30.future)):wrapIntoObservable(resolver(future,_this30.future));});}/**
     * @param {?} token
     * @param {?} snapshot
     * @return {?}
     */},{key:'getToken',value:function getToken(token,snapshot){var/** @type {?} */config=closestLoadedConfig(snapshot);var/** @type {?} */injector=config?config.injector:this.injector;return injector.get(token);}}]);return PreActivation;}();var ActivateRoutes=function(){/**
     * @param {?} routeReuseStrategy
     * @param {?} futureState
     * @param {?} currState
     */function ActivateRoutes(routeReuseStrategy,futureState,currState){_classCallCheck(this,ActivateRoutes);this.routeReuseStrategy=routeReuseStrategy;this.futureState=futureState;this.currState=currState;}/**
     * @param {?} parentOutletMap
     * @return {?}
     */_createClass(ActivateRoutes,[{key:'activate',value:function activate(parentOutletMap){var/** @type {?} */futureRoot=this.futureState._root;var/** @type {?} */currRoot=this.currState?this.currState._root:null;this.deactivateChildRoutes(futureRoot,currRoot,parentOutletMap);advanceActivatedRoute(this.futureState.root);this.activateChildRoutes(futureRoot,currRoot,parentOutletMap);}/**
     * @param {?} futureNode
     * @param {?} currNode
     * @param {?} outletMap
     * @return {?}
     */},{key:'deactivateChildRoutes',value:function deactivateChildRoutes(futureNode,currNode,outletMap){var _this31=this;var/** @type {?} */prevChildren=nodeChildrenAsMap(currNode);futureNode.children.forEach(function(c){_this31.deactivateRoutes(c,prevChildren[c.value.outlet],outletMap);delete prevChildren[c.value.outlet];});forEach(prevChildren,function(v,k){return _this31.deactiveRouteAndItsChildren(v,outletMap);});}/**
     * @param {?} futureNode
     * @param {?} currNode
     * @param {?} outletMap
     * @return {?}
     */},{key:'activateChildRoutes',value:function activateChildRoutes(futureNode,currNode,outletMap){var _this32=this;var/** @type {?} */prevChildren=nodeChildrenAsMap(currNode);futureNode.children.forEach(function(c){_this32.activateRoutes(c,prevChildren[c.value.outlet],outletMap);});}/**
     * @param {?} futureNode
     * @param {?} currNode
     * @param {?} parentOutletMap
     * @return {?}
     */},{key:'deactivateRoutes',value:function deactivateRoutes(futureNode,currNode,parentOutletMap){var/** @type {?} */future=futureNode.value;var/** @type {?} */curr=currNode?currNode.value:null;// reusing the node
if(future===curr){// If we have a normal route, we need to go through an outlet.
if(future.component){var/** @type {?} */outlet=getOutlet(parentOutletMap,future);this.deactivateChildRoutes(futureNode,currNode,outlet.outletMap);}else{this.deactivateChildRoutes(futureNode,currNode,parentOutletMap);}}else{if(curr){this.deactiveRouteAndItsChildren(currNode,parentOutletMap);}}}/**
     * @param {?} futureNode
     * @param {?} currNode
     * @param {?} parentOutletMap
     * @return {?}
     */},{key:'activateRoutes',value:function activateRoutes(futureNode,currNode,parentOutletMap){var/** @type {?} */future=futureNode.value;var/** @type {?} */curr=currNode?currNode.value:null;// reusing the node
if(future===curr){// advance the route to push the parameters
advanceActivatedRoute(future);// If we have a normal route, we need to go through an outlet.
if(future.component){var/** @type {?} */outlet=getOutlet(parentOutletMap,future);this.activateChildRoutes(futureNode,currNode,outlet.outletMap);}else{this.activateChildRoutes(futureNode,currNode,parentOutletMap);}}else{// if we have a normal route, we need to advance the route
// and place the component into the outlet. After that recurse.
if(future.component){advanceActivatedRoute(future);var/** @type {?} */_outlet=getOutlet(parentOutletMap,futureNode.value);if(this.routeReuseStrategy.shouldAttach(future.snapshot)){var/** @type {?} */stored=this.routeReuseStrategy.retrieve(future.snapshot);this.routeReuseStrategy.store(future.snapshot,null);_outlet.attach(stored.componentRef,stored.route.value);advanceActivatedRouteNodeAndItsChildren(stored.route);}else{var/** @type {?} */outletMap=new RouterOutletMap();this.placeComponentIntoOutlet(outletMap,future,_outlet);this.activateChildRoutes(futureNode,null,outletMap);}}else{advanceActivatedRoute(future);this.activateChildRoutes(futureNode,null,parentOutletMap);}}}/**
     * @param {?} outletMap
     * @param {?} future
     * @param {?} outlet
     * @return {?}
     */},{key:'placeComponentIntoOutlet',value:function placeComponentIntoOutlet(outletMap,future,outlet){var/** @type {?} */resolved=[{provide:ActivatedRoute,useValue:future},{provide:RouterOutletMap,useValue:outletMap}];var/** @type {?} */config=parentLoadedConfig(future.snapshot);var/** @type {?} */resolver=null;var/** @type {?} */injector=null;if(config){injector=config.injectorFactory(outlet.locationInjector);resolver=config.factoryResolver;resolved.push({provide:__WEBPACK_IMPORTED_MODULE_1__angular_core__["e" /* ComponentFactoryResolver */],useValue:resolver});}else{injector=outlet.locationInjector;resolver=outlet.locationFactoryResolver;}outlet.activate(future,resolver,injector,__WEBPACK_IMPORTED_MODULE_1__angular_core__["c" /* ReflectiveInjector */].resolve(resolved),outletMap);}/**
     * @param {?} route
     * @param {?} parentOutletMap
     * @return {?}
     */},{key:'deactiveRouteAndItsChildren',value:function deactiveRouteAndItsChildren(route,parentOutletMap){if(this.routeReuseStrategy.shouldDetach(route.value.snapshot)){this.detachAndStoreRouteSubtree(route,parentOutletMap);}else{this.deactiveRouteAndOutlet(route,parentOutletMap);}}/**
     * @param {?} route
     * @param {?} parentOutletMap
     * @return {?}
     */},{key:'detachAndStoreRouteSubtree',value:function detachAndStoreRouteSubtree(route,parentOutletMap){var/** @type {?} */outlet=getOutlet(parentOutletMap,route.value);var/** @type {?} */componentRef=outlet.detach();this.routeReuseStrategy.store(route.value.snapshot,{componentRef:componentRef,route:route});}/**
     * @param {?} route
     * @param {?} parentOutletMap
     * @return {?}
     */},{key:'deactiveRouteAndOutlet',value:function deactiveRouteAndOutlet(route,parentOutletMap){var _this33=this;var/** @type {?} */prevChildren=nodeChildrenAsMap(route);var/** @type {?} */outlet=null;// getOutlet throws when cannot find the right outlet,
// which can happen if an outlet was in an NgIf and was removed
try{outlet=getOutlet(parentOutletMap,route.value);}catch(e){return;}var/** @type {?} */childOutletMap=outlet.outletMap;forEach(prevChildren,function(v,k){if(route.value.component){_this33.deactiveRouteAndItsChildren(v,childOutletMap);}else{_this33.deactiveRouteAndItsChildren(v,parentOutletMap);}});if(outlet&&outlet.isActivated){outlet.deactivate();}}}]);return ActivateRoutes;}();/**
 * @param {?} node
 * @return {?}
 */function advanceActivatedRouteNodeAndItsChildren(node){advanceActivatedRoute(node.value);node.children.forEach(advanceActivatedRouteNodeAndItsChildren);}/**
 * @param {?} snapshot
 * @return {?}
 */function parentLoadedConfig(snapshot){var/** @type {?} */s=snapshot.parent;while(s){var/** @type {?} */c=s._routeConfig;if(c&&c._loadedConfig)return c._loadedConfig;if(c&&c.component)return null;s=s.parent;}return null;}/**
 * @param {?} snapshot
 * @return {?}
 */function closestLoadedConfig(snapshot){if(!snapshot)return null;var/** @type {?} */s=snapshot.parent;while(s){var/** @type {?} */c=s._routeConfig;if(c&&c._loadedConfig)return c._loadedConfig;s=s.parent;}return null;}/**
 * @param {?} node
 * @return {?}
 */function nodeChildrenAsMap(node){return node?node.children.reduce(function(m,c){m[c.value.outlet]=c;return m;},{}):{};}/**
 * @param {?} outletMap
 * @param {?} route
 * @return {?}
 */function getOutlet(outletMap,route){var/** @type {?} */outlet=outletMap._outlets[route.outlet];if(!outlet){var/** @type {?} */componentName=route.component.name;if(route.outlet===PRIMARY_OUTLET){throw new Error('Cannot find primary outlet to load \''+componentName+'\'');}else{throw new Error('Cannot find the outlet '+route.outlet+' to load \''+componentName+'\'');}}return outlet;}/**
 * @param {?} commands
 * @return {?}
 */function validateCommands(commands){for(var/** @type {?} */i=0;i<commands.length;i++){var/** @type {?} */cmd=commands[i];if(cmd==null){throw new Error('The requested path contains '+cmd+' segment at index '+i);}}}/**
 * \@whatItDoes Lets you link to specific parts of your app.
 *
 * \@howToUse
 *
 * Consider the following route configuration:
 * `[{ path: 'user/:name', component: UserCmp }]`
 *
 * When linking to this `user/:name` route, you can write:
 * `<a routerLink='/user/bob'>link to user component</a>`
 *
 * \@description
 *
 * The RouterLink directives let you link to specific parts of your app.
 *
 * When the link is static, you can use the directive as follows:
 * `<a routerLink="/user/bob">link to user component</a>`
 *
 * If you use dynamic values to generate the link, you can pass an array of path
 * segments, followed by the params for each segment.
 *
 * For instance `['/team', teamId, 'user', userName, {details: true}]`
 * means that we want to generate a link to `/team/11/user/bob;details=true`.
 *
 * Multiple static segments can be merged into one
 * (e.g., `['/team/11/user', userName, {details: true}]`).
 *
 * The first segment name can be prepended with `/`, `./`, or `../`:
 * * If the first segment begins with `/`, the router will look up the route from the root of the
 *   app.
 * * If the first segment begins with `./`, or doesn't begin with a slash, the router will
 *   instead look in the children of the current activated route.
 * * And if the first segment begins with `../`, the router will go up one level.
 *
 * You can set query params and fragment as follows:
 *
 * ```
 * <a [routerLink]="['/user/bob']" [queryParams]="{debug: true}" fragment="education">
 *   link to user component
 * </a>
 * ```
 * RouterLink will use these to generate this link: `/user/bob#education?debug=true`.
 *
 * (Deprecated in v4.0.0 use `queryParamsHandling` instead) You can also tell the
 * directive to preserve the current query params and fragment:
 *
 * ```
 * <a [routerLink]="['/user/bob']" preserveQueryParams preserveFragment>
 *   link to user component
 * </a>
 * ```
 *
 * You can tell the directive to how to handle queryParams, available options are:
 *  - 'merge' merge the queryParams into the current queryParams
 *  - 'preserve' prserve the current queryParams
 *  - default / '' use the queryParams only
 *  same options for {\@link NavigationExtras.queryParamsHandling}
 *
 * ```
 * <a [routerLink]="['/user/bob']" [queryParams]="{debug: true}" queryParamsHandling="merge">
 *   link to user component
 * </a>
 * ```
 *
 * The router link directive always treats the provided input as a delta to the current url.
 *
 * For instance, if the current url is `/user/(box//aux:team)`.
 *
 * Then the following link `<a [routerLink]="['/user/jim']">Jim</a>` will generate the link
 * `/user/(jim//aux:team)`.
 *
 * \@ngModule RouterModule
 *
 * See {\@link Router.createUrlTree} for more information.
 *
 * \@stable
 */var RouterLink=function(){/**
     * @param {?} router
     * @param {?} route
     * @param {?} tabIndex
     * @param {?} renderer
     * @param {?} el
     */function RouterLink(router,route,tabIndex,renderer,el){_classCallCheck(this,RouterLink);this.router=router;this.route=route;this.commands=[];if(tabIndex==null){renderer.setElementAttribute(el.nativeElement,'tabindex','0');}}/**
     * @param {?} commands
     * @return {?}
     */_createClass(RouterLink,[{key:'onClick',/**
     * @return {?}
     */value:function onClick(){var/** @type {?} */extras={skipLocationChange:attrBoolValue(this.skipLocationChange),replaceUrl:attrBoolValue(this.replaceUrl)};this.router.navigateByUrl(this.urlTree,extras);return true;}/**
     * @return {?}
     */},{key:'routerLink',set:function set(commands){if(commands!=null){this.commands=Array.isArray(commands)?commands:[commands];}else{this.commands=[];}}/**
     * @deprecated 4.0.0 use `queryParamsHandling` instead.
     * @param {?} value
     * @return {?}
     */},{key:'preserveQueryParams',set:function set(value){if(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["p" /* isDevMode */])()&&console&&console.warn){console.warn('preserveQueryParams is deprecated!, use queryParamsHandling instead.');}this.preserve=value;}},{key:'urlTree',get:function get(){return this.router.createUrlTree(this.commands,{relativeTo:this.route,queryParams:this.queryParams,fragment:this.fragment,preserveQueryParams:attrBoolValue(this.preserve),queryParamsHandling:this.queryParamsHandling,preserveFragment:attrBoolValue(this.preserveFragment)});}}]);return RouterLink;}();RouterLink.decorators=[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["q" /* Directive */],args:[{selector:':not(a)[routerLink]'}]}];/** @nocollapse */RouterLink.ctorParameters=function(){return[{type:Router},{type:ActivatedRoute},{type:undefined,decorators:[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["r" /* Attribute */],args:['tabindex']}]},{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["s" /* Renderer */]},{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["t" /* ElementRef */]}];};RouterLink.propDecorators={'queryParams':[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["u" /* Input */]}],'fragment':[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["u" /* Input */]}],'queryParamsHandling':[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["u" /* Input */]}],'preserveFragment':[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["u" /* Input */]}],'skipLocationChange':[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["u" /* Input */]}],'replaceUrl':[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["u" /* Input */]}],'routerLink':[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["u" /* Input */]}],'preserveQueryParams':[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["u" /* Input */]}],'onClick':[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["v" /* HostListener */],args:['click']}]};/**
 * \@whatItDoes Lets you link to specific parts of your app.
 *
 * See {\@link RouterLink} for more information.
 *
 * \@ngModule RouterModule
 *
 * \@stable
 */var RouterLinkWithHref=function(){/**
     * @param {?} router
     * @param {?} route
     * @param {?} locationStrategy
     */function RouterLinkWithHref(router,route,locationStrategy){var _this34=this;_classCallCheck(this,RouterLinkWithHref);this.router=router;this.route=route;this.locationStrategy=locationStrategy;this.commands=[];this.subscription=router.events.subscribe(function(s){if(s instanceof NavigationEnd){_this34.updateTargetUrlAndHref();}});}/**
     * @param {?} commands
     * @return {?}
     */_createClass(RouterLinkWithHref,[{key:'ngOnChanges',/**
     * @param {?} changes
     * @return {?}
     */value:function ngOnChanges(changes){this.updateTargetUrlAndHref();}/**
     * @return {?}
     */},{key:'ngOnDestroy',value:function ngOnDestroy(){this.subscription.unsubscribe();}/**
     * @param {?} button
     * @param {?} ctrlKey
     * @param {?} metaKey
     * @return {?}
     */},{key:'onClick',value:function onClick(button,ctrlKey,metaKey){if(button!==0||ctrlKey||metaKey){return true;}if(typeof this.target==='string'&&this.target!='_self'){return true;}var/** @type {?} */extras={skipLocationChange:attrBoolValue(this.skipLocationChange),replaceUrl:attrBoolValue(this.replaceUrl)};this.router.navigateByUrl(this.urlTree,extras);return false;}/**
     * @return {?}
     */},{key:'updateTargetUrlAndHref',value:function updateTargetUrlAndHref(){this.href=this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));}/**
     * @return {?}
     */},{key:'routerLink',set:function set(commands){if(commands!=null){this.commands=Array.isArray(commands)?commands:[commands];}else{this.commands=[];}}/**
     * @param {?} value
     * @return {?}
     */},{key:'preserveQueryParams',set:function set(value){if(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["p" /* isDevMode */])()&&console&&console.warn){console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');}this.preserve=value;}},{key:'urlTree',get:function get(){return this.router.createUrlTree(this.commands,{relativeTo:this.route,queryParams:this.queryParams,fragment:this.fragment,preserveQueryParams:attrBoolValue(this.preserve),queryParamsHandling:this.queryParamsHandling,preserveFragment:attrBoolValue(this.preserveFragment)});}}]);return RouterLinkWithHref;}();RouterLinkWithHref.decorators=[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["q" /* Directive */],args:[{selector:'a[routerLink]'}]}];/** @nocollapse */RouterLinkWithHref.ctorParameters=function(){return[{type:Router},{type:ActivatedRoute},{type:__WEBPACK_IMPORTED_MODULE_0__angular_common__["a" /* LocationStrategy */]}];};RouterLinkWithHref.propDecorators={'target':[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["w" /* HostBinding */],args:['attr.target']},{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["u" /* Input */]}],'queryParams':[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["u" /* Input */]}],'fragment':[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["u" /* Input */]}],'queryParamsHandling':[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["u" /* Input */]}],'preserveFragment':[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["u" /* Input */]}],'skipLocationChange':[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["u" /* Input */]}],'replaceUrl':[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["u" /* Input */]}],'href':[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["w" /* HostBinding */]}],'routerLink':[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["u" /* Input */]}],'preserveQueryParams':[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["u" /* Input */]}],'onClick':[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["v" /* HostListener */],args:['click',['$event.button','$event.ctrlKey','$event.metaKey']]}]};/**
 * @param {?} s
 * @return {?}
 */function attrBoolValue(s){return s===''||!!s;}/**
 * \@whatItDoes Lets you add a CSS class to an element when the link's route becomes active.
 *
 * \@howToUse
 *
 * ```
 * <a routerLink="/user/bob" routerLinkActive="active-link">Bob</a>
 * ```
 *
 * \@description
 *
 * The RouterLinkActive directive lets you add a CSS class to an element when the link's route
 * becomes active.
 *
 * Consider the following example:
 *
 * ```
 * <a routerLink="/user/bob" routerLinkActive="active-link">Bob</a>
 * ```
 *
 * When the url is either '/user' or '/user/bob', the active-link class will
 * be added to the `a` tag. If the url changes, the class will be removed.
 *
 * You can set more than one class, as follows:
 *
 * ```
 * <a routerLink="/user/bob" routerLinkActive="class1 class2">Bob</a>
 * <a routerLink="/user/bob" [routerLinkActive]="['class1', 'class2']">Bob</a>
 * ```
 *
 * You can configure RouterLinkActive by passing `exact: true`. This will add the classes
 * only when the url matches the link exactly.
 *
 * ```
 * <a routerLink="/user/bob" routerLinkActive="active-link" [routerLinkActiveOptions]="{exact:
 * true}">Bob</a>
 * ```
 *
 * You can assign the RouterLinkActive instance to a template variable and directly check
 * the `isActive` status.
 * ```
 * <a routerLink="/user/bob" routerLinkActive #rla="routerLinkActive">
 *   Bob {{ rla.isActive ? '(already open)' : ''}}
 * </a>
 * ```
 *
 * Finally, you can apply the RouterLinkActive directive to an ancestor of a RouterLink.
 *
 * ```
 * <div routerLinkActive="active-link" [routerLinkActiveOptions]="{exact: true}">
 *   <a routerLink="/user/jim">Jim</a>
 *   <a routerLink="/user/bob">Bob</a>
 * </div>
 * ```
 *
 * This will set the active-link class on the div tag if the url is either '/user/jim' or
 * '/user/bob'.
 *
 * \@ngModule RouterModule
 *
 * \@stable
 */var RouterLinkActive=function(){/**
     * @param {?} router
     * @param {?} element
     * @param {?} renderer
     * @param {?} cdr
     */function RouterLinkActive(router,element,renderer,cdr){var _this35=this;_classCallCheck(this,RouterLinkActive);this.router=router;this.element=element;this.renderer=renderer;this.cdr=cdr;this.classes=[];this.active=false;this.routerLinkActiveOptions={exact:false};this.subscription=router.events.subscribe(function(s){if(s instanceof NavigationEnd){_this35.update();}});}/**
     * @return {?}
     */_createClass(RouterLinkActive,[{key:'ngAfterContentInit',/**
     * @return {?}
     */value:function ngAfterContentInit(){var _this36=this;this.links.changes.subscribe(function(_){return _this36.update();});this.linksWithHrefs.changes.subscribe(function(_){return _this36.update();});this.update();}/**
     * @param {?} data
     * @return {?}
     */},{key:'ngOnChanges',/**
     * @param {?} changes
     * @return {?}
     */value:function ngOnChanges(changes){this.update();}/**
     * @return {?}
     */},{key:'ngOnDestroy',value:function ngOnDestroy(){this.subscription.unsubscribe();}/**
     * @return {?}
     */},{key:'update',value:function update(){var _this37=this;if(!this.links||!this.linksWithHrefs||!this.router.navigated)return;var/** @type {?} */hasActiveLinks=this.hasActiveLinks();// react only when status has changed to prevent unnecessary dom updates
if(this.active!==hasActiveLinks){this.active=hasActiveLinks;this.classes.forEach(function(c){return _this37.renderer.setElementClass(_this37.element.nativeElement,c,hasActiveLinks);});this.cdr.detectChanges();}}/**
     * @param {?} router
     * @return {?}
     */},{key:'isLinkActive',value:function isLinkActive(router){var _this38=this;return function(link){return router.isActive(link.urlTree,_this38.routerLinkActiveOptions.exact);};}/**
     * @return {?}
     */},{key:'hasActiveLinks',value:function hasActiveLinks(){return this.links.some(this.isLinkActive(this.router))||this.linksWithHrefs.some(this.isLinkActive(this.router));}},{key:'isActive',get:function get(){return this.active;}},{key:'routerLinkActive',set:function set(data){var/** @type {?} */classes=Array.isArray(data)?data:data.split(' ');this.classes=classes.filter(function(c){return!!c;});}}]);return RouterLinkActive;}();RouterLinkActive.decorators=[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["q" /* Directive */],args:[{selector:'[routerLinkActive]',exportAs:'routerLinkActive'}]}];/** @nocollapse */RouterLinkActive.ctorParameters=function(){return[{type:Router},{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["t" /* ElementRef */]},{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["s" /* Renderer */]},{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["x" /* ChangeDetectorRef */]}];};RouterLinkActive.propDecorators={'links':[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["y" /* ContentChildren */],args:[RouterLink,{descendants:true}]}],'linksWithHrefs':[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["y" /* ContentChildren */],args:[RouterLinkWithHref,{descendants:true}]}],'routerLinkActiveOptions':[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["u" /* Input */]}],'routerLinkActive':[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["u" /* Input */]}]};/**
 * \@whatItDoes Acts as a placeholder that Angular dynamically fills based on the current router
 * state.
 *
 * \@howToUse
 *
 * ```
 * <router-outlet></router-outlet>
 * <router-outlet name='left'></router-outlet>
 * <router-outlet name='right'></router-outlet>
 * ```
 *
 * A router outlet will emit an activate event any time a new component is being instantiated,
 * and a deactivate event when it is being destroyed.
 *
 * ```
 * <router-outlet
 *   (activate)='onActivate($event)'
 *   (deactivate)='onDeactivate($event)'></router-outlet>
 * ```
 * \@ngModule RouterModule
 *
 * \@stable
 */var RouterOutlet=function(){/**
     * @param {?} parentOutletMap
     * @param {?} location
     * @param {?} resolver
     * @param {?} name
     */function RouterOutlet(parentOutletMap,location,resolver,name){_classCallCheck(this,RouterOutlet);this.parentOutletMap=parentOutletMap;this.location=location;this.resolver=resolver;this.name=name;this.activateEvents=new __WEBPACK_IMPORTED_MODULE_1__angular_core__["g" /* EventEmitter */]();this.deactivateEvents=new __WEBPACK_IMPORTED_MODULE_1__angular_core__["g" /* EventEmitter */]();parentOutletMap.registerOutlet(name?name:PRIMARY_OUTLET,this);}/**
     * @return {?}
     */_createClass(RouterOutlet,[{key:'ngOnDestroy',value:function ngOnDestroy(){this.parentOutletMap.removeOutlet(this.name?this.name:PRIMARY_OUTLET);}/**
     * @return {?}
     */},{key:'detach',/**
     * @return {?}
     */value:function detach(){if(!this.activated)throw new Error('Outlet is not activated');this.location.detach();var/** @type {?} */r=this.activated;this.activated=null;this._activatedRoute=null;return r;}/**
     * @param {?} ref
     * @param {?} activatedRoute
     * @return {?}
     */},{key:'attach',value:function attach(ref,activatedRoute){this.activated=ref;this._activatedRoute=activatedRoute;this.location.insert(ref.hostView);}/**
     * @return {?}
     */},{key:'deactivate',value:function deactivate(){if(this.activated){var/** @type {?} */c=this.component;this.activated.destroy();this.activated=null;this._activatedRoute=null;this.deactivateEvents.emit(c);}}/**
     * @param {?} activatedRoute
     * @param {?} resolver
     * @param {?} injector
     * @param {?} providers
     * @param {?} outletMap
     * @return {?}
     */},{key:'activate',value:function activate(activatedRoute,resolver,injector,providers,outletMap){if(this.isActivated){throw new Error('Cannot activate an already activated outlet');}this.outletMap=outletMap;this._activatedRoute=activatedRoute;var/** @type {?} */snapshot=activatedRoute._futureSnapshot;var/** @type {?} */component=snapshot._routeConfig.component;var/** @type {?} */factory=resolver.resolveComponentFactory(component);var/** @type {?} */inj=__WEBPACK_IMPORTED_MODULE_1__angular_core__["c" /* ReflectiveInjector */].fromResolvedProviders(providers,injector);this.activated=this.location.createComponent(factory,this.location.length,inj,[]);this.activated.changeDetectorRef.detectChanges();this.activateEvents.emit(this.activated.instance);}},{key:'locationInjector',get:function get(){return this.location.injector;}/**
     * @return {?}
     */},{key:'locationFactoryResolver',get:function get(){return this.resolver;}/**
     * @return {?}
     */},{key:'isActivated',get:function get(){return!!this.activated;}/**
     * @return {?}
     */},{key:'component',get:function get(){if(!this.activated)throw new Error('Outlet is not activated');return this.activated.instance;}/**
     * @return {?}
     */},{key:'activatedRoute',get:function get(){if(!this.activated)throw new Error('Outlet is not activated');return this._activatedRoute;}}]);return RouterOutlet;}();RouterOutlet.decorators=[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["q" /* Directive */],args:[{selector:'router-outlet'}]}];/** @nocollapse */RouterOutlet.ctorParameters=function(){return[{type:RouterOutletMap},{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["z" /* ViewContainerRef */]},{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["e" /* ComponentFactoryResolver */]},{type:undefined,decorators:[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["r" /* Attribute */],args:['name']}]}];};RouterOutlet.propDecorators={'activateEvents':[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["A" /* Output */],args:['activate']}],'deactivateEvents':[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["A" /* Output */],args:['deactivate']}]};/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 *//**
 * \@whatItDoes Provides a way to customize when activated routes get reused.
 *
 * \@experimental
 * @abstract
 */var RouteReuseStrategy=function(){function RouteReuseStrategy(){_classCallCheck(this,RouteReuseStrategy);}_createClass(RouteReuseStrategy,[{key:'shouldDetach',/**
     * Determines if this route (and its subtree) should be detached to be reused later
     * @abstract
     * @param {?} route
     * @return {?}
     */value:function shouldDetach(route){}/**
     * Stores the detached route
     * @abstract
     * @param {?} route
     * @param {?} handle
     * @return {?}
     */},{key:'store',value:function store(route,handle){}/**
     * Determines if this route (and its subtree) should be reattached
     * @abstract
     * @param {?} route
     * @return {?}
     */},{key:'shouldAttach',value:function shouldAttach(route){}/**
     * Retrieves the previously stored route
     * @abstract
     * @param {?} route
     * @return {?}
     */},{key:'retrieve',value:function retrieve(route){}/**
     * Determines if a route should be reused
     * @abstract
     * @param {?} future
     * @param {?} curr
     * @return {?}
     */},{key:'shouldReuseRoute',value:function shouldReuseRoute(future,curr){}}]);return RouteReuseStrategy;}();/**
 * \@whatItDoes Provides a preloading strategy.
 *
 * \@experimental
 * @abstract
 */var PreloadingStrategy=function(){function PreloadingStrategy(){_classCallCheck(this,PreloadingStrategy);}_createClass(PreloadingStrategy,[{key:'preload',/**
     * @abstract
     * @param {?} route
     * @param {?} fn
     * @return {?}
     */value:function preload(route,fn){}}]);return PreloadingStrategy;}();/**
 * \@whatItDoes Provides a preloading strategy that preloads all modules as quicky as possible.
 *
 * \@howToUse
 *
 * ```
 * RouteModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})
 * ```
 *
 * \@experimental
 */var PreloadAllModules=function(){function PreloadAllModules(){_classCallCheck(this,PreloadAllModules);}_createClass(PreloadAllModules,[{key:'preload',/**
     * @param {?} route
     * @param {?} fn
     * @return {?}
     */value:function preload(route,fn){return __WEBPACK_IMPORTED_MODULE_13_rxjs_operator_catch__["_catch"].call(fn(),function(){return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_of__["of"])(null);});}}]);return PreloadAllModules;}();/**
 * \@whatItDoes Provides a preloading strategy that does not preload any modules.
 *
 * \@description
 *
 * This strategy is enabled by default.
 *
 * \@experimental
 */var NoPreloading=function(){function NoPreloading(){_classCallCheck(this,NoPreloading);}_createClass(NoPreloading,[{key:'preload',/**
     * @param {?} route
     * @param {?} fn
     * @return {?}
     */value:function preload(route,fn){return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_of__["of"])(null);}}]);return NoPreloading;}();/**
 * The preloader optimistically loads all router configurations to
 * make navigations into lazily-loaded sections of the application faster.
 *
 * The preloader runs in the background. When the router bootstraps, the preloader
 * starts listening to all navigation events. After every such event, the preloader
 * will check if any configurations can be loaded lazily.
 *
 * If a route is protected by `canLoad` guards, the preloaded will not load it.
 *
 * \@stable
 */var RouterPreloader=function(){/**
     * @param {?} router
     * @param {?} moduleLoader
     * @param {?} compiler
     * @param {?} injector
     * @param {?} preloadingStrategy
     */function RouterPreloader(router,moduleLoader,compiler,injector,preloadingStrategy){_classCallCheck(this,RouterPreloader);this.router=router;this.injector=injector;this.preloadingStrategy=preloadingStrategy;var onStartLoad=function onStartLoad(r){return router.triggerEvent(new RouteConfigLoadStart(r));};var onEndLoad=function onEndLoad(r){return router.triggerEvent(new RouteConfigLoadEnd(r));};this.loader=new RouterConfigLoader(moduleLoader,compiler,onStartLoad,onEndLoad);}_createClass(RouterPreloader,[{key:'setUpPreloading',/**
     * @return {?}
     */value:function setUpPreloading(){var _this39=this;var/** @type {?} */navigations=__WEBPACK_IMPORTED_MODULE_20_rxjs_operator_filter__["filter"].call(this.router.events,function(e){return e instanceof NavigationEnd;});this.subscription=__WEBPACK_IMPORTED_MODULE_6_rxjs_operator_concatMap__["concatMap"].call(navigations,function(){return _this39.preload();}).subscribe(function(){});}/**
     * @return {?}
     */},{key:'preload',value:function preload(){return this.processRoutes(this.injector,this.router.config);}/**
     * @return {?}
     */},{key:'ngOnDestroy',value:function ngOnDestroy(){this.subscription.unsubscribe();}/**
     * @param {?} injector
     * @param {?} routes
     * @return {?}
     */},{key:'processRoutes',value:function processRoutes(injector,routes){var/** @type {?} */res=[];var _iteratorNormalCompletion10=true;var _didIteratorError10=false;var _iteratorError10=undefined;try{for(var _iterator10=routes[Symbol.iterator](),_step10;!(_iteratorNormalCompletion10=(_step10=_iterator10.next()).done);_iteratorNormalCompletion10=true){var c=_step10.value;// we already have the config loaded, just recurse
if(c.loadChildren&&!c.canLoad&&c._loadedConfig){var/** @type {?} */childConfig=c._loadedConfig;res.push(this.processRoutes(childConfig.injector,childConfig.routes));}else if(c.loadChildren&&!c.canLoad){res.push(this.preloadConfig(injector,c));}else if(c.children){res.push(this.processRoutes(injector,c.children));}}}catch(err){_didIteratorError10=true;_iteratorError10=err;}finally{try{if(!_iteratorNormalCompletion10&&_iterator10.return){_iterator10.return();}}finally{if(_didIteratorError10){throw _iteratorError10;}}}return __WEBPACK_IMPORTED_MODULE_18_rxjs_operator_mergeAll__["mergeAll"].call(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_rxjs_observable_from__["from"])(res));}/**
     * @param {?} injector
     * @param {?} route
     * @return {?}
     */},{key:'preloadConfig',value:function preloadConfig(injector,route){var _this40=this;return this.preloadingStrategy.preload(route,function(){var/** @type {?} */loaded=_this40.loader.load(injector,route);return __WEBPACK_IMPORTED_MODULE_10_rxjs_operator_mergeMap__["mergeMap"].call(loaded,function(config){var/** @type {?} */c=route;c._loadedConfig=config;return _this40.processRoutes(config.injector,config.routes);});});}}]);return RouterPreloader;}();RouterPreloader.decorators=[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["B" /* Injectable */]}];/** @nocollapse */RouterPreloader.ctorParameters=function(){return[{type:Router},{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["C" /* NgModuleFactoryLoader */]},{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["o" /* Compiler */]},{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["j" /* Injector */]},{type:PreloadingStrategy}];};/**
 * @whatItDoes Contains a list of directives
 * @stable
 */var/** @type {?} */ROUTER_DIRECTIVES=[RouterOutlet,RouterLink,RouterLinkWithHref,RouterLinkActive];/**
 * @whatItDoes Is used in DI to configure the router.
 * @stable
 */var/** @type {?} */ROUTER_CONFIGURATION=new __WEBPACK_IMPORTED_MODULE_1__angular_core__["n" /* InjectionToken */]('ROUTER_CONFIGURATION');/**
 * @docsNotRequired
 */var/** @type {?} */ROUTER_FORROOT_GUARD=new __WEBPACK_IMPORTED_MODULE_1__angular_core__["n" /* InjectionToken */]('ROUTER_FORROOT_GUARD');var/** @type {?} */ROUTER_PROVIDERS=[__WEBPACK_IMPORTED_MODULE_0__angular_common__["b" /* Location */],{provide:UrlSerializer,useClass:DefaultUrlSerializer},{provide:Router,useFactory:setupRouter,deps:[__WEBPACK_IMPORTED_MODULE_1__angular_core__["D" /* ApplicationRef */],UrlSerializer,RouterOutletMap,__WEBPACK_IMPORTED_MODULE_0__angular_common__["b" /* Location */],__WEBPACK_IMPORTED_MODULE_1__angular_core__["j" /* Injector */],__WEBPACK_IMPORTED_MODULE_1__angular_core__["C" /* NgModuleFactoryLoader */],__WEBPACK_IMPORTED_MODULE_1__angular_core__["o" /* Compiler */],ROUTES,ROUTER_CONFIGURATION,[UrlHandlingStrategy,new __WEBPACK_IMPORTED_MODULE_1__angular_core__["E" /* Optional */]()],[RouteReuseStrategy,new __WEBPACK_IMPORTED_MODULE_1__angular_core__["E" /* Optional */]()]]},RouterOutletMap,{provide:ActivatedRoute,useFactory:rootRoute,deps:[Router]},{provide:__WEBPACK_IMPORTED_MODULE_1__angular_core__["C" /* NgModuleFactoryLoader */],useClass:__WEBPACK_IMPORTED_MODULE_1__angular_core__["F" /* SystemJsNgModuleLoader */]},RouterPreloader,NoPreloading,PreloadAllModules,{provide:ROUTER_CONFIGURATION,useValue:{enableTracing:false}}];/**
 * @return {?}
 */function routerNgProbeToken(){return new __WEBPACK_IMPORTED_MODULE_1__angular_core__["G" /* NgProbeToken */]('Router',Router);}/**
 * \@whatItDoes Adds router directives and providers.
 *
 * \@howToUse
 *
 * RouterModule can be imported multiple times: once per lazily-loaded bundle.
 * Since the router deals with a global shared resource--location, we cannot have
 * more than one router service active.
 *
 * That is why there are two ways to create the module: `RouterModule.forRoot` and
 * `RouterModule.forChild`.
 *
 * * `forRoot` creates a module that contains all the directives, the given routes, and the router
 *   service itself.
 * * `forChild` creates a module that contains all the directives and the given routes, but does not
 *   include the router service.
 *
 * When registered at the root, the module should be used as follows
 *
 * ```
 * \@NgModule({
 *   imports: [RouterModule.forRoot(ROUTES)]
 * })
 * class MyNgModule {}
 * ```
 *
 * For submodules and lazy loaded submodules the module should be used as follows:
 *
 * ```
 * \@NgModule({
 *   imports: [RouterModule.forChild(ROUTES)]
 * })
 * class MyNgModule {}
 * ```
 *
 * \@description
 *
 * Managing state transitions is one of the hardest parts of building applications. This is
 * especially true on the web, where you also need to ensure that the state is reflected in the URL.
 * In addition, we often want to split applications into multiple bundles and load them on demand.
 * Doing this transparently is not trivial.
 *
 * The Angular router solves these problems. Using the router, you can declaratively specify
 * application states, manage state transitions while taking care of the URL, and load bundles on
 * demand.
 *
 * [Read this developer guide](https://angular.io/docs/ts/latest/guide/router.html) to get an
 * overview of how the router should be used.
 *
 * \@stable
 */var RouterModule=function(){/**
     * @param {?} guard
     */function RouterModule(guard){_classCallCheck(this,RouterModule);}/**
     * Creates a module with all the router providers and directives. It also optionally sets up an
     * application listener to perform an initial navigation.
     *
     * Options:
     * * `enableTracing` makes the router log all its internal events to the console.
     * * `useHash` enables the location strategy that uses the URL fragment instead of the history
     * API.
     * * `initialNavigation` disables the initial navigation.
     * * `errorHandler` provides a custom error handler.
     * @param {?} routes
     * @param {?=} config
     * @return {?}
     */_createClass(RouterModule,null,[{key:'forRoot',value:function forRoot(routes,config){return{ngModule:RouterModule,providers:[ROUTER_PROVIDERS,provideRoutes(routes),{provide:ROUTER_FORROOT_GUARD,useFactory:provideForRootGuard,deps:[[Router,new __WEBPACK_IMPORTED_MODULE_1__angular_core__["E" /* Optional */](),new __WEBPACK_IMPORTED_MODULE_1__angular_core__["H" /* SkipSelf */]()]]},{provide:ROUTER_CONFIGURATION,useValue:config?config:{}},{provide:__WEBPACK_IMPORTED_MODULE_0__angular_common__["a" /* LocationStrategy */],useFactory:provideLocationStrategy,deps:[__WEBPACK_IMPORTED_MODULE_0__angular_common__["c" /* PlatformLocation */],[new __WEBPACK_IMPORTED_MODULE_1__angular_core__["I" /* Inject */](__WEBPACK_IMPORTED_MODULE_0__angular_common__["d" /* APP_BASE_HREF */]),new __WEBPACK_IMPORTED_MODULE_1__angular_core__["E" /* Optional */]()],ROUTER_CONFIGURATION]},{provide:PreloadingStrategy,useExisting:config&&config.preloadingStrategy?config.preloadingStrategy:NoPreloading},{provide:__WEBPACK_IMPORTED_MODULE_1__angular_core__["G" /* NgProbeToken */],multi:true,useFactory:routerNgProbeToken},provideRouterInitializer()]};}/**
     * Creates a module with all the router directives and a provider registering routes.
     * @param {?} routes
     * @return {?}
     */},{key:'forChild',value:function forChild(routes){return{ngModule:RouterModule,providers:[provideRoutes(routes)]};}}]);return RouterModule;}();RouterModule.decorators=[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["i" /* NgModule */],args:[{declarations:ROUTER_DIRECTIVES,exports:ROUTER_DIRECTIVES}]}];/** @nocollapse */RouterModule.ctorParameters=function(){return[{type:undefined,decorators:[{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["E" /* Optional */]},{type:__WEBPACK_IMPORTED_MODULE_1__angular_core__["I" /* Inject */],args:[ROUTER_FORROOT_GUARD]}]}];};/**
 * @param {?} platformLocationStrategy
 * @param {?} baseHref
 * @param {?=} options
 * @return {?}
 */function provideLocationStrategy(platformLocationStrategy,baseHref){var options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};return options.useHash?new __WEBPACK_IMPORTED_MODULE_0__angular_common__["e" /* HashLocationStrategy */](platformLocationStrategy,baseHref):new __WEBPACK_IMPORTED_MODULE_0__angular_common__["f" /* PathLocationStrategy */](platformLocationStrategy,baseHref);}/**
 * @param {?} router
 * @return {?}
 */function provideForRootGuard(router){if(router){throw new Error('RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.');}return'guarded';}/**
 * \@whatItDoes Registers routes.
 *
 * \@howToUse
 *
 * ```
 * \@NgModule({
 *   imports: [RouterModule.forChild(ROUTES)],
 *   providers: [provideRoutes(EXTRA_ROUTES)]
 * })
 * class MyNgModule {}
 * ```
 *
 * \@stable
 * @param {?} routes
 * @return {?}
 */function provideRoutes(routes){return[{provide:__WEBPACK_IMPORTED_MODULE_1__angular_core__["J" /* ANALYZE_FOR_ENTRY_COMPONENTS */],multi:true,useValue:routes},{provide:ROUTES,multi:true,useValue:routes}];}/**
 * @param {?} ref
 * @param {?} urlSerializer
 * @param {?} outletMap
 * @param {?} location
 * @param {?} injector
 * @param {?} loader
 * @param {?} compiler
 * @param {?} config
 * @param {?=} opts
 * @param {?=} urlHandlingStrategy
 * @param {?=} routeReuseStrategy
 * @return {?}
 */function setupRouter(ref,urlSerializer,outletMap,location,injector,loader,compiler,config){var opts=arguments.length>8&&arguments[8]!==undefined?arguments[8]:{};var urlHandlingStrategy=arguments[9];var routeReuseStrategy=arguments[10];var/** @type {?} */router=new Router(null,urlSerializer,outletMap,location,injector,loader,compiler,flatten(config));if(urlHandlingStrategy){router.urlHandlingStrategy=urlHandlingStrategy;}if(routeReuseStrategy){router.routeReuseStrategy=routeReuseStrategy;}if(opts.errorHandler){router.errorHandler=opts.errorHandler;}if(opts.enableTracing){var/** @type {?} */dom=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_19__angular_platform_browser__["b" /* ɵgetDOM */])();router.events.subscribe(function(e){dom.logGroup('Router Event: '+e.constructor.name);dom.log(e.toString());dom.log(e);dom.logGroupEnd();});}return router;}/**
 * @param {?} router
 * @return {?}
 */function rootRoute(router){return router.routerState.root;}/**
 * @param {?} router
 * @param {?} ref
 * @param {?} preloader
 * @param {?} opts
 * @return {?}
 */function initialRouterNavigation(router,ref,preloader,opts){return function(bootstrappedComponentRef){if(bootstrappedComponentRef!==ref.components[0]){return;}router.resetRootComponentType(ref.componentTypes[0]);preloader.setUpPreloading();if(opts.initialNavigation===false){router.setUpLocationChangeListener();}else{router.initialNavigation();}};}/**
 * A token for the router initializer that will be called after the app is bootstrapped.
 *
 * @experimental
 */var/** @type {?} */ROUTER_INITIALIZER=new __WEBPACK_IMPORTED_MODULE_1__angular_core__["n" /* InjectionToken */]('Router Initializer');/**
 * @return {?}
 */function provideRouterInitializer(){return[{provide:ROUTER_INITIALIZER,useFactory:initialRouterNavigation,deps:[Router,__WEBPACK_IMPORTED_MODULE_1__angular_core__["D" /* ApplicationRef */],RouterPreloader,ROUTER_CONFIGURATION]},{provide:__WEBPACK_IMPORTED_MODULE_1__angular_core__["K" /* APP_BOOTSTRAP_LISTENER */],multi:true,useExisting:ROUTER_INITIALIZER}];}/**
 * @stable
 */var/** @type {?} */VERSION=new __WEBPACK_IMPORTED_MODULE_1__angular_core__["f" /* Version */]('4.0.0-rc.1');


/***/ }),
/* 100 */,
/* 101 */,
/* 102 */,
/* 103 */,
/* 104 */,
/* 105 */,
/* 106 */,
/* 107 */,
/* 108 */,
/* 109 */
/***/ (function(module, exports) {

/**
 * @license AngularJS v1.6.2
 * (c) 2010-2017 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular) {'use strict';

/* global shallowCopy: true */

/**
 * Creates a shallow copy of an object, an array or a primitive.
 *
 * Assumes that there are no proto properties for objects.
 */
function shallowCopy(src, dst) {
  if (isArray(src)) {
    dst = dst || [];

    for (var i = 0, ii = src.length; i < ii; i++) {
      dst[i] = src[i];
    }
  } else if (isObject(src)) {
    dst = dst || {};

    for (var key in src) {
      if (!(key.charAt(0) === '$' && key.charAt(1) === '$')) {
        dst[key] = src[key];
      }
    }
  }

  return dst || src;
}

/* global shallowCopy: false */

// `isArray` and `isObject` are necessary for `shallowCopy()` (included via `src/shallowCopy.js`).
// They are initialized inside the `$RouteProvider`, to ensure `window.angular` is available.
var isArray;
var isObject;
var isDefined;
var noop;

/**
 * @ngdoc module
 * @name ngRoute
 * @description
 *
 * # ngRoute
 *
 * The `ngRoute` module provides routing and deeplinking services and directives for angular apps.
 *
 * ## Example
 * See {@link ngRoute.$route#example $route} for an example of configuring and using `ngRoute`.
 *
 *
 * <div doc-module-components="ngRoute"></div>
 */
/* global -ngRouteModule */
var ngRouteModule = angular.
  module('ngRoute', []).
  provider('$route', $RouteProvider).
  // Ensure `$route` will be instantiated in time to capture the initial `$locationChangeSuccess`
  // event (unless explicitly disabled). This is necessary in case `ngView` is included in an
  // asynchronously loaded template.
  run(instantiateRoute);
var $routeMinErr = angular.$$minErr('ngRoute');
var isEagerInstantiationEnabled;


/**
 * @ngdoc provider
 * @name $routeProvider
 * @this
 *
 * @description
 *
 * Used for configuring routes.
 *
 * ## Example
 * See {@link ngRoute.$route#example $route} for an example of configuring and using `ngRoute`.
 *
 * ## Dependencies
 * Requires the {@link ngRoute `ngRoute`} module to be installed.
 */
function $RouteProvider() {
  isArray = angular.isArray;
  isObject = angular.isObject;
  isDefined = angular.isDefined;
  noop = angular.noop;

  function inherit(parent, extra) {
    return angular.extend(Object.create(parent), extra);
  }

  var routes = {};

  /**
   * @ngdoc method
   * @name $routeProvider#when
   *
   * @param {string} path Route path (matched against `$location.path`). If `$location.path`
   *    contains redundant trailing slash or is missing one, the route will still match and the
   *    `$location.path` will be updated to add or drop the trailing slash to exactly match the
   *    route definition.
   *
   *    * `path` can contain named groups starting with a colon: e.g. `:name`. All characters up
   *        to the next slash are matched and stored in `$routeParams` under the given `name`
   *        when the route matches.
   *    * `path` can contain named groups starting with a colon and ending with a star:
   *        e.g.`:name*`. All characters are eagerly stored in `$routeParams` under the given `name`
   *        when the route matches.
   *    * `path` can contain optional named groups with a question mark: e.g.`:name?`.
   *
   *    For example, routes like `/color/:color/largecode/:largecode*\/edit` will match
   *    `/color/brown/largecode/code/with/slashes/edit` and extract:
   *
   *    * `color: brown`
   *    * `largecode: code/with/slashes`.
   *
   *
   * @param {Object} route Mapping information to be assigned to `$route.current` on route
   *    match.
   *
   *    Object properties:
   *
   *    - `controller` – `{(string|Function)=}` – Controller fn that should be associated with
   *      newly created scope or the name of a {@link angular.Module#controller registered
   *      controller} if passed as a string.
   *    - `controllerAs` – `{string=}` – An identifier name for a reference to the controller.
   *      If present, the controller will be published to scope under the `controllerAs` name.
   *    - `template` – `{(string|Function)=}` – html template as a string or a function that
   *      returns an html template as a string which should be used by {@link
   *      ngRoute.directive:ngView ngView} or {@link ng.directive:ngInclude ngInclude} directives.
   *      This property takes precedence over `templateUrl`.
   *
   *      If `template` is a function, it will be called with the following parameters:
   *
   *      - `{Array.<Object>}` - route parameters extracted from the current
   *        `$location.path()` by applying the current route
   *
   *      One of `template` or `templateUrl` is required.
   *
   *    - `templateUrl` – `{(string|Function)=}` – path or function that returns a path to an html
   *      template that should be used by {@link ngRoute.directive:ngView ngView}.
   *
   *      If `templateUrl` is a function, it will be called with the following parameters:
   *
   *      - `{Array.<Object>}` - route parameters extracted from the current
   *        `$location.path()` by applying the current route
   *
   *      One of `templateUrl` or `template` is required.
   *
   *    - `resolve` - `{Object.<string, Function>=}` - An optional map of dependencies which should
   *      be injected into the controller. If any of these dependencies are promises, the router
   *      will wait for them all to be resolved or one to be rejected before the controller is
   *      instantiated.
   *      If all the promises are resolved successfully, the values of the resolved promises are
   *      injected and {@link ngRoute.$route#$routeChangeSuccess $routeChangeSuccess} event is
   *      fired. If any of the promises are rejected the
   *      {@link ngRoute.$route#$routeChangeError $routeChangeError} event is fired.
   *      For easier access to the resolved dependencies from the template, the `resolve` map will
   *      be available on the scope of the route, under `$resolve` (by default) or a custom name
   *      specified by the `resolveAs` property (see below). This can be particularly useful, when
   *      working with {@link angular.Module#component components} as route templates.<br />
   *      <div class="alert alert-warning">
   *        **Note:** If your scope already contains a property with this name, it will be hidden
   *        or overwritten. Make sure, you specify an appropriate name for this property, that
   *        does not collide with other properties on the scope.
   *      </div>
   *      The map object is:
   *
   *      - `key` – `{string}`: a name of a dependency to be injected into the controller.
   *      - `factory` - `{string|Function}`: If `string` then it is an alias for a service.
   *        Otherwise if function, then it is {@link auto.$injector#invoke injected}
   *        and the return value is treated as the dependency. If the result is a promise, it is
   *        resolved before its value is injected into the controller. Be aware that
   *        `ngRoute.$routeParams` will still refer to the previous route within these resolve
   *        functions.  Use `$route.current.params` to access the new route parameters, instead.
   *
   *    - `resolveAs` - `{string=}` - The name under which the `resolve` map will be available on
   *      the scope of the route. If omitted, defaults to `$resolve`.
   *
   *    - `redirectTo` – `{(string|Function)=}` – value to update
   *      {@link ng.$location $location} path with and trigger route redirection.
   *
   *      If `redirectTo` is a function, it will be called with the following parameters:
   *
   *      - `{Object.<string>}` - route parameters extracted from the current
   *        `$location.path()` by applying the current route templateUrl.
   *      - `{string}` - current `$location.path()`
   *      - `{Object}` - current `$location.search()`
   *
   *      The custom `redirectTo` function is expected to return a string which will be used
   *      to update `$location.url()`. If the function throws an error, no further processing will
   *      take place and the {@link ngRoute.$route#$routeChangeError $routeChangeError} event will
   *      be fired.
   *
   *      Routes that specify `redirectTo` will not have their controllers, template functions
   *      or resolves called, the `$location` will be changed to the redirect url and route
   *      processing will stop. The exception to this is if the `redirectTo` is a function that
   *      returns `undefined`. In this case the route transition occurs as though there was no
   *      redirection.
   *
   *    - `resolveRedirectTo` – `{Function=}` – a function that will (eventually) return the value
   *      to update {@link ng.$location $location} URL with and trigger route redirection. In
   *      contrast to `redirectTo`, dependencies can be injected into `resolveRedirectTo` and the
   *      return value can be either a string or a promise that will be resolved to a string.
   *
   *      Similar to `redirectTo`, if the return value is `undefined` (or a promise that gets
   *      resolved to `undefined`), no redirection takes place and the route transition occurs as
   *      though there was no redirection.
   *
   *      If the function throws an error or the returned promise gets rejected, no further
   *      processing will take place and the
   *      {@link ngRoute.$route#$routeChangeError $routeChangeError} event will be fired.
   *
   *      `redirectTo` takes precedence over `resolveRedirectTo`, so specifying both on the same
   *      route definition, will cause the latter to be ignored.
   *
   *    - `[reloadOnSearch=true]` - `{boolean=}` - reload route when only `$location.search()`
   *      or `$location.hash()` changes.
   *
   *      If the option is set to `false` and url in the browser changes, then
   *      `$routeUpdate` event is broadcasted on the root scope.
   *
   *    - `[caseInsensitiveMatch=false]` - `{boolean=}` - match routes without being case sensitive
   *
   *      If the option is set to `true`, then the particular route can be matched without being
   *      case sensitive
   *
   * @returns {Object} self
   *
   * @description
   * Adds a new route definition to the `$route` service.
   */
  this.when = function(path, route) {
    //copy original route object to preserve params inherited from proto chain
    var routeCopy = shallowCopy(route);
    if (angular.isUndefined(routeCopy.reloadOnSearch)) {
      routeCopy.reloadOnSearch = true;
    }
    if (angular.isUndefined(routeCopy.caseInsensitiveMatch)) {
      routeCopy.caseInsensitiveMatch = this.caseInsensitiveMatch;
    }
    routes[path] = angular.extend(
      routeCopy,
      path && pathRegExp(path, routeCopy)
    );

    // create redirection for trailing slashes
    if (path) {
      var redirectPath = (path[path.length - 1] === '/')
            ? path.substr(0, path.length - 1)
            : path + '/';

      routes[redirectPath] = angular.extend(
        {redirectTo: path},
        pathRegExp(redirectPath, routeCopy)
      );
    }

    return this;
  };

  /**
   * @ngdoc property
   * @name $routeProvider#caseInsensitiveMatch
   * @description
   *
   * A boolean property indicating if routes defined
   * using this provider should be matched using a case insensitive
   * algorithm. Defaults to `false`.
   */
  this.caseInsensitiveMatch = false;

   /**
    * @param path {string} path
    * @param opts {Object} options
    * @return {?Object}
    *
    * @description
    * Normalizes the given path, returning a regular expression
    * and the original path.
    *
    * Inspired by pathRexp in visionmedia/express/lib/utils.js.
    */
  function pathRegExp(path, opts) {
    var insensitive = opts.caseInsensitiveMatch,
        ret = {
          originalPath: path,
          regexp: path
        },
        keys = ret.keys = [];

    path = path
      .replace(/([().])/g, '\\$1')
      .replace(/(\/)?:(\w+)(\*\?|[?*])?/g, function(_, slash, key, option) {
        var optional = (option === '?' || option === '*?') ? '?' : null;
        var star = (option === '*' || option === '*?') ? '*' : null;
        keys.push({ name: key, optional: !!optional });
        slash = slash || '';
        return ''
          + (optional ? '' : slash)
          + '(?:'
          + (optional ? slash : '')
          + (star && '(.+?)' || '([^/]+)')
          + (optional || '')
          + ')'
          + (optional || '');
      })
      .replace(/([/$*])/g, '\\$1');

    ret.regexp = new RegExp('^' + path + '$', insensitive ? 'i' : '');
    return ret;
  }

  /**
   * @ngdoc method
   * @name $routeProvider#otherwise
   *
   * @description
   * Sets route definition that will be used on route change when no other route definition
   * is matched.
   *
   * @param {Object|string} params Mapping information to be assigned to `$route.current`.
   * If called with a string, the value maps to `redirectTo`.
   * @returns {Object} self
   */
  this.otherwise = function(params) {
    if (typeof params === 'string') {
      params = {redirectTo: params};
    }
    this.when(null, params);
    return this;
  };

  /**
   * @ngdoc method
   * @name $routeProvider#eagerInstantiationEnabled
   * @kind function
   *
   * @description
   * Call this method as a setter to enable/disable eager instantiation of the
   * {@link ngRoute.$route $route} service upon application bootstrap. You can also call it as a
   * getter (i.e. without any arguments) to get the current value of the
   * `eagerInstantiationEnabled` flag.
   *
   * Instantiating `$route` early is necessary for capturing the initial
   * {@link ng.$location#$locationChangeStart $locationChangeStart} event and navigating to the
   * appropriate route. Usually, `$route` is instantiated in time by the
   * {@link ngRoute.ngView ngView} directive. Yet, in cases where `ngView` is included in an
   * asynchronously loaded template (e.g. in another directive's template), the directive factory
   * might not be called soon enough for `$route` to be instantiated _before_ the initial
   * `$locationChangeSuccess` event is fired. Eager instantiation ensures that `$route` is always
   * instantiated in time, regardless of when `ngView` will be loaded.
   *
   * The default value is true.
   *
   * **Note**:<br />
   * You may want to disable the default behavior when unit-testing modules that depend on
   * `ngRoute`, in order to avoid an unexpected request for the default route's template.
   *
   * @param {boolean=} enabled - If provided, update the internal `eagerInstantiationEnabled` flag.
   *
   * @returns {*} The current value of the `eagerInstantiationEnabled` flag if used as a getter or
   *     itself (for chaining) if used as a setter.
   */
  isEagerInstantiationEnabled = true;
  this.eagerInstantiationEnabled = function eagerInstantiationEnabled(enabled) {
    if (isDefined(enabled)) {
      isEagerInstantiationEnabled = enabled;
      return this;
    }

    return isEagerInstantiationEnabled;
  };


  this.$get = ['$rootScope',
               '$location',
               '$routeParams',
               '$q',
               '$injector',
               '$templateRequest',
               '$sce',
               '$browser',
      function($rootScope, $location, $routeParams, $q, $injector, $templateRequest, $sce, $browser) {

    /**
     * @ngdoc service
     * @name $route
     * @requires $location
     * @requires $routeParams
     *
     * @property {Object} current Reference to the current route definition.
     * The route definition contains:
     *
     *   - `controller`: The controller constructor as defined in the route definition.
     *   - `locals`: A map of locals which is used by {@link ng.$controller $controller} service for
     *     controller instantiation. The `locals` contain
     *     the resolved values of the `resolve` map. Additionally the `locals` also contain:
     *
     *     - `$scope` - The current route scope.
     *     - `$template` - The current route template HTML.
     *
     *     The `locals` will be assigned to the route scope's `$resolve` property. You can override
     *     the property name, using `resolveAs` in the route definition. See
     *     {@link ngRoute.$routeProvider $routeProvider} for more info.
     *
     * @property {Object} routes Object with all route configuration Objects as its properties.
     *
     * @description
     * `$route` is used for deep-linking URLs to controllers and views (HTML partials).
     * It watches `$location.url()` and tries to map the path to an existing route definition.
     *
     * Requires the {@link ngRoute `ngRoute`} module to be installed.
     *
     * You can define routes through {@link ngRoute.$routeProvider $routeProvider}'s API.
     *
     * The `$route` service is typically used in conjunction with the
     * {@link ngRoute.directive:ngView `ngView`} directive and the
     * {@link ngRoute.$routeParams `$routeParams`} service.
     *
     * @example
     * This example shows how changing the URL hash causes the `$route` to match a route against the
     * URL, and the `ngView` pulls in the partial.
     *
     * <example name="$route-service" module="ngRouteExample"
     *          deps="angular-route.js" fixBase="true">
     *   <file name="index.html">
     *     <div ng-controller="MainController">
     *       Choose:
     *       <a href="Book/Moby">Moby</a> |
     *       <a href="Book/Moby/ch/1">Moby: Ch1</a> |
     *       <a href="Book/Gatsby">Gatsby</a> |
     *       <a href="Book/Gatsby/ch/4?key=value">Gatsby: Ch4</a> |
     *       <a href="Book/Scarlet">Scarlet Letter</a><br/>
     *
     *       <div ng-view></div>
     *
     *       <hr />
     *
     *       <pre>$location.path() = {{$location.path()}}</pre>
     *       <pre>$route.current.templateUrl = {{$route.current.templateUrl}}</pre>
     *       <pre>$route.current.params = {{$route.current.params}}</pre>
     *       <pre>$route.current.scope.name = {{$route.current.scope.name}}</pre>
     *       <pre>$routeParams = {{$routeParams}}</pre>
     *     </div>
     *   </file>
     *
     *   <file name="book.html">
     *     controller: {{name}}<br />
     *     Book Id: {{params.bookId}}<br />
     *   </file>
     *
     *   <file name="chapter.html">
     *     controller: {{name}}<br />
     *     Book Id: {{params.bookId}}<br />
     *     Chapter Id: {{params.chapterId}}
     *   </file>
     *
     *   <file name="script.js">
     *     angular.module('ngRouteExample', ['ngRoute'])
     *
     *      .controller('MainController', function($scope, $route, $routeParams, $location) {
     *          $scope.$route = $route;
     *          $scope.$location = $location;
     *          $scope.$routeParams = $routeParams;
     *      })
     *
     *      .controller('BookController', function($scope, $routeParams) {
     *          $scope.name = 'BookController';
     *          $scope.params = $routeParams;
     *      })
     *
     *      .controller('ChapterController', function($scope, $routeParams) {
     *          $scope.name = 'ChapterController';
     *          $scope.params = $routeParams;
     *      })
     *
     *     .config(function($routeProvider, $locationProvider) {
     *       $routeProvider
     *        .when('/Book/:bookId', {
     *         templateUrl: 'book.html',
     *         controller: 'BookController',
     *         resolve: {
     *           // I will cause a 1 second delay
     *           delay: function($q, $timeout) {
     *             var delay = $q.defer();
     *             $timeout(delay.resolve, 1000);
     *             return delay.promise;
     *           }
     *         }
     *       })
     *       .when('/Book/:bookId/ch/:chapterId', {
     *         templateUrl: 'chapter.html',
     *         controller: 'ChapterController'
     *       });
     *
     *       // configure html5 to get links working on jsfiddle
     *       $locationProvider.html5Mode(true);
     *     });
     *
     *   </file>
     *
     *   <file name="protractor.js" type="protractor">
     *     it('should load and compile correct template', function() {
     *       element(by.linkText('Moby: Ch1')).click();
     *       var content = element(by.css('[ng-view]')).getText();
     *       expect(content).toMatch(/controller: ChapterController/);
     *       expect(content).toMatch(/Book Id: Moby/);
     *       expect(content).toMatch(/Chapter Id: 1/);
     *
     *       element(by.partialLinkText('Scarlet')).click();
     *
     *       content = element(by.css('[ng-view]')).getText();
     *       expect(content).toMatch(/controller: BookController/);
     *       expect(content).toMatch(/Book Id: Scarlet/);
     *     });
     *   </file>
     * </example>
     */

    /**
     * @ngdoc event
     * @name $route#$routeChangeStart
     * @eventType broadcast on root scope
     * @description
     * Broadcasted before a route change. At this  point the route services starts
     * resolving all of the dependencies needed for the route change to occur.
     * Typically this involves fetching the view template as well as any dependencies
     * defined in `resolve` route property. Once  all of the dependencies are resolved
     * `$routeChangeSuccess` is fired.
     *
     * The route change (and the `$location` change that triggered it) can be prevented
     * by calling `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on}
     * for more details about event object.
     *
     * @param {Object} angularEvent Synthetic event object.
     * @param {Route} next Future route information.
     * @param {Route} current Current route information.
     */

    /**
     * @ngdoc event
     * @name $route#$routeChangeSuccess
     * @eventType broadcast on root scope
     * @description
     * Broadcasted after a route change has happened successfully.
     * The `resolve` dependencies are now available in the `current.locals` property.
     *
     * {@link ngRoute.directive:ngView ngView} listens for the directive
     * to instantiate the controller and render the view.
     *
     * @param {Object} angularEvent Synthetic event object.
     * @param {Route} current Current route information.
     * @param {Route|Undefined} previous Previous route information, or undefined if current is
     * first route entered.
     */

    /**
     * @ngdoc event
     * @name $route#$routeChangeError
     * @eventType broadcast on root scope
     * @description
     * Broadcasted if a redirection function fails or any redirection or resolve promises are
     * rejected.
     *
     * @param {Object} angularEvent Synthetic event object
     * @param {Route} current Current route information.
     * @param {Route} previous Previous route information.
     * @param {Route} rejection The thrown error or the rejection reason of the promise. Usually
     * the rejection reason is the error that caused the promise to get rejected.
     */

    /**
     * @ngdoc event
     * @name $route#$routeUpdate
     * @eventType broadcast on root scope
     * @description
     * The `reloadOnSearch` property has been set to false, and we are reusing the same
     * instance of the Controller.
     *
     * @param {Object} angularEvent Synthetic event object
     * @param {Route} current Current/previous route information.
     */

    var forceReload = false,
        preparedRoute,
        preparedRouteIsUpdateOnly,
        $route = {
          routes: routes,

          /**
           * @ngdoc method
           * @name $route#reload
           *
           * @description
           * Causes `$route` service to reload the current route even if
           * {@link ng.$location $location} hasn't changed.
           *
           * As a result of that, {@link ngRoute.directive:ngView ngView}
           * creates new scope and reinstantiates the controller.
           */
          reload: function() {
            forceReload = true;

            var fakeLocationEvent = {
              defaultPrevented: false,
              preventDefault: function fakePreventDefault() {
                this.defaultPrevented = true;
                forceReload = false;
              }
            };

            $rootScope.$evalAsync(function() {
              prepareRoute(fakeLocationEvent);
              if (!fakeLocationEvent.defaultPrevented) commitRoute();
            });
          },

          /**
           * @ngdoc method
           * @name $route#updateParams
           *
           * @description
           * Causes `$route` service to update the current URL, replacing
           * current route parameters with those specified in `newParams`.
           * Provided property names that match the route's path segment
           * definitions will be interpolated into the location's path, while
           * remaining properties will be treated as query params.
           *
           * @param {!Object<string, string>} newParams mapping of URL parameter names to values
           */
          updateParams: function(newParams) {
            if (this.current && this.current.$$route) {
              newParams = angular.extend({}, this.current.params, newParams);
              $location.path(interpolate(this.current.$$route.originalPath, newParams));
              // interpolate modifies newParams, only query params are left
              $location.search(newParams);
            } else {
              throw $routeMinErr('norout', 'Tried updating route when with no current route');
            }
          }
        };

    $rootScope.$on('$locationChangeStart', prepareRoute);
    $rootScope.$on('$locationChangeSuccess', commitRoute);

    return $route;

    /////////////////////////////////////////////////////

    /**
     * @param on {string} current url
     * @param route {Object} route regexp to match the url against
     * @return {?Object}
     *
     * @description
     * Check if the route matches the current url.
     *
     * Inspired by match in
     * visionmedia/express/lib/router/router.js.
     */
    function switchRouteMatcher(on, route) {
      var keys = route.keys,
          params = {};

      if (!route.regexp) return null;

      var m = route.regexp.exec(on);
      if (!m) return null;

      for (var i = 1, len = m.length; i < len; ++i) {
        var key = keys[i - 1];

        var val = m[i];

        if (key && val) {
          params[key.name] = val;
        }
      }
      return params;
    }

    function prepareRoute($locationEvent) {
      var lastRoute = $route.current;

      preparedRoute = parseRoute();
      preparedRouteIsUpdateOnly = preparedRoute && lastRoute && preparedRoute.$$route === lastRoute.$$route
          && angular.equals(preparedRoute.pathParams, lastRoute.pathParams)
          && !preparedRoute.reloadOnSearch && !forceReload;

      if (!preparedRouteIsUpdateOnly && (lastRoute || preparedRoute)) {
        if ($rootScope.$broadcast('$routeChangeStart', preparedRoute, lastRoute).defaultPrevented) {
          if ($locationEvent) {
            $locationEvent.preventDefault();
          }
        }
      }
    }

    function commitRoute() {
      var lastRoute = $route.current;
      var nextRoute = preparedRoute;

      if (preparedRouteIsUpdateOnly) {
        lastRoute.params = nextRoute.params;
        angular.copy(lastRoute.params, $routeParams);
        $rootScope.$broadcast('$routeUpdate', lastRoute);
      } else if (nextRoute || lastRoute) {
        forceReload = false;
        $route.current = nextRoute;

        var nextRoutePromise = $q.resolve(nextRoute);

        $browser.$$incOutstandingRequestCount();

        nextRoutePromise.
          then(getRedirectionData).
          then(handlePossibleRedirection).
          then(function(keepProcessingRoute) {
            return keepProcessingRoute && nextRoutePromise.
              then(resolveLocals).
              then(function(locals) {
                // after route change
                if (nextRoute === $route.current) {
                  if (nextRoute) {
                    nextRoute.locals = locals;
                    angular.copy(nextRoute.params, $routeParams);
                  }
                  $rootScope.$broadcast('$routeChangeSuccess', nextRoute, lastRoute);
                }
              });
          }).catch(function(error) {
            if (nextRoute === $route.current) {
              $rootScope.$broadcast('$routeChangeError', nextRoute, lastRoute, error);
            }
          }).finally(function() {
            // Because `commitRoute()` is called from a `$rootScope.$evalAsync` block (see
            // `$locationWatch`), this `$$completeOutstandingRequest()` call will not cause
            // `outstandingRequestCount` to hit zero.  This is important in case we are redirecting
            // to a new route which also requires some asynchronous work.

            $browser.$$completeOutstandingRequest(noop);
          });
      }
    }

    function getRedirectionData(route) {
      var data = {
        route: route,
        hasRedirection: false
      };

      if (route) {
        if (route.redirectTo) {
          if (angular.isString(route.redirectTo)) {
            data.path = interpolate(route.redirectTo, route.params);
            data.search = route.params;
            data.hasRedirection = true;
          } else {
            var oldPath = $location.path();
            var oldSearch = $location.search();
            var newUrl = route.redirectTo(route.pathParams, oldPath, oldSearch);

            if (angular.isDefined(newUrl)) {
              data.url = newUrl;
              data.hasRedirection = true;
            }
          }
        } else if (route.resolveRedirectTo) {
          return $q.
            resolve($injector.invoke(route.resolveRedirectTo)).
            then(function(newUrl) {
              if (angular.isDefined(newUrl)) {
                data.url = newUrl;
                data.hasRedirection = true;
              }

              return data;
            });
        }
      }

      return data;
    }

    function handlePossibleRedirection(data) {
      var keepProcessingRoute = true;

      if (data.route !== $route.current) {
        keepProcessingRoute = false;
      } else if (data.hasRedirection) {
        var oldUrl = $location.url();
        var newUrl = data.url;

        if (newUrl) {
          $location.
            url(newUrl).
            replace();
        } else {
          newUrl = $location.
            path(data.path).
            search(data.search).
            replace().
            url();
        }

        if (newUrl !== oldUrl) {
          // Exit out and don't process current next value,
          // wait for next location change from redirect
          keepProcessingRoute = false;
        }
      }

      return keepProcessingRoute;
    }

    function resolveLocals(route) {
      if (route) {
        var locals = angular.extend({}, route.resolve);
        angular.forEach(locals, function(value, key) {
          locals[key] = angular.isString(value) ?
              $injector.get(value) :
              $injector.invoke(value, null, null, key);
        });
        var template = getTemplateFor(route);
        if (angular.isDefined(template)) {
          locals['$template'] = template;
        }
        return $q.all(locals);
      }
    }

    function getTemplateFor(route) {
      var template, templateUrl;
      if (angular.isDefined(template = route.template)) {
        if (angular.isFunction(template)) {
          template = template(route.params);
        }
      } else if (angular.isDefined(templateUrl = route.templateUrl)) {
        if (angular.isFunction(templateUrl)) {
          templateUrl = templateUrl(route.params);
        }
        if (angular.isDefined(templateUrl)) {
          route.loadedTemplateUrl = $sce.valueOf(templateUrl);
          template = $templateRequest(templateUrl);
        }
      }
      return template;
    }

    /**
     * @returns {Object} the current active route, by matching it against the URL
     */
    function parseRoute() {
      // Match a route
      var params, match;
      angular.forEach(routes, function(route, path) {
        if (!match && (params = switchRouteMatcher($location.path(), route))) {
          match = inherit(route, {
            params: angular.extend({}, $location.search(), params),
            pathParams: params});
          match.$$route = route;
        }
      });
      // No route matched; fallback to "otherwise" route
      return match || routes[null] && inherit(routes[null], {params: {}, pathParams:{}});
    }

    /**
     * @returns {string} interpolation of the redirect path with the parameters
     */
    function interpolate(string, params) {
      var result = [];
      angular.forEach((string || '').split(':'), function(segment, i) {
        if (i === 0) {
          result.push(segment);
        } else {
          var segmentMatch = segment.match(/(\w+)(?:[?*])?(.*)/);
          var key = segmentMatch[1];
          result.push(params[key]);
          result.push(segmentMatch[2] || '');
          delete params[key];
        }
      });
      return result.join('');
    }
  }];
}

instantiateRoute.$inject = ['$injector'];
function instantiateRoute($injector) {
  if (isEagerInstantiationEnabled) {
    // Instantiate `$route`
    $injector.get('$route');
  }
}

ngRouteModule.provider('$routeParams', $RouteParamsProvider);


/**
 * @ngdoc service
 * @name $routeParams
 * @requires $route
 * @this
 *
 * @description
 * The `$routeParams` service allows you to retrieve the current set of route parameters.
 *
 * Requires the {@link ngRoute `ngRoute`} module to be installed.
 *
 * The route parameters are a combination of {@link ng.$location `$location`}'s
 * {@link ng.$location#search `search()`} and {@link ng.$location#path `path()`}.
 * The `path` parameters are extracted when the {@link ngRoute.$route `$route`} path is matched.
 *
 * In case of parameter name collision, `path` params take precedence over `search` params.
 *
 * The service guarantees that the identity of the `$routeParams` object will remain unchanged
 * (but its properties will likely change) even when a route change occurs.
 *
 * Note that the `$routeParams` are only updated *after* a route change completes successfully.
 * This means that you cannot rely on `$routeParams` being correct in route resolve functions.
 * Instead you can use `$route.current.params` to access the new route's parameters.
 *
 * @example
 * ```js
 *  // Given:
 *  // URL: http://server.com/index.html#/Chapter/1/Section/2?search=moby
 *  // Route: /Chapter/:chapterId/Section/:sectionId
 *  //
 *  // Then
 *  $routeParams ==> {chapterId:'1', sectionId:'2', search:'moby'}
 * ```
 */
function $RouteParamsProvider() {
  this.$get = function() { return {}; };
}

ngRouteModule.directive('ngView', ngViewFactory);
ngRouteModule.directive('ngView', ngViewFillContentFactory);


/**
 * @ngdoc directive
 * @name ngView
 * @restrict ECA
 *
 * @description
 * # Overview
 * `ngView` is a directive that complements the {@link ngRoute.$route $route} service by
 * including the rendered template of the current route into the main layout (`index.html`) file.
 * Every time the current route changes, the included view changes with it according to the
 * configuration of the `$route` service.
 *
 * Requires the {@link ngRoute `ngRoute`} module to be installed.
 *
 * @animations
 * | Animation                        | Occurs                              |
 * |----------------------------------|-------------------------------------|
 * | {@link ng.$animate#enter enter}  | when the new element is inserted to the DOM |
 * | {@link ng.$animate#leave leave}  | when the old element is removed from to the DOM  |
 *
 * The enter and leave animation occur concurrently.
 *
 * @scope
 * @priority 400
 * @param {string=} onload Expression to evaluate whenever the view updates.
 *
 * @param {string=} autoscroll Whether `ngView` should call {@link ng.$anchorScroll
 *                  $anchorScroll} to scroll the viewport after the view is updated.
 *
 *                  - If the attribute is not set, disable scrolling.
 *                  - If the attribute is set without value, enable scrolling.
 *                  - Otherwise enable scrolling only if the `autoscroll` attribute value evaluated
 *                    as an expression yields a truthy value.
 * @example
    <example name="ngView-directive" module="ngViewExample"
             deps="angular-route.js;angular-animate.js"
             animations="true" fixBase="true">
      <file name="index.html">
        <div ng-controller="MainCtrl as main">
          Choose:
          <a href="Book/Moby">Moby</a> |
          <a href="Book/Moby/ch/1">Moby: Ch1</a> |
          <a href="Book/Gatsby">Gatsby</a> |
          <a href="Book/Gatsby/ch/4?key=value">Gatsby: Ch4</a> |
          <a href="Book/Scarlet">Scarlet Letter</a><br/>

          <div class="view-animate-container">
            <div ng-view class="view-animate"></div>
          </div>
          <hr />

          <pre>$location.path() = {{main.$location.path()}}</pre>
          <pre>$route.current.templateUrl = {{main.$route.current.templateUrl}}</pre>
          <pre>$route.current.params = {{main.$route.current.params}}</pre>
          <pre>$routeParams = {{main.$routeParams}}</pre>
        </div>
      </file>

      <file name="book.html">
        <div>
          controller: {{book.name}}<br />
          Book Id: {{book.params.bookId}}<br />
        </div>
      </file>

      <file name="chapter.html">
        <div>
          controller: {{chapter.name}}<br />
          Book Id: {{chapter.params.bookId}}<br />
          Chapter Id: {{chapter.params.chapterId}}
        </div>
      </file>

      <file name="animations.css">
        .view-animate-container {
          position:relative;
          height:100px!important;
          background:white;
          border:1px solid black;
          height:40px;
          overflow:hidden;
        }

        .view-animate {
          padding:10px;
        }

        .view-animate.ng-enter, .view-animate.ng-leave {
          transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 1.5s;

          display:block;
          width:100%;
          border-left:1px solid black;

          position:absolute;
          top:0;
          left:0;
          right:0;
          bottom:0;
          padding:10px;
        }

        .view-animate.ng-enter {
          left:100%;
        }
        .view-animate.ng-enter.ng-enter-active {
          left:0;
        }
        .view-animate.ng-leave.ng-leave-active {
          left:-100%;
        }
      </file>

      <file name="script.js">
        angular.module('ngViewExample', ['ngRoute', 'ngAnimate'])
          .config(['$routeProvider', '$locationProvider',
            function($routeProvider, $locationProvider) {
              $routeProvider
                .when('/Book/:bookId', {
                  templateUrl: 'book.html',
                  controller: 'BookCtrl',
                  controllerAs: 'book'
                })
                .when('/Book/:bookId/ch/:chapterId', {
                  templateUrl: 'chapter.html',
                  controller: 'ChapterCtrl',
                  controllerAs: 'chapter'
                });

              $locationProvider.html5Mode(true);
          }])
          .controller('MainCtrl', ['$route', '$routeParams', '$location',
            function MainCtrl($route, $routeParams, $location) {
              this.$route = $route;
              this.$location = $location;
              this.$routeParams = $routeParams;
          }])
          .controller('BookCtrl', ['$routeParams', function BookCtrl($routeParams) {
            this.name = 'BookCtrl';
            this.params = $routeParams;
          }])
          .controller('ChapterCtrl', ['$routeParams', function ChapterCtrl($routeParams) {
            this.name = 'ChapterCtrl';
            this.params = $routeParams;
          }]);

      </file>

      <file name="protractor.js" type="protractor">
        it('should load and compile correct template', function() {
          element(by.linkText('Moby: Ch1')).click();
          var content = element(by.css('[ng-view]')).getText();
          expect(content).toMatch(/controller: ChapterCtrl/);
          expect(content).toMatch(/Book Id: Moby/);
          expect(content).toMatch(/Chapter Id: 1/);

          element(by.partialLinkText('Scarlet')).click();

          content = element(by.css('[ng-view]')).getText();
          expect(content).toMatch(/controller: BookCtrl/);
          expect(content).toMatch(/Book Id: Scarlet/);
        });
      </file>
    </example>
 */


/**
 * @ngdoc event
 * @name ngView#$viewContentLoaded
 * @eventType emit on the current ngView scope
 * @description
 * Emitted every time the ngView content is reloaded.
 */
ngViewFactory.$inject = ['$route', '$anchorScroll', '$animate'];
function ngViewFactory($route, $anchorScroll, $animate) {
  return {
    restrict: 'ECA',
    terminal: true,
    priority: 400,
    transclude: 'element',
    link: function(scope, $element, attr, ctrl, $transclude) {
        var currentScope,
            currentElement,
            previousLeaveAnimation,
            autoScrollExp = attr.autoscroll,
            onloadExp = attr.onload || '';

        scope.$on('$routeChangeSuccess', update);
        update();

        function cleanupLastView() {
          if (previousLeaveAnimation) {
            $animate.cancel(previousLeaveAnimation);
            previousLeaveAnimation = null;
          }

          if (currentScope) {
            currentScope.$destroy();
            currentScope = null;
          }
          if (currentElement) {
            previousLeaveAnimation = $animate.leave(currentElement);
            previousLeaveAnimation.done(function(response) {
              if (response !== false) previousLeaveAnimation = null;
            });
            currentElement = null;
          }
        }

        function update() {
          var locals = $route.current && $route.current.locals,
              template = locals && locals.$template;

          if (angular.isDefined(template)) {
            var newScope = scope.$new();
            var current = $route.current;

            // Note: This will also link all children of ng-view that were contained in the original
            // html. If that content contains controllers, ... they could pollute/change the scope.
            // However, using ng-view on an element with additional content does not make sense...
            // Note: We can't remove them in the cloneAttchFn of $transclude as that
            // function is called before linking the content, which would apply child
            // directives to non existing elements.
            var clone = $transclude(newScope, function(clone) {
              $animate.enter(clone, null, currentElement || $element).done(function onNgViewEnter(response) {
                if (response !== false && angular.isDefined(autoScrollExp)
                  && (!autoScrollExp || scope.$eval(autoScrollExp))) {
                  $anchorScroll();
                }
              });
              cleanupLastView();
            });

            currentElement = clone;
            currentScope = current.scope = newScope;
            currentScope.$emit('$viewContentLoaded');
            currentScope.$eval(onloadExp);
          } else {
            cleanupLastView();
          }
        }
    }
  };
}

// This directive is called during the $transclude call of the first `ngView` directive.
// It will replace and compile the content of the element with the loaded template.
// We need this directive so that the element content is already filled when
// the link function of another directive on the same element as ngView
// is called.
ngViewFillContentFactory.$inject = ['$compile', '$controller', '$route'];
function ngViewFillContentFactory($compile, $controller, $route) {
  return {
    restrict: 'ECA',
    priority: -400,
    link: function(scope, $element) {
      var current = $route.current,
          locals = current.locals;

      $element.html(locals.$template);

      var link = $compile($element.contents());

      if (current.controller) {
        locals.$scope = scope;
        var controller = $controller(current.controller, locals);
        if (current.controllerAs) {
          scope[current.controllerAs] = controller;
        }
        $element.data('$ngControllerController', controller);
        $element.children().data('$ngControllerController', controller);
      }
      scope[current.resolveAs || '$resolve'] = locals;

      link(scope);
    }
  };
}


})(window, window.angular);


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(109);
module.exports = 'ngRoute';


/***/ }),
/* 111 */
/***/ (function(module, exports) {

/**
 * @license AngularJS v1.6.2
 * (c) 2010-2017 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window) {'use strict';

/**
 * @description
 *
 * This object provides a utility for producing rich Error messages within
 * Angular. It can be called as follows:
 *
 * var exampleMinErr = minErr('example');
 * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);
 *
 * The above creates an instance of minErr in the example namespace. The
 * resulting error will have a namespaced error code of example.one.  The
 * resulting error will replace {0} with the value of foo, and {1} with the
 * value of bar. The object is not restricted in the number of arguments it can
 * take.
 *
 * If fewer arguments are specified than necessary for interpolation, the extra
 * interpolation markers will be preserved in the final string.
 *
 * Since data will be parsed statically during a build step, some restrictions
 * are applied with respect to how minErr instances are created and called.
 * Instances should have names of the form namespaceMinErr for a minErr created
 * using minErr('namespace') . Error codes, namespaces and template strings
 * should all be static strings, not variables or general expressions.
 *
 * @param {string} module The namespace to use for the new minErr instance.
 * @param {function} ErrorConstructor Custom error constructor to be instantiated when returning
 *   error from returned function, for cases when a particular type of error is useful.
 * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance
 */

function minErr(module, ErrorConstructor) {
  ErrorConstructor = ErrorConstructor || Error;
  return function() {
    var SKIP_INDEXES = 2;

    var templateArgs = arguments,
      code = templateArgs[0],
      message = '[' + (module ? module + ':' : '') + code + '] ',
      template = templateArgs[1],
      paramPrefix, i;

    message += template.replace(/\{\d+\}/g, function(match) {
      var index = +match.slice(1, -1),
        shiftedIndex = index + SKIP_INDEXES;

      if (shiftedIndex < templateArgs.length) {
        return toDebugString(templateArgs[shiftedIndex]);
      }

      return match;
    });

    message += '\nhttp://errors.angularjs.org/1.6.2/' +
      (module ? module + '/' : '') + code;

    for (i = SKIP_INDEXES, paramPrefix = '?'; i < templateArgs.length; i++, paramPrefix = '&') {
      message += paramPrefix + 'p' + (i - SKIP_INDEXES) + '=' +
        encodeURIComponent(toDebugString(templateArgs[i]));
    }

    return new ErrorConstructor(message);
  };
}

/* We need to tell ESLint what variables are being exported */
/* exported
  angular,
  msie,
  jqLite,
  jQuery,
  slice,
  splice,
  push,
  toString,
  ngMinErr,
  angularModule,
  uid,
  REGEX_STRING_REGEXP,
  VALIDITY_STATE_PROPERTY,

  lowercase,
  uppercase,
  manualLowercase,
  manualUppercase,
  nodeName_,
  isArrayLike,
  forEach,
  forEachSorted,
  reverseParams,
  nextUid,
  setHashKey,
  extend,
  toInt,
  inherit,
  merge,
  noop,
  identity,
  valueFn,
  isUndefined,
  isDefined,
  isObject,
  isBlankObject,
  isString,
  isNumber,
  isNumberNaN,
  isDate,
  isArray,
  isFunction,
  isRegExp,
  isWindow,
  isScope,
  isFile,
  isFormData,
  isBlob,
  isBoolean,
  isPromiseLike,
  trim,
  escapeForRegexp,
  isElement,
  makeMap,
  includes,
  arrayRemove,
  copy,
  equals,
  csp,
  jq,
  concat,
  sliceArgs,
  bind,
  toJsonReplacer,
  toJson,
  fromJson,
  convertTimezoneToLocal,
  timezoneToOffset,
  startingTag,
  tryDecodeURIComponent,
  parseKeyValue,
  toKeyValue,
  encodeUriSegment,
  encodeUriQuery,
  angularInit,
  bootstrap,
  getTestability,
  snake_case,
  bindJQuery,
  assertArg,
  assertArgFn,
  assertNotHasOwnProperty,
  getter,
  getBlockNodes,
  hasOwnProperty,
  createMap,
  stringify,

  NODE_TYPE_ELEMENT,
  NODE_TYPE_ATTRIBUTE,
  NODE_TYPE_TEXT,
  NODE_TYPE_COMMENT,
  NODE_TYPE_DOCUMENT,
  NODE_TYPE_DOCUMENT_FRAGMENT
*/

////////////////////////////////////

/**
 * @ngdoc module
 * @name ng
 * @module ng
 * @installation
 * @description
 *
 * # ng (core module)
 * The ng module is loaded by default when an AngularJS application is started. The module itself
 * contains the essential components for an AngularJS application to function. The table below
 * lists a high level breakdown of each of the services/factories, filters, directives and testing
 * components available within this core module.
 *
 * <div doc-module-components="ng"></div>
 */

var REGEX_STRING_REGEXP = /^\/(.+)\/([a-z]*)$/;

// The name of a form control's ValidityState property.
// This is used so that it's possible for internal tests to create mock ValidityStates.
var VALIDITY_STATE_PROPERTY = 'validity';


var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * @ngdoc function
 * @name angular.lowercase
 * @module ng
 * @kind function
 *
 * @deprecated
 * sinceVersion="1.5.0"
 * removeVersion="1.7.0"
 * Use [String.prototype.toLowerCase](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase) instead.
 *
 * @description Converts the specified string to lowercase.
 * @param {string} string String to be converted to lowercase.
 * @returns {string} Lowercased string.
 */
var lowercase = function(string) {return isString(string) ? string.toLowerCase() : string;};

/**
 * @ngdoc function
 * @name angular.uppercase
 * @module ng
 * @kind function
 *
 * @deprecated
 * sinceVersion="1.5.0"
 * removeVersion="1.7.0"
 * Use [String.prototype.toUpperCase](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase) instead.
 *
 * @description Converts the specified string to uppercase.
 * @param {string} string String to be converted to uppercase.
 * @returns {string} Uppercased string.
 */
var uppercase = function(string) {return isString(string) ? string.toUpperCase() : string;};


var manualLowercase = function(s) {
  /* eslint-disable no-bitwise */
  return isString(s)
      ? s.replace(/[A-Z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) | 32);})
      : s;
  /* eslint-enable */
};
var manualUppercase = function(s) {
  /* eslint-disable no-bitwise */
  return isString(s)
      ? s.replace(/[a-z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) & ~32);})
      : s;
  /* eslint-enable */
};


// String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish
// locale, for this reason we need to detect this case and redefine lowercase/uppercase methods
// with correct but slower alternatives. See https://github.com/angular/angular.js/issues/11387
if ('i' !== 'I'.toLowerCase()) {
  lowercase = manualLowercase;
  uppercase = manualUppercase;
}


var
    msie,             // holds major version number for IE, or NaN if UA is not IE.
    jqLite,           // delay binding since jQuery could be loaded after us.
    jQuery,           // delay binding
    slice             = [].slice,
    splice            = [].splice,
    push              = [].push,
    toString          = Object.prototype.toString,
    getPrototypeOf    = Object.getPrototypeOf,
    ngMinErr          = minErr('ng'),

    /** @name angular */
    angular           = window.angular || (window.angular = {}),
    angularModule,
    uid               = 0;

// Support: IE 9-11 only
/**
 * documentMode is an IE-only property
 * http://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx
 */
msie = window.document.documentMode;


/**
 * @private
 * @param {*} obj
 * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,
 *                   String ...)
 */
function isArrayLike(obj) {

  // `null`, `undefined` and `window` are not array-like
  if (obj == null || isWindow(obj)) return false;

  // arrays, strings and jQuery/jqLite objects are array like
  // * jqLite is either the jQuery or jqLite constructor function
  // * we have to check the existence of jqLite first as this method is called
  //   via the forEach method when constructing the jqLite object in the first place
  if (isArray(obj) || isString(obj) || (jqLite && obj instanceof jqLite)) return true;

  // Support: iOS 8.2 (not reproducible in simulator)
  // "length" in obj used to prevent JIT error (gh-11508)
  var length = 'length' in Object(obj) && obj.length;

  // NodeList objects (with `item` method) and
  // other objects with suitable length characteristics are array-like
  return isNumber(length) &&
    (length >= 0 && ((length - 1) in obj || obj instanceof Array) || typeof obj.item === 'function');

}

/**
 * @ngdoc function
 * @name angular.forEach
 * @module ng
 * @kind function
 *
 * @description
 * Invokes the `iterator` function once for each item in `obj` collection, which can be either an
 * object or an array. The `iterator` function is invoked with `iterator(value, key, obj)`, where `value`
 * is the value of an object property or an array element, `key` is the object property key or
 * array element index and obj is the `obj` itself. Specifying a `context` for the function is optional.
 *
 * It is worth noting that `.forEach` does not iterate over inherited properties because it filters
 * using the `hasOwnProperty` method.
 *
 * Unlike ES262's
 * [Array.prototype.forEach](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18),
 * providing 'undefined' or 'null' values for `obj` will not throw a TypeError, but rather just
 * return the value provided.
 *
   ```js
     var values = {name: 'misko', gender: 'male'};
     var log = [];
     angular.forEach(values, function(value, key) {
       this.push(key + ': ' + value);
     }, log);
     expect(log).toEqual(['name: misko', 'gender: male']);
   ```
 *
 * @param {Object|Array} obj Object to iterate over.
 * @param {Function} iterator Iterator function.
 * @param {Object=} context Object to become context (`this`) for the iterator function.
 * @returns {Object|Array} Reference to `obj`.
 */

function forEach(obj, iterator, context) {
  var key, length;
  if (obj) {
    if (isFunction(obj)) {
      for (key in obj) {
        if (key !== 'prototype' && key !== 'length' && key !== 'name' && obj.hasOwnProperty(key)) {
          iterator.call(context, obj[key], key, obj);
        }
      }
    } else if (isArray(obj) || isArrayLike(obj)) {
      var isPrimitive = typeof obj !== 'object';
      for (key = 0, length = obj.length; key < length; key++) {
        if (isPrimitive || key in obj) {
          iterator.call(context, obj[key], key, obj);
        }
      }
    } else if (obj.forEach && obj.forEach !== forEach) {
        obj.forEach(iterator, context, obj);
    } else if (isBlankObject(obj)) {
      // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
      for (key in obj) {
        iterator.call(context, obj[key], key, obj);
      }
    } else if (typeof obj.hasOwnProperty === 'function') {
      // Slow path for objects inheriting Object.prototype, hasOwnProperty check needed
      for (key in obj) {
        if (obj.hasOwnProperty(key)) {
          iterator.call(context, obj[key], key, obj);
        }
      }
    } else {
      // Slow path for objects which do not have a method `hasOwnProperty`
      for (key in obj) {
        if (hasOwnProperty.call(obj, key)) {
          iterator.call(context, obj[key], key, obj);
        }
      }
    }
  }
  return obj;
}

function forEachSorted(obj, iterator, context) {
  var keys = Object.keys(obj).sort();
  for (var i = 0; i < keys.length; i++) {
    iterator.call(context, obj[keys[i]], keys[i]);
  }
  return keys;
}


/**
 * when using forEach the params are value, key, but it is often useful to have key, value.
 * @param {function(string, *)} iteratorFn
 * @returns {function(*, string)}
 */
function reverseParams(iteratorFn) {
  return function(value, key) {iteratorFn(key, value);};
}

/**
 * A consistent way of creating unique IDs in angular.
 *
 * Using simple numbers allows us to generate 28.6 million unique ids per second for 10 years before
 * we hit number precision issues in JavaScript.
 *
 * Math.pow(2,53) / 60 / 60 / 24 / 365 / 10 = 28.6M
 *
 * @returns {number} an unique alpha-numeric string
 */
function nextUid() {
  return ++uid;
}


/**
 * Set or clear the hashkey for an object.
 * @param obj object
 * @param h the hashkey (!truthy to delete the hashkey)
 */
function setHashKey(obj, h) {
  if (h) {
    obj.$$hashKey = h;
  } else {
    delete obj.$$hashKey;
  }
}


function baseExtend(dst, objs, deep) {
  var h = dst.$$hashKey;

  for (var i = 0, ii = objs.length; i < ii; ++i) {
    var obj = objs[i];
    if (!isObject(obj) && !isFunction(obj)) continue;
    var keys = Object.keys(obj);
    for (var j = 0, jj = keys.length; j < jj; j++) {
      var key = keys[j];
      var src = obj[key];

      if (deep && isObject(src)) {
        if (isDate(src)) {
          dst[key] = new Date(src.valueOf());
        } else if (isRegExp(src)) {
          dst[key] = new RegExp(src);
        } else if (src.nodeName) {
          dst[key] = src.cloneNode(true);
        } else if (isElement(src)) {
          dst[key] = src.clone();
        } else {
          if (!isObject(dst[key])) dst[key] = isArray(src) ? [] : {};
          baseExtend(dst[key], [src], true);
        }
      } else {
        dst[key] = src;
      }
    }
  }

  setHashKey(dst, h);
  return dst;
}

/**
 * @ngdoc function
 * @name angular.extend
 * @module ng
 * @kind function
 *
 * @description
 * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
 * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
 * by passing an empty object as the target: `var object = angular.extend({}, object1, object2)`.
 *
 * **Note:** Keep in mind that `angular.extend` does not support recursive merge (deep copy). Use
 * {@link angular.merge} for this.
 *
 * @param {Object} dst Destination object.
 * @param {...Object} src Source object(s).
 * @returns {Object} Reference to `dst`.
 */
function extend(dst) {
  return baseExtend(dst, slice.call(arguments, 1), false);
}


/**
* @ngdoc function
* @name angular.merge
* @module ng
* @kind function
*
* @description
* Deeply extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
* to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
* by passing an empty object as the target: `var object = angular.merge({}, object1, object2)`.
*
* Unlike {@link angular.extend extend()}, `merge()` recursively descends into object properties of source
* objects, performing a deep copy.
*
* @param {Object} dst Destination object.
* @param {...Object} src Source object(s).
* @returns {Object} Reference to `dst`.
*/
function merge(dst) {
  return baseExtend(dst, slice.call(arguments, 1), true);
}



function toInt(str) {
  return parseInt(str, 10);
}

var isNumberNaN = Number.isNaN || function isNumberNaN(num) {
  // eslint-disable-next-line no-self-compare
  return num !== num;
};


function inherit(parent, extra) {
  return extend(Object.create(parent), extra);
}

/**
 * @ngdoc function
 * @name angular.noop
 * @module ng
 * @kind function
 *
 * @description
 * A function that performs no operations. This function can be useful when writing code in the
 * functional style.
   ```js
     function foo(callback) {
       var result = calculateResult();
       (callback || angular.noop)(result);
     }
   ```
 */
function noop() {}
noop.$inject = [];


/**
 * @ngdoc function
 * @name angular.identity
 * @module ng
 * @kind function
 *
 * @description
 * A function that returns its first argument. This function is useful when writing code in the
 * functional style.
 *
   ```js
   function transformer(transformationFn, value) {
     return (transformationFn || angular.identity)(value);
   };

   // E.g.
   function getResult(fn, input) {
     return (fn || angular.identity)(input);
   };

   getResult(function(n) { return n * 2; }, 21);   // returns 42
   getResult(null, 21);                            // returns 21
   getResult(undefined, 21);                       // returns 21
   ```
 *
 * @param {*} value to be returned.
 * @returns {*} the value passed in.
 */
function identity($) {return $;}
identity.$inject = [];


function valueFn(value) {return function valueRef() {return value;};}

function hasCustomToString(obj) {
  return isFunction(obj.toString) && obj.toString !== toString;
}


/**
 * @ngdoc function
 * @name angular.isUndefined
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is undefined.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is undefined.
 */
function isUndefined(value) {return typeof value === 'undefined';}


/**
 * @ngdoc function
 * @name angular.isDefined
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is defined.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is defined.
 */
function isDefined(value) {return typeof value !== 'undefined';}


/**
 * @ngdoc function
 * @name angular.isObject
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not
 * considered to be objects. Note that JavaScript arrays are objects.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is an `Object` but not `null`.
 */
function isObject(value) {
  // http://jsperf.com/isobject4
  return value !== null && typeof value === 'object';
}


/**
 * Determine if a value is an object with a null prototype
 *
 * @returns {boolean} True if `value` is an `Object` with a null prototype
 */
function isBlankObject(value) {
  return value !== null && typeof value === 'object' && !getPrototypeOf(value);
}


/**
 * @ngdoc function
 * @name angular.isString
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a `String`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `String`.
 */
function isString(value) {return typeof value === 'string';}


/**
 * @ngdoc function
 * @name angular.isNumber
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a `Number`.
 *
 * This includes the "special" numbers `NaN`, `+Infinity` and `-Infinity`.
 *
 * If you wish to exclude these then you can use the native
 * [`isFinite'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite)
 * method.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Number`.
 */
function isNumber(value) {return typeof value === 'number';}


/**
 * @ngdoc function
 * @name angular.isDate
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a value is a date.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Date`.
 */
function isDate(value) {
  return toString.call(value) === '[object Date]';
}


/**
 * @ngdoc function
 * @name angular.isArray
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is an `Array`. Alias of Array.isArray.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is an `Array`.
 */
var isArray = Array.isArray;

/**
 * @ngdoc function
 * @name angular.isFunction
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a `Function`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Function`.
 */
function isFunction(value) {return typeof value === 'function';}


/**
 * Determines if a value is a regular expression object.
 *
 * @private
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `RegExp`.
 */
function isRegExp(value) {
  return toString.call(value) === '[object RegExp]';
}


/**
 * Checks if `obj` is a window object.
 *
 * @private
 * @param {*} obj Object to check
 * @returns {boolean} True if `obj` is a window obj.
 */
function isWindow(obj) {
  return obj && obj.window === obj;
}


function isScope(obj) {
  return obj && obj.$evalAsync && obj.$watch;
}


function isFile(obj) {
  return toString.call(obj) === '[object File]';
}


function isFormData(obj) {
  return toString.call(obj) === '[object FormData]';
}


function isBlob(obj) {
  return toString.call(obj) === '[object Blob]';
}


function isBoolean(value) {
  return typeof value === 'boolean';
}


function isPromiseLike(obj) {
  return obj && isFunction(obj.then);
}


var TYPED_ARRAY_REGEXP = /^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array]$/;
function isTypedArray(value) {
  return value && isNumber(value.length) && TYPED_ARRAY_REGEXP.test(toString.call(value));
}

function isArrayBuffer(obj) {
  return toString.call(obj) === '[object ArrayBuffer]';
}


var trim = function(value) {
  return isString(value) ? value.trim() : value;
};

// Copied from:
// http://docs.closure-library.googlecode.com/git/local_closure_goog_string_string.js.source.html#line1021
// Prereq: s is a string.
var escapeForRegexp = function(s) {
  return s
    .replace(/([-()[\]{}+?*.$^|,:#<!\\])/g, '\\$1')
    // eslint-disable-next-line no-control-regex
    .replace(/\x08/g, '\\x08');
};


/**
 * @ngdoc function
 * @name angular.isElement
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a DOM element (or wrapped jQuery element).
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).
 */
function isElement(node) {
  return !!(node &&
    (node.nodeName  // We are a direct element.
    || (node.prop && node.attr && node.find)));  // We have an on and find method part of jQuery API.
}

/**
 * @param str 'key1,key2,...'
 * @returns {object} in the form of {key1:true, key2:true, ...}
 */
function makeMap(str) {
  var obj = {}, items = str.split(','), i;
  for (i = 0; i < items.length; i++) {
    obj[items[i]] = true;
  }
  return obj;
}


function nodeName_(element) {
  return lowercase(element.nodeName || (element[0] && element[0].nodeName));
}

function includes(array, obj) {
  return Array.prototype.indexOf.call(array, obj) !== -1;
}

function arrayRemove(array, value) {
  var index = array.indexOf(value);
  if (index >= 0) {
    array.splice(index, 1);
  }
  return index;
}

/**
 * @ngdoc function
 * @name angular.copy
 * @module ng
 * @kind function
 *
 * @description
 * Creates a deep copy of `source`, which should be an object or an array.
 *
 * * If no destination is supplied, a copy of the object or array is created.
 * * If a destination is provided, all of its elements (for arrays) or properties (for objects)
 *   are deleted and then all elements/properties from the source are copied to it.
 * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.
 * * If `source` is identical to `destination` an exception will be thrown.
 *
 * <br />
 * <div class="alert alert-warning">
 *   Only enumerable properties are taken into account. Non-enumerable properties (both on `source`
 *   and on `destination`) will be ignored.
 * </div>
 *
 * @param {*} source The source that will be used to make a copy.
 *                   Can be any type, including primitives, `null`, and `undefined`.
 * @param {(Object|Array)=} destination Destination into which the source is copied. If
 *     provided, must be of the same type as `source`.
 * @returns {*} The copy or updated `destination`, if `destination` was specified.
 *
 * @example
  <example module="copyExample" name="angular-copy">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <form novalidate class="simple-form">
          <label>Name: <input type="text" ng-model="user.name" /></label><br />
          <label>Age:  <input type="number" ng-model="user.age" /></label><br />
          Gender: <label><input type="radio" ng-model="user.gender" value="male" />male</label>
                  <label><input type="radio" ng-model="user.gender" value="female" />female</label><br />
          <button ng-click="reset()">RESET</button>
          <button ng-click="update(user)">SAVE</button>
        </form>
        <pre>form = {{user | json}}</pre>
        <pre>master = {{master | json}}</pre>
      </div>
    </file>
    <file name="script.js">
      // Module: copyExample
      angular.
        module('copyExample', []).
        controller('ExampleController', ['$scope', function($scope) {
          $scope.master = {};

          $scope.reset = function() {
            // Example with 1 argument
            $scope.user = angular.copy($scope.master);
          };

          $scope.update = function(user) {
            // Example with 2 arguments
            angular.copy(user, $scope.master);
          };

          $scope.reset();
        }]);
    </file>
  </example>
 */
function copy(source, destination) {
  var stackSource = [];
  var stackDest = [];

  if (destination) {
    if (isTypedArray(destination) || isArrayBuffer(destination)) {
      throw ngMinErr('cpta', 'Can\'t copy! TypedArray destination cannot be mutated.');
    }
    if (source === destination) {
      throw ngMinErr('cpi', 'Can\'t copy! Source and destination are identical.');
    }

    // Empty the destination object
    if (isArray(destination)) {
      destination.length = 0;
    } else {
      forEach(destination, function(value, key) {
        if (key !== '$$hashKey') {
          delete destination[key];
        }
      });
    }

    stackSource.push(source);
    stackDest.push(destination);
    return copyRecurse(source, destination);
  }

  return copyElement(source);

  function copyRecurse(source, destination) {
    var h = destination.$$hashKey;
    var key;
    if (isArray(source)) {
      for (var i = 0, ii = source.length; i < ii; i++) {
        destination.push(copyElement(source[i]));
      }
    } else if (isBlankObject(source)) {
      // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
      for (key in source) {
        destination[key] = copyElement(source[key]);
      }
    } else if (source && typeof source.hasOwnProperty === 'function') {
      // Slow path, which must rely on hasOwnProperty
      for (key in source) {
        if (source.hasOwnProperty(key)) {
          destination[key] = copyElement(source[key]);
        }
      }
    } else {
      // Slowest path --- hasOwnProperty can't be called as a method
      for (key in source) {
        if (hasOwnProperty.call(source, key)) {
          destination[key] = copyElement(source[key]);
        }
      }
    }
    setHashKey(destination, h);
    return destination;
  }

  function copyElement(source) {
    // Simple values
    if (!isObject(source)) {
      return source;
    }

    // Already copied values
    var index = stackSource.indexOf(source);
    if (index !== -1) {
      return stackDest[index];
    }

    if (isWindow(source) || isScope(source)) {
      throw ngMinErr('cpws',
        'Can\'t copy! Making copies of Window or Scope instances is not supported.');
    }

    var needsRecurse = false;
    var destination = copyType(source);

    if (destination === undefined) {
      destination = isArray(source) ? [] : Object.create(getPrototypeOf(source));
      needsRecurse = true;
    }

    stackSource.push(source);
    stackDest.push(destination);

    return needsRecurse
      ? copyRecurse(source, destination)
      : destination;
  }

  function copyType(source) {
    switch (toString.call(source)) {
      case '[object Int8Array]':
      case '[object Int16Array]':
      case '[object Int32Array]':
      case '[object Float32Array]':
      case '[object Float64Array]':
      case '[object Uint8Array]':
      case '[object Uint8ClampedArray]':
      case '[object Uint16Array]':
      case '[object Uint32Array]':
        return new source.constructor(copyElement(source.buffer), source.byteOffset, source.length);

      case '[object ArrayBuffer]':
        // Support: IE10
        if (!source.slice) {
          // If we're in this case we know the environment supports ArrayBuffer
          /* eslint-disable no-undef */
          var copied = new ArrayBuffer(source.byteLength);
          new Uint8Array(copied).set(new Uint8Array(source));
          /* eslint-enable */
          return copied;
        }
        return source.slice(0);

      case '[object Boolean]':
      case '[object Number]':
      case '[object String]':
      case '[object Date]':
        return new source.constructor(source.valueOf());

      case '[object RegExp]':
        var re = new RegExp(source.source, source.toString().match(/[^/]*$/)[0]);
        re.lastIndex = source.lastIndex;
        return re;

      case '[object Blob]':
        return new source.constructor([source], {type: source.type});
    }

    if (isFunction(source.cloneNode)) {
      return source.cloneNode(true);
    }
  }
}


/**
 * @ngdoc function
 * @name angular.equals
 * @module ng
 * @kind function
 *
 * @description
 * Determines if two objects or two values are equivalent. Supports value types, regular
 * expressions, arrays and objects.
 *
 * Two objects or values are considered equivalent if at least one of the following is true:
 *
 * * Both objects or values pass `===` comparison.
 * * Both objects or values are of the same type and all of their properties are equal by
 *   comparing them with `angular.equals`.
 * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)
 * * Both values represent the same regular expression (In JavaScript,
 *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual
 *   representation matches).
 *
 * During a property comparison, properties of `function` type and properties with names
 * that begin with `$` are ignored.
 *
 * Scope and DOMWindow objects are being compared only by identify (`===`).
 *
 * @param {*} o1 Object or value to compare.
 * @param {*} o2 Object or value to compare.
 * @returns {boolean} True if arguments are equal.
 *
 * @example
   <example module="equalsExample" name="equalsExample">
     <file name="index.html">
      <div ng-controller="ExampleController">
        <form novalidate>
          <h3>User 1</h3>
          Name: <input type="text" ng-model="user1.name">
          Age: <input type="number" ng-model="user1.age">

          <h3>User 2</h3>
          Name: <input type="text" ng-model="user2.name">
          Age: <input type="number" ng-model="user2.age">

          <div>
            <br/>
            <input type="button" value="Compare" ng-click="compare()">
          </div>
          User 1: <pre>{{user1 | json}}</pre>
          User 2: <pre>{{user2 | json}}</pre>
          Equal: <pre>{{result}}</pre>
        </form>
      </div>
    </file>
    <file name="script.js">
        angular.module('equalsExample', []).controller('ExampleController', ['$scope', function($scope) {
          $scope.user1 = {};
          $scope.user2 = {};
          $scope.compare = function() {
            $scope.result = angular.equals($scope.user1, $scope.user2);
          };
        }]);
    </file>
  </example>
 */
function equals(o1, o2) {
  if (o1 === o2) return true;
  if (o1 === null || o2 === null) return false;
  // eslint-disable-next-line no-self-compare
  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN
  var t1 = typeof o1, t2 = typeof o2, length, key, keySet;
  if (t1 === t2 && t1 === 'object') {
    if (isArray(o1)) {
      if (!isArray(o2)) return false;
      if ((length = o1.length) === o2.length) {
        for (key = 0; key < length; key++) {
          if (!equals(o1[key], o2[key])) return false;
        }
        return true;
      }
    } else if (isDate(o1)) {
      if (!isDate(o2)) return false;
      return equals(o1.getTime(), o2.getTime());
    } else if (isRegExp(o1)) {
      if (!isRegExp(o2)) return false;
      return o1.toString() === o2.toString();
    } else {
      if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) ||
        isArray(o2) || isDate(o2) || isRegExp(o2)) return false;
      keySet = createMap();
      for (key in o1) {
        if (key.charAt(0) === '$' || isFunction(o1[key])) continue;
        if (!equals(o1[key], o2[key])) return false;
        keySet[key] = true;
      }
      for (key in o2) {
        if (!(key in keySet) &&
            key.charAt(0) !== '$' &&
            isDefined(o2[key]) &&
            !isFunction(o2[key])) return false;
      }
      return true;
    }
  }
  return false;
}

var csp = function() {
  if (!isDefined(csp.rules)) {


    var ngCspElement = (window.document.querySelector('[ng-csp]') ||
                    window.document.querySelector('[data-ng-csp]'));

    if (ngCspElement) {
      var ngCspAttribute = ngCspElement.getAttribute('ng-csp') ||
                    ngCspElement.getAttribute('data-ng-csp');
      csp.rules = {
        noUnsafeEval: !ngCspAttribute || (ngCspAttribute.indexOf('no-unsafe-eval') !== -1),
        noInlineStyle: !ngCspAttribute || (ngCspAttribute.indexOf('no-inline-style') !== -1)
      };
    } else {
      csp.rules = {
        noUnsafeEval: noUnsafeEval(),
        noInlineStyle: false
      };
    }
  }

  return csp.rules;

  function noUnsafeEval() {
    try {
      // eslint-disable-next-line no-new, no-new-func
      new Function('');
      return false;
    } catch (e) {
      return true;
    }
  }
};

/**
 * @ngdoc directive
 * @module ng
 * @name ngJq
 *
 * @element ANY
 * @param {string=} ngJq the name of the library available under `window`
 * to be used for angular.element
 * @description
 * Use this directive to force the angular.element library.  This should be
 * used to force either jqLite by leaving ng-jq blank or setting the name of
 * the jquery variable under window (eg. jQuery).
 *
 * Since angular looks for this directive when it is loaded (doesn't wait for the
 * DOMContentLoaded event), it must be placed on an element that comes before the script
 * which loads angular. Also, only the first instance of `ng-jq` will be used and all
 * others ignored.
 *
 * @example
 * This example shows how to force jqLite using the `ngJq` directive to the `html` tag.
 ```html
 <!doctype html>
 <html ng-app ng-jq>
 ...
 ...
 </html>
 ```
 * @example
 * This example shows how to use a jQuery based library of a different name.
 * The library name must be available at the top most 'window'.
 ```html
 <!doctype html>
 <html ng-app ng-jq="jQueryLib">
 ...
 ...
 </html>
 ```
 */
var jq = function() {
  if (isDefined(jq.name_)) return jq.name_;
  var el;
  var i, ii = ngAttrPrefixes.length, prefix, name;
  for (i = 0; i < ii; ++i) {
    prefix = ngAttrPrefixes[i];
    el = window.document.querySelector('[' + prefix.replace(':', '\\:') + 'jq]');
    if (el) {
      name = el.getAttribute(prefix + 'jq');
      break;
    }
  }

  return (jq.name_ = name);
};

function concat(array1, array2, index) {
  return array1.concat(slice.call(array2, index));
}

function sliceArgs(args, startIndex) {
  return slice.call(args, startIndex || 0);
}


/**
 * @ngdoc function
 * @name angular.bind
 * @module ng
 * @kind function
 *
 * @description
 * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for
 * `fn`). You can supply optional `args` that are prebound to the function. This feature is also
 * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as
 * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
 *
 * @param {Object} self Context which `fn` should be evaluated in.
 * @param {function()} fn Function to be bound.
 * @param {...*} args Optional arguments to be prebound to the `fn` function call.
 * @returns {function()} Function that wraps the `fn` with all the specified bindings.
 */
function bind(self, fn) {
  var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];
  if (isFunction(fn) && !(fn instanceof RegExp)) {
    return curryArgs.length
      ? function() {
          return arguments.length
            ? fn.apply(self, concat(curryArgs, arguments, 0))
            : fn.apply(self, curryArgs);
        }
      : function() {
          return arguments.length
            ? fn.apply(self, arguments)
            : fn.call(self);
        };
  } else {
    // In IE, native methods are not functions so they cannot be bound (note: they don't need to be).
    return fn;
  }
}


function toJsonReplacer(key, value) {
  var val = value;

  if (typeof key === 'string' && key.charAt(0) === '$' && key.charAt(1) === '$') {
    val = undefined;
  } else if (isWindow(value)) {
    val = '$WINDOW';
  } else if (value &&  window.document === value) {
    val = '$DOCUMENT';
  } else if (isScope(value)) {
    val = '$SCOPE';
  }

  return val;
}


/**
 * @ngdoc function
 * @name angular.toJson
 * @module ng
 * @kind function
 *
 * @description
 * Serializes input into a JSON-formatted string. Properties with leading $$ characters will be
 * stripped since angular uses this notation internally.
 *
 * @param {Object|Array|Date|string|number|boolean} obj Input to be serialized into JSON.
 * @param {boolean|number} [pretty=2] If set to true, the JSON output will contain newlines and whitespace.
 *    If set to an integer, the JSON output will contain that many spaces per indentation.
 * @returns {string|undefined} JSON-ified string representing `obj`.
 * @knownIssue
 *
 * The Safari browser throws a `RangeError` instead of returning `null` when it tries to stringify a `Date`
 * object with an invalid date value. The only reliable way to prevent this is to monkeypatch the
 * `Date.prototype.toJSON` method as follows:
 *
 * ```
 * var _DatetoJSON = Date.prototype.toJSON;
 * Date.prototype.toJSON = function() {
 *   try {
 *     return _DatetoJSON.call(this);
 *   } catch(e) {
 *     if (e instanceof RangeError) {
 *       return null;
 *     }
 *     throw e;
 *   }
 * };
 * ```
 *
 * See https://github.com/angular/angular.js/pull/14221 for more information.
 */
function toJson(obj, pretty) {
  if (isUndefined(obj)) return undefined;
  if (!isNumber(pretty)) {
    pretty = pretty ? 2 : null;
  }
  return JSON.stringify(obj, toJsonReplacer, pretty);
}


/**
 * @ngdoc function
 * @name angular.fromJson
 * @module ng
 * @kind function
 *
 * @description
 * Deserializes a JSON string.
 *
 * @param {string} json JSON string to deserialize.
 * @returns {Object|Array|string|number} Deserialized JSON string.
 */
function fromJson(json) {
  return isString(json)
      ? JSON.parse(json)
      : json;
}


var ALL_COLONS = /:/g;
function timezoneToOffset(timezone, fallback) {
  // Support: IE 9-11 only, Edge 13-14+
  // IE/Edge do not "understand" colon (`:`) in timezone
  timezone = timezone.replace(ALL_COLONS, '');
  var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;
  return isNumberNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
}


function addDateMinutes(date, minutes) {
  date = new Date(date.getTime());
  date.setMinutes(date.getMinutes() + minutes);
  return date;
}


function convertTimezoneToLocal(date, timezone, reverse) {
  reverse = reverse ? -1 : 1;
  var dateTimezoneOffset = date.getTimezoneOffset();
  var timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
  return addDateMinutes(date, reverse * (timezoneOffset - dateTimezoneOffset));
}


/**
 * @returns {string} Returns the string representation of the element.
 */
function startingTag(element) {
  element = jqLite(element).clone();
  try {
    // turns out IE does not let you set .html() on elements which
    // are not allowed to have children. So we just ignore it.
    element.empty();
  } catch (e) { /* empty */ }
  var elemHtml = jqLite('<div>').append(element).html();
  try {
    return element[0].nodeType === NODE_TYPE_TEXT ? lowercase(elemHtml) :
        elemHtml.
          match(/^(<[^>]+>)/)[1].
          replace(/^<([\w-]+)/, function(match, nodeName) {return '<' + lowercase(nodeName);});
  } catch (e) {
    return lowercase(elemHtml);
  }

}


/////////////////////////////////////////////////

/**
 * Tries to decode the URI component without throwing an exception.
 *
 * @private
 * @param str value potential URI component to check.
 * @returns {boolean} True if `value` can be decoded
 * with the decodeURIComponent function.
 */
function tryDecodeURIComponent(value) {
  try {
    return decodeURIComponent(value);
  } catch (e) {
    // Ignore any invalid uri component.
  }
}


/**
 * Parses an escaped url query string into key-value pairs.
 * @returns {Object.<string,boolean|Array>}
 */
function parseKeyValue(/**string*/keyValue) {
  var obj = {};
  forEach((keyValue || '').split('&'), function(keyValue) {
    var splitPoint, key, val;
    if (keyValue) {
      key = keyValue = keyValue.replace(/\+/g,'%20');
      splitPoint = keyValue.indexOf('=');
      if (splitPoint !== -1) {
        key = keyValue.substring(0, splitPoint);
        val = keyValue.substring(splitPoint + 1);
      }
      key = tryDecodeURIComponent(key);
      if (isDefined(key)) {
        val = isDefined(val) ? tryDecodeURIComponent(val) : true;
        if (!hasOwnProperty.call(obj, key)) {
          obj[key] = val;
        } else if (isArray(obj[key])) {
          obj[key].push(val);
        } else {
          obj[key] = [obj[key],val];
        }
      }
    }
  });
  return obj;
}

function toKeyValue(obj) {
  var parts = [];
  forEach(obj, function(value, key) {
    if (isArray(value)) {
      forEach(value, function(arrayValue) {
        parts.push(encodeUriQuery(key, true) +
                   (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));
      });
    } else {
    parts.push(encodeUriQuery(key, true) +
               (value === true ? '' : '=' + encodeUriQuery(value, true)));
    }
  });
  return parts.length ? parts.join('&') : '';
}


/**
 * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
 * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path
 * segments:
 *    segment       = *pchar
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
 *    pct-encoded   = "%" HEXDIG HEXDIG
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
 *                     / "*" / "+" / "," / ";" / "="
 */
function encodeUriSegment(val) {
  return encodeUriQuery(val, true).
             replace(/%26/gi, '&').
             replace(/%3D/gi, '=').
             replace(/%2B/gi, '+');
}


/**
 * This method is intended for encoding *key* or *value* parts of query component. We need a custom
 * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be
 * encoded per http://tools.ietf.org/html/rfc3986:
 *    query         = *( pchar / "/" / "?" )
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
 *    pct-encoded   = "%" HEXDIG HEXDIG
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
 *                     / "*" / "+" / "," / ";" / "="
 */
function encodeUriQuery(val, pctEncodeSpaces) {
  return encodeURIComponent(val).
             replace(/%40/gi, '@').
             replace(/%3A/gi, ':').
             replace(/%24/g, '$').
             replace(/%2C/gi, ',').
             replace(/%3B/gi, ';').
             replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));
}

var ngAttrPrefixes = ['ng-', 'data-ng-', 'ng:', 'x-ng-'];

function getNgAttribute(element, ngAttr) {
  var attr, i, ii = ngAttrPrefixes.length;
  for (i = 0; i < ii; ++i) {
    attr = ngAttrPrefixes[i] + ngAttr;
    if (isString(attr = element.getAttribute(attr))) {
      return attr;
    }
  }
  return null;
}

function allowAutoBootstrap(document) {
  var script = document.currentScript;
  var src = script && script.getAttribute('src');

  if (!src) {
    return true;
  }

  var link = document.createElement('a');
  link.href = src;

  if (document.location.origin === link.origin) {
    // Same-origin resources are always allowed, even for non-whitelisted schemes.
    return true;
  }
  // Disabled bootstrapping unless angular.js was loaded from a known scheme used on the web.
  // This is to prevent angular.js bundled with browser extensions from being used to bypass the
  // content security policy in web pages and other browser extensions.
  switch (link.protocol) {
    case 'http:':
    case 'https:':
    case 'ftp:':
    case 'blob:':
    case 'file:':
    case 'data:':
      return true;
    default:
      return false;
  }
}

// Cached as it has to run during loading so that document.currentScript is available.
var isAutoBootstrapAllowed = allowAutoBootstrap(window.document);

/**
 * @ngdoc directive
 * @name ngApp
 * @module ng
 *
 * @element ANY
 * @param {angular.Module} ngApp an optional application
 *   {@link angular.module module} name to load.
 * @param {boolean=} ngStrictDi if this attribute is present on the app element, the injector will be
 *   created in "strict-di" mode. This means that the application will fail to invoke functions which
 *   do not use explicit function annotation (and are thus unsuitable for minification), as described
 *   in {@link guide/di the Dependency Injection guide}, and useful debugging info will assist in
 *   tracking down the root of these bugs.
 *
 * @description
 *
 * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive
 * designates the **root element** of the application and is typically placed near the root element
 * of the page - e.g. on the `<body>` or `<html>` tags.
 *
 * There are a few things to keep in mind when using `ngApp`:
 * - only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`
 *   found in the document will be used to define the root element to auto-bootstrap as an
 *   application. To run multiple applications in an HTML document you must manually bootstrap them using
 *   {@link angular.bootstrap} instead.
 * - AngularJS applications cannot be nested within each other.
 * - Do not use a directive that uses {@link ng.$compile#transclusion transclusion} on the same element as `ngApp`.
 *   This includes directives such as {@link ng.ngIf `ngIf`}, {@link ng.ngInclude `ngInclude`} and
 *   {@link ngRoute.ngView `ngView`}.
 *   Doing this misplaces the app {@link ng.$rootElement `$rootElement`} and the app's {@link auto.$injector injector},
 *   causing animations to stop working and making the injector inaccessible from outside the app.
 *
 * You can specify an **AngularJS module** to be used as the root module for the application.  This
 * module will be loaded into the {@link auto.$injector} when the application is bootstrapped. It
 * should contain the application code needed or have dependencies on other modules that will
 * contain the code. See {@link angular.module} for more information.
 *
 * In the example below if the `ngApp` directive were not placed on the `html` element then the
 * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`
 * would not be resolved to `3`.
 *
 * `ngApp` is the easiest, and most common way to bootstrap an application.
 *
 <example module="ngAppDemo" name="ng-app">
   <file name="index.html">
   <div ng-controller="ngAppDemoController">
     I can add: {{a}} + {{b}} =  {{ a+b }}
   </div>
   </file>
   <file name="script.js">
   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {
     $scope.a = 1;
     $scope.b = 2;
   });
   </file>
 </example>
 *
 * Using `ngStrictDi`, you would see something like this:
 *
 <example ng-app-included="true" name="strict-di">
   <file name="index.html">
   <div ng-app="ngAppStrictDemo" ng-strict-di>
       <div ng-controller="GoodController1">
           I can add: {{a}} + {{b}} =  {{ a+b }}

           <p>This renders because the controller does not fail to
              instantiate, by using explicit annotation style (see
              script.js for details)
           </p>
       </div>

       <div ng-controller="GoodController2">
           Name: <input ng-model="name"><br />
           Hello, {{name}}!

           <p>This renders because the controller does not fail to
              instantiate, by using explicit annotation style
              (see script.js for details)
           </p>
       </div>

       <div ng-controller="BadController">
           I can add: {{a}} + {{b}} =  {{ a+b }}

           <p>The controller could not be instantiated, due to relying
              on automatic function annotations (which are disabled in
              strict mode). As such, the content of this section is not
              interpolated, and there should be an error in your web console.
           </p>
       </div>
   </div>
   </file>
   <file name="script.js">
   angular.module('ngAppStrictDemo', [])
     // BadController will fail to instantiate, due to relying on automatic function annotation,
     // rather than an explicit annotation
     .controller('BadController', function($scope) {
       $scope.a = 1;
       $scope.b = 2;
     })
     // Unlike BadController, GoodController1 and GoodController2 will not fail to be instantiated,
     // due to using explicit annotations using the array style and $inject property, respectively.
     .controller('GoodController1', ['$scope', function($scope) {
       $scope.a = 1;
       $scope.b = 2;
     }])
     .controller('GoodController2', GoodController2);
     function GoodController2($scope) {
       $scope.name = 'World';
     }
     GoodController2.$inject = ['$scope'];
   </file>
   <file name="style.css">
   div[ng-controller] {
       margin-bottom: 1em;
       -webkit-border-radius: 4px;
       border-radius: 4px;
       border: 1px solid;
       padding: .5em;
   }
   div[ng-controller^=Good] {
       border-color: #d6e9c6;
       background-color: #dff0d8;
       color: #3c763d;
   }
   div[ng-controller^=Bad] {
       border-color: #ebccd1;
       background-color: #f2dede;
       color: #a94442;
       margin-bottom: 0;
   }
   </file>
 </example>
 */
function angularInit(element, bootstrap) {
  var appElement,
      module,
      config = {};

  // The element `element` has priority over any other element.
  forEach(ngAttrPrefixes, function(prefix) {
    var name = prefix + 'app';

    if (!appElement && element.hasAttribute && element.hasAttribute(name)) {
      appElement = element;
      module = element.getAttribute(name);
    }
  });
  forEach(ngAttrPrefixes, function(prefix) {
    var name = prefix + 'app';
    var candidate;

    if (!appElement && (candidate = element.querySelector('[' + name.replace(':', '\\:') + ']'))) {
      appElement = candidate;
      module = candidate.getAttribute(name);
    }
  });
  if (appElement) {
    if (!isAutoBootstrapAllowed) {
      window.console.error('Angular: disabling automatic bootstrap. <script> protocol indicates ' +
          'an extension, document.location.href does not match.');
      return;
    }
    config.strictDi = getNgAttribute(appElement, 'strict-di') !== null;
    bootstrap(appElement, module ? [module] : [], config);
  }
}

/**
 * @ngdoc function
 * @name angular.bootstrap
 * @module ng
 * @description
 * Use this function to manually start up angular application.
 *
 * For more information, see the {@link guide/bootstrap Bootstrap guide}.
 *
 * Angular will detect if it has been loaded into the browser more than once and only allow the
 * first loaded script to be bootstrapped and will report a warning to the browser console for
 * each of the subsequent scripts. This prevents strange results in applications, where otherwise
 * multiple instances of Angular try to work on the DOM.
 *
 * <div class="alert alert-warning">
 * **Note:** Protractor based end-to-end tests cannot use this function to bootstrap manually.
 * They must use {@link ng.directive:ngApp ngApp}.
 * </div>
 *
 * <div class="alert alert-warning">
 * **Note:** Do not bootstrap the app on an element with a directive that uses {@link ng.$compile#transclusion transclusion},
 * such as {@link ng.ngIf `ngIf`}, {@link ng.ngInclude `ngInclude`} and {@link ngRoute.ngView `ngView`}.
 * Doing this misplaces the app {@link ng.$rootElement `$rootElement`} and the app's {@link auto.$injector injector},
 * causing animations to stop working and making the injector inaccessible from outside the app.
 * </div>
 *
 * ```html
 * <!doctype html>
 * <html>
 * <body>
 * <div ng-controller="WelcomeController">
 *   {{greeting}}
 * </div>
 *
 * <script src="angular.js"></script>
 * <script>
 *   var app = angular.module('demo', [])
 *   .controller('WelcomeController', function($scope) {
 *       $scope.greeting = 'Welcome!';
 *   });
 *   angular.bootstrap(document, ['demo']);
 * </script>
 * </body>
 * </html>
 * ```
 *
 * @param {DOMElement} element DOM element which is the root of angular application.
 * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.
 *     Each item in the array should be the name of a predefined module or a (DI annotated)
 *     function that will be invoked by the injector as a `config` block.
 *     See: {@link angular.module modules}
 * @param {Object=} config an object for defining configuration options for the application. The
 *     following keys are supported:
 *
 * * `strictDi` - disable automatic function annotation for the application. This is meant to
 *   assist in finding bugs which break minified code. Defaults to `false`.
 *
 * @returns {auto.$injector} Returns the newly created injector for this app.
 */
function bootstrap(element, modules, config) {
  if (!isObject(config)) config = {};
  var defaultConfig = {
    strictDi: false
  };
  config = extend(defaultConfig, config);
  var doBootstrap = function() {
    element = jqLite(element);

    if (element.injector()) {
      var tag = (element[0] === window.document) ? 'document' : startingTag(element);
      // Encode angle brackets to prevent input from being sanitized to empty string #8683.
      throw ngMinErr(
          'btstrpd',
          'App already bootstrapped with this element \'{0}\'',
          tag.replace(/</,'&lt;').replace(/>/,'&gt;'));
    }

    modules = modules || [];
    modules.unshift(['$provide', function($provide) {
      $provide.value('$rootElement', element);
    }]);

    if (config.debugInfoEnabled) {
      // Pushing so that this overrides `debugInfoEnabled` setting defined in user's `modules`.
      modules.push(['$compileProvider', function($compileProvider) {
        $compileProvider.debugInfoEnabled(true);
      }]);
    }

    modules.unshift('ng');
    var injector = createInjector(modules, config.strictDi);
    injector.invoke(['$rootScope', '$rootElement', '$compile', '$injector',
       function bootstrapApply(scope, element, compile, injector) {
        scope.$apply(function() {
          element.data('$injector', injector);
          compile(element)(scope);
        });
      }]
    );
    return injector;
  };

  var NG_ENABLE_DEBUG_INFO = /^NG_ENABLE_DEBUG_INFO!/;
  var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;

  if (window && NG_ENABLE_DEBUG_INFO.test(window.name)) {
    config.debugInfoEnabled = true;
    window.name = window.name.replace(NG_ENABLE_DEBUG_INFO, '');
  }

  if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {
    return doBootstrap();
  }

  window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');
  angular.resumeBootstrap = function(extraModules) {
    forEach(extraModules, function(module) {
      modules.push(module);
    });
    return doBootstrap();
  };

  if (isFunction(angular.resumeDeferredBootstrap)) {
    angular.resumeDeferredBootstrap();
  }
}

/**
 * @ngdoc function
 * @name angular.reloadWithDebugInfo
 * @module ng
 * @description
 * Use this function to reload the current application with debug information turned on.
 * This takes precedence over a call to `$compileProvider.debugInfoEnabled(false)`.
 *
 * See {@link ng.$compileProvider#debugInfoEnabled} for more.
 */
function reloadWithDebugInfo() {
  window.name = 'NG_ENABLE_DEBUG_INFO!' + window.name;
  window.location.reload();
}

/**
 * @name angular.getTestability
 * @module ng
 * @description
 * Get the testability service for the instance of Angular on the given
 * element.
 * @param {DOMElement} element DOM element which is the root of angular application.
 */
function getTestability(rootElement) {
  var injector = angular.element(rootElement).injector();
  if (!injector) {
    throw ngMinErr('test',
      'no injector found for element argument to getTestability');
  }
  return injector.get('$$testability');
}

var SNAKE_CASE_REGEXP = /[A-Z]/g;
function snake_case(name, separator) {
  separator = separator || '_';
  return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {
    return (pos ? separator : '') + letter.toLowerCase();
  });
}

var bindJQueryFired = false;
function bindJQuery() {
  var originalCleanData;

  if (bindJQueryFired) {
    return;
  }

  // bind to jQuery if present;
  var jqName = jq();
  jQuery = isUndefined(jqName) ? window.jQuery :   // use jQuery (if present)
           !jqName             ? undefined     :   // use jqLite
                                 window[jqName];   // use jQuery specified by `ngJq`

  // Use jQuery if it exists with proper functionality, otherwise default to us.
  // Angular 1.2+ requires jQuery 1.7+ for on()/off() support.
  // Angular 1.3+ technically requires at least jQuery 2.1+ but it may work with older
  // versions. It will not work for sure with jQuery <1.7, though.
  if (jQuery && jQuery.fn.on) {
    jqLite = jQuery;
    extend(jQuery.fn, {
      scope: JQLitePrototype.scope,
      isolateScope: JQLitePrototype.isolateScope,
      controller: /** @type {?} */ (JQLitePrototype).controller,
      injector: JQLitePrototype.injector,
      inheritedData: JQLitePrototype.inheritedData
    });

    // All nodes removed from the DOM via various jQuery APIs like .remove()
    // are passed through jQuery.cleanData. Monkey-patch this method to fire
    // the $destroy event on all removed nodes.
    originalCleanData = jQuery.cleanData;
    jQuery.cleanData = function(elems) {
      var events;
      for (var i = 0, elem; (elem = elems[i]) != null; i++) {
        events = jQuery._data(elem, 'events');
        if (events && events.$destroy) {
          jQuery(elem).triggerHandler('$destroy');
        }
      }
      originalCleanData(elems);
    };
  } else {
    jqLite = JQLite;
  }

  angular.element = jqLite;

  // Prevent double-proxying.
  bindJQueryFired = true;
}

/**
 * throw error if the argument is falsy.
 */
function assertArg(arg, name, reason) {
  if (!arg) {
    throw ngMinErr('areq', 'Argument \'{0}\' is {1}', (name || '?'), (reason || 'required'));
  }
  return arg;
}

function assertArgFn(arg, name, acceptArrayAnnotation) {
  if (acceptArrayAnnotation && isArray(arg)) {
      arg = arg[arg.length - 1];
  }

  assertArg(isFunction(arg), name, 'not a function, got ' +
      (arg && typeof arg === 'object' ? arg.constructor.name || 'Object' : typeof arg));
  return arg;
}

/**
 * throw error if the name given is hasOwnProperty
 * @param  {String} name    the name to test
 * @param  {String} context the context in which the name is used, such as module or directive
 */
function assertNotHasOwnProperty(name, context) {
  if (name === 'hasOwnProperty') {
    throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);
  }
}

/**
 * Return the value accessible from the object by path. Any undefined traversals are ignored
 * @param {Object} obj starting object
 * @param {String} path path to traverse
 * @param {boolean} [bindFnToScope=true]
 * @returns {Object} value as accessible by path
 */
//TODO(misko): this function needs to be removed
function getter(obj, path, bindFnToScope) {
  if (!path) return obj;
  var keys = path.split('.');
  var key;
  var lastInstance = obj;
  var len = keys.length;

  for (var i = 0; i < len; i++) {
    key = keys[i];
    if (obj) {
      obj = (lastInstance = obj)[key];
    }
  }
  if (!bindFnToScope && isFunction(obj)) {
    return bind(lastInstance, obj);
  }
  return obj;
}

/**
 * Return the DOM siblings between the first and last node in the given array.
 * @param {Array} array like object
 * @returns {Array} the inputted object or a jqLite collection containing the nodes
 */
function getBlockNodes(nodes) {
  // TODO(perf): update `nodes` instead of creating a new object?
  var node = nodes[0];
  var endNode = nodes[nodes.length - 1];
  var blockNodes;

  for (var i = 1; node !== endNode && (node = node.nextSibling); i++) {
    if (blockNodes || nodes[i] !== node) {
      if (!blockNodes) {
        blockNodes = jqLite(slice.call(nodes, 0, i));
      }
      blockNodes.push(node);
    }
  }

  return blockNodes || nodes;
}


/**
 * Creates a new object without a prototype. This object is useful for lookup without having to
 * guard against prototypically inherited properties via hasOwnProperty.
 *
 * Related micro-benchmarks:
 * - http://jsperf.com/object-create2
 * - http://jsperf.com/proto-map-lookup/2
 * - http://jsperf.com/for-in-vs-object-keys2
 *
 * @returns {Object}
 */
function createMap() {
  return Object.create(null);
}

function stringify(value) {
  if (value == null) { // null || undefined
    return '';
  }
  switch (typeof value) {
    case 'string':
      break;
    case 'number':
      value = '' + value;
      break;
    default:
      if (hasCustomToString(value) && !isArray(value) && !isDate(value)) {
        value = value.toString();
      } else {
        value = toJson(value);
      }
  }

  return value;
}

var NODE_TYPE_ELEMENT = 1;
var NODE_TYPE_ATTRIBUTE = 2;
var NODE_TYPE_TEXT = 3;
var NODE_TYPE_COMMENT = 8;
var NODE_TYPE_DOCUMENT = 9;
var NODE_TYPE_DOCUMENT_FRAGMENT = 11;

/**
 * @ngdoc type
 * @name angular.Module
 * @module ng
 * @description
 *
 * Interface for configuring angular {@link angular.module modules}.
 */

function setupModuleLoader(window) {

  var $injectorMinErr = minErr('$injector');
  var ngMinErr = minErr('ng');

  function ensure(obj, name, factory) {
    return obj[name] || (obj[name] = factory());
  }

  var angular = ensure(window, 'angular', Object);

  // We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap
  angular.$$minErr = angular.$$minErr || minErr;

  return ensure(angular, 'module', function() {
    /** @type {Object.<string, angular.Module>} */
    var modules = {};

    /**
     * @ngdoc function
     * @name angular.module
     * @module ng
     * @description
     *
     * The `angular.module` is a global place for creating, registering and retrieving Angular
     * modules.
     * All modules (angular core or 3rd party) that should be available to an application must be
     * registered using this mechanism.
     *
     * Passing one argument retrieves an existing {@link angular.Module},
     * whereas passing more than one argument creates a new {@link angular.Module}
     *
     *
     * # Module
     *
     * A module is a collection of services, directives, controllers, filters, and configuration information.
     * `angular.module` is used to configure the {@link auto.$injector $injector}.
     *
     * ```js
     * // Create a new module
     * var myModule = angular.module('myModule', []);
     *
     * // register a new service
     * myModule.value('appName', 'MyCoolApp');
     *
     * // configure existing services inside initialization blocks.
     * myModule.config(['$locationProvider', function($locationProvider) {
     *   // Configure existing providers
     *   $locationProvider.hashPrefix('!');
     * }]);
     * ```
     *
     * Then you can create an injector and load your modules like this:
     *
     * ```js
     * var injector = angular.injector(['ng', 'myModule'])
     * ```
     *
     * However it's more likely that you'll just use
     * {@link ng.directive:ngApp ngApp} or
     * {@link angular.bootstrap} to simplify this process for you.
     *
     * @param {!string} name The name of the module to create or retrieve.
     * @param {!Array.<string>=} requires If specified then new module is being created. If
     *        unspecified then the module is being retrieved for further configuration.
     * @param {Function=} configFn Optional configuration function for the module. Same as
     *        {@link angular.Module#config Module#config()}.
     * @returns {angular.Module} new module with the {@link angular.Module} api.
     */
    return function module(name, requires, configFn) {
      var assertNotHasOwnProperty = function(name, context) {
        if (name === 'hasOwnProperty') {
          throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);
        }
      };

      assertNotHasOwnProperty(name, 'module');
      if (requires && modules.hasOwnProperty(name)) {
        modules[name] = null;
      }
      return ensure(modules, name, function() {
        if (!requires) {
          throw $injectorMinErr('nomod', 'Module \'{0}\' is not available! You either misspelled ' +
             'the module name or forgot to load it. If registering a module ensure that you ' +
             'specify the dependencies as the second argument.', name);
        }

        /** @type {!Array.<Array.<*>>} */
        var invokeQueue = [];

        /** @type {!Array.<Function>} */
        var configBlocks = [];

        /** @type {!Array.<Function>} */
        var runBlocks = [];

        var config = invokeLater('$injector', 'invoke', 'push', configBlocks);

        /** @type {angular.Module} */
        var moduleInstance = {
          // Private state
          _invokeQueue: invokeQueue,
          _configBlocks: configBlocks,
          _runBlocks: runBlocks,

          /**
           * @ngdoc property
           * @name angular.Module#requires
           * @module ng
           *
           * @description
           * Holds the list of modules which the injector will load before the current module is
           * loaded.
           */
          requires: requires,

          /**
           * @ngdoc property
           * @name angular.Module#name
           * @module ng
           *
           * @description
           * Name of the module.
           */
          name: name,


          /**
           * @ngdoc method
           * @name angular.Module#provider
           * @module ng
           * @param {string} name service name
           * @param {Function} providerType Construction function for creating new instance of the
           *                                service.
           * @description
           * See {@link auto.$provide#provider $provide.provider()}.
           */
          provider: invokeLaterAndSetModuleName('$provide', 'provider'),

          /**
           * @ngdoc method
           * @name angular.Module#factory
           * @module ng
           * @param {string} name service name
           * @param {Function} providerFunction Function for creating new instance of the service.
           * @description
           * See {@link auto.$provide#factory $provide.factory()}.
           */
          factory: invokeLaterAndSetModuleName('$provide', 'factory'),

          /**
           * @ngdoc method
           * @name angular.Module#service
           * @module ng
           * @param {string} name service name
           * @param {Function} constructor A constructor function that will be instantiated.
           * @description
           * See {@link auto.$provide#service $provide.service()}.
           */
          service: invokeLaterAndSetModuleName('$provide', 'service'),

          /**
           * @ngdoc method
           * @name angular.Module#value
           * @module ng
           * @param {string} name service name
           * @param {*} object Service instance object.
           * @description
           * See {@link auto.$provide#value $provide.value()}.
           */
          value: invokeLater('$provide', 'value'),

          /**
           * @ngdoc method
           * @name angular.Module#constant
           * @module ng
           * @param {string} name constant name
           * @param {*} object Constant value.
           * @description
           * Because the constants are fixed, they get applied before other provide methods.
           * See {@link auto.$provide#constant $provide.constant()}.
           */
          constant: invokeLater('$provide', 'constant', 'unshift'),

           /**
           * @ngdoc method
           * @name angular.Module#decorator
           * @module ng
           * @param {string} name The name of the service to decorate.
           * @param {Function} decorFn This function will be invoked when the service needs to be
           *                           instantiated and should return the decorated service instance.
           * @description
           * See {@link auto.$provide#decorator $provide.decorator()}.
           */
          decorator: invokeLaterAndSetModuleName('$provide', 'decorator', configBlocks),

          /**
           * @ngdoc method
           * @name angular.Module#animation
           * @module ng
           * @param {string} name animation name
           * @param {Function} animationFactory Factory function for creating new instance of an
           *                                    animation.
           * @description
           *
           * **NOTE**: animations take effect only if the **ngAnimate** module is loaded.
           *
           *
           * Defines an animation hook that can be later used with
           * {@link $animate $animate} service and directives that use this service.
           *
           * ```js
           * module.animation('.animation-name', function($inject1, $inject2) {
           *   return {
           *     eventName : function(element, done) {
           *       //code to run the animation
           *       //once complete, then run done()
           *       return function cancellationFunction(element) {
           *         //code to cancel the animation
           *       }
           *     }
           *   }
           * })
           * ```
           *
           * See {@link ng.$animateProvider#register $animateProvider.register()} and
           * {@link ngAnimate ngAnimate module} for more information.
           */
          animation: invokeLaterAndSetModuleName('$animateProvider', 'register'),

          /**
           * @ngdoc method
           * @name angular.Module#filter
           * @module ng
           * @param {string} name Filter name - this must be a valid angular expression identifier
           * @param {Function} filterFactory Factory function for creating new instance of filter.
           * @description
           * See {@link ng.$filterProvider#register $filterProvider.register()}.
           *
           * <div class="alert alert-warning">
           * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
           * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
           * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
           * (`myapp_subsection_filterx`).
           * </div>
           */
          filter: invokeLaterAndSetModuleName('$filterProvider', 'register'),

          /**
           * @ngdoc method
           * @name angular.Module#controller
           * @module ng
           * @param {string|Object} name Controller name, or an object map of controllers where the
           *    keys are the names and the values are the constructors.
           * @param {Function} constructor Controller constructor function.
           * @description
           * See {@link ng.$controllerProvider#register $controllerProvider.register()}.
           */
          controller: invokeLaterAndSetModuleName('$controllerProvider', 'register'),

          /**
           * @ngdoc method
           * @name angular.Module#directive
           * @module ng
           * @param {string|Object} name Directive name, or an object map of directives where the
           *    keys are the names and the values are the factories.
           * @param {Function} directiveFactory Factory function for creating new instance of
           * directives.
           * @description
           * See {@link ng.$compileProvider#directive $compileProvider.directive()}.
           */
          directive: invokeLaterAndSetModuleName('$compileProvider', 'directive'),

          /**
           * @ngdoc method
           * @name angular.Module#component
           * @module ng
           * @param {string} name Name of the component in camel-case (i.e. myComp which will match as my-comp)
           * @param {Object} options Component definition object (a simplified
           *    {@link ng.$compile#directive-definition-object directive definition object})
           *
           * @description
           * See {@link ng.$compileProvider#component $compileProvider.component()}.
           */
          component: invokeLaterAndSetModuleName('$compileProvider', 'component'),

          /**
           * @ngdoc method
           * @name angular.Module#config
           * @module ng
           * @param {Function} configFn Execute this function on module load. Useful for service
           *    configuration.
           * @description
           * Use this method to register work which needs to be performed on module loading.
           * For more about how to configure services, see
           * {@link providers#provider-recipe Provider Recipe}.
           */
          config: config,

          /**
           * @ngdoc method
           * @name angular.Module#run
           * @module ng
           * @param {Function} initializationFn Execute this function after injector creation.
           *    Useful for application initialization.
           * @description
           * Use this method to register work which should be performed when the injector is done
           * loading all modules.
           */
          run: function(block) {
            runBlocks.push(block);
            return this;
          }
        };

        if (configFn) {
          config(configFn);
        }

        return moduleInstance;

        /**
         * @param {string} provider
         * @param {string} method
         * @param {String=} insertMethod
         * @returns {angular.Module}
         */
        function invokeLater(provider, method, insertMethod, queue) {
          if (!queue) queue = invokeQueue;
          return function() {
            queue[insertMethod || 'push']([provider, method, arguments]);
            return moduleInstance;
          };
        }

        /**
         * @param {string} provider
         * @param {string} method
         * @returns {angular.Module}
         */
        function invokeLaterAndSetModuleName(provider, method, queue) {
          if (!queue) queue = invokeQueue;
          return function(recipeName, factoryFunction) {
            if (factoryFunction && isFunction(factoryFunction)) factoryFunction.$$moduleName = name;
            queue.push([provider, method, arguments]);
            return moduleInstance;
          };
        }
      });
    };
  });

}

/* global shallowCopy: true */

/**
 * Creates a shallow copy of an object, an array or a primitive.
 *
 * Assumes that there are no proto properties for objects.
 */
function shallowCopy(src, dst) {
  if (isArray(src)) {
    dst = dst || [];

    for (var i = 0, ii = src.length; i < ii; i++) {
      dst[i] = src[i];
    }
  } else if (isObject(src)) {
    dst = dst || {};

    for (var key in src) {
      if (!(key.charAt(0) === '$' && key.charAt(1) === '$')) {
        dst[key] = src[key];
      }
    }
  }

  return dst || src;
}

/* global toDebugString: true */

function serializeObject(obj) {
  var seen = [];

  return JSON.stringify(obj, function(key, val) {
    val = toJsonReplacer(key, val);
    if (isObject(val)) {

      if (seen.indexOf(val) >= 0) return '...';

      seen.push(val);
    }
    return val;
  });
}

function toDebugString(obj) {
  if (typeof obj === 'function') {
    return obj.toString().replace(/ \{[\s\S]*$/, '');
  } else if (isUndefined(obj)) {
    return 'undefined';
  } else if (typeof obj !== 'string') {
    return serializeObject(obj);
  }
  return obj;
}

/* global angularModule: true,
  version: true,

  $CompileProvider,

  htmlAnchorDirective,
  inputDirective,
  inputDirective,
  formDirective,
  scriptDirective,
  selectDirective,
  optionDirective,
  ngBindDirective,
  ngBindHtmlDirective,
  ngBindTemplateDirective,
  ngClassDirective,
  ngClassEvenDirective,
  ngClassOddDirective,
  ngCloakDirective,
  ngControllerDirective,
  ngFormDirective,
  ngHideDirective,
  ngIfDirective,
  ngIncludeDirective,
  ngIncludeFillContentDirective,
  ngInitDirective,
  ngNonBindableDirective,
  ngPluralizeDirective,
  ngRepeatDirective,
  ngShowDirective,
  ngStyleDirective,
  ngSwitchDirective,
  ngSwitchWhenDirective,
  ngSwitchDefaultDirective,
  ngOptionsDirective,
  ngTranscludeDirective,
  ngModelDirective,
  ngListDirective,
  ngChangeDirective,
  patternDirective,
  patternDirective,
  requiredDirective,
  requiredDirective,
  minlengthDirective,
  minlengthDirective,
  maxlengthDirective,
  maxlengthDirective,
  ngValueDirective,
  ngModelOptionsDirective,
  ngAttributeAliasDirectives,
  ngEventDirectives,

  $AnchorScrollProvider,
  $AnimateProvider,
  $CoreAnimateCssProvider,
  $$CoreAnimateJsProvider,
  $$CoreAnimateQueueProvider,
  $$AnimateRunnerFactoryProvider,
  $$AnimateAsyncRunFactoryProvider,
  $BrowserProvider,
  $CacheFactoryProvider,
  $ControllerProvider,
  $DateProvider,
  $DocumentProvider,
  $$IsDocumentHiddenProvider,
  $ExceptionHandlerProvider,
  $FilterProvider,
  $$ForceReflowProvider,
  $InterpolateProvider,
  $IntervalProvider,
  $HttpProvider,
  $HttpParamSerializerProvider,
  $HttpParamSerializerJQLikeProvider,
  $HttpBackendProvider,
  $xhrFactoryProvider,
  $jsonpCallbacksProvider,
  $LocationProvider,
  $LogProvider,
  $$MapProvider,
  $ParseProvider,
  $RootScopeProvider,
  $QProvider,
  $$QProvider,
  $$SanitizeUriProvider,
  $SceProvider,
  $SceDelegateProvider,
  $SnifferProvider,
  $TemplateCacheProvider,
  $TemplateRequestProvider,
  $$TestabilityProvider,
  $TimeoutProvider,
  $$RAFProvider,
  $WindowProvider,
  $$jqLiteProvider,
  $$CookieReaderProvider
*/


/**
 * @ngdoc object
 * @name angular.version
 * @module ng
 * @description
 * An object that contains information about the current AngularJS version.
 *
 * This object has the following properties:
 *
 * - `full` – `{string}` – Full version string, such as "0.9.18".
 * - `major` – `{number}` – Major version number, such as "0".
 * - `minor` – `{number}` – Minor version number, such as "9".
 * - `dot` – `{number}` – Dot version number, such as "18".
 * - `codeName` – `{string}` – Code name of the release, such as "jiggling-armfat".
 */
var version = {
  // These placeholder strings will be replaced by grunt's `build` task.
  // They need to be double- or single-quoted.
  full: '1.6.2',
  major: 1,
  minor: 6,
  dot: 2,
  codeName: 'llamacorn-lovehug'
};


function publishExternalAPI(angular) {
  extend(angular, {
    'bootstrap': bootstrap,
    'copy': copy,
    'extend': extend,
    'merge': merge,
    'equals': equals,
    'element': jqLite,
    'forEach': forEach,
    'injector': createInjector,
    'noop': noop,
    'bind': bind,
    'toJson': toJson,
    'fromJson': fromJson,
    'identity': identity,
    'isUndefined': isUndefined,
    'isDefined': isDefined,
    'isString': isString,
    'isFunction': isFunction,
    'isObject': isObject,
    'isNumber': isNumber,
    'isElement': isElement,
    'isArray': isArray,
    'version': version,
    'isDate': isDate,
    'lowercase': lowercase,
    'uppercase': uppercase,
    'callbacks': {$$counter: 0},
    'getTestability': getTestability,
    'reloadWithDebugInfo': reloadWithDebugInfo,
    '$$minErr': minErr,
    '$$csp': csp,
    '$$encodeUriSegment': encodeUriSegment,
    '$$encodeUriQuery': encodeUriQuery,
    '$$stringify': stringify
  });

  angularModule = setupModuleLoader(window);

  angularModule('ng', ['ngLocale'], ['$provide',
    function ngModule($provide) {
      // $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.
      $provide.provider({
        $$sanitizeUri: $$SanitizeUriProvider
      });
      $provide.provider('$compile', $CompileProvider).
        directive({
            a: htmlAnchorDirective,
            input: inputDirective,
            textarea: inputDirective,
            form: formDirective,
            script: scriptDirective,
            select: selectDirective,
            option: optionDirective,
            ngBind: ngBindDirective,
            ngBindHtml: ngBindHtmlDirective,
            ngBindTemplate: ngBindTemplateDirective,
            ngClass: ngClassDirective,
            ngClassEven: ngClassEvenDirective,
            ngClassOdd: ngClassOddDirective,
            ngCloak: ngCloakDirective,
            ngController: ngControllerDirective,
            ngForm: ngFormDirective,
            ngHide: ngHideDirective,
            ngIf: ngIfDirective,
            ngInclude: ngIncludeDirective,
            ngInit: ngInitDirective,
            ngNonBindable: ngNonBindableDirective,
            ngPluralize: ngPluralizeDirective,
            ngRepeat: ngRepeatDirective,
            ngShow: ngShowDirective,
            ngStyle: ngStyleDirective,
            ngSwitch: ngSwitchDirective,
            ngSwitchWhen: ngSwitchWhenDirective,
            ngSwitchDefault: ngSwitchDefaultDirective,
            ngOptions: ngOptionsDirective,
            ngTransclude: ngTranscludeDirective,
            ngModel: ngModelDirective,
            ngList: ngListDirective,
            ngChange: ngChangeDirective,
            pattern: patternDirective,
            ngPattern: patternDirective,
            required: requiredDirective,
            ngRequired: requiredDirective,
            minlength: minlengthDirective,
            ngMinlength: minlengthDirective,
            maxlength: maxlengthDirective,
            ngMaxlength: maxlengthDirective,
            ngValue: ngValueDirective,
            ngModelOptions: ngModelOptionsDirective
        }).
        directive({
          ngInclude: ngIncludeFillContentDirective
        }).
        directive(ngAttributeAliasDirectives).
        directive(ngEventDirectives);
      $provide.provider({
        $anchorScroll: $AnchorScrollProvider,
        $animate: $AnimateProvider,
        $animateCss: $CoreAnimateCssProvider,
        $$animateJs: $$CoreAnimateJsProvider,
        $$animateQueue: $$CoreAnimateQueueProvider,
        $$AnimateRunner: $$AnimateRunnerFactoryProvider,
        $$animateAsyncRun: $$AnimateAsyncRunFactoryProvider,
        $browser: $BrowserProvider,
        $cacheFactory: $CacheFactoryProvider,
        $controller: $ControllerProvider,
        $document: $DocumentProvider,
        $$isDocumentHidden: $$IsDocumentHiddenProvider,
        $exceptionHandler: $ExceptionHandlerProvider,
        $filter: $FilterProvider,
        $$forceReflow: $$ForceReflowProvider,
        $interpolate: $InterpolateProvider,
        $interval: $IntervalProvider,
        $http: $HttpProvider,
        $httpParamSerializer: $HttpParamSerializerProvider,
        $httpParamSerializerJQLike: $HttpParamSerializerJQLikeProvider,
        $httpBackend: $HttpBackendProvider,
        $xhrFactory: $xhrFactoryProvider,
        $jsonpCallbacks: $jsonpCallbacksProvider,
        $location: $LocationProvider,
        $log: $LogProvider,
        $parse: $ParseProvider,
        $rootScope: $RootScopeProvider,
        $q: $QProvider,
        $$q: $$QProvider,
        $sce: $SceProvider,
        $sceDelegate: $SceDelegateProvider,
        $sniffer: $SnifferProvider,
        $templateCache: $TemplateCacheProvider,
        $templateRequest: $TemplateRequestProvider,
        $$testability: $$TestabilityProvider,
        $timeout: $TimeoutProvider,
        $window: $WindowProvider,
        $$rAF: $$RAFProvider,
        $$jqLite: $$jqLiteProvider,
        $$Map: $$MapProvider,
        $$cookieReader: $$CookieReaderProvider
      });
    }
  ]);
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *     Any commits to this file should be reviewed with security in mind.  *
 *   Changes to this file can potentially create security vulnerabilities. *
 *          An approval from 2 Core members with history of modifying      *
 *                         this file is required.                          *
 *                                                                         *
 *  Does the change somehow allow for arbitrary javascript to be executed? *
 *    Or allows for someone to change the prototype of built-in objects?   *
 *     Or gives undesired access to variables likes document or window?    *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* global
  JQLitePrototype: true,
  BOOLEAN_ATTR: true,
  ALIASED_ATTR: true
*/

//////////////////////////////////
//JQLite
//////////////////////////////////

/**
 * @ngdoc function
 * @name angular.element
 * @module ng
 * @kind function
 *
 * @description
 * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.
 *
 * If jQuery is available, `angular.element` is an alias for the
 * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`
 * delegates to Angular's built-in subset of jQuery, called "jQuery lite" or **jqLite**.
 *
 * jqLite is a tiny, API-compatible subset of jQuery that allows
 * Angular to manipulate the DOM in a cross-browser compatible way. jqLite implements only the most
 * commonly needed functionality with the goal of having a very small footprint.
 *
 * To use `jQuery`, simply ensure it is loaded before the `angular.js` file. You can also use the
 * {@link ngJq `ngJq`} directive to specify that jqlite should be used over jQuery, or to use a
 * specific version of jQuery if multiple versions exist on the page.
 *
 * <div class="alert alert-info">**Note:** All element references in Angular are always wrapped with jQuery or
 * jqLite (such as the element argument in a directive's compile / link function). They are never raw DOM references.</div>
 *
 * <div class="alert alert-warning">**Note:** Keep in mind that this function will not find elements
 * by tag name / CSS selector. For lookups by tag name, try instead `angular.element(document).find(...)`
 * or `$document.find()`, or use the standard DOM APIs, e.g. `document.querySelectorAll()`.</div>
 *
 * ## Angular's jqLite
 * jqLite provides only the following jQuery methods:
 *
 * - [`addClass()`](http://api.jquery.com/addClass/) - Does not support a function as first argument
 * - [`after()`](http://api.jquery.com/after/)
 * - [`append()`](http://api.jquery.com/append/)
 * - [`attr()`](http://api.jquery.com/attr/) - Does not support functions as parameters
 * - [`bind()`](http://api.jquery.com/bind/) (_deprecated_, use [`on()`](http://api.jquery.com/on/)) - Does not support namespaces, selectors or eventData
 * - [`children()`](http://api.jquery.com/children/) - Does not support selectors
 * - [`clone()`](http://api.jquery.com/clone/)
 * - [`contents()`](http://api.jquery.com/contents/)
 * - [`css()`](http://api.jquery.com/css/) - Only retrieves inline-styles, does not call `getComputedStyle()`.
 *   As a setter, does not convert numbers to strings or append 'px', and also does not have automatic property prefixing.
 * - [`data()`](http://api.jquery.com/data/)
 * - [`detach()`](http://api.jquery.com/detach/)
 * - [`empty()`](http://api.jquery.com/empty/)
 * - [`eq()`](http://api.jquery.com/eq/)
 * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name
 * - [`hasClass()`](http://api.jquery.com/hasClass/)
 * - [`html()`](http://api.jquery.com/html/)
 * - [`next()`](http://api.jquery.com/next/) - Does not support selectors
 * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData
 * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces, selectors or event object as parameter
 * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors
 * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors
 * - [`prepend()`](http://api.jquery.com/prepend/)
 * - [`prop()`](http://api.jquery.com/prop/)
 * - [`ready()`](http://api.jquery.com/ready/) (_deprecated_, use `angular.element(callback)` instead of `angular.element(document).ready(callback)`)
 * - [`remove()`](http://api.jquery.com/remove/)
 * - [`removeAttr()`](http://api.jquery.com/removeAttr/) - Does not support multiple attributes
 * - [`removeClass()`](http://api.jquery.com/removeClass/) - Does not support a function as first argument
 * - [`removeData()`](http://api.jquery.com/removeData/)
 * - [`replaceWith()`](http://api.jquery.com/replaceWith/)
 * - [`text()`](http://api.jquery.com/text/)
 * - [`toggleClass()`](http://api.jquery.com/toggleClass/) - Does not support a function as first argument
 * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers
 * - [`unbind()`](http://api.jquery.com/unbind/) (_deprecated_, use [`off()`](http://api.jquery.com/off/)) - Does not support namespaces or event object as parameter
 * - [`val()`](http://api.jquery.com/val/)
 * - [`wrap()`](http://api.jquery.com/wrap/)
 *
 * ## jQuery/jqLite Extras
 * Angular also provides the following additional methods and events to both jQuery and jqLite:
 *
 * ### Events
 * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event
 *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM
 *    element before it is removed.
 *
 * ### Methods
 * - `controller(name)` - retrieves the controller of the current element or its parent. By default
 *   retrieves controller associated with the `ngController` directive. If `name` is provided as
 *   camelCase directive name, then the controller for this directive will be retrieved (e.g.
 *   `'ngModel'`).
 * - `injector()` - retrieves the injector of the current element or its parent.
 * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current
 *   element or its parent. Requires {@link guide/production#disabling-debug-data Debug Data} to
 *   be enabled.
 * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the
 *   current element. This getter should be used only on elements that contain a directive which starts a new isolate
 *   scope. Calling `scope()` on this element always returns the original non-isolate scope.
 *   Requires {@link guide/production#disabling-debug-data Debug Data} to be enabled.
 * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top
 *   parent element is reached.
 *
 * @knownIssue You cannot spy on `angular.element` if you are using Jasmine version 1.x. See
 * https://github.com/angular/angular.js/issues/14251 for more information.
 *
 * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.
 * @returns {Object} jQuery object.
 */

JQLite.expando = 'ng339';

var jqCache = JQLite.cache = {},
    jqId = 1;

/*
 * !!! This is an undocumented "private" function !!!
 */
JQLite._data = function(node) {
  //jQuery always returns an object on cache miss
  return this.cache[node[this.expando]] || {};
};

function jqNextId() { return ++jqId; }


var DASH_LOWERCASE_REGEXP = /-([a-z])/g;
var MS_HACK_REGEXP = /^-ms-/;
var MOUSE_EVENT_MAP = { mouseleave: 'mouseout', mouseenter: 'mouseover' };
var jqLiteMinErr = minErr('jqLite');

/**
 * Converts kebab-case to camelCase.
 * There is also a special case for the ms prefix starting with a lowercase letter.
 * @param name Name to normalize
 */
function cssKebabToCamel(name) {
    return kebabToCamel(name.replace(MS_HACK_REGEXP, 'ms-'));
}

function fnCamelCaseReplace(all, letter) {
  return letter.toUpperCase();
}

/**
 * Converts kebab-case to camelCase.
 * @param name Name to normalize
 */
function kebabToCamel(name) {
  return name
    .replace(DASH_LOWERCASE_REGEXP, fnCamelCaseReplace);
}

var SINGLE_TAG_REGEXP = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/;
var HTML_REGEXP = /<|&#?\w+;/;
var TAG_NAME_REGEXP = /<([\w:-]+)/;
var XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi;

var wrapMap = {
  'option': [1, '<select multiple="multiple">', '</select>'],

  'thead': [1, '<table>', '</table>'],
  'col': [2, '<table><colgroup>', '</colgroup></table>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],
  'td': [3, '<table><tbody><tr>', '</tr></tbody></table>'],
  '_default': [0, '', '']
};

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function jqLiteIsTextNode(html) {
  return !HTML_REGEXP.test(html);
}

function jqLiteAcceptsData(node) {
  // The window object can accept data but has no nodeType
  // Otherwise we are only interested in elements (1) and documents (9)
  var nodeType = node.nodeType;
  return nodeType === NODE_TYPE_ELEMENT || !nodeType || nodeType === NODE_TYPE_DOCUMENT;
}

function jqLiteHasData(node) {
  for (var key in jqCache[node.ng339]) {
    return true;
  }
  return false;
}

function jqLiteCleanData(nodes) {
  for (var i = 0, ii = nodes.length; i < ii; i++) {
    jqLiteRemoveData(nodes[i]);
  }
}

function jqLiteBuildFragment(html, context) {
  var tmp, tag, wrap,
      fragment = context.createDocumentFragment(),
      nodes = [], i;

  if (jqLiteIsTextNode(html)) {
    // Convert non-html into a text node
    nodes.push(context.createTextNode(html));
  } else {
    // Convert html into DOM nodes
    tmp = fragment.appendChild(context.createElement('div'));
    tag = (TAG_NAME_REGEXP.exec(html) || ['', ''])[1].toLowerCase();
    wrap = wrapMap[tag] || wrapMap._default;
    tmp.innerHTML = wrap[1] + html.replace(XHTML_TAG_REGEXP, '<$1></$2>') + wrap[2];

    // Descend through wrappers to the right content
    i = wrap[0];
    while (i--) {
      tmp = tmp.lastChild;
    }

    nodes = concat(nodes, tmp.childNodes);

    tmp = fragment.firstChild;
    tmp.textContent = '';
  }

  // Remove wrapper from fragment
  fragment.textContent = '';
  fragment.innerHTML = ''; // Clear inner HTML
  forEach(nodes, function(node) {
    fragment.appendChild(node);
  });

  return fragment;
}

function jqLiteParseHTML(html, context) {
  context = context || window.document;
  var parsed;

  if ((parsed = SINGLE_TAG_REGEXP.exec(html))) {
    return [context.createElement(parsed[1])];
  }

  if ((parsed = jqLiteBuildFragment(html, context))) {
    return parsed.childNodes;
  }

  return [];
}

function jqLiteWrapNode(node, wrapper) {
  var parent = node.parentNode;

  if (parent) {
    parent.replaceChild(wrapper, node);
  }

  wrapper.appendChild(node);
}


// IE9-11 has no method "contains" in SVG element and in Node.prototype. Bug #10259.
var jqLiteContains = window.Node.prototype.contains || /** @this */ function(arg) {
  // eslint-disable-next-line no-bitwise
  return !!(this.compareDocumentPosition(arg) & 16);
};

/////////////////////////////////////////////
function JQLite(element) {
  if (element instanceof JQLite) {
    return element;
  }

  var argIsString;

  if (isString(element)) {
    element = trim(element);
    argIsString = true;
  }
  if (!(this instanceof JQLite)) {
    if (argIsString && element.charAt(0) !== '<') {
      throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');
    }
    return new JQLite(element);
  }

  if (argIsString) {
    jqLiteAddNodes(this, jqLiteParseHTML(element));
  } else if (isFunction(element)) {
    jqLiteReady(element);
  } else {
    jqLiteAddNodes(this, element);
  }
}

function jqLiteClone(element) {
  return element.cloneNode(true);
}

function jqLiteDealoc(element, onlyDescendants) {
  if (!onlyDescendants) jqLiteRemoveData(element);

  if (element.querySelectorAll) {
    var descendants = element.querySelectorAll('*');
    for (var i = 0, l = descendants.length; i < l; i++) {
      jqLiteRemoveData(descendants[i]);
    }
  }
}

function jqLiteOff(element, type, fn, unsupported) {
  if (isDefined(unsupported)) throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');

  var expandoStore = jqLiteExpandoStore(element);
  var events = expandoStore && expandoStore.events;
  var handle = expandoStore && expandoStore.handle;

  if (!handle) return; //no listeners registered

  if (!type) {
    for (type in events) {
      if (type !== '$destroy') {
        element.removeEventListener(type, handle);
      }
      delete events[type];
    }
  } else {

    var removeHandler = function(type) {
      var listenerFns = events[type];
      if (isDefined(fn)) {
        arrayRemove(listenerFns || [], fn);
      }
      if (!(isDefined(fn) && listenerFns && listenerFns.length > 0)) {
        element.removeEventListener(type, handle);
        delete events[type];
      }
    };

    forEach(type.split(' '), function(type) {
      removeHandler(type);
      if (MOUSE_EVENT_MAP[type]) {
        removeHandler(MOUSE_EVENT_MAP[type]);
      }
    });
  }
}

function jqLiteRemoveData(element, name) {
  var expandoId = element.ng339;
  var expandoStore = expandoId && jqCache[expandoId];

  if (expandoStore) {
    if (name) {
      delete expandoStore.data[name];
      return;
    }

    if (expandoStore.handle) {
      if (expandoStore.events.$destroy) {
        expandoStore.handle({}, '$destroy');
      }
      jqLiteOff(element);
    }
    delete jqCache[expandoId];
    element.ng339 = undefined; // don't delete DOM expandos. IE and Chrome don't like it
  }
}


function jqLiteExpandoStore(element, createIfNecessary) {
  var expandoId = element.ng339,
      expandoStore = expandoId && jqCache[expandoId];

  if (createIfNecessary && !expandoStore) {
    element.ng339 = expandoId = jqNextId();
    expandoStore = jqCache[expandoId] = {events: {}, data: {}, handle: undefined};
  }

  return expandoStore;
}


function jqLiteData(element, key, value) {
  if (jqLiteAcceptsData(element)) {
    var prop;

    var isSimpleSetter = isDefined(value);
    var isSimpleGetter = !isSimpleSetter && key && !isObject(key);
    var massGetter = !key;
    var expandoStore = jqLiteExpandoStore(element, !isSimpleGetter);
    var data = expandoStore && expandoStore.data;

    if (isSimpleSetter) { // data('key', value)
      data[kebabToCamel(key)] = value;
    } else {
      if (massGetter) {  // data()
        return data;
      } else {
        if (isSimpleGetter) { // data('key')
          // don't force creation of expandoStore if it doesn't exist yet
          return data && data[kebabToCamel(key)];
        } else { // mass-setter: data({key1: val1, key2: val2})
          for (prop in key) {
            data[kebabToCamel(prop)] = key[prop];
          }
        }
      }
    }
  }
}

function jqLiteHasClass(element, selector) {
  if (!element.getAttribute) return false;
  return ((' ' + (element.getAttribute('class') || '') + ' ').replace(/[\n\t]/g, ' ').
      indexOf(' ' + selector + ' ') > -1);
}

function jqLiteRemoveClass(element, cssClasses) {
  if (cssClasses && element.setAttribute) {
    forEach(cssClasses.split(' '), function(cssClass) {
      element.setAttribute('class', trim(
          (' ' + (element.getAttribute('class') || '') + ' ')
          .replace(/[\n\t]/g, ' ')
          .replace(' ' + trim(cssClass) + ' ', ' '))
      );
    });
  }
}

function jqLiteAddClass(element, cssClasses) {
  if (cssClasses && element.setAttribute) {
    var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ')
                            .replace(/[\n\t]/g, ' ');

    forEach(cssClasses.split(' '), function(cssClass) {
      cssClass = trim(cssClass);
      if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {
        existingClasses += cssClass + ' ';
      }
    });

    element.setAttribute('class', trim(existingClasses));
  }
}


function jqLiteAddNodes(root, elements) {
  // THIS CODE IS VERY HOT. Don't make changes without benchmarking.

  if (elements) {

    // if a Node (the most common case)
    if (elements.nodeType) {
      root[root.length++] = elements;
    } else {
      var length = elements.length;

      // if an Array or NodeList and not a Window
      if (typeof length === 'number' && elements.window !== elements) {
        if (length) {
          for (var i = 0; i < length; i++) {
            root[root.length++] = elements[i];
          }
        }
      } else {
        root[root.length++] = elements;
      }
    }
  }
}


function jqLiteController(element, name) {
  return jqLiteInheritedData(element, '$' + (name || 'ngController') + 'Controller');
}

function jqLiteInheritedData(element, name, value) {
  // if element is the document object work with the html element instead
  // this makes $(document).scope() possible
  if (element.nodeType === NODE_TYPE_DOCUMENT) {
    element = element.documentElement;
  }
  var names = isArray(name) ? name : [name];

  while (element) {
    for (var i = 0, ii = names.length; i < ii; i++) {
      if (isDefined(value = jqLite.data(element, names[i]))) return value;
    }

    // If dealing with a document fragment node with a host element, and no parent, use the host
    // element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM
    // to lookup parent controllers.
    element = element.parentNode || (element.nodeType === NODE_TYPE_DOCUMENT_FRAGMENT && element.host);
  }
}

function jqLiteEmpty(element) {
  jqLiteDealoc(element, true);
  while (element.firstChild) {
    element.removeChild(element.firstChild);
  }
}

function jqLiteRemove(element, keepData) {
  if (!keepData) jqLiteDealoc(element);
  var parent = element.parentNode;
  if (parent) parent.removeChild(element);
}


function jqLiteDocumentLoaded(action, win) {
  win = win || window;
  if (win.document.readyState === 'complete') {
    // Force the action to be run async for consistent behavior
    // from the action's point of view
    // i.e. it will definitely not be in a $apply
    win.setTimeout(action);
  } else {
    // No need to unbind this handler as load is only ever called once
    jqLite(win).on('load', action);
  }
}

function jqLiteReady(fn) {
  function trigger() {
    window.document.removeEventListener('DOMContentLoaded', trigger);
    window.removeEventListener('load', trigger);
    fn();
  }

  // check if document is already loaded
  if (window.document.readyState === 'complete') {
    window.setTimeout(fn);
  } else {
    // We can not use jqLite since we are not done loading and jQuery could be loaded later.

    // Works for modern browsers and IE9
    window.document.addEventListener('DOMContentLoaded', trigger);

    // Fallback to window.onload for others
    window.addEventListener('load', trigger);
  }
}

//////////////////////////////////////////
// Functions which are declared directly.
//////////////////////////////////////////
var JQLitePrototype = JQLite.prototype = {
  ready: jqLiteReady,
  toString: function() {
    var value = [];
    forEach(this, function(e) { value.push('' + e);});
    return '[' + value.join(', ') + ']';
  },

  eq: function(index) {
      return (index >= 0) ? jqLite(this[index]) : jqLite(this[this.length + index]);
  },

  length: 0,
  push: push,
  sort: [].sort,
  splice: [].splice
};

//////////////////////////////////////////
// Functions iterating getter/setters.
// these functions return self on setter and
// value on get.
//////////////////////////////////////////
var BOOLEAN_ATTR = {};
forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function(value) {
  BOOLEAN_ATTR[lowercase(value)] = value;
});
var BOOLEAN_ELEMENTS = {};
forEach('input,select,option,textarea,button,form,details'.split(','), function(value) {
  BOOLEAN_ELEMENTS[value] = true;
});
var ALIASED_ATTR = {
  'ngMinlength': 'minlength',
  'ngMaxlength': 'maxlength',
  'ngMin': 'min',
  'ngMax': 'max',
  'ngPattern': 'pattern',
  'ngStep': 'step'
};

function getBooleanAttrName(element, name) {
  // check dom last since we will most likely fail on name
  var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];

  // booleanAttr is here twice to minimize DOM access
  return booleanAttr && BOOLEAN_ELEMENTS[nodeName_(element)] && booleanAttr;
}

function getAliasedAttrName(name) {
  return ALIASED_ATTR[name];
}

forEach({
  data: jqLiteData,
  removeData: jqLiteRemoveData,
  hasData: jqLiteHasData,
  cleanData: jqLiteCleanData
}, function(fn, name) {
  JQLite[name] = fn;
});

forEach({
  data: jqLiteData,
  inheritedData: jqLiteInheritedData,

  scope: function(element) {
    // Can't use jqLiteData here directly so we stay compatible with jQuery!
    return jqLite.data(element, '$scope') || jqLiteInheritedData(element.parentNode || element, ['$isolateScope', '$scope']);
  },

  isolateScope: function(element) {
    // Can't use jqLiteData here directly so we stay compatible with jQuery!
    return jqLite.data(element, '$isolateScope') || jqLite.data(element, '$isolateScopeNoTemplate');
  },

  controller: jqLiteController,

  injector: function(element) {
    return jqLiteInheritedData(element, '$injector');
  },

  removeAttr: function(element, name) {
    element.removeAttribute(name);
  },

  hasClass: jqLiteHasClass,

  css: function(element, name, value) {
    name = cssKebabToCamel(name);

    if (isDefined(value)) {
      element.style[name] = value;
    } else {
      return element.style[name];
    }
  },

  attr: function(element, name, value) {
    var ret;
    var nodeType = element.nodeType;
    if (nodeType === NODE_TYPE_TEXT || nodeType === NODE_TYPE_ATTRIBUTE || nodeType === NODE_TYPE_COMMENT ||
      !element.getAttribute) {
      return;
    }

    var lowercasedName = lowercase(name);
    var isBooleanAttr = BOOLEAN_ATTR[lowercasedName];

    if (isDefined(value)) {
      // setter

      if (value === null || (value === false && isBooleanAttr)) {
        element.removeAttribute(name);
      } else {
        element.setAttribute(name, isBooleanAttr ? lowercasedName : value);
      }
    } else {
      // getter

      ret = element.getAttribute(name);

      if (isBooleanAttr && ret !== null) {
        ret = lowercasedName;
      }
      // Normalize non-existing attributes to undefined (as jQuery).
      return ret === null ? undefined : ret;
    }
  },

  prop: function(element, name, value) {
    if (isDefined(value)) {
      element[name] = value;
    } else {
      return element[name];
    }
  },

  text: (function() {
    getText.$dv = '';
    return getText;

    function getText(element, value) {
      if (isUndefined(value)) {
        var nodeType = element.nodeType;
        return (nodeType === NODE_TYPE_ELEMENT || nodeType === NODE_TYPE_TEXT) ? element.textContent : '';
      }
      element.textContent = value;
    }
  })(),

  val: function(element, value) {
    if (isUndefined(value)) {
      if (element.multiple && nodeName_(element) === 'select') {
        var result = [];
        forEach(element.options, function(option) {
          if (option.selected) {
            result.push(option.value || option.text);
          }
        });
        return result;
      }
      return element.value;
    }
    element.value = value;
  },

  html: function(element, value) {
    if (isUndefined(value)) {
      return element.innerHTML;
    }
    jqLiteDealoc(element, true);
    element.innerHTML = value;
  },

  empty: jqLiteEmpty
}, function(fn, name) {
  /**
   * Properties: writes return selection, reads return first value
   */
  JQLite.prototype[name] = function(arg1, arg2) {
    var i, key;
    var nodeCount = this.length;

    // jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it
    // in a way that survives minification.
    // jqLiteEmpty takes no arguments but is a setter.
    if (fn !== jqLiteEmpty &&
        (isUndefined((fn.length === 2 && (fn !== jqLiteHasClass && fn !== jqLiteController)) ? arg1 : arg2))) {
      if (isObject(arg1)) {

        // we are a write, but the object properties are the key/values
        for (i = 0; i < nodeCount; i++) {
          if (fn === jqLiteData) {
            // data() takes the whole object in jQuery
            fn(this[i], arg1);
          } else {
            for (key in arg1) {
              fn(this[i], key, arg1[key]);
            }
          }
        }
        // return self for chaining
        return this;
      } else {
        // we are a read, so read the first child.
        // TODO: do we still need this?
        var value = fn.$dv;
        // Only if we have $dv do we iterate over all, otherwise it is just the first element.
        var jj = (isUndefined(value)) ? Math.min(nodeCount, 1) : nodeCount;
        for (var j = 0; j < jj; j++) {
          var nodeValue = fn(this[j], arg1, arg2);
          value = value ? value + nodeValue : nodeValue;
        }
        return value;
      }
    } else {
      // we are a write, so apply to all children
      for (i = 0; i < nodeCount; i++) {
        fn(this[i], arg1, arg2);
      }
      // return self for chaining
      return this;
    }
  };
});

function createEventHandler(element, events) {
  var eventHandler = function(event, type) {
    // jQuery specific api
    event.isDefaultPrevented = function() {
      return event.defaultPrevented;
    };

    var eventFns = events[type || event.type];
    var eventFnsLength = eventFns ? eventFns.length : 0;

    if (!eventFnsLength) return;

    if (isUndefined(event.immediatePropagationStopped)) {
      var originalStopImmediatePropagation = event.stopImmediatePropagation;
      event.stopImmediatePropagation = function() {
        event.immediatePropagationStopped = true;

        if (event.stopPropagation) {
          event.stopPropagation();
        }

        if (originalStopImmediatePropagation) {
          originalStopImmediatePropagation.call(event);
        }
      };
    }

    event.isImmediatePropagationStopped = function() {
      return event.immediatePropagationStopped === true;
    };

    // Some events have special handlers that wrap the real handler
    var handlerWrapper = eventFns.specialHandlerWrapper || defaultHandlerWrapper;

    // Copy event handlers in case event handlers array is modified during execution.
    if ((eventFnsLength > 1)) {
      eventFns = shallowCopy(eventFns);
    }

    for (var i = 0; i < eventFnsLength; i++) {
      if (!event.isImmediatePropagationStopped()) {
        handlerWrapper(element, event, eventFns[i]);
      }
    }
  };

  // TODO: this is a hack for angularMocks/clearDataCache that makes it possible to deregister all
  //       events on `element`
  eventHandler.elem = element;
  return eventHandler;
}

function defaultHandlerWrapper(element, event, handler) {
  handler.call(element, event);
}

function specialMouseHandlerWrapper(target, event, handler) {
  // Refer to jQuery's implementation of mouseenter & mouseleave
  // Read about mouseenter and mouseleave:
  // http://www.quirksmode.org/js/events_mouse.html#link8
  var related = event.relatedTarget;
  // For mousenter/leave call the handler if related is outside the target.
  // NB: No relatedTarget if the mouse left/entered the browser window
  if (!related || (related !== target && !jqLiteContains.call(target, related))) {
    handler.call(target, event);
  }
}

//////////////////////////////////////////
// Functions iterating traversal.
// These functions chain results into a single
// selector.
//////////////////////////////////////////
forEach({
  removeData: jqLiteRemoveData,

  on: function jqLiteOn(element, type, fn, unsupported) {
    if (isDefined(unsupported)) throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');

    // Do not add event handlers to non-elements because they will not be cleaned up.
    if (!jqLiteAcceptsData(element)) {
      return;
    }

    var expandoStore = jqLiteExpandoStore(element, true);
    var events = expandoStore.events;
    var handle = expandoStore.handle;

    if (!handle) {
      handle = expandoStore.handle = createEventHandler(element, events);
    }

    // http://jsperf.com/string-indexof-vs-split
    var types = type.indexOf(' ') >= 0 ? type.split(' ') : [type];
    var i = types.length;

    var addHandler = function(type, specialHandlerWrapper, noEventListener) {
      var eventFns = events[type];

      if (!eventFns) {
        eventFns = events[type] = [];
        eventFns.specialHandlerWrapper = specialHandlerWrapper;
        if (type !== '$destroy' && !noEventListener) {
          element.addEventListener(type, handle);
        }
      }

      eventFns.push(fn);
    };

    while (i--) {
      type = types[i];
      if (MOUSE_EVENT_MAP[type]) {
        addHandler(MOUSE_EVENT_MAP[type], specialMouseHandlerWrapper);
        addHandler(type, undefined, true);
      } else {
        addHandler(type);
      }
    }
  },

  off: jqLiteOff,

  one: function(element, type, fn) {
    element = jqLite(element);

    //add the listener twice so that when it is called
    //you can remove the original function and still be
    //able to call element.off(ev, fn) normally
    element.on(type, function onFn() {
      element.off(type, fn);
      element.off(type, onFn);
    });
    element.on(type, fn);
  },

  replaceWith: function(element, replaceNode) {
    var index, parent = element.parentNode;
    jqLiteDealoc(element);
    forEach(new JQLite(replaceNode), function(node) {
      if (index) {
        parent.insertBefore(node, index.nextSibling);
      } else {
        parent.replaceChild(node, element);
      }
      index = node;
    });
  },

  children: function(element) {
    var children = [];
    forEach(element.childNodes, function(element) {
      if (element.nodeType === NODE_TYPE_ELEMENT) {
        children.push(element);
      }
    });
    return children;
  },

  contents: function(element) {
    return element.contentDocument || element.childNodes || [];
  },

  append: function(element, node) {
    var nodeType = element.nodeType;
    if (nodeType !== NODE_TYPE_ELEMENT && nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT) return;

    node = new JQLite(node);

    for (var i = 0, ii = node.length; i < ii; i++) {
      var child = node[i];
      element.appendChild(child);
    }
  },

  prepend: function(element, node) {
    if (element.nodeType === NODE_TYPE_ELEMENT) {
      var index = element.firstChild;
      forEach(new JQLite(node), function(child) {
        element.insertBefore(child, index);
      });
    }
  },

  wrap: function(element, wrapNode) {
    jqLiteWrapNode(element, jqLite(wrapNode).eq(0).clone()[0]);
  },

  remove: jqLiteRemove,

  detach: function(element) {
    jqLiteRemove(element, true);
  },

  after: function(element, newElement) {
    var index = element, parent = element.parentNode;

    if (parent) {
      newElement = new JQLite(newElement);

      for (var i = 0, ii = newElement.length; i < ii; i++) {
        var node = newElement[i];
        parent.insertBefore(node, index.nextSibling);
        index = node;
      }
    }
  },

  addClass: jqLiteAddClass,
  removeClass: jqLiteRemoveClass,

  toggleClass: function(element, selector, condition) {
    if (selector) {
      forEach(selector.split(' '), function(className) {
        var classCondition = condition;
        if (isUndefined(classCondition)) {
          classCondition = !jqLiteHasClass(element, className);
        }
        (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);
      });
    }
  },

  parent: function(element) {
    var parent = element.parentNode;
    return parent && parent.nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT ? parent : null;
  },

  next: function(element) {
    return element.nextElementSibling;
  },

  find: function(element, selector) {
    if (element.getElementsByTagName) {
      return element.getElementsByTagName(selector);
    } else {
      return [];
    }
  },

  clone: jqLiteClone,

  triggerHandler: function(element, event, extraParameters) {

    var dummyEvent, eventFnsCopy, handlerArgs;
    var eventName = event.type || event;
    var expandoStore = jqLiteExpandoStore(element);
    var events = expandoStore && expandoStore.events;
    var eventFns = events && events[eventName];

    if (eventFns) {
      // Create a dummy event to pass to the handlers
      dummyEvent = {
        preventDefault: function() { this.defaultPrevented = true; },
        isDefaultPrevented: function() { return this.defaultPrevented === true; },
        stopImmediatePropagation: function() { this.immediatePropagationStopped = true; },
        isImmediatePropagationStopped: function() { return this.immediatePropagationStopped === true; },
        stopPropagation: noop,
        type: eventName,
        target: element
      };

      // If a custom event was provided then extend our dummy event with it
      if (event.type) {
        dummyEvent = extend(dummyEvent, event);
      }

      // Copy event handlers in case event handlers array is modified during execution.
      eventFnsCopy = shallowCopy(eventFns);
      handlerArgs = extraParameters ? [dummyEvent].concat(extraParameters) : [dummyEvent];

      forEach(eventFnsCopy, function(fn) {
        if (!dummyEvent.isImmediatePropagationStopped()) {
          fn.apply(element, handlerArgs);
        }
      });
    }
  }
}, function(fn, name) {
  /**
   * chaining functions
   */
  JQLite.prototype[name] = function(arg1, arg2, arg3) {
    var value;

    for (var i = 0, ii = this.length; i < ii; i++) {
      if (isUndefined(value)) {
        value = fn(this[i], arg1, arg2, arg3);
        if (isDefined(value)) {
          // any function which returns a value needs to be wrapped
          value = jqLite(value);
        }
      } else {
        jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));
      }
    }
    return isDefined(value) ? value : this;
  };
});

// bind legacy bind/unbind to on/off
JQLite.prototype.bind = JQLite.prototype.on;
JQLite.prototype.unbind = JQLite.prototype.off;


// Provider for private $$jqLite service
/** @this */
function $$jqLiteProvider() {
  this.$get = function $$jqLite() {
    return extend(JQLite, {
      hasClass: function(node, classes) {
        if (node.attr) node = node[0];
        return jqLiteHasClass(node, classes);
      },
      addClass: function(node, classes) {
        if (node.attr) node = node[0];
        return jqLiteAddClass(node, classes);
      },
      removeClass: function(node, classes) {
        if (node.attr) node = node[0];
        return jqLiteRemoveClass(node, classes);
      }
    });
  };
}

/**
 * Computes a hash of an 'obj'.
 * Hash of a:
 *  string is string
 *  number is number as string
 *  object is either result of calling $$hashKey function on the object or uniquely generated id,
 *         that is also assigned to the $$hashKey property of the object.
 *
 * @param obj
 * @returns {string} hash string such that the same input will have the same hash string.
 *         The resulting string key is in 'type:hashKey' format.
 */
function hashKey(obj, nextUidFn) {
  var key = obj && obj.$$hashKey;

  if (key) {
    if (typeof key === 'function') {
      key = obj.$$hashKey();
    }
    return key;
  }

  var objType = typeof obj;
  if (objType === 'function' || (objType === 'object' && obj !== null)) {
    key = obj.$$hashKey = objType + ':' + (nextUidFn || nextUid)();
  } else {
    key = objType + ':' + obj;
  }

  return key;
}

// A minimal ES2015 Map implementation.
// Should be bug/feature equivalent to the native implementations of supported browsers
// (for the features required in Angular).
// See https://kangax.github.io/compat-table/es6/#test-Map
var nanKey = Object.create(null);
function NgMapShim() {
  this._keys = [];
  this._values = [];
  this._lastKey = NaN;
  this._lastIndex = -1;
}
NgMapShim.prototype = {
  _idx: function(key) {
    if (key === this._lastKey) {
      return this._lastIndex;
    }
    this._lastKey = key;
    this._lastIndex = this._keys.indexOf(key);
    return this._lastIndex;
  },
  _transformKey: function(key) {
    return isNumberNaN(key) ? nanKey : key;
  },
  get: function(key) {
    key = this._transformKey(key);
    var idx = this._idx(key);
    if (idx !== -1) {
      return this._values[idx];
    }
  },
  set: function(key, value) {
    key = this._transformKey(key);
    var idx = this._idx(key);
    if (idx === -1) {
      idx = this._lastIndex = this._keys.length;
    }
    this._keys[idx] = key;
    this._values[idx] = value;

    // Support: IE11
    // Do not `return this` to simulate the partial IE11 implementation
  },
  delete: function(key) {
    key = this._transformKey(key);
    var idx = this._idx(key);
    if (idx === -1) {
      return false;
    }
    this._keys.splice(idx, 1);
    this._values.splice(idx, 1);
    this._lastKey = NaN;
    this._lastIndex = -1;
    return true;
  }
};

// For now, always use `NgMapShim`, even if `window.Map` is available. Some native implementations
// are still buggy (often in subtle ways) and can cause hard-to-debug failures. When native `Map`
// implementations get more stable, we can reconsider switching to `window.Map` (when available).
var NgMap = NgMapShim;

var $$MapProvider = [/** @this */function() {
  this.$get = [function() {
    return NgMap;
  }];
}];

/**
 * @ngdoc function
 * @module ng
 * @name angular.injector
 * @kind function
 *
 * @description
 * Creates an injector object that can be used for retrieving services as well as for
 * dependency injection (see {@link guide/di dependency injection}).
 *
 * @param {Array.<string|Function>} modules A list of module functions or their aliases. See
 *     {@link angular.module}. The `ng` module must be explicitly added.
 * @param {boolean=} [strictDi=false] Whether the injector should be in strict mode, which
 *     disallows argument name annotation inference.
 * @returns {injector} Injector object. See {@link auto.$injector $injector}.
 *
 * @example
 * Typical usage
 * ```js
 *   // create an injector
 *   var $injector = angular.injector(['ng']);
 *
 *   // use the injector to kick off your application
 *   // use the type inference to auto inject arguments, or use implicit injection
 *   $injector.invoke(function($rootScope, $compile, $document) {
 *     $compile($document)($rootScope);
 *     $rootScope.$digest();
 *   });
 * ```
 *
 * Sometimes you want to get access to the injector of a currently running Angular app
 * from outside Angular. Perhaps, you want to inject and compile some markup after the
 * application has been bootstrapped. You can do this using the extra `injector()` added
 * to JQuery/jqLite elements. See {@link angular.element}.
 *
 * *This is fairly rare but could be the case if a third party library is injecting the
 * markup.*
 *
 * In the following example a new block of HTML containing a `ng-controller`
 * directive is added to the end of the document body by JQuery. We then compile and link
 * it into the current AngularJS scope.
 *
 * ```js
 * var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');
 * $(document.body).append($div);
 *
 * angular.element(document).injector().invoke(function($compile) {
 *   var scope = angular.element($div).scope();
 *   $compile($div)(scope);
 * });
 * ```
 */


/**
 * @ngdoc module
 * @name auto
 * @installation
 * @description
 *
 * Implicit module which gets automatically added to each {@link auto.$injector $injector}.
 */

var ARROW_ARG = /^([^(]+?)=>/;
var FN_ARGS = /^[^(]*\(\s*([^)]*)\)/m;
var FN_ARG_SPLIT = /,/;
var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;
var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
var $injectorMinErr = minErr('$injector');

function stringifyFn(fn) {
  return Function.prototype.toString.call(fn);
}

function extractArgs(fn) {
  var fnText = stringifyFn(fn).replace(STRIP_COMMENTS, ''),
      args = fnText.match(ARROW_ARG) || fnText.match(FN_ARGS);
  return args;
}

function anonFn(fn) {
  // For anonymous functions, showing at the very least the function signature can help in
  // debugging.
  var args = extractArgs(fn);
  if (args) {
    return 'function(' + (args[1] || '').replace(/[\s\r\n]+/, ' ') + ')';
  }
  return 'fn';
}

function annotate(fn, strictDi, name) {
  var $inject,
      argDecl,
      last;

  if (typeof fn === 'function') {
    if (!($inject = fn.$inject)) {
      $inject = [];
      if (fn.length) {
        if (strictDi) {
          if (!isString(name) || !name) {
            name = fn.name || anonFn(fn);
          }
          throw $injectorMinErr('strictdi',
            '{0} is not using explicit annotation and cannot be invoked in strict mode', name);
        }
        argDecl = extractArgs(fn);
        forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg) {
          arg.replace(FN_ARG, function(all, underscore, name) {
            $inject.push(name);
          });
        });
      }
      fn.$inject = $inject;
    }
  } else if (isArray(fn)) {
    last = fn.length - 1;
    assertArgFn(fn[last], 'fn');
    $inject = fn.slice(0, last);
  } else {
    assertArgFn(fn, 'fn', true);
  }
  return $inject;
}

///////////////////////////////////////

/**
 * @ngdoc service
 * @name $injector
 *
 * @description
 *
 * `$injector` is used to retrieve object instances as defined by
 * {@link auto.$provide provider}, instantiate types, invoke methods,
 * and load modules.
 *
 * The following always holds true:
 *
 * ```js
 *   var $injector = angular.injector();
 *   expect($injector.get('$injector')).toBe($injector);
 *   expect($injector.invoke(function($injector) {
 *     return $injector;
 *   })).toBe($injector);
 * ```
 *
 * # Injection Function Annotation
 *
 * JavaScript does not have annotations, and annotations are needed for dependency injection. The
 * following are all valid ways of annotating function with injection arguments and are equivalent.
 *
 * ```js
 *   // inferred (only works if code not minified/obfuscated)
 *   $injector.invoke(function(serviceA){});
 *
 *   // annotated
 *   function explicit(serviceA) {};
 *   explicit.$inject = ['serviceA'];
 *   $injector.invoke(explicit);
 *
 *   // inline
 *   $injector.invoke(['serviceA', function(serviceA){}]);
 * ```
 *
 * ## Inference
 *
 * In JavaScript calling `toString()` on a function returns the function definition. The definition
 * can then be parsed and the function arguments can be extracted. This method of discovering
 * annotations is disallowed when the injector is in strict mode.
 * *NOTE:* This does not work with minification, and obfuscation tools since these tools change the
 * argument names.
 *
 * ## `$inject` Annotation
 * By adding an `$inject` property onto a function the injection parameters can be specified.
 *
 * ## Inline
 * As an array of injection names, where the last item in the array is the function to call.
 */

/**
 * @ngdoc method
 * @name $injector#get
 *
 * @description
 * Return an instance of the service.
 *
 * @param {string} name The name of the instance to retrieve.
 * @param {string=} caller An optional string to provide the origin of the function call for error messages.
 * @return {*} The instance.
 */

/**
 * @ngdoc method
 * @name $injector#invoke
 *
 * @description
 * Invoke the method and supply the method arguments from the `$injector`.
 *
 * @param {Function|Array.<string|Function>} fn The injectable function to invoke. Function parameters are
 *   injected according to the {@link guide/di $inject Annotation} rules.
 * @param {Object=} self The `this` for the invoked method.
 * @param {Object=} locals Optional object. If preset then any argument names are read from this
 *                         object first, before the `$injector` is consulted.
 * @returns {*} the value returned by the invoked `fn` function.
 */

/**
 * @ngdoc method
 * @name $injector#has
 *
 * @description
 * Allows the user to query if the particular service exists.
 *
 * @param {string} name Name of the service to query.
 * @returns {boolean} `true` if injector has given service.
 */

/**
 * @ngdoc method
 * @name $injector#instantiate
 * @description
 * Create a new instance of JS type. The method takes a constructor function, invokes the new
 * operator, and supplies all of the arguments to the constructor function as specified by the
 * constructor annotation.
 *
 * @param {Function} Type Annotated constructor function.
 * @param {Object=} locals Optional object. If preset then any argument names are read from this
 * object first, before the `$injector` is consulted.
 * @returns {Object} new instance of `Type`.
 */

/**
 * @ngdoc method
 * @name $injector#annotate
 *
 * @description
 * Returns an array of service names which the function is requesting for injection. This API is
 * used by the injector to determine which services need to be injected into the function when the
 * function is invoked. There are three ways in which the function can be annotated with the needed
 * dependencies.
 *
 * # Argument names
 *
 * The simplest form is to extract the dependencies from the arguments of the function. This is done
 * by converting the function into a string using `toString()` method and extracting the argument
 * names.
 * ```js
 *   // Given
 *   function MyController($scope, $route) {
 *     // ...
 *   }
 *
 *   // Then
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
 * ```
 *
 * You can disallow this method by using strict injection mode.
 *
 * This method does not work with code minification / obfuscation. For this reason the following
 * annotation strategies are supported.
 *
 * # The `$inject` property
 *
 * If a function has an `$inject` property and its value is an array of strings, then the strings
 * represent names of services to be injected into the function.
 * ```js
 *   // Given
 *   var MyController = function(obfuscatedScope, obfuscatedRoute) {
 *     // ...
 *   }
 *   // Define function dependencies
 *   MyController['$inject'] = ['$scope', '$route'];
 *
 *   // Then
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
 * ```
 *
 * # The array notation
 *
 * It is often desirable to inline Injected functions and that's when setting the `$inject` property
 * is very inconvenient. In these situations using the array notation to specify the dependencies in
 * a way that survives minification is a better choice:
 *
 * ```js
 *   // We wish to write this (not minification / obfuscation safe)
 *   injector.invoke(function($compile, $rootScope) {
 *     // ...
 *   });
 *
 *   // We are forced to write break inlining
 *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {
 *     // ...
 *   };
 *   tmpFn.$inject = ['$compile', '$rootScope'];
 *   injector.invoke(tmpFn);
 *
 *   // To better support inline function the inline annotation is supported
 *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {
 *     // ...
 *   }]);
 *
 *   // Therefore
 *   expect(injector.annotate(
 *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])
 *    ).toEqual(['$compile', '$rootScope']);
 * ```
 *
 * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to
 * be retrieved as described above.
 *
 * @param {boolean=} [strictDi=false] Disallow argument name annotation inference.
 *
 * @returns {Array.<string>} The names of the services which the function requires.
 */



/**
 * @ngdoc service
 * @name $provide
 *
 * @description
 *
 * The {@link auto.$provide $provide} service has a number of methods for registering components
 * with the {@link auto.$injector $injector}. Many of these functions are also exposed on
 * {@link angular.Module}.
 *
 * An Angular **service** is a singleton object created by a **service factory**.  These **service
 * factories** are functions which, in turn, are created by a **service provider**.
 * The **service providers** are constructor functions. When instantiated they must contain a
 * property called `$get`, which holds the **service factory** function.
 *
 * When you request a service, the {@link auto.$injector $injector} is responsible for finding the
 * correct **service provider**, instantiating it and then calling its `$get` **service factory**
 * function to get the instance of the **service**.
 *
 * Often services have no configuration options and there is no need to add methods to the service
 * provider.  The provider will be no more than a constructor function with a `$get` property. For
 * these cases the {@link auto.$provide $provide} service has additional helper methods to register
 * services without specifying a provider.
 *
 * * {@link auto.$provide#provider provider(name, provider)} - registers a **service provider** with the
 *     {@link auto.$injector $injector}
 * * {@link auto.$provide#constant constant(name, obj)} - registers a value/object that can be accessed by
 *     providers and services.
 * * {@link auto.$provide#value value(name, obj)} - registers a value/object that can only be accessed by
 *     services, not providers.
 * * {@link auto.$provide#factory factory(name, fn)} - registers a service **factory function**
 *     that will be wrapped in a **service provider** object, whose `$get` property will contain the
 *     given factory function.
 * * {@link auto.$provide#service service(name, Fn)} - registers a **constructor function**
 *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate
 *      a new object using the given constructor function.
 * * {@link auto.$provide#decorator decorator(name, decorFn)} - registers a **decorator function** that
 *      will be able to modify or replace the implementation of another service.
 *
 * See the individual methods for more information and examples.
 */

/**
 * @ngdoc method
 * @name $provide#provider
 * @description
 *
 * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions
 * are constructor functions, whose instances are responsible for "providing" a factory for a
 * service.
 *
 * Service provider names start with the name of the service they provide followed by `Provider`.
 * For example, the {@link ng.$log $log} service has a provider called
 * {@link ng.$logProvider $logProvider}.
 *
 * Service provider objects can have additional methods which allow configuration of the provider
 * and its service. Importantly, you can configure what kind of service is created by the `$get`
 * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a
 * method {@link ng.$logProvider#debugEnabled debugEnabled}
 * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the
 * console or not.
 *
 * @param {string} name The name of the instance. NOTE: the provider will be available under `name +
                        'Provider'` key.
 * @param {(Object|function())} provider If the provider is:
 *
 *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using
 *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.
 *   - `Constructor`: a new instance of the provider will be created using
 *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.
 *
 * @returns {Object} registered provider instance

 * @example
 *
 * The following example shows how to create a simple event tracking service and register it using
 * {@link auto.$provide#provider $provide.provider()}.
 *
 * ```js
 *  // Define the eventTracker provider
 *  function EventTrackerProvider() {
 *    var trackingUrl = '/track';
 *
 *    // A provider method for configuring where the tracked events should been saved
 *    this.setTrackingUrl = function(url) {
 *      trackingUrl = url;
 *    };
 *
 *    // The service factory function
 *    this.$get = ['$http', function($http) {
 *      var trackedEvents = {};
 *      return {
 *        // Call this to track an event
 *        event: function(event) {
 *          var count = trackedEvents[event] || 0;
 *          count += 1;
 *          trackedEvents[event] = count;
 *          return count;
 *        },
 *        // Call this to save the tracked events to the trackingUrl
 *        save: function() {
 *          $http.post(trackingUrl, trackedEvents);
 *        }
 *      };
 *    }];
 *  }
 *
 *  describe('eventTracker', function() {
 *    var postSpy;
 *
 *    beforeEach(module(function($provide) {
 *      // Register the eventTracker provider
 *      $provide.provider('eventTracker', EventTrackerProvider);
 *    }));
 *
 *    beforeEach(module(function(eventTrackerProvider) {
 *      // Configure eventTracker provider
 *      eventTrackerProvider.setTrackingUrl('/custom-track');
 *    }));
 *
 *    it('tracks events', inject(function(eventTracker) {
 *      expect(eventTracker.event('login')).toEqual(1);
 *      expect(eventTracker.event('login')).toEqual(2);
 *    }));
 *
 *    it('saves to the tracking url', inject(function(eventTracker, $http) {
 *      postSpy = spyOn($http, 'post');
 *      eventTracker.event('login');
 *      eventTracker.save();
 *      expect(postSpy).toHaveBeenCalled();
 *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');
 *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');
 *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });
 *    }));
 *  });
 * ```
 */

/**
 * @ngdoc method
 * @name $provide#factory
 * @description
 *
 * Register a **service factory**, which will be called to return the service instance.
 * This is short for registering a service where its provider consists of only a `$get` property,
 * which is the given service factory function.
 * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to
 * configure your service in a provider.
 *
 * @param {string} name The name of the instance.
 * @param {Function|Array.<string|Function>} $getFn The injectable $getFn for the instance creation.
 *                      Internally this is a short hand for `$provide.provider(name, {$get: $getFn})`.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here is an example of registering a service
 * ```js
 *   $provide.factory('ping', ['$http', function($http) {
 *     return function ping() {
 *       return $http.send('/ping');
 *     };
 *   }]);
 * ```
 * You would then inject and use this service like this:
 * ```js
 *   someModule.controller('Ctrl', ['ping', function(ping) {
 *     ping();
 *   }]);
 * ```
 */


/**
 * @ngdoc method
 * @name $provide#service
 * @description
 *
 * Register a **service constructor**, which will be invoked with `new` to create the service
 * instance.
 * This is short for registering a service where its provider's `$get` property is a factory
 * function that returns an instance instantiated by the injector from the service constructor
 * function.
 *
 * Internally it looks a bit like this:
 *
 * ```
 * {
 *   $get: function() {
 *     return $injector.instantiate(constructor);
 *   }
 * }
 * ```
 *
 *
 * You should use {@link auto.$provide#service $provide.service(class)} if you define your service
 * as a type/class.
 *
 * @param {string} name The name of the instance.
 * @param {Function|Array.<string|Function>} constructor An injectable class (constructor function)
 *     that will be instantiated.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here is an example of registering a service using
 * {@link auto.$provide#service $provide.service(class)}.
 * ```js
 *   var Ping = function($http) {
 *     this.$http = $http;
 *   };
 *
 *   Ping.$inject = ['$http'];
 *
 *   Ping.prototype.send = function() {
 *     return this.$http.get('/ping');
 *   };
 *   $provide.service('ping', Ping);
 * ```
 * You would then inject and use this service like this:
 * ```js
 *   someModule.controller('Ctrl', ['ping', function(ping) {
 *     ping.send();
 *   }]);
 * ```
 */


/**
 * @ngdoc method
 * @name $provide#value
 * @description
 *
 * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a
 * number, an array, an object or a function. This is short for registering a service where its
 * provider's `$get` property is a factory function that takes no arguments and returns the **value
 * service**. That also means it is not possible to inject other services into a value service.
 *
 * Value services are similar to constant services, except that they cannot be injected into a
 * module configuration function (see {@link angular.Module#config}) but they can be overridden by
 * an Angular {@link auto.$provide#decorator decorator}.
 *
 * @param {string} name The name of the instance.
 * @param {*} value The value.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here are some examples of creating value services.
 * ```js
 *   $provide.value('ADMIN_USER', 'admin');
 *
 *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });
 *
 *   $provide.value('halfOf', function(value) {
 *     return value / 2;
 *   });
 * ```
 */


/**
 * @ngdoc method
 * @name $provide#constant
 * @description
 *
 * Register a **constant service** with the {@link auto.$injector $injector}, such as a string,
 * a number, an array, an object or a function. Like the {@link auto.$provide#value value}, it is not
 * possible to inject other services into a constant.
 *
 * But unlike {@link auto.$provide#value value}, a constant can be
 * injected into a module configuration function (see {@link angular.Module#config}) and it cannot
 * be overridden by an Angular {@link auto.$provide#decorator decorator}.
 *
 * @param {string} name The name of the constant.
 * @param {*} value The constant value.
 * @returns {Object} registered instance
 *
 * @example
 * Here a some examples of creating constants:
 * ```js
 *   $provide.constant('SHARD_HEIGHT', 306);
 *
 *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);
 *
 *   $provide.constant('double', function(value) {
 *     return value * 2;
 *   });
 * ```
 */


/**
 * @ngdoc method
 * @name $provide#decorator
 * @description
 *
 * Register a **decorator function** with the {@link auto.$injector $injector}. A decorator function
 * intercepts the creation of a service, allowing it to override or modify the behavior of the
 * service. The return value of the decorator function may be the original service, or a new service
 * that replaces (or wraps and delegates to) the original service.
 *
 * You can find out more about using decorators in the {@link guide/decorators} guide.
 *
 * @param {string} name The name of the service to decorate.
 * @param {Function|Array.<string|Function>} decorator This function will be invoked when the service needs to be
 *    provided and should return the decorated service instance. The function is called using
 *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.
 *    Local injection arguments:
 *
 *    * `$delegate` - The original service instance, which can be replaced, monkey patched, configured,
 *      decorated or delegated to.
 *
 * @example
 * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting
 * calls to {@link ng.$log#error $log.warn()}.
 * ```js
 *   $provide.decorator('$log', ['$delegate', function($delegate) {
 *     $delegate.warn = $delegate.error;
 *     return $delegate;
 *   }]);
 * ```
 */


function createInjector(modulesToLoad, strictDi) {
  strictDi = (strictDi === true);
  var INSTANTIATING = {},
      providerSuffix = 'Provider',
      path = [],
      loadedModules = new NgMap(),
      providerCache = {
        $provide: {
            provider: supportObject(provider),
            factory: supportObject(factory),
            service: supportObject(service),
            value: supportObject(value),
            constant: supportObject(constant),
            decorator: decorator
          }
      },
      providerInjector = (providerCache.$injector =
          createInternalInjector(providerCache, function(serviceName, caller) {
            if (angular.isString(caller)) {
              path.push(caller);
            }
            throw $injectorMinErr('unpr', 'Unknown provider: {0}', path.join(' <- '));
          })),
      instanceCache = {},
      protoInstanceInjector =
          createInternalInjector(instanceCache, function(serviceName, caller) {
            var provider = providerInjector.get(serviceName + providerSuffix, caller);
            return instanceInjector.invoke(
                provider.$get, provider, undefined, serviceName);
          }),
      instanceInjector = protoInstanceInjector;

  providerCache['$injector' + providerSuffix] = { $get: valueFn(protoInstanceInjector) };
  var runBlocks = loadModules(modulesToLoad);
  instanceInjector = protoInstanceInjector.get('$injector');
  instanceInjector.strictDi = strictDi;
  forEach(runBlocks, function(fn) { if (fn) instanceInjector.invoke(fn); });

  return instanceInjector;

  ////////////////////////////////////
  // $provider
  ////////////////////////////////////

  function supportObject(delegate) {
    return function(key, value) {
      if (isObject(key)) {
        forEach(key, reverseParams(delegate));
      } else {
        return delegate(key, value);
      }
    };
  }

  function provider(name, provider_) {
    assertNotHasOwnProperty(name, 'service');
    if (isFunction(provider_) || isArray(provider_)) {
      provider_ = providerInjector.instantiate(provider_);
    }
    if (!provider_.$get) {
      throw $injectorMinErr('pget', 'Provider \'{0}\' must define $get factory method.', name);
    }
    return (providerCache[name + providerSuffix] = provider_);
  }

  function enforceReturnValue(name, factory) {
    return /** @this */ function enforcedReturnValue() {
      var result = instanceInjector.invoke(factory, this);
      if (isUndefined(result)) {
        throw $injectorMinErr('undef', 'Provider \'{0}\' must return a value from $get factory method.', name);
      }
      return result;
    };
  }

  function factory(name, factoryFn, enforce) {
    return provider(name, {
      $get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn
    });
  }

  function service(name, constructor) {
    return factory(name, ['$injector', function($injector) {
      return $injector.instantiate(constructor);
    }]);
  }

  function value(name, val) { return factory(name, valueFn(val), false); }

  function constant(name, value) {
    assertNotHasOwnProperty(name, 'constant');
    providerCache[name] = value;
    instanceCache[name] = value;
  }

  function decorator(serviceName, decorFn) {
    var origProvider = providerInjector.get(serviceName + providerSuffix),
        orig$get = origProvider.$get;

    origProvider.$get = function() {
      var origInstance = instanceInjector.invoke(orig$get, origProvider);
      return instanceInjector.invoke(decorFn, null, {$delegate: origInstance});
    };
  }

  ////////////////////////////////////
  // Module Loading
  ////////////////////////////////////
  function loadModules(modulesToLoad) {
    assertArg(isUndefined(modulesToLoad) || isArray(modulesToLoad), 'modulesToLoad', 'not an array');
    var runBlocks = [], moduleFn;
    forEach(modulesToLoad, function(module) {
      if (loadedModules.get(module)) return;
      loadedModules.set(module, true);

      function runInvokeQueue(queue) {
        var i, ii;
        for (i = 0, ii = queue.length; i < ii; i++) {
          var invokeArgs = queue[i],
              provider = providerInjector.get(invokeArgs[0]);

          provider[invokeArgs[1]].apply(provider, invokeArgs[2]);
        }
      }

      try {
        if (isString(module)) {
          moduleFn = angularModule(module);
          runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);
          runInvokeQueue(moduleFn._invokeQueue);
          runInvokeQueue(moduleFn._configBlocks);
        } else if (isFunction(module)) {
            runBlocks.push(providerInjector.invoke(module));
        } else if (isArray(module)) {
            runBlocks.push(providerInjector.invoke(module));
        } else {
          assertArgFn(module, 'module');
        }
      } catch (e) {
        if (isArray(module)) {
          module = module[module.length - 1];
        }
        if (e.message && e.stack && e.stack.indexOf(e.message) === -1) {
          // Safari & FF's stack traces don't contain error.message content
          // unlike those of Chrome and IE
          // So if stack doesn't contain message, we create a new string that contains both.
          // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.
          // eslint-disable-next-line no-ex-assign
          e = e.message + '\n' + e.stack;
        }
        throw $injectorMinErr('modulerr', 'Failed to instantiate module {0} due to:\n{1}',
                  module, e.stack || e.message || e);
      }
    });
    return runBlocks;
  }

  ////////////////////////////////////
  // internal Injector
  ////////////////////////////////////

  function createInternalInjector(cache, factory) {

    function getService(serviceName, caller) {
      if (cache.hasOwnProperty(serviceName)) {
        if (cache[serviceName] === INSTANTIATING) {
          throw $injectorMinErr('cdep', 'Circular dependency found: {0}',
                    serviceName + ' <- ' + path.join(' <- '));
        }
        return cache[serviceName];
      } else {
        try {
          path.unshift(serviceName);
          cache[serviceName] = INSTANTIATING;
          cache[serviceName] = factory(serviceName, caller);
          return cache[serviceName];
        } catch (err) {
          if (cache[serviceName] === INSTANTIATING) {
            delete cache[serviceName];
          }
          throw err;
        } finally {
          path.shift();
        }
      }
    }


    function injectionArgs(fn, locals, serviceName) {
      var args = [],
          $inject = createInjector.$$annotate(fn, strictDi, serviceName);

      for (var i = 0, length = $inject.length; i < length; i++) {
        var key = $inject[i];
        if (typeof key !== 'string') {
          throw $injectorMinErr('itkn',
                  'Incorrect injection token! Expected service name as string, got {0}', key);
        }
        args.push(locals && locals.hasOwnProperty(key) ? locals[key] :
                                                         getService(key, serviceName));
      }
      return args;
    }

    function isClass(func) {
      // Support: IE 9-11 only
      // IE 9-11 do not support classes and IE9 leaks with the code below.
      if (msie || typeof func !== 'function') {
        return false;
      }
      var result = func.$$ngIsClass;
      if (!isBoolean(result)) {
        // Support: Edge 12-13 only
        // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/6156135/
        result = func.$$ngIsClass = /^(?:class\b|constructor\()/.test(stringifyFn(func));
      }
      return result;
    }

    function invoke(fn, self, locals, serviceName) {
      if (typeof locals === 'string') {
        serviceName = locals;
        locals = null;
      }

      var args = injectionArgs(fn, locals, serviceName);
      if (isArray(fn)) {
        fn = fn[fn.length - 1];
      }

      if (!isClass(fn)) {
        // http://jsperf.com/angularjs-invoke-apply-vs-switch
        // #5388
        return fn.apply(self, args);
      } else {
        args.unshift(null);
        return new (Function.prototype.bind.apply(fn, args))();
      }
    }


    function instantiate(Type, locals, serviceName) {
      // Check if Type is annotated and use just the given function at n-1 as parameter
      // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);
      var ctor = (isArray(Type) ? Type[Type.length - 1] : Type);
      var args = injectionArgs(Type, locals, serviceName);
      // Empty object at position 0 is ignored for invocation with `new`, but required.
      args.unshift(null);
      return new (Function.prototype.bind.apply(ctor, args))();
    }


    return {
      invoke: invoke,
      instantiate: instantiate,
      get: getService,
      annotate: createInjector.$$annotate,
      has: function(name) {
        return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);
      }
    };
  }
}

createInjector.$$annotate = annotate;

/**
 * @ngdoc provider
 * @name $anchorScrollProvider
 * @this
 *
 * @description
 * Use `$anchorScrollProvider` to disable automatic scrolling whenever
 * {@link ng.$location#hash $location.hash()} changes.
 */
function $AnchorScrollProvider() {

  var autoScrollingEnabled = true;

  /**
   * @ngdoc method
   * @name $anchorScrollProvider#disableAutoScrolling
   *
   * @description
   * By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to
   * {@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />
   * Use this method to disable automatic scrolling.
   *
   * If automatic scrolling is disabled, one must explicitly call
   * {@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the
   * current hash.
   */
  this.disableAutoScrolling = function() {
    autoScrollingEnabled = false;
  };

  /**
   * @ngdoc service
   * @name $anchorScroll
   * @kind function
   * @requires $window
   * @requires $location
   * @requires $rootScope
   *
   * @description
   * When called, it scrolls to the element related to the specified `hash` or (if omitted) to the
   * current value of {@link ng.$location#hash $location.hash()}, according to the rules specified
   * in the
   * [HTML5 spec](http://www.w3.org/html/wg/drafts/html/master/browsers.html#an-indicated-part-of-the-document).
   *
   * It also watches the {@link ng.$location#hash $location.hash()} and automatically scrolls to
   * match any anchor whenever it changes. This can be disabled by calling
   * {@link ng.$anchorScrollProvider#disableAutoScrolling $anchorScrollProvider.disableAutoScrolling()}.
   *
   * Additionally, you can use its {@link ng.$anchorScroll#yOffset yOffset} property to specify a
   * vertical scroll-offset (either fixed or dynamic).
   *
   * @param {string=} hash The hash specifying the element to scroll to. If omitted, the value of
   *                       {@link ng.$location#hash $location.hash()} will be used.
   *
   * @property {(number|function|jqLite)} yOffset
   * If set, specifies a vertical scroll-offset. This is often useful when there are fixed
   * positioned elements at the top of the page, such as navbars, headers etc.
   *
   * `yOffset` can be specified in various ways:
   * - **number**: A fixed number of pixels to be used as offset.<br /><br />
   * - **function**: A getter function called everytime `$anchorScroll()` is executed. Must return
   *   a number representing the offset (in pixels).<br /><br />
   * - **jqLite**: A jqLite/jQuery element to be used for specifying the offset. The distance from
   *   the top of the page to the element's bottom will be used as offset.<br />
   *   **Note**: The element will be taken into account only as long as its `position` is set to
   *   `fixed`. This option is useful, when dealing with responsive navbars/headers that adjust
   *   their height and/or positioning according to the viewport's size.
   *
   * <br />
   * <div class="alert alert-warning">
   * In order for `yOffset` to work properly, scrolling should take place on the document's root and
   * not some child element.
   * </div>
   *
   * @example
     <example module="anchorScrollExample" name="anchor-scroll">
       <file name="index.html">
         <div id="scrollArea" ng-controller="ScrollController">
           <a ng-click="gotoBottom()">Go to bottom</a>
           <a id="bottom"></a> You're at the bottom!
         </div>
       </file>
       <file name="script.js">
         angular.module('anchorScrollExample', [])
           .controller('ScrollController', ['$scope', '$location', '$anchorScroll',
             function($scope, $location, $anchorScroll) {
               $scope.gotoBottom = function() {
                 // set the location.hash to the id of
                 // the element you wish to scroll to.
                 $location.hash('bottom');

                 // call $anchorScroll()
                 $anchorScroll();
               };
             }]);
       </file>
       <file name="style.css">
         #scrollArea {
           height: 280px;
           overflow: auto;
         }

         #bottom {
           display: block;
           margin-top: 2000px;
         }
       </file>
     </example>
   *
   * <hr />
   * The example below illustrates the use of a vertical scroll-offset (specified as a fixed value).
   * See {@link ng.$anchorScroll#yOffset $anchorScroll.yOffset} for more details.
   *
   * @example
     <example module="anchorScrollOffsetExample" name="anchor-scroll-offset">
       <file name="index.html">
         <div class="fixed-header" ng-controller="headerCtrl">
           <a href="" ng-click="gotoAnchor(x)" ng-repeat="x in [1,2,3,4,5]">
             Go to anchor {{x}}
           </a>
         </div>
         <div id="anchor{{x}}" class="anchor" ng-repeat="x in [1,2,3,4,5]">
           Anchor {{x}} of 5
         </div>
       </file>
       <file name="script.js">
         angular.module('anchorScrollOffsetExample', [])
           .run(['$anchorScroll', function($anchorScroll) {
             $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels
           }])
           .controller('headerCtrl', ['$anchorScroll', '$location', '$scope',
             function($anchorScroll, $location, $scope) {
               $scope.gotoAnchor = function(x) {
                 var newHash = 'anchor' + x;
                 if ($location.hash() !== newHash) {
                   // set the $location.hash to `newHash` and
                   // $anchorScroll will automatically scroll to it
                   $location.hash('anchor' + x);
                 } else {
                   // call $anchorScroll() explicitly,
                   // since $location.hash hasn't changed
                   $anchorScroll();
                 }
               };
             }
           ]);
       </file>
       <file name="style.css">
         body {
           padding-top: 50px;
         }

         .anchor {
           border: 2px dashed DarkOrchid;
           padding: 10px 10px 200px 10px;
         }

         .fixed-header {
           background-color: rgba(0, 0, 0, 0.2);
           height: 50px;
           position: fixed;
           top: 0; left: 0; right: 0;
         }

         .fixed-header > a {
           display: inline-block;
           margin: 5px 15px;
         }
       </file>
     </example>
   */
  this.$get = ['$window', '$location', '$rootScope', function($window, $location, $rootScope) {
    var document = $window.document;

    // Helper function to get first anchor from a NodeList
    // (using `Array#some()` instead of `angular#forEach()` since it's more performant
    //  and working in all supported browsers.)
    function getFirstAnchor(list) {
      var result = null;
      Array.prototype.some.call(list, function(element) {
        if (nodeName_(element) === 'a') {
          result = element;
          return true;
        }
      });
      return result;
    }

    function getYOffset() {

      var offset = scroll.yOffset;

      if (isFunction(offset)) {
        offset = offset();
      } else if (isElement(offset)) {
        var elem = offset[0];
        var style = $window.getComputedStyle(elem);
        if (style.position !== 'fixed') {
          offset = 0;
        } else {
          offset = elem.getBoundingClientRect().bottom;
        }
      } else if (!isNumber(offset)) {
        offset = 0;
      }

      return offset;
    }

    function scrollTo(elem) {
      if (elem) {
        elem.scrollIntoView();

        var offset = getYOffset();

        if (offset) {
          // `offset` is the number of pixels we should scroll UP in order to align `elem` properly.
          // This is true ONLY if the call to `elem.scrollIntoView()` initially aligns `elem` at the
          // top of the viewport.
          //
          // IF the number of pixels from the top of `elem` to the end of the page's content is less
          // than the height of the viewport, then `elem.scrollIntoView()` will align the `elem` some
          // way down the page.
          //
          // This is often the case for elements near the bottom of the page.
          //
          // In such cases we do not need to scroll the whole `offset` up, just the difference between
          // the top of the element and the offset, which is enough to align the top of `elem` at the
          // desired position.
          var elemTop = elem.getBoundingClientRect().top;
          $window.scrollBy(0, elemTop - offset);
        }
      } else {
        $window.scrollTo(0, 0);
      }
    }

    function scroll(hash) {
      // Allow numeric hashes
      hash = isString(hash) ? hash : isNumber(hash) ? hash.toString() : $location.hash();
      var elm;

      // empty hash, scroll to the top of the page
      if (!hash) scrollTo(null);

      // element with given id
      else if ((elm = document.getElementById(hash))) scrollTo(elm);

      // first anchor with given name :-D
      else if ((elm = getFirstAnchor(document.getElementsByName(hash)))) scrollTo(elm);

      // no element and hash === 'top', scroll to the top of the page
      else if (hash === 'top') scrollTo(null);
    }

    // does not scroll when user clicks on anchor link that is currently on
    // (no url change, no $location.hash() change), browser native does scroll
    if (autoScrollingEnabled) {
      $rootScope.$watch(function autoScrollWatch() {return $location.hash();},
        function autoScrollWatchAction(newVal, oldVal) {
          // skip the initial scroll if $location.hash is empty
          if (newVal === oldVal && newVal === '') return;

          jqLiteDocumentLoaded(function() {
            $rootScope.$evalAsync(scroll);
          });
        });
    }

    return scroll;
  }];
}

var $animateMinErr = minErr('$animate');
var ELEMENT_NODE = 1;
var NG_ANIMATE_CLASSNAME = 'ng-animate';

function mergeClasses(a,b) {
  if (!a && !b) return '';
  if (!a) return b;
  if (!b) return a;
  if (isArray(a)) a = a.join(' ');
  if (isArray(b)) b = b.join(' ');
  return a + ' ' + b;
}

function extractElementNode(element) {
  for (var i = 0; i < element.length; i++) {
    var elm = element[i];
    if (elm.nodeType === ELEMENT_NODE) {
      return elm;
    }
  }
}

function splitClasses(classes) {
  if (isString(classes)) {
    classes = classes.split(' ');
  }

  // Use createMap() to prevent class assumptions involving property names in
  // Object.prototype
  var obj = createMap();
  forEach(classes, function(klass) {
    // sometimes the split leaves empty string values
    // incase extra spaces were applied to the options
    if (klass.length) {
      obj[klass] = true;
    }
  });
  return obj;
}

// if any other type of options value besides an Object value is
// passed into the $animate.method() animation then this helper code
// will be run which will ignore it. While this patch is not the
// greatest solution to this, a lot of existing plugins depend on
// $animate to either call the callback (< 1.2) or return a promise
// that can be changed. This helper function ensures that the options
// are wiped clean incase a callback function is provided.
function prepareAnimateOptions(options) {
  return isObject(options)
      ? options
      : {};
}

var $$CoreAnimateJsProvider = /** @this */ function() {
  this.$get = noop;
};

// this is prefixed with Core since it conflicts with
// the animateQueueProvider defined in ngAnimate/animateQueue.js
var $$CoreAnimateQueueProvider = /** @this */ function() {
  var postDigestQueue = new NgMap();
  var postDigestElements = [];

  this.$get = ['$$AnimateRunner', '$rootScope',
       function($$AnimateRunner,   $rootScope) {
    return {
      enabled: noop,
      on: noop,
      off: noop,
      pin: noop,

      push: function(element, event, options, domOperation) {
        if (domOperation) {
          domOperation();
        }

        options = options || {};
        if (options.from) {
          element.css(options.from);
        }
        if (options.to) {
          element.css(options.to);
        }

        if (options.addClass || options.removeClass) {
          addRemoveClassesPostDigest(element, options.addClass, options.removeClass);
        }

        var runner = new $$AnimateRunner();

        // since there are no animations to run the runner needs to be
        // notified that the animation call is complete.
        runner.complete();
        return runner;
      }
    };


    function updateData(data, classes, value) {
      var changed = false;
      if (classes) {
        classes = isString(classes) ? classes.split(' ') :
                  isArray(classes) ? classes : [];
        forEach(classes, function(className) {
          if (className) {
            changed = true;
            data[className] = value;
          }
        });
      }
      return changed;
    }

    function handleCSSClassChanges() {
      forEach(postDigestElements, function(element) {
        var data = postDigestQueue.get(element);
        if (data) {
          var existing = splitClasses(element.attr('class'));
          var toAdd = '';
          var toRemove = '';
          forEach(data, function(status, className) {
            var hasClass = !!existing[className];
            if (status !== hasClass) {
              if (status) {
                toAdd += (toAdd.length ? ' ' : '') + className;
              } else {
                toRemove += (toRemove.length ? ' ' : '') + className;
              }
            }
          });

          forEach(element, function(elm) {
            if (toAdd) {
              jqLiteAddClass(elm, toAdd);
            }
            if (toRemove) {
              jqLiteRemoveClass(elm, toRemove);
            }
          });
          postDigestQueue.delete(element);
        }
      });
      postDigestElements.length = 0;
    }


    function addRemoveClassesPostDigest(element, add, remove) {
      var data = postDigestQueue.get(element) || {};

      var classesAdded = updateData(data, add, true);
      var classesRemoved = updateData(data, remove, false);

      if (classesAdded || classesRemoved) {

        postDigestQueue.set(element, data);
        postDigestElements.push(element);

        if (postDigestElements.length === 1) {
          $rootScope.$$postDigest(handleCSSClassChanges);
        }
      }
    }
  }];
};

/**
 * @ngdoc provider
 * @name $animateProvider
 *
 * @description
 * Default implementation of $animate that doesn't perform any animations, instead just
 * synchronously performs DOM updates and resolves the returned runner promise.
 *
 * In order to enable animations the `ngAnimate` module has to be loaded.
 *
 * To see the functional implementation check out `src/ngAnimate/animate.js`.
 */
var $AnimateProvider = ['$provide', /** @this */ function($provide) {
  var provider = this;

  this.$$registeredAnimations = Object.create(null);

   /**
   * @ngdoc method
   * @name $animateProvider#register
   *
   * @description
   * Registers a new injectable animation factory function. The factory function produces the
   * animation object which contains callback functions for each event that is expected to be
   * animated.
   *
   *   * `eventFn`: `function(element, ... , doneFunction, options)`
   *   The element to animate, the `doneFunction` and the options fed into the animation. Depending
   *   on the type of animation additional arguments will be injected into the animation function. The
   *   list below explains the function signatures for the different animation methods:
   *
   *   - setClass: function(element, addedClasses, removedClasses, doneFunction, options)
   *   - addClass: function(element, addedClasses, doneFunction, options)
   *   - removeClass: function(element, removedClasses, doneFunction, options)
   *   - enter, leave, move: function(element, doneFunction, options)
   *   - animate: function(element, fromStyles, toStyles, doneFunction, options)
   *
   *   Make sure to trigger the `doneFunction` once the animation is fully complete.
   *
   * ```js
   *   return {
   *     //enter, leave, move signature
   *     eventFn : function(element, done, options) {
   *       //code to run the animation
   *       //once complete, then run done()
   *       return function endFunction(wasCancelled) {
   *         //code to cancel the animation
   *       }
   *     }
   *   }
   * ```
   *
   * @param {string} name The name of the animation (this is what the class-based CSS value will be compared to).
   * @param {Function} factory The factory function that will be executed to return the animation
   *                           object.
   */
  this.register = function(name, factory) {
    if (name && name.charAt(0) !== '.') {
      throw $animateMinErr('notcsel', 'Expecting class selector starting with \'.\' got \'{0}\'.', name);
    }

    var key = name + '-animation';
    provider.$$registeredAnimations[name.substr(1)] = key;
    $provide.factory(key, factory);
  };

  /**
   * @ngdoc method
   * @name $animateProvider#classNameFilter
   *
   * @description
   * Sets and/or returns the CSS class regular expression that is checked when performing
   * an animation. Upon bootstrap the classNameFilter value is not set at all and will
   * therefore enable $animate to attempt to perform an animation on any element that is triggered.
   * When setting the `classNameFilter` value, animations will only be performed on elements
   * that successfully match the filter expression. This in turn can boost performance
   * for low-powered devices as well as applications containing a lot of structural operations.
   * @param {RegExp=} expression The className expression which will be checked against all animations
   * @return {RegExp} The current CSS className expression value. If null then there is no expression value
   */
  this.classNameFilter = function(expression) {
    if (arguments.length === 1) {
      this.$$classNameFilter = (expression instanceof RegExp) ? expression : null;
      if (this.$$classNameFilter) {
        var reservedRegex = new RegExp('(\\s+|\\/)' + NG_ANIMATE_CLASSNAME + '(\\s+|\\/)');
        if (reservedRegex.test(this.$$classNameFilter.toString())) {
          throw $animateMinErr('nongcls','$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.', NG_ANIMATE_CLASSNAME);
        }
      }
    }
    return this.$$classNameFilter;
  };

  this.$get = ['$$animateQueue', function($$animateQueue) {
    function domInsert(element, parentElement, afterElement) {
      // if for some reason the previous element was removed
      // from the dom sometime before this code runs then let's
      // just stick to using the parent element as the anchor
      if (afterElement) {
        var afterNode = extractElementNode(afterElement);
        if (afterNode && !afterNode.parentNode && !afterNode.previousElementSibling) {
          afterElement = null;
        }
      }
      if (afterElement) {
        afterElement.after(element);
      } else {
        parentElement.prepend(element);
      }
    }

    /**
     * @ngdoc service
     * @name $animate
     * @description The $animate service exposes a series of DOM utility methods that provide support
     * for animation hooks. The default behavior is the application of DOM operations, however,
     * when an animation is detected (and animations are enabled), $animate will do the heavy lifting
     * to ensure that animation runs with the triggered DOM operation.
     *
     * By default $animate doesn't trigger any animations. This is because the `ngAnimate` module isn't
     * included and only when it is active then the animation hooks that `$animate` triggers will be
     * functional. Once active then all structural `ng-` directives will trigger animations as they perform
     * their DOM-related operations (enter, leave and move). Other directives such as `ngClass`,
     * `ngShow`, `ngHide` and `ngMessages` also provide support for animations.
     *
     * It is recommended that the`$animate` service is always used when executing DOM-related procedures within directives.
     *
     * To learn more about enabling animation support, click here to visit the
     * {@link ngAnimate ngAnimate module page}.
     */
    return {
      // we don't call it directly since non-existant arguments may
      // be interpreted as null within the sub enabled function

      /**
       *
       * @ngdoc method
       * @name $animate#on
       * @kind function
       * @description Sets up an event listener to fire whenever the animation event (enter, leave, move, etc...)
       *    has fired on the given element or among any of its children. Once the listener is fired, the provided callback
       *    is fired with the following params:
       *
       * ```js
       * $animate.on('enter', container,
       *    function callback(element, phase) {
       *      // cool we detected an enter animation within the container
       *    }
       * );
       * ```
       *
       * @param {string} event the animation event that will be captured (e.g. enter, leave, move, addClass, removeClass, etc...)
       * @param {DOMElement} container the container element that will capture each of the animation events that are fired on itself
       *     as well as among its children
       * @param {Function} callback the callback function that will be fired when the listener is triggered
       *
       * The arguments present in the callback function are:
       * * `element` - The captured DOM element that the animation was fired on.
       * * `phase` - The phase of the animation. The two possible phases are **start** (when the animation starts) and **close** (when it ends).
       */
      on: $$animateQueue.on,

      /**
       *
       * @ngdoc method
       * @name $animate#off
       * @kind function
       * @description Deregisters an event listener based on the event which has been associated with the provided element. This method
       * can be used in three different ways depending on the arguments:
       *
       * ```js
       * // remove all the animation event listeners listening for `enter`
       * $animate.off('enter');
       *
       * // remove listeners for all animation events from the container element
       * $animate.off(container);
       *
       * // remove all the animation event listeners listening for `enter` on the given element and its children
       * $animate.off('enter', container);
       *
       * // remove the event listener function provided by `callback` that is set
       * // to listen for `enter` on the given `container` as well as its children
       * $animate.off('enter', container, callback);
       * ```
       *
       * @param {string|DOMElement} event|container the animation event (e.g. enter, leave, move,
       * addClass, removeClass, etc...), or the container element. If it is the element, all other
       * arguments are ignored.
       * @param {DOMElement=} container the container element the event listener was placed on
       * @param {Function=} callback the callback function that was registered as the listener
       */
      off: $$animateQueue.off,

      /**
       * @ngdoc method
       * @name $animate#pin
       * @kind function
       * @description Associates the provided element with a host parent element to allow the element to be animated even if it exists
       *    outside of the DOM structure of the Angular application. By doing so, any animation triggered via `$animate` can be issued on the
       *    element despite being outside the realm of the application or within another application. Say for example if the application
       *    was bootstrapped on an element that is somewhere inside of the `<body>` tag, but we wanted to allow for an element to be situated
       *    as a direct child of `document.body`, then this can be achieved by pinning the element via `$animate.pin(element)`. Keep in mind
       *    that calling `$animate.pin(element, parentElement)` will not actually insert into the DOM anywhere; it will just create the association.
       *
       *    Note that this feature is only active when the `ngAnimate` module is used.
       *
       * @param {DOMElement} element the external element that will be pinned
       * @param {DOMElement} parentElement the host parent element that will be associated with the external element
       */
      pin: $$animateQueue.pin,

      /**
       *
       * @ngdoc method
       * @name $animate#enabled
       * @kind function
       * @description Used to get and set whether animations are enabled or not on the entire application or on an element and its children. This
       * function can be called in four ways:
       *
       * ```js
       * // returns true or false
       * $animate.enabled();
       *
       * // changes the enabled state for all animations
       * $animate.enabled(false);
       * $animate.enabled(true);
       *
       * // returns true or false if animations are enabled for an element
       * $animate.enabled(element);
       *
       * // changes the enabled state for an element and its children
       * $animate.enabled(element, true);
       * $animate.enabled(element, false);
       * ```
       *
       * @param {DOMElement=} element the element that will be considered for checking/setting the enabled state
       * @param {boolean=} enabled whether or not the animations will be enabled for the element
       *
       * @return {boolean} whether or not animations are enabled
       */
      enabled: $$animateQueue.enabled,

      /**
       * @ngdoc method
       * @name $animate#cancel
       * @kind function
       * @description Cancels the provided animation.
       *
       * @param {Promise} animationPromise The animation promise that is returned when an animation is started.
       */
      cancel: function(runner) {
        if (runner.end) {
          runner.end();
        }
      },

      /**
       *
       * @ngdoc method
       * @name $animate#enter
       * @kind function
       * @description Inserts the element into the DOM either after the `after` element (if provided) or
       *   as the first child within the `parent` element and then triggers an animation.
       *   A promise is returned that will be resolved during the next digest once the animation
       *   has completed.
       *
       * @param {DOMElement} element the element which will be inserted into the DOM
       * @param {DOMElement} parent the parent element which will append the element as
       *   a child (so long as the after element is not present)
       * @param {DOMElement=} after the sibling element after which the element will be appended
       * @param {object=} options an optional collection of options/styles that will be applied to the element.
       *   The object can have the following properties:
       *
       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
       *
       * @return {Promise} the animation callback promise
       */
      enter: function(element, parent, after, options) {
        parent = parent && jqLite(parent);
        after = after && jqLite(after);
        parent = parent || after.parent();
        domInsert(element, parent, after);
        return $$animateQueue.push(element, 'enter', prepareAnimateOptions(options));
      },

      /**
       *
       * @ngdoc method
       * @name $animate#move
       * @kind function
       * @description Inserts (moves) the element into its new position in the DOM either after
       *   the `after` element (if provided) or as the first child within the `parent` element
       *   and then triggers an animation. A promise is returned that will be resolved
       *   during the next digest once the animation has completed.
       *
       * @param {DOMElement} element the element which will be moved into the new DOM position
       * @param {DOMElement} parent the parent element which will append the element as
       *   a child (so long as the after element is not present)
       * @param {DOMElement=} after the sibling element after which the element will be appended
       * @param {object=} options an optional collection of options/styles that will be applied to the element.
       *   The object can have the following properties:
       *
       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
       *
       * @return {Promise} the animation callback promise
       */
      move: function(element, parent, after, options) {
        parent = parent && jqLite(parent);
        after = after && jqLite(after);
        parent = parent || after.parent();
        domInsert(element, parent, after);
        return $$animateQueue.push(element, 'move', prepareAnimateOptions(options));
      },

      /**
       * @ngdoc method
       * @name $animate#leave
       * @kind function
       * @description Triggers an animation and then removes the element from the DOM.
       * When the function is called a promise is returned that will be resolved during the next
       * digest once the animation has completed.
       *
       * @param {DOMElement} element the element which will be removed from the DOM
       * @param {object=} options an optional collection of options/styles that will be applied to the element.
       *   The object can have the following properties:
       *
       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
       *
       * @return {Promise} the animation callback promise
       */
      leave: function(element, options) {
        return $$animateQueue.push(element, 'leave', prepareAnimateOptions(options), function() {
          element.remove();
        });
      },

      /**
       * @ngdoc method
       * @name $animate#addClass
       * @kind function
       *
       * @description Triggers an addClass animation surrounding the addition of the provided CSS class(es). Upon
       *   execution, the addClass operation will only be handled after the next digest and it will not trigger an
       *   animation if element already contains the CSS class or if the class is removed at a later step.
       *   Note that class-based animations are treated differently compared to structural animations
       *   (like enter, move and leave) since the CSS classes may be added/removed at different points
       *   depending if CSS or JavaScript animations are used.
       *
       * @param {DOMElement} element the element which the CSS classes will be applied to
       * @param {string} className the CSS class(es) that will be added (multiple classes are separated via spaces)
       * @param {object=} options an optional collection of options/styles that will be applied to the element.
       *   The object can have the following properties:
       *
       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
       *
       * @return {Promise} the animation callback promise
       */
      addClass: function(element, className, options) {
        options = prepareAnimateOptions(options);
        options.addClass = mergeClasses(options.addclass, className);
        return $$animateQueue.push(element, 'addClass', options);
      },

      /**
       * @ngdoc method
       * @name $animate#removeClass
       * @kind function
       *
       * @description Triggers a removeClass animation surrounding the removal of the provided CSS class(es). Upon
       *   execution, the removeClass operation will only be handled after the next digest and it will not trigger an
       *   animation if element does not contain the CSS class or if the class is added at a later step.
       *   Note that class-based animations are treated differently compared to structural animations
       *   (like enter, move and leave) since the CSS classes may be added/removed at different points
       *   depending if CSS or JavaScript animations are used.
       *
       * @param {DOMElement} element the element which the CSS classes will be applied to
       * @param {string} className the CSS class(es) that will be removed (multiple classes are separated via spaces)
       * @param {object=} options an optional collection of options/styles that will be applied to the element.
       *   The object can have the following properties:
       *
       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
       *
       * @return {Promise} the animation callback promise
       */
      removeClass: function(element, className, options) {
        options = prepareAnimateOptions(options);
        options.removeClass = mergeClasses(options.removeClass, className);
        return $$animateQueue.push(element, 'removeClass', options);
      },

      /**
       * @ngdoc method
       * @name $animate#setClass
       * @kind function
       *
       * @description Performs both the addition and removal of a CSS classes on an element and (during the process)
       *    triggers an animation surrounding the class addition/removal. Much like `$animate.addClass` and
       *    `$animate.removeClass`, `setClass` will only evaluate the classes being added/removed once a digest has
       *    passed. Note that class-based animations are treated differently compared to structural animations
       *    (like enter, move and leave) since the CSS classes may be added/removed at different points
       *    depending if CSS or JavaScript animations are used.
       *
       * @param {DOMElement} element the element which the CSS classes will be applied to
       * @param {string} add the CSS class(es) that will be added (multiple classes are separated via spaces)
       * @param {string} remove the CSS class(es) that will be removed (multiple classes are separated via spaces)
       * @param {object=} options an optional collection of options/styles that will be applied to the element.
       *   The object can have the following properties:
       *
       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
       *
       * @return {Promise} the animation callback promise
       */
      setClass: function(element, add, remove, options) {
        options = prepareAnimateOptions(options);
        options.addClass = mergeClasses(options.addClass, add);
        options.removeClass = mergeClasses(options.removeClass, remove);
        return $$animateQueue.push(element, 'setClass', options);
      },

      /**
       * @ngdoc method
       * @name $animate#animate
       * @kind function
       *
       * @description Performs an inline animation on the element which applies the provided to and from CSS styles to the element.
       * If any detected CSS transition, keyframe or JavaScript matches the provided className value, then the animation will take
       * on the provided styles. For example, if a transition animation is set for the given className, then the provided `from` and
       * `to` styles will be applied alongside the given transition. If the CSS style provided in `from` does not have a corresponding
       * style in `to`, the style in `from` is applied immediately, and no animation is run.
       * If a JavaScript animation is detected then the provided styles will be given in as function parameters into the `animate`
       * method (or as part of the `options` parameter):
       *
       * ```js
       * ngModule.animation('.my-inline-animation', function() {
       *   return {
       *     animate : function(element, from, to, done, options) {
       *       //animation
       *       done();
       *     }
       *   }
       * });
       * ```
       *
       * @param {DOMElement} element the element which the CSS styles will be applied to
       * @param {object} from the from (starting) CSS styles that will be applied to the element and across the animation.
       * @param {object} to the to (destination) CSS styles that will be applied to the element and across the animation.
       * @param {string=} className an optional CSS class that will be applied to the element for the duration of the animation. If
       *    this value is left as empty then a CSS class of `ng-inline-animate` will be applied to the element.
       *    (Note that if no animation is detected then this value will not be applied to the element.)
       * @param {object=} options an optional collection of options/styles that will be applied to the element.
       *   The object can have the following properties:
       *
       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
       *
       * @return {Promise} the animation callback promise
       */
      animate: function(element, from, to, className, options) {
        options = prepareAnimateOptions(options);
        options.from = options.from ? extend(options.from, from) : from;
        options.to   = options.to   ? extend(options.to, to)     : to;

        className = className || 'ng-inline-animate';
        options.tempClasses = mergeClasses(options.tempClasses, className);
        return $$animateQueue.push(element, 'animate', options);
      }
    };
  }];
}];

var $$AnimateAsyncRunFactoryProvider = /** @this */ function() {
  this.$get = ['$$rAF', function($$rAF) {
    var waitQueue = [];

    function waitForTick(fn) {
      waitQueue.push(fn);
      if (waitQueue.length > 1) return;
      $$rAF(function() {
        for (var i = 0; i < waitQueue.length; i++) {
          waitQueue[i]();
        }
        waitQueue = [];
      });
    }

    return function() {
      var passed = false;
      waitForTick(function() {
        passed = true;
      });
      return function(callback) {
        if (passed) {
          callback();
        } else {
          waitForTick(callback);
        }
      };
    };
  }];
};

var $$AnimateRunnerFactoryProvider = /** @this */ function() {
  this.$get = ['$q', '$sniffer', '$$animateAsyncRun', '$$isDocumentHidden', '$timeout',
       function($q,   $sniffer,   $$animateAsyncRun,   $$isDocumentHidden,   $timeout) {

    var INITIAL_STATE = 0;
    var DONE_PENDING_STATE = 1;
    var DONE_COMPLETE_STATE = 2;

    AnimateRunner.chain = function(chain, callback) {
      var index = 0;

      next();
      function next() {
        if (index === chain.length) {
          callback(true);
          return;
        }

        chain[index](function(response) {
          if (response === false) {
            callback(false);
            return;
          }
          index++;
          next();
        });
      }
    };

    AnimateRunner.all = function(runners, callback) {
      var count = 0;
      var status = true;
      forEach(runners, function(runner) {
        runner.done(onProgress);
      });

      function onProgress(response) {
        status = status && response;
        if (++count === runners.length) {
          callback(status);
        }
      }
    };

    function AnimateRunner(host) {
      this.setHost(host);

      var rafTick = $$animateAsyncRun();
      var timeoutTick = function(fn) {
        $timeout(fn, 0, false);
      };

      this._doneCallbacks = [];
      this._tick = function(fn) {
        if ($$isDocumentHidden()) {
          timeoutTick(fn);
        } else {
          rafTick(fn);
        }
      };
      this._state = 0;
    }

    AnimateRunner.prototype = {
      setHost: function(host) {
        this.host = host || {};
      },

      done: function(fn) {
        if (this._state === DONE_COMPLETE_STATE) {
          fn();
        } else {
          this._doneCallbacks.push(fn);
        }
      },

      progress: noop,

      getPromise: function() {
        if (!this.promise) {
          var self = this;
          this.promise = $q(function(resolve, reject) {
            self.done(function(status) {
              if (status === false) {
                reject();
              } else {
                resolve();
              }
            });
          });
        }
        return this.promise;
      },

      then: function(resolveHandler, rejectHandler) {
        return this.getPromise().then(resolveHandler, rejectHandler);
      },

      'catch': function(handler) {
        return this.getPromise()['catch'](handler);
      },

      'finally': function(handler) {
        return this.getPromise()['finally'](handler);
      },

      pause: function() {
        if (this.host.pause) {
          this.host.pause();
        }
      },

      resume: function() {
        if (this.host.resume) {
          this.host.resume();
        }
      },

      end: function() {
        if (this.host.end) {
          this.host.end();
        }
        this._resolve(true);
      },

      cancel: function() {
        if (this.host.cancel) {
          this.host.cancel();
        }
        this._resolve(false);
      },

      complete: function(response) {
        var self = this;
        if (self._state === INITIAL_STATE) {
          self._state = DONE_PENDING_STATE;
          self._tick(function() {
            self._resolve(response);
          });
        }
      },

      _resolve: function(response) {
        if (this._state !== DONE_COMPLETE_STATE) {
          forEach(this._doneCallbacks, function(fn) {
            fn(response);
          });
          this._doneCallbacks.length = 0;
          this._state = DONE_COMPLETE_STATE;
        }
      }
    };

    return AnimateRunner;
  }];
};

/* exported $CoreAnimateCssProvider */

/**
 * @ngdoc service
 * @name $animateCss
 * @kind object
 * @this
 *
 * @description
 * This is the core version of `$animateCss`. By default, only when the `ngAnimate` is included,
 * then the `$animateCss` service will actually perform animations.
 *
 * Click here {@link ngAnimate.$animateCss to read the documentation for $animateCss}.
 */
var $CoreAnimateCssProvider = function() {
  this.$get = ['$$rAF', '$q', '$$AnimateRunner', function($$rAF, $q, $$AnimateRunner) {

    return function(element, initialOptions) {
      // all of the animation functions should create
      // a copy of the options data, however, if a
      // parent service has already created a copy then
      // we should stick to using that
      var options = initialOptions || {};
      if (!options.$$prepared) {
        options = copy(options);
      }

      // there is no point in applying the styles since
      // there is no animation that goes on at all in
      // this version of $animateCss.
      if (options.cleanupStyles) {
        options.from = options.to = null;
      }

      if (options.from) {
        element.css(options.from);
        options.from = null;
      }

      var closed, runner = new $$AnimateRunner();
      return {
        start: run,
        end: run
      };

      function run() {
        $$rAF(function() {
          applyAnimationContents();
          if (!closed) {
            runner.complete();
          }
          closed = true;
        });
        return runner;
      }

      function applyAnimationContents() {
        if (options.addClass) {
          element.addClass(options.addClass);
          options.addClass = null;
        }
        if (options.removeClass) {
          element.removeClass(options.removeClass);
          options.removeClass = null;
        }
        if (options.to) {
          element.css(options.to);
          options.to = null;
        }
      }
    };
  }];
};

/* global stripHash: true */

/**
 * ! This is a private undocumented service !
 *
 * @name $browser
 * @requires $log
 * @description
 * This object has two goals:
 *
 * - hide all the global state in the browser caused by the window object
 * - abstract away all the browser specific features and inconsistencies
 *
 * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`
 * service, which can be used for convenient testing of the application without the interaction with
 * the real browser apis.
 */
/**
 * @param {object} window The global window object.
 * @param {object} document jQuery wrapped document.
 * @param {object} $log window.console or an object with the same interface.
 * @param {object} $sniffer $sniffer service
 */
function Browser(window, document, $log, $sniffer) {
  var self = this,
      location = window.location,
      history = window.history,
      setTimeout = window.setTimeout,
      clearTimeout = window.clearTimeout,
      pendingDeferIds = {};

  self.isMock = false;

  var outstandingRequestCount = 0;
  var outstandingRequestCallbacks = [];

  // TODO(vojta): remove this temporary api
  self.$$completeOutstandingRequest = completeOutstandingRequest;
  self.$$incOutstandingRequestCount = function() { outstandingRequestCount++; };

  /**
   * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`
   * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.
   */
  function completeOutstandingRequest(fn) {
    try {
      fn.apply(null, sliceArgs(arguments, 1));
    } finally {
      outstandingRequestCount--;
      if (outstandingRequestCount === 0) {
        while (outstandingRequestCallbacks.length) {
          try {
            outstandingRequestCallbacks.pop()();
          } catch (e) {
            $log.error(e);
          }
        }
      }
    }
  }

  function getHash(url) {
    var index = url.indexOf('#');
    return index === -1 ? '' : url.substr(index);
  }

  /**
   * @private
   * Note: this method is used only by scenario runner
   * TODO(vojta): prefix this method with $$ ?
   * @param {function()} callback Function that will be called when no outstanding request
   */
  self.notifyWhenNoOutstandingRequests = function(callback) {
    if (outstandingRequestCount === 0) {
      callback();
    } else {
      outstandingRequestCallbacks.push(callback);
    }
  };

  //////////////////////////////////////////////////////////////
  // URL API
  //////////////////////////////////////////////////////////////

  var cachedState, lastHistoryState,
      lastBrowserUrl = location.href,
      baseElement = document.find('base'),
      pendingLocation = null,
      getCurrentState = !$sniffer.history ? noop : function getCurrentState() {
        try {
          return history.state;
        } catch (e) {
          // MSIE can reportedly throw when there is no state (UNCONFIRMED).
        }
      };

  cacheState();

  /**
   * @name $browser#url
   *
   * @description
   * GETTER:
   * Without any argument, this method just returns current value of location.href.
   *
   * SETTER:
   * With at least one argument, this method sets url to new value.
   * If html5 history api supported, pushState/replaceState is used, otherwise
   * location.href/location.replace is used.
   * Returns its own instance to allow chaining
   *
   * NOTE: this api is intended for use only by the $location service. Please use the
   * {@link ng.$location $location service} to change url.
   *
   * @param {string} url New url (when used as setter)
   * @param {boolean=} replace Should new url replace current history record?
   * @param {object=} state object to use with pushState/replaceState
   */
  self.url = function(url, replace, state) {
    // In modern browsers `history.state` is `null` by default; treating it separately
    // from `undefined` would cause `$browser.url('/foo')` to change `history.state`
    // to undefined via `pushState`. Instead, let's change `undefined` to `null` here.
    if (isUndefined(state)) {
      state = null;
    }

    // Android Browser BFCache causes location, history reference to become stale.
    if (location !== window.location) location = window.location;
    if (history !== window.history) history = window.history;

    // setter
    if (url) {
      var sameState = lastHistoryState === state;

      // Don't change anything if previous and current URLs and states match. This also prevents
      // IE<10 from getting into redirect loop when in LocationHashbangInHtml5Url mode.
      // See https://github.com/angular/angular.js/commit/ffb2701
      if (lastBrowserUrl === url && (!$sniffer.history || sameState)) {
        return self;
      }
      var sameBase = lastBrowserUrl && stripHash(lastBrowserUrl) === stripHash(url);
      lastBrowserUrl = url;
      lastHistoryState = state;
      // Don't use history API if only the hash changed
      // due to a bug in IE10/IE11 which leads
      // to not firing a `hashchange` nor `popstate` event
      // in some cases (see #9143).
      if ($sniffer.history && (!sameBase || !sameState)) {
        history[replace ? 'replaceState' : 'pushState'](state, '', url);
        cacheState();
      } else {
        if (!sameBase) {
          pendingLocation = url;
        }
        if (replace) {
          location.replace(url);
        } else if (!sameBase) {
          location.href = url;
        } else {
          location.hash = getHash(url);
        }
        if (location.href !== url) {
          pendingLocation = url;
        }
      }
      if (pendingLocation) {
        pendingLocation = url;
      }
      return self;
    // getter
    } else {
      // - pendingLocation is needed as browsers don't allow to read out
      //   the new location.href if a reload happened or if there is a bug like in iOS 9 (see
      //   https://openradar.appspot.com/22186109).
      // - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172
      return pendingLocation || location.href.replace(/%27/g,'\'');
    }
  };

  /**
   * @name $browser#state
   *
   * @description
   * This method is a getter.
   *
   * Return history.state or null if history.state is undefined.
   *
   * @returns {object} state
   */
  self.state = function() {
    return cachedState;
  };

  var urlChangeListeners = [],
      urlChangeInit = false;

  function cacheStateAndFireUrlChange() {
    pendingLocation = null;
    fireStateOrUrlChange();
  }

  // This variable should be used *only* inside the cacheState function.
  var lastCachedState = null;
  function cacheState() {
    // This should be the only place in $browser where `history.state` is read.
    cachedState = getCurrentState();
    cachedState = isUndefined(cachedState) ? null : cachedState;

    // Prevent callbacks fo fire twice if both hashchange & popstate were fired.
    if (equals(cachedState, lastCachedState)) {
      cachedState = lastCachedState;
    }

    lastCachedState = cachedState;
    lastHistoryState = cachedState;
  }

  function fireStateOrUrlChange() {
    var prevLastHistoryState = lastHistoryState;
    cacheState();

    if (lastBrowserUrl === self.url() && prevLastHistoryState === cachedState) {
      return;
    }

    lastBrowserUrl = self.url();
    lastHistoryState = cachedState;
    forEach(urlChangeListeners, function(listener) {
      listener(self.url(), cachedState);
    });
  }

  /**
   * @name $browser#onUrlChange
   *
   * @description
   * Register callback function that will be called, when url changes.
   *
   * It's only called when the url is changed from outside of angular:
   * - user types different url into address bar
   * - user clicks on history (forward/back) button
   * - user clicks on a link
   *
   * It's not called when url is changed by $browser.url() method
   *
   * The listener gets called with new url as parameter.
   *
   * NOTE: this api is intended for use only by the $location service. Please use the
   * {@link ng.$location $location service} to monitor url changes in angular apps.
   *
   * @param {function(string)} listener Listener function to be called when url changes.
   * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.
   */
  self.onUrlChange = function(callback) {
    // TODO(vojta): refactor to use node's syntax for events
    if (!urlChangeInit) {
      // We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)
      // don't fire popstate when user change the address bar and don't fire hashchange when url
      // changed by push/replaceState

      // html5 history api - popstate event
      if ($sniffer.history) jqLite(window).on('popstate', cacheStateAndFireUrlChange);
      // hashchange event
      jqLite(window).on('hashchange', cacheStateAndFireUrlChange);

      urlChangeInit = true;
    }

    urlChangeListeners.push(callback);
    return callback;
  };

  /**
   * @private
   * Remove popstate and hashchange handler from window.
   *
   * NOTE: this api is intended for use only by $rootScope.
   */
  self.$$applicationDestroyed = function() {
    jqLite(window).off('hashchange popstate', cacheStateAndFireUrlChange);
  };

  /**
   * Checks whether the url has changed outside of Angular.
   * Needs to be exported to be able to check for changes that have been done in sync,
   * as hashchange/popstate events fire in async.
   */
  self.$$checkUrlChange = fireStateOrUrlChange;

  //////////////////////////////////////////////////////////////
  // Misc API
  //////////////////////////////////////////////////////////////

  /**
   * @name $browser#baseHref
   *
   * @description
   * Returns current <base href>
   * (always relative - without domain)
   *
   * @returns {string} The current base href
   */
  self.baseHref = function() {
    var href = baseElement.attr('href');
    return href ? href.replace(/^(https?:)?\/\/[^/]*/, '') : '';
  };

  /**
   * @name $browser#defer
   * @param {function()} fn A function, who's execution should be deferred.
   * @param {number=} [delay=0] of milliseconds to defer the function execution.
   * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.
   *
   * @description
   * Executes a fn asynchronously via `setTimeout(fn, delay)`.
   *
   * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using
   * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed
   * via `$browser.defer.flush()`.
   *
   */
  self.defer = function(fn, delay) {
    var timeoutId;
    outstandingRequestCount++;
    timeoutId = setTimeout(function() {
      delete pendingDeferIds[timeoutId];
      completeOutstandingRequest(fn);
    }, delay || 0);
    pendingDeferIds[timeoutId] = true;
    return timeoutId;
  };


  /**
   * @name $browser#defer.cancel
   *
   * @description
   * Cancels a deferred task identified with `deferId`.
   *
   * @param {*} deferId Token returned by the `$browser.defer` function.
   * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
   *                    canceled.
   */
  self.defer.cancel = function(deferId) {
    if (pendingDeferIds[deferId]) {
      delete pendingDeferIds[deferId];
      clearTimeout(deferId);
      completeOutstandingRequest(noop);
      return true;
    }
    return false;
  };

}

/** @this */
function $BrowserProvider() {
  this.$get = ['$window', '$log', '$sniffer', '$document',
      function($window, $log, $sniffer, $document) {
        return new Browser($window, $document, $log, $sniffer);
      }];
}

/**
 * @ngdoc service
 * @name $cacheFactory
 * @this
 *
 * @description
 * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to
 * them.
 *
 * ```js
 *
 *  var cache = $cacheFactory('cacheId');
 *  expect($cacheFactory.get('cacheId')).toBe(cache);
 *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();
 *
 *  cache.put("key", "value");
 *  cache.put("another key", "another value");
 *
 *  // We've specified no options on creation
 *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});
 *
 * ```
 *
 *
 * @param {string} cacheId Name or id of the newly created cache.
 * @param {object=} options Options object that specifies the cache behavior. Properties:
 *
 *   - `{number=}` `capacity` — turns the cache into LRU cache.
 *
 * @returns {object} Newly created cache object with the following set of methods:
 *
 * - `{object}` `info()` — Returns id, size, and options of cache.
 * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns
 *   it.
 * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.
 * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.
 * - `{void}` `removeAll()` — Removes all cached values.
 * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.
 *
 * @example
   <example module="cacheExampleApp" name="cache-factory">
     <file name="index.html">
       <div ng-controller="CacheController">
         <input ng-model="newCacheKey" placeholder="Key">
         <input ng-model="newCacheValue" placeholder="Value">
         <button ng-click="put(newCacheKey, newCacheValue)">Cache</button>

         <p ng-if="keys.length">Cached Values</p>
         <div ng-repeat="key in keys">
           <span ng-bind="key"></span>
           <span>: </span>
           <b ng-bind="cache.get(key)"></b>
         </div>

         <p>Cache Info</p>
         <div ng-repeat="(key, value) in cache.info()">
           <span ng-bind="key"></span>
           <span>: </span>
           <b ng-bind="value"></b>
         </div>
       </div>
     </file>
     <file name="script.js">
       angular.module('cacheExampleApp', []).
         controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {
           $scope.keys = [];
           $scope.cache = $cacheFactory('cacheId');
           $scope.put = function(key, value) {
             if (angular.isUndefined($scope.cache.get(key))) {
               $scope.keys.push(key);
             }
             $scope.cache.put(key, angular.isUndefined(value) ? null : value);
           };
         }]);
     </file>
     <file name="style.css">
       p {
         margin: 10px 0 3px;
       }
     </file>
   </example>
 */
function $CacheFactoryProvider() {

  this.$get = function() {
    var caches = {};

    function cacheFactory(cacheId, options) {
      if (cacheId in caches) {
        throw minErr('$cacheFactory')('iid', 'CacheId \'{0}\' is already taken!', cacheId);
      }

      var size = 0,
          stats = extend({}, options, {id: cacheId}),
          data = createMap(),
          capacity = (options && options.capacity) || Number.MAX_VALUE,
          lruHash = createMap(),
          freshEnd = null,
          staleEnd = null;

      /**
       * @ngdoc type
       * @name $cacheFactory.Cache
       *
       * @description
       * A cache object used to store and retrieve data, primarily used by
       * {@link $http $http} and the {@link ng.directive:script script} directive to cache
       * templates and other data.
       *
       * ```js
       *  angular.module('superCache')
       *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {
       *      return $cacheFactory('super-cache');
       *    }]);
       * ```
       *
       * Example test:
       *
       * ```js
       *  it('should behave like a cache', inject(function(superCache) {
       *    superCache.put('key', 'value');
       *    superCache.put('another key', 'another value');
       *
       *    expect(superCache.info()).toEqual({
       *      id: 'super-cache',
       *      size: 2
       *    });
       *
       *    superCache.remove('another key');
       *    expect(superCache.get('another key')).toBeUndefined();
       *
       *    superCache.removeAll();
       *    expect(superCache.info()).toEqual({
       *      id: 'super-cache',
       *      size: 0
       *    });
       *  }));
       * ```
       */
      return (caches[cacheId] = {

        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#put
         * @kind function
         *
         * @description
         * Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be
         * retrieved later, and incrementing the size of the cache if the key was not already
         * present in the cache. If behaving like an LRU cache, it will also remove stale
         * entries from the set.
         *
         * It will not insert undefined values into the cache.
         *
         * @param {string} key the key under which the cached data is stored.
         * @param {*} value the value to store alongside the key. If it is undefined, the key
         *    will not be stored.
         * @returns {*} the value stored.
         */
        put: function(key, value) {
          if (isUndefined(value)) return;
          if (capacity < Number.MAX_VALUE) {
            var lruEntry = lruHash[key] || (lruHash[key] = {key: key});

            refresh(lruEntry);
          }

          if (!(key in data)) size++;
          data[key] = value;

          if (size > capacity) {
            this.remove(staleEnd.key);
          }

          return value;
        },

        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#get
         * @kind function
         *
         * @description
         * Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.
         *
         * @param {string} key the key of the data to be retrieved
         * @returns {*} the value stored.
         */
        get: function(key) {
          if (capacity < Number.MAX_VALUE) {
            var lruEntry = lruHash[key];

            if (!lruEntry) return;

            refresh(lruEntry);
          }

          return data[key];
        },


        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#remove
         * @kind function
         *
         * @description
         * Removes an entry from the {@link $cacheFactory.Cache Cache} object.
         *
         * @param {string} key the key of the entry to be removed
         */
        remove: function(key) {
          if (capacity < Number.MAX_VALUE) {
            var lruEntry = lruHash[key];

            if (!lruEntry) return;

            if (lruEntry === freshEnd) freshEnd = lruEntry.p;
            if (lruEntry === staleEnd) staleEnd = lruEntry.n;
            link(lruEntry.n,lruEntry.p);

            delete lruHash[key];
          }

          if (!(key in data)) return;

          delete data[key];
          size--;
        },


        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#removeAll
         * @kind function
         *
         * @description
         * Clears the cache object of any entries.
         */
        removeAll: function() {
          data = createMap();
          size = 0;
          lruHash = createMap();
          freshEnd = staleEnd = null;
        },


        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#destroy
         * @kind function
         *
         * @description
         * Destroys the {@link $cacheFactory.Cache Cache} object entirely,
         * removing it from the {@link $cacheFactory $cacheFactory} set.
         */
        destroy: function() {
          data = null;
          stats = null;
          lruHash = null;
          delete caches[cacheId];
        },


        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#info
         * @kind function
         *
         * @description
         * Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.
         *
         * @returns {object} an object with the following properties:
         *   <ul>
         *     <li>**id**: the id of the cache instance</li>
         *     <li>**size**: the number of entries kept in the cache instance</li>
         *     <li>**...**: any additional properties from the options object when creating the
         *       cache.</li>
         *   </ul>
         */
        info: function() {
          return extend({}, stats, {size: size});
        }
      });


      /**
       * makes the `entry` the freshEnd of the LRU linked list
       */
      function refresh(entry) {
        if (entry !== freshEnd) {
          if (!staleEnd) {
            staleEnd = entry;
          } else if (staleEnd === entry) {
            staleEnd = entry.n;
          }

          link(entry.n, entry.p);
          link(entry, freshEnd);
          freshEnd = entry;
          freshEnd.n = null;
        }
      }


      /**
       * bidirectionally links two entries of the LRU linked list
       */
      function link(nextEntry, prevEntry) {
        if (nextEntry !== prevEntry) {
          if (nextEntry) nextEntry.p = prevEntry; //p stands for previous, 'prev' didn't minify
          if (prevEntry) prevEntry.n = nextEntry; //n stands for next, 'next' didn't minify
        }
      }
    }


  /**
   * @ngdoc method
   * @name $cacheFactory#info
   *
   * @description
   * Get information about all the caches that have been created
   *
   * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`
   */
    cacheFactory.info = function() {
      var info = {};
      forEach(caches, function(cache, cacheId) {
        info[cacheId] = cache.info();
      });
      return info;
    };


  /**
   * @ngdoc method
   * @name $cacheFactory#get
   *
   * @description
   * Get access to a cache object by the `cacheId` used when it was created.
   *
   * @param {string} cacheId Name or id of a cache to access.
   * @returns {object} Cache object identified by the cacheId or undefined if no such cache.
   */
    cacheFactory.get = function(cacheId) {
      return caches[cacheId];
    };


    return cacheFactory;
  };
}

/**
 * @ngdoc service
 * @name $templateCache
 * @this
 *
 * @description
 * The first time a template is used, it is loaded in the template cache for quick retrieval. You
 * can load templates directly into the cache in a `script` tag, or by consuming the
 * `$templateCache` service directly.
 *
 * Adding via the `script` tag:
 *
 * ```html
 *   <script type="text/ng-template" id="templateId.html">
 *     <p>This is the content of the template</p>
 *   </script>
 * ```
 *
 * **Note:** the `script` tag containing the template does not need to be included in the `head` of
 * the document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (IE,
 * element with ng-app attribute), otherwise the template will be ignored.
 *
 * Adding via the `$templateCache` service:
 *
 * ```js
 * var myApp = angular.module('myApp', []);
 * myApp.run(function($templateCache) {
 *   $templateCache.put('templateId.html', 'This is the content of the template');
 * });
 * ```
 *
 * To retrieve the template later, simply use it in your component:
 * ```js
 * myApp.component('myComponent', {
 *    templateUrl: 'templateId.html'
 * });
 * ```
 *
 * or get it via the `$templateCache` service:
 * ```js
 * $templateCache.get('templateId.html')
 * ```
 *
 * See {@link ng.$cacheFactory $cacheFactory}.
 *
 */
function $TemplateCacheProvider() {
  this.$get = ['$cacheFactory', function($cacheFactory) {
    return $cacheFactory('templates');
  }];
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *     Any commits to this file should be reviewed with security in mind.  *
 *   Changes to this file can potentially create security vulnerabilities. *
 *          An approval from 2 Core members with history of modifying      *
 *                         this file is required.                          *
 *                                                                         *
 *  Does the change somehow allow for arbitrary javascript to be executed? *
 *    Or allows for someone to change the prototype of built-in objects?   *
 *     Or gives undesired access to variables like document or window?    *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!
 *
 * DOM-related variables:
 *
 * - "node" - DOM Node
 * - "element" - DOM Element or Node
 * - "$node" or "$element" - jqLite-wrapped node or element
 *
 *
 * Compiler related stuff:
 *
 * - "linkFn" - linking fn of a single directive
 * - "nodeLinkFn" - function that aggregates all linking fns for a particular node
 * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node
 * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)
 */


/**
 * @ngdoc service
 * @name $compile
 * @kind function
 *
 * @description
 * Compiles an HTML string or DOM into a template and produces a template function, which
 * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.
 *
 * The compilation is a process of walking the DOM tree and matching DOM elements to
 * {@link ng.$compileProvider#directive directives}.
 *
 * <div class="alert alert-warning">
 * **Note:** This document is an in-depth reference of all directive options.
 * For a gentle introduction to directives with examples of common use cases,
 * see the {@link guide/directive directive guide}.
 * </div>
 *
 * ## Comprehensive Directive API
 *
 * There are many different options for a directive.
 *
 * The difference resides in the return value of the factory function.
 * You can either return a {@link $compile#directive-definition-object Directive Definition Object (see below)}
 * that defines the directive properties, or just the `postLink` function (all other properties will have
 * the default values).
 *
 * <div class="alert alert-success">
 * **Best Practice:** It's recommended to use the "directive definition object" form.
 * </div>
 *
 * Here's an example directive declared with a Directive Definition Object:
 *
 * ```js
 *   var myModule = angular.module(...);
 *
 *   myModule.directive('directiveName', function factory(injectables) {
 *     var directiveDefinitionObject = {
 *       {@link $compile#-priority- priority}: 0,
 *       {@link $compile#-template- template}: '<div></div>', // or // function(tElement, tAttrs) { ... },
 *       // or
 *       // {@link $compile#-templateurl- templateUrl}: 'directive.html', // or // function(tElement, tAttrs) { ... },
 *       {@link $compile#-transclude- transclude}: false,
 *       {@link $compile#-restrict- restrict}: 'A',
 *       {@link $compile#-templatenamespace- templateNamespace}: 'html',
 *       {@link $compile#-scope- scope}: false,
 *       {@link $compile#-controller- controller}: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },
 *       {@link $compile#-controlleras- controllerAs}: 'stringIdentifier',
 *       {@link $compile#-bindtocontroller- bindToController}: false,
 *       {@link $compile#-require- require}: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],
 *       {@link $compile#-multielement- multiElement}: false,
 *       {@link $compile#-compile- compile}: function compile(tElement, tAttrs, transclude) {
 *         return {
 *            {@link $compile#pre-linking-function pre}: function preLink(scope, iElement, iAttrs, controller) { ... },
 *            {@link $compile#post-linking-function post}: function postLink(scope, iElement, iAttrs, controller) { ... }
 *         }
 *         // or
 *         // return function postLink( ... ) { ... }
 *       },
 *       // or
 *       // {@link $compile#-link- link}: {
 *       //  {@link $compile#pre-linking-function pre}: function preLink(scope, iElement, iAttrs, controller) { ... },
 *       //  {@link $compile#post-linking-function post}: function postLink(scope, iElement, iAttrs, controller) { ... }
 *       // }
 *       // or
 *       // {@link $compile#-link- link}: function postLink( ... ) { ... }
 *     };
 *     return directiveDefinitionObject;
 *   });
 * ```
 *
 * <div class="alert alert-warning">
 * **Note:** Any unspecified options will use the default value. You can see the default values below.
 * </div>
 *
 * Therefore the above can be simplified as:
 *
 * ```js
 *   var myModule = angular.module(...);
 *
 *   myModule.directive('directiveName', function factory(injectables) {
 *     var directiveDefinitionObject = {
 *       link: function postLink(scope, iElement, iAttrs) { ... }
 *     };
 *     return directiveDefinitionObject;
 *     // or
 *     // return function postLink(scope, iElement, iAttrs) { ... }
 *   });
 * ```
 *
 * ### Life-cycle hooks
 * Directive controllers can provide the following methods that are called by Angular at points in the life-cycle of the
 * directive:
 * * `$onInit()` - Called on each controller after all the controllers on an element have been constructed and
 *   had their bindings initialized (and before the pre &amp; post linking functions for the directives on
 *   this element). This is a good place to put initialization code for your controller.
 * * `$onChanges(changesObj)` - Called whenever one-way (`<`) or interpolation (`@`) bindings are updated. The
 *   `changesObj` is a hash whose keys are the names of the bound properties that have changed, and the values are an
 *   object of the form `{ currentValue, previousValue, isFirstChange() }`. Use this hook to trigger updates within a
 *   component such as cloning the bound value to prevent accidental mutation of the outer value. Note that this will
 *   also be called when your bindings are initialized.
 * * `$doCheck()` - Called on each turn of the digest cycle. Provides an opportunity to detect and act on
 *   changes. Any actions that you wish to take in response to the changes that you detect must be
 *   invoked from this hook; implementing this has no effect on when `$onChanges` is called. For example, this hook
 *   could be useful if you wish to perform a deep equality check, or to check a Date object, changes to which would not
 *   be detected by Angular's change detector and thus not trigger `$onChanges`. This hook is invoked with no arguments;
 *   if detecting changes, you must store the previous value(s) for comparison to the current values.
 * * `$onDestroy()` - Called on a controller when its containing scope is destroyed. Use this hook for releasing
 *   external resources, watches and event handlers. Note that components have their `$onDestroy()` hooks called in
 *   the same order as the `$scope.$broadcast` events are triggered, which is top down. This means that parent
 *   components will have their `$onDestroy()` hook called before child components.
 * * `$postLink()` - Called after this controller's element and its children have been linked. Similar to the post-link
 *   function this hook can be used to set up DOM event handlers and do direct DOM manipulation.
 *   Note that child elements that contain `templateUrl` directives will not have been compiled and linked since
 *   they are waiting for their template to load asynchronously and their own compilation and linking has been
 *   suspended until that occurs.
 *
 * #### Comparison with Angular 2 life-cycle hooks
 * Angular 2 also uses life-cycle hooks for its components. While the Angular 1 life-cycle hooks are similar there are
 * some differences that you should be aware of, especially when it comes to moving your code from Angular 1 to Angular 2:
 *
 * * Angular 1 hooks are prefixed with `$`, such as `$onInit`. Angular 2 hooks are prefixed with `ng`, such as `ngOnInit`.
 * * Angular 1 hooks can be defined on the controller prototype or added to the controller inside its constructor.
 *   In Angular 2 you can only define hooks on the prototype of the Component class.
 * * Due to the differences in change-detection, you may get many more calls to `$doCheck` in Angular 1 than you would to
 *   `ngDoCheck` in Angular 2
 * * Changes to the model inside `$doCheck` will trigger new turns of the digest loop, which will cause the changes to be
 *   propagated throughout the application.
 *   Angular 2 does not allow the `ngDoCheck` hook to trigger a change outside of the component. It will either throw an
 *   error or do nothing depending upon the state of `enableProdMode()`.
 *
 * #### Life-cycle hook examples
 *
 * This example shows how you can check for mutations to a Date object even though the identity of the object
 * has not changed.
 *
 * <example name="doCheckDateExample" module="do-check-module">
 *   <file name="app.js">
 *     angular.module('do-check-module', [])
 *       .component('app', {
 *         template:
 *           'Month: <input ng-model="$ctrl.month" ng-change="$ctrl.updateDate()">' +
 *           'Date: {{ $ctrl.date }}' +
 *           '<test date="$ctrl.date"></test>',
 *         controller: function() {
 *           this.date = new Date();
 *           this.month = this.date.getMonth();
 *           this.updateDate = function() {
 *             this.date.setMonth(this.month);
 *           };
 *         }
 *       })
 *       .component('test', {
 *         bindings: { date: '<' },
 *         template:
 *           '<pre>{{ $ctrl.log | json }}</pre>',
 *         controller: function() {
 *           var previousValue;
 *           this.log = [];
 *           this.$doCheck = function() {
 *             var currentValue = this.date && this.date.valueOf();
 *             if (previousValue !== currentValue) {
 *               this.log.push('doCheck: date mutated: ' + this.date);
 *               previousValue = currentValue;
 *             }
 *           };
 *         }
 *       });
 *   </file>
 *   <file name="index.html">
 *     <app></app>
 *   </file>
 * </example>
 *
 * This example show how you might use `$doCheck` to trigger changes in your component's inputs even if the
 * actual identity of the component doesn't change. (Be aware that cloning and deep equality checks on large
 * arrays or objects can have a negative impact on your application performance)
 *
 * <example name="doCheckArrayExample" module="do-check-module">
 *   <file name="index.html">
 *     <div ng-init="items = []">
 *       <button ng-click="items.push(items.length)">Add Item</button>
 *       <button ng-click="items = []">Reset Items</button>
 *       <pre>{{ items }}</pre>
 *       <test items="items"></test>
 *     </div>
 *   </file>
 *   <file name="app.js">
 *      angular.module('do-check-module', [])
 *        .component('test', {
 *          bindings: { items: '<' },
 *          template:
 *            '<pre>{{ $ctrl.log | json }}</pre>',
 *          controller: function() {
 *            this.log = [];
 *
 *            this.$doCheck = function() {
 *              if (this.items_ref !== this.items) {
 *                this.log.push('doCheck: items changed');
 *                this.items_ref = this.items;
 *              }
 *              if (!angular.equals(this.items_clone, this.items)) {
 *                this.log.push('doCheck: items mutated');
 *                this.items_clone = angular.copy(this.items);
 *              }
 *            };
 *          }
 *        });
 *   </file>
 * </example>
 *
 *
 * ### Directive Definition Object
 *
 * The directive definition object provides instructions to the {@link ng.$compile
 * compiler}. The attributes are:
 *
 * #### `multiElement`
 * When this property is set to true (default is `false`), the HTML compiler will collect DOM nodes between
 * nodes with the attributes `directive-name-start` and `directive-name-end`, and group them
 * together as the directive elements. It is recommended that this feature be used on directives
 * which are not strictly behavioral (such as {@link ngClick}), and which
 * do not manipulate or replace child nodes (such as {@link ngInclude}).
 *
 * #### `priority`
 * When there are multiple directives defined on a single DOM element, sometimes it
 * is necessary to specify the order in which the directives are applied. The `priority` is used
 * to sort the directives before their `compile` functions get called. Priority is defined as a
 * number. Directives with greater numerical `priority` are compiled first. Pre-link functions
 * are also run in priority order, but post-link functions are run in reverse order. The order
 * of directives with the same priority is undefined. The default priority is `0`.
 *
 * #### `terminal`
 * If set to true then the current `priority` will be the last set of directives
 * which will execute (any directives at the current priority will still execute
 * as the order of execution on same `priority` is undefined). Note that expressions
 * and other directives used in the directive's template will also be excluded from execution.
 *
 * #### `scope`
 * The scope property can be `false`, `true`, or an object:
 *
 * * **`false` (default):** No scope will be created for the directive. The directive will use its
 * parent's scope.
 *
 * * **`true`:** A new child scope that prototypically inherits from its parent will be created for
 * the directive's element. If multiple directives on the same element request a new scope,
 * only one new scope is created.
 *
 * * **`{...}` (an object hash):** A new "isolate" scope is created for the directive's element. The
 * 'isolate' scope differs from normal scope in that it does not prototypically inherit from its parent
 * scope. This is useful when creating reusable components, which should not accidentally read or modify
 * data in the parent scope.
 *
 * The 'isolate' scope object hash defines a set of local scope properties derived from attributes on the
 * directive's element. These local properties are useful for aliasing values for templates. The keys in
 * the object hash map to the name of the property on the isolate scope; the values define how the property
 * is bound to the parent scope, via matching attributes on the directive's element:
 *
 * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is
 *   always a string since DOM attributes are strings. If no `attr` name is specified then the
 *   attribute name is assumed to be the same as the local name. Given `<my-component
 *   my-attr="hello {{name}}">` and the isolate scope definition `scope: { localName:'@myAttr' }`,
 *   the directive's scope property `localName` will reflect the interpolated value of `hello
 *   {{name}}`. As the `name` attribute changes so will the `localName` property on the directive's
 *   scope. The `name` is read from the parent scope (not the directive's scope).
 *
 * * `=` or `=attr` - set up a bidirectional binding between a local scope property and an expression
 *   passed via the attribute `attr`. The expression is evaluated in the context of the parent scope.
 *   If no `attr` name is specified then the attribute name is assumed to be the same as the local
 *   name. Given `<my-component my-attr="parentModel">` and the isolate scope definition `scope: {
 *   localModel: '=myAttr' }`, the property `localModel` on the directive's scope will reflect the
 *   value of `parentModel` on the parent scope. Changes to `parentModel` will be reflected in
 *   `localModel` and vice versa. Optional attributes should be marked as such with a question mark:
 *   `=?` or `=?attr`. If the binding expression is non-assignable, or if the attribute isn't
 *   optional and doesn't exist, an exception ({@link error/$compile/nonassign `$compile:nonassign`})
 *   will be thrown upon discovering changes to the local value, since it will be impossible to sync
 *   them back to the parent scope. By default, the {@link ng.$rootScope.Scope#$watch `$watch`}
 *   method is used for tracking changes, and the equality check is based on object identity.
 *   However, if an object literal or an array literal is passed as the binding expression, the
 *   equality check is done by value (using the {@link angular.equals} function). It's also possible
 *   to watch the evaluated value shallowly with {@link ng.$rootScope.Scope#$watchCollection
 *   `$watchCollection`}: use `=*` or `=*attr` (`=*?` or `=*?attr` if the attribute is optional).
 *
  * * `<` or `<attr` - set up a one-way (one-directional) binding between a local scope property and an
 *   expression passed via the attribute `attr`. The expression is evaluated in the context of the
 *   parent scope. If no `attr` name is specified then the attribute name is assumed to be the same as the
 *   local name. You can also make the binding optional by adding `?`: `<?` or `<?attr`.
 *
 *   For example, given `<my-component my-attr="parentModel">` and directive definition of
 *   `scope: { localModel:'<myAttr' }`, then the isolated scope property `localModel` will reflect the
 *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected
 *   in `localModel`, but changes in `localModel` will not reflect in `parentModel`. There are however
 *   two caveats:
 *     1. one-way binding does not copy the value from the parent to the isolate scope, it simply
 *     sets the same value. That means if your bound value is an object, changes to its properties
 *     in the isolated scope will be reflected in the parent scope (because both reference the same object).
 *     2. one-way binding watches changes to the **identity** of the parent value. That means the
 *     {@link ng.$rootScope.Scope#$watch `$watch`} on the parent value only fires if the reference
 *     to the value has changed. In most cases, this should not be of concern, but can be important
 *     to know if you one-way bind to an object, and then replace that object in the isolated scope.
 *     If you now change a property of the object in your parent scope, the change will not be
 *     propagated to the isolated scope, because the identity of the object on the parent scope
 *     has not changed. Instead you must assign a new object.
 *
 *   One-way binding is useful if you do not plan to propagate changes to your isolated scope bindings
 *   back to the parent. However, it does not make this completely impossible.
 *
 * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope. If
 *   no `attr` name is specified then the attribute name is assumed to be the same as the local name.
 *   Given `<my-component my-attr="count = count + value">` and the isolate scope definition `scope: {
 *   localFn:'&myAttr' }`, the isolate scope property `localFn` will point to a function wrapper for
 *   the `count = count + value` expression. Often it's desirable to pass data from the isolated scope
 *   via an expression to the parent scope. This can be done by passing a map of local variable names
 *   and values into the expression wrapper fn. For example, if the expression is `increment(amount)`
 *   then we can specify the amount value by calling the `localFn` as `localFn({amount: 22})`.
 *
 * In general it's possible to apply more than one directive to one element, but there might be limitations
 * depending on the type of scope required by the directives. The following points will help explain these limitations.
 * For simplicity only two directives are taken into account, but it is also applicable for several directives:
 *
 * * **no scope** + **no scope** => Two directives which don't require their own scope will use their parent's scope
 * * **child scope** + **no scope** =>  Both directives will share one single child scope
 * * **child scope** + **child scope** =>  Both directives will share one single child scope
 * * **isolated scope** + **no scope** =>  The isolated directive will use it's own created isolated scope. The other directive will use
 * its parent's scope
 * * **isolated scope** + **child scope** =>  **Won't work!** Only one scope can be related to one element. Therefore these directives cannot
 * be applied to the same element.
 * * **isolated scope** + **isolated scope**  =>  **Won't work!** Only one scope can be related to one element. Therefore these directives
 * cannot be applied to the same element.
 *
 *
 * #### `bindToController`
 * This property is used to bind scope properties directly to the controller. It can be either
 * `true` or an object hash with the same format as the `scope` property.
 *
 * When an isolate scope is used for a directive (see above), `bindToController: true` will
 * allow a component to have its properties bound to the controller, rather than to scope.
 *
 * After the controller is instantiated, the initial values of the isolate scope bindings will be bound to the controller
 * properties. You can access these bindings once they have been initialized by providing a controller method called
 * `$onInit`, which is called after all the controllers on an element have been constructed and had their bindings
 * initialized.
 *
 * <div class="alert alert-warning">
 * **Deprecation warning:** although bindings for non-ES6 class controllers are currently
 * bound to `this` before the controller constructor is called, this use is now deprecated. Please place initialization
 * code that relies upon bindings inside a `$onInit` method on the controller, instead.
 * </div>
 *
 * It is also possible to set `bindToController` to an object hash with the same format as the `scope` property.
 * This will set up the scope bindings to the controller directly. Note that `scope` can still be used
 * to define which kind of scope is created. By default, no scope is created. Use `scope: {}` to create an isolate
 * scope (useful for component directives).
 *
 * If both `bindToController` and `scope` are defined and have object hashes, `bindToController` overrides `scope`.
 *
 *
 * #### `controller`
 * Controller constructor function. The controller is instantiated before the
 * pre-linking phase and can be accessed by other directives (see
 * `require` attribute). This allows the directives to communicate with each other and augment
 * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:
 *
 * * `$scope` - Current scope associated with the element
 * * `$element` - Current element
 * * `$attrs` - Current attributes object for the element
 * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope:
 *   `function([scope], cloneLinkingFn, futureParentElement, slotName)`:
 *    * `scope`: (optional) override the scope.
 *    * `cloneLinkingFn`: (optional) argument to create clones of the original transcluded content.
 *    * `futureParentElement` (optional):
 *        * defines the parent to which the `cloneLinkingFn` will add the cloned elements.
 *        * default: `$element.parent()` resp. `$element` for `transclude:'element'` resp. `transclude:true`.
 *        * only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements)
 *          and when the `cloneLinkingFn` is passed,
 *          as those elements need to created and cloned in a special way when they are defined outside their
 *          usual containers (e.g. like `<svg>`).
 *        * See also the `directive.templateNamespace` property.
 *    * `slotName`: (optional) the name of the slot to transclude. If falsy (e.g. `null`, `undefined` or `''`)
 *      then the default transclusion is provided.
 *    The `$transclude` function also has a method on it, `$transclude.isSlotFilled(slotName)`, which returns
 *    `true` if the specified slot contains content (i.e. one or more DOM nodes).
 *
 * #### `require`
 * Require another directive and inject its controller as the fourth argument to the linking function. The
 * `require` property can be a string, an array or an object:
 * * a **string** containing the name of the directive to pass to the linking function
 * * an **array** containing the names of directives to pass to the linking function. The argument passed to the
 * linking function will be an array of controllers in the same order as the names in the `require` property
 * * an **object** whose property values are the names of the directives to pass to the linking function. The argument
 * passed to the linking function will also be an object with matching keys, whose values will hold the corresponding
 * controllers.
 *
 * If the `require` property is an object and `bindToController` is truthy, then the required controllers are
 * bound to the controller using the keys of the `require` property. This binding occurs after all the controllers
 * have been constructed but before `$onInit` is called.
 * If the name of the required controller is the same as the local name (the key), the name can be
 * omitted. For example, `{parentDir: '^^'}` is equivalent to `{parentDir: '^^parentDir'}`.
 * See the {@link $compileProvider#component} helper for an example of how this can be used.
 * If no such required directive(s) can be found, or if the directive does not have a controller, then an error is
 * raised (unless no link function is specified and the required controllers are not being bound to the directive
 * controller, in which case error checking is skipped). The name can be prefixed with:
 *
 * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.
 * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.
 * * `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.
 * * `^^` - Locate the required controller by searching the element's parents. Throw an error if not found.
 * * `?^` - Attempt to locate the required controller by searching the element and its parents or pass
 *   `null` to the `link` fn if not found.
 * * `?^^` - Attempt to locate the required controller by searching the element's parents, or pass
 *   `null` to the `link` fn if not found.
 *
 *
 * #### `controllerAs`
 * Identifier name for a reference to the controller in the directive's scope.
 * This allows the controller to be referenced from the directive template. This is especially
 * useful when a directive is used as component, i.e. with an `isolate` scope. It's also possible
 * to use it in a directive without an `isolate` / `new` scope, but you need to be aware that the
 * `controllerAs` reference might overwrite a property that already exists on the parent scope.
 *
 *
 * #### `restrict`
 * String of subset of `EACM` which restricts the directive to a specific directive
 * declaration style. If omitted, the defaults (elements and attributes) are used.
 *
 * * `E` - Element name (default): `<my-directive></my-directive>`
 * * `A` - Attribute (default): `<div my-directive="exp"></div>`
 * * `C` - Class: `<div class="my-directive: exp;"></div>`
 * * `M` - Comment: `<!-- directive: my-directive exp -->`
 *
 *
 * #### `templateNamespace`
 * String representing the document type used by the markup in the template.
 * AngularJS needs this information as those elements need to be created and cloned
 * in a special way when they are defined outside their usual containers like `<svg>` and `<math>`.
 *
 * * `html` - All root nodes in the template are HTML. Root nodes may also be
 *   top-level elements such as `<svg>` or `<math>`.
 * * `svg` - The root nodes in the template are SVG elements (excluding `<math>`).
 * * `math` - The root nodes in the template are MathML elements (excluding `<svg>`).
 *
 * If no `templateNamespace` is specified, then the namespace is considered to be `html`.
 *
 * #### `template`
 * HTML markup that may:
 * * Replace the contents of the directive's element (default).
 * * Replace the directive's element itself (if `replace` is true - DEPRECATED).
 * * Wrap the contents of the directive's element (if `transclude` is true).
 *
 * Value may be:
 *
 * * A string. For example `<div red-on-hover>{{delete_str}}</div>`.
 * * A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`
 *   function api below) and returns a string value.
 *
 *
 * #### `templateUrl`
 * This is similar to `template` but the template is loaded from the specified URL, asynchronously.
 *
 * Because template loading is asynchronous the compiler will suspend compilation of directives on that element
 * for later when the template has been resolved.  In the meantime it will continue to compile and link
 * sibling and parent elements as though this element had not contained any directives.
 *
 * The compiler does not suspend the entire compilation to wait for templates to be loaded because this
 * would result in the whole app "stalling" until all templates are loaded asynchronously - even in the
 * case when only one deeply nested directive has `templateUrl`.
 *
 * Template loading is asynchronous even if the template has been preloaded into the {@link $templateCache}
 *
 * You can specify `templateUrl` as a string representing the URL or as a function which takes two
 * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns
 * a string value representing the url.  In either case, the template URL is passed through {@link
 * $sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.
 *
 *
 * #### `replace` ([*DEPRECATED*!], will be removed in next major release - i.e. v2.0)
 * specify what the template should replace. Defaults to `false`.
 *
 * * `true` - the template will replace the directive's element.
 * * `false` - the template will replace the contents of the directive's element.
 *
 * The replacement process migrates all of the attributes / classes from the old element to the new
 * one. See the {@link guide/directive#template-expanding-directive
 * Directives Guide} for an example.
 *
 * There are very few scenarios where element replacement is required for the application function,
 * the main one being reusable custom components that are used within SVG contexts
 * (because SVG doesn't work with custom elements in the DOM tree).
 *
 * #### `transclude`
 * Extract the contents of the element where the directive appears and make it available to the directive.
 * The contents are compiled and provided to the directive as a **transclusion function**. See the
 * {@link $compile#transclusion Transclusion} section below.
 *
 *
 * #### `compile`
 *
 * ```js
 *   function compile(tElement, tAttrs, transclude) { ... }
 * ```
 *
 * The compile function deals with transforming the template DOM. Since most directives do not do
 * template transformation, it is not used often. The compile function takes the following arguments:
 *
 *   * `tElement` - template element - The element where the directive has been declared. It is
 *     safe to do template transformation on the element and child elements only.
 *
 *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared
 *     between all directive compile functions.
 *
 *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`
 *
 * <div class="alert alert-warning">
 * **Note:** The template instance and the link instance may be different objects if the template has
 * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that
 * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration
 * should be done in a linking function rather than in a compile function.
 * </div>

 * <div class="alert alert-warning">
 * **Note:** The compile function cannot handle directives that recursively use themselves in their
 * own templates or compile functions. Compiling these directives results in an infinite loop and
 * stack overflow errors.
 *
 * This can be avoided by manually using $compile in the postLink function to imperatively compile
 * a directive's template instead of relying on automatic template compilation via `template` or
 * `templateUrl` declaration or manual compilation inside the compile function.
 * </div>
 *
 * <div class="alert alert-danger">
 * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it
 *   e.g. does not know about the right outer scope. Please use the transclude function that is passed
 *   to the link function instead.
 * </div>

 * A compile function can have a return value which can be either a function or an object.
 *
 * * returning a (post-link) function - is equivalent to registering the linking function via the
 *   `link` property of the config object when the compile function is empty.
 *
 * * returning an object with function(s) registered via `pre` and `post` properties - allows you to
 *   control when a linking function should be called during the linking phase. See info about
 *   pre-linking and post-linking functions below.
 *
 *
 * #### `link`
 * This property is used only if the `compile` property is not defined.
 *
 * ```js
 *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }
 * ```
 *
 * The link function is responsible for registering DOM listeners as well as updating the DOM. It is
 * executed after the template has been cloned. This is where most of the directive logic will be
 * put.
 *
 *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the
 *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.
 *
 *   * `iElement` - instance element - The element where the directive is to be used. It is safe to
 *     manipulate the children of the element only in `postLink` function since the children have
 *     already been linked.
 *
 *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared
 *     between all directive linking functions.
 *
 *   * `controller` - the directive's required controller instance(s) - Instances are shared
 *     among all directives, which allows the directives to use the controllers as a communication
 *     channel. The exact value depends on the directive's `require` property:
 *       * no controller(s) required: the directive's own controller, or `undefined` if it doesn't have one
 *       * `string`: the controller instance
 *       * `array`: array of controller instances
 *
 *     If a required controller cannot be found, and it is optional, the instance is `null`,
 *     otherwise the {@link error:$compile:ctreq Missing Required Controller} error is thrown.
 *
 *     Note that you can also require the directive's own controller - it will be made available like
 *     any other controller.
 *
 *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.
 *     This is the same as the `$transclude` parameter of directive controllers,
 *     see {@link ng.$compile#-controller- the controller section for details}.
 *     `function([scope], cloneLinkingFn, futureParentElement)`.
 *
 * #### Pre-linking function
 *
 * Executed before the child elements are linked. Not safe to do DOM transformation since the
 * compiler linking function will fail to locate the correct elements for linking.
 *
 * #### Post-linking function
 *
 * Executed after the child elements are linked.
 *
 * Note that child elements that contain `templateUrl` directives will not have been compiled
 * and linked since they are waiting for their template to load asynchronously and their own
 * compilation and linking has been suspended until that occurs.
 *
 * It is safe to do DOM transformation in the post-linking function on elements that are not waiting
 * for their async templates to be resolved.
 *
 *
 * ### Transclusion
 *
 * Transclusion is the process of extracting a collection of DOM elements from one part of the DOM and
 * copying them to another part of the DOM, while maintaining their connection to the original AngularJS
 * scope from where they were taken.
 *
 * Transclusion is used (often with {@link ngTransclude}) to insert the
 * original contents of a directive's element into a specified place in the template of the directive.
 * The benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded
 * content has access to the properties on the scope from which it was taken, even if the directive
 * has isolated scope.
 * See the {@link guide/directive#creating-a-directive-that-wraps-other-elements Directives Guide}.
 *
 * This makes it possible for the widget to have private state for its template, while the transcluded
 * content has access to its originating scope.
 *
 * <div class="alert alert-warning">
 * **Note:** When testing an element transclude directive you must not place the directive at the root of the
 * DOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives
 * Testing Transclusion Directives}.
 * </div>
 *
 * There are three kinds of transclusion depending upon whether you want to transclude just the contents of the
 * directive's element, the entire element or multiple parts of the element contents:
 *
 * * `true` - transclude the content (i.e. the child nodes) of the directive's element.
 * * `'element'` - transclude the whole of the directive's element including any directives on this
 *   element that defined at a lower priority than this directive. When used, the `template`
 *   property is ignored.
 * * **`{...}` (an object hash):** - map elements of the content onto transclusion "slots" in the template.
 *
 * **Mult-slot transclusion** is declared by providing an object for the `transclude` property.
 *
 * This object is a map where the keys are the name of the slot to fill and the value is an element selector
 * used to match the HTML to the slot. The element selector should be in normalized form (e.g. `myElement`)
 * and will match the standard element variants (e.g. `my-element`, `my:element`, `data-my-element`, etc).
 *
 * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
 *
 * If the element selector is prefixed with a `?` then that slot is optional.
 *
 * For example, the transclude object `{ slotA: '?myCustomElement' }` maps `<my-custom-element>` elements to
 * the `slotA` slot, which can be accessed via the `$transclude` function or via the {@link ngTransclude} directive.
 *
 * Slots that are not marked as optional (`?`) will trigger a compile time error if there are no matching elements
 * in the transclude content. If you wish to know if an optional slot was filled with content, then you can call
 * `$transclude.isSlotFilled(slotName)` on the transclude function passed to the directive's link function and
 * injectable into the directive's controller.
 *
 *
 * #### Transclusion Functions
 *
 * When a directive requests transclusion, the compiler extracts its contents and provides a **transclusion
 * function** to the directive's `link` function and `controller`. This transclusion function is a special
 * **linking function** that will return the compiled contents linked to a new transclusion scope.
 *
 * <div class="alert alert-info">
 * If you are just using {@link ngTransclude} then you don't need to worry about this function, since
 * ngTransclude will deal with it for us.
 * </div>
 *
 * If you want to manually control the insertion and removal of the transcluded content in your directive
 * then you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery
 * object that contains the compiled DOM, which is linked to the correct transclusion scope.
 *
 * When you call a transclusion function you can pass in a **clone attach function**. This function accepts
 * two parameters, `function(clone, scope) { ... }`, where the `clone` is a fresh compiled copy of your transcluded
 * content and the `scope` is the newly created transclusion scope, which the clone will be linked to.
 *
 * <div class="alert alert-info">
 * **Best Practice**: Always provide a `cloneFn` (clone attach function) when you call a transclude function
 * since you then get a fresh clone of the original DOM and also have access to the new transclusion scope.
 * </div>
 *
 * It is normal practice to attach your transcluded content (`clone`) to the DOM inside your **clone
 * attach function**:
 *
 * ```js
 * var transcludedContent, transclusionScope;
 *
 * $transclude(function(clone, scope) {
 *   element.append(clone);
 *   transcludedContent = clone;
 *   transclusionScope = scope;
 * });
 * ```
 *
 * Later, if you want to remove the transcluded content from your DOM then you should also destroy the
 * associated transclusion scope:
 *
 * ```js
 * transcludedContent.remove();
 * transclusionScope.$destroy();
 * ```
 *
 * <div class="alert alert-info">
 * **Best Practice**: if you intend to add and remove transcluded content manually in your directive
 * (by calling the transclude function to get the DOM and calling `element.remove()` to remove it),
 * then you are also responsible for calling `$destroy` on the transclusion scope.
 * </div>
 *
 * The built-in DOM manipulation directives, such as {@link ngIf}, {@link ngSwitch} and {@link ngRepeat}
 * automatically destroy their transcluded clones as necessary so you do not need to worry about this if
 * you are simply using {@link ngTransclude} to inject the transclusion into your directive.
 *
 *
 * #### Transclusion Scopes
 *
 * When you call a transclude function it returns a DOM fragment that is pre-bound to a **transclusion
 * scope**. This scope is special, in that it is a child of the directive's scope (and so gets destroyed
 * when the directive's scope gets destroyed) but it inherits the properties of the scope from which it
 * was taken.
 *
 * For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look
 * like this:
 *
 * ```html
 * <div ng-app>
 *   <div isolate>
 *     <div transclusion>
 *     </div>
 *   </div>
 * </div>
 * ```
 *
 * The `$parent` scope hierarchy will look like this:
 *
   ```
   - $rootScope
     - isolate
       - transclusion
   ```
 *
 * but the scopes will inherit prototypically from different scopes to their `$parent`.
 *
   ```
   - $rootScope
     - transclusion
   - isolate
   ```
 *
 *
 * ### Attributes
 *
 * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the
 * `link()` or `compile()` functions. It has a variety of uses.
 *
 * * *Accessing normalized attribute names:* Directives like 'ngBind' can be expressed in many ways:
 *   'ng:bind', `data-ng-bind`, or 'x-ng-bind'. The attributes object allows for normalized access
 *   to the attributes.
 *
 * * *Directive inter-communication:* All directives share the same instance of the attributes
 *   object which allows the directives to use the attributes object as inter directive
 *   communication.
 *
 * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object
 *   allowing other directives to read the interpolated value.
 *
 * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes
 *   that contain interpolation (e.g. `src="{{bar}}"`). Not only is this very efficient but it's also
 *   the only way to easily get the actual value because during the linking phase the interpolation
 *   hasn't been evaluated yet and so the value is at this time set to `undefined`.
 *
 * ```js
 * function linkingFn(scope, elm, attrs, ctrl) {
 *   // get the attribute value
 *   console.log(attrs.ngModel);
 *
 *   // change the attribute
 *   attrs.$set('ngModel', 'new value');
 *
 *   // observe changes to interpolated attribute
 *   attrs.$observe('ngModel', function(value) {
 *     console.log('ngModel has changed value to ' + value);
 *   });
 * }
 * ```
 *
 * ## Example
 *
 * <div class="alert alert-warning">
 * **Note**: Typically directives are registered with `module.directive`. The example below is
 * to illustrate how `$compile` works.
 * </div>
 *
 <example module="compileExample" name="compile">
   <file name="index.html">
    <script>
      angular.module('compileExample', [], function($compileProvider) {
        // configure new 'compile' directive by passing a directive
        // factory function. The factory function injects the '$compile'
        $compileProvider.directive('compile', function($compile) {
          // directive factory creates a link function
          return function(scope, element, attrs) {
            scope.$watch(
              function(scope) {
                 // watch the 'compile' expression for changes
                return scope.$eval(attrs.compile);
              },
              function(value) {
                // when the 'compile' expression changes
                // assign it into the current DOM
                element.html(value);

                // compile the new DOM and link it to the current
                // scope.
                // NOTE: we only compile .childNodes so that
                // we don't get into infinite loop compiling ourselves
                $compile(element.contents())(scope);
              }
            );
          };
        });
      })
      .controller('GreeterController', ['$scope', function($scope) {
        $scope.name = 'Angular';
        $scope.html = 'Hello {{name}}';
      }]);
    </script>
    <div ng-controller="GreeterController">
      <input ng-model="name"> <br/>
      <textarea ng-model="html"></textarea> <br/>
      <div compile="html"></div>
    </div>
   </file>
   <file name="protractor.js" type="protractor">
     it('should auto compile', function() {
       var textarea = $('textarea');
       var output = $('div[compile]');
       // The initial state reads 'Hello Angular'.
       expect(output.getText()).toBe('Hello Angular');
       textarea.clear();
       textarea.sendKeys('{{name}}!');
       expect(output.getText()).toBe('Angular!');
     });
   </file>
 </example>

 *
 *
 * @param {string|DOMElement} element Element or HTML string to compile into a template function.
 * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives - DEPRECATED.
 *
 * <div class="alert alert-danger">
 * **Note:** Passing a `transclude` function to the $compile function is deprecated, as it
 *   e.g. will not use the right outer scope. Please pass the transclude function as a
 *   `parentBoundTranscludeFn` to the link function instead.
 * </div>
 *
 * @param {number} maxPriority only apply directives lower than given priority (Only effects the
 *                 root element(s), not their children)
 * @returns {function(scope, cloneAttachFn=, options=)} a link function which is used to bind template
 * (a DOM element/tree) to a scope. Where:
 *
 *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.
 *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the
 *  `template` and call the `cloneAttachFn` function allowing the caller to attach the
 *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is
 *  called as: <br/> `cloneAttachFn(clonedElement, scope)` where:
 *
 *      * `clonedElement` - is a clone of the original `element` passed into the compiler.
 *      * `scope` - is the current scope with which the linking function is working with.
 *
 *  * `options` - An optional object hash with linking options. If `options` is provided, then the following
 *  keys may be used to control linking behavior:
 *
 *      * `parentBoundTranscludeFn` - the transclude function made available to
 *        directives; if given, it will be passed through to the link functions of
 *        directives found in `element` during compilation.
 *      * `transcludeControllers` - an object hash with keys that map controller names
 *        to a hash with the key `instance`, which maps to the controller instance;
 *        if given, it will make the controllers available to directives on the compileNode:
 *        ```
 *        {
 *          parent: {
 *            instance: parentControllerInstance
 *          }
 *        }
 *        ```
 *      * `futureParentElement` - defines the parent to which the `cloneAttachFn` will add
 *        the cloned elements; only needed for transcludes that are allowed to contain non html
 *        elements (e.g. SVG elements). See also the directive.controller property.
 *
 * Calling the linking function returns the element of the template. It is either the original
 * element passed in, or the clone of the element if the `cloneAttachFn` is provided.
 *
 * After linking the view is not updated until after a call to $digest which typically is done by
 * Angular automatically.
 *
 * If you need access to the bound view, there are two ways to do it:
 *
 * - If you are not asking the linking function to clone the template, create the DOM element(s)
 *   before you send them to the compiler and keep this reference around.
 *   ```js
 *     var element = $compile('<p>{{total}}</p>')(scope);
 *   ```
 *
 * - if on the other hand, you need the element to be cloned, the view reference from the original
 *   example would not point to the clone, but rather to the original template that was cloned. In
 *   this case, you can access the clone via the cloneAttachFn:
 *   ```js
 *     var templateElement = angular.element('<p>{{total}}</p>'),
 *         scope = ....;
 *
 *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {
 *       //attach the clone to DOM document at the right place
 *     });
 *
 *     //now we have reference to the cloned DOM via `clonedElement`
 *   ```
 *
 *
 * For information on how the compiler works, see the
 * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.
 *
 * @knownIssue
 *
 * ### Double Compilation
 *
   Double compilation occurs when an already compiled part of the DOM gets
   compiled again. This is an undesired effect and can lead to misbehaving directives, performance issues,
   and memory leaks. Refer to the Compiler Guide {@link guide/compiler#double-compilation-and-how-to-avoid-it
   section on double compilation} for an in-depth explanation and ways to avoid it.
 *
 */

var $compileMinErr = minErr('$compile');

function UNINITIALIZED_VALUE() {}
var _UNINITIALIZED_VALUE = new UNINITIALIZED_VALUE();

/**
 * @ngdoc provider
 * @name $compileProvider
 *
 * @description
 */
$CompileProvider.$inject = ['$provide', '$$sanitizeUriProvider'];
/** @this */
function $CompileProvider($provide, $$sanitizeUriProvider) {
  var hasDirectives = {},
      Suffix = 'Directive',
      COMMENT_DIRECTIVE_REGEXP = /^\s*directive:\s*([\w-]+)\s+(.*)$/,
      CLASS_DIRECTIVE_REGEXP = /(([\w-]+)(?::([^;]+))?;?)/,
      ALL_OR_NOTHING_ATTRS = makeMap('ngSrc,ngSrcset,src,srcset'),
      REQUIRE_PREFIX_REGEXP = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/;

  // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes
  // The assumption is that future DOM event attribute names will begin with
  // 'on' and be composed of only English letters.
  var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;
  var bindingCache = createMap();

  function parseIsolateBindings(scope, directiveName, isController) {
    var LOCAL_REGEXP = /^\s*([@&<]|=(\*?))(\??)\s*([\w$]*)\s*$/;

    var bindings = createMap();

    forEach(scope, function(definition, scopeName) {
      if (definition in bindingCache) {
        bindings[scopeName] = bindingCache[definition];
        return;
      }
      var match = definition.match(LOCAL_REGEXP);

      if (!match) {
        throw $compileMinErr('iscp',
            'Invalid {3} for directive \'{0}\'.' +
            ' Definition: {... {1}: \'{2}\' ...}',
            directiveName, scopeName, definition,
            (isController ? 'controller bindings definition' :
            'isolate scope definition'));
      }

      bindings[scopeName] = {
        mode: match[1][0],
        collection: match[2] === '*',
        optional: match[3] === '?',
        attrName: match[4] || scopeName
      };
      if (match[4]) {
        bindingCache[definition] = bindings[scopeName];
      }
    });

    return bindings;
  }

  function parseDirectiveBindings(directive, directiveName) {
    var bindings = {
      isolateScope: null,
      bindToController: null
    };
    if (isObject(directive.scope)) {
      if (directive.bindToController === true) {
        bindings.bindToController = parseIsolateBindings(directive.scope,
                                                         directiveName, true);
        bindings.isolateScope = {};
      } else {
        bindings.isolateScope = parseIsolateBindings(directive.scope,
                                                     directiveName, false);
      }
    }
    if (isObject(directive.bindToController)) {
      bindings.bindToController =
          parseIsolateBindings(directive.bindToController, directiveName, true);
    }
    if (bindings.bindToController && !directive.controller) {
      // There is no controller
      throw $compileMinErr('noctrl',
            'Cannot bind to controller without directive \'{0}\'s controller.',
            directiveName);
    }
    return bindings;
  }

  function assertValidDirectiveName(name) {
    var letter = name.charAt(0);
    if (!letter || letter !== lowercase(letter)) {
      throw $compileMinErr('baddir', 'Directive/Component name \'{0}\' is invalid. The first character must be a lowercase letter', name);
    }
    if (name !== name.trim()) {
      throw $compileMinErr('baddir',
            'Directive/Component name \'{0}\' is invalid. The name should not contain leading or trailing whitespaces',
            name);
    }
  }

  function getDirectiveRequire(directive) {
    var require = directive.require || (directive.controller && directive.name);

    if (!isArray(require) && isObject(require)) {
      forEach(require, function(value, key) {
        var match = value.match(REQUIRE_PREFIX_REGEXP);
        var name = value.substring(match[0].length);
        if (!name) require[key] = match[0] + key;
      });
    }

    return require;
  }

  function getDirectiveRestrict(restrict, name) {
    if (restrict && !(isString(restrict) && /[EACM]/.test(restrict))) {
      throw $compileMinErr('badrestrict',
          'Restrict property \'{0}\' of directive \'{1}\' is invalid',
          restrict,
          name);
    }

    return restrict || 'EA';
  }

  /**
   * @ngdoc method
   * @name $compileProvider#directive
   * @kind function
   *
   * @description
   * Register a new directive with the compiler.
   *
   * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which
   *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the
   *    names and the values are the factories.
   * @param {Function|Array} directiveFactory An injectable directive factory function. See the
   *    {@link guide/directive directive guide} and the {@link $compile compile API} for more info.
   * @returns {ng.$compileProvider} Self for chaining.
   */
  this.directive = function registerDirective(name, directiveFactory) {
    assertArg(name, 'name');
    assertNotHasOwnProperty(name, 'directive');
    if (isString(name)) {
      assertValidDirectiveName(name);
      assertArg(directiveFactory, 'directiveFactory');
      if (!hasDirectives.hasOwnProperty(name)) {
        hasDirectives[name] = [];
        $provide.factory(name + Suffix, ['$injector', '$exceptionHandler',
          function($injector, $exceptionHandler) {
            var directives = [];
            forEach(hasDirectives[name], function(directiveFactory, index) {
              try {
                var directive = $injector.invoke(directiveFactory);
                if (isFunction(directive)) {
                  directive = { compile: valueFn(directive) };
                } else if (!directive.compile && directive.link) {
                  directive.compile = valueFn(directive.link);
                }
                directive.priority = directive.priority || 0;
                directive.index = index;
                directive.name = directive.name || name;
                directive.require = getDirectiveRequire(directive);
                directive.restrict = getDirectiveRestrict(directive.restrict, name);
                directive.$$moduleName = directiveFactory.$$moduleName;
                directives.push(directive);
              } catch (e) {
                $exceptionHandler(e);
              }
            });
            return directives;
          }]);
      }
      hasDirectives[name].push(directiveFactory);
    } else {
      forEach(name, reverseParams(registerDirective));
    }
    return this;
  };

  /**
   * @ngdoc method
   * @name $compileProvider#component
   * @module ng
   * @param {string} name Name of the component in camelCase (i.e. `myComp` which will match `<my-comp>`)
   * @param {Object} options Component definition object (a simplified
   *    {@link ng.$compile#directive-definition-object directive definition object}),
   *    with the following properties (all optional):
   *
   *    - `controller` – `{(string|function()=}` – controller constructor function that should be
   *      associated with newly created scope or the name of a {@link ng.$compile#-controller-
   *      registered controller} if passed as a string. An empty `noop` function by default.
   *    - `controllerAs` – `{string=}` – identifier name for to reference the controller in the component's scope.
   *      If present, the controller will be published to scope under the `controllerAs` name.
   *      If not present, this will default to be `$ctrl`.
   *    - `template` – `{string=|function()=}` – html template as a string or a function that
   *      returns an html template as a string which should be used as the contents of this component.
   *      Empty string by default.
   *
   *      If `template` is a function, then it is {@link auto.$injector#invoke injected} with
   *      the following locals:
   *
   *      - `$element` - Current element
   *      - `$attrs` - Current attributes object for the element
   *
   *    - `templateUrl` – `{string=|function()=}` – path or function that returns a path to an html
   *      template that should be used  as the contents of this component.
   *
   *      If `templateUrl` is a function, then it is {@link auto.$injector#invoke injected} with
   *      the following locals:
   *
   *      - `$element` - Current element
   *      - `$attrs` - Current attributes object for the element
   *
   *    - `bindings` – `{object=}` – defines bindings between DOM attributes and component properties.
   *      Component properties are always bound to the component controller and not to the scope.
   *      See {@link ng.$compile#-bindtocontroller- `bindToController`}.
   *    - `transclude` – `{boolean=}` – whether {@link $compile#transclusion content transclusion} is enabled.
   *      Disabled by default.
   *    - `require` - `{Object<string, string>=}` - requires the controllers of other directives and binds them to
   *      this component's controller. The object keys specify the property names under which the required
   *      controllers (object values) will be bound. See {@link ng.$compile#-require- `require`}.
   *    - `$...` – additional properties to attach to the directive factory function and the controller
   *      constructor function. (This is used by the component router to annotate)
   *
   * @returns {ng.$compileProvider} the compile provider itself, for chaining of function calls.
   * @description
   * Register a **component definition** with the compiler. This is a shorthand for registering a special
   * type of directive, which represents a self-contained UI component in your application. Such components
   * are always isolated (i.e. `scope: {}`) and are always restricted to elements (i.e. `restrict: 'E'`).
   *
   * Component definitions are very simple and do not require as much configuration as defining general
   * directives. Component definitions usually consist only of a template and a controller backing it.
   *
   * In order to make the definition easier, components enforce best practices like use of `controllerAs`,
   * `bindToController`. They always have **isolate scope** and are restricted to elements.
   *
   * Here are a few examples of how you would usually define components:
   *
   * ```js
   *   var myMod = angular.module(...);
   *   myMod.component('myComp', {
   *     template: '<div>My name is {{$ctrl.name}}</div>',
   *     controller: function() {
   *       this.name = 'shahar';
   *     }
   *   });
   *
   *   myMod.component('myComp', {
   *     template: '<div>My name is {{$ctrl.name}}</div>',
   *     bindings: {name: '@'}
   *   });
   *
   *   myMod.component('myComp', {
   *     templateUrl: 'views/my-comp.html',
   *     controller: 'MyCtrl',
   *     controllerAs: 'ctrl',
   *     bindings: {name: '@'}
   *   });
   *
   * ```
   * For more examples, and an in-depth guide, see the {@link guide/component component guide}.
   *
   * <br />
   * See also {@link ng.$compileProvider#directive $compileProvider.directive()}.
   */
  this.component = function registerComponent(name, options) {
    var controller = options.controller || function() {};

    function factory($injector) {
      function makeInjectable(fn) {
        if (isFunction(fn) || isArray(fn)) {
          return /** @this */ function(tElement, tAttrs) {
            return $injector.invoke(fn, this, {$element: tElement, $attrs: tAttrs});
          };
        } else {
          return fn;
        }
      }

      var template = (!options.template && !options.templateUrl ? '' : options.template);
      var ddo = {
        controller: controller,
        controllerAs: identifierForController(options.controller) || options.controllerAs || '$ctrl',
        template: makeInjectable(template),
        templateUrl: makeInjectable(options.templateUrl),
        transclude: options.transclude,
        scope: {},
        bindToController: options.bindings || {},
        restrict: 'E',
        require: options.require
      };

      // Copy annotations (starting with $) over to the DDO
      forEach(options, function(val, key) {
        if (key.charAt(0) === '$') ddo[key] = val;
      });

      return ddo;
    }

    // TODO(pete) remove the following `forEach` before we release 1.6.0
    // The component-router@0.2.0 looks for the annotations on the controller constructor
    // Nothing in Angular looks for annotations on the factory function but we can't remove
    // it from 1.5.x yet.

    // Copy any annotation properties (starting with $) over to the factory and controller constructor functions
    // These could be used by libraries such as the new component router
    forEach(options, function(val, key) {
      if (key.charAt(0) === '$') {
        factory[key] = val;
        // Don't try to copy over annotations to named controller
        if (isFunction(controller)) controller[key] = val;
      }
    });

    factory.$inject = ['$injector'];

    return this.directive(name, factory);
  };


  /**
   * @ngdoc method
   * @name $compileProvider#aHrefSanitizationWhitelist
   * @kind function
   *
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during a[href] sanitization.
   *
   * The sanitization is a security measure aimed at preventing XSS attacks via html links.
   *
   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
  this.aHrefSanitizationWhitelist = function(regexp) {
    if (isDefined(regexp)) {
      $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);
      return this;
    } else {
      return $$sanitizeUriProvider.aHrefSanitizationWhitelist();
    }
  };


  /**
   * @ngdoc method
   * @name $compileProvider#imgSrcSanitizationWhitelist
   * @kind function
   *
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during img[src] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
  this.imgSrcSanitizationWhitelist = function(regexp) {
    if (isDefined(regexp)) {
      $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);
      return this;
    } else {
      return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();
    }
  };

  /**
   * @ngdoc method
   * @name  $compileProvider#debugInfoEnabled
   *
   * @param {boolean=} enabled update the debugInfoEnabled state if provided, otherwise just return the
   * current debugInfoEnabled state
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   *
   * @kind function
   *
   * @description
   * Call this method to enable/disable various debug runtime information in the compiler such as adding
   * binding information and a reference to the current scope on to DOM elements.
   * If enabled, the compiler will add the following to DOM elements that have been bound to the scope
   * * `ng-binding` CSS class
   * * `$binding` data property containing an array of the binding expressions
   *
   * You may want to disable this in production for a significant performance boost. See
   * {@link guide/production#disabling-debug-data Disabling Debug Data} for more.
   *
   * The default value is true.
   */
  var debugInfoEnabled = true;
  this.debugInfoEnabled = function(enabled) {
    if (isDefined(enabled)) {
      debugInfoEnabled = enabled;
      return this;
    }
    return debugInfoEnabled;
  };

  /**
   * @ngdoc method
   * @name  $compileProvider#preAssignBindingsEnabled
   *
   * @param {boolean=} enabled update the preAssignBindingsEnabled state if provided, otherwise just return the
   * current preAssignBindingsEnabled state
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   *
   * @kind function
   *
   * @description
   * Call this method to enable/disable whether directive controllers are assigned bindings before
   * calling the controller's constructor.
   * If enabled (true), the compiler assigns the value of each of the bindings to the
   * properties of the controller object before the constructor of this object is called.
   *
   * If disabled (false), the compiler calls the constructor first before assigning bindings.
   *
   * The default value is true in Angular 1.5.x but will switch to false in Angular 1.6.x.
   */
  var preAssignBindingsEnabled = false;
  this.preAssignBindingsEnabled = function(enabled) {
    if (isDefined(enabled)) {
      preAssignBindingsEnabled = enabled;
      return this;
    }
    return preAssignBindingsEnabled;
  };


  var TTL = 10;
  /**
   * @ngdoc method
   * @name $compileProvider#onChangesTtl
   * @description
   *
   * Sets the number of times `$onChanges` hooks can trigger new changes before giving up and
   * assuming that the model is unstable.
   *
   * The current default is 10 iterations.
   *
   * In complex applications it's possible that dependencies between `$onChanges` hooks and bindings will result
   * in several iterations of calls to these hooks. However if an application needs more than the default 10
   * iterations to stabilize then you should investigate what is causing the model to continuously change during
   * the `$onChanges` hook execution.
   *
   * Increasing the TTL could have performance implications, so you should not change it without proper justification.
   *
   * @param {number} limit The number of `$onChanges` hook iterations.
   * @returns {number|object} the current limit (or `this` if called as a setter for chaining)
   */
  this.onChangesTtl = function(value) {
    if (arguments.length) {
      TTL = value;
      return this;
    }
    return TTL;
  };

  var commentDirectivesEnabledConfig = true;
  /**
   * @ngdoc method
   * @name $compileProvider#commentDirectivesEnabled
   * @description
   *
   * It indicates to the compiler
   * whether or not directives on comments should be compiled.
   * Defaults to `true`.
   *
   * Calling this function with false disables the compilation of directives
   * on comments for the whole application.
   * This results in a compilation performance gain,
   * as the compiler doesn't have to check comments when looking for directives.
   * This should however only be used if you are sure that no comment directives are used in
   * the application (including any 3rd party directives).
   *
   * @param {boolean} enabled `false` if the compiler may ignore directives on comments
   * @returns {boolean|object} the current value (or `this` if called as a setter for chaining)
   */
  this.commentDirectivesEnabled = function(value) {
    if (arguments.length) {
      commentDirectivesEnabledConfig = value;
      return this;
    }
    return commentDirectivesEnabledConfig;
  };


  var cssClassDirectivesEnabledConfig = true;
  /**
   * @ngdoc method
   * @name $compileProvider#cssClassDirectivesEnabled
   * @description
   *
   * It indicates to the compiler
   * whether or not directives on element classes should be compiled.
   * Defaults to `true`.
   *
   * Calling this function with false disables the compilation of directives
   * on element classes for the whole application.
   * This results in a compilation performance gain,
   * as the compiler doesn't have to check element classes when looking for directives.
   * This should however only be used if you are sure that no class directives are used in
   * the application (including any 3rd party directives).
   *
   * @param {boolean} enabled `false` if the compiler may ignore directives on element classes
   * @returns {boolean|object} the current value (or `this` if called as a setter for chaining)
   */
  this.cssClassDirectivesEnabled = function(value) {
    if (arguments.length) {
      cssClassDirectivesEnabledConfig = value;
      return this;
    }
    return cssClassDirectivesEnabledConfig;
  };

  this.$get = [
            '$injector', '$interpolate', '$exceptionHandler', '$templateRequest', '$parse',
            '$controller', '$rootScope', '$sce', '$animate', '$$sanitizeUri',
    function($injector,   $interpolate,   $exceptionHandler,   $templateRequest,   $parse,
             $controller,   $rootScope,   $sce,   $animate,   $$sanitizeUri) {

    var SIMPLE_ATTR_NAME = /^\w/;
    var specialAttrHolder = window.document.createElement('div');


    var commentDirectivesEnabled = commentDirectivesEnabledConfig;
    var cssClassDirectivesEnabled = cssClassDirectivesEnabledConfig;


    var onChangesTtl = TTL;
    // The onChanges hooks should all be run together in a single digest
    // When changes occur, the call to trigger their hooks will be added to this queue
    var onChangesQueue;

    // This function is called in a $$postDigest to trigger all the onChanges hooks in a single digest
    function flushOnChangesQueue() {
      try {
        if (!(--onChangesTtl)) {
          // We have hit the TTL limit so reset everything
          onChangesQueue = undefined;
          throw $compileMinErr('infchng', '{0} $onChanges() iterations reached. Aborting!\n', TTL);
        }
        // We must run this hook in an apply since the $$postDigest runs outside apply
        $rootScope.$apply(function() {
          var errors = [];
          for (var i = 0, ii = onChangesQueue.length; i < ii; ++i) {
            try {
              onChangesQueue[i]();
            } catch (e) {
              errors.push(e);
            }
          }
          // Reset the queue to trigger a new schedule next time there is a change
          onChangesQueue = undefined;
          if (errors.length) {
            throw errors;
          }
        });
      } finally {
        onChangesTtl++;
      }
    }


    function Attributes(element, attributesToCopy) {
      if (attributesToCopy) {
        var keys = Object.keys(attributesToCopy);
        var i, l, key;

        for (i = 0, l = keys.length; i < l; i++) {
          key = keys[i];
          this[key] = attributesToCopy[key];
        }
      } else {
        this.$attr = {};
      }

      this.$$element = element;
    }

    Attributes.prototype = {
      /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$normalize
       * @kind function
       *
       * @description
       * Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with `x-` or
       * `data-`) to its normalized, camelCase form.
       *
       * Also there is special case for Moz prefix starting with upper case letter.
       *
       * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
       *
       * @param {string} name Name to normalize
       */
      $normalize: directiveNormalize,


      /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$addClass
       * @kind function
       *
       * @description
       * Adds the CSS class value specified by the classVal parameter to the element. If animations
       * are enabled then an animation will be triggered for the class addition.
       *
       * @param {string} classVal The className value that will be added to the element
       */
      $addClass: function(classVal) {
        if (classVal && classVal.length > 0) {
          $animate.addClass(this.$$element, classVal);
        }
      },

      /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$removeClass
       * @kind function
       *
       * @description
       * Removes the CSS class value specified by the classVal parameter from the element. If
       * animations are enabled then an animation will be triggered for the class removal.
       *
       * @param {string} classVal The className value that will be removed from the element
       */
      $removeClass: function(classVal) {
        if (classVal && classVal.length > 0) {
          $animate.removeClass(this.$$element, classVal);
        }
      },

      /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$updateClass
       * @kind function
       *
       * @description
       * Adds and removes the appropriate CSS class values to the element based on the difference
       * between the new and old CSS class values (specified as newClasses and oldClasses).
       *
       * @param {string} newClasses The current CSS className value
       * @param {string} oldClasses The former CSS className value
       */
      $updateClass: function(newClasses, oldClasses) {
        var toAdd = tokenDifference(newClasses, oldClasses);
        if (toAdd && toAdd.length) {
          $animate.addClass(this.$$element, toAdd);
        }

        var toRemove = tokenDifference(oldClasses, newClasses);
        if (toRemove && toRemove.length) {
          $animate.removeClass(this.$$element, toRemove);
        }
      },

      /**
       * Set a normalized attribute on the element in a way such that all directives
       * can share the attribute. This function properly handles boolean attributes.
       * @param {string} key Normalized key. (ie ngAttribute)
       * @param {string|boolean} value The value to set. If `null` attribute will be deleted.
       * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.
       *     Defaults to true.
       * @param {string=} attrName Optional none normalized name. Defaults to key.
       */
      $set: function(key, value, writeAttr, attrName) {
        // TODO: decide whether or not to throw an error if "class"
        //is set through this function since it may cause $updateClass to
        //become unstable.

        var node = this.$$element[0],
            booleanKey = getBooleanAttrName(node, key),
            aliasedKey = getAliasedAttrName(key),
            observer = key,
            nodeName;

        if (booleanKey) {
          this.$$element.prop(key, value);
          attrName = booleanKey;
        } else if (aliasedKey) {
          this[aliasedKey] = value;
          observer = aliasedKey;
        }

        this[key] = value;

        // translate normalized key to actual key
        if (attrName) {
          this.$attr[key] = attrName;
        } else {
          attrName = this.$attr[key];
          if (!attrName) {
            this.$attr[key] = attrName = snake_case(key, '-');
          }
        }

        nodeName = nodeName_(this.$$element);

        if ((nodeName === 'a' && (key === 'href' || key === 'xlinkHref')) ||
            (nodeName === 'img' && key === 'src')) {
          // sanitize a[href] and img[src] values
          this[key] = value = $$sanitizeUri(value, key === 'src');
        } else if (nodeName === 'img' && key === 'srcset' && isDefined(value)) {
          // sanitize img[srcset] values
          var result = '';

          // first check if there are spaces because it's not the same pattern
          var trimmedSrcset = trim(value);
          //                (   999x   ,|   999w   ,|   ,|,   )
          var srcPattern = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/;
          var pattern = /\s/.test(trimmedSrcset) ? srcPattern : /(,)/;

          // split srcset into tuple of uri and descriptor except for the last item
          var rawUris = trimmedSrcset.split(pattern);

          // for each tuples
          var nbrUrisWith2parts = Math.floor(rawUris.length / 2);
          for (var i = 0; i < nbrUrisWith2parts; i++) {
            var innerIdx = i * 2;
            // sanitize the uri
            result += $$sanitizeUri(trim(rawUris[innerIdx]), true);
            // add the descriptor
            result += (' ' + trim(rawUris[innerIdx + 1]));
          }

          // split the last item into uri and descriptor
          var lastTuple = trim(rawUris[i * 2]).split(/\s/);

          // sanitize the last uri
          result += $$sanitizeUri(trim(lastTuple[0]), true);

          // and add the last descriptor if any
          if (lastTuple.length === 2) {
            result += (' ' + trim(lastTuple[1]));
          }
          this[key] = value = result;
        }

        if (writeAttr !== false) {
          if (value === null || isUndefined(value)) {
            this.$$element.removeAttr(attrName);
          } else {
            if (SIMPLE_ATTR_NAME.test(attrName)) {
              this.$$element.attr(attrName, value);
            } else {
              setSpecialAttr(this.$$element[0], attrName, value);
            }
          }
        }

        // fire observers
        var $$observers = this.$$observers;
        if ($$observers) {
          forEach($$observers[observer], function(fn) {
            try {
              fn(value);
            } catch (e) {
              $exceptionHandler(e);
            }
          });
        }
      },


      /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$observe
       * @kind function
       *
       * @description
       * Observes an interpolated attribute.
       *
       * The observer function will be invoked once during the next `$digest` following
       * compilation. The observer is then invoked whenever the interpolated value
       * changes.
       *
       * @param {string} key Normalized key. (ie ngAttribute) .
       * @param {function(interpolatedValue)} fn Function that will be called whenever
                the interpolated value of the attribute changes.
       *        See the {@link guide/interpolation#how-text-and-attribute-bindings-work Interpolation
       *        guide} for more info.
       * @returns {function()} Returns a deregistration function for this observer.
       */
      $observe: function(key, fn) {
        var attrs = this,
            $$observers = (attrs.$$observers || (attrs.$$observers = createMap())),
            listeners = ($$observers[key] || ($$observers[key] = []));

        listeners.push(fn);
        $rootScope.$evalAsync(function() {
          if (!listeners.$$inter && attrs.hasOwnProperty(key) && !isUndefined(attrs[key])) {
            // no one registered attribute interpolation function, so lets call it manually
            fn(attrs[key]);
          }
        });

        return function() {
          arrayRemove(listeners, fn);
        };
      }
    };

    function setSpecialAttr(element, attrName, value) {
      // Attributes names that do not start with letters (such as `(click)`) cannot be set using `setAttribute`
      // so we have to jump through some hoops to get such an attribute
      // https://github.com/angular/angular.js/pull/13318
      specialAttrHolder.innerHTML = '<span ' + attrName + '>';
      var attributes = specialAttrHolder.firstChild.attributes;
      var attribute = attributes[0];
      // We have to remove the attribute from its container element before we can add it to the destination element
      attributes.removeNamedItem(attribute.name);
      attribute.value = value;
      element.attributes.setNamedItem(attribute);
    }

    function safeAddClass($element, className) {
      try {
        $element.addClass(className);
      } catch (e) {
        // ignore, since it means that we are trying to set class on
        // SVG element, where class name is read-only.
      }
    }


    var startSymbol = $interpolate.startSymbol(),
        endSymbol = $interpolate.endSymbol(),
        denormalizeTemplate = (startSymbol === '{{' && endSymbol  === '}}')
            ? identity
            : function denormalizeTemplate(template) {
              return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);
        },
        NG_ATTR_BINDING = /^ngAttr[A-Z]/;
    var MULTI_ELEMENT_DIR_RE = /^(.+)Start$/;

    compile.$$addBindingInfo = debugInfoEnabled ? function $$addBindingInfo($element, binding) {
      var bindings = $element.data('$binding') || [];

      if (isArray(binding)) {
        bindings = bindings.concat(binding);
      } else {
        bindings.push(binding);
      }

      $element.data('$binding', bindings);
    } : noop;

    compile.$$addBindingClass = debugInfoEnabled ? function $$addBindingClass($element) {
      safeAddClass($element, 'ng-binding');
    } : noop;

    compile.$$addScopeInfo = debugInfoEnabled ? function $$addScopeInfo($element, scope, isolated, noTemplate) {
      var dataName = isolated ? (noTemplate ? '$isolateScopeNoTemplate' : '$isolateScope') : '$scope';
      $element.data(dataName, scope);
    } : noop;

    compile.$$addScopeClass = debugInfoEnabled ? function $$addScopeClass($element, isolated) {
      safeAddClass($element, isolated ? 'ng-isolate-scope' : 'ng-scope');
    } : noop;

    compile.$$createComment = function(directiveName, comment) {
      var content = '';
      if (debugInfoEnabled) {
        content = ' ' + (directiveName || '') + ': ';
        if (comment) content += comment + ' ';
      }
      return window.document.createComment(content);
    };

    return compile;

    //================================

    function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective,
                        previousCompileContext) {
      if (!($compileNodes instanceof jqLite)) {
        // jquery always rewraps, whereas we need to preserve the original selector so that we can
        // modify it.
        $compileNodes = jqLite($compileNodes);
      }
      var compositeLinkFn =
              compileNodes($compileNodes, transcludeFn, $compileNodes,
                           maxPriority, ignoreDirective, previousCompileContext);
      compile.$$addScopeClass($compileNodes);
      var namespace = null;
      return function publicLinkFn(scope, cloneConnectFn, options) {
        if (!$compileNodes) {
          throw $compileMinErr('multilink', 'This element has already been linked.');
        }
        assertArg(scope, 'scope');

        if (previousCompileContext && previousCompileContext.needsNewScope) {
          // A parent directive did a replace and a directive on this element asked
          // for transclusion, which caused us to lose a layer of element on which
          // we could hold the new transclusion scope, so we will create it manually
          // here.
          scope = scope.$parent.$new();
        }

        options = options || {};
        var parentBoundTranscludeFn = options.parentBoundTranscludeFn,
          transcludeControllers = options.transcludeControllers,
          futureParentElement = options.futureParentElement;

        // When `parentBoundTranscludeFn` is passed, it is a
        // `controllersBoundTransclude` function (it was previously passed
        // as `transclude` to directive.link) so we must unwrap it to get
        // its `boundTranscludeFn`
        if (parentBoundTranscludeFn && parentBoundTranscludeFn.$$boundTransclude) {
          parentBoundTranscludeFn = parentBoundTranscludeFn.$$boundTransclude;
        }

        if (!namespace) {
          namespace = detectNamespaceForChildElements(futureParentElement);
        }
        var $linkNode;
        if (namespace !== 'html') {
          // When using a directive with replace:true and templateUrl the $compileNodes
          // (or a child element inside of them)
          // might change, so we need to recreate the namespace adapted compileNodes
          // for call to the link function.
          // Note: This will already clone the nodes...
          $linkNode = jqLite(
            wrapTemplate(namespace, jqLite('<div>').append($compileNodes).html())
          );
        } else if (cloneConnectFn) {
          // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart
          // and sometimes changes the structure of the DOM.
          $linkNode = JQLitePrototype.clone.call($compileNodes);
        } else {
          $linkNode = $compileNodes;
        }

        if (transcludeControllers) {
          for (var controllerName in transcludeControllers) {
            $linkNode.data('$' + controllerName + 'Controller', transcludeControllers[controllerName].instance);
          }
        }

        compile.$$addScopeInfo($linkNode, scope);

        if (cloneConnectFn) cloneConnectFn($linkNode, scope);
        if (compositeLinkFn) compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn);

        if (!cloneConnectFn) {
          $compileNodes = compositeLinkFn = null;
        }
        return $linkNode;
      };
    }

    function detectNamespaceForChildElements(parentElement) {
      // TODO: Make this detect MathML as well...
      var node = parentElement && parentElement[0];
      if (!node) {
        return 'html';
      } else {
        return nodeName_(node) !== 'foreignobject' && toString.call(node).match(/SVG/) ? 'svg' : 'html';
      }
    }

    /**
     * Compile function matches each node in nodeList against the directives. Once all directives
     * for a particular node are collected their compile functions are executed. The compile
     * functions return values - the linking functions - are combined into a composite linking
     * function, which is the a linking function for the node.
     *
     * @param {NodeList} nodeList an array of nodes or NodeList to compile
     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
     *        scope argument is auto-generated to the new child of the transcluded parent scope.
     * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then
     *        the rootElement must be set the jqLite collection of the compile root. This is
     *        needed so that the jqLite collection items can be replaced with widgets.
     * @param {number=} maxPriority Max directive priority.
     * @returns {Function} A composite linking function of all of the matched directives or null.
     */
    function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective,
                            previousCompileContext) {
      var linkFns = [],
          // `nodeList` can be either an element's `.childNodes` (live NodeList)
          // or a jqLite/jQuery collection or an array
          notLiveList = isArray(nodeList) || (nodeList instanceof jqLite),
          attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound, nodeLinkFnFound;


      for (var i = 0; i < nodeList.length; i++) {
        attrs = new Attributes();

        // Support: IE 11 only
        // Workaround for #11781 and #14924
        if (msie === 11) {
          mergeConsecutiveTextNodes(nodeList, i, notLiveList);
        }

        // We must always refer to `nodeList[i]` hereafter,
        // since the nodes can be replaced underneath us.
        directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined,
                                        ignoreDirective);

        nodeLinkFn = (directives.length)
            ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement,
                                      null, [], [], previousCompileContext)
            : null;

        if (nodeLinkFn && nodeLinkFn.scope) {
          compile.$$addScopeClass(attrs.$$element);
        }

        childLinkFn = (nodeLinkFn && nodeLinkFn.terminal ||
                      !(childNodes = nodeList[i].childNodes) ||
                      !childNodes.length)
            ? null
            : compileNodes(childNodes,
                 nodeLinkFn ? (
                  (nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement)
                     && nodeLinkFn.transclude) : transcludeFn);

        if (nodeLinkFn || childLinkFn) {
          linkFns.push(i, nodeLinkFn, childLinkFn);
          linkFnFound = true;
          nodeLinkFnFound = nodeLinkFnFound || nodeLinkFn;
        }

        //use the previous context only for the first element in the virtual group
        previousCompileContext = null;
      }

      // return a linking function if we have found anything, null otherwise
      return linkFnFound ? compositeLinkFn : null;

      function compositeLinkFn(scope, nodeList, $rootElement, parentBoundTranscludeFn) {
        var nodeLinkFn, childLinkFn, node, childScope, i, ii, idx, childBoundTranscludeFn;
        var stableNodeList;


        if (nodeLinkFnFound) {
          // copy nodeList so that if a nodeLinkFn removes or adds an element at this DOM level our
          // offsets don't get screwed up
          var nodeListLength = nodeList.length;
          stableNodeList = new Array(nodeListLength);

          // create a sparse array by only copying the elements which have a linkFn
          for (i = 0; i < linkFns.length; i += 3) {
            idx = linkFns[i];
            stableNodeList[idx] = nodeList[idx];
          }
        } else {
          stableNodeList = nodeList;
        }

        for (i = 0, ii = linkFns.length; i < ii;) {
          node = stableNodeList[linkFns[i++]];
          nodeLinkFn = linkFns[i++];
          childLinkFn = linkFns[i++];

          if (nodeLinkFn) {
            if (nodeLinkFn.scope) {
              childScope = scope.$new();
              compile.$$addScopeInfo(jqLite(node), childScope);
            } else {
              childScope = scope;
            }

            if (nodeLinkFn.transcludeOnThisElement) {
              childBoundTranscludeFn = createBoundTranscludeFn(
                  scope, nodeLinkFn.transclude, parentBoundTranscludeFn);

            } else if (!nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn) {
              childBoundTranscludeFn = parentBoundTranscludeFn;

            } else if (!parentBoundTranscludeFn && transcludeFn) {
              childBoundTranscludeFn = createBoundTranscludeFn(scope, transcludeFn);

            } else {
              childBoundTranscludeFn = null;
            }

            nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn);

          } else if (childLinkFn) {
            childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn);
          }
        }
      }
    }

    function mergeConsecutiveTextNodes(nodeList, idx, notLiveList) {
      var node = nodeList[idx];
      var parent = node.parentNode;
      var sibling;

      if (node.nodeType !== NODE_TYPE_TEXT) {
        return;
      }

      while (true) {
        sibling = parent ? node.nextSibling : nodeList[idx + 1];
        if (!sibling || sibling.nodeType !== NODE_TYPE_TEXT) {
          break;
        }

        node.nodeValue = node.nodeValue + sibling.nodeValue;

        if (sibling.parentNode) {
          sibling.parentNode.removeChild(sibling);
        }
        if (notLiveList && sibling === nodeList[idx + 1]) {
          nodeList.splice(idx + 1, 1);
        }
      }
    }

    function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn) {
      function boundTranscludeFn(transcludedScope, cloneFn, controllers, futureParentElement, containingScope) {

        if (!transcludedScope) {
          transcludedScope = scope.$new(false, containingScope);
          transcludedScope.$$transcluded = true;
        }

        return transcludeFn(transcludedScope, cloneFn, {
          parentBoundTranscludeFn: previousBoundTranscludeFn,
          transcludeControllers: controllers,
          futureParentElement: futureParentElement
        });
      }

      // We need  to attach the transclusion slots onto the `boundTranscludeFn`
      // so that they are available inside the `controllersBoundTransclude` function
      var boundSlots = boundTranscludeFn.$$slots = createMap();
      for (var slotName in transcludeFn.$$slots) {
        if (transcludeFn.$$slots[slotName]) {
          boundSlots[slotName] = createBoundTranscludeFn(scope, transcludeFn.$$slots[slotName], previousBoundTranscludeFn);
        } else {
          boundSlots[slotName] = null;
        }
      }

      return boundTranscludeFn;
    }

    /**
     * Looks for directives on the given node and adds them to the directive collection which is
     * sorted.
     *
     * @param node Node to search.
     * @param directives An array to which the directives are added to. This array is sorted before
     *        the function returns.
     * @param attrs The shared attrs object which is used to populate the normalized attributes.
     * @param {number=} maxPriority Max directive priority.
     */
    function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
      var nodeType = node.nodeType,
          attrsMap = attrs.$attr,
          match,
          nodeName,
          className;

      switch (nodeType) {
        case NODE_TYPE_ELEMENT: /* Element */

          nodeName = nodeName_(node);

          // use the node name: <directive>
          addDirective(directives,
              directiveNormalize(nodeName), 'E', maxPriority, ignoreDirective);

          // iterate over the attributes
          for (var attr, name, nName, ngAttrName, value, isNgAttr, nAttrs = node.attributes,
                   j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {
            var attrStartName = false;
            var attrEndName = false;

            attr = nAttrs[j];
            name = attr.name;
            value = attr.value;

            // support ngAttr attribute binding
            ngAttrName = directiveNormalize(name);
            isNgAttr = NG_ATTR_BINDING.test(ngAttrName);
            if (isNgAttr) {
              name = name.replace(PREFIX_REGEXP, '')
                .substr(8).replace(/_(.)/g, function(match, letter) {
                  return letter.toUpperCase();
                });
            }

            var multiElementMatch = ngAttrName.match(MULTI_ELEMENT_DIR_RE);
            if (multiElementMatch && directiveIsMultiElement(multiElementMatch[1])) {
              attrStartName = name;
              attrEndName = name.substr(0, name.length - 5) + 'end';
              name = name.substr(0, name.length - 6);
            }

            nName = directiveNormalize(name.toLowerCase());
            attrsMap[nName] = name;
            if (isNgAttr || !attrs.hasOwnProperty(nName)) {
                attrs[nName] = value;
                if (getBooleanAttrName(node, nName)) {
                  attrs[nName] = true; // presence means true
                }
            }
            addAttrInterpolateDirective(node, directives, value, nName, isNgAttr);
            addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName,
                          attrEndName);
          }

          if (nodeName === 'input' && node.getAttribute('type') === 'hidden') {
            // Hidden input elements can have strange behaviour when navigating back to the page
            // This tells the browser not to try to cache and reinstate previous values
            node.setAttribute('autocomplete', 'off');
          }

          // use class as directive
          if (!cssClassDirectivesEnabled) break;
          className = node.className;
          if (isObject(className)) {
              // Maybe SVGAnimatedString
              className = className.animVal;
          }
          if (isString(className) && className !== '') {
            while ((match = CLASS_DIRECTIVE_REGEXP.exec(className))) {
              nName = directiveNormalize(match[2]);
              if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {
                attrs[nName] = trim(match[3]);
              }
              className = className.substr(match.index + match[0].length);
            }
          }
          break;
        case NODE_TYPE_TEXT: /* Text Node */
          addTextInterpolateDirective(directives, node.nodeValue);
          break;
        case NODE_TYPE_COMMENT: /* Comment */
          if (!commentDirectivesEnabled) break;
          collectCommentDirectives(node, directives, attrs, maxPriority, ignoreDirective);
          break;
      }

      directives.sort(byPriority);
      return directives;
    }

    function collectCommentDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
      // function created because of performance, try/catch disables
      // the optimization of the whole function #14848
      try {
        var match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);
        if (match) {
          var nName = directiveNormalize(match[1]);
          if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {
            attrs[nName] = trim(match[2]);
          }
        }
      } catch (e) {
        // turns out that under some circumstances IE9 throws errors when one attempts to read
        // comment's node value.
        // Just ignore it and continue. (Can't seem to reproduce in test case.)
      }
    }

    /**
     * Given a node with a directive-start it collects all of the siblings until it finds
     * directive-end.
     * @param node
     * @param attrStart
     * @param attrEnd
     * @returns {*}
     */
    function groupScan(node, attrStart, attrEnd) {
      var nodes = [];
      var depth = 0;
      if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {
        do {
          if (!node) {
            throw $compileMinErr('uterdir',
                      'Unterminated attribute, found \'{0}\' but no matching \'{1}\' found.',
                      attrStart, attrEnd);
          }
          if (node.nodeType === NODE_TYPE_ELEMENT) {
            if (node.hasAttribute(attrStart)) depth++;
            if (node.hasAttribute(attrEnd)) depth--;
          }
          nodes.push(node);
          node = node.nextSibling;
        } while (depth > 0);
      } else {
        nodes.push(node);
      }

      return jqLite(nodes);
    }

    /**
     * Wrapper for linking function which converts normal linking function into a grouped
     * linking function.
     * @param linkFn
     * @param attrStart
     * @param attrEnd
     * @returns {Function}
     */
    function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {
      return function groupedElementsLink(scope, element, attrs, controllers, transcludeFn) {
        element = groupScan(element[0], attrStart, attrEnd);
        return linkFn(scope, element, attrs, controllers, transcludeFn);
      };
    }

    /**
     * A function generator that is used to support both eager and lazy compilation
     * linking function.
     * @param eager
     * @param $compileNodes
     * @param transcludeFn
     * @param maxPriority
     * @param ignoreDirective
     * @param previousCompileContext
     * @returns {Function}
     */
    function compilationGenerator(eager, $compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext) {
      var compiled;

      if (eager) {
        return compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext);
      }
      return /** @this */ function lazyCompilation() {
        if (!compiled) {
          compiled = compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext);

          // Null out all of these references in order to make them eligible for garbage collection
          // since this is a potentially long lived closure
          $compileNodes = transcludeFn = previousCompileContext = null;
        }
        return compiled.apply(this, arguments);
      };
    }

    /**
     * Once the directives have been collected, their compile functions are executed. This method
     * is responsible for inlining directive templates as well as terminating the application
     * of the directives if the terminal directive has been reached.
     *
     * @param {Array} directives Array of collected directives to execute their compile function.
     *        this needs to be pre-sorted by priority order.
     * @param {Node} compileNode The raw DOM node to apply the compile functions to
     * @param {Object} templateAttrs The shared attribute function
     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
     *                                                  scope argument is auto-generated to the new
     *                                                  child of the transcluded parent scope.
     * @param {JQLite} jqCollection If we are working on the root of the compile tree then this
     *                              argument has the root jqLite array so that we can replace nodes
     *                              on it.
     * @param {Object=} originalReplaceDirective An optional directive that will be ignored when
     *                                           compiling the transclusion.
     * @param {Array.<Function>} preLinkFns
     * @param {Array.<Function>} postLinkFns
     * @param {Object} previousCompileContext Context used for previous compilation of the current
     *                                        node
     * @returns {Function} linkFn
     */
    function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn,
                                   jqCollection, originalReplaceDirective, preLinkFns, postLinkFns,
                                   previousCompileContext) {
      previousCompileContext = previousCompileContext || {};

      var terminalPriority = -Number.MAX_VALUE,
          newScopeDirective = previousCompileContext.newScopeDirective,
          controllerDirectives = previousCompileContext.controllerDirectives,
          newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective,
          templateDirective = previousCompileContext.templateDirective,
          nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective,
          hasTranscludeDirective = false,
          hasTemplate = false,
          hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective,
          $compileNode = templateAttrs.$$element = jqLite(compileNode),
          directive,
          directiveName,
          $template,
          replaceDirective = originalReplaceDirective,
          childTranscludeFn = transcludeFn,
          linkFn,
          didScanForMultipleTransclusion = false,
          mightHaveMultipleTransclusionError = false,
          directiveValue;

      // executes all directives on the current element
      for (var i = 0, ii = directives.length; i < ii; i++) {
        directive = directives[i];
        var attrStart = directive.$$start;
        var attrEnd = directive.$$end;

        // collect multiblock sections
        if (attrStart) {
          $compileNode = groupScan(compileNode, attrStart, attrEnd);
        }
        $template = undefined;

        if (terminalPriority > directive.priority) {
          break; // prevent further processing of directives
        }

        directiveValue = directive.scope;

        if (directiveValue) {

          // skip the check for directives with async templates, we'll check the derived sync
          // directive when the template arrives
          if (!directive.templateUrl) {
            if (isObject(directiveValue)) {
              // This directive is trying to add an isolated scope.
              // Check that there is no scope of any kind already
              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective || newScopeDirective,
                                directive, $compileNode);
              newIsolateScopeDirective = directive;
            } else {
              // This directive is trying to add a child scope.
              // Check that there is no isolated scope already
              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective, directive,
                                $compileNode);
            }
          }

          newScopeDirective = newScopeDirective || directive;
        }

        directiveName = directive.name;

        // If we encounter a condition that can result in transclusion on the directive,
        // then scan ahead in the remaining directives for others that may cause a multiple
        // transclusion error to be thrown during the compilation process.  If a matching directive
        // is found, then we know that when we encounter a transcluded directive, we need to eagerly
        // compile the `transclude` function rather than doing it lazily in order to throw
        // exceptions at the correct time
        if (!didScanForMultipleTransclusion && ((directive.replace && (directive.templateUrl || directive.template))
            || (directive.transclude && !directive.$$tlb))) {
                var candidateDirective;

                for (var scanningIndex = i + 1; (candidateDirective = directives[scanningIndex++]);) {
                    if ((candidateDirective.transclude && !candidateDirective.$$tlb)
                        || (candidateDirective.replace && (candidateDirective.templateUrl || candidateDirective.template))) {
                        mightHaveMultipleTransclusionError = true;
                        break;
                    }
                }

                didScanForMultipleTransclusion = true;
        }

        if (!directive.templateUrl && directive.controller) {
          controllerDirectives = controllerDirectives || createMap();
          assertNoDuplicate('\'' + directiveName + '\' controller',
              controllerDirectives[directiveName], directive, $compileNode);
          controllerDirectives[directiveName] = directive;
        }

        directiveValue = directive.transclude;

        if (directiveValue) {
          hasTranscludeDirective = true;

          // Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.
          // This option should only be used by directives that know how to safely handle element transclusion,
          // where the transcluded nodes are added or replaced after linking.
          if (!directive.$$tlb) {
            assertNoDuplicate('transclusion', nonTlbTranscludeDirective, directive, $compileNode);
            nonTlbTranscludeDirective = directive;
          }

          if (directiveValue === 'element') {
            hasElementTranscludeDirective = true;
            terminalPriority = directive.priority;
            $template = $compileNode;
            $compileNode = templateAttrs.$$element =
                jqLite(compile.$$createComment(directiveName, templateAttrs[directiveName]));
            compileNode = $compileNode[0];
            replaceWith(jqCollection, sliceArgs($template), compileNode);

            // Support: Chrome < 50
            // https://github.com/angular/angular.js/issues/14041

            // In the versions of V8 prior to Chrome 50, the document fragment that is created
            // in the `replaceWith` function is improperly garbage collected despite still
            // being referenced by the `parentNode` property of all of the child nodes.  By adding
            // a reference to the fragment via a different property, we can avoid that incorrect
            // behavior.
            // TODO: remove this line after Chrome 50 has been released
            $template[0].$$parentNode = $template[0].parentNode;

            childTranscludeFn = compilationGenerator(mightHaveMultipleTransclusionError, $template, transcludeFn, terminalPriority,
                                        replaceDirective && replaceDirective.name, {
                                          // Don't pass in:
                                          // - controllerDirectives - otherwise we'll create duplicates controllers
                                          // - newIsolateScopeDirective or templateDirective - combining templates with
                                          //   element transclusion doesn't make sense.
                                          //
                                          // We need only nonTlbTranscludeDirective so that we prevent putting transclusion
                                          // on the same element more than once.
                                          nonTlbTranscludeDirective: nonTlbTranscludeDirective
                                        });
          } else {

            var slots = createMap();

            if (!isObject(directiveValue)) {
              $template = jqLite(jqLiteClone(compileNode)).contents();
            } else {

              // We have transclusion slots,
              // collect them up, compile them and store their transclusion functions
              $template = [];

              var slotMap = createMap();
              var filledSlots = createMap();

              // Parse the element selectors
              forEach(directiveValue, function(elementSelector, slotName) {
                // If an element selector starts with a ? then it is optional
                var optional = (elementSelector.charAt(0) === '?');
                elementSelector = optional ? elementSelector.substring(1) : elementSelector;

                slotMap[elementSelector] = slotName;

                // We explicitly assign `null` since this implies that a slot was defined but not filled.
                // Later when calling boundTransclusion functions with a slot name we only error if the
                // slot is `undefined`
                slots[slotName] = null;

                // filledSlots contains `true` for all slots that are either optional or have been
                // filled. This is used to check that we have not missed any required slots
                filledSlots[slotName] = optional;
              });

              // Add the matching elements into their slot
              forEach($compileNode.contents(), function(node) {
                var slotName = slotMap[directiveNormalize(nodeName_(node))];
                if (slotName) {
                  filledSlots[slotName] = true;
                  slots[slotName] = slots[slotName] || [];
                  slots[slotName].push(node);
                } else {
                  $template.push(node);
                }
              });

              // Check for required slots that were not filled
              forEach(filledSlots, function(filled, slotName) {
                if (!filled) {
                  throw $compileMinErr('reqslot', 'Required transclusion slot `{0}` was not filled.', slotName);
                }
              });

              for (var slotName in slots) {
                if (slots[slotName]) {
                  // Only define a transclusion function if the slot was filled
                  slots[slotName] = compilationGenerator(mightHaveMultipleTransclusionError, slots[slotName], transcludeFn);
                }
              }
            }

            $compileNode.empty(); // clear contents
            childTranscludeFn = compilationGenerator(mightHaveMultipleTransclusionError, $template, transcludeFn, undefined,
                undefined, { needsNewScope: directive.$$isolateScope || directive.$$newScope});
            childTranscludeFn.$$slots = slots;
          }
        }

        if (directive.template) {
          hasTemplate = true;
          assertNoDuplicate('template', templateDirective, directive, $compileNode);
          templateDirective = directive;

          directiveValue = (isFunction(directive.template))
              ? directive.template($compileNode, templateAttrs)
              : directive.template;

          directiveValue = denormalizeTemplate(directiveValue);

          if (directive.replace) {
            replaceDirective = directive;
            if (jqLiteIsTextNode(directiveValue)) {
              $template = [];
            } else {
              $template = removeComments(wrapTemplate(directive.templateNamespace, trim(directiveValue)));
            }
            compileNode = $template[0];

            if ($template.length !== 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
              throw $compileMinErr('tplrt',
                  'Template for directive \'{0}\' must have exactly one root element. {1}',
                  directiveName, '');
            }

            replaceWith(jqCollection, $compileNode, compileNode);

            var newTemplateAttrs = {$attr: {}};

            // combine directives from the original node and from the template:
            // - take the array of directives for this element
            // - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)
            // - collect directives from the template and sort them by priority
            // - combine directives as: processed + template + unprocessed
            var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);
            var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));

            if (newIsolateScopeDirective || newScopeDirective) {
              // The original directive caused the current element to be replaced but this element
              // also needs to have a new scope, so we need to tell the template directives
              // that they would need to get their scope from further up, if they require transclusion
              markDirectiveScope(templateDirectives, newIsolateScopeDirective, newScopeDirective);
            }
            directives = directives.concat(templateDirectives).concat(unprocessedDirectives);
            mergeTemplateAttributes(templateAttrs, newTemplateAttrs);

            ii = directives.length;
          } else {
            $compileNode.html(directiveValue);
          }
        }

        if (directive.templateUrl) {
          hasTemplate = true;
          assertNoDuplicate('template', templateDirective, directive, $compileNode);
          templateDirective = directive;

          if (directive.replace) {
            replaceDirective = directive;
          }

          // eslint-disable-next-line no-func-assign
          nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode,
              templateAttrs, jqCollection, hasTranscludeDirective && childTranscludeFn, preLinkFns, postLinkFns, {
                controllerDirectives: controllerDirectives,
                newScopeDirective: (newScopeDirective !== directive) && newScopeDirective,
                newIsolateScopeDirective: newIsolateScopeDirective,
                templateDirective: templateDirective,
                nonTlbTranscludeDirective: nonTlbTranscludeDirective
              });
          ii = directives.length;
        } else if (directive.compile) {
          try {
            linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);
            var context = directive.$$originalDirective || directive;
            if (isFunction(linkFn)) {
              addLinkFns(null, bind(context, linkFn), attrStart, attrEnd);
            } else if (linkFn) {
              addLinkFns(bind(context, linkFn.pre), bind(context, linkFn.post), attrStart, attrEnd);
            }
          } catch (e) {
            $exceptionHandler(e, startingTag($compileNode));
          }
        }

        if (directive.terminal) {
          nodeLinkFn.terminal = true;
          terminalPriority = Math.max(terminalPriority, directive.priority);
        }

      }

      nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;
      nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective;
      nodeLinkFn.templateOnThisElement = hasTemplate;
      nodeLinkFn.transclude = childTranscludeFn;

      previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;

      // might be normal or delayed nodeLinkFn depending on if templateUrl is present
      return nodeLinkFn;

      ////////////////////

      function addLinkFns(pre, post, attrStart, attrEnd) {
        if (pre) {
          if (attrStart) pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);
          pre.require = directive.require;
          pre.directiveName = directiveName;
          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
            pre = cloneAndAnnotateFn(pre, {isolateScope: true});
          }
          preLinkFns.push(pre);
        }
        if (post) {
          if (attrStart) post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);
          post.require = directive.require;
          post.directiveName = directiveName;
          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
            post = cloneAndAnnotateFn(post, {isolateScope: true});
          }
          postLinkFns.push(post);
        }
      }

      function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn) {
        var i, ii, linkFn, isolateScope, controllerScope, elementControllers, transcludeFn, $element,
            attrs, scopeBindingInfo;

        if (compileNode === linkNode) {
          attrs = templateAttrs;
          $element = templateAttrs.$$element;
        } else {
          $element = jqLite(linkNode);
          attrs = new Attributes($element, templateAttrs);
        }

        controllerScope = scope;
        if (newIsolateScopeDirective) {
          isolateScope = scope.$new(true);
        } else if (newScopeDirective) {
          controllerScope = scope.$parent;
        }

        if (boundTranscludeFn) {
          // track `boundTranscludeFn` so it can be unwrapped if `transcludeFn`
          // is later passed as `parentBoundTranscludeFn` to `publicLinkFn`
          transcludeFn = controllersBoundTransclude;
          transcludeFn.$$boundTransclude = boundTranscludeFn;
          // expose the slots on the `$transclude` function
          transcludeFn.isSlotFilled = function(slotName) {
            return !!boundTranscludeFn.$$slots[slotName];
          };
        }

        if (controllerDirectives) {
          elementControllers = setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope, newIsolateScopeDirective);
        }

        if (newIsolateScopeDirective) {
          // Initialize isolate scope bindings for new isolate scope directive.
          compile.$$addScopeInfo($element, isolateScope, true, !(templateDirective && (templateDirective === newIsolateScopeDirective ||
              templateDirective === newIsolateScopeDirective.$$originalDirective)));
          compile.$$addScopeClass($element, true);
          isolateScope.$$isolateBindings =
              newIsolateScopeDirective.$$isolateBindings;
          scopeBindingInfo = initializeDirectiveBindings(scope, attrs, isolateScope,
                                        isolateScope.$$isolateBindings,
                                        newIsolateScopeDirective);
          if (scopeBindingInfo.removeWatches) {
            isolateScope.$on('$destroy', scopeBindingInfo.removeWatches);
          }
        }

        // Initialize bindToController bindings
        for (var name in elementControllers) {
          var controllerDirective = controllerDirectives[name];
          var controller = elementControllers[name];
          var bindings = controllerDirective.$$bindings.bindToController;

          if (preAssignBindingsEnabled) {
            if (bindings) {
              controller.bindingInfo =
                initializeDirectiveBindings(controllerScope, attrs, controller.instance, bindings, controllerDirective);
            } else {
              controller.bindingInfo = {};
            }

            var controllerResult = controller();
            if (controllerResult !== controller.instance) {
              // If the controller constructor has a return value, overwrite the instance
              // from setupControllers
              controller.instance = controllerResult;
              $element.data('$' + controllerDirective.name + 'Controller', controllerResult);
              if (controller.bindingInfo.removeWatches) {
                controller.bindingInfo.removeWatches();
              }
              controller.bindingInfo =
                initializeDirectiveBindings(controllerScope, attrs, controller.instance, bindings, controllerDirective);
            }
          } else {
            controller.instance = controller();
            $element.data('$' + controllerDirective.name + 'Controller', controller.instance);
            controller.bindingInfo =
              initializeDirectiveBindings(controllerScope, attrs, controller.instance, bindings, controllerDirective);
          }
        }

        // Bind the required controllers to the controller, if `require` is an object and `bindToController` is truthy
        forEach(controllerDirectives, function(controllerDirective, name) {
          var require = controllerDirective.require;
          if (controllerDirective.bindToController && !isArray(require) && isObject(require)) {
            extend(elementControllers[name].instance, getControllers(name, require, $element, elementControllers));
          }
        });

        // Handle the init and destroy lifecycle hooks on all controllers that have them
        forEach(elementControllers, function(controller) {
          var controllerInstance = controller.instance;
          if (isFunction(controllerInstance.$onChanges)) {
            try {
              controllerInstance.$onChanges(controller.bindingInfo.initialChanges);
            } catch (e) {
              $exceptionHandler(e);
            }
          }
          if (isFunction(controllerInstance.$onInit)) {
            try {
              controllerInstance.$onInit();
            } catch (e) {
              $exceptionHandler(e);
            }
          }
          if (isFunction(controllerInstance.$doCheck)) {
            controllerScope.$watch(function() { controllerInstance.$doCheck(); });
            controllerInstance.$doCheck();
          }
          if (isFunction(controllerInstance.$onDestroy)) {
            controllerScope.$on('$destroy', function callOnDestroyHook() {
              controllerInstance.$onDestroy();
            });
          }
        });

        // PRELINKING
        for (i = 0, ii = preLinkFns.length; i < ii; i++) {
          linkFn = preLinkFns[i];
          invokeLinkFn(linkFn,
              linkFn.isolateScope ? isolateScope : scope,
              $element,
              attrs,
              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),
              transcludeFn
          );
        }

        // RECURSION
        // We only pass the isolate scope, if the isolate directive has a template,
        // otherwise the child elements do not belong to the isolate directive.
        var scopeToChild = scope;
        if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {
          scopeToChild = isolateScope;
        }
        if (childLinkFn) {
          childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);
        }

        // POSTLINKING
        for (i = postLinkFns.length - 1; i >= 0; i--) {
          linkFn = postLinkFns[i];
          invokeLinkFn(linkFn,
              linkFn.isolateScope ? isolateScope : scope,
              $element,
              attrs,
              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),
              transcludeFn
          );
        }

        // Trigger $postLink lifecycle hooks
        forEach(elementControllers, function(controller) {
          var controllerInstance = controller.instance;
          if (isFunction(controllerInstance.$postLink)) {
            controllerInstance.$postLink();
          }
        });

        // This is the function that is injected as `$transclude`.
        // Note: all arguments are optional!
        function controllersBoundTransclude(scope, cloneAttachFn, futureParentElement, slotName) {
          var transcludeControllers;
          // No scope passed in:
          if (!isScope(scope)) {
            slotName = futureParentElement;
            futureParentElement = cloneAttachFn;
            cloneAttachFn = scope;
            scope = undefined;
          }

          if (hasElementTranscludeDirective) {
            transcludeControllers = elementControllers;
          }
          if (!futureParentElement) {
            futureParentElement = hasElementTranscludeDirective ? $element.parent() : $element;
          }
          if (slotName) {
            // slotTranscludeFn can be one of three things:
            //  * a transclude function - a filled slot
            //  * `null` - an optional slot that was not filled
            //  * `undefined` - a slot that was not declared (i.e. invalid)
            var slotTranscludeFn = boundTranscludeFn.$$slots[slotName];
            if (slotTranscludeFn) {
              return slotTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
            } else if (isUndefined(slotTranscludeFn)) {
              throw $compileMinErr('noslot',
               'No parent directive that requires a transclusion with slot name "{0}". ' +
               'Element: {1}',
               slotName, startingTag($element));
            }
          } else {
            return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
          }
        }
      }
    }

    function getControllers(directiveName, require, $element, elementControllers) {
      var value;

      if (isString(require)) {
        var match = require.match(REQUIRE_PREFIX_REGEXP);
        var name = require.substring(match[0].length);
        var inheritType = match[1] || match[3];
        var optional = match[2] === '?';

        //If only parents then start at the parent element
        if (inheritType === '^^') {
          $element = $element.parent();
        //Otherwise attempt getting the controller from elementControllers in case
        //the element is transcluded (and has no data) and to avoid .data if possible
        } else {
          value = elementControllers && elementControllers[name];
          value = value && value.instance;
        }

        if (!value) {
          var dataName = '$' + name + 'Controller';
          value = inheritType ? $element.inheritedData(dataName) : $element.data(dataName);
        }

        if (!value && !optional) {
          throw $compileMinErr('ctreq',
              'Controller \'{0}\', required by directive \'{1}\', can\'t be found!',
              name, directiveName);
        }
      } else if (isArray(require)) {
        value = [];
        for (var i = 0, ii = require.length; i < ii; i++) {
          value[i] = getControllers(directiveName, require[i], $element, elementControllers);
        }
      } else if (isObject(require)) {
        value = {};
        forEach(require, function(controller, property) {
          value[property] = getControllers(directiveName, controller, $element, elementControllers);
        });
      }

      return value || null;
    }

    function setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope, newIsolateScopeDirective) {
      var elementControllers = createMap();
      for (var controllerKey in controllerDirectives) {
        var directive = controllerDirectives[controllerKey];
        var locals = {
          $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,
          $element: $element,
          $attrs: attrs,
          $transclude: transcludeFn
        };

        var controller = directive.controller;
        if (controller === '@') {
          controller = attrs[directive.name];
        }

        var controllerInstance = $controller(controller, locals, true, directive.controllerAs);

        // For directives with element transclusion the element is a comment.
        // In this case .data will not attach any data.
        // Instead, we save the controllers for the element in a local hash and attach to .data
        // later, once we have the actual element.
        elementControllers[directive.name] = controllerInstance;
        $element.data('$' + directive.name + 'Controller', controllerInstance.instance);
      }
      return elementControllers;
    }

    // Depending upon the context in which a directive finds itself it might need to have a new isolated
    // or child scope created. For instance:
    // * if the directive has been pulled into a template because another directive with a higher priority
    // asked for element transclusion
    // * if the directive itself asks for transclusion but it is at the root of a template and the original
    // element was replaced. See https://github.com/angular/angular.js/issues/12936
    function markDirectiveScope(directives, isolateScope, newScope) {
      for (var j = 0, jj = directives.length; j < jj; j++) {
        directives[j] = inherit(directives[j], {$$isolateScope: isolateScope, $$newScope: newScope});
      }
    }

    /**
     * looks up the directive and decorates it with exception handling and proper parameters. We
     * call this the boundDirective.
     *
     * @param {string} name name of the directive to look up.
     * @param {string} location The directive must be found in specific format.
     *   String containing any of theses characters:
     *
     *   * `E`: element name
     *   * `A': attribute
     *   * `C`: class
     *   * `M`: comment
     * @returns {boolean} true if directive was added.
     */
    function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName,
                          endAttrName) {
      if (name === ignoreDirective) return null;
      var match = null;
      if (hasDirectives.hasOwnProperty(name)) {
        for (var directive, directives = $injector.get(name + Suffix),
            i = 0, ii = directives.length; i < ii; i++) {
          directive = directives[i];
          if ((isUndefined(maxPriority) || maxPriority > directive.priority) &&
               directive.restrict.indexOf(location) !== -1) {
            if (startAttrName) {
              directive = inherit(directive, {$$start: startAttrName, $$end: endAttrName});
            }
            if (!directive.$$bindings) {
              var bindings = directive.$$bindings =
                  parseDirectiveBindings(directive, directive.name);
              if (isObject(bindings.isolateScope)) {
                directive.$$isolateBindings = bindings.isolateScope;
              }
            }
            tDirectives.push(directive);
            match = directive;
          }
        }
      }
      return match;
    }


    /**
     * looks up the directive and returns true if it is a multi-element directive,
     * and therefore requires DOM nodes between -start and -end markers to be grouped
     * together.
     *
     * @param {string} name name of the directive to look up.
     * @returns true if directive was registered as multi-element.
     */
    function directiveIsMultiElement(name) {
      if (hasDirectives.hasOwnProperty(name)) {
        for (var directive, directives = $injector.get(name + Suffix),
            i = 0, ii = directives.length; i < ii; i++) {
          directive = directives[i];
          if (directive.multiElement) {
            return true;
          }
        }
      }
      return false;
    }

    /**
     * When the element is replaced with HTML template then the new attributes
     * on the template need to be merged with the existing attributes in the DOM.
     * The desired effect is to have both of the attributes present.
     *
     * @param {object} dst destination attributes (original DOM)
     * @param {object} src source attributes (from the directive template)
     */
    function mergeTemplateAttributes(dst, src) {
      var srcAttr = src.$attr,
          dstAttr = dst.$attr;

      // reapply the old attributes to the new element
      forEach(dst, function(value, key) {
        if (key.charAt(0) !== '$') {
          if (src[key] && src[key] !== value) {
            if (value.length) {
              value += (key === 'style' ? ';' : ' ') + src[key];
            } else {
              value = src[key];
            }
          }
          dst.$set(key, value, true, srcAttr[key]);
        }
      });

      // copy the new attributes on the old attrs object
      forEach(src, function(value, key) {
        // Check if we already set this attribute in the loop above.
        // `dst` will never contain hasOwnProperty as DOM parser won't let it.
        // You will get an "InvalidCharacterError: DOM Exception 5" error if you
        // have an attribute like "has-own-property" or "data-has-own-property", etc.
        if (!dst.hasOwnProperty(key) && key.charAt(0) !== '$') {
          dst[key] = value;

          if (key !== 'class' && key !== 'style') {
            dstAttr[key] = srcAttr[key];
          }
        }
      });
    }


    function compileTemplateUrl(directives, $compileNode, tAttrs,
        $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {
      var linkQueue = [],
          afterTemplateNodeLinkFn,
          afterTemplateChildLinkFn,
          beforeTemplateCompileNode = $compileNode[0],
          origAsyncDirective = directives.shift(),
          derivedSyncDirective = inherit(origAsyncDirective, {
            templateUrl: null, transclude: null, replace: null, $$originalDirective: origAsyncDirective
          }),
          templateUrl = (isFunction(origAsyncDirective.templateUrl))
              ? origAsyncDirective.templateUrl($compileNode, tAttrs)
              : origAsyncDirective.templateUrl,
          templateNamespace = origAsyncDirective.templateNamespace;

      $compileNode.empty();

      $templateRequest(templateUrl)
        .then(function(content) {
          var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;

          content = denormalizeTemplate(content);

          if (origAsyncDirective.replace) {
            if (jqLiteIsTextNode(content)) {
              $template = [];
            } else {
              $template = removeComments(wrapTemplate(templateNamespace, trim(content)));
            }
            compileNode = $template[0];

            if ($template.length !== 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
              throw $compileMinErr('tplrt',
                  'Template for directive \'{0}\' must have exactly one root element. {1}',
                  origAsyncDirective.name, templateUrl);
            }

            tempTemplateAttrs = {$attr: {}};
            replaceWith($rootElement, $compileNode, compileNode);
            var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);

            if (isObject(origAsyncDirective.scope)) {
              // the original directive that caused the template to be loaded async required
              // an isolate scope
              markDirectiveScope(templateDirectives, true);
            }
            directives = templateDirectives.concat(directives);
            mergeTemplateAttributes(tAttrs, tempTemplateAttrs);
          } else {
            compileNode = beforeTemplateCompileNode;
            $compileNode.html(content);
          }

          directives.unshift(derivedSyncDirective);

          afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs,
              childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns,
              previousCompileContext);
          forEach($rootElement, function(node, i) {
            if (node === compileNode) {
              $rootElement[i] = $compileNode[0];
            }
          });
          afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);

          while (linkQueue.length) {
            var scope = linkQueue.shift(),
                beforeTemplateLinkNode = linkQueue.shift(),
                linkRootElement = linkQueue.shift(),
                boundTranscludeFn = linkQueue.shift(),
                linkNode = $compileNode[0];

            if (scope.$$destroyed) continue;

            if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {
              var oldClasses = beforeTemplateLinkNode.className;

              if (!(previousCompileContext.hasElementTranscludeDirective &&
                  origAsyncDirective.replace)) {
                // it was cloned therefore we have to clone as well.
                linkNode = jqLiteClone(compileNode);
              }
              replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);

              // Copy in CSS classes from original node
              safeAddClass(jqLite(linkNode), oldClasses);
            }
            if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
              childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
            } else {
              childBoundTranscludeFn = boundTranscludeFn;
            }
            afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement,
              childBoundTranscludeFn);
          }
          linkQueue = null;
        }).catch(function(error) {
          if (error instanceof Error) {
            $exceptionHandler(error);
          }
        });

      return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {
        var childBoundTranscludeFn = boundTranscludeFn;
        if (scope.$$destroyed) return;
        if (linkQueue) {
          linkQueue.push(scope,
                         node,
                         rootElement,
                         childBoundTranscludeFn);
        } else {
          if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
            childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
          }
          afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, childBoundTranscludeFn);
        }
      };
    }


    /**
     * Sorting function for bound directives.
     */
    function byPriority(a, b) {
      var diff = b.priority - a.priority;
      if (diff !== 0) return diff;
      if (a.name !== b.name) return (a.name < b.name) ? -1 : 1;
      return a.index - b.index;
    }

    function assertNoDuplicate(what, previousDirective, directive, element) {

      function wrapModuleNameIfDefined(moduleName) {
        return moduleName ?
          (' (module: ' + moduleName + ')') :
          '';
      }

      if (previousDirective) {
        throw $compileMinErr('multidir', 'Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}',
            previousDirective.name, wrapModuleNameIfDefined(previousDirective.$$moduleName),
            directive.name, wrapModuleNameIfDefined(directive.$$moduleName), what, startingTag(element));
      }
    }


    function addTextInterpolateDirective(directives, text) {
      var interpolateFn = $interpolate(text, true);
      if (interpolateFn) {
        directives.push({
          priority: 0,
          compile: function textInterpolateCompileFn(templateNode) {
            var templateNodeParent = templateNode.parent(),
                hasCompileParent = !!templateNodeParent.length;

            // When transcluding a template that has bindings in the root
            // we don't have a parent and thus need to add the class during linking fn.
            if (hasCompileParent) compile.$$addBindingClass(templateNodeParent);

            return function textInterpolateLinkFn(scope, node) {
              var parent = node.parent();
              if (!hasCompileParent) compile.$$addBindingClass(parent);
              compile.$$addBindingInfo(parent, interpolateFn.expressions);
              scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {
                node[0].nodeValue = value;
              });
            };
          }
        });
      }
    }


    function wrapTemplate(type, template) {
      type = lowercase(type || 'html');
      switch (type) {
      case 'svg':
      case 'math':
        var wrapper = window.document.createElement('div');
        wrapper.innerHTML = '<' + type + '>' + template + '</' + type + '>';
        return wrapper.childNodes[0].childNodes;
      default:
        return template;
      }
    }


    function getTrustedContext(node, attrNormalizedName) {
      if (attrNormalizedName === 'srcdoc') {
        return $sce.HTML;
      }
      var tag = nodeName_(node);
      // All tags with src attributes require a RESOURCE_URL value, except for
      // img and various html5 media tags.
      if (attrNormalizedName === 'src' || attrNormalizedName === 'ngSrc') {
        if (['img', 'video', 'audio', 'source', 'track'].indexOf(tag) === -1) {
          return $sce.RESOURCE_URL;
        }
      // maction[xlink:href] can source SVG.  It's not limited to <maction>.
      } else if (attrNormalizedName === 'xlinkHref' ||
          (tag === 'form' && attrNormalizedName === 'action') ||
          // links can be stylesheets or imports, which can run script in the current origin
          (tag === 'link' && attrNormalizedName === 'href')
      ) {
        return $sce.RESOURCE_URL;
      }
    }


    function addAttrInterpolateDirective(node, directives, value, name, isNgAttr) {
      var trustedContext = getTrustedContext(node, name);
      var mustHaveExpression = !isNgAttr;
      var allOrNothing = ALL_OR_NOTHING_ATTRS[name] || isNgAttr;

      var interpolateFn = $interpolate(value, mustHaveExpression, trustedContext, allOrNothing);

      // no interpolation found -> ignore
      if (!interpolateFn) return;

      if (name === 'multiple' && nodeName_(node) === 'select') {
        throw $compileMinErr('selmulti',
            'Binding to the \'multiple\' attribute is not supported. Element: {0}',
            startingTag(node));
      }

      if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {
        throw $compileMinErr('nodomevents',
            'Interpolations for HTML DOM event attributes are disallowed.  Please use the ' +
                'ng- versions (such as ng-click instead of onclick) instead.');
      }

      directives.push({
        priority: 100,
        compile: function() {
            return {
              pre: function attrInterpolatePreLinkFn(scope, element, attr) {
                var $$observers = (attr.$$observers || (attr.$$observers = createMap()));

                // If the attribute has changed since last $interpolate()ed
                var newValue = attr[name];
                if (newValue !== value) {
                  // we need to interpolate again since the attribute value has been updated
                  // (e.g. by another directive's compile function)
                  // ensure unset/empty values make interpolateFn falsy
                  interpolateFn = newValue && $interpolate(newValue, true, trustedContext, allOrNothing);
                  value = newValue;
                }

                // if attribute was updated so that there is no interpolation going on we don't want to
                // register any observers
                if (!interpolateFn) return;

                // initialize attr object so that it's ready in case we need the value for isolate
                // scope initialization, otherwise the value would not be available from isolate
                // directive's linking fn during linking phase
                attr[name] = interpolateFn(scope);

                ($$observers[name] || ($$observers[name] = [])).$$inter = true;
                (attr.$$observers && attr.$$observers[name].$$scope || scope).
                  $watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {
                    //special case for class attribute addition + removal
                    //so that class changes can tap into the animation
                    //hooks provided by the $animate service. Be sure to
                    //skip animations when the first digest occurs (when
                    //both the new and the old values are the same) since
                    //the CSS classes are the non-interpolated values
                    if (name === 'class' && newValue !== oldValue) {
                      attr.$updateClass(newValue, oldValue);
                    } else {
                      attr.$set(name, newValue);
                    }
                  });
              }
            };
          }
      });
    }


    /**
     * This is a special jqLite.replaceWith, which can replace items which
     * have no parents, provided that the containing jqLite collection is provided.
     *
     * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes
     *                               in the root of the tree.
     * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep
     *                                  the shell, but replace its DOM node reference.
     * @param {Node} newNode The new DOM node.
     */
    function replaceWith($rootElement, elementsToRemove, newNode) {
      var firstElementToRemove = elementsToRemove[0],
          removeCount = elementsToRemove.length,
          parent = firstElementToRemove.parentNode,
          i, ii;

      if ($rootElement) {
        for (i = 0, ii = $rootElement.length; i < ii; i++) {
          if ($rootElement[i] === firstElementToRemove) {
            $rootElement[i++] = newNode;
            for (var j = i, j2 = j + removeCount - 1,
                     jj = $rootElement.length;
                 j < jj; j++, j2++) {
              if (j2 < jj) {
                $rootElement[j] = $rootElement[j2];
              } else {
                delete $rootElement[j];
              }
            }
            $rootElement.length -= removeCount - 1;

            // If the replaced element is also the jQuery .context then replace it
            // .context is a deprecated jQuery api, so we should set it only when jQuery set it
            // http://api.jquery.com/context/
            if ($rootElement.context === firstElementToRemove) {
              $rootElement.context = newNode;
            }
            break;
          }
        }
      }

      if (parent) {
        parent.replaceChild(newNode, firstElementToRemove);
      }

      // Append all the `elementsToRemove` to a fragment. This will...
      // - remove them from the DOM
      // - allow them to still be traversed with .nextSibling
      // - allow a single fragment.qSA to fetch all elements being removed
      var fragment = window.document.createDocumentFragment();
      for (i = 0; i < removeCount; i++) {
        fragment.appendChild(elementsToRemove[i]);
      }

      if (jqLite.hasData(firstElementToRemove)) {
        // Copy over user data (that includes Angular's $scope etc.). Don't copy private
        // data here because there's no public interface in jQuery to do that and copying over
        // event listeners (which is the main use of private data) wouldn't work anyway.
        jqLite.data(newNode, jqLite.data(firstElementToRemove));

        // Remove $destroy event listeners from `firstElementToRemove`
        jqLite(firstElementToRemove).off('$destroy');
      }

      // Cleanup any data/listeners on the elements and children.
      // This includes invoking the $destroy event on any elements with listeners.
      jqLite.cleanData(fragment.querySelectorAll('*'));

      // Update the jqLite collection to only contain the `newNode`
      for (i = 1; i < removeCount; i++) {
        delete elementsToRemove[i];
      }
      elementsToRemove[0] = newNode;
      elementsToRemove.length = 1;
    }


    function cloneAndAnnotateFn(fn, annotation) {
      return extend(function() { return fn.apply(null, arguments); }, fn, annotation);
    }


    function invokeLinkFn(linkFn, scope, $element, attrs, controllers, transcludeFn) {
      try {
        linkFn(scope, $element, attrs, controllers, transcludeFn);
      } catch (e) {
        $exceptionHandler(e, startingTag($element));
      }
    }


    // Set up $watches for isolate scope and controller bindings.
    function initializeDirectiveBindings(scope, attrs, destination, bindings, directive) {
      var removeWatchCollection = [];
      var initialChanges = {};
      var changes;
      forEach(bindings, function initializeBinding(definition, scopeName) {
        var attrName = definition.attrName,
        optional = definition.optional,
        mode = definition.mode, // @, =, <, or &
        lastValue,
        parentGet, parentSet, compare, removeWatch;

        switch (mode) {

          case '@':
            if (!optional && !hasOwnProperty.call(attrs, attrName)) {
              destination[scopeName] = attrs[attrName] = undefined;
            }
            removeWatch = attrs.$observe(attrName, function(value) {
              if (isString(value) || isBoolean(value)) {
                var oldValue = destination[scopeName];
                recordChanges(scopeName, value, oldValue);
                destination[scopeName] = value;
              }
            });
            attrs.$$observers[attrName].$$scope = scope;
            lastValue = attrs[attrName];
            if (isString(lastValue)) {
              // If the attribute has been provided then we trigger an interpolation to ensure
              // the value is there for use in the link fn
              destination[scopeName] = $interpolate(lastValue)(scope);
            } else if (isBoolean(lastValue)) {
              // If the attributes is one of the BOOLEAN_ATTR then Angular will have converted
              // the value to boolean rather than a string, so we special case this situation
              destination[scopeName] = lastValue;
            }
            initialChanges[scopeName] = new SimpleChange(_UNINITIALIZED_VALUE, destination[scopeName]);
            removeWatchCollection.push(removeWatch);
            break;

          case '=':
            if (!hasOwnProperty.call(attrs, attrName)) {
              if (optional) break;
              attrs[attrName] = undefined;
            }
            if (optional && !attrs[attrName]) break;

            parentGet = $parse(attrs[attrName]);
            if (parentGet.literal) {
              compare = equals;
            } else {
              // eslint-disable-next-line no-self-compare
              compare = function simpleCompare(a, b) { return a === b || (a !== a && b !== b); };
            }
            parentSet = parentGet.assign || function() {
              // reset the change, or we will throw this exception on every $digest
              lastValue = destination[scopeName] = parentGet(scope);
              throw $compileMinErr('nonassign',
                  'Expression \'{0}\' in attribute \'{1}\' used with directive \'{2}\' is non-assignable!',
                  attrs[attrName], attrName, directive.name);
            };
            lastValue = destination[scopeName] = parentGet(scope);
            var parentValueWatch = function parentValueWatch(parentValue) {
              if (!compare(parentValue, destination[scopeName])) {
                // we are out of sync and need to copy
                if (!compare(parentValue, lastValue)) {
                  // parent changed and it has precedence
                  destination[scopeName] = parentValue;
                } else {
                  // if the parent can be assigned then do so
                  parentSet(scope, parentValue = destination[scopeName]);
                }
              }
              lastValue = parentValue;
              return lastValue;
            };
            parentValueWatch.$stateful = true;
            if (definition.collection) {
              removeWatch = scope.$watchCollection(attrs[attrName], parentValueWatch);
            } else {
              removeWatch = scope.$watch($parse(attrs[attrName], parentValueWatch), null, parentGet.literal);
            }
            removeWatchCollection.push(removeWatch);
            break;

          case '<':
            if (!hasOwnProperty.call(attrs, attrName)) {
              if (optional) break;
              attrs[attrName] = undefined;
            }
            if (optional && !attrs[attrName]) break;

            parentGet = $parse(attrs[attrName]);
            var deepWatch = parentGet.literal;

            var initialValue = destination[scopeName] = parentGet(scope);
            initialChanges[scopeName] = new SimpleChange(_UNINITIALIZED_VALUE, destination[scopeName]);

            removeWatch = scope.$watch(parentGet, function parentValueWatchAction(newValue, oldValue) {
              if (oldValue === newValue) {
                if (oldValue === initialValue || (deepWatch && equals(oldValue, initialValue))) {
                  return;
                }
                oldValue = initialValue;
              }
              recordChanges(scopeName, newValue, oldValue);
              destination[scopeName] = newValue;
            }, deepWatch);

            removeWatchCollection.push(removeWatch);
            break;

          case '&':
            // Don't assign Object.prototype method to scope
            parentGet = attrs.hasOwnProperty(attrName) ? $parse(attrs[attrName]) : noop;

            // Don't assign noop to destination if expression is not valid
            if (parentGet === noop && optional) break;

            destination[scopeName] = function(locals) {
              return parentGet(scope, locals);
            };
            break;
        }
      });

      function recordChanges(key, currentValue, previousValue) {
        if (isFunction(destination.$onChanges) && currentValue !== previousValue &&
            // eslint-disable-next-line no-self-compare
            (currentValue === currentValue || previousValue === previousValue)) {
          // If we have not already scheduled the top level onChangesQueue handler then do so now
          if (!onChangesQueue) {
            scope.$$postDigest(flushOnChangesQueue);
            onChangesQueue = [];
          }
          // If we have not already queued a trigger of onChanges for this controller then do so now
          if (!changes) {
            changes = {};
            onChangesQueue.push(triggerOnChangesHook);
          }
          // If the has been a change on this property already then we need to reuse the previous value
          if (changes[key]) {
            previousValue = changes[key].previousValue;
          }
          // Store this change
          changes[key] = new SimpleChange(previousValue, currentValue);
        }
      }

      function triggerOnChangesHook() {
        destination.$onChanges(changes);
        // Now clear the changes so that we schedule onChanges when more changes arrive
        changes = undefined;
      }

      return {
        initialChanges: initialChanges,
        removeWatches: removeWatchCollection.length && function removeWatches() {
          for (var i = 0, ii = removeWatchCollection.length; i < ii; ++i) {
            removeWatchCollection[i]();
          }
        }
      };
    }
  }];
}

function SimpleChange(previous, current) {
  this.previousValue = previous;
  this.currentValue = current;
}
SimpleChange.prototype.isFirstChange = function() { return this.previousValue === _UNINITIALIZED_VALUE; };


var PREFIX_REGEXP = /^((?:x|data)[:\-_])/i;
var SPECIAL_CHARS_REGEXP = /[:\-_]+(.)/g;

/**
 * Converts all accepted directives format into proper directive name.
 * @param name Name to normalize
 */
function directiveNormalize(name) {
  return name
    .replace(PREFIX_REGEXP, '')
    .replace(SPECIAL_CHARS_REGEXP, fnCamelCaseReplace);
}

/**
 * @ngdoc type
 * @name $compile.directive.Attributes
 *
 * @description
 * A shared object between directive compile / linking functions which contains normalized DOM
 * element attributes. The values reflect current binding state `{{ }}`. The normalization is
 * needed since all of these are treated as equivalent in Angular:
 *
 * ```
 *    <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">
 * ```
 */

/**
 * @ngdoc property
 * @name $compile.directive.Attributes#$attr
 *
 * @description
 * A map of DOM element attribute names to the normalized name. This is
 * needed to do reverse lookup from normalized name back to actual name.
 */


/**
 * @ngdoc method
 * @name $compile.directive.Attributes#$set
 * @kind function
 *
 * @description
 * Set DOM element attribute value.
 *
 *
 * @param {string} name Normalized element attribute name of the property to modify. The name is
 *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}
 *          property to the original name.
 * @param {string} value Value to set the attribute to. The value can be an interpolated string.
 */



/**
 * Closure compiler type information
 */

function nodesetLinkingFn(
  /* angular.Scope */ scope,
  /* NodeList */ nodeList,
  /* Element */ rootElement,
  /* function(Function) */ boundTranscludeFn
) {}

function directiveLinkingFn(
  /* nodesetLinkingFn */ nodesetLinkingFn,
  /* angular.Scope */ scope,
  /* Node */ node,
  /* Element */ rootElement,
  /* function(Function) */ boundTranscludeFn
) {}

function tokenDifference(str1, str2) {
  var values = '',
      tokens1 = str1.split(/\s+/),
      tokens2 = str2.split(/\s+/);

  outer:
  for (var i = 0; i < tokens1.length; i++) {
    var token = tokens1[i];
    for (var j = 0; j < tokens2.length; j++) {
      if (token === tokens2[j]) continue outer;
    }
    values += (values.length > 0 ? ' ' : '') + token;
  }
  return values;
}

function removeComments(jqNodes) {
  jqNodes = jqLite(jqNodes);
  var i = jqNodes.length;

  if (i <= 1) {
    return jqNodes;
  }

  while (i--) {
    var node = jqNodes[i];
    if (node.nodeType === NODE_TYPE_COMMENT ||
       (node.nodeType === NODE_TYPE_TEXT && node.nodeValue.trim() === '')) {
         splice.call(jqNodes, i, 1);
    }
  }
  return jqNodes;
}

var $controllerMinErr = minErr('$controller');


var CNTRL_REG = /^(\S+)(\s+as\s+([\w$]+))?$/;
function identifierForController(controller, ident) {
  if (ident && isString(ident)) return ident;
  if (isString(controller)) {
    var match = CNTRL_REG.exec(controller);
    if (match) return match[3];
  }
}


/**
 * @ngdoc provider
 * @name $controllerProvider
 * @this
 *
 * @description
 * The {@link ng.$controller $controller service} is used by Angular to create new
 * controllers.
 *
 * This provider allows controller registration via the
 * {@link ng.$controllerProvider#register register} method.
 */
function $ControllerProvider() {
  var controllers = {},
      globals = false;

  /**
   * @ngdoc method
   * @name $controllerProvider#has
   * @param {string} name Controller name to check.
   */
  this.has = function(name) {
    return controllers.hasOwnProperty(name);
  };

  /**
   * @ngdoc method
   * @name $controllerProvider#register
   * @param {string|Object} name Controller name, or an object map of controllers where the keys are
   *    the names and the values are the constructors.
   * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI
   *    annotations in the array notation).
   */
  this.register = function(name, constructor) {
    assertNotHasOwnProperty(name, 'controller');
    if (isObject(name)) {
      extend(controllers, name);
    } else {
      controllers[name] = constructor;
    }
  };

  /**
   * @ngdoc method
   * @name $controllerProvider#allowGlobals
   * @description If called, allows `$controller` to find controller constructors on `window`
   *
   * @deprecated
   * sinceVersion="v1.3.0"
   * removeVersion="v1.7.0"
   * This method of finding controllers has been deprecated.
   */
  this.allowGlobals = function() {
    globals = true;
  };


  this.$get = ['$injector', '$window', function($injector, $window) {

    /**
     * @ngdoc service
     * @name $controller
     * @requires $injector
     *
     * @param {Function|string} constructor If called with a function then it's considered to be the
     *    controller constructor function. Otherwise it's considered to be a string which is used
     *    to retrieve the controller constructor using the following steps:
     *
     *    * check if a controller with given name is registered via `$controllerProvider`
     *    * check if evaluating the string on the current scope returns a constructor
     *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global
     *      `window` object (deprecated, not recommended)
     *
     *    The string can use the `controller as property` syntax, where the controller instance is published
     *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this
     *    to work correctly.
     *
     * @param {Object} locals Injection locals for Controller.
     * @return {Object} Instance of given controller.
     *
     * @description
     * `$controller` service is responsible for instantiating controllers.
     *
     * It's just a simple call to {@link auto.$injector $injector}, but extracted into
     * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).
     */
    return function $controller(expression, locals, later, ident) {
      // PRIVATE API:
      //   param `later` --- indicates that the controller's constructor is invoked at a later time.
      //                     If true, $controller will allocate the object with the correct
      //                     prototype chain, but will not invoke the controller until a returned
      //                     callback is invoked.
      //   param `ident` --- An optional label which overrides the label parsed from the controller
      //                     expression, if any.
      var instance, match, constructor, identifier;
      later = later === true;
      if (ident && isString(ident)) {
        identifier = ident;
      }

      if (isString(expression)) {
        match = expression.match(CNTRL_REG);
        if (!match) {
          throw $controllerMinErr('ctrlfmt',
            'Badly formed controller string \'{0}\'. ' +
            'Must match `__name__ as __id__` or `__name__`.', expression);
        }
        constructor = match[1];
        identifier = identifier || match[3];
        expression = controllers.hasOwnProperty(constructor)
            ? controllers[constructor]
            : getter(locals.$scope, constructor, true) ||
                (globals ? getter($window, constructor, true) : undefined);

        if (!expression) {
          throw $controllerMinErr('ctrlreg',
            'The controller with the name \'{0}\' is not registered.', constructor);
        }

        assertArgFn(expression, constructor, true);
      }

      if (later) {
        // Instantiate controller later:
        // This machinery is used to create an instance of the object before calling the
        // controller's constructor itself.
        //
        // This allows properties to be added to the controller before the constructor is
        // invoked. Primarily, this is used for isolate scope bindings in $compile.
        //
        // This feature is not intended for use by applications, and is thus not documented
        // publicly.
        // Object creation: http://jsperf.com/create-constructor/2
        var controllerPrototype = (isArray(expression) ?
          expression[expression.length - 1] : expression).prototype;
        instance = Object.create(controllerPrototype || null);

        if (identifier) {
          addIdentifier(locals, identifier, instance, constructor || expression.name);
        }

        return extend(function $controllerInit() {
          var result = $injector.invoke(expression, instance, locals, constructor);
          if (result !== instance && (isObject(result) || isFunction(result))) {
            instance = result;
            if (identifier) {
              // If result changed, re-assign controllerAs value to scope.
              addIdentifier(locals, identifier, instance, constructor || expression.name);
            }
          }
          return instance;
        }, {
          instance: instance,
          identifier: identifier
        });
      }

      instance = $injector.instantiate(expression, locals, constructor);

      if (identifier) {
        addIdentifier(locals, identifier, instance, constructor || expression.name);
      }

      return instance;
    };

    function addIdentifier(locals, identifier, instance, name) {
      if (!(locals && isObject(locals.$scope))) {
        throw minErr('$controller')('noscp',
          'Cannot export controller \'{0}\' as \'{1}\'! No $scope object provided via `locals`.',
          name, identifier);
      }

      locals.$scope[identifier] = instance;
    }
  }];
}

/**
 * @ngdoc service
 * @name $document
 * @requires $window
 * @this
 *
 * @description
 * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.
 *
 * @example
   <example module="documentExample" name="document">
     <file name="index.html">
       <div ng-controller="ExampleController">
         <p>$document title: <b ng-bind="title"></b></p>
         <p>window.document title: <b ng-bind="windowTitle"></b></p>
       </div>
     </file>
     <file name="script.js">
       angular.module('documentExample', [])
         .controller('ExampleController', ['$scope', '$document', function($scope, $document) {
           $scope.title = $document[0].title;
           $scope.windowTitle = angular.element(window.document)[0].title;
         }]);
     </file>
   </example>
 */
function $DocumentProvider() {
  this.$get = ['$window', function(window) {
    return jqLite(window.document);
  }];
}


/**
 * @private
 * @this
 * Listens for document visibility change and makes the current status accessible.
 */
function $$IsDocumentHiddenProvider() {
  this.$get = ['$document', '$rootScope', function($document, $rootScope) {
    var doc = $document[0];
    var hidden = doc && doc.hidden;

    $document.on('visibilitychange', changeListener);

    $rootScope.$on('$destroy', function() {
      $document.off('visibilitychange', changeListener);
    });

    function changeListener() {
      hidden = doc.hidden;
    }

    return function() {
      return hidden;
    };
  }];
}

/**
 * @ngdoc service
 * @name $exceptionHandler
 * @requires ng.$log
 * @this
 *
 * @description
 * Any uncaught exception in angular expressions is delegated to this service.
 * The default implementation simply delegates to `$log.error` which logs it into
 * the browser console.
 *
 * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by
 * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.
 *
 * ## Example:
 *
 * The example below will overwrite the default `$exceptionHandler` in order to (a) log uncaught
 * errors to the backend for later inspection by the developers and (b) to use `$log.warn()` instead
 * of `$log.error()`.
 *
 * ```js
 *   angular.
 *     module('exceptionOverwrite', []).
 *     factory('$exceptionHandler', ['$log', 'logErrorsToBackend', function($log, logErrorsToBackend) {
 *       return function myExceptionHandler(exception, cause) {
 *         logErrorsToBackend(exception, cause);
 *         $log.warn(exception, cause);
 *       };
 *     }]);
 * ```
 *
 * <hr />
 * Note, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`
 * methods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}
 * (unless executed during a digest).
 *
 * If you wish, you can manually delegate exceptions, e.g.
 * `try { ... } catch(e) { $exceptionHandler(e); }`
 *
 * @param {Error} exception Exception associated with the error.
 * @param {string=} cause Optional information about the context in which
 *       the error was thrown.
 *
 */
function $ExceptionHandlerProvider() {
  this.$get = ['$log', function($log) {
    return function(exception, cause) {
      $log.error.apply($log, arguments);
    };
  }];
}

var $$ForceReflowProvider = /** @this */ function() {
  this.$get = ['$document', function($document) {
    return function(domNode) {
      //the line below will force the browser to perform a repaint so
      //that all the animated elements within the animation frame will
      //be properly updated and drawn on screen. This is required to
      //ensure that the preparation animation is properly flushed so that
      //the active state picks up from there. DO NOT REMOVE THIS LINE.
      //DO NOT OPTIMIZE THIS LINE. THE MINIFIER WILL REMOVE IT OTHERWISE WHICH
      //WILL RESULT IN AN UNPREDICTABLE BUG THAT IS VERY HARD TO TRACK DOWN AND
      //WILL TAKE YEARS AWAY FROM YOUR LIFE.
      if (domNode) {
        if (!domNode.nodeType && domNode instanceof jqLite) {
          domNode = domNode[0];
        }
      } else {
        domNode = $document[0].body;
      }
      return domNode.offsetWidth + 1;
    };
  }];
};

var APPLICATION_JSON = 'application/json';
var CONTENT_TYPE_APPLICATION_JSON = {'Content-Type': APPLICATION_JSON + ';charset=utf-8'};
var JSON_START = /^\[|^\{(?!\{)/;
var JSON_ENDS = {
  '[': /]$/,
  '{': /}$/
};
var JSON_PROTECTION_PREFIX = /^\)]\}',?\n/;
var $httpMinErr = minErr('$http');

function serializeValue(v) {
  if (isObject(v)) {
    return isDate(v) ? v.toISOString() : toJson(v);
  }
  return v;
}


/** @this */
function $HttpParamSerializerProvider() {
  /**
   * @ngdoc service
   * @name $httpParamSerializer
   * @description
   *
   * Default {@link $http `$http`} params serializer that converts objects to strings
   * according to the following rules:
   *
   * * `{'foo': 'bar'}` results in `foo=bar`
   * * `{'foo': Date.now()}` results in `foo=2015-04-01T09%3A50%3A49.262Z` (`toISOString()` and encoded representation of a Date object)
   * * `{'foo': ['bar', 'baz']}` results in `foo=bar&foo=baz` (repeated key for each array element)
   * * `{'foo': {'bar':'baz'}}` results in `foo=%7B%22bar%22%3A%22baz%22%7D` (stringified and encoded representation of an object)
   *
   * Note that serializer will sort the request parameters alphabetically.
   * */

  this.$get = function() {
    return function ngParamSerializer(params) {
      if (!params) return '';
      var parts = [];
      forEachSorted(params, function(value, key) {
        if (value === null || isUndefined(value)) return;
        if (isArray(value)) {
          forEach(value, function(v) {
            parts.push(encodeUriQuery(key)  + '=' + encodeUriQuery(serializeValue(v)));
          });
        } else {
          parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(serializeValue(value)));
        }
      });

      return parts.join('&');
    };
  };
}

/** @this */
function $HttpParamSerializerJQLikeProvider() {
  /**
   * @ngdoc service
   * @name $httpParamSerializerJQLike
   *
   * @description
   *
   * Alternative {@link $http `$http`} params serializer that follows
   * jQuery's [`param()`](http://api.jquery.com/jquery.param/) method logic.
   * The serializer will also sort the params alphabetically.
   *
   * To use it for serializing `$http` request parameters, set it as the `paramSerializer` property:
   *
   * ```js
   * $http({
   *   url: myUrl,
   *   method: 'GET',
   *   params: myParams,
   *   paramSerializer: '$httpParamSerializerJQLike'
   * });
   * ```
   *
   * It is also possible to set it as the default `paramSerializer` in the
   * {@link $httpProvider#defaults `$httpProvider`}.
   *
   * Additionally, you can inject the serializer and use it explicitly, for example to serialize
   * form data for submission:
   *
   * ```js
   * .controller(function($http, $httpParamSerializerJQLike) {
   *   //...
   *
   *   $http({
   *     url: myUrl,
   *     method: 'POST',
   *     data: $httpParamSerializerJQLike(myData),
   *     headers: {
   *       'Content-Type': 'application/x-www-form-urlencoded'
   *     }
   *   });
   *
   * });
   * ```
   *
   * */
  this.$get = function() {
    return function jQueryLikeParamSerializer(params) {
      if (!params) return '';
      var parts = [];
      serialize(params, '', true);
      return parts.join('&');

      function serialize(toSerialize, prefix, topLevel) {
        if (toSerialize === null || isUndefined(toSerialize)) return;
        if (isArray(toSerialize)) {
          forEach(toSerialize, function(value, index) {
            serialize(value, prefix + '[' + (isObject(value) ? index : '') + ']');
          });
        } else if (isObject(toSerialize) && !isDate(toSerialize)) {
          forEachSorted(toSerialize, function(value, key) {
            serialize(value, prefix +
                (topLevel ? '' : '[') +
                key +
                (topLevel ? '' : ']'));
          });
        } else {
          parts.push(encodeUriQuery(prefix) + '=' + encodeUriQuery(serializeValue(toSerialize)));
        }
      }
    };
  };
}

function defaultHttpResponseTransform(data, headers) {
  if (isString(data)) {
    // Strip json vulnerability protection prefix and trim whitespace
    var tempData = data.replace(JSON_PROTECTION_PREFIX, '').trim();

    if (tempData) {
      var contentType = headers('Content-Type');
      if ((contentType && (contentType.indexOf(APPLICATION_JSON) === 0)) || isJsonLike(tempData)) {
        data = fromJson(tempData);
      }
    }
  }

  return data;
}

function isJsonLike(str) {
    var jsonStart = str.match(JSON_START);
    return jsonStart && JSON_ENDS[jsonStart[0]].test(str);
}

/**
 * Parse headers into key value object
 *
 * @param {string} headers Raw headers as a string
 * @returns {Object} Parsed headers as key value object
 */
function parseHeaders(headers) {
  var parsed = createMap(), i;

  function fillInParsed(key, val) {
    if (key) {
      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
    }
  }

  if (isString(headers)) {
    forEach(headers.split('\n'), function(line) {
      i = line.indexOf(':');
      fillInParsed(lowercase(trim(line.substr(0, i))), trim(line.substr(i + 1)));
    });
  } else if (isObject(headers)) {
    forEach(headers, function(headerVal, headerKey) {
      fillInParsed(lowercase(headerKey), trim(headerVal));
    });
  }

  return parsed;
}


/**
 * Returns a function that provides access to parsed headers.
 *
 * Headers are lazy parsed when first requested.
 * @see parseHeaders
 *
 * @param {(string|Object)} headers Headers to provide access to.
 * @returns {function(string=)} Returns a getter function which if called with:
 *
 *   - if called with an argument returns a single header value or null
 *   - if called with no arguments returns an object containing all headers.
 */
function headersGetter(headers) {
  var headersObj;

  return function(name) {
    if (!headersObj) headersObj =  parseHeaders(headers);

    if (name) {
      var value = headersObj[lowercase(name)];
      if (value === undefined) {
        value = null;
      }
      return value;
    }

    return headersObj;
  };
}


/**
 * Chain all given functions
 *
 * This function is used for both request and response transforming
 *
 * @param {*} data Data to transform.
 * @param {function(string=)} headers HTTP headers getter fn.
 * @param {number} status HTTP status code of the response.
 * @param {(Function|Array.<Function>)} fns Function or an array of functions.
 * @returns {*} Transformed data.
 */
function transformData(data, headers, status, fns) {
  if (isFunction(fns)) {
    return fns(data, headers, status);
  }

  forEach(fns, function(fn) {
    data = fn(data, headers, status);
  });

  return data;
}


function isSuccess(status) {
  return 200 <= status && status < 300;
}


/**
 * @ngdoc provider
 * @name $httpProvider
 * @this
 *
 * @description
 * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.
 * */
function $HttpProvider() {
  /**
   * @ngdoc property
   * @name $httpProvider#defaults
   * @description
   *
   * Object containing default values for all {@link ng.$http $http} requests.
   *
   * - **`defaults.cache`** - {boolean|Object} - A boolean value or object created with
   * {@link ng.$cacheFactory `$cacheFactory`} to enable or disable caching of HTTP responses
   * by default. See {@link $http#caching $http Caching} for more information.
   *
   * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.
   * Defaults value is `'XSRF-TOKEN'`.
   *
   * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the
   * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.
   *
   * - **`defaults.headers`** - {Object} - Default headers for all $http requests.
   * Refer to {@link ng.$http#setting-http-headers $http} for documentation on
   * setting default headers.
   *     - **`defaults.headers.common`**
   *     - **`defaults.headers.post`**
   *     - **`defaults.headers.put`**
   *     - **`defaults.headers.patch`**
   *
   *
   * - **`defaults.paramSerializer`** - `{string|function(Object<string,string>):string}` - A function
   *  used to the prepare string representation of request parameters (specified as an object).
   *  If specified as string, it is interpreted as a function registered with the {@link auto.$injector $injector}.
   *  Defaults to {@link ng.$httpParamSerializer $httpParamSerializer}.
   *
   * - **`defaults.jsonpCallbackParam`** - `{string}` - the name of the query parameter that passes the name of the
   * callback in a JSONP request. The value of this parameter will be replaced with the expression generated by the
   * {@link $jsonpCallbacks} service. Defaults to `'callback'`.
   *
   **/
  var defaults = this.defaults = {
    // transform incoming response data
    transformResponse: [defaultHttpResponseTransform],

    // transform outgoing request data
    transformRequest: [function(d) {
      return isObject(d) && !isFile(d) && !isBlob(d) && !isFormData(d) ? toJson(d) : d;
    }],

    // default headers
    headers: {
      common: {
        'Accept': 'application/json, text/plain, */*'
      },
      post:   shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
      put:    shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
      patch:  shallowCopy(CONTENT_TYPE_APPLICATION_JSON)
    },

    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',

    paramSerializer: '$httpParamSerializer',

    jsonpCallbackParam: 'callback'
  };

  var useApplyAsync = false;
  /**
   * @ngdoc method
   * @name $httpProvider#useApplyAsync
   * @description
   *
   * Configure $http service to combine processing of multiple http responses received at around
   * the same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in
   * significant performance improvement for bigger applications that make many HTTP requests
   * concurrently (common during application bootstrap).
   *
   * Defaults to false. If no value is specified, returns the current configured value.
   *
   * @param {boolean=} value If true, when requests are loaded, they will schedule a deferred
   *    "apply" on the next tick, giving time for subsequent requests in a roughly ~10ms window
   *    to load and share the same digest cycle.
   *
   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.
   *    otherwise, returns the current configured value.
   **/
  this.useApplyAsync = function(value) {
    if (isDefined(value)) {
      useApplyAsync = !!value;
      return this;
    }
    return useApplyAsync;
  };

  /**
   * @ngdoc property
   * @name $httpProvider#interceptors
   * @description
   *
   * Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}
   * pre-processing of request or postprocessing of responses.
   *
   * These service factories are ordered by request, i.e. they are applied in the same order as the
   * array, on request, but reverse order, on response.
   *
   * {@link ng.$http#interceptors Interceptors detailed info}
   **/
  var interceptorFactories = this.interceptors = [];

  this.$get = ['$browser', '$httpBackend', '$$cookieReader', '$cacheFactory', '$rootScope', '$q', '$injector', '$sce',
      function($browser, $httpBackend, $$cookieReader, $cacheFactory, $rootScope, $q, $injector, $sce) {

    var defaultCache = $cacheFactory('$http');

    /**
     * Make sure that default param serializer is exposed as a function
     */
    defaults.paramSerializer = isString(defaults.paramSerializer) ?
      $injector.get(defaults.paramSerializer) : defaults.paramSerializer;

    /**
     * Interceptors stored in reverse order. Inner interceptors before outer interceptors.
     * The reversal is needed so that we can build up the interception chain around the
     * server request.
     */
    var reversedInterceptors = [];

    forEach(interceptorFactories, function(interceptorFactory) {
      reversedInterceptors.unshift(isString(interceptorFactory)
          ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));
    });

    /**
     * @ngdoc service
     * @kind function
     * @name $http
     * @requires ng.$httpBackend
     * @requires $cacheFactory
     * @requires $rootScope
     * @requires $q
     * @requires $injector
     *
     * @description
     * The `$http` service is a core Angular service that facilitates communication with the remote
     * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)
     * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).
     *
     * For unit testing applications that use `$http` service, see
     * {@link ngMock.$httpBackend $httpBackend mock}.
     *
     * For a higher level of abstraction, please check out the {@link ngResource.$resource
     * $resource} service.
     *
     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by
     * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage
     * it is important to familiarize yourself with these APIs and the guarantees they provide.
     *
     *
     * ## General usage
     * The `$http` service is a function which takes a single argument — a {@link $http#usage configuration object} —
     * that is used to generate an HTTP request and returns  a {@link ng.$q promise}.
     *
     * ```js
     *   // Simple GET request example:
     *   $http({
     *     method: 'GET',
     *     url: '/someUrl'
     *   }).then(function successCallback(response) {
     *       // this callback will be called asynchronously
     *       // when the response is available
     *     }, function errorCallback(response) {
     *       // called asynchronously if an error occurs
     *       // or server returns response with an error status.
     *     });
     * ```
     *
     * The response object has these properties:
     *
     *   - **data** – `{string|Object}` – The response body transformed with the transform
     *     functions.
     *   - **status** – `{number}` – HTTP status code of the response.
     *   - **headers** – `{function([headerName])}` – Header getter function.
     *   - **config** – `{Object}` – The configuration object that was used to generate the request.
     *   - **statusText** – `{string}` – HTTP status text of the response.
     *
     * A response status code between 200 and 299 is considered a success status and will result in
     * the success callback being called. Any response status code outside of that range is
     * considered an error status and will result in the error callback being called.
     * Also, status codes less than -1 are normalized to zero. -1 usually means the request was
     * aborted, e.g. using a `config.timeout`.
     * Note that if the response is a redirect, XMLHttpRequest will transparently follow it, meaning
     * that the outcome (success or error) will be determined by the final response status code.
     *
     *
     * ## Shortcut methods
     *
     * Shortcut methods are also available. All shortcut methods require passing in the URL, and
     * request data must be passed in for POST/PUT requests. An optional config can be passed as the
     * last argument.
     *
     * ```js
     *   $http.get('/someUrl', config).then(successCallback, errorCallback);
     *   $http.post('/someUrl', data, config).then(successCallback, errorCallback);
     * ```
     *
     * Complete list of shortcut methods:
     *
     * - {@link ng.$http#get $http.get}
     * - {@link ng.$http#head $http.head}
     * - {@link ng.$http#post $http.post}
     * - {@link ng.$http#put $http.put}
     * - {@link ng.$http#delete $http.delete}
     * - {@link ng.$http#jsonp $http.jsonp}
     * - {@link ng.$http#patch $http.patch}
     *
     *
     * ## Writing Unit Tests that use $http
     * When unit testing (using {@link ngMock ngMock}), it is necessary to call
     * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending
     * request using trained responses.
     *
     * ```
     * $httpBackend.expectGET(...);
     * $http.get(...);
     * $httpBackend.flush();
     * ```
     *
     * ## Setting HTTP Headers
     *
     * The $http service will automatically add certain HTTP headers to all requests. These defaults
     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration
     * object, which currently contains this default configuration:
     *
     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):
     *   - <code>Accept: application/json, text/plain, \*&#65279;/&#65279;\*</code>
     * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)
     *   - `Content-Type: application/json`
     * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)
     *   - `Content-Type: application/json`
     *
     * To add or overwrite these defaults, simply add or remove a property from these configuration
     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object
     * with the lowercased HTTP method name as the key, e.g.
     * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }`.
     *
     * The defaults can also be set at runtime via the `$http.defaults` object in the same
     * fashion. For example:
     *
     * ```
     * module.run(function($http) {
     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w';
     * });
     * ```
     *
     * In addition, you can supply a `headers` property in the config object passed when
     * calling `$http(config)`, which overrides the defaults without changing them globally.
     *
     * To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,
     * Use the `headers` property, setting the desired header to `undefined`. For example:
     *
     * ```js
     * var req = {
     *  method: 'POST',
     *  url: 'http://example.com',
     *  headers: {
     *    'Content-Type': undefined
     *  },
     *  data: { test: 'test' }
     * }
     *
     * $http(req).then(function(){...}, function(){...});
     * ```
     *
     * ## Transforming Requests and Responses
     *
     * Both requests and responses can be transformed using transformation functions: `transformRequest`
     * and `transformResponse`. These properties can be a single function that returns
     * the transformed value (`function(data, headersGetter, status)`) or an array of such transformation functions,
     * which allows you to `push` or `unshift` a new transformation function into the transformation chain.
     *
     * <div class="alert alert-warning">
     * **Note:** Angular does not make a copy of the `data` parameter before it is passed into the `transformRequest` pipeline.
     * That means changes to the properties of `data` are not local to the transform function (since Javascript passes objects by reference).
     * For example, when calling `$http.get(url, $scope.myObject)`, modifications to the object's properties in a transformRequest
     * function will be reflected on the scope and in any templates where the object is data-bound.
     * To prevent this, transform functions should have no side-effects.
     * If you need to modify properties, it is recommended to make a copy of the data, or create new object to return.
     * </div>
     *
     * ### Default Transformations
     *
     * The `$httpProvider` provider and `$http` service expose `defaults.transformRequest` and
     * `defaults.transformResponse` properties. If a request does not provide its own transformations
     * then these will be applied.
     *
     * You can augment or replace the default transformations by modifying these properties by adding to or
     * replacing the array.
     *
     * Angular provides the following default transformations:
     *
     * Request transformations (`$httpProvider.defaults.transformRequest` and `$http.defaults.transformRequest`):
     *
     * - If the `data` property of the request configuration object contains an object, serialize it
     *   into JSON format.
     *
     * Response transformations (`$httpProvider.defaults.transformResponse` and `$http.defaults.transformResponse`):
     *
     *  - If XSRF prefix is detected, strip it (see Security Considerations section below).
     *  - If JSON response is detected, deserialize it using a JSON parser.
     *
     *
     * ### Overriding the Default Transformations Per Request
     *
     * If you wish to override the request/response transformations only for a single request then provide
     * `transformRequest` and/or `transformResponse` properties on the configuration object passed
     * into `$http`.
     *
     * Note that if you provide these properties on the config object the default transformations will be
     * overwritten. If you wish to augment the default transformations then you must include them in your
     * local transformation array.
     *
     * The following code demonstrates adding a new response transformation to be run after the default response
     * transformations have been run.
     *
     * ```js
     * function appendTransform(defaults, transform) {
     *
     *   // We can't guarantee that the default transformation is an array
     *   defaults = angular.isArray(defaults) ? defaults : [defaults];
     *
     *   // Append the new transformation to the defaults
     *   return defaults.concat(transform);
     * }
     *
     * $http({
     *   url: '...',
     *   method: 'GET',
     *   transformResponse: appendTransform($http.defaults.transformResponse, function(value) {
     *     return doTransform(value);
     *   })
     * });
     * ```
     *
     *
     * ## Caching
     *
     * {@link ng.$http `$http`} responses are not cached by default. To enable caching, you must
     * set the config.cache value or the default cache value to TRUE or to a cache object (created
     * with {@link ng.$cacheFactory `$cacheFactory`}). If defined, the value of config.cache takes
     * precedence over the default cache value.
     *
     * In order to:
     *   * cache all responses - set the default cache value to TRUE or to a cache object
     *   * cache a specific response - set config.cache value to TRUE or to a cache object
     *
     * If caching is enabled, but neither the default cache nor config.cache are set to a cache object,
     * then the default `$cacheFactory("$http")` object is used.
     *
     * The default cache value can be set by updating the
     * {@link ng.$http#defaults `$http.defaults.cache`} property or the
     * {@link $httpProvider#defaults `$httpProvider.defaults.cache`} property.
     *
     * When caching is enabled, {@link ng.$http `$http`} stores the response from the server using
     * the relevant cache object. The next time the same request is made, the response is returned
     * from the cache without sending a request to the server.
     *
     * Take note that:
     *
     *   * Only GET and JSONP requests are cached.
     *   * The cache key is the request URL including search parameters; headers are not considered.
     *   * Cached responses are returned asynchronously, in the same way as responses from the server.
     *   * If multiple identical requests are made using the same cache, which is not yet populated,
     *     one request will be made to the server and remaining requests will return the same response.
     *   * A cache-control header on the response does not affect if or how responses are cached.
     *
     *
     * ## Interceptors
     *
     * Before you start creating interceptors, be sure to understand the
     * {@link ng.$q $q and deferred/promise APIs}.
     *
     * For purposes of global error handling, authentication, or any kind of synchronous or
     * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be
     * able to intercept requests before they are handed to the server and
     * responses before they are handed over to the application code that
     * initiated these requests. The interceptors leverage the {@link ng.$q
     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.
     *
     * The interceptors are service factories that are registered with the `$httpProvider` by
     * adding them to the `$httpProvider.interceptors` array. The factory is called and
     * injected with dependencies (if specified) and returns the interceptor.
     *
     * There are two kinds of interceptors (and two kinds of rejection interceptors):
     *
     *   * `request`: interceptors get called with a http {@link $http#usage config} object. The function is free to
     *     modify the `config` object or create a new one. The function needs to return the `config`
     *     object directly, or a promise containing the `config` or a new `config` object.
     *   * `requestError`: interceptor gets called when a previous interceptor threw an error or
     *     resolved with a rejection.
     *   * `response`: interceptors get called with http `response` object. The function is free to
     *     modify the `response` object or create a new one. The function needs to return the `response`
     *     object directly, or as a promise containing the `response` or a new `response` object.
     *   * `responseError`: interceptor gets called when a previous interceptor threw an error or
     *     resolved with a rejection.
     *
     *
     * ```js
     *   // register the interceptor as a service
     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
     *     return {
     *       // optional method
     *       'request': function(config) {
     *         // do something on success
     *         return config;
     *       },
     *
     *       // optional method
     *      'requestError': function(rejection) {
     *         // do something on error
     *         if (canRecover(rejection)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(rejection);
     *       },
     *
     *
     *
     *       // optional method
     *       'response': function(response) {
     *         // do something on success
     *         return response;
     *       },
     *
     *       // optional method
     *      'responseError': function(rejection) {
     *         // do something on error
     *         if (canRecover(rejection)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(rejection);
     *       }
     *     };
     *   });
     *
     *   $httpProvider.interceptors.push('myHttpInterceptor');
     *
     *
     *   // alternatively, register the interceptor via an anonymous factory
     *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {
     *     return {
     *      'request': function(config) {
     *          // same as above
     *       },
     *
     *       'response': function(response) {
     *          // same as above
     *       }
     *     };
     *   });
     * ```
     *
     * ## Security Considerations
     *
     * When designing web applications, consider security threats from:
     *
     * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
     * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)
     *
     * Both server and the client must cooperate in order to eliminate these threats. Angular comes
     * pre-configured with strategies that address these issues, but for this to work backend server
     * cooperation is required.
     *
     * ### JSON Vulnerability Protection
     *
     * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
     * allows third party website to turn your JSON resource URL into
     * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To
     * counter this your server can prefix all JSON requests with following string `")]}',\n"`.
     * Angular will automatically strip the prefix before processing it as JSON.
     *
     * For example if your server needs to return:
     * ```js
     * ['one','two']
     * ```
     *
     * which is vulnerable to attack, your server can return:
     * ```js
     * )]}',
     * ['one','two']
     * ```
     *
     * Angular will strip the prefix, before processing the JSON.
     *
     *
     * ### Cross Site Request Forgery (XSRF) Protection
     *
     * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is an attack technique by
     * which the attacker can trick an authenticated user into unknowingly executing actions on your
     * website. Angular provides a mechanism to counter XSRF. When performing XHR requests, the
     * $http service reads a token from a cookie (by default, `XSRF-TOKEN`) and sets it as an HTTP
     * header (`X-XSRF-TOKEN`). Since only JavaScript that runs on your domain could read the
     * cookie, your server can be assured that the XHR came from JavaScript running on your domain.
     * The header will not be set for cross-domain requests.
     *
     * To take advantage of this, your server needs to set a token in a JavaScript readable session
     * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the
     * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure
     * that only JavaScript running on your domain could have sent the request. The token must be
     * unique for each user and must be verifiable by the server (to prevent the JavaScript from
     * making up its own tokens). We recommend that the token is a digest of your site's
     * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)
     * for added security.
     *
     * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName
     * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,
     * or the per-request config object.
     *
     * In order to prevent collisions in environments where multiple Angular apps share the
     * same domain or subdomain, we recommend that each application uses unique cookie name.
     *
     * @param {object} config Object describing the request to be made and how it should be
     *    processed. The object has following properties:
     *
     *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)
     *    - **url** – `{string|TrustedObject}` – Absolute or relative URL of the resource that is being requested;
     *      or an object created by a call to `$sce.trustAsResourceUrl(url)`.
     *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be serialized
     *      with the `paramSerializer` and appended as GET parameters.
     *    - **data** – `{string|Object}` – Data to be sent as the request message data.
     *    - **headers** – `{Object}` – Map of strings or functions which return strings representing
     *      HTTP headers to send to the server. If the return value of a function is null, the
     *      header will not be sent. Functions accept a config object as an argument.
     *    - **eventHandlers** - `{Object}` - Event listeners to be bound to the XMLHttpRequest object.
     *      To bind events to the XMLHttpRequest upload object, use `uploadEventHandlers`.
     *      The handler will be called in the context of a `$apply` block.
     *    - **uploadEventHandlers** - `{Object}` - Event listeners to be bound to the XMLHttpRequest upload
     *      object. To bind events to the XMLHttpRequest object, use `eventHandlers`.
     *      The handler will be called in the context of a `$apply` block.
     *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.
     *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.
     *    - **transformRequest** –
     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
     *      transform function or an array of such functions. The transform function takes the http
     *      request body and headers and returns its transformed (typically serialized) version.
     *      See {@link ng.$http#overriding-the-default-transformations-per-request
     *      Overriding the Default Transformations}
     *    - **transformResponse** –
     *      `{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` –
     *      transform function or an array of such functions. The transform function takes the http
     *      response body, headers and status and returns its transformed (typically deserialized) version.
     *      See {@link ng.$http#overriding-the-default-transformations-per-request
     *      Overriding the Default Transformations}
     *    - **paramSerializer** - `{string|function(Object<string,string>):string}` - A function used to
     *      prepare the string representation of request parameters (specified as an object).
     *      If specified as string, it is interpreted as function registered with the
     *      {@link $injector $injector}, which means you can create your own serializer
     *      by registering it as a {@link auto.$provide#service service}.
     *      The default serializer is the {@link $httpParamSerializer $httpParamSerializer};
     *      alternatively, you can use the {@link $httpParamSerializerJQLike $httpParamSerializerJQLike}
     *    - **cache** – `{boolean|Object}` – A boolean value or object created with
     *      {@link ng.$cacheFactory `$cacheFactory`} to enable or disable caching of the HTTP response.
     *      See {@link $http#caching $http Caching} for more information.
     *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}
     *      that should abort the request when resolved.
     *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the
     *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)
     *      for more information.
     *    - **responseType** - `{string}` - see
     *      [XMLHttpRequest.responseType](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#xmlhttprequest-responsetype).
     *
     * @returns {HttpPromise} Returns a {@link ng.$q `Promise}` that will be resolved to a response object
     *                        when the request succeeds or fails.
     *
     *
     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending
     *   requests. This is primarily meant to be used for debugging purposes.
     *
     *
     * @example
<example module="httpExample" name="http-service">
<file name="index.html">
  <div ng-controller="FetchController">
    <select ng-model="method" aria-label="Request method">
      <option>GET</option>
      <option>JSONP</option>
    </select>
    <input type="text" ng-model="url" size="80" aria-label="URL" />
    <button id="fetchbtn" ng-click="fetch()">fetch</button><br>
    <button id="samplegetbtn" ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>
    <button id="samplejsonpbtn"
      ng-click="updateModel('JSONP',
                    'https://angularjs.org/greet.php?name=Super%20Hero')">
      Sample JSONP
    </button>
    <button id="invalidjsonpbtn"
      ng-click="updateModel('JSONP', 'https://angularjs.org/doesntexist')">
        Invalid JSONP
      </button>
    <pre>http status code: {{status}}</pre>
    <pre>http response data: {{data}}</pre>
  </div>
</file>
<file name="script.js">
  angular.module('httpExample', [])
    .config(['$sceDelegateProvider', function($sceDelegateProvider) {
      // We must whitelist the JSONP endpoint that we are using to show that we trust it
      $sceDelegateProvider.resourceUrlWhitelist([
        'self',
        'https://angularjs.org/**'
      ]);
    }])
    .controller('FetchController', ['$scope', '$http', '$templateCache',
      function($scope, $http, $templateCache) {
        $scope.method = 'GET';
        $scope.url = 'http-hello.html';

        $scope.fetch = function() {
          $scope.code = null;
          $scope.response = null;

          $http({method: $scope.method, url: $scope.url, cache: $templateCache}).
            then(function(response) {
              $scope.status = response.status;
              $scope.data = response.data;
            }, function(response) {
              $scope.data = response.data || 'Request failed';
              $scope.status = response.status;
          });
        };

        $scope.updateModel = function(method, url) {
          $scope.method = method;
          $scope.url = url;
        };
      }]);
</file>
<file name="http-hello.html">
  Hello, $http!
</file>
<file name="protractor.js" type="protractor">
  var status = element(by.binding('status'));
  var data = element(by.binding('data'));
  var fetchBtn = element(by.id('fetchbtn'));
  var sampleGetBtn = element(by.id('samplegetbtn'));
  var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));

  it('should make an xhr GET request', function() {
    sampleGetBtn.click();
    fetchBtn.click();
    expect(status.getText()).toMatch('200');
    expect(data.getText()).toMatch(/Hello, \$http!/);
  });

// Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185
// it('should make a JSONP request to angularjs.org', function() {
//   var sampleJsonpBtn = element(by.id('samplejsonpbtn'));
//   sampleJsonpBtn.click();
//   fetchBtn.click();
//   expect(status.getText()).toMatch('200');
//   expect(data.getText()).toMatch(/Super Hero!/);
// });

  it('should make JSONP request to invalid URL and invoke the error handler',
      function() {
    invalidJsonpBtn.click();
    fetchBtn.click();
    expect(status.getText()).toMatch('0');
    expect(data.getText()).toMatch('Request failed');
  });
</file>
</example>
     */
    function $http(requestConfig) {

      if (!isObject(requestConfig)) {
        throw minErr('$http')('badreq', 'Http request configuration must be an object.  Received: {0}', requestConfig);
      }

      if (!isString($sce.valueOf(requestConfig.url))) {
        throw minErr('$http')('badreq', 'Http request configuration url must be a string or a $sce trusted object.  Received: {0}', requestConfig.url);
      }

      var config = extend({
        method: 'get',
        transformRequest: defaults.transformRequest,
        transformResponse: defaults.transformResponse,
        paramSerializer: defaults.paramSerializer,
        jsonpCallbackParam: defaults.jsonpCallbackParam
      }, requestConfig);

      config.headers = mergeHeaders(requestConfig);
      config.method = uppercase(config.method);
      config.paramSerializer = isString(config.paramSerializer) ?
          $injector.get(config.paramSerializer) : config.paramSerializer;

      $browser.$$incOutstandingRequestCount();

      var requestInterceptors = [];
      var responseInterceptors = [];
      var promise = $q.resolve(config);

      // apply interceptors
      forEach(reversedInterceptors, function(interceptor) {
        if (interceptor.request || interceptor.requestError) {
          requestInterceptors.unshift(interceptor.request, interceptor.requestError);
        }
        if (interceptor.response || interceptor.responseError) {
          responseInterceptors.push(interceptor.response, interceptor.responseError);
        }
      });

      promise = chainInterceptors(promise, requestInterceptors);
      promise = promise.then(serverRequest);
      promise = chainInterceptors(promise, responseInterceptors);
      promise = promise.finally(completeOutstandingRequest);

      return promise;


      function chainInterceptors(promise, interceptors) {
        for (var i = 0, ii = interceptors.length; i < ii;) {
          var thenFn = interceptors[i++];
          var rejectFn = interceptors[i++];

          promise = promise.then(thenFn, rejectFn);
        }

        interceptors.length = 0;

        return promise;
      }

      function completeOutstandingRequest() {
        $browser.$$completeOutstandingRequest(noop);
      }

      function executeHeaderFns(headers, config) {
        var headerContent, processedHeaders = {};

        forEach(headers, function(headerFn, header) {
          if (isFunction(headerFn)) {
            headerContent = headerFn(config);
            if (headerContent != null) {
              processedHeaders[header] = headerContent;
            }
          } else {
            processedHeaders[header] = headerFn;
          }
        });

        return processedHeaders;
      }

      function mergeHeaders(config) {
        var defHeaders = defaults.headers,
            reqHeaders = extend({}, config.headers),
            defHeaderName, lowercaseDefHeaderName, reqHeaderName;

        defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);

        // using for-in instead of forEach to avoid unnecessary iteration after header has been found
        defaultHeadersIteration:
        for (defHeaderName in defHeaders) {
          lowercaseDefHeaderName = lowercase(defHeaderName);

          for (reqHeaderName in reqHeaders) {
            if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {
              continue defaultHeadersIteration;
            }
          }

          reqHeaders[defHeaderName] = defHeaders[defHeaderName];
        }

        // execute if header value is a function for merged headers
        return executeHeaderFns(reqHeaders, shallowCopy(config));
      }

      function serverRequest(config) {
        var headers = config.headers;
        var reqData = transformData(config.data, headersGetter(headers), undefined, config.transformRequest);

        // strip content-type if data is undefined
        if (isUndefined(reqData)) {
          forEach(headers, function(value, header) {
            if (lowercase(header) === 'content-type') {
              delete headers[header];
            }
          });
        }

        if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {
          config.withCredentials = defaults.withCredentials;
        }

        // send request
        return sendReq(config, reqData).then(transformResponse, transformResponse);
      }

      function transformResponse(response) {
        // make a copy since the response must be cacheable
        var resp = extend({}, response);
        resp.data = transformData(response.data, response.headers, response.status,
                                  config.transformResponse);
        return (isSuccess(response.status))
          ? resp
          : $q.reject(resp);
      }
    }

    $http.pendingRequests = [];

    /**
     * @ngdoc method
     * @name $http#get
     *
     * @description
     * Shortcut method to perform `GET` request.
     *
     * @param {string|TrustedObject} url Absolute or relative URL of the resource that is being requested;
     *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name $http#delete
     *
     * @description
     * Shortcut method to perform `DELETE` request.
     *
     * @param {string|TrustedObject} url Absolute or relative URL of the resource that is being requested;
     *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name $http#head
     *
     * @description
     * Shortcut method to perform `HEAD` request.
     *
     * @param {string|TrustedObject} url Absolute or relative URL of the resource that is being requested;
     *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name $http#jsonp
     *
     * @description
     * Shortcut method to perform `JSONP` request.
     *
     * Note that, since JSONP requests are sensitive because the response is given full access to the browser,
     * the url must be declared, via {@link $sce} as a trusted resource URL.
     * You can trust a URL by adding it to the whitelist via
     * {@link $sceDelegateProvider#resourceUrlWhitelist  `$sceDelegateProvider.resourceUrlWhitelist`} or
     * by explicitly trusting the URL via {@link $sce#trustAsResourceUrl `$sce.trustAsResourceUrl(url)`}.
     *
     * JSONP requests must specify a callback to be used in the response from the server. This callback
     * is passed as a query parameter in the request. You must specify the name of this parameter by
     * setting the `jsonpCallbackParam` property on the request config object.
     *
     * ```
     * $http.jsonp('some/trusted/url', {jsonpCallbackParam: 'callback'})
     * ```
     *
     * You can also specify a default callback parameter name in `$http.defaults.jsonpCallbackParam`.
     * Initially this is set to `'callback'`.
     *
     * <div class="alert alert-danger">
     * You can no longer use the `JSON_CALLBACK` string as a placeholder for specifying where the callback
     * parameter value should go.
     * </div>
     *
     * If you would like to customise where and how the callbacks are stored then try overriding
     * or decorating the {@link $jsonpCallbacks} service.
     *
     * @param {string|TrustedObject} url Absolute or relative URL of the resource that is being requested;
     *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */
    createShortMethods('get', 'delete', 'head', 'jsonp');

    /**
     * @ngdoc method
     * @name $http#post
     *
     * @description
     * Shortcut method to perform `POST` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {*} data Request content
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name $http#put
     *
     * @description
     * Shortcut method to perform `PUT` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {*} data Request content
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

     /**
      * @ngdoc method
      * @name $http#patch
      *
      * @description
      * Shortcut method to perform `PATCH` request.
      *
      * @param {string} url Relative or absolute URL specifying the destination of the request
      * @param {*} data Request content
      * @param {Object=} config Optional configuration object
      * @returns {HttpPromise} Future object
      */
    createShortMethodsWithData('post', 'put', 'patch');

        /**
         * @ngdoc property
         * @name $http#defaults
         *
         * @description
         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of
         * default headers, withCredentials as well as request and response transformations.
         *
         * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.
         */
    $http.defaults = defaults;


    return $http;


    function createShortMethods(names) {
      forEach(arguments, function(name) {
        $http[name] = function(url, config) {
          return $http(extend({}, config || {}, {
            method: name,
            url: url
          }));
        };
      });
    }


    function createShortMethodsWithData(name) {
      forEach(arguments, function(name) {
        $http[name] = function(url, data, config) {
          return $http(extend({}, config || {}, {
            method: name,
            url: url,
            data: data
          }));
        };
      });
    }


    /**
     * Makes the request.
     *
     * !!! ACCESSES CLOSURE VARS:
     * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests
     */
    function sendReq(config, reqData) {
      var deferred = $q.defer(),
          promise = deferred.promise,
          cache,
          cachedResp,
          reqHeaders = config.headers,
          isJsonp = lowercase(config.method) === 'jsonp',
          url = config.url;

      if (isJsonp) {
        // JSONP is a pretty sensitive operation where we're allowing a script to have full access to
        // our DOM and JS space.  So we require that the URL satisfies SCE.RESOURCE_URL.
        url = $sce.getTrustedResourceUrl(url);
      } else if (!isString(url)) {
        // If it is not a string then the URL must be a $sce trusted object
        url = $sce.valueOf(url);
      }

      url = buildUrl(url, config.paramSerializer(config.params));

      if (isJsonp) {
        // Check the url and add the JSONP callback placeholder
        url = sanitizeJsonpCallbackParam(url, config.jsonpCallbackParam);
      }

      $http.pendingRequests.push(config);
      promise.then(removePendingReq, removePendingReq);

      if ((config.cache || defaults.cache) && config.cache !== false &&
          (config.method === 'GET' || config.method === 'JSONP')) {
        cache = isObject(config.cache) ? config.cache
            : isObject(/** @type {?} */ (defaults).cache)
              ? /** @type {?} */ (defaults).cache
              : defaultCache;
      }

      if (cache) {
        cachedResp = cache.get(url);
        if (isDefined(cachedResp)) {
          if (isPromiseLike(cachedResp)) {
            // cached request has already been sent, but there is no response yet
            cachedResp.then(resolvePromiseWithResult, resolvePromiseWithResult);
          } else {
            // serving from cache
            if (isArray(cachedResp)) {
              resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3]);
            } else {
              resolvePromise(cachedResp, 200, {}, 'OK');
            }
          }
        } else {
          // put the promise for the non-transformed response into cache as a placeholder
          cache.put(url, promise);
        }
      }


      // if we won't have the response in cache, set the xsrf headers and
      // send the request to the backend
      if (isUndefined(cachedResp)) {
        var xsrfValue = urlIsSameOrigin(config.url)
            ? $$cookieReader()[config.xsrfCookieName || defaults.xsrfCookieName]
            : undefined;
        if (xsrfValue) {
          reqHeaders[(config.xsrfHeaderName || defaults.xsrfHeaderName)] = xsrfValue;
        }

        $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout,
            config.withCredentials, config.responseType,
            createApplyHandlers(config.eventHandlers),
            createApplyHandlers(config.uploadEventHandlers));
      }

      return promise;

      function createApplyHandlers(eventHandlers) {
        if (eventHandlers) {
          var applyHandlers = {};
          forEach(eventHandlers, function(eventHandler, key) {
            applyHandlers[key] = function(event) {
              if (useApplyAsync) {
                $rootScope.$applyAsync(callEventHandler);
              } else if ($rootScope.$$phase) {
                callEventHandler();
              } else {
                $rootScope.$apply(callEventHandler);
              }

              function callEventHandler() {
                eventHandler(event);
              }
            };
          });
          return applyHandlers;
        }
      }


      /**
       * Callback registered to $httpBackend():
       *  - caches the response if desired
       *  - resolves the raw $http promise
       *  - calls $apply
       */
      function done(status, response, headersString, statusText) {
        if (cache) {
          if (isSuccess(status)) {
            cache.put(url, [status, response, parseHeaders(headersString), statusText]);
          } else {
            // remove promise from the cache
            cache.remove(url);
          }
        }

        function resolveHttpPromise() {
          resolvePromise(response, status, headersString, statusText);
        }

        if (useApplyAsync) {
          $rootScope.$applyAsync(resolveHttpPromise);
        } else {
          resolveHttpPromise();
          if (!$rootScope.$$phase) $rootScope.$apply();
        }
      }


      /**
       * Resolves the raw $http promise.
       */
      function resolvePromise(response, status, headers, statusText) {
        //status: HTTP response status code, 0, -1 (aborted by timeout / promise)
        status = status >= -1 ? status : 0;

        (isSuccess(status) ? deferred.resolve : deferred.reject)({
          data: response,
          status: status,
          headers: headersGetter(headers),
          config: config,
          statusText: statusText
        });
      }

      function resolvePromiseWithResult(result) {
        resolvePromise(result.data, result.status, shallowCopy(result.headers()), result.statusText);
      }

      function removePendingReq() {
        var idx = $http.pendingRequests.indexOf(config);
        if (idx !== -1) $http.pendingRequests.splice(idx, 1);
      }
    }


    function buildUrl(url, serializedParams) {
      if (serializedParams.length > 0) {
        url += ((url.indexOf('?') === -1) ? '?' : '&') + serializedParams;
      }
      return url;
    }

    function sanitizeJsonpCallbackParam(url, key) {
      if (/[&?][^=]+=JSON_CALLBACK/.test(url)) {
        // Throw if the url already contains a reference to JSON_CALLBACK
        throw $httpMinErr('badjsonp', 'Illegal use of JSON_CALLBACK in url, "{0}"', url);
      }

      var callbackParamRegex = new RegExp('[&?]' + key + '=');
      if (callbackParamRegex.test(url)) {
        // Throw if the callback param was already provided
        throw $httpMinErr('badjsonp', 'Illegal use of callback param, "{0}", in url, "{1}"', key, url);
      }

      // Add in the JSON_CALLBACK callback param value
      url += ((url.indexOf('?') === -1) ? '?' : '&') + key + '=JSON_CALLBACK';

      return url;
    }
  }];
}

/**
 * @ngdoc service
 * @name $xhrFactory
 * @this
 *
 * @description
 * Factory function used to create XMLHttpRequest objects.
 *
 * Replace or decorate this service to create your own custom XMLHttpRequest objects.
 *
 * ```
 * angular.module('myApp', [])
 * .factory('$xhrFactory', function() {
 *   return function createXhr(method, url) {
 *     return new window.XMLHttpRequest({mozSystem: true});
 *   };
 * });
 * ```
 *
 * @param {string} method HTTP method of the request (GET, POST, PUT, ..)
 * @param {string} url URL of the request.
 */
function $xhrFactoryProvider() {
  this.$get = function() {
    return function createXhr() {
      return new window.XMLHttpRequest();
    };
  };
}

/**
 * @ngdoc service
 * @name $httpBackend
 * @requires $jsonpCallbacks
 * @requires $document
 * @requires $xhrFactory
 * @this
 *
 * @description
 * HTTP backend used by the {@link ng.$http service} that delegates to
 * XMLHttpRequest object or JSONP and deals with browser incompatibilities.
 *
 * You should never need to use this service directly, instead use the higher-level abstractions:
 * {@link ng.$http $http} or {@link ngResource.$resource $resource}.
 *
 * During testing this implementation is swapped with {@link ngMock.$httpBackend mock
 * $httpBackend} which can be trained with responses.
 */
function $HttpBackendProvider() {
  this.$get = ['$browser', '$jsonpCallbacks', '$document', '$xhrFactory', function($browser, $jsonpCallbacks, $document, $xhrFactory) {
    return createHttpBackend($browser, $xhrFactory, $browser.defer, $jsonpCallbacks, $document[0]);
  }];
}

function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {
  // TODO(vojta): fix the signature
  return function(method, url, post, callback, headers, timeout, withCredentials, responseType, eventHandlers, uploadEventHandlers) {
    url = url || $browser.url();

    if (lowercase(method) === 'jsonp') {
      var callbackPath = callbacks.createCallback(url);
      var jsonpDone = jsonpReq(url, callbackPath, function(status, text) {
        // jsonpReq only ever sets status to 200 (OK), 404 (ERROR) or -1 (WAITING)
        var response = (status === 200) && callbacks.getResponse(callbackPath);
        completeRequest(callback, status, response, '', text);
        callbacks.removeCallback(callbackPath);
      });
    } else {

      var xhr = createXhr(method, url);

      xhr.open(method, url, true);
      forEach(headers, function(value, key) {
        if (isDefined(value)) {
            xhr.setRequestHeader(key, value);
        }
      });

      xhr.onload = function requestLoaded() {
        var statusText = xhr.statusText || '';

        // responseText is the old-school way of retrieving response (supported by IE9)
        // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
        var response = ('response' in xhr) ? xhr.response : xhr.responseText;

        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
        var status = xhr.status === 1223 ? 204 : xhr.status;

        // fix status code when it is 0 (0 status is undocumented).
        // Occurs when accessing file resources or on Android 4.1 stock browser
        // while retrieving files from application cache.
        if (status === 0) {
          status = response ? 200 : urlResolve(url).protocol === 'file' ? 404 : 0;
        }

        completeRequest(callback,
            status,
            response,
            xhr.getAllResponseHeaders(),
            statusText);
      };

      var requestError = function() {
        // The response is always empty
        // See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error
        completeRequest(callback, -1, null, null, '');
      };

      xhr.onerror = requestError;
      xhr.onabort = requestError;
      xhr.ontimeout = requestError;

      forEach(eventHandlers, function(value, key) {
          xhr.addEventListener(key, value);
      });

      forEach(uploadEventHandlers, function(value, key) {
        xhr.upload.addEventListener(key, value);
      });

      if (withCredentials) {
        xhr.withCredentials = true;
      }

      if (responseType) {
        try {
          xhr.responseType = responseType;
        } catch (e) {
          // WebKit added support for the json responseType value on 09/03/2013
          // https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are
          // known to throw when setting the value "json" as the response type. Other older
          // browsers implementing the responseType
          //
          // The json response type can be ignored if not supported, because JSON payloads are
          // parsed on the client-side regardless.
          if (responseType !== 'json') {
            throw e;
          }
        }
      }

      xhr.send(isUndefined(post) ? null : post);
    }

    if (timeout > 0) {
      var timeoutId = $browserDefer(timeoutRequest, timeout);
    } else if (isPromiseLike(timeout)) {
      timeout.then(timeoutRequest);
    }


    function timeoutRequest() {
      if (jsonpDone) {
        jsonpDone();
      }
      if (xhr) {
        xhr.abort();
      }
    }

    function completeRequest(callback, status, response, headersString, statusText) {
      // cancel timeout and subsequent timeout promise resolution
      if (isDefined(timeoutId)) {
        $browserDefer.cancel(timeoutId);
      }
      jsonpDone = xhr = null;

      callback(status, response, headersString, statusText);
    }
  };

  function jsonpReq(url, callbackPath, done) {
    url = url.replace('JSON_CALLBACK', callbackPath);
    // we can't use jQuery/jqLite here because jQuery does crazy stuff with script elements, e.g.:
    // - fetches local scripts via XHR and evals them
    // - adds and immediately removes script elements from the document
    var script = rawDocument.createElement('script'), callback = null;
    script.type = 'text/javascript';
    script.src = url;
    script.async = true;

    callback = function(event) {
      script.removeEventListener('load', callback);
      script.removeEventListener('error', callback);
      rawDocument.body.removeChild(script);
      script = null;
      var status = -1;
      var text = 'unknown';

      if (event) {
        if (event.type === 'load' && !callbacks.wasCalled(callbackPath)) {
          event = { type: 'error' };
        }
        text = event.type;
        status = event.type === 'error' ? 404 : 200;
      }

      if (done) {
        done(status, text);
      }
    };

    script.addEventListener('load', callback);
    script.addEventListener('error', callback);
    rawDocument.body.appendChild(script);
    return callback;
  }
}

var $interpolateMinErr = angular.$interpolateMinErr = minErr('$interpolate');
$interpolateMinErr.throwNoconcat = function(text) {
  throw $interpolateMinErr('noconcat',
      'Error while interpolating: {0}\nStrict Contextual Escaping disallows ' +
      'interpolations that concatenate multiple expressions when a trusted value is ' +
      'required.  See http://docs.angularjs.org/api/ng.$sce', text);
};

$interpolateMinErr.interr = function(text, err) {
  return $interpolateMinErr('interr', 'Can\'t interpolate: {0}\n{1}', text, err.toString());
};

/**
 * @ngdoc provider
 * @name $interpolateProvider
 * @this
 *
 * @description
 *
 * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.
 *
 * <div class="alert alert-danger">
 * This feature is sometimes used to mix different markup languages, e.g. to wrap an Angular
 * template within a Python Jinja template (or any other template language). Mixing templating
 * languages is **very dangerous**. The embedding template language will not safely escape Angular
 * expressions, so any user-controlled values in the template will cause Cross Site Scripting (XSS)
 * security bugs!
 * </div>
 *
 * @example
<example name="custom-interpolation-markup" module="customInterpolationApp">
<file name="index.html">
<script>
  var customInterpolationApp = angular.module('customInterpolationApp', []);

  customInterpolationApp.config(function($interpolateProvider) {
    $interpolateProvider.startSymbol('//');
    $interpolateProvider.endSymbol('//');
  });


  customInterpolationApp.controller('DemoController', function() {
      this.label = "This binding is brought you by // interpolation symbols.";
  });
</script>
<div ng-controller="DemoController as demo">
    //demo.label//
</div>
</file>
<file name="protractor.js" type="protractor">
  it('should interpolate binding with custom symbols', function() {
    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');
  });
</file>
</example>
 */
function $InterpolateProvider() {
  var startSymbol = '{{';
  var endSymbol = '}}';

  /**
   * @ngdoc method
   * @name $interpolateProvider#startSymbol
   * @description
   * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.
   *
   * @param {string=} value new value to set the starting symbol to.
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
   */
  this.startSymbol = function(value) {
    if (value) {
      startSymbol = value;
      return this;
    } else {
      return startSymbol;
    }
  };

  /**
   * @ngdoc method
   * @name $interpolateProvider#endSymbol
   * @description
   * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
   *
   * @param {string=} value new value to set the ending symbol to.
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
   */
  this.endSymbol = function(value) {
    if (value) {
      endSymbol = value;
      return this;
    } else {
      return endSymbol;
    }
  };


  this.$get = ['$parse', '$exceptionHandler', '$sce', function($parse, $exceptionHandler, $sce) {
    var startSymbolLength = startSymbol.length,
        endSymbolLength = endSymbol.length,
        escapedStartRegexp = new RegExp(startSymbol.replace(/./g, escape), 'g'),
        escapedEndRegexp = new RegExp(endSymbol.replace(/./g, escape), 'g');

    function escape(ch) {
      return '\\\\\\' + ch;
    }

    function unescapeText(text) {
      return text.replace(escapedStartRegexp, startSymbol).
        replace(escapedEndRegexp, endSymbol);
    }

    // TODO: this is the same as the constantWatchDelegate in parse.js
    function constantWatchDelegate(scope, listener, objectEquality, constantInterp) {
      var unwatch = scope.$watch(function constantInterpolateWatch(scope) {
        unwatch();
        return constantInterp(scope);
      }, listener, objectEquality);
      return unwatch;
    }

    /**
     * @ngdoc service
     * @name $interpolate
     * @kind function
     *
     * @requires $parse
     * @requires $sce
     *
     * @description
     *
     * Compiles a string with markup into an interpolation function. This service is used by the
     * HTML {@link ng.$compile $compile} service for data binding. See
     * {@link ng.$interpolateProvider $interpolateProvider} for configuring the
     * interpolation markup.
     *
     *
     * ```js
     *   var $interpolate = ...; // injected
     *   var exp = $interpolate('Hello {{name | uppercase}}!');
     *   expect(exp({name:'Angular'})).toEqual('Hello ANGULAR!');
     * ```
     *
     * `$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is
     * `true`, the interpolation function will return `undefined` unless all embedded expressions
     * evaluate to a value other than `undefined`.
     *
     * ```js
     *   var $interpolate = ...; // injected
     *   var context = {greeting: 'Hello', name: undefined };
     *
     *   // default "forgiving" mode
     *   var exp = $interpolate('{{greeting}} {{name}}!');
     *   expect(exp(context)).toEqual('Hello !');
     *
     *   // "allOrNothing" mode
     *   exp = $interpolate('{{greeting}} {{name}}!', false, null, true);
     *   expect(exp(context)).toBeUndefined();
     *   context.name = 'Angular';
     *   expect(exp(context)).toEqual('Hello Angular!');
     * ```
     *
     * `allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.
     *
     * #### Escaped Interpolation
     * $interpolate provides a mechanism for escaping interpolation markers. Start and end markers
     * can be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).
     * It will be rendered as a regular start/end marker, and will not be interpreted as an expression
     * or binding.
     *
     * This enables web-servers to prevent script injection attacks and defacing attacks, to some
     * degree, while also enabling code examples to work without relying on the
     * {@link ng.directive:ngNonBindable ngNonBindable} directive.
     *
     * **For security purposes, it is strongly encouraged that web servers escape user-supplied data,
     * replacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all
     * interpolation start/end markers with their escaped counterparts.**
     *
     * Escaped interpolation markers are only replaced with the actual interpolation markers in rendered
     * output when the $interpolate service processes the text. So, for HTML elements interpolated
     * by {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter
     * set to `true`, the interpolated text must contain an unescaped interpolation expression. As such,
     * this is typically useful only when user-data is used in rendering a template from the server, or
     * when otherwise untrusted data is used by a directive.
     *
     * <example name="interpolation">
     *  <file name="index.html">
     *    <div ng-init="username='A user'">
     *      <p ng-init="apptitle='Escaping demo'">{{apptitle}}: \{\{ username = "defaced value"; \}\}
     *        </p>
     *      <p><strong>{{username}}</strong> attempts to inject code which will deface the
     *        application, but fails to accomplish their task, because the server has correctly
     *        escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)
     *        characters.</p>
     *      <p>Instead, the result of the attempted script injection is visible, and can be removed
     *        from the database by an administrator.</p>
     *    </div>
     *  </file>
     * </example>
     *
     * @knownIssue
     * It is currently not possible for an interpolated expression to contain the interpolation end
     * symbol. For example, `{{ '}}' }}` will be incorrectly interpreted as `{{ ' }}` + `' }}`, i.e.
     * an interpolated expression consisting of a single-quote (`'`) and the `' }}` string.
     *
     * @knownIssue
     * All directives and components must use the standard `{{` `}}` interpolation symbols
     * in their templates. If you change the application interpolation symbols the {@link $compile}
     * service will attempt to denormalize the standard symbols to the custom symbols.
     * The denormalization process is not clever enough to know not to replace instances of the standard
     * symbols where they would not normally be treated as interpolation symbols. For example in the following
     * code snippet the closing braces of the literal object will get incorrectly denormalized:
     *
     * ```
     * <div data-context='{"context":{"id":3,"type":"page"}}">
     * ```
     *
     * The workaround is to ensure that such instances are separated by whitespace:
     * ```
     * <div data-context='{"context":{"id":3,"type":"page"} }">
     * ```
     *
     * See https://github.com/angular/angular.js/pull/14610#issuecomment-219401099 for more information.
     *
     * @param {string} text The text with markup to interpolate.
     * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have
     *    embedded expression in order to return an interpolation function. Strings with no
     *    embedded expression will return null for the interpolation function.
     * @param {string=} trustedContext when provided, the returned function passes the interpolated
     *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,
     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that
     *    provides Strict Contextual Escaping for details.
     * @param {boolean=} allOrNothing if `true`, then the returned function returns undefined
     *    unless all embedded expressions evaluate to a value other than `undefined`.
     * @returns {function(context)} an interpolation function which is used to compute the
     *    interpolated string. The function has these parameters:
     *
     * - `context`: evaluation context for all expressions embedded in the interpolated text
     */
    function $interpolate(text, mustHaveExpression, trustedContext, allOrNothing) {
      // Provide a quick exit and simplified result function for text with no interpolation
      if (!text.length || text.indexOf(startSymbol) === -1) {
        var constantInterp;
        if (!mustHaveExpression) {
          var unescapedText = unescapeText(text);
          constantInterp = valueFn(unescapedText);
          constantInterp.exp = text;
          constantInterp.expressions = [];
          constantInterp.$$watchDelegate = constantWatchDelegate;
        }
        return constantInterp;
      }

      allOrNothing = !!allOrNothing;
      var startIndex,
          endIndex,
          index = 0,
          expressions = [],
          parseFns = [],
          textLength = text.length,
          exp,
          concat = [],
          expressionPositions = [];

      while (index < textLength) {
        if (((startIndex = text.indexOf(startSymbol, index)) !== -1) &&
             ((endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) !== -1)) {
          if (index !== startIndex) {
            concat.push(unescapeText(text.substring(index, startIndex)));
          }
          exp = text.substring(startIndex + startSymbolLength, endIndex);
          expressions.push(exp);
          parseFns.push($parse(exp, parseStringifyInterceptor));
          index = endIndex + endSymbolLength;
          expressionPositions.push(concat.length);
          concat.push('');
        } else {
          // we did not find an interpolation, so we have to add the remainder to the separators array
          if (index !== textLength) {
            concat.push(unescapeText(text.substring(index)));
          }
          break;
        }
      }

      // Concatenating expressions makes it hard to reason about whether some combination of
      // concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a
      // single expression be used for iframe[src], object[src], etc., we ensure that the value
      // that's used is assigned or constructed by some JS code somewhere that is more testable or
      // make it obvious that you bound the value to some user controlled value.  This helps reduce
      // the load when auditing for XSS issues.
      if (trustedContext && concat.length > 1) {
          $interpolateMinErr.throwNoconcat(text);
      }

      if (!mustHaveExpression || expressions.length) {
        var compute = function(values) {
          for (var i = 0, ii = expressions.length; i < ii; i++) {
            if (allOrNothing && isUndefined(values[i])) return;
            concat[expressionPositions[i]] = values[i];
          }
          return concat.join('');
        };

        var getValue = function(value) {
          return trustedContext ?
            $sce.getTrusted(trustedContext, value) :
            $sce.valueOf(value);
        };

        return extend(function interpolationFn(context) {
            var i = 0;
            var ii = expressions.length;
            var values = new Array(ii);

            try {
              for (; i < ii; i++) {
                values[i] = parseFns[i](context);
              }

              return compute(values);
            } catch (err) {
              $exceptionHandler($interpolateMinErr.interr(text, err));
            }

          }, {
          // all of these properties are undocumented for now
          exp: text, //just for compatibility with regular watchers created via $watch
          expressions: expressions,
          $$watchDelegate: function(scope, listener) {
            var lastValue;
            return scope.$watchGroup(parseFns, /** @this */ function interpolateFnWatcher(values, oldValues) {
              var currValue = compute(values);
              if (isFunction(listener)) {
                listener.call(this, currValue, values !== oldValues ? lastValue : currValue, scope);
              }
              lastValue = currValue;
            });
          }
        });
      }

      function parseStringifyInterceptor(value) {
        try {
          value = getValue(value);
          return allOrNothing && !isDefined(value) ? value : stringify(value);
        } catch (err) {
          $exceptionHandler($interpolateMinErr.interr(text, err));
        }
      }
    }


    /**
     * @ngdoc method
     * @name $interpolate#startSymbol
     * @description
     * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.
     *
     * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change
     * the symbol.
     *
     * @returns {string} start symbol.
     */
    $interpolate.startSymbol = function() {
      return startSymbol;
    };


    /**
     * @ngdoc method
     * @name $interpolate#endSymbol
     * @description
     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
     *
     * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change
     * the symbol.
     *
     * @returns {string} end symbol.
     */
    $interpolate.endSymbol = function() {
      return endSymbol;
    };

    return $interpolate;
  }];
}

/** @this */
function $IntervalProvider() {
  this.$get = ['$rootScope', '$window', '$q', '$$q', '$browser',
       function($rootScope,   $window,   $q,   $$q,   $browser) {
    var intervals = {};


     /**
      * @ngdoc service
      * @name $interval
      *
      * @description
      * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`
      * milliseconds.
      *
      * The return value of registering an interval function is a promise. This promise will be
      * notified upon each tick of the interval, and will be resolved after `count` iterations, or
      * run indefinitely if `count` is not defined. The value of the notification will be the
      * number of iterations that have run.
      * To cancel an interval, call `$interval.cancel(promise)`.
      *
      * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to
      * move forward by `millis` milliseconds and trigger any functions scheduled to run in that
      * time.
      *
      * <div class="alert alert-warning">
      * **Note**: Intervals created by this service must be explicitly destroyed when you are finished
      * with them.  In particular they are not automatically destroyed when a controller's scope or a
      * directive's element are destroyed.
      * You should take this into consideration and make sure to always cancel the interval at the
      * appropriate moment.  See the example below for more details on how and when to do this.
      * </div>
      *
      * @param {function()} fn A function that should be called repeatedly. If no additional arguments
      *   are passed (see below), the function is called with the current iteration count.
      * @param {number} delay Number of milliseconds between each function call.
      * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat
      *   indefinitely.
      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
      * @param {...*=} Pass additional parameters to the executed function.
      * @returns {promise} A promise which will be notified on each iteration.
      *
      * @example
      * <example module="intervalExample" name="interval-service">
      * <file name="index.html">
      *   <script>
      *     angular.module('intervalExample', [])
      *       .controller('ExampleController', ['$scope', '$interval',
      *         function($scope, $interval) {
      *           $scope.format = 'M/d/yy h:mm:ss a';
      *           $scope.blood_1 = 100;
      *           $scope.blood_2 = 120;
      *
      *           var stop;
      *           $scope.fight = function() {
      *             // Don't start a new fight if we are already fighting
      *             if ( angular.isDefined(stop) ) return;
      *
      *             stop = $interval(function() {
      *               if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {
      *                 $scope.blood_1 = $scope.blood_1 - 3;
      *                 $scope.blood_2 = $scope.blood_2 - 4;
      *               } else {
      *                 $scope.stopFight();
      *               }
      *             }, 100);
      *           };
      *
      *           $scope.stopFight = function() {
      *             if (angular.isDefined(stop)) {
      *               $interval.cancel(stop);
      *               stop = undefined;
      *             }
      *           };
      *
      *           $scope.resetFight = function() {
      *             $scope.blood_1 = 100;
      *             $scope.blood_2 = 120;
      *           };
      *
      *           $scope.$on('$destroy', function() {
      *             // Make sure that the interval is destroyed too
      *             $scope.stopFight();
      *           });
      *         }])
      *       // Register the 'myCurrentTime' directive factory method.
      *       // We inject $interval and dateFilter service since the factory method is DI.
      *       .directive('myCurrentTime', ['$interval', 'dateFilter',
      *         function($interval, dateFilter) {
      *           // return the directive link function. (compile function not needed)
      *           return function(scope, element, attrs) {
      *             var format,  // date format
      *                 stopTime; // so that we can cancel the time updates
      *
      *             // used to update the UI
      *             function updateTime() {
      *               element.text(dateFilter(new Date(), format));
      *             }
      *
      *             // watch the expression, and update the UI on change.
      *             scope.$watch(attrs.myCurrentTime, function(value) {
      *               format = value;
      *               updateTime();
      *             });
      *
      *             stopTime = $interval(updateTime, 1000);
      *
      *             // listen on DOM destroy (removal) event, and cancel the next UI update
      *             // to prevent updating time after the DOM element was removed.
      *             element.on('$destroy', function() {
      *               $interval.cancel(stopTime);
      *             });
      *           }
      *         }]);
      *   </script>
      *
      *   <div>
      *     <div ng-controller="ExampleController">
      *       <label>Date format: <input ng-model="format"></label> <hr/>
      *       Current time is: <span my-current-time="format"></span>
      *       <hr/>
      *       Blood 1 : <font color='red'>{{blood_1}}</font>
      *       Blood 2 : <font color='red'>{{blood_2}}</font>
      *       <button type="button" data-ng-click="fight()">Fight</button>
      *       <button type="button" data-ng-click="stopFight()">StopFight</button>
      *       <button type="button" data-ng-click="resetFight()">resetFight</button>
      *     </div>
      *   </div>
      *
      * </file>
      * </example>
      */
    function interval(fn, delay, count, invokeApply) {
      var hasParams = arguments.length > 4,
          args = hasParams ? sliceArgs(arguments, 4) : [],
          setInterval = $window.setInterval,
          clearInterval = $window.clearInterval,
          iteration = 0,
          skipApply = (isDefined(invokeApply) && !invokeApply),
          deferred = (skipApply ? $$q : $q).defer(),
          promise = deferred.promise;

      count = isDefined(count) ? count : 0;

      promise.$$intervalId = setInterval(function tick() {
        if (skipApply) {
          $browser.defer(callback);
        } else {
          $rootScope.$evalAsync(callback);
        }
        deferred.notify(iteration++);

        if (count > 0 && iteration >= count) {
          deferred.resolve(iteration);
          clearInterval(promise.$$intervalId);
          delete intervals[promise.$$intervalId];
        }

        if (!skipApply) $rootScope.$apply();

      }, delay);

      intervals[promise.$$intervalId] = deferred;

      return promise;

      function callback() {
        if (!hasParams) {
          fn(iteration);
        } else {
          fn.apply(null, args);
        }
      }
    }


     /**
      * @ngdoc method
      * @name $interval#cancel
      *
      * @description
      * Cancels a task associated with the `promise`.
      *
      * @param {Promise=} promise returned by the `$interval` function.
      * @returns {boolean} Returns `true` if the task was successfully canceled.
      */
    interval.cancel = function(promise) {
      if (promise && promise.$$intervalId in intervals) {
        // Interval cancels should not report as unhandled promise.
        intervals[promise.$$intervalId].promise.catch(noop);
        intervals[promise.$$intervalId].reject('canceled');
        $window.clearInterval(promise.$$intervalId);
        delete intervals[promise.$$intervalId];
        return true;
      }
      return false;
    };

    return interval;
  }];
}

/**
 * @ngdoc service
 * @name $jsonpCallbacks
 * @requires $window
 * @description
 * This service handles the lifecycle of callbacks to handle JSONP requests.
 * Override this service if you wish to customise where the callbacks are stored and
 * how they vary compared to the requested url.
 */
var $jsonpCallbacksProvider = /** @this */ function() {
  this.$get = ['$window', function($window) {
    var callbacks = $window.angular.callbacks;
    var callbackMap = {};

    function createCallback(callbackId) {
      var callback = function(data) {
        callback.data = data;
        callback.called = true;
      };
      callback.id = callbackId;
      return callback;
    }

    return {
      /**
       * @ngdoc method
       * @name $jsonpCallbacks#createCallback
       * @param {string} url the url of the JSONP request
       * @returns {string} the callback path to send to the server as part of the JSONP request
       * @description
       * {@link $httpBackend} calls this method to create a callback and get hold of the path to the callback
       * to pass to the server, which will be used to call the callback with its payload in the JSONP response.
       */
      createCallback: function(url) {
        var callbackId = '_' + (callbacks.$$counter++).toString(36);
        var callbackPath = 'angular.callbacks.' + callbackId;
        var callback = createCallback(callbackId);
        callbackMap[callbackPath] = callbacks[callbackId] = callback;
        return callbackPath;
      },
      /**
       * @ngdoc method
       * @name $jsonpCallbacks#wasCalled
       * @param {string} callbackPath the path to the callback that was sent in the JSONP request
       * @returns {boolean} whether the callback has been called, as a result of the JSONP response
       * @description
       * {@link $httpBackend} calls this method to find out whether the JSONP response actually called the
       * callback that was passed in the request.
       */
      wasCalled: function(callbackPath) {
        return callbackMap[callbackPath].called;
      },
      /**
       * @ngdoc method
       * @name $jsonpCallbacks#getResponse
       * @param {string} callbackPath the path to the callback that was sent in the JSONP request
       * @returns {*} the data received from the response via the registered callback
       * @description
       * {@link $httpBackend} calls this method to get hold of the data that was provided to the callback
       * in the JSONP response.
       */
      getResponse: function(callbackPath) {
        return callbackMap[callbackPath].data;
      },
      /**
       * @ngdoc method
       * @name $jsonpCallbacks#removeCallback
       * @param {string} callbackPath the path to the callback that was sent in the JSONP request
       * @description
       * {@link $httpBackend} calls this method to remove the callback after the JSONP request has
       * completed or timed-out.
       */
      removeCallback: function(callbackPath) {
        var callback = callbackMap[callbackPath];
        delete callbacks[callback.id];
        delete callbackMap[callbackPath];
      }
    };
  }];
};

/**
 * @ngdoc service
 * @name $locale
 *
 * @description
 * $locale service provides localization rules for various Angular components. As of right now the
 * only public api is:
 *
 * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)
 */

var PATH_MATCH = /^([^?#]*)(\?([^#]*))?(#(.*))?$/,
    DEFAULT_PORTS = {'http': 80, 'https': 443, 'ftp': 21};
var $locationMinErr = minErr('$location');


/**
 * Encode path using encodeUriSegment, ignoring forward slashes
 *
 * @param {string} path Path to encode
 * @returns {string}
 */
function encodePath(path) {
  var segments = path.split('/'),
      i = segments.length;

  while (i--) {
    segments[i] = encodeUriSegment(segments[i]);
  }

  return segments.join('/');
}

function parseAbsoluteUrl(absoluteUrl, locationObj) {
  var parsedUrl = urlResolve(absoluteUrl);

  locationObj.$$protocol = parsedUrl.protocol;
  locationObj.$$host = parsedUrl.hostname;
  locationObj.$$port = toInt(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;
}

var DOUBLE_SLASH_REGEX = /^\s*[\\/]{2,}/;
function parseAppUrl(url, locationObj) {

  if (DOUBLE_SLASH_REGEX.test(url)) {
    throw $locationMinErr('badpath', 'Invalid url "{0}".', url);
  }

  var prefixed = (url.charAt(0) !== '/');
  if (prefixed) {
    url = '/' + url;
  }
  var match = urlResolve(url);
  locationObj.$$path = decodeURIComponent(prefixed && match.pathname.charAt(0) === '/' ?
      match.pathname.substring(1) : match.pathname);
  locationObj.$$search = parseKeyValue(match.search);
  locationObj.$$hash = decodeURIComponent(match.hash);

  // make sure path starts with '/';
  if (locationObj.$$path && locationObj.$$path.charAt(0) !== '/') {
    locationObj.$$path = '/' + locationObj.$$path;
  }
}

function startsWith(str, search) {
  return str.slice(0, search.length) === search;
}

/**
 *
 * @param {string} base
 * @param {string} url
 * @returns {string} returns text from `url` after `base` or `undefined` if it does not begin with
 *                   the expected string.
 */
function stripBaseUrl(base, url) {
  if (startsWith(url, base)) {
    return url.substr(base.length);
  }
}


function stripHash(url) {
  var index = url.indexOf('#');
  return index === -1 ? url : url.substr(0, index);
}

function trimEmptyHash(url) {
  return url.replace(/(#.+)|#$/, '$1');
}


function stripFile(url) {
  return url.substr(0, stripHash(url).lastIndexOf('/') + 1);
}

/* return the server only (scheme://host:port) */
function serverBase(url) {
  return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));
}


/**
 * LocationHtml5Url represents a URL
 * This object is exposed as $location service when HTML5 mode is enabled and supported
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} appBaseNoFile application base URL stripped of any filename
 * @param {string} basePrefix URL path prefix
 */
function LocationHtml5Url(appBase, appBaseNoFile, basePrefix) {
  this.$$html5 = true;
  basePrefix = basePrefix || '';
  parseAbsoluteUrl(appBase, this);


  /**
   * Parse given HTML5 (regular) URL string into properties
   * @param {string} url HTML5 URL
   * @private
   */
  this.$$parse = function(url) {
    var pathUrl = stripBaseUrl(appBaseNoFile, url);
    if (!isString(pathUrl)) {
      throw $locationMinErr('ipthprfx', 'Invalid url "{0}", missing path prefix "{1}".', url,
          appBaseNoFile);
    }

    parseAppUrl(pathUrl, this);

    if (!this.$$path) {
      this.$$path = '/';
    }

    this.$$compose();
  };

  /**
   * Compose url and update `absUrl` property
   * @private
   */
  this.$$compose = function() {
    var search = toKeyValue(this.$$search),
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
    this.$$absUrl = appBaseNoFile + this.$$url.substr(1); // first char is always '/'

    this.$$urlUpdatedByLocation = true;
  };

  this.$$parseLinkUrl = function(url, relHref) {
    if (relHref && relHref[0] === '#') {
      // special case for links to hash fragments:
      // keep the old url and only replace the hash fragment
      this.hash(relHref.slice(1));
      return true;
    }
    var appUrl, prevAppUrl;
    var rewrittenUrl;


    if (isDefined(appUrl = stripBaseUrl(appBase, url))) {
      prevAppUrl = appUrl;
      if (basePrefix && isDefined(appUrl = stripBaseUrl(basePrefix, appUrl))) {
        rewrittenUrl = appBaseNoFile + (stripBaseUrl('/', appUrl) || appUrl);
      } else {
        rewrittenUrl = appBase + prevAppUrl;
      }
    } else if (isDefined(appUrl = stripBaseUrl(appBaseNoFile, url))) {
      rewrittenUrl = appBaseNoFile + appUrl;
    } else if (appBaseNoFile === url + '/') {
      rewrittenUrl = appBaseNoFile;
    }
    if (rewrittenUrl) {
      this.$$parse(rewrittenUrl);
    }
    return !!rewrittenUrl;
  };
}


/**
 * LocationHashbangUrl represents URL
 * This object is exposed as $location service when developer doesn't opt into html5 mode.
 * It also serves as the base class for html5 mode fallback on legacy browsers.
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} appBaseNoFile application base URL stripped of any filename
 * @param {string} hashPrefix hashbang prefix
 */
function LocationHashbangUrl(appBase, appBaseNoFile, hashPrefix) {

  parseAbsoluteUrl(appBase, this);


  /**
   * Parse given hashbang URL into properties
   * @param {string} url Hashbang URL
   * @private
   */
  this.$$parse = function(url) {
    var withoutBaseUrl = stripBaseUrl(appBase, url) || stripBaseUrl(appBaseNoFile, url);
    var withoutHashUrl;

    if (!isUndefined(withoutBaseUrl) && withoutBaseUrl.charAt(0) === '#') {

      // The rest of the URL starts with a hash so we have
      // got either a hashbang path or a plain hash fragment
      withoutHashUrl = stripBaseUrl(hashPrefix, withoutBaseUrl);
      if (isUndefined(withoutHashUrl)) {
        // There was no hashbang prefix so we just have a hash fragment
        withoutHashUrl = withoutBaseUrl;
      }

    } else {
      // There was no hashbang path nor hash fragment:
      // If we are in HTML5 mode we use what is left as the path;
      // Otherwise we ignore what is left
      if (this.$$html5) {
        withoutHashUrl = withoutBaseUrl;
      } else {
        withoutHashUrl = '';
        if (isUndefined(withoutBaseUrl)) {
          appBase = url;
          /** @type {?} */ (this).replace();
        }
      }
    }

    parseAppUrl(withoutHashUrl, this);

    this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);

    this.$$compose();

    /*
     * In Windows, on an anchor node on documents loaded from
     * the filesystem, the browser will return a pathname
     * prefixed with the drive name ('/C:/path') when a
     * pathname without a drive is set:
     *  * a.setAttribute('href', '/foo')
     *   * a.pathname === '/C:/foo' //true
     *
     * Inside of Angular, we're always using pathnames that
     * do not include drive names for routing.
     */
    function removeWindowsDriveName(path, url, base) {
      /*
      Matches paths for file protocol on windows,
      such as /C:/foo/bar, and captures only /foo/bar.
      */
      var windowsFilePathExp = /^\/[A-Z]:(\/.*)/;

      var firstPathSegmentMatch;

      //Get the relative path from the input URL.
      if (startsWith(url, base)) {
        url = url.replace(base, '');
      }

      // The input URL intentionally contains a first path segment that ends with a colon.
      if (windowsFilePathExp.exec(url)) {
        return path;
      }

      firstPathSegmentMatch = windowsFilePathExp.exec(path);
      return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;
    }
  };

  /**
   * Compose hashbang URL and update `absUrl` property
   * @private
   */
  this.$$compose = function() {
    var search = toKeyValue(this.$$search),
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
    this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');

    this.$$urlUpdatedByLocation = true;
  };

  this.$$parseLinkUrl = function(url, relHref) {
    if (stripHash(appBase) === stripHash(url)) {
      this.$$parse(url);
      return true;
    }
    return false;
  };
}


/**
 * LocationHashbangUrl represents URL
 * This object is exposed as $location service when html5 history api is enabled but the browser
 * does not support it.
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} appBaseNoFile application base URL stripped of any filename
 * @param {string} hashPrefix hashbang prefix
 */
function LocationHashbangInHtml5Url(appBase, appBaseNoFile, hashPrefix) {
  this.$$html5 = true;
  LocationHashbangUrl.apply(this, arguments);

  this.$$parseLinkUrl = function(url, relHref) {
    if (relHref && relHref[0] === '#') {
      // special case for links to hash fragments:
      // keep the old url and only replace the hash fragment
      this.hash(relHref.slice(1));
      return true;
    }

    var rewrittenUrl;
    var appUrl;

    if (appBase === stripHash(url)) {
      rewrittenUrl = url;
    } else if ((appUrl = stripBaseUrl(appBaseNoFile, url))) {
      rewrittenUrl = appBase + hashPrefix + appUrl;
    } else if (appBaseNoFile === url + '/') {
      rewrittenUrl = appBaseNoFile;
    }
    if (rewrittenUrl) {
      this.$$parse(rewrittenUrl);
    }
    return !!rewrittenUrl;
  };

  this.$$compose = function() {
    var search = toKeyValue(this.$$search),
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
    // include hashPrefix in $$absUrl when $$url is empty so IE9 does not reload page because of removal of '#'
    this.$$absUrl = appBase + hashPrefix + this.$$url;

    this.$$urlUpdatedByLocation = true;
  };

}


var locationPrototype = {

  /**
   * Ensure absolute URL is initialized.
   * @private
   */
  $$absUrl:'',

  /**
   * Are we in html5 mode?
   * @private
   */
  $$html5: false,

  /**
   * Has any change been replacing?
   * @private
   */
  $$replace: false,

  /**
   * @ngdoc method
   * @name $location#absUrl
   *
   * @description
   * This method is getter only.
   *
   * Return full URL representation with all segments encoded according to rules specified in
   * [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).
   *
   *
   * ```js
   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
   * var absUrl = $location.absUrl();
   * // => "http://example.com/#/some/path?foo=bar&baz=xoxo"
   * ```
   *
   * @return {string} full URL
   */
  absUrl: locationGetter('$$absUrl'),

  /**
   * @ngdoc method
   * @name $location#url
   *
   * @description
   * This method is getter / setter.
   *
   * Return URL (e.g. `/path?a=b#hash`) when called without any parameter.
   *
   * Change path, search and hash, when called with parameter and return `$location`.
   *
   *
   * ```js
   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
   * var url = $location.url();
   * // => "/some/path?foo=bar&baz=xoxo"
   * ```
   *
   * @param {string=} url New URL without base prefix (e.g. `/path?a=b#hash`)
   * @return {string} url
   */
  url: function(url) {
    if (isUndefined(url)) {
      return this.$$url;
    }

    var match = PATH_MATCH.exec(url);
    if (match[1] || url === '') this.path(decodeURIComponent(match[1]));
    if (match[2] || match[1] || url === '') this.search(match[3] || '');
    this.hash(match[5] || '');

    return this;
  },

  /**
   * @ngdoc method
   * @name $location#protocol
   *
   * @description
   * This method is getter only.
   *
   * Return protocol of current URL.
   *
   *
   * ```js
   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
   * var protocol = $location.protocol();
   * // => "http"
   * ```
   *
   * @return {string} protocol of current URL
   */
  protocol: locationGetter('$$protocol'),

  /**
   * @ngdoc method
   * @name $location#host
   *
   * @description
   * This method is getter only.
   *
   * Return host of current URL.
   *
   * Note: compared to the non-angular version `location.host` which returns `hostname:port`, this returns the `hostname` portion only.
   *
   *
   * ```js
   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
   * var host = $location.host();
   * // => "example.com"
   *
   * // given URL http://user:password@example.com:8080/#/some/path?foo=bar&baz=xoxo
   * host = $location.host();
   * // => "example.com"
   * host = location.host;
   * // => "example.com:8080"
   * ```
   *
   * @return {string} host of current URL.
   */
  host: locationGetter('$$host'),

  /**
   * @ngdoc method
   * @name $location#port
   *
   * @description
   * This method is getter only.
   *
   * Return port of current URL.
   *
   *
   * ```js
   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
   * var port = $location.port();
   * // => 80
   * ```
   *
   * @return {Number} port
   */
  port: locationGetter('$$port'),

  /**
   * @ngdoc method
   * @name $location#path
   *
   * @description
   * This method is getter / setter.
   *
   * Return path of current URL when called without any parameter.
   *
   * Change path when called with parameter and return `$location`.
   *
   * Note: Path should always begin with forward slash (/), this method will add the forward slash
   * if it is missing.
   *
   *
   * ```js
   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
   * var path = $location.path();
   * // => "/some/path"
   * ```
   *
   * @param {(string|number)=} path New path
   * @return {(string|object)} path if called with no parameters, or `$location` if called with a parameter
   */
  path: locationGetterSetter('$$path', function(path) {
    path = path !== null ? path.toString() : '';
    return path.charAt(0) === '/' ? path : '/' + path;
  }),

  /**
   * @ngdoc method
   * @name $location#search
   *
   * @description
   * This method is getter / setter.
   *
   * Return search part (as object) of current URL when called without any parameter.
   *
   * Change search part when called with parameter and return `$location`.
   *
   *
   * ```js
   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
   * var searchObject = $location.search();
   * // => {foo: 'bar', baz: 'xoxo'}
   *
   * // set foo to 'yipee'
   * $location.search('foo', 'yipee');
   * // $location.search() => {foo: 'yipee', baz: 'xoxo'}
   * ```
   *
   * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or
   * hash object.
   *
   * When called with a single argument the method acts as a setter, setting the `search` component
   * of `$location` to the specified value.
   *
   * If the argument is a hash object containing an array of values, these values will be encoded
   * as duplicate search parameters in the URL.
   *
   * @param {(string|Number|Array<string>|boolean)=} paramValue If `search` is a string or number, then `paramValue`
   * will override only a single search property.
   *
   * If `paramValue` is an array, it will override the property of the `search` component of
   * `$location` specified via the first argument.
   *
   * If `paramValue` is `null`, the property specified via the first argument will be deleted.
   *
   * If `paramValue` is `true`, the property specified via the first argument will be added with no
   * value nor trailing equal sign.
   *
   * @return {Object} If called with no arguments returns the parsed `search` object. If called with
   * one or more arguments returns `$location` object itself.
   */
  search: function(search, paramValue) {
    switch (arguments.length) {
      case 0:
        return this.$$search;
      case 1:
        if (isString(search) || isNumber(search)) {
          search = search.toString();
          this.$$search = parseKeyValue(search);
        } else if (isObject(search)) {
          search = copy(search, {});
          // remove object undefined or null properties
          forEach(search, function(value, key) {
            if (value == null) delete search[key];
          });

          this.$$search = search;
        } else {
          throw $locationMinErr('isrcharg',
              'The first argument of the `$location#search()` call must be a string or an object.');
        }
        break;
      default:
        if (isUndefined(paramValue) || paramValue === null) {
          delete this.$$search[search];
        } else {
          this.$$search[search] = paramValue;
        }
    }

    this.$$compose();
    return this;
  },

  /**
   * @ngdoc method
   * @name $location#hash
   *
   * @description
   * This method is getter / setter.
   *
   * Returns the hash fragment when called without any parameters.
   *
   * Changes the hash fragment when called with a parameter and returns `$location`.
   *
   *
   * ```js
   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo#hashValue
   * var hash = $location.hash();
   * // => "hashValue"
   * ```
   *
   * @param {(string|number)=} hash New hash fragment
   * @return {string} hash
   */
  hash: locationGetterSetter('$$hash', function(hash) {
    return hash !== null ? hash.toString() : '';
  }),

  /**
   * @ngdoc method
   * @name $location#replace
   *
   * @description
   * If called, all changes to $location during the current `$digest` will replace the current history
   * record, instead of adding a new one.
   */
  replace: function() {
    this.$$replace = true;
    return this;
  }
};

forEach([LocationHashbangInHtml5Url, LocationHashbangUrl, LocationHtml5Url], function(Location) {
  Location.prototype = Object.create(locationPrototype);

  /**
   * @ngdoc method
   * @name $location#state
   *
   * @description
   * This method is getter / setter.
   *
   * Return the history state object when called without any parameter.
   *
   * Change the history state object when called with one parameter and return `$location`.
   * The state object is later passed to `pushState` or `replaceState`.
   *
   * NOTE: This method is supported only in HTML5 mode and only in browsers supporting
   * the HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support
   * older browsers (like IE9 or Android < 4.0), don't use this method.
   *
   * @param {object=} state State object for pushState or replaceState
   * @return {object} state
   */
  Location.prototype.state = function(state) {
    if (!arguments.length) {
      return this.$$state;
    }

    if (Location !== LocationHtml5Url || !this.$$html5) {
      throw $locationMinErr('nostate', 'History API state support is available only ' +
        'in HTML5 mode and only in browsers supporting HTML5 History API');
    }
    // The user might modify `stateObject` after invoking `$location.state(stateObject)`
    // but we're changing the $$state reference to $browser.state() during the $digest
    // so the modification window is narrow.
    this.$$state = isUndefined(state) ? null : state;
    this.$$urlUpdatedByLocation = true;

    return this;
  };
});


function locationGetter(property) {
  return /** @this */ function() {
    return this[property];
  };
}


function locationGetterSetter(property, preprocess) {
  return /** @this */ function(value) {
    if (isUndefined(value)) {
      return this[property];
    }

    this[property] = preprocess(value);
    this.$$compose();

    return this;
  };
}


/**
 * @ngdoc service
 * @name $location
 *
 * @requires $rootElement
 *
 * @description
 * The $location service parses the URL in the browser address bar (based on the
 * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL
 * available to your application. Changes to the URL in the address bar are reflected into
 * $location service and changes to $location are reflected into the browser address bar.
 *
 * **The $location service:**
 *
 * - Exposes the current URL in the browser address bar, so you can
 *   - Watch and observe the URL.
 *   - Change the URL.
 * - Synchronizes the URL with the browser when the user
 *   - Changes the address bar.
 *   - Clicks the back or forward button (or clicks a History link).
 *   - Clicks on a link.
 * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).
 *
 * For more information see {@link guide/$location Developer Guide: Using $location}
 */

/**
 * @ngdoc provider
 * @name $locationProvider
 * @this
 *
 * @description
 * Use the `$locationProvider` to configure how the application deep linking paths are stored.
 */
function $LocationProvider() {
  var hashPrefix = '!',
      html5Mode = {
        enabled: false,
        requireBase: true,
        rewriteLinks: true
      };

  /**
   * @ngdoc method
   * @name $locationProvider#hashPrefix
   * @description
   * The default value for the prefix is `'!'`.
   * @param {string=} prefix Prefix for hash part (containing path and search)
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   */
  this.hashPrefix = function(prefix) {
    if (isDefined(prefix)) {
      hashPrefix = prefix;
      return this;
    } else {
      return hashPrefix;
    }
  };

  /**
   * @ngdoc method
   * @name $locationProvider#html5Mode
   * @description
   * @param {(boolean|Object)=} mode If boolean, sets `html5Mode.enabled` to value.
   *   If object, sets `enabled`, `requireBase` and `rewriteLinks` to respective values. Supported
   *   properties:
   *   - **enabled** – `{boolean}` – (default: false) If true, will rely on `history.pushState` to
   *     change urls where supported. Will fall back to hash-prefixed paths in browsers that do not
   *     support `pushState`.
   *   - **requireBase** - `{boolean}` - (default: `true`) When html5Mode is enabled, specifies
   *     whether or not a <base> tag is required to be present. If `enabled` and `requireBase` are
   *     true, and a base tag is not present, an error will be thrown when `$location` is injected.
   *     See the {@link guide/$location $location guide for more information}
   *   - **rewriteLinks** - `{boolean|string}` - (default: `true`) When html5Mode is enabled,
   *     enables/disables URL rewriting for relative links. If set to a string, URL rewriting will
   *     only happen on links with an attribute that matches the given string. For example, if set
   *     to `'internal-link'`, then the URL will only be rewritten for `<a internal-link>` links.
   *     Note that [attribute name normalization](guide/directive#normalization) does not apply
   *     here, so `'internalLink'` will **not** match `'internal-link'`.
   *
   * @returns {Object} html5Mode object if used as getter or itself (chaining) if used as setter
   */
  this.html5Mode = function(mode) {
    if (isBoolean(mode)) {
      html5Mode.enabled = mode;
      return this;
    } else if (isObject(mode)) {

      if (isBoolean(mode.enabled)) {
        html5Mode.enabled = mode.enabled;
      }

      if (isBoolean(mode.requireBase)) {
        html5Mode.requireBase = mode.requireBase;
      }

      if (isBoolean(mode.rewriteLinks) || isString(mode.rewriteLinks)) {
        html5Mode.rewriteLinks = mode.rewriteLinks;
      }

      return this;
    } else {
      return html5Mode;
    }
  };

  /**
   * @ngdoc event
   * @name $location#$locationChangeStart
   * @eventType broadcast on root scope
   * @description
   * Broadcasted before a URL will change.
   *
   * This change can be prevented by calling
   * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more
   * details about event object. Upon successful change
   * {@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.
   *
   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
   * the browser supports the HTML5 History API.
   *
   * @param {Object} angularEvent Synthetic event object.
   * @param {string} newUrl New URL
   * @param {string=} oldUrl URL that was before it was changed.
   * @param {string=} newState New history state object
   * @param {string=} oldState History state object that was before it was changed.
   */

  /**
   * @ngdoc event
   * @name $location#$locationChangeSuccess
   * @eventType broadcast on root scope
   * @description
   * Broadcasted after a URL was changed.
   *
   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
   * the browser supports the HTML5 History API.
   *
   * @param {Object} angularEvent Synthetic event object.
   * @param {string} newUrl New URL
   * @param {string=} oldUrl URL that was before it was changed.
   * @param {string=} newState New history state object
   * @param {string=} oldState History state object that was before it was changed.
   */

  this.$get = ['$rootScope', '$browser', '$sniffer', '$rootElement', '$window',
      function($rootScope, $browser, $sniffer, $rootElement, $window) {
    var $location,
        LocationMode,
        baseHref = $browser.baseHref(), // if base[href] is undefined, it defaults to ''
        initialUrl = $browser.url(),
        appBase;

    if (html5Mode.enabled) {
      if (!baseHref && html5Mode.requireBase) {
        throw $locationMinErr('nobase',
          '$location in HTML5 mode requires a <base> tag to be present!');
      }
      appBase = serverBase(initialUrl) + (baseHref || '/');
      LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;
    } else {
      appBase = stripHash(initialUrl);
      LocationMode = LocationHashbangUrl;
    }
    var appBaseNoFile = stripFile(appBase);

    $location = new LocationMode(appBase, appBaseNoFile, '#' + hashPrefix);
    $location.$$parseLinkUrl(initialUrl, initialUrl);

    $location.$$state = $browser.state();

    var IGNORE_URI_REGEXP = /^\s*(javascript|mailto):/i;

    function setBrowserUrlWithFallback(url, replace, state) {
      var oldUrl = $location.url();
      var oldState = $location.$$state;
      try {
        $browser.url(url, replace, state);

        // Make sure $location.state() returns referentially identical (not just deeply equal)
        // state object; this makes possible quick checking if the state changed in the digest
        // loop. Checking deep equality would be too expensive.
        $location.$$state = $browser.state();
      } catch (e) {
        // Restore old values if pushState fails
        $location.url(oldUrl);
        $location.$$state = oldState;

        throw e;
      }
    }

    $rootElement.on('click', function(event) {
      var rewriteLinks = html5Mode.rewriteLinks;
      // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)
      // currently we open nice url link and redirect then

      if (!rewriteLinks || event.ctrlKey || event.metaKey || event.shiftKey || event.which === 2 || event.button === 2) return;

      var elm = jqLite(event.target);

      // traverse the DOM up to find first A tag
      while (nodeName_(elm[0]) !== 'a') {
        // ignore rewriting if no A tag (reached root element, or no parent - removed from document)
        if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;
      }

      if (isString(rewriteLinks) && isUndefined(elm.attr(rewriteLinks))) return;

      var absHref = elm.prop('href');
      // get the actual href attribute - see
      // http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx
      var relHref = elm.attr('href') || elm.attr('xlink:href');

      if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {
        // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during
        // an animation.
        absHref = urlResolve(absHref.animVal).href;
      }

      // Ignore when url is started with javascript: or mailto:
      if (IGNORE_URI_REGEXP.test(absHref)) return;

      if (absHref && !elm.attr('target') && !event.isDefaultPrevented()) {
        if ($location.$$parseLinkUrl(absHref, relHref)) {
          // We do a preventDefault for all urls that are part of the angular application,
          // in html5mode and also without, so that we are able to abort navigation without
          // getting double entries in the location history.
          event.preventDefault();
          // update location manually
          if ($location.absUrl() !== $browser.url()) {
            $rootScope.$apply();
            // hack to work around FF6 bug 684208 when scenario runner clicks on links
            $window.angular['ff-684208-preventDefault'] = true;
          }
        }
      }
    });


    // rewrite hashbang url <> html5 url
    if (trimEmptyHash($location.absUrl()) !== trimEmptyHash(initialUrl)) {
      $browser.url($location.absUrl(), true);
    }

    var initializing = true;

    // update $location when $browser url changes
    $browser.onUrlChange(function(newUrl, newState) {

      if (!startsWith(newUrl, appBaseNoFile)) {
        // If we are navigating outside of the app then force a reload
        $window.location.href = newUrl;
        return;
      }

      $rootScope.$evalAsync(function() {
        var oldUrl = $location.absUrl();
        var oldState = $location.$$state;
        var defaultPrevented;
        newUrl = trimEmptyHash(newUrl);
        $location.$$parse(newUrl);
        $location.$$state = newState;

        defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,
            newState, oldState).defaultPrevented;

        // if the location was changed by a `$locationChangeStart` handler then stop
        // processing this location change
        if ($location.absUrl() !== newUrl) return;

        if (defaultPrevented) {
          $location.$$parse(oldUrl);
          $location.$$state = oldState;
          setBrowserUrlWithFallback(oldUrl, false, oldState);
        } else {
          initializing = false;
          afterLocationChange(oldUrl, oldState);
        }
      });
      if (!$rootScope.$$phase) $rootScope.$digest();
    });

    // update browser
    $rootScope.$watch(function $locationWatch() {
      if (initializing || $location.$$urlUpdatedByLocation) {
        $location.$$urlUpdatedByLocation = false;

        var oldUrl = trimEmptyHash($browser.url());
        var newUrl = trimEmptyHash($location.absUrl());
        var oldState = $browser.state();
        var currentReplace = $location.$$replace;
        var urlOrStateChanged = oldUrl !== newUrl ||
          ($location.$$html5 && $sniffer.history && oldState !== $location.$$state);

        if (initializing || urlOrStateChanged) {
          initializing = false;

          $rootScope.$evalAsync(function() {
            var newUrl = $location.absUrl();
            var defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,
                $location.$$state, oldState).defaultPrevented;

            // if the location was changed by a `$locationChangeStart` handler then stop
            // processing this location change
            if ($location.absUrl() !== newUrl) return;

            if (defaultPrevented) {
              $location.$$parse(oldUrl);
              $location.$$state = oldState;
            } else {
              if (urlOrStateChanged) {
                setBrowserUrlWithFallback(newUrl, currentReplace,
                                          oldState === $location.$$state ? null : $location.$$state);
              }
              afterLocationChange(oldUrl, oldState);
            }
          });
        }
      }

      $location.$$replace = false;

      // we don't need to return anything because $evalAsync will make the digest loop dirty when
      // there is a change
    });

    return $location;

    function afterLocationChange(oldUrl, oldState) {
      $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl,
        $location.$$state, oldState);
    }
}];
}

/**
 * @ngdoc service
 * @name $log
 * @requires $window
 *
 * @description
 * Simple service for logging. Default implementation safely writes the message
 * into the browser's console (if present).
 *
 * The main purpose of this service is to simplify debugging and troubleshooting.
 *
 * The default is to log `debug` messages. You can use
 * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.
 *
 * @example
   <example module="logExample" name="log-service">
     <file name="script.js">
       angular.module('logExample', [])
         .controller('LogController', ['$scope', '$log', function($scope, $log) {
           $scope.$log = $log;
           $scope.message = 'Hello World!';
         }]);
     </file>
     <file name="index.html">
       <div ng-controller="LogController">
         <p>Reload this page with open console, enter text and hit the log button...</p>
         <label>Message:
         <input type="text" ng-model="message" /></label>
         <button ng-click="$log.log(message)">log</button>
         <button ng-click="$log.warn(message)">warn</button>
         <button ng-click="$log.info(message)">info</button>
         <button ng-click="$log.error(message)">error</button>
         <button ng-click="$log.debug(message)">debug</button>
       </div>
     </file>
   </example>
 */

/**
 * @ngdoc provider
 * @name $logProvider
 * @this
 *
 * @description
 * Use the `$logProvider` to configure how the application logs messages
 */
function $LogProvider() {
  var debug = true,
      self = this;

  /**
   * @ngdoc method
   * @name $logProvider#debugEnabled
   * @description
   * @param {boolean=} flag enable or disable debug level messages
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   */
  this.debugEnabled = function(flag) {
    if (isDefined(flag)) {
      debug = flag;
      return this;
    } else {
      return debug;
    }
  };

  this.$get = ['$window', function($window) {
    return {
      /**
       * @ngdoc method
       * @name $log#log
       *
       * @description
       * Write a log message
       */
      log: consoleLog('log'),

      /**
       * @ngdoc method
       * @name $log#info
       *
       * @description
       * Write an information message
       */
      info: consoleLog('info'),

      /**
       * @ngdoc method
       * @name $log#warn
       *
       * @description
       * Write a warning message
       */
      warn: consoleLog('warn'),

      /**
       * @ngdoc method
       * @name $log#error
       *
       * @description
       * Write an error message
       */
      error: consoleLog('error'),

      /**
       * @ngdoc method
       * @name $log#debug
       *
       * @description
       * Write a debug message
       */
      debug: (function() {
        var fn = consoleLog('debug');

        return function() {
          if (debug) {
            fn.apply(self, arguments);
          }
        };
      })()
    };

    function formatError(arg) {
      if (arg instanceof Error) {
        if (arg.stack) {
          arg = (arg.message && arg.stack.indexOf(arg.message) === -1)
              ? 'Error: ' + arg.message + '\n' + arg.stack
              : arg.stack;
        } else if (arg.sourceURL) {
          arg = arg.message + '\n' + arg.sourceURL + ':' + arg.line;
        }
      }
      return arg;
    }

    function consoleLog(type) {
      var console = $window.console || {},
          logFn = console[type] || console.log || noop,
          hasApply = false;

      // Note: reading logFn.apply throws an error in IE11 in IE8 document mode.
      // The reason behind this is that console.log has type "object" in IE8...
      try {
        hasApply = !!logFn.apply;
      } catch (e) { /* empty */ }

      if (hasApply) {
        return function() {
          var args = [];
          forEach(arguments, function(arg) {
            args.push(formatError(arg));
          });
          return logFn.apply(console, args);
        };
      }

      // we are IE which either doesn't have window.console => this is noop and we do nothing,
      // or we are IE where console.log doesn't have apply so we log at least first 2 args
      return function(arg1, arg2) {
        logFn(arg1, arg2 == null ? '' : arg2);
      };
    }
  }];
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *     Any commits to this file should be reviewed with security in mind.  *
 *   Changes to this file can potentially create security vulnerabilities. *
 *          An approval from 2 Core members with history of modifying      *
 *                         this file is required.                          *
 *                                                                         *
 *  Does the change somehow allow for arbitrary javascript to be executed? *
 *    Or allows for someone to change the prototype of built-in objects?   *
 *     Or gives undesired access to variables likes document or window?    *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

var $parseMinErr = minErr('$parse');

var objectValueOf = {}.constructor.prototype.valueOf;

// Sandboxing Angular Expressions
// ------------------------------
// Angular expressions are no longer sandboxed. So it is now even easier to access arbitrary JS code by
// various means such as obtaining a reference to native JS functions like the Function constructor.
//
// As an example, consider the following Angular expression:
//
//   {}.toString.constructor('alert("evil JS code")')
//
// It is important to realize that if you create an expression from a string that contains user provided
// content then it is possible that your application contains a security vulnerability to an XSS style attack.
//
// See https://docs.angularjs.org/guide/security


function getStringValue(name) {
  // Property names must be strings. This means that non-string objects cannot be used
  // as keys in an object. Any non-string object, including a number, is typecasted
  // into a string via the toString method.
  // -- MDN, https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Property_accessors#Property_names
  //
  // So, to ensure that we are checking the same `name` that JavaScript would use, we cast it
  // to a string. It's not always possible. If `name` is an object and its `toString` method is
  // 'broken' (doesn't return a string, isn't a function, etc.), an error will be thrown:
  //
  // TypeError: Cannot convert object to primitive value
  //
  // For performance reasons, we don't catch this error here and allow it to propagate up the call
  // stack. Note that you'll get the same error in JavaScript if you try to access a property using
  // such a 'broken' object as a key.
  return name + '';
}


var OPERATORS = createMap();
forEach('+ - * / % === !== == != < > <= >= && || ! = |'.split(' '), function(operator) { OPERATORS[operator] = true; });
var ESCAPE = {'n':'\n', 'f':'\f', 'r':'\r', 't':'\t', 'v':'\v', '\'':'\'', '"':'"'};


/////////////////////////////////////////


/**
 * @constructor
 */
var Lexer = function Lexer(options) {
  this.options = options;
};

Lexer.prototype = {
  constructor: Lexer,

  lex: function(text) {
    this.text = text;
    this.index = 0;
    this.tokens = [];

    while (this.index < this.text.length) {
      var ch = this.text.charAt(this.index);
      if (ch === '"' || ch === '\'') {
        this.readString(ch);
      } else if (this.isNumber(ch) || ch === '.' && this.isNumber(this.peek())) {
        this.readNumber();
      } else if (this.isIdentifierStart(this.peekMultichar())) {
        this.readIdent();
      } else if (this.is(ch, '(){}[].,;:?')) {
        this.tokens.push({index: this.index, text: ch});
        this.index++;
      } else if (this.isWhitespace(ch)) {
        this.index++;
      } else {
        var ch2 = ch + this.peek();
        var ch3 = ch2 + this.peek(2);
        var op1 = OPERATORS[ch];
        var op2 = OPERATORS[ch2];
        var op3 = OPERATORS[ch3];
        if (op1 || op2 || op3) {
          var token = op3 ? ch3 : (op2 ? ch2 : ch);
          this.tokens.push({index: this.index, text: token, operator: true});
          this.index += token.length;
        } else {
          this.throwError('Unexpected next character ', this.index, this.index + 1);
        }
      }
    }
    return this.tokens;
  },

  is: function(ch, chars) {
    return chars.indexOf(ch) !== -1;
  },

  peek: function(i) {
    var num = i || 1;
    return (this.index + num < this.text.length) ? this.text.charAt(this.index + num) : false;
  },

  isNumber: function(ch) {
    return ('0' <= ch && ch <= '9') && typeof ch === 'string';
  },

  isWhitespace: function(ch) {
    // IE treats non-breaking space as \u00A0
    return (ch === ' ' || ch === '\r' || ch === '\t' ||
            ch === '\n' || ch === '\v' || ch === '\u00A0');
  },

  isIdentifierStart: function(ch) {
    return this.options.isIdentifierStart ?
        this.options.isIdentifierStart(ch, this.codePointAt(ch)) :
        this.isValidIdentifierStart(ch);
  },

  isValidIdentifierStart: function(ch) {
    return ('a' <= ch && ch <= 'z' ||
            'A' <= ch && ch <= 'Z' ||
            '_' === ch || ch === '$');
  },

  isIdentifierContinue: function(ch) {
    return this.options.isIdentifierContinue ?
        this.options.isIdentifierContinue(ch, this.codePointAt(ch)) :
        this.isValidIdentifierContinue(ch);
  },

  isValidIdentifierContinue: function(ch, cp) {
    return this.isValidIdentifierStart(ch, cp) || this.isNumber(ch);
  },

  codePointAt: function(ch) {
    if (ch.length === 1) return ch.charCodeAt(0);
    // eslint-disable-next-line no-bitwise
    return (ch.charCodeAt(0) << 10) + ch.charCodeAt(1) - 0x35FDC00;
  },

  peekMultichar: function() {
    var ch = this.text.charAt(this.index);
    var peek = this.peek();
    if (!peek) {
      return ch;
    }
    var cp1 = ch.charCodeAt(0);
    var cp2 = peek.charCodeAt(0);
    if (cp1 >= 0xD800 && cp1 <= 0xDBFF && cp2 >= 0xDC00 && cp2 <= 0xDFFF) {
      return ch + peek;
    }
    return ch;
  },

  isExpOperator: function(ch) {
    return (ch === '-' || ch === '+' || this.isNumber(ch));
  },

  throwError: function(error, start, end) {
    end = end || this.index;
    var colStr = (isDefined(start)
            ? 's ' + start +  '-' + this.index + ' [' + this.text.substring(start, end) + ']'
            : ' ' + end);
    throw $parseMinErr('lexerr', 'Lexer Error: {0} at column{1} in expression [{2}].',
        error, colStr, this.text);
  },

  readNumber: function() {
    var number = '';
    var start = this.index;
    while (this.index < this.text.length) {
      var ch = lowercase(this.text.charAt(this.index));
      if (ch === '.' || this.isNumber(ch)) {
        number += ch;
      } else {
        var peekCh = this.peek();
        if (ch === 'e' && this.isExpOperator(peekCh)) {
          number += ch;
        } else if (this.isExpOperator(ch) &&
            peekCh && this.isNumber(peekCh) &&
            number.charAt(number.length - 1) === 'e') {
          number += ch;
        } else if (this.isExpOperator(ch) &&
            (!peekCh || !this.isNumber(peekCh)) &&
            number.charAt(number.length - 1) === 'e') {
          this.throwError('Invalid exponent');
        } else {
          break;
        }
      }
      this.index++;
    }
    this.tokens.push({
      index: start,
      text: number,
      constant: true,
      value: Number(number)
    });
  },

  readIdent: function() {
    var start = this.index;
    this.index += this.peekMultichar().length;
    while (this.index < this.text.length) {
      var ch = this.peekMultichar();
      if (!this.isIdentifierContinue(ch)) {
        break;
      }
      this.index += ch.length;
    }
    this.tokens.push({
      index: start,
      text: this.text.slice(start, this.index),
      identifier: true
    });
  },

  readString: function(quote) {
    var start = this.index;
    this.index++;
    var string = '';
    var rawString = quote;
    var escape = false;
    while (this.index < this.text.length) {
      var ch = this.text.charAt(this.index);
      rawString += ch;
      if (escape) {
        if (ch === 'u') {
          var hex = this.text.substring(this.index + 1, this.index + 5);
          if (!hex.match(/[\da-f]{4}/i)) {
            this.throwError('Invalid unicode escape [\\u' + hex + ']');
          }
          this.index += 4;
          string += String.fromCharCode(parseInt(hex, 16));
        } else {
          var rep = ESCAPE[ch];
          string = string + (rep || ch);
        }
        escape = false;
      } else if (ch === '\\') {
        escape = true;
      } else if (ch === quote) {
        this.index++;
        this.tokens.push({
          index: start,
          text: rawString,
          constant: true,
          value: string
        });
        return;
      } else {
        string += ch;
      }
      this.index++;
    }
    this.throwError('Unterminated quote', start);
  }
};

var AST = function AST(lexer, options) {
  this.lexer = lexer;
  this.options = options;
};

AST.Program = 'Program';
AST.ExpressionStatement = 'ExpressionStatement';
AST.AssignmentExpression = 'AssignmentExpression';
AST.ConditionalExpression = 'ConditionalExpression';
AST.LogicalExpression = 'LogicalExpression';
AST.BinaryExpression = 'BinaryExpression';
AST.UnaryExpression = 'UnaryExpression';
AST.CallExpression = 'CallExpression';
AST.MemberExpression = 'MemberExpression';
AST.Identifier = 'Identifier';
AST.Literal = 'Literal';
AST.ArrayExpression = 'ArrayExpression';
AST.Property = 'Property';
AST.ObjectExpression = 'ObjectExpression';
AST.ThisExpression = 'ThisExpression';
AST.LocalsExpression = 'LocalsExpression';

// Internal use only
AST.NGValueParameter = 'NGValueParameter';

AST.prototype = {
  ast: function(text) {
    this.text = text;
    this.tokens = this.lexer.lex(text);

    var value = this.program();

    if (this.tokens.length !== 0) {
      this.throwError('is an unexpected token', this.tokens[0]);
    }

    return value;
  },

  program: function() {
    var body = [];
    while (true) {
      if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']'))
        body.push(this.expressionStatement());
      if (!this.expect(';')) {
        return { type: AST.Program, body: body};
      }
    }
  },

  expressionStatement: function() {
    return { type: AST.ExpressionStatement, expression: this.filterChain() };
  },

  filterChain: function() {
    var left = this.expression();
    while (this.expect('|')) {
      left = this.filter(left);
    }
    return left;
  },

  expression: function() {
    return this.assignment();
  },

  assignment: function() {
    var result = this.ternary();
    if (this.expect('=')) {
      if (!isAssignable(result)) {
        throw $parseMinErr('lval', 'Trying to assign a value to a non l-value');
      }

      result = { type: AST.AssignmentExpression, left: result, right: this.assignment(), operator: '='};
    }
    return result;
  },

  ternary: function() {
    var test = this.logicalOR();
    var alternate;
    var consequent;
    if (this.expect('?')) {
      alternate = this.expression();
      if (this.consume(':')) {
        consequent = this.expression();
        return { type: AST.ConditionalExpression, test: test, alternate: alternate, consequent: consequent};
      }
    }
    return test;
  },

  logicalOR: function() {
    var left = this.logicalAND();
    while (this.expect('||')) {
      left = { type: AST.LogicalExpression, operator: '||', left: left, right: this.logicalAND() };
    }
    return left;
  },

  logicalAND: function() {
    var left = this.equality();
    while (this.expect('&&')) {
      left = { type: AST.LogicalExpression, operator: '&&', left: left, right: this.equality()};
    }
    return left;
  },

  equality: function() {
    var left = this.relational();
    var token;
    while ((token = this.expect('==','!=','===','!=='))) {
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.relational() };
    }
    return left;
  },

  relational: function() {
    var left = this.additive();
    var token;
    while ((token = this.expect('<', '>', '<=', '>='))) {
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.additive() };
    }
    return left;
  },

  additive: function() {
    var left = this.multiplicative();
    var token;
    while ((token = this.expect('+','-'))) {
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.multiplicative() };
    }
    return left;
  },

  multiplicative: function() {
    var left = this.unary();
    var token;
    while ((token = this.expect('*','/','%'))) {
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.unary() };
    }
    return left;
  },

  unary: function() {
    var token;
    if ((token = this.expect('+', '-', '!'))) {
      return { type: AST.UnaryExpression, operator: token.text, prefix: true, argument: this.unary() };
    } else {
      return this.primary();
    }
  },

  primary: function() {
    var primary;
    if (this.expect('(')) {
      primary = this.filterChain();
      this.consume(')');
    } else if (this.expect('[')) {
      primary = this.arrayDeclaration();
    } else if (this.expect('{')) {
      primary = this.object();
    } else if (this.selfReferential.hasOwnProperty(this.peek().text)) {
      primary = copy(this.selfReferential[this.consume().text]);
    } else if (this.options.literals.hasOwnProperty(this.peek().text)) {
      primary = { type: AST.Literal, value: this.options.literals[this.consume().text]};
    } else if (this.peek().identifier) {
      primary = this.identifier();
    } else if (this.peek().constant) {
      primary = this.constant();
    } else {
      this.throwError('not a primary expression', this.peek());
    }

    var next;
    while ((next = this.expect('(', '[', '.'))) {
      if (next.text === '(') {
        primary = {type: AST.CallExpression, callee: primary, arguments: this.parseArguments() };
        this.consume(')');
      } else if (next.text === '[') {
        primary = { type: AST.MemberExpression, object: primary, property: this.expression(), computed: true };
        this.consume(']');
      } else if (next.text === '.') {
        primary = { type: AST.MemberExpression, object: primary, property: this.identifier(), computed: false };
      } else {
        this.throwError('IMPOSSIBLE');
      }
    }
    return primary;
  },

  filter: function(baseExpression) {
    var args = [baseExpression];
    var result = {type: AST.CallExpression, callee: this.identifier(), arguments: args, filter: true};

    while (this.expect(':')) {
      args.push(this.expression());
    }

    return result;
  },

  parseArguments: function() {
    var args = [];
    if (this.peekToken().text !== ')') {
      do {
        args.push(this.filterChain());
      } while (this.expect(','));
    }
    return args;
  },

  identifier: function() {
    var token = this.consume();
    if (!token.identifier) {
      this.throwError('is not a valid identifier', token);
    }
    return { type: AST.Identifier, name: token.text };
  },

  constant: function() {
    // TODO check that it is a constant
    return { type: AST.Literal, value: this.consume().value };
  },

  arrayDeclaration: function() {
    var elements = [];
    if (this.peekToken().text !== ']') {
      do {
        if (this.peek(']')) {
          // Support trailing commas per ES5.1.
          break;
        }
        elements.push(this.expression());
      } while (this.expect(','));
    }
    this.consume(']');

    return { type: AST.ArrayExpression, elements: elements };
  },

  object: function() {
    var properties = [], property;
    if (this.peekToken().text !== '}') {
      do {
        if (this.peek('}')) {
          // Support trailing commas per ES5.1.
          break;
        }
        property = {type: AST.Property, kind: 'init'};
        if (this.peek().constant) {
          property.key = this.constant();
          property.computed = false;
          this.consume(':');
          property.value = this.expression();
        } else if (this.peek().identifier) {
          property.key = this.identifier();
          property.computed = false;
          if (this.peek(':')) {
            this.consume(':');
            property.value = this.expression();
          } else {
            property.value = property.key;
          }
        } else if (this.peek('[')) {
          this.consume('[');
          property.key = this.expression();
          this.consume(']');
          property.computed = true;
          this.consume(':');
          property.value = this.expression();
        } else {
          this.throwError('invalid key', this.peek());
        }
        properties.push(property);
      } while (this.expect(','));
    }
    this.consume('}');

    return {type: AST.ObjectExpression, properties: properties };
  },

  throwError: function(msg, token) {
    throw $parseMinErr('syntax',
        'Syntax Error: Token \'{0}\' {1} at column {2} of the expression [{3}] starting at [{4}].',
          token.text, msg, (token.index + 1), this.text, this.text.substring(token.index));
  },

  consume: function(e1) {
    if (this.tokens.length === 0) {
      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
    }

    var token = this.expect(e1);
    if (!token) {
      this.throwError('is unexpected, expecting [' + e1 + ']', this.peek());
    }
    return token;
  },

  peekToken: function() {
    if (this.tokens.length === 0) {
      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
    }
    return this.tokens[0];
  },

  peek: function(e1, e2, e3, e4) {
    return this.peekAhead(0, e1, e2, e3, e4);
  },

  peekAhead: function(i, e1, e2, e3, e4) {
    if (this.tokens.length > i) {
      var token = this.tokens[i];
      var t = token.text;
      if (t === e1 || t === e2 || t === e3 || t === e4 ||
          (!e1 && !e2 && !e3 && !e4)) {
        return token;
      }
    }
    return false;
  },

  expect: function(e1, e2, e3, e4) {
    var token = this.peek(e1, e2, e3, e4);
    if (token) {
      this.tokens.shift();
      return token;
    }
    return false;
  },

  selfReferential: {
    'this': {type: AST.ThisExpression },
    '$locals': {type: AST.LocalsExpression }
  }
};

function ifDefined(v, d) {
  return typeof v !== 'undefined' ? v : d;
}

function plusFn(l, r) {
  if (typeof l === 'undefined') return r;
  if (typeof r === 'undefined') return l;
  return l + r;
}

function isStateless($filter, filterName) {
  var fn = $filter(filterName);
  return !fn.$stateful;
}

function findConstantAndWatchExpressions(ast, $filter) {
  var allConstants;
  var argsToWatch;
  var isStatelessFilter;
  switch (ast.type) {
  case AST.Program:
    allConstants = true;
    forEach(ast.body, function(expr) {
      findConstantAndWatchExpressions(expr.expression, $filter);
      allConstants = allConstants && expr.expression.constant;
    });
    ast.constant = allConstants;
    break;
  case AST.Literal:
    ast.constant = true;
    ast.toWatch = [];
    break;
  case AST.UnaryExpression:
    findConstantAndWatchExpressions(ast.argument, $filter);
    ast.constant = ast.argument.constant;
    ast.toWatch = ast.argument.toWatch;
    break;
  case AST.BinaryExpression:
    findConstantAndWatchExpressions(ast.left, $filter);
    findConstantAndWatchExpressions(ast.right, $filter);
    ast.constant = ast.left.constant && ast.right.constant;
    ast.toWatch = ast.left.toWatch.concat(ast.right.toWatch);
    break;
  case AST.LogicalExpression:
    findConstantAndWatchExpressions(ast.left, $filter);
    findConstantAndWatchExpressions(ast.right, $filter);
    ast.constant = ast.left.constant && ast.right.constant;
    ast.toWatch = ast.constant ? [] : [ast];
    break;
  case AST.ConditionalExpression:
    findConstantAndWatchExpressions(ast.test, $filter);
    findConstantAndWatchExpressions(ast.alternate, $filter);
    findConstantAndWatchExpressions(ast.consequent, $filter);
    ast.constant = ast.test.constant && ast.alternate.constant && ast.consequent.constant;
    ast.toWatch = ast.constant ? [] : [ast];
    break;
  case AST.Identifier:
    ast.constant = false;
    ast.toWatch = [ast];
    break;
  case AST.MemberExpression:
    findConstantAndWatchExpressions(ast.object, $filter);
    if (ast.computed) {
      findConstantAndWatchExpressions(ast.property, $filter);
    }
    ast.constant = ast.object.constant && (!ast.computed || ast.property.constant);
    ast.toWatch = [ast];
    break;
  case AST.CallExpression:
    isStatelessFilter = ast.filter ? isStateless($filter, ast.callee.name) : false;
    allConstants = isStatelessFilter;
    argsToWatch = [];
    forEach(ast.arguments, function(expr) {
      findConstantAndWatchExpressions(expr, $filter);
      allConstants = allConstants && expr.constant;
      if (!expr.constant) {
        argsToWatch.push.apply(argsToWatch, expr.toWatch);
      }
    });
    ast.constant = allConstants;
    ast.toWatch = isStatelessFilter ? argsToWatch : [ast];
    break;
  case AST.AssignmentExpression:
    findConstantAndWatchExpressions(ast.left, $filter);
    findConstantAndWatchExpressions(ast.right, $filter);
    ast.constant = ast.left.constant && ast.right.constant;
    ast.toWatch = [ast];
    break;
  case AST.ArrayExpression:
    allConstants = true;
    argsToWatch = [];
    forEach(ast.elements, function(expr) {
      findConstantAndWatchExpressions(expr, $filter);
      allConstants = allConstants && expr.constant;
      if (!expr.constant) {
        argsToWatch.push.apply(argsToWatch, expr.toWatch);
      }
    });
    ast.constant = allConstants;
    ast.toWatch = argsToWatch;
    break;
  case AST.ObjectExpression:
    allConstants = true;
    argsToWatch = [];
    forEach(ast.properties, function(property) {
      findConstantAndWatchExpressions(property.value, $filter);
      allConstants = allConstants && property.value.constant && !property.computed;
      if (!property.value.constant) {
        argsToWatch.push.apply(argsToWatch, property.value.toWatch);
      }
      if (property.computed) {
        findConstantAndWatchExpressions(property.key, $filter);
        if (!property.key.constant) {
          argsToWatch.push.apply(argsToWatch, property.key.toWatch);
        }
      }

    });
    ast.constant = allConstants;
    ast.toWatch = argsToWatch;
    break;
  case AST.ThisExpression:
    ast.constant = false;
    ast.toWatch = [];
    break;
  case AST.LocalsExpression:
    ast.constant = false;
    ast.toWatch = [];
    break;
  }
}

function getInputs(body) {
  if (body.length !== 1) return;
  var lastExpression = body[0].expression;
  var candidate = lastExpression.toWatch;
  if (candidate.length !== 1) return candidate;
  return candidate[0] !== lastExpression ? candidate : undefined;
}

function isAssignable(ast) {
  return ast.type === AST.Identifier || ast.type === AST.MemberExpression;
}

function assignableAST(ast) {
  if (ast.body.length === 1 && isAssignable(ast.body[0].expression)) {
    return {type: AST.AssignmentExpression, left: ast.body[0].expression, right: {type: AST.NGValueParameter}, operator: '='};
  }
}

function isLiteral(ast) {
  return ast.body.length === 0 ||
      ast.body.length === 1 && (
      ast.body[0].expression.type === AST.Literal ||
      ast.body[0].expression.type === AST.ArrayExpression ||
      ast.body[0].expression.type === AST.ObjectExpression);
}

function isConstant(ast) {
  return ast.constant;
}

function ASTCompiler(astBuilder, $filter) {
  this.astBuilder = astBuilder;
  this.$filter = $filter;
}

ASTCompiler.prototype = {
  compile: function(expression) {
    var self = this;
    var ast = this.astBuilder.ast(expression);
    this.state = {
      nextId: 0,
      filters: {},
      fn: {vars: [], body: [], own: {}},
      assign: {vars: [], body: [], own: {}},
      inputs: []
    };
    findConstantAndWatchExpressions(ast, self.$filter);
    var extra = '';
    var assignable;
    this.stage = 'assign';
    if ((assignable = assignableAST(ast))) {
      this.state.computing = 'assign';
      var result = this.nextId();
      this.recurse(assignable, result);
      this.return_(result);
      extra = 'fn.assign=' + this.generateFunction('assign', 's,v,l');
    }
    var toWatch = getInputs(ast.body);
    self.stage = 'inputs';
    forEach(toWatch, function(watch, key) {
      var fnKey = 'fn' + key;
      self.state[fnKey] = {vars: [], body: [], own: {}};
      self.state.computing = fnKey;
      var intoId = self.nextId();
      self.recurse(watch, intoId);
      self.return_(intoId);
      self.state.inputs.push(fnKey);
      watch.watchId = key;
    });
    this.state.computing = 'fn';
    this.stage = 'main';
    this.recurse(ast);
    var fnString =
      // The build and minification steps remove the string "use strict" from the code, but this is done using a regex.
      // This is a workaround for this until we do a better job at only removing the prefix only when we should.
      '"' + this.USE + ' ' + this.STRICT + '";\n' +
      this.filterPrefix() +
      'var fn=' + this.generateFunction('fn', 's,l,a,i') +
      extra +
      this.watchFns() +
      'return fn;';

    // eslint-disable-next-line no-new-func
    var fn = (new Function('$filter',
        'getStringValue',
        'ifDefined',
        'plus',
        fnString))(
          this.$filter,
          getStringValue,
          ifDefined,
          plusFn);
    this.state = this.stage = undefined;
    fn.literal = isLiteral(ast);
    fn.constant = isConstant(ast);
    return fn;
  },

  USE: 'use',

  STRICT: 'strict',

  watchFns: function() {
    var result = [];
    var fns = this.state.inputs;
    var self = this;
    forEach(fns, function(name) {
      result.push('var ' + name + '=' + self.generateFunction(name, 's'));
    });
    if (fns.length) {
      result.push('fn.inputs=[' + fns.join(',') + '];');
    }
    return result.join('');
  },

  generateFunction: function(name, params) {
    return 'function(' + params + '){' +
        this.varsPrefix(name) +
        this.body(name) +
        '};';
  },

  filterPrefix: function() {
    var parts = [];
    var self = this;
    forEach(this.state.filters, function(id, filter) {
      parts.push(id + '=$filter(' + self.escape(filter) + ')');
    });
    if (parts.length) return 'var ' + parts.join(',') + ';';
    return '';
  },

  varsPrefix: function(section) {
    return this.state[section].vars.length ? 'var ' + this.state[section].vars.join(',') + ';' : '';
  },

  body: function(section) {
    return this.state[section].body.join('');
  },

  recurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
    var left, right, self = this, args, expression, computed;
    recursionFn = recursionFn || noop;
    if (!skipWatchIdCheck && isDefined(ast.watchId)) {
      intoId = intoId || this.nextId();
      this.if_('i',
        this.lazyAssign(intoId, this.computedMember('i', ast.watchId)),
        this.lazyRecurse(ast, intoId, nameId, recursionFn, create, true)
      );
      return;
    }
    switch (ast.type) {
    case AST.Program:
      forEach(ast.body, function(expression, pos) {
        self.recurse(expression.expression, undefined, undefined, function(expr) { right = expr; });
        if (pos !== ast.body.length - 1) {
          self.current().body.push(right, ';');
        } else {
          self.return_(right);
        }
      });
      break;
    case AST.Literal:
      expression = this.escape(ast.value);
      this.assign(intoId, expression);
      recursionFn(intoId || expression);
      break;
    case AST.UnaryExpression:
      this.recurse(ast.argument, undefined, undefined, function(expr) { right = expr; });
      expression = ast.operator + '(' + this.ifDefined(right, 0) + ')';
      this.assign(intoId, expression);
      recursionFn(expression);
      break;
    case AST.BinaryExpression:
      this.recurse(ast.left, undefined, undefined, function(expr) { left = expr; });
      this.recurse(ast.right, undefined, undefined, function(expr) { right = expr; });
      if (ast.operator === '+') {
        expression = this.plus(left, right);
      } else if (ast.operator === '-') {
        expression = this.ifDefined(left, 0) + ast.operator + this.ifDefined(right, 0);
      } else {
        expression = '(' + left + ')' + ast.operator + '(' + right + ')';
      }
      this.assign(intoId, expression);
      recursionFn(expression);
      break;
    case AST.LogicalExpression:
      intoId = intoId || this.nextId();
      self.recurse(ast.left, intoId);
      self.if_(ast.operator === '&&' ? intoId : self.not(intoId), self.lazyRecurse(ast.right, intoId));
      recursionFn(intoId);
      break;
    case AST.ConditionalExpression:
      intoId = intoId || this.nextId();
      self.recurse(ast.test, intoId);
      self.if_(intoId, self.lazyRecurse(ast.alternate, intoId), self.lazyRecurse(ast.consequent, intoId));
      recursionFn(intoId);
      break;
    case AST.Identifier:
      intoId = intoId || this.nextId();
      if (nameId) {
        nameId.context = self.stage === 'inputs' ? 's' : this.assign(this.nextId(), this.getHasOwnProperty('l', ast.name) + '?l:s');
        nameId.computed = false;
        nameId.name = ast.name;
      }
      self.if_(self.stage === 'inputs' || self.not(self.getHasOwnProperty('l', ast.name)),
        function() {
          self.if_(self.stage === 'inputs' || 's', function() {
            if (create && create !== 1) {
              self.if_(
                self.isNull(self.nonComputedMember('s', ast.name)),
                self.lazyAssign(self.nonComputedMember('s', ast.name), '{}'));
            }
            self.assign(intoId, self.nonComputedMember('s', ast.name));
          });
        }, intoId && self.lazyAssign(intoId, self.nonComputedMember('l', ast.name))
        );
      recursionFn(intoId);
      break;
    case AST.MemberExpression:
      left = nameId && (nameId.context = this.nextId()) || this.nextId();
      intoId = intoId || this.nextId();
      self.recurse(ast.object, left, undefined, function() {
        self.if_(self.notNull(left), function() {
          if (ast.computed) {
            right = self.nextId();
            self.recurse(ast.property, right);
            self.getStringValue(right);
            if (create && create !== 1) {
              self.if_(self.not(self.computedMember(left, right)), self.lazyAssign(self.computedMember(left, right), '{}'));
            }
            expression = self.computedMember(left, right);
            self.assign(intoId, expression);
            if (nameId) {
              nameId.computed = true;
              nameId.name = right;
            }
          } else {
            if (create && create !== 1) {
              self.if_(self.isNull(self.nonComputedMember(left, ast.property.name)), self.lazyAssign(self.nonComputedMember(left, ast.property.name), '{}'));
            }
            expression = self.nonComputedMember(left, ast.property.name);
            self.assign(intoId, expression);
            if (nameId) {
              nameId.computed = false;
              nameId.name = ast.property.name;
            }
          }
        }, function() {
          self.assign(intoId, 'undefined');
        });
        recursionFn(intoId);
      }, !!create);
      break;
    case AST.CallExpression:
      intoId = intoId || this.nextId();
      if (ast.filter) {
        right = self.filter(ast.callee.name);
        args = [];
        forEach(ast.arguments, function(expr) {
          var argument = self.nextId();
          self.recurse(expr, argument);
          args.push(argument);
        });
        expression = right + '(' + args.join(',') + ')';
        self.assign(intoId, expression);
        recursionFn(intoId);
      } else {
        right = self.nextId();
        left = {};
        args = [];
        self.recurse(ast.callee, right, left, function() {
          self.if_(self.notNull(right), function() {
            forEach(ast.arguments, function(expr) {
              self.recurse(expr, ast.constant ? undefined : self.nextId(), undefined, function(argument) {
                args.push(argument);
              });
            });
            if (left.name) {
              expression = self.member(left.context, left.name, left.computed) + '(' + args.join(',') + ')';
            } else {
              expression = right + '(' + args.join(',') + ')';
            }
            self.assign(intoId, expression);
          }, function() {
            self.assign(intoId, 'undefined');
          });
          recursionFn(intoId);
        });
      }
      break;
    case AST.AssignmentExpression:
      right = this.nextId();
      left = {};
      this.recurse(ast.left, undefined, left, function() {
        self.if_(self.notNull(left.context), function() {
          self.recurse(ast.right, right);
          expression = self.member(left.context, left.name, left.computed) + ast.operator + right;
          self.assign(intoId, expression);
          recursionFn(intoId || expression);
        });
      }, 1);
      break;
    case AST.ArrayExpression:
      args = [];
      forEach(ast.elements, function(expr) {
        self.recurse(expr, ast.constant ? undefined : self.nextId(), undefined, function(argument) {
          args.push(argument);
        });
      });
      expression = '[' + args.join(',') + ']';
      this.assign(intoId, expression);
      recursionFn(intoId || expression);
      break;
    case AST.ObjectExpression:
      args = [];
      computed = false;
      forEach(ast.properties, function(property) {
        if (property.computed) {
          computed = true;
        }
      });
      if (computed) {
        intoId = intoId || this.nextId();
        this.assign(intoId, '{}');
        forEach(ast.properties, function(property) {
          if (property.computed) {
            left = self.nextId();
            self.recurse(property.key, left);
          } else {
            left = property.key.type === AST.Identifier ?
                       property.key.name :
                       ('' + property.key.value);
          }
          right = self.nextId();
          self.recurse(property.value, right);
          self.assign(self.member(intoId, left, property.computed), right);
        });
      } else {
        forEach(ast.properties, function(property) {
          self.recurse(property.value, ast.constant ? undefined : self.nextId(), undefined, function(expr) {
            args.push(self.escape(
                property.key.type === AST.Identifier ? property.key.name :
                  ('' + property.key.value)) +
                ':' + expr);
          });
        });
        expression = '{' + args.join(',') + '}';
        this.assign(intoId, expression);
      }
      recursionFn(intoId || expression);
      break;
    case AST.ThisExpression:
      this.assign(intoId, 's');
      recursionFn(intoId || 's');
      break;
    case AST.LocalsExpression:
      this.assign(intoId, 'l');
      recursionFn(intoId || 'l');
      break;
    case AST.NGValueParameter:
      this.assign(intoId, 'v');
      recursionFn(intoId || 'v');
      break;
    }
  },

  getHasOwnProperty: function(element, property) {
    var key = element + '.' + property;
    var own = this.current().own;
    if (!own.hasOwnProperty(key)) {
      own[key] = this.nextId(false, element + '&&(' + this.escape(property) + ' in ' + element + ')');
    }
    return own[key];
  },

  assign: function(id, value) {
    if (!id) return;
    this.current().body.push(id, '=', value, ';');
    return id;
  },

  filter: function(filterName) {
    if (!this.state.filters.hasOwnProperty(filterName)) {
      this.state.filters[filterName] = this.nextId(true);
    }
    return this.state.filters[filterName];
  },

  ifDefined: function(id, defaultValue) {
    return 'ifDefined(' + id + ',' + this.escape(defaultValue) + ')';
  },

  plus: function(left, right) {
    return 'plus(' + left + ',' + right + ')';
  },

  return_: function(id) {
    this.current().body.push('return ', id, ';');
  },

  if_: function(test, alternate, consequent) {
    if (test === true) {
      alternate();
    } else {
      var body = this.current().body;
      body.push('if(', test, '){');
      alternate();
      body.push('}');
      if (consequent) {
        body.push('else{');
        consequent();
        body.push('}');
      }
    }
  },

  not: function(expression) {
    return '!(' + expression + ')';
  },

  isNull: function(expression) {
    return expression + '==null';
  },

  notNull: function(expression) {
    return expression + '!=null';
  },

  nonComputedMember: function(left, right) {
    var SAFE_IDENTIFIER = /^[$_a-zA-Z][$_a-zA-Z0-9]*$/;
    var UNSAFE_CHARACTERS = /[^$_a-zA-Z0-9]/g;
    if (SAFE_IDENTIFIER.test(right)) {
      return left + '.' + right;
    } else {
      return left  + '["' + right.replace(UNSAFE_CHARACTERS, this.stringEscapeFn) + '"]';
    }
  },

  computedMember: function(left, right) {
    return left + '[' + right + ']';
  },

  member: function(left, right, computed) {
    if (computed) return this.computedMember(left, right);
    return this.nonComputedMember(left, right);
  },

  getStringValue: function(item) {
    this.assign(item, 'getStringValue(' + item + ')');
  },

  lazyRecurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
    var self = this;
    return function() {
      self.recurse(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck);
    };
  },

  lazyAssign: function(id, value) {
    var self = this;
    return function() {
      self.assign(id, value);
    };
  },

  stringEscapeRegex: /[^ a-zA-Z0-9]/g,

  stringEscapeFn: function(c) {
    return '\\u' + ('0000' + c.charCodeAt(0).toString(16)).slice(-4);
  },

  escape: function(value) {
    if (isString(value)) return '\'' + value.replace(this.stringEscapeRegex, this.stringEscapeFn) + '\'';
    if (isNumber(value)) return value.toString();
    if (value === true) return 'true';
    if (value === false) return 'false';
    if (value === null) return 'null';
    if (typeof value === 'undefined') return 'undefined';

    throw $parseMinErr('esc', 'IMPOSSIBLE');
  },

  nextId: function(skip, init) {
    var id = 'v' + (this.state.nextId++);
    if (!skip) {
      this.current().vars.push(id + (init ? '=' + init : ''));
    }
    return id;
  },

  current: function() {
    return this.state[this.state.computing];
  }
};


function ASTInterpreter(astBuilder, $filter) {
  this.astBuilder = astBuilder;
  this.$filter = $filter;
}

ASTInterpreter.prototype = {
  compile: function(expression) {
    var self = this;
    var ast = this.astBuilder.ast(expression);
    findConstantAndWatchExpressions(ast, self.$filter);
    var assignable;
    var assign;
    if ((assignable = assignableAST(ast))) {
      assign = this.recurse(assignable);
    }
    var toWatch = getInputs(ast.body);
    var inputs;
    if (toWatch) {
      inputs = [];
      forEach(toWatch, function(watch, key) {
        var input = self.recurse(watch);
        watch.input = input;
        inputs.push(input);
        watch.watchId = key;
      });
    }
    var expressions = [];
    forEach(ast.body, function(expression) {
      expressions.push(self.recurse(expression.expression));
    });
    var fn = ast.body.length === 0 ? noop :
             ast.body.length === 1 ? expressions[0] :
             function(scope, locals) {
               var lastValue;
               forEach(expressions, function(exp) {
                 lastValue = exp(scope, locals);
               });
               return lastValue;
             };
    if (assign) {
      fn.assign = function(scope, value, locals) {
        return assign(scope, locals, value);
      };
    }
    if (inputs) {
      fn.inputs = inputs;
    }
    fn.literal = isLiteral(ast);
    fn.constant = isConstant(ast);
    return fn;
  },

  recurse: function(ast, context, create) {
    var left, right, self = this, args;
    if (ast.input) {
      return this.inputs(ast.input, ast.watchId);
    }
    switch (ast.type) {
    case AST.Literal:
      return this.value(ast.value, context);
    case AST.UnaryExpression:
      right = this.recurse(ast.argument);
      return this['unary' + ast.operator](right, context);
    case AST.BinaryExpression:
      left = this.recurse(ast.left);
      right = this.recurse(ast.right);
      return this['binary' + ast.operator](left, right, context);
    case AST.LogicalExpression:
      left = this.recurse(ast.left);
      right = this.recurse(ast.right);
      return this['binary' + ast.operator](left, right, context);
    case AST.ConditionalExpression:
      return this['ternary?:'](
        this.recurse(ast.test),
        this.recurse(ast.alternate),
        this.recurse(ast.consequent),
        context
      );
    case AST.Identifier:
      return self.identifier(ast.name, context, create);
    case AST.MemberExpression:
      left = this.recurse(ast.object, false, !!create);
      if (!ast.computed) {
        right = ast.property.name;
      }
      if (ast.computed) right = this.recurse(ast.property);
      return ast.computed ?
        this.computedMember(left, right, context, create) :
        this.nonComputedMember(left, right, context, create);
    case AST.CallExpression:
      args = [];
      forEach(ast.arguments, function(expr) {
        args.push(self.recurse(expr));
      });
      if (ast.filter) right = this.$filter(ast.callee.name);
      if (!ast.filter) right = this.recurse(ast.callee, true);
      return ast.filter ?
        function(scope, locals, assign, inputs) {
          var values = [];
          for (var i = 0; i < args.length; ++i) {
            values.push(args[i](scope, locals, assign, inputs));
          }
          var value = right.apply(undefined, values, inputs);
          return context ? {context: undefined, name: undefined, value: value} : value;
        } :
        function(scope, locals, assign, inputs) {
          var rhs = right(scope, locals, assign, inputs);
          var value;
          if (rhs.value != null) {
            var values = [];
            for (var i = 0; i < args.length; ++i) {
              values.push(args[i](scope, locals, assign, inputs));
            }
            value = rhs.value.apply(rhs.context, values);
          }
          return context ? {value: value} : value;
        };
    case AST.AssignmentExpression:
      left = this.recurse(ast.left, true, 1);
      right = this.recurse(ast.right);
      return function(scope, locals, assign, inputs) {
        var lhs = left(scope, locals, assign, inputs);
        var rhs = right(scope, locals, assign, inputs);
        lhs.context[lhs.name] = rhs;
        return context ? {value: rhs} : rhs;
      };
    case AST.ArrayExpression:
      args = [];
      forEach(ast.elements, function(expr) {
        args.push(self.recurse(expr));
      });
      return function(scope, locals, assign, inputs) {
        var value = [];
        for (var i = 0; i < args.length; ++i) {
          value.push(args[i](scope, locals, assign, inputs));
        }
        return context ? {value: value} : value;
      };
    case AST.ObjectExpression:
      args = [];
      forEach(ast.properties, function(property) {
        if (property.computed) {
          args.push({key: self.recurse(property.key),
                     computed: true,
                     value: self.recurse(property.value)
          });
        } else {
          args.push({key: property.key.type === AST.Identifier ?
                          property.key.name :
                          ('' + property.key.value),
                     computed: false,
                     value: self.recurse(property.value)
          });
        }
      });
      return function(scope, locals, assign, inputs) {
        var value = {};
        for (var i = 0; i < args.length; ++i) {
          if (args[i].computed) {
            value[args[i].key(scope, locals, assign, inputs)] = args[i].value(scope, locals, assign, inputs);
          } else {
            value[args[i].key] = args[i].value(scope, locals, assign, inputs);
          }
        }
        return context ? {value: value} : value;
      };
    case AST.ThisExpression:
      return function(scope) {
        return context ? {value: scope} : scope;
      };
    case AST.LocalsExpression:
      return function(scope, locals) {
        return context ? {value: locals} : locals;
      };
    case AST.NGValueParameter:
      return function(scope, locals, assign) {
        return context ? {value: assign} : assign;
      };
    }
  },

  'unary+': function(argument, context) {
    return function(scope, locals, assign, inputs) {
      var arg = argument(scope, locals, assign, inputs);
      if (isDefined(arg)) {
        arg = +arg;
      } else {
        arg = 0;
      }
      return context ? {value: arg} : arg;
    };
  },
  'unary-': function(argument, context) {
    return function(scope, locals, assign, inputs) {
      var arg = argument(scope, locals, assign, inputs);
      if (isDefined(arg)) {
        arg = -arg;
      } else {
        arg = -0;
      }
      return context ? {value: arg} : arg;
    };
  },
  'unary!': function(argument, context) {
    return function(scope, locals, assign, inputs) {
      var arg = !argument(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary+': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var lhs = left(scope, locals, assign, inputs);
      var rhs = right(scope, locals, assign, inputs);
      var arg = plusFn(lhs, rhs);
      return context ? {value: arg} : arg;
    };
  },
  'binary-': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var lhs = left(scope, locals, assign, inputs);
      var rhs = right(scope, locals, assign, inputs);
      var arg = (isDefined(lhs) ? lhs : 0) - (isDefined(rhs) ? rhs : 0);
      return context ? {value: arg} : arg;
    };
  },
  'binary*': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) * right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary/': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) / right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary%': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) % right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary===': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) === right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary!==': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) !== right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary==': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      // eslint-disable-next-line eqeqeq
      var arg = left(scope, locals, assign, inputs) == right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary!=': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      // eslint-disable-next-line eqeqeq
      var arg = left(scope, locals, assign, inputs) != right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary<': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) < right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary>': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) > right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary<=': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) <= right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary>=': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) >= right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary&&': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) && right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary||': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) || right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'ternary?:': function(test, alternate, consequent, context) {
    return function(scope, locals, assign, inputs) {
      var arg = test(scope, locals, assign, inputs) ? alternate(scope, locals, assign, inputs) : consequent(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  value: function(value, context) {
    return function() { return context ? {context: undefined, name: undefined, value: value} : value; };
  },
  identifier: function(name, context, create) {
    return function(scope, locals, assign, inputs) {
      var base = locals && (name in locals) ? locals : scope;
      if (create && create !== 1 && base && base[name] == null) {
        base[name] = {};
      }
      var value = base ? base[name] : undefined;
      if (context) {
        return {context: base, name: name, value: value};
      } else {
        return value;
      }
    };
  },
  computedMember: function(left, right, context, create) {
    return function(scope, locals, assign, inputs) {
      var lhs = left(scope, locals, assign, inputs);
      var rhs;
      var value;
      if (lhs != null) {
        rhs = right(scope, locals, assign, inputs);
        rhs = getStringValue(rhs);
        if (create && create !== 1) {
          if (lhs && !(lhs[rhs])) {
            lhs[rhs] = {};
          }
        }
        value = lhs[rhs];
      }
      if (context) {
        return {context: lhs, name: rhs, value: value};
      } else {
        return value;
      }
    };
  },
  nonComputedMember: function(left, right, context, create) {
    return function(scope, locals, assign, inputs) {
      var lhs = left(scope, locals, assign, inputs);
      if (create && create !== 1) {
        if (lhs && lhs[right] == null) {
          lhs[right] = {};
        }
      }
      var value = lhs != null ? lhs[right] : undefined;
      if (context) {
        return {context: lhs, name: right, value: value};
      } else {
        return value;
      }
    };
  },
  inputs: function(input, watchId) {
    return function(scope, value, locals, inputs) {
      if (inputs) return inputs[watchId];
      return input(scope, value, locals);
    };
  }
};

/**
 * @constructor
 */
var Parser = function Parser(lexer, $filter, options) {
  this.lexer = lexer;
  this.$filter = $filter;
  this.options = options;
  this.ast = new AST(lexer, options);
  this.astCompiler = options.csp ? new ASTInterpreter(this.ast, $filter) :
                                   new ASTCompiler(this.ast, $filter);
};

Parser.prototype = {
  constructor: Parser,

  parse: function(text) {
    return this.astCompiler.compile(text);
  }
};

function getValueOf(value) {
  return isFunction(value.valueOf) ? value.valueOf() : objectValueOf.call(value);
}

///////////////////////////////////

/**
 * @ngdoc service
 * @name $parse
 * @kind function
 *
 * @description
 *
 * Converts Angular {@link guide/expression expression} into a function.
 *
 * ```js
 *   var getter = $parse('user.name');
 *   var setter = getter.assign;
 *   var context = {user:{name:'angular'}};
 *   var locals = {user:{name:'local'}};
 *
 *   expect(getter(context)).toEqual('angular');
 *   setter(context, 'newValue');
 *   expect(context.user.name).toEqual('newValue');
 *   expect(getter(context, locals)).toEqual('local');
 * ```
 *
 *
 * @param {string} expression String expression to compile.
 * @returns {function(context, locals)} a function which represents the compiled expression:
 *
 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
 *      are evaluated against (typically a scope object).
 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
 *      `context`.
 *
 *    The returned function also has the following properties:
 *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript
 *        literal.
 *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript
 *        constant literals.
 *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be
 *        set to a function to change its value on the given context.
 *
 */


/**
 * @ngdoc provider
 * @name $parseProvider
 * @this
 *
 * @description
 * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}
 *  service.
 */
function $ParseProvider() {
  var cache = createMap();
  var literals = {
    'true': true,
    'false': false,
    'null': null,
    'undefined': undefined
  };
  var identStart, identContinue;

  /**
   * @ngdoc method
   * @name $parseProvider#addLiteral
   * @description
   *
   * Configure $parse service to add literal values that will be present as literal at expressions.
   *
   * @param {string} literalName Token for the literal value. The literal name value must be a valid literal name.
   * @param {*} literalValue Value for this literal. All literal values must be primitives or `undefined`.
   *
   **/
  this.addLiteral = function(literalName, literalValue) {
    literals[literalName] = literalValue;
  };

 /**
  * @ngdoc method
  * @name $parseProvider#setIdentifierFns
  *
  * @description
  *
  * Allows defining the set of characters that are allowed in Angular expressions. The function
  * `identifierStart` will get called to know if a given character is a valid character to be the
  * first character for an identifier. The function `identifierContinue` will get called to know if
  * a given character is a valid character to be a follow-up identifier character. The functions
  * `identifierStart` and `identifierContinue` will receive as arguments the single character to be
  * identifier and the character code point. These arguments will be `string` and `numeric`. Keep in
  * mind that the `string` parameter can be two characters long depending on the character
  * representation. It is expected for the function to return `true` or `false`, whether that
  * character is allowed or not.
  *
  * Since this function will be called extensively, keep the implementation of these functions fast,
  * as the performance of these functions have a direct impact on the expressions parsing speed.
  *
  * @param {function=} identifierStart The function that will decide whether the given character is
  *   a valid identifier start character.
  * @param {function=} identifierContinue The function that will decide whether the given character is
  *   a valid identifier continue character.
  */
  this.setIdentifierFns = function(identifierStart, identifierContinue) {
    identStart = identifierStart;
    identContinue = identifierContinue;
    return this;
  };

  this.$get = ['$filter', function($filter) {
    var noUnsafeEval = csp().noUnsafeEval;
    var $parseOptions = {
          csp: noUnsafeEval,
          literals: copy(literals),
          isIdentifierStart: isFunction(identStart) && identStart,
          isIdentifierContinue: isFunction(identContinue) && identContinue
        };
    return $parse;

    function $parse(exp, interceptorFn) {
      var parsedExpression, oneTime, cacheKey;

      switch (typeof exp) {
        case 'string':
          exp = exp.trim();
          cacheKey = exp;

          parsedExpression = cache[cacheKey];

          if (!parsedExpression) {
            if (exp.charAt(0) === ':' && exp.charAt(1) === ':') {
              oneTime = true;
              exp = exp.substring(2);
            }
            var lexer = new Lexer($parseOptions);
            var parser = new Parser(lexer, $filter, $parseOptions);
            parsedExpression = parser.parse(exp);
            if (parsedExpression.constant) {
              parsedExpression.$$watchDelegate = constantWatchDelegate;
            } else if (oneTime) {
              parsedExpression.$$watchDelegate = parsedExpression.literal ?
                  oneTimeLiteralWatchDelegate : oneTimeWatchDelegate;
            } else if (parsedExpression.inputs) {
              parsedExpression.$$watchDelegate = inputsWatchDelegate;
            }
            cache[cacheKey] = parsedExpression;
          }
          return addInterceptor(parsedExpression, interceptorFn);

        case 'function':
          return addInterceptor(exp, interceptorFn);

        default:
          return addInterceptor(noop, interceptorFn);
      }
    }

    function expressionInputDirtyCheck(newValue, oldValueOfValue, compareObjectIdentity) {

      if (newValue == null || oldValueOfValue == null) { // null/undefined
        return newValue === oldValueOfValue;
      }

      if (typeof newValue === 'object' && !compareObjectIdentity) {

        // attempt to convert the value to a primitive type
        // TODO(docs): add a note to docs that by implementing valueOf even objects and arrays can
        //             be cheaply dirty-checked
        newValue = getValueOf(newValue);

        if (typeof newValue === 'object') {
          // objects/arrays are not supported - deep-watching them would be too expensive
          return false;
        }

        // fall-through to the primitive equality check
      }

      //Primitive or NaN
      // eslint-disable-next-line no-self-compare
      return newValue === oldValueOfValue || (newValue !== newValue && oldValueOfValue !== oldValueOfValue);
    }

    function inputsWatchDelegate(scope, listener, objectEquality, parsedExpression, prettyPrintExpression) {
      var inputExpressions = parsedExpression.inputs;
      var lastResult;

      if (inputExpressions.length === 1) {
        var oldInputValueOf = expressionInputDirtyCheck; // init to something unique so that equals check fails
        inputExpressions = inputExpressions[0];
        return scope.$watch(function expressionInputWatch(scope) {
          var newInputValue = inputExpressions(scope);
          if (!expressionInputDirtyCheck(newInputValue, oldInputValueOf, parsedExpression.literal)) {
            lastResult = parsedExpression(scope, undefined, undefined, [newInputValue]);
            oldInputValueOf = newInputValue && getValueOf(newInputValue);
          }
          return lastResult;
        }, listener, objectEquality, prettyPrintExpression);
      }

      var oldInputValueOfValues = [];
      var oldInputValues = [];
      for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
        oldInputValueOfValues[i] = expressionInputDirtyCheck; // init to something unique so that equals check fails
        oldInputValues[i] = null;
      }

      return scope.$watch(function expressionInputsWatch(scope) {
        var changed = false;

        for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
          var newInputValue = inputExpressions[i](scope);
          if (changed || (changed = !expressionInputDirtyCheck(newInputValue, oldInputValueOfValues[i], parsedExpression.literal))) {
            oldInputValues[i] = newInputValue;
            oldInputValueOfValues[i] = newInputValue && getValueOf(newInputValue);
          }
        }

        if (changed) {
          lastResult = parsedExpression(scope, undefined, undefined, oldInputValues);
        }

        return lastResult;
      }, listener, objectEquality, prettyPrintExpression);
    }

    function oneTimeWatchDelegate(scope, listener, objectEquality, parsedExpression, prettyPrintExpression) {
      var unwatch, lastValue;
      if (parsedExpression.inputs) {
        unwatch = inputsWatchDelegate(scope, oneTimeListener, objectEquality, parsedExpression, prettyPrintExpression);
      } else {
        unwatch = scope.$watch(oneTimeWatch, oneTimeListener, objectEquality);
      }
      return unwatch;

      function oneTimeWatch(scope) {
        return parsedExpression(scope);
      }
      function oneTimeListener(value, old, scope) {
        lastValue = value;
        if (isFunction(listener)) {
          listener(value, old, scope);
        }
        if (isDefined(value)) {
          scope.$$postDigest(function() {
            if (isDefined(lastValue)) {
              unwatch();
            }
          });
        }
      }
    }

    function oneTimeLiteralWatchDelegate(scope, listener, objectEquality, parsedExpression) {
      var unwatch, lastValue;
      unwatch = scope.$watch(function oneTimeWatch(scope) {
        return parsedExpression(scope);
      }, function oneTimeListener(value, old, scope) {
        lastValue = value;
        if (isFunction(listener)) {
          listener(value, old, scope);
        }
        if (isAllDefined(value)) {
          scope.$$postDigest(function() {
            if (isAllDefined(lastValue)) unwatch();
          });
        }
      }, objectEquality);

      return unwatch;

      function isAllDefined(value) {
        var allDefined = true;
        forEach(value, function(val) {
          if (!isDefined(val)) allDefined = false;
        });
        return allDefined;
      }
    }

    function constantWatchDelegate(scope, listener, objectEquality, parsedExpression) {
      var unwatch = scope.$watch(function constantWatch(scope) {
        unwatch();
        return parsedExpression(scope);
      }, listener, objectEquality);
      return unwatch;
    }

    function addInterceptor(parsedExpression, interceptorFn) {
      if (!interceptorFn) return parsedExpression;
      var watchDelegate = parsedExpression.$$watchDelegate;
      var useInputs = false;

      var regularWatch =
          watchDelegate !== oneTimeLiteralWatchDelegate &&
          watchDelegate !== oneTimeWatchDelegate;

      var fn = regularWatch ? function regularInterceptedExpression(scope, locals, assign, inputs) {
        var value = useInputs && inputs ? inputs[0] : parsedExpression(scope, locals, assign, inputs);
        return interceptorFn(value, scope, locals);
      } : function oneTimeInterceptedExpression(scope, locals, assign, inputs) {
        var value = parsedExpression(scope, locals, assign, inputs);
        var result = interceptorFn(value, scope, locals);
        // we only return the interceptor's result if the
        // initial value is defined (for bind-once)
        return isDefined(value) ? result : value;
      };

      // Propagate $$watchDelegates other then inputsWatchDelegate
      useInputs = !parsedExpression.inputs;
      if (parsedExpression.$$watchDelegate &&
          parsedExpression.$$watchDelegate !== inputsWatchDelegate) {
        fn.$$watchDelegate = parsedExpression.$$watchDelegate;
        fn.inputs = parsedExpression.inputs;
      } else if (!interceptorFn.$stateful) {
        // If there is an interceptor, but no watchDelegate then treat the interceptor like
        // we treat filters - it is assumed to be a pure function unless flagged with $stateful
        fn.$$watchDelegate = inputsWatchDelegate;
        fn.inputs = parsedExpression.inputs ? parsedExpression.inputs : [parsedExpression];
      }

      return fn;
    }
  }];
}

/**
 * @ngdoc service
 * @name $q
 * @requires $rootScope
 *
 * @description
 * A service that helps you run functions asynchronously, and use their return values (or exceptions)
 * when they are done processing.
 *
 * This is a [Promises/A+](https://promisesaplus.com/)-compliant implementation of promises/deferred
 * objects inspired by [Kris Kowal's Q](https://github.com/kriskowal/q).
 *
 * $q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred
 * implementations, and the other which resembles ES6 (ES2015) promises to some degree.
 *
 * # $q constructor
 *
 * The streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`
 * function as the first argument. This is similar to the native Promise implementation from ES6,
 * see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).
 *
 * While the constructor-style use is supported, not all of the supporting methods from ES6 promises are
 * available yet.
 *
 * It can be used like so:
 *
 * ```js
 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
 *   // are available in the current lexical scope (they could have been injected or passed in).
 *
 *   function asyncGreet(name) {
 *     // perform some asynchronous operation, resolve or reject the promise when appropriate.
 *     return $q(function(resolve, reject) {
 *       setTimeout(function() {
 *         if (okToGreet(name)) {
 *           resolve('Hello, ' + name + '!');
 *         } else {
 *           reject('Greeting ' + name + ' is not allowed.');
 *         }
 *       }, 1000);
 *     });
 *   }
 *
 *   var promise = asyncGreet('Robin Hood');
 *   promise.then(function(greeting) {
 *     alert('Success: ' + greeting);
 *   }, function(reason) {
 *     alert('Failed: ' + reason);
 *   });
 * ```
 *
 * Note: progress/notify callbacks are not currently supported via the ES6-style interface.
 *
 * Note: unlike ES6 behavior, an exception thrown in the constructor function will NOT implicitly reject the promise.
 *
 * However, the more traditional CommonJS-style usage is still available, and documented below.
 *
 * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an
 * interface for interacting with an object that represents the result of an action that is
 * performed asynchronously, and may or may not be finished at any given point in time.
 *
 * From the perspective of dealing with error handling, deferred and promise APIs are to
 * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.
 *
 * ```js
 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
 *   // are available in the current lexical scope (they could have been injected or passed in).
 *
 *   function asyncGreet(name) {
 *     var deferred = $q.defer();
 *
 *     setTimeout(function() {
 *       deferred.notify('About to greet ' + name + '.');
 *
 *       if (okToGreet(name)) {
 *         deferred.resolve('Hello, ' + name + '!');
 *       } else {
 *         deferred.reject('Greeting ' + name + ' is not allowed.');
 *       }
 *     }, 1000);
 *
 *     return deferred.promise;
 *   }
 *
 *   var promise = asyncGreet('Robin Hood');
 *   promise.then(function(greeting) {
 *     alert('Success: ' + greeting);
 *   }, function(reason) {
 *     alert('Failed: ' + reason);
 *   }, function(update) {
 *     alert('Got notification: ' + update);
 *   });
 * ```
 *
 * At first it might not be obvious why this extra complexity is worth the trouble. The payoff
 * comes in the way of guarantees that promise and deferred APIs make, see
 * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.
 *
 * Additionally the promise api allows for composition that is very hard to do with the
 * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.
 * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the
 * section on serial or parallel joining of promises.
 *
 * # The Deferred API
 *
 * A new instance of deferred is constructed by calling `$q.defer()`.
 *
 * The purpose of the deferred object is to expose the associated Promise instance as well as APIs
 * that can be used for signaling the successful or unsuccessful completion, as well as the status
 * of the task.
 *
 * **Methods**
 *
 * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection
 *   constructed via `$q.reject`, the promise will be rejected instead.
 * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to
 *   resolving it with a rejection constructed via `$q.reject`.
 * - `notify(value)` - provides updates on the status of the promise's execution. This may be called
 *   multiple times before the promise is either resolved or rejected.
 *
 * **Properties**
 *
 * - promise – `{Promise}` – promise object associated with this deferred.
 *
 *
 * # The Promise API
 *
 * A new promise instance is created when a deferred instance is created and can be retrieved by
 * calling `deferred.promise`.
 *
 * The purpose of the promise object is to allow for interested parties to get access to the result
 * of the deferred task when it completes.
 *
 * **Methods**
 *
 * - `then(successCallback, [errorCallback], [notifyCallback])` – regardless of when the promise was or
 *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously
 *   as soon as the result is available. The callbacks are called with a single argument: the result
 *   or rejection reason. Additionally, the notify callback may be called zero or more times to
 *   provide a progress indication, before the promise is resolved or rejected.
 *
 *   This method *returns a new promise* which is resolved or rejected via the return value of the
 *   `successCallback`, `errorCallback` (unless that value is a promise, in which case it is resolved
 *   with the value which is resolved in that promise using
 *   [promise chaining](http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promises-queues)).
 *   It also notifies via the return value of the `notifyCallback` method. The promise cannot be
 *   resolved or rejected from the notifyCallback method. The errorCallback and notifyCallback
 *   arguments are optional.
 *
 * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`
 *
 * - `finally(callback, notifyCallback)` – allows you to observe either the fulfillment or rejection of a promise,
 *   but to do so without modifying the final value. This is useful to release resources or do some
 *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full
 *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for
 *   more information.
 *
 * # Chaining promises
 *
 * Because calling the `then` method of a promise returns a new derived promise, it is easily
 * possible to create a chain of promises:
 *
 * ```js
 *   promiseB = promiseA.then(function(result) {
 *     return result + 1;
 *   });
 *
 *   // promiseB will be resolved immediately after promiseA is resolved and its value
 *   // will be the result of promiseA incremented by 1
 * ```
 *
 * It is possible to create chains of any length and since a promise can be resolved with another
 * promise (which will defer its resolution further), it is possible to pause/defer resolution of
 * the promises at any point in the chain. This makes it possible to implement powerful APIs like
 * $http's response interceptors.
 *
 *
 * # Differences between Kris Kowal's Q and $q
 *
 *  There are two main differences:
 *
 * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation
 *   mechanism in angular, which means faster propagation of resolution or rejection into your
 *   models and avoiding unnecessary browser repaints, which would result in flickering UI.
 * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains
 *   all the important functionality needed for common async tasks.
 *
 * # Testing
 *
 *  ```js
 *    it('should simulate promise', inject(function($q, $rootScope) {
 *      var deferred = $q.defer();
 *      var promise = deferred.promise;
 *      var resolvedValue;
 *
 *      promise.then(function(value) { resolvedValue = value; });
 *      expect(resolvedValue).toBeUndefined();
 *
 *      // Simulate resolving of promise
 *      deferred.resolve(123);
 *      // Note that the 'then' function does not get called synchronously.
 *      // This is because we want the promise API to always be async, whether or not
 *      // it got called synchronously or asynchronously.
 *      expect(resolvedValue).toBeUndefined();
 *
 *      // Propagate promise resolution to 'then' functions using $apply().
 *      $rootScope.$apply();
 *      expect(resolvedValue).toEqual(123);
 *    }));
 *  ```
 *
 * @param {function(function, function)} resolver Function which is responsible for resolving or
 *   rejecting the newly created promise. The first parameter is a function which resolves the
 *   promise, the second parameter is a function which rejects the promise.
 *
 * @returns {Promise} The newly created promise.
 */
/**
 * @ngdoc provider
 * @name $qProvider
 * @this
 *
 * @description
 */
function $QProvider() {
  var errorOnUnhandledRejections = true;
  this.$get = ['$rootScope', '$exceptionHandler', function($rootScope, $exceptionHandler) {
    return qFactory(function(callback) {
      $rootScope.$evalAsync(callback);
    }, $exceptionHandler, errorOnUnhandledRejections);
  }];

  /**
   * @ngdoc method
   * @name $qProvider#errorOnUnhandledRejections
   * @kind function
   *
   * @description
   * Retrieves or overrides whether to generate an error when a rejected promise is not handled.
   * This feature is enabled by default.
   *
   * @param {boolean=} value Whether to generate an error when a rejected promise is not handled.
   * @returns {boolean|ng.$qProvider} Current value when called without a new value or self for
   *    chaining otherwise.
   */
  this.errorOnUnhandledRejections = function(value) {
    if (isDefined(value)) {
      errorOnUnhandledRejections = value;
      return this;
    } else {
      return errorOnUnhandledRejections;
    }
  };
}

/** @this */
function $$QProvider() {
  var errorOnUnhandledRejections = true;
  this.$get = ['$browser', '$exceptionHandler', function($browser, $exceptionHandler) {
    return qFactory(function(callback) {
      $browser.defer(callback);
    }, $exceptionHandler, errorOnUnhandledRejections);
  }];

  this.errorOnUnhandledRejections = function(value) {
    if (isDefined(value)) {
      errorOnUnhandledRejections = value;
      return this;
    } else {
      return errorOnUnhandledRejections;
    }
  };
}

/**
 * Constructs a promise manager.
 *
 * @param {function(function)} nextTick Function for executing functions in the next turn.
 * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for
 *     debugging purposes.
 @ param {=boolean} errorOnUnhandledRejections Whether an error should be generated on unhandled
 *     promises rejections.
 * @returns {object} Promise manager.
 */
function qFactory(nextTick, exceptionHandler, errorOnUnhandledRejections) {
  var $qMinErr = minErr('$q', TypeError);
  var queueSize = 0;
  var checkQueue = [];

  /**
   * @ngdoc method
   * @name ng.$q#defer
   * @kind function
   *
   * @description
   * Creates a `Deferred` object which represents a task which will finish in the future.
   *
   * @returns {Deferred} Returns a new instance of deferred.
   */
  function defer() {
    return new Deferred();
  }

  function Deferred() {
    var promise = this.promise = new Promise();
    //Non prototype methods necessary to support unbound execution :/
    this.resolve = function(val) { resolvePromise(promise, val); };
    this.reject = function(reason) { rejectPromise(promise, reason); };
    this.notify = function(progress) { notifyPromise(promise, progress); };
  }


  function Promise() {
    this.$$state = { status: 0 };
  }

  extend(Promise.prototype, {
    then: function(onFulfilled, onRejected, progressBack) {
      if (isUndefined(onFulfilled) && isUndefined(onRejected) && isUndefined(progressBack)) {
        return this;
      }
      var result = new Promise();

      this.$$state.pending = this.$$state.pending || [];
      this.$$state.pending.push([result, onFulfilled, onRejected, progressBack]);
      if (this.$$state.status > 0) scheduleProcessQueue(this.$$state);

      return result;
    },

    'catch': function(callback) {
      return this.then(null, callback);
    },

    'finally': function(callback, progressBack) {
      return this.then(function(value) {
        return handleCallback(value, resolve, callback);
      }, function(error) {
        return handleCallback(error, reject, callback);
      }, progressBack);
    }
  });

  function processQueue(state) {
    var fn, promise, pending;

    pending = state.pending;
    state.processScheduled = false;
    state.pending = undefined;
    try {
      for (var i = 0, ii = pending.length; i < ii; ++i) {
        state.pur = true;
        promise = pending[i][0];
        fn = pending[i][state.status];
        try {
          if (isFunction(fn)) {
            resolvePromise(promise, fn(state.value));
          } else if (state.status === 1) {
            resolvePromise(promise, state.value);
          } else {
            rejectPromise(promise, state.value);
          }
        } catch (e) {
          rejectPromise(promise, e);
        }
      }
    } finally {
      --queueSize;
      if (errorOnUnhandledRejections && queueSize === 0) {
        nextTick(processChecks);
      }
    }
  }

  function processChecks() {
    // eslint-disable-next-line no-unmodified-loop-condition
    while (!queueSize && checkQueue.length) {
      var toCheck = checkQueue.shift();
      if (!toCheck.pur) {
        toCheck.pur = true;
        var errorMessage = 'Possibly unhandled rejection: ' + toDebugString(toCheck.value);
        if (toCheck.value instanceof Error) {
          exceptionHandler(toCheck.value, errorMessage);
        } else {
          exceptionHandler(errorMessage);
        }
      }
    }
  }

  function scheduleProcessQueue(state) {
    if (errorOnUnhandledRejections && !state.pending && state.status === 2 && !state.pur) {
      if (queueSize === 0 && checkQueue.length === 0) {
        nextTick(processChecks);
      }
      checkQueue.push(state);
    }
    if (state.processScheduled || !state.pending) return;
    state.processScheduled = true;
    ++queueSize;
    nextTick(function() { processQueue(state); });
  }

  function resolvePromise(promise, val) {
    if (promise.$$state.status) return;
    if (val === promise) {
      $$reject(promise, $qMinErr(
        'qcycle',
        'Expected promise to be resolved with value other than itself \'{0}\'',
        val));
    } else {
      $$resolve(promise, val);
    }

  }

  function $$resolve(promise, val) {
    var then;
    var done = false;
    try {
      if (isObject(val) || isFunction(val)) then = val.then;
      if (isFunction(then)) {
        promise.$$state.status = -1;
        then.call(val, doResolve, doReject, doNotify);
      } else {
        promise.$$state.value = val;
        promise.$$state.status = 1;
        scheduleProcessQueue(promise.$$state);
      }
    } catch (e) {
      doReject(e);
    }

    function doResolve(val) {
      if (done) return;
      done = true;
      $$resolve(promise, val);
    }
    function doReject(val) {
      if (done) return;
      done = true;
      $$reject(promise, val);
    }
    function doNotify(progress) {
      notifyPromise(promise, progress);
    }
  }

  function rejectPromise(promise, reason) {
    if (promise.$$state.status) return;
    $$reject(promise, reason);
  }

  function $$reject(promise, reason) {
    promise.$$state.value = reason;
    promise.$$state.status = 2;
    scheduleProcessQueue(promise.$$state);
  }

  function notifyPromise(promise, progress) {
    var callbacks = promise.$$state.pending;

    if ((promise.$$state.status <= 0) && callbacks && callbacks.length) {
      nextTick(function() {
        var callback, result;
        for (var i = 0, ii = callbacks.length; i < ii; i++) {
          result = callbacks[i][0];
          callback = callbacks[i][3];
          try {
            notifyPromise(result, isFunction(callback) ? callback(progress) : progress);
          } catch (e) {
            exceptionHandler(e);
          }
        }
      });
    }
  }

  /**
   * @ngdoc method
   * @name $q#reject
   * @kind function
   *
   * @description
   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be
   * used to forward rejection in a chain of promises. If you are dealing with the last promise in
   * a promise chain, you don't need to worry about it.
   *
   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of
   * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via
   * a promise error callback and you want to forward the error to the promise derived from the
   * current promise, you have to "rethrow" the error by returning a rejection constructed via
   * `reject`.
   *
   * ```js
   *   promiseB = promiseA.then(function(result) {
   *     // success: do something and resolve promiseB
   *     //          with the old or a new result
   *     return result;
   *   }, function(reason) {
   *     // error: handle the error if possible and
   *     //        resolve promiseB with newPromiseOrValue,
   *     //        otherwise forward the rejection to promiseB
   *     if (canHandle(reason)) {
   *      // handle the error and recover
   *      return newPromiseOrValue;
   *     }
   *     return $q.reject(reason);
   *   });
   * ```
   *
   * @param {*} reason Constant, message, exception or an object representing the rejection reason.
   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.
   */
  function reject(reason) {
    var result = new Promise();
    rejectPromise(result, reason);
    return result;
  }

  function handleCallback(value, resolver, callback) {
    var callbackOutput = null;
    try {
      if (isFunction(callback)) callbackOutput = callback();
    } catch (e) {
      return reject(e);
    }
    if (isPromiseLike(callbackOutput)) {
      return callbackOutput.then(function() {
        return resolver(value);
      }, reject);
    } else {
      return resolver(value);
    }
  }

  /**
   * @ngdoc method
   * @name $q#when
   * @kind function
   *
   * @description
   * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.
   * This is useful when you are dealing with an object that might or might not be a promise, or if
   * the promise comes from a source that can't be trusted.
   *
   * @param {*} value Value or a promise
   * @param {Function=} successCallback
   * @param {Function=} errorCallback
   * @param {Function=} progressCallback
   * @returns {Promise} Returns a promise of the passed value or promise
   */


  function when(value, callback, errback, progressBack) {
    var result = new Promise();
    resolvePromise(result, value);
    return result.then(callback, errback, progressBack);
  }

  /**
   * @ngdoc method
   * @name $q#resolve
   * @kind function
   *
   * @description
   * Alias of {@link ng.$q#when when} to maintain naming consistency with ES6.
   *
   * @param {*} value Value or a promise
   * @param {Function=} successCallback
   * @param {Function=} errorCallback
   * @param {Function=} progressCallback
   * @returns {Promise} Returns a promise of the passed value or promise
   */
  var resolve = when;

  /**
   * @ngdoc method
   * @name $q#all
   * @kind function
   *
   * @description
   * Combines multiple promises into a single promise that is resolved when all of the input
   * promises are resolved.
   *
   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
   * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,
   *   each value corresponding to the promise at the same index/key in the `promises` array/hash.
   *   If any of the promises is resolved with a rejection, this resulting promise will be rejected
   *   with the same rejection value.
   */

  function all(promises) {
    var result = new Promise(),
        counter = 0,
        results = isArray(promises) ? [] : {};

    forEach(promises, function(promise, key) {
      counter++;
      when(promise).then(function(value) {
        results[key] = value;
        if (!(--counter)) resolvePromise(result, results);
      }, function(reason) {
        rejectPromise(result, reason);
      });
    });

    if (counter === 0) {
      resolvePromise(result, results);
    }

    return result;
  }

  /**
   * @ngdoc method
   * @name $q#race
   * @kind function
   *
   * @description
   * Returns a promise that resolves or rejects as soon as one of those promises
   * resolves or rejects, with the value or reason from that promise.
   *
   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
   * @returns {Promise} a promise that resolves or rejects as soon as one of the `promises`
   * resolves or rejects, with the value or reason from that promise.
   */

  function race(promises) {
    var deferred = defer();

    forEach(promises, function(promise) {
      when(promise).then(deferred.resolve, deferred.reject);
    });

    return deferred.promise;
  }

  function $Q(resolver) {
    if (!isFunction(resolver)) {
      throw $qMinErr('norslvr', 'Expected resolverFn, got \'{0}\'', resolver);
    }

    var promise = new Promise();

    function resolveFn(value) {
      resolvePromise(promise, value);
    }

    function rejectFn(reason) {
      rejectPromise(promise, reason);
    }

    resolver(resolveFn, rejectFn);

    return promise;
  }

  // Let's make the instanceof operator work for promises, so that
  // `new $q(fn) instanceof $q` would evaluate to true.
  $Q.prototype = Promise.prototype;

  $Q.defer = defer;
  $Q.reject = reject;
  $Q.when = when;
  $Q.resolve = resolve;
  $Q.all = all;
  $Q.race = race;

  return $Q;
}

/** @this */
function $$RAFProvider() { //rAF
  this.$get = ['$window', '$timeout', function($window, $timeout) {
    var requestAnimationFrame = $window.requestAnimationFrame ||
                                $window.webkitRequestAnimationFrame;

    var cancelAnimationFrame = $window.cancelAnimationFrame ||
                               $window.webkitCancelAnimationFrame ||
                               $window.webkitCancelRequestAnimationFrame;

    var rafSupported = !!requestAnimationFrame;
    var raf = rafSupported
      ? function(fn) {
          var id = requestAnimationFrame(fn);
          return function() {
            cancelAnimationFrame(id);
          };
        }
      : function(fn) {
          var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666
          return function() {
            $timeout.cancel(timer);
          };
        };

    raf.supported = rafSupported;

    return raf;
  }];
}

/**
 * DESIGN NOTES
 *
 * The design decisions behind the scope are heavily favored for speed and memory consumption.
 *
 * The typical use of scope is to watch the expressions, which most of the time return the same
 * value as last time so we optimize the operation.
 *
 * Closures construction is expensive in terms of speed as well as memory:
 *   - No closures, instead use prototypical inheritance for API
 *   - Internal state needs to be stored on scope directly, which means that private state is
 *     exposed as $$____ properties
 *
 * Loop operations are optimized by using while(count--) { ... }
 *   - This means that in order to keep the same order of execution as addition we have to add
 *     items to the array at the beginning (unshift) instead of at the end (push)
 *
 * Child scopes are created and removed often
 *   - Using an array would be slow since inserts in the middle are expensive; so we use linked lists
 *
 * There are fewer watches than observers. This is why you don't want the observer to be implemented
 * in the same way as watch. Watch requires return of the initialization function which is expensive
 * to construct.
 */


/**
 * @ngdoc provider
 * @name $rootScopeProvider
 * @description
 *
 * Provider for the $rootScope service.
 */

/**
 * @ngdoc method
 * @name $rootScopeProvider#digestTtl
 * @description
 *
 * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and
 * assuming that the model is unstable.
 *
 * The current default is 10 iterations.
 *
 * In complex applications it's possible that the dependencies between `$watch`s will result in
 * several digest iterations. However if an application needs more than the default 10 digest
 * iterations for its model to stabilize then you should investigate what is causing the model to
 * continuously change during the digest.
 *
 * Increasing the TTL could have performance implications, so you should not change it without
 * proper justification.
 *
 * @param {number} limit The number of digest iterations.
 */


/**
 * @ngdoc service
 * @name $rootScope
 * @this
 *
 * @description
 *
 * Every application has a single root {@link ng.$rootScope.Scope scope}.
 * All other scopes are descendant scopes of the root scope. Scopes provide separation
 * between the model and the view, via a mechanism for watching the model for changes.
 * They also provide event emission/broadcast and subscription facility. See the
 * {@link guide/scope developer guide on scopes}.
 */
function $RootScopeProvider() {
  var TTL = 10;
  var $rootScopeMinErr = minErr('$rootScope');
  var lastDirtyWatch = null;
  var applyAsyncId = null;

  this.digestTtl = function(value) {
    if (arguments.length) {
      TTL = value;
    }
    return TTL;
  };

  function createChildScopeClass(parent) {
    function ChildScope() {
      this.$$watchers = this.$$nextSibling =
          this.$$childHead = this.$$childTail = null;
      this.$$listeners = {};
      this.$$listenerCount = {};
      this.$$watchersCount = 0;
      this.$id = nextUid();
      this.$$ChildScope = null;
    }
    ChildScope.prototype = parent;
    return ChildScope;
  }

  this.$get = ['$exceptionHandler', '$parse', '$browser',
      function($exceptionHandler, $parse, $browser) {

    function destroyChildScope($event) {
        $event.currentScope.$$destroyed = true;
    }

    function cleanUpScope($scope) {

      // Support: IE 9 only
      if (msie === 9) {
        // There is a memory leak in IE9 if all child scopes are not disconnected
        // completely when a scope is destroyed. So this code will recurse up through
        // all this scopes children
        //
        // See issue https://github.com/angular/angular.js/issues/10706
        if ($scope.$$childHead) {
          cleanUpScope($scope.$$childHead);
        }
        if ($scope.$$nextSibling) {
          cleanUpScope($scope.$$nextSibling);
        }
      }

      // The code below works around IE9 and V8's memory leaks
      //
      // See:
      // - https://code.google.com/p/v8/issues/detail?id=2073#c26
      // - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909
      // - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451

      $scope.$parent = $scope.$$nextSibling = $scope.$$prevSibling = $scope.$$childHead =
          $scope.$$childTail = $scope.$root = $scope.$$watchers = null;
    }

    /**
     * @ngdoc type
     * @name $rootScope.Scope
     *
     * @description
     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the
     * {@link auto.$injector $injector}. Child scopes are created using the
     * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when
     * compiled HTML template is executed.) See also the {@link guide/scope Scopes guide} for
     * an in-depth introduction and usage examples.
     *
     *
     * # Inheritance
     * A scope can inherit from a parent scope, as in this example:
     * ```js
         var parent = $rootScope;
         var child = parent.$new();

         parent.salutation = "Hello";
         expect(child.salutation).toEqual('Hello');

         child.salutation = "Welcome";
         expect(child.salutation).toEqual('Welcome');
         expect(parent.salutation).toEqual('Hello');
     * ```
     *
     * When interacting with `Scope` in tests, additional helper methods are available on the
     * instances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional
     * details.
     *
     *
     * @param {Object.<string, function()>=} providers Map of service factory which need to be
     *                                       provided for the current scope. Defaults to {@link ng}.
     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should
     *                              append/override services provided by `providers`. This is handy
     *                              when unit-testing and having the need to override a default
     *                              service.
     * @returns {Object} Newly created scope.
     *
     */
    function Scope() {
      this.$id = nextUid();
      this.$$phase = this.$parent = this.$$watchers =
                     this.$$nextSibling = this.$$prevSibling =
                     this.$$childHead = this.$$childTail = null;
      this.$root = this;
      this.$$destroyed = false;
      this.$$listeners = {};
      this.$$listenerCount = {};
      this.$$watchersCount = 0;
      this.$$isolateBindings = null;
    }

    /**
     * @ngdoc property
     * @name $rootScope.Scope#$id
     *
     * @description
     * Unique scope ID (monotonically increasing) useful for debugging.
     */

     /**
      * @ngdoc property
      * @name $rootScope.Scope#$parent
      *
      * @description
      * Reference to the parent scope.
      */

      /**
       * @ngdoc property
       * @name $rootScope.Scope#$root
       *
       * @description
       * Reference to the root scope.
       */

    Scope.prototype = {
      constructor: Scope,
      /**
       * @ngdoc method
       * @name $rootScope.Scope#$new
       * @kind function
       *
       * @description
       * Creates a new child {@link ng.$rootScope.Scope scope}.
       *
       * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} event.
       * The scope can be removed from the scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.
       *
       * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is
       * desired for the scope and its child scopes to be permanently detached from the parent and
       * thus stop participating in model change detection and listener notification by invoking.
       *
       * @param {boolean} isolate If true, then the scope does not prototypically inherit from the
       *         parent scope. The scope is isolated, as it can not see parent scope properties.
       *         When creating widgets, it is useful for the widget to not accidentally read parent
       *         state.
       *
       * @param {Scope} [parent=this] The {@link ng.$rootScope.Scope `Scope`} that will be the `$parent`
       *                              of the newly created scope. Defaults to `this` scope if not provided.
       *                              This is used when creating a transclude scope to correctly place it
       *                              in the scope hierarchy while maintaining the correct prototypical
       *                              inheritance.
       *
       * @returns {Object} The newly created child scope.
       *
       */
      $new: function(isolate, parent) {
        var child;

        parent = parent || this;

        if (isolate) {
          child = new Scope();
          child.$root = this.$root;
        } else {
          // Only create a child scope class if somebody asks for one,
          // but cache it to allow the VM to optimize lookups.
          if (!this.$$ChildScope) {
            this.$$ChildScope = createChildScopeClass(this);
          }
          child = new this.$$ChildScope();
        }
        child.$parent = parent;
        child.$$prevSibling = parent.$$childTail;
        if (parent.$$childHead) {
          parent.$$childTail.$$nextSibling = child;
          parent.$$childTail = child;
        } else {
          parent.$$childHead = parent.$$childTail = child;
        }

        // When the new scope is not isolated or we inherit from `this`, and
        // the parent scope is destroyed, the property `$$destroyed` is inherited
        // prototypically. In all other cases, this property needs to be set
        // when the parent scope is destroyed.
        // The listener needs to be added after the parent is set
        if (isolate || parent !== this) child.$on('$destroy', destroyChildScope);

        return child;
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$watch
       * @kind function
       *
       * @description
       * Registers a `listener` callback to be executed whenever the `watchExpression` changes.
       *
       * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest
       *   $digest()} and should return the value that will be watched. (`watchExpression` should not change
       *   its value when executed multiple times with the same input because it may be executed multiple
       *   times by {@link ng.$rootScope.Scope#$digest $digest()}. That is, `watchExpression` should be
       *   [idempotent](http://en.wikipedia.org/wiki/Idempotence).)
       * - The `listener` is called only when the value from the current `watchExpression` and the
       *   previous call to `watchExpression` are not equal (with the exception of the initial run,
       *   see below). Inequality is determined according to reference inequality,
       *   [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)
       *    via the `!==` Javascript operator, unless `objectEquality == true`
       *   (see next point)
       * - When `objectEquality == true`, inequality of the `watchExpression` is determined
       *   according to the {@link angular.equals} function. To save the value of the object for
       *   later comparison, the {@link angular.copy} function is used. This therefore means that
       *   watching complex objects will have adverse memory and performance implications.
       * - This should not be used to watch for changes in objects that are
       *   or contain [File](https://developer.mozilla.org/docs/Web/API/File) objects due to limitations with {@link angular.copy `angular.copy`}.
       * - The watch `listener` may change the model, which may trigger other `listener`s to fire.
       *   This is achieved by rerunning the watchers until no changes are detected. The rerun
       *   iteration limit is 10 to prevent an infinite loop deadlock.
       *
       *
       * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,
       * you can register a `watchExpression` function with no `listener`. (Be prepared for
       * multiple calls to your `watchExpression` because it will execute multiple times in a
       * single {@link ng.$rootScope.Scope#$digest $digest} cycle if a change is detected.)
       *
       * After a watcher is registered with the scope, the `listener` fn is called asynchronously
       * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the
       * watcher. In rare cases, this is undesirable because the listener is called when the result
       * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you
       * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the
       * listener was called due to initialization.
       *
       *
       *
       * # Example
       * ```js
           // let's assume that scope was dependency injected as the $rootScope
           var scope = $rootScope;
           scope.name = 'misko';
           scope.counter = 0;

           expect(scope.counter).toEqual(0);
           scope.$watch('name', function(newValue, oldValue) {
             scope.counter = scope.counter + 1;
           });
           expect(scope.counter).toEqual(0);

           scope.$digest();
           // the listener is always called during the first $digest loop after it was registered
           expect(scope.counter).toEqual(1);

           scope.$digest();
           // but now it will not be called unless the value changes
           expect(scope.counter).toEqual(1);

           scope.name = 'adam';
           scope.$digest();
           expect(scope.counter).toEqual(2);



           // Using a function as a watchExpression
           var food;
           scope.foodCounter = 0;
           expect(scope.foodCounter).toEqual(0);
           scope.$watch(
             // This function returns the value being watched. It is called for each turn of the $digest loop
             function() { return food; },
             // This is the change listener, called when the value returned from the above function changes
             function(newValue, oldValue) {
               if ( newValue !== oldValue ) {
                 // Only increment the counter if the value changed
                 scope.foodCounter = scope.foodCounter + 1;
               }
             }
           );
           // No digest has been run so the counter will be zero
           expect(scope.foodCounter).toEqual(0);

           // Run the digest but since food has not changed count will still be zero
           scope.$digest();
           expect(scope.foodCounter).toEqual(0);

           // Update food and run digest.  Now the counter will increment
           food = 'cheeseburger';
           scope.$digest();
           expect(scope.foodCounter).toEqual(1);

       * ```
       *
       *
       *
       * @param {(function()|string)} watchExpression Expression that is evaluated on each
       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers
       *    a call to the `listener`.
       *
       *    - `string`: Evaluated as {@link guide/expression expression}
       *    - `function(scope)`: called with current `scope` as a parameter.
       * @param {function(newVal, oldVal, scope)} listener Callback called whenever the value
       *    of `watchExpression` changes.
       *
       *    - `newVal` contains the current value of the `watchExpression`
       *    - `oldVal` contains the previous value of the `watchExpression`
       *    - `scope` refers to the current scope
       * @param {boolean=} [objectEquality=false] Compare for object equality using {@link angular.equals} instead of
       *     comparing for reference equality.
       * @returns {function()} Returns a deregistration function for this listener.
       */
      $watch: function(watchExp, listener, objectEquality, prettyPrintExpression) {
        var get = $parse(watchExp);

        if (get.$$watchDelegate) {
          return get.$$watchDelegate(this, listener, objectEquality, get, watchExp);
        }
        var scope = this,
            array = scope.$$watchers,
            watcher = {
              fn: listener,
              last: initWatchVal,
              get: get,
              exp: prettyPrintExpression || watchExp,
              eq: !!objectEquality
            };

        lastDirtyWatch = null;

        if (!isFunction(listener)) {
          watcher.fn = noop;
        }

        if (!array) {
          array = scope.$$watchers = [];
          array.$$digestWatchIndex = -1;
        }
        // we use unshift since we use a while loop in $digest for speed.
        // the while loop reads in reverse order.
        array.unshift(watcher);
        array.$$digestWatchIndex++;
        incrementWatchersCount(this, 1);

        return function deregisterWatch() {
          var index = arrayRemove(array, watcher);
          if (index >= 0) {
            incrementWatchersCount(scope, -1);
            if (index < array.$$digestWatchIndex) {
              array.$$digestWatchIndex--;
            }
          }
          lastDirtyWatch = null;
        };
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$watchGroup
       * @kind function
       *
       * @description
       * A variant of {@link ng.$rootScope.Scope#$watch $watch()} where it watches an array of `watchExpressions`.
       * If any one expression in the collection changes the `listener` is executed.
       *
       * - The items in the `watchExpressions` array are observed via the standard `$watch` operation. Their return
       *   values are examined for changes on every call to `$digest`.
       * - The `listener` is called whenever any expression in the `watchExpressions` array changes.
       *
       * @param {Array.<string|Function(scope)>} watchExpressions Array of expressions that will be individually
       * watched using {@link ng.$rootScope.Scope#$watch $watch()}
       *
       * @param {function(newValues, oldValues, scope)} listener Callback called whenever the return value of any
       *    expression in `watchExpressions` changes
       *    The `newValues` array contains the current values of the `watchExpressions`, with the indexes matching
       *    those of `watchExpression`
       *    and the `oldValues` array contains the previous values of the `watchExpressions`, with the indexes matching
       *    those of `watchExpression`
       *    The `scope` refers to the current scope.
       * @returns {function()} Returns a de-registration function for all listeners.
       */
      $watchGroup: function(watchExpressions, listener) {
        var oldValues = new Array(watchExpressions.length);
        var newValues = new Array(watchExpressions.length);
        var deregisterFns = [];
        var self = this;
        var changeReactionScheduled = false;
        var firstRun = true;

        if (!watchExpressions.length) {
          // No expressions means we call the listener ASAP
          var shouldCall = true;
          self.$evalAsync(function() {
            if (shouldCall) listener(newValues, newValues, self);
          });
          return function deregisterWatchGroup() {
            shouldCall = false;
          };
        }

        if (watchExpressions.length === 1) {
          // Special case size of one
          return this.$watch(watchExpressions[0], function watchGroupAction(value, oldValue, scope) {
            newValues[0] = value;
            oldValues[0] = oldValue;
            listener(newValues, (value === oldValue) ? newValues : oldValues, scope);
          });
        }

        forEach(watchExpressions, function(expr, i) {
          var unwatchFn = self.$watch(expr, function watchGroupSubAction(value, oldValue) {
            newValues[i] = value;
            oldValues[i] = oldValue;
            if (!changeReactionScheduled) {
              changeReactionScheduled = true;
              self.$evalAsync(watchGroupAction);
            }
          });
          deregisterFns.push(unwatchFn);
        });

        function watchGroupAction() {
          changeReactionScheduled = false;

          if (firstRun) {
            firstRun = false;
            listener(newValues, newValues, self);
          } else {
            listener(newValues, oldValues, self);
          }
        }

        return function deregisterWatchGroup() {
          while (deregisterFns.length) {
            deregisterFns.shift()();
          }
        };
      },


      /**
       * @ngdoc method
       * @name $rootScope.Scope#$watchCollection
       * @kind function
       *
       * @description
       * Shallow watches the properties of an object and fires whenever any of the properties change
       * (for arrays, this implies watching the array items; for object maps, this implies watching
       * the properties). If a change is detected, the `listener` callback is fired.
       *
       * - The `obj` collection is observed via standard $watch operation and is examined on every
       *   call to $digest() to see if any items have been added, removed, or moved.
       * - The `listener` is called whenever anything within the `obj` has changed. Examples include
       *   adding, removing, and moving items belonging to an object or array.
       *
       *
       * # Example
       * ```js
          $scope.names = ['igor', 'matias', 'misko', 'james'];
          $scope.dataCount = 4;

          $scope.$watchCollection('names', function(newNames, oldNames) {
            $scope.dataCount = newNames.length;
          });

          expect($scope.dataCount).toEqual(4);
          $scope.$digest();

          //still at 4 ... no changes
          expect($scope.dataCount).toEqual(4);

          $scope.names.pop();
          $scope.$digest();

          //now there's been a change
          expect($scope.dataCount).toEqual(3);
       * ```
       *
       *
       * @param {string|function(scope)} obj Evaluated as {@link guide/expression expression}. The
       *    expression value should evaluate to an object or an array which is observed on each
       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the
       *    collection will trigger a call to the `listener`.
       *
       * @param {function(newCollection, oldCollection, scope)} listener a callback function called
       *    when a change is detected.
       *    - The `newCollection` object is the newly modified data obtained from the `obj` expression
       *    - The `oldCollection` object is a copy of the former collection data.
       *      Due to performance considerations, the`oldCollection` value is computed only if the
       *      `listener` function declares two or more arguments.
       *    - The `scope` argument refers to the current scope.
       *
       * @returns {function()} Returns a de-registration function for this listener. When the
       *    de-registration function is executed, the internal watch operation is terminated.
       */
      $watchCollection: function(obj, listener) {
        $watchCollectionInterceptor.$stateful = true;

        var self = this;
        // the current value, updated on each dirty-check run
        var newValue;
        // a shallow copy of the newValue from the last dirty-check run,
        // updated to match newValue during dirty-check run
        var oldValue;
        // a shallow copy of the newValue from when the last change happened
        var veryOldValue;
        // only track veryOldValue if the listener is asking for it
        var trackVeryOldValue = (listener.length > 1);
        var changeDetected = 0;
        var changeDetector = $parse(obj, $watchCollectionInterceptor);
        var internalArray = [];
        var internalObject = {};
        var initRun = true;
        var oldLength = 0;

        function $watchCollectionInterceptor(_value) {
          newValue = _value;
          var newLength, key, bothNaN, newItem, oldItem;

          // If the new value is undefined, then return undefined as the watch may be a one-time watch
          if (isUndefined(newValue)) return;

          if (!isObject(newValue)) { // if primitive
            if (oldValue !== newValue) {
              oldValue = newValue;
              changeDetected++;
            }
          } else if (isArrayLike(newValue)) {
            if (oldValue !== internalArray) {
              // we are transitioning from something which was not an array into array.
              oldValue = internalArray;
              oldLength = oldValue.length = 0;
              changeDetected++;
            }

            newLength = newValue.length;

            if (oldLength !== newLength) {
              // if lengths do not match we need to trigger change notification
              changeDetected++;
              oldValue.length = oldLength = newLength;
            }
            // copy the items to oldValue and look for changes.
            for (var i = 0; i < newLength; i++) {
              oldItem = oldValue[i];
              newItem = newValue[i];

              // eslint-disable-next-line no-self-compare
              bothNaN = (oldItem !== oldItem) && (newItem !== newItem);
              if (!bothNaN && (oldItem !== newItem)) {
                changeDetected++;
                oldValue[i] = newItem;
              }
            }
          } else {
            if (oldValue !== internalObject) {
              // we are transitioning from something which was not an object into object.
              oldValue = internalObject = {};
              oldLength = 0;
              changeDetected++;
            }
            // copy the items to oldValue and look for changes.
            newLength = 0;
            for (key in newValue) {
              if (hasOwnProperty.call(newValue, key)) {
                newLength++;
                newItem = newValue[key];
                oldItem = oldValue[key];

                if (key in oldValue) {
                  // eslint-disable-next-line no-self-compare
                  bothNaN = (oldItem !== oldItem) && (newItem !== newItem);
                  if (!bothNaN && (oldItem !== newItem)) {
                    changeDetected++;
                    oldValue[key] = newItem;
                  }
                } else {
                  oldLength++;
                  oldValue[key] = newItem;
                  changeDetected++;
                }
              }
            }
            if (oldLength > newLength) {
              // we used to have more keys, need to find them and destroy them.
              changeDetected++;
              for (key in oldValue) {
                if (!hasOwnProperty.call(newValue, key)) {
                  oldLength--;
                  delete oldValue[key];
                }
              }
            }
          }
          return changeDetected;
        }

        function $watchCollectionAction() {
          if (initRun) {
            initRun = false;
            listener(newValue, newValue, self);
          } else {
            listener(newValue, veryOldValue, self);
          }

          // make a copy for the next time a collection is changed
          if (trackVeryOldValue) {
            if (!isObject(newValue)) {
              //primitive
              veryOldValue = newValue;
            } else if (isArrayLike(newValue)) {
              veryOldValue = new Array(newValue.length);
              for (var i = 0; i < newValue.length; i++) {
                veryOldValue[i] = newValue[i];
              }
            } else { // if object
              veryOldValue = {};
              for (var key in newValue) {
                if (hasOwnProperty.call(newValue, key)) {
                  veryOldValue[key] = newValue[key];
                }
              }
            }
          }
        }

        return this.$watch(changeDetector, $watchCollectionAction);
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$digest
       * @kind function
       *
       * @description
       * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and
       * its children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change
       * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}
       * until no more listeners are firing. This means that it is possible to get into an infinite
       * loop. This function will throw `'Maximum iteration limit exceeded.'` if the number of
       * iterations exceeds 10.
       *
       * Usually, you don't call `$digest()` directly in
       * {@link ng.directive:ngController controllers} or in
       * {@link ng.$compileProvider#directive directives}.
       * Instead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within
       * a {@link ng.$compileProvider#directive directive}), which will force a `$digest()`.
       *
       * If you want to be notified whenever `$digest()` is called,
       * you can register a `watchExpression` function with
       * {@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.
       *
       * In unit tests, you may need to call `$digest()` to simulate the scope life cycle.
       *
       * # Example
       * ```js
           var scope = ...;
           scope.name = 'misko';
           scope.counter = 0;

           expect(scope.counter).toEqual(0);
           scope.$watch('name', function(newValue, oldValue) {
             scope.counter = scope.counter + 1;
           });
           expect(scope.counter).toEqual(0);

           scope.$digest();
           // the listener is always called during the first $digest loop after it was registered
           expect(scope.counter).toEqual(1);

           scope.$digest();
           // but now it will not be called unless the value changes
           expect(scope.counter).toEqual(1);

           scope.name = 'adam';
           scope.$digest();
           expect(scope.counter).toEqual(2);
       * ```
       *
       */
      $digest: function() {
        var watch, value, last, fn, get,
            watchers,
            dirty, ttl = TTL,
            next, current, target = this,
            watchLog = [],
            logIdx, asyncTask;

        beginPhase('$digest');
        // Check for changes to browser url that happened in sync before the call to $digest
        $browser.$$checkUrlChange();

        if (this === $rootScope && applyAsyncId !== null) {
          // If this is the root scope, and $applyAsync has scheduled a deferred $apply(), then
          // cancel the scheduled $apply and flush the queue of expressions to be evaluated.
          $browser.defer.cancel(applyAsyncId);
          flushApplyAsync();
        }

        lastDirtyWatch = null;

        do { // "while dirty" loop
          dirty = false;
          current = target;

          // It's safe for asyncQueuePosition to be a local variable here because this loop can't
          // be reentered recursively. Calling $digest from a function passed to $applyAsync would
          // lead to a '$digest already in progress' error.
          for (var asyncQueuePosition = 0; asyncQueuePosition < asyncQueue.length; asyncQueuePosition++) {
            try {
              asyncTask = asyncQueue[asyncQueuePosition];
              asyncTask.scope.$eval(asyncTask.expression, asyncTask.locals);
            } catch (e) {
              $exceptionHandler(e);
            }
            lastDirtyWatch = null;
          }
          asyncQueue.length = 0;

          traverseScopesLoop:
          do { // "traverse the scopes" loop
            if ((watchers = current.$$watchers)) {
              // process our watches
              watchers.$$digestWatchIndex = watchers.length;
              while (watchers.$$digestWatchIndex--) {
                try {
                  watch = watchers[watchers.$$digestWatchIndex];
                  // Most common watches are on primitives, in which case we can short
                  // circuit it with === operator, only when === fails do we use .equals
                  if (watch) {
                    get = watch.get;
                    if ((value = get(current)) !== (last = watch.last) &&
                        !(watch.eq
                            ? equals(value, last)
                            : (isNumberNaN(value) && isNumberNaN(last)))) {
                      dirty = true;
                      lastDirtyWatch = watch;
                      watch.last = watch.eq ? copy(value, null) : value;
                      fn = watch.fn;
                      fn(value, ((last === initWatchVal) ? value : last), current);
                      if (ttl < 5) {
                        logIdx = 4 - ttl;
                        if (!watchLog[logIdx]) watchLog[logIdx] = [];
                        watchLog[logIdx].push({
                          msg: isFunction(watch.exp) ? 'fn: ' + (watch.exp.name || watch.exp.toString()) : watch.exp,
                          newVal: value,
                          oldVal: last
                        });
                      }
                    } else if (watch === lastDirtyWatch) {
                      // If the most recently dirty watcher is now clean, short circuit since the remaining watchers
                      // have already been tested.
                      dirty = false;
                      break traverseScopesLoop;
                    }
                  }
                } catch (e) {
                  $exceptionHandler(e);
                }
              }
            }

            // Insanity Warning: scope depth-first traversal
            // yes, this code is a bit crazy, but it works and we have tests to prove it!
            // this piece should be kept in sync with the traversal in $broadcast
            if (!(next = ((current.$$watchersCount && current.$$childHead) ||
                (current !== target && current.$$nextSibling)))) {
              while (current !== target && !(next = current.$$nextSibling)) {
                current = current.$parent;
              }
            }
          } while ((current = next));

          // `break traverseScopesLoop;` takes us to here

          if ((dirty || asyncQueue.length) && !(ttl--)) {
            clearPhase();
            throw $rootScopeMinErr('infdig',
                '{0} $digest() iterations reached. Aborting!\n' +
                'Watchers fired in the last 5 iterations: {1}',
                TTL, watchLog);
          }

        } while (dirty || asyncQueue.length);

        clearPhase();

        // postDigestQueuePosition isn't local here because this loop can be reentered recursively.
        while (postDigestQueuePosition < postDigestQueue.length) {
          try {
            postDigestQueue[postDigestQueuePosition++]();
          } catch (e) {
            $exceptionHandler(e);
          }
        }
        postDigestQueue.length = postDigestQueuePosition = 0;

        // Check for changes to browser url that happened during the $digest
        // (for which no event is fired; e.g. via `history.pushState()`)
        $browser.$$checkUrlChange();
      },


      /**
       * @ngdoc event
       * @name $rootScope.Scope#$destroy
       * @eventType broadcast on scope being destroyed
       *
       * @description
       * Broadcasted when a scope and its children are being destroyed.
       *
       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
       * clean up DOM bindings before an element is removed from the DOM.
       */

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$destroy
       * @kind function
       *
       * @description
       * Removes the current scope (and all of its children) from the parent scope. Removal implies
       * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer
       * propagate to the current scope and its children. Removal also implies that the current
       * scope is eligible for garbage collection.
       *
       * The `$destroy()` is usually used by directives such as
       * {@link ng.directive:ngRepeat ngRepeat} for managing the
       * unrolling of the loop.
       *
       * Just before a scope is destroyed, a `$destroy` event is broadcasted on this scope.
       * Application code can register a `$destroy` event handler that will give it a chance to
       * perform any necessary cleanup.
       *
       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
       * clean up DOM bindings before an element is removed from the DOM.
       */
      $destroy: function() {
        // We can't destroy a scope that has been already destroyed.
        if (this.$$destroyed) return;
        var parent = this.$parent;

        this.$broadcast('$destroy');
        this.$$destroyed = true;

        if (this === $rootScope) {
          //Remove handlers attached to window when $rootScope is removed
          $browser.$$applicationDestroyed();
        }

        incrementWatchersCount(this, -this.$$watchersCount);
        for (var eventName in this.$$listenerCount) {
          decrementListenerCount(this, this.$$listenerCount[eventName], eventName);
        }

        // sever all the references to parent scopes (after this cleanup, the current scope should
        // not be retained by any of our references and should be eligible for garbage collection)
        if (parent && parent.$$childHead === this) parent.$$childHead = this.$$nextSibling;
        if (parent && parent.$$childTail === this) parent.$$childTail = this.$$prevSibling;
        if (this.$$prevSibling) this.$$prevSibling.$$nextSibling = this.$$nextSibling;
        if (this.$$nextSibling) this.$$nextSibling.$$prevSibling = this.$$prevSibling;

        // Disable listeners, watchers and apply/digest methods
        this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = noop;
        this.$on = this.$watch = this.$watchGroup = function() { return noop; };
        this.$$listeners = {};

        // Disconnect the next sibling to prevent `cleanUpScope` destroying those too
        this.$$nextSibling = null;
        cleanUpScope(this);
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$eval
       * @kind function
       *
       * @description
       * Executes the `expression` on the current scope and returns the result. Any exceptions in
       * the expression are propagated (uncaught). This is useful when evaluating Angular
       * expressions.
       *
       * # Example
       * ```js
           var scope = ng.$rootScope.Scope();
           scope.a = 1;
           scope.b = 2;

           expect(scope.$eval('a+b')).toEqual(3);
           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);
       * ```
       *
       * @param {(string|function())=} expression An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with the current `scope` parameter.
       *
       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
       * @returns {*} The result of evaluating the expression.
       */
      $eval: function(expr, locals) {
        return $parse(expr)(this, locals);
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$evalAsync
       * @kind function
       *
       * @description
       * Executes the expression on the current scope at a later point in time.
       *
       * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only
       * that:
       *
       *   - it will execute after the function that scheduled the evaluation (preferably before DOM
       *     rendering).
       *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after
       *     `expression` execution.
       *
       * Any exceptions from the execution of the expression are forwarded to the
       * {@link ng.$exceptionHandler $exceptionHandler} service.
       *
       * __Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle
       * will be scheduled. However, it is encouraged to always call code that changes the model
       * from within an `$apply` call. That includes code evaluated via `$evalAsync`.
       *
       * @param {(string|function())=} expression An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with the current `scope` parameter.
       *
       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
       */
      $evalAsync: function(expr, locals) {
        // if we are outside of an $digest loop and this is the first time we are scheduling async
        // task also schedule async auto-flush
        if (!$rootScope.$$phase && !asyncQueue.length) {
          $browser.defer(function() {
            if (asyncQueue.length) {
              $rootScope.$digest();
            }
          });
        }

        asyncQueue.push({scope: this, expression: $parse(expr), locals: locals});
      },

      $$postDigest: function(fn) {
        postDigestQueue.push(fn);
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$apply
       * @kind function
       *
       * @description
       * `$apply()` is used to execute an expression in angular from outside of the angular
       * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).
       * Because we are calling into the angular framework we need to perform proper scope life
       * cycle of {@link ng.$exceptionHandler exception handling},
       * {@link ng.$rootScope.Scope#$digest executing watches}.
       *
       * ## Life cycle
       *
       * # Pseudo-Code of `$apply()`
       * ```js
           function $apply(expr) {
             try {
               return $eval(expr);
             } catch (e) {
               $exceptionHandler(e);
             } finally {
               $root.$digest();
             }
           }
       * ```
       *
       *
       * Scope's `$apply()` method transitions through the following stages:
       *
       * 1. The {@link guide/expression expression} is executed using the
       *    {@link ng.$rootScope.Scope#$eval $eval()} method.
       * 2. Any exceptions from the execution of the expression are forwarded to the
       *    {@link ng.$exceptionHandler $exceptionHandler} service.
       * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the
       *    expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.
       *
       *
       * @param {(string|function())=} exp An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with current `scope` parameter.
       *
       * @returns {*} The result of evaluating the expression.
       */
      $apply: function(expr) {
        try {
          beginPhase('$apply');
          try {
            return this.$eval(expr);
          } finally {
            clearPhase();
          }
        } catch (e) {
          $exceptionHandler(e);
        } finally {
          try {
            $rootScope.$digest();
          } catch (e) {
            $exceptionHandler(e);
            // eslint-disable-next-line no-unsafe-finally
            throw e;
          }
        }
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$applyAsync
       * @kind function
       *
       * @description
       * Schedule the invocation of $apply to occur at a later time. The actual time difference
       * varies across browsers, but is typically around ~10 milliseconds.
       *
       * This can be used to queue up multiple expressions which need to be evaluated in the same
       * digest.
       *
       * @param {(string|function())=} exp An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with current `scope` parameter.
       */
      $applyAsync: function(expr) {
        var scope = this;
        if (expr) {
          applyAsyncQueue.push($applyAsyncExpression);
        }
        expr = $parse(expr);
        scheduleApplyAsync();

        function $applyAsyncExpression() {
          scope.$eval(expr);
        }
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$on
       * @kind function
       *
       * @description
       * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for
       * discussion of event life cycle.
       *
       * The event listener function format is: `function(event, args...)`. The `event` object
       * passed into the listener has the following attributes:
       *
       *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or
       *     `$broadcast`-ed.
       *   - `currentScope` - `{Scope}`: the scope that is currently handling the event. Once the
       *     event propagates through the scope hierarchy, this property is set to null.
       *   - `name` - `{string}`: name of the event.
       *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel
       *     further event propagation (available only for events that were `$emit`-ed).
       *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag
       *     to true.
       *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.
       *
       * @param {string} name Event name to listen on.
       * @param {function(event, ...args)} listener Function to call when the event is emitted.
       * @returns {function()} Returns a deregistration function for this listener.
       */
      $on: function(name, listener) {
        var namedListeners = this.$$listeners[name];
        if (!namedListeners) {
          this.$$listeners[name] = namedListeners = [];
        }
        namedListeners.push(listener);

        var current = this;
        do {
          if (!current.$$listenerCount[name]) {
            current.$$listenerCount[name] = 0;
          }
          current.$$listenerCount[name]++;
        } while ((current = current.$parent));

        var self = this;
        return function() {
          var indexOfListener = namedListeners.indexOf(listener);
          if (indexOfListener !== -1) {
            namedListeners[indexOfListener] = null;
            decrementListenerCount(self, 1, name);
          }
        };
      },


      /**
       * @ngdoc method
       * @name $rootScope.Scope#$emit
       * @kind function
       *
       * @description
       * Dispatches an event `name` upwards through the scope hierarchy notifying the
       * registered {@link ng.$rootScope.Scope#$on} listeners.
       *
       * The event life cycle starts at the scope on which `$emit` was called. All
       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
       * notified. Afterwards, the event traverses upwards toward the root scope and calls all
       * registered listeners along the way. The event will stop propagating if one of the listeners
       * cancels it.
       *
       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
       *
       * @param {string} name Event name to emit.
       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
       * @return {Object} Event object (see {@link ng.$rootScope.Scope#$on}).
       */
      $emit: function(name, args) {
        var empty = [],
            namedListeners,
            scope = this,
            stopPropagation = false,
            event = {
              name: name,
              targetScope: scope,
              stopPropagation: function() {stopPropagation = true;},
              preventDefault: function() {
                event.defaultPrevented = true;
              },
              defaultPrevented: false
            },
            listenerArgs = concat([event], arguments, 1),
            i, length;

        do {
          namedListeners = scope.$$listeners[name] || empty;
          event.currentScope = scope;
          for (i = 0, length = namedListeners.length; i < length; i++) {

            // if listeners were deregistered, defragment the array
            if (!namedListeners[i]) {
              namedListeners.splice(i, 1);
              i--;
              length--;
              continue;
            }
            try {
              //allow all listeners attached to the current scope to run
              namedListeners[i].apply(null, listenerArgs);
            } catch (e) {
              $exceptionHandler(e);
            }
          }
          //if any listener on the current scope stops propagation, prevent bubbling
          if (stopPropagation) {
            event.currentScope = null;
            return event;
          }
          //traverse upwards
          scope = scope.$parent;
        } while (scope);

        event.currentScope = null;

        return event;
      },


      /**
       * @ngdoc method
       * @name $rootScope.Scope#$broadcast
       * @kind function
       *
       * @description
       * Dispatches an event `name` downwards to all child scopes (and their children) notifying the
       * registered {@link ng.$rootScope.Scope#$on} listeners.
       *
       * The event life cycle starts at the scope on which `$broadcast` was called. All
       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
       * notified. Afterwards, the event propagates to all direct and indirect scopes of the current
       * scope and calls all registered listeners along the way. The event cannot be canceled.
       *
       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
       *
       * @param {string} name Event name to broadcast.
       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
       * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}
       */
      $broadcast: function(name, args) {
        var target = this,
            current = target,
            next = target,
            event = {
              name: name,
              targetScope: target,
              preventDefault: function() {
                event.defaultPrevented = true;
              },
              defaultPrevented: false
            };

        if (!target.$$listenerCount[name]) return event;

        var listenerArgs = concat([event], arguments, 1),
            listeners, i, length;

        //down while you can, then up and next sibling or up and next sibling until back at root
        while ((current = next)) {
          event.currentScope = current;
          listeners = current.$$listeners[name] || [];
          for (i = 0, length = listeners.length; i < length; i++) {
            // if listeners were deregistered, defragment the array
            if (!listeners[i]) {
              listeners.splice(i, 1);
              i--;
              length--;
              continue;
            }

            try {
              listeners[i].apply(null, listenerArgs);
            } catch (e) {
              $exceptionHandler(e);
            }
          }

          // Insanity Warning: scope depth-first traversal
          // yes, this code is a bit crazy, but it works and we have tests to prove it!
          // this piece should be kept in sync with the traversal in $digest
          // (though it differs due to having the extra check for $$listenerCount)
          if (!(next = ((current.$$listenerCount[name] && current.$$childHead) ||
              (current !== target && current.$$nextSibling)))) {
            while (current !== target && !(next = current.$$nextSibling)) {
              current = current.$parent;
            }
          }
        }

        event.currentScope = null;
        return event;
      }
    };

    var $rootScope = new Scope();

    //The internal queues. Expose them on the $rootScope for debugging/testing purposes.
    var asyncQueue = $rootScope.$$asyncQueue = [];
    var postDigestQueue = $rootScope.$$postDigestQueue = [];
    var applyAsyncQueue = $rootScope.$$applyAsyncQueue = [];

    var postDigestQueuePosition = 0;

    return $rootScope;


    function beginPhase(phase) {
      if ($rootScope.$$phase) {
        throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);
      }

      $rootScope.$$phase = phase;
    }

    function clearPhase() {
      $rootScope.$$phase = null;
    }

    function incrementWatchersCount(current, count) {
      do {
        current.$$watchersCount += count;
      } while ((current = current.$parent));
    }

    function decrementListenerCount(current, count, name) {
      do {
        current.$$listenerCount[name] -= count;

        if (current.$$listenerCount[name] === 0) {
          delete current.$$listenerCount[name];
        }
      } while ((current = current.$parent));
    }

    /**
     * function used as an initial value for watchers.
     * because it's unique we can easily tell it apart from other values
     */
    function initWatchVal() {}

    function flushApplyAsync() {
      while (applyAsyncQueue.length) {
        try {
          applyAsyncQueue.shift()();
        } catch (e) {
          $exceptionHandler(e);
        }
      }
      applyAsyncId = null;
    }

    function scheduleApplyAsync() {
      if (applyAsyncId === null) {
        applyAsyncId = $browser.defer(function() {
          $rootScope.$apply(flushApplyAsync);
        });
      }
    }
  }];
}

/**
 * @ngdoc service
 * @name $rootElement
 *
 * @description
 * The root element of Angular application. This is either the element where {@link
 * ng.directive:ngApp ngApp} was declared or the element passed into
 * {@link angular.bootstrap}. The element represents the root element of application. It is also the
 * location where the application's {@link auto.$injector $injector} service gets
 * published, and can be retrieved using `$rootElement.injector()`.
 */


// the implementation is in angular.bootstrap

/**
 * @this
 * @description
 * Private service to sanitize uris for links and images. Used by $compile and $sanitize.
 */
function $$SanitizeUriProvider() {
  var aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|tel|file):/,
    imgSrcSanitizationWhitelist = /^\s*((https?|ftp|file|blob):|data:image\/)/;

  /**
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during a[href] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
  this.aHrefSanitizationWhitelist = function(regexp) {
    if (isDefined(regexp)) {
      aHrefSanitizationWhitelist = regexp;
      return this;
    }
    return aHrefSanitizationWhitelist;
  };


  /**
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during img[src] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
  this.imgSrcSanitizationWhitelist = function(regexp) {
    if (isDefined(regexp)) {
      imgSrcSanitizationWhitelist = regexp;
      return this;
    }
    return imgSrcSanitizationWhitelist;
  };

  this.$get = function() {
    return function sanitizeUri(uri, isImage) {
      var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;
      var normalizedVal;
      normalizedVal = urlResolve(uri).href;
      if (normalizedVal !== '' && !normalizedVal.match(regex)) {
        return 'unsafe:' + normalizedVal;
      }
      return uri;
    };
  };
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *     Any commits to this file should be reviewed with security in mind.  *
 *   Changes to this file can potentially create security vulnerabilities. *
 *          An approval from 2 Core members with history of modifying      *
 *                         this file is required.                          *
 *                                                                         *
 *  Does the change somehow allow for arbitrary javascript to be executed? *
 *    Or allows for someone to change the prototype of built-in objects?   *
 *     Or gives undesired access to variables likes document or window?    *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* exported $SceProvider, $SceDelegateProvider */

var $sceMinErr = minErr('$sce');

var SCE_CONTEXTS = {
  HTML: 'html',
  CSS: 'css',
  URL: 'url',
  // RESOURCE_URL is a subtype of URL used in contexts where a privileged resource is sourced from a
  // url.  (e.g. ng-include, script src, templateUrl)
  RESOURCE_URL: 'resourceUrl',
  JS: 'js'
};

// Helper functions follow.

var UNDERSCORE_LOWERCASE_REGEXP = /_([a-z])/g;

function snakeToCamel(name) {
  return name
    .replace(UNDERSCORE_LOWERCASE_REGEXP, fnCamelCaseReplace);
}

function adjustMatcher(matcher) {
  if (matcher === 'self') {
    return matcher;
  } else if (isString(matcher)) {
    // Strings match exactly except for 2 wildcards - '*' and '**'.
    // '*' matches any character except those from the set ':/.?&'.
    // '**' matches any character (like .* in a RegExp).
    // More than 2 *'s raises an error as it's ill defined.
    if (matcher.indexOf('***') > -1) {
      throw $sceMinErr('iwcard',
          'Illegal sequence *** in string matcher.  String: {0}', matcher);
    }
    matcher = escapeForRegexp(matcher).
                  replace(/\\\*\\\*/g, '.*').
                  replace(/\\\*/g, '[^:/.?&;]*');
    return new RegExp('^' + matcher + '$');
  } else if (isRegExp(matcher)) {
    // The only other type of matcher allowed is a Regexp.
    // Match entire URL / disallow partial matches.
    // Flags are reset (i.e. no global, ignoreCase or multiline)
    return new RegExp('^' + matcher.source + '$');
  } else {
    throw $sceMinErr('imatcher',
        'Matchers may only be "self", string patterns or RegExp objects');
  }
}


function adjustMatchers(matchers) {
  var adjustedMatchers = [];
  if (isDefined(matchers)) {
    forEach(matchers, function(matcher) {
      adjustedMatchers.push(adjustMatcher(matcher));
    });
  }
  return adjustedMatchers;
}


/**
 * @ngdoc service
 * @name $sceDelegate
 * @kind function
 *
 * @description
 *
 * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict
 * Contextual Escaping (SCE)} services to AngularJS.
 *
 * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of
 * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is
 * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to
 * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things
 * work because `$sce` delegates to `$sceDelegate` for these operations.
 *
 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.
 *
 * The default instance of `$sceDelegate` should work out of the box with little pain.  While you
 * can override it completely to change the behavior of `$sce`, the common case would
 * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting
 * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as
 * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist
 * $sceDelegateProvider.resourceUrlWhitelist} and {@link
 * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
 */

/**
 * @ngdoc provider
 * @name $sceDelegateProvider
 * @this
 *
 * @description
 *
 * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate
 * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure
 * that the URLs used for sourcing Angular templates are safe.  Refer {@link
 * ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and
 * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
 *
 * For the general details about this service in Angular, read the main page for {@link ng.$sce
 * Strict Contextual Escaping (SCE)}.
 *
 * **Example**:  Consider the following case. <a name="example"></a>
 *
 * - your app is hosted at url `http://myapp.example.com/`
 * - but some of your templates are hosted on other domains you control such as
 *   `http://srv01.assets.example.com/`, `http://srv02.assets.example.com/`, etc.
 * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.
 *
 * Here is what a secure configuration for this scenario might look like:
 *
 * ```
 *  angular.module('myApp', []).config(function($sceDelegateProvider) {
 *    $sceDelegateProvider.resourceUrlWhitelist([
 *      // Allow same origin resource loads.
 *      'self',
 *      // Allow loading from our assets domain.  Notice the difference between * and **.
 *      'http://srv*.assets.example.com/**'
 *    ]);
 *
 *    // The blacklist overrides the whitelist so the open redirect here is blocked.
 *    $sceDelegateProvider.resourceUrlBlacklist([
 *      'http://myapp.example.com/clickThru**'
 *    ]);
 *  });
 * ```
 */

function $SceDelegateProvider() {
  this.SCE_CONTEXTS = SCE_CONTEXTS;

  // Resource URLs can also be trusted by policy.
  var resourceUrlWhitelist = ['self'],
      resourceUrlBlacklist = [];

  /**
   * @ngdoc method
   * @name $sceDelegateProvider#resourceUrlWhitelist
   * @kind function
   *
   * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value
   *    provided.  This must be an array or null.  A snapshot of this array is used so further
   *    changes to the array are ignored.
   *
   *    Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
   *    allowed in this array.
   *
   *    <div class="alert alert-warning">
   *    **Note:** an empty whitelist array will block all URLs!
   *    </div>
   *
   * @return {Array} the currently set whitelist array.
   *
   * The **default value** when no whitelist has been explicitly set is `['self']` allowing only
   * same origin resource requests.
   *
   * @description
   * Sets/Gets the whitelist of trusted resource URLs.
   */
  this.resourceUrlWhitelist = function(value) {
    if (arguments.length) {
      resourceUrlWhitelist = adjustMatchers(value);
    }
    return resourceUrlWhitelist;
  };

  /**
   * @ngdoc method
   * @name $sceDelegateProvider#resourceUrlBlacklist
   * @kind function
   *
   * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value
   *    provided.  This must be an array or null.  A snapshot of this array is used so further
   *    changes to the array are ignored.
   *
   *    Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
   *    allowed in this array.
   *
   *    The typical usage for the blacklist is to **block
   *    [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as
   *    these would otherwise be trusted but actually return content from the redirected domain.
   *
   *    Finally, **the blacklist overrides the whitelist** and has the final say.
   *
   * @return {Array} the currently set blacklist array.
   *
   * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there
   * is no blacklist.)
   *
   * @description
   * Sets/Gets the blacklist of trusted resource URLs.
   */

  this.resourceUrlBlacklist = function(value) {
    if (arguments.length) {
      resourceUrlBlacklist = adjustMatchers(value);
    }
    return resourceUrlBlacklist;
  };

  this.$get = ['$injector', function($injector) {

    var htmlSanitizer = function htmlSanitizer(html) {
      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
    };

    if ($injector.has('$sanitize')) {
      htmlSanitizer = $injector.get('$sanitize');
    }


    function matchUrl(matcher, parsedUrl) {
      if (matcher === 'self') {
        return urlIsSameOrigin(parsedUrl);
      } else {
        // definitely a regex.  See adjustMatchers()
        return !!matcher.exec(parsedUrl.href);
      }
    }

    function isResourceUrlAllowedByPolicy(url) {
      var parsedUrl = urlResolve(url.toString());
      var i, n, allowed = false;
      // Ensure that at least one item from the whitelist allows this url.
      for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {
        if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {
          allowed = true;
          break;
        }
      }
      if (allowed) {
        // Ensure that no item from the blacklist blocked this url.
        for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {
          if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {
            allowed = false;
            break;
          }
        }
      }
      return allowed;
    }

    function generateHolderType(Base) {
      var holderType = function TrustedValueHolderType(trustedValue) {
        this.$$unwrapTrustedValue = function() {
          return trustedValue;
        };
      };
      if (Base) {
        holderType.prototype = new Base();
      }
      holderType.prototype.valueOf = function sceValueOf() {
        return this.$$unwrapTrustedValue();
      };
      holderType.prototype.toString = function sceToString() {
        return this.$$unwrapTrustedValue().toString();
      };
      return holderType;
    }

    var trustedValueHolderBase = generateHolderType(),
        byType = {};

    byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);

    /**
     * @ngdoc method
     * @name $sceDelegate#trustAs
     *
     * @description
     * Returns an object that is trusted by angular for use in specified strict
     * contextual escaping contexts (such as ng-bind-html, ng-include, any src
     * attribute interpolation, any dom event binding attribute interpolation
     * such as for onclick,  etc.) that uses the provided value.
     * See {@link ng.$sce $sce} for enabling strict contextual escaping.
     *
     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
     *   resourceUrl, html, js and css.
     * @param {*} value The value that that should be considered trusted/safe.
     * @returns {*} A value that can be used to stand in for the provided `value` in places
     * where Angular expects a $sce.trustAs() return value.
     */
    function trustAs(type, trustedValue) {
      var Constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
      if (!Constructor) {
        throw $sceMinErr('icontext',
            'Attempted to trust a value in invalid context. Context: {0}; Value: {1}',
            type, trustedValue);
      }
      if (trustedValue === null || isUndefined(trustedValue) || trustedValue === '') {
        return trustedValue;
      }
      // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting
      // mutable objects, we ensure here that the value passed in is actually a string.
      if (typeof trustedValue !== 'string') {
        throw $sceMinErr('itype',
            'Attempted to trust a non-string value in a content requiring a string: Context: {0}',
            type);
      }
      return new Constructor(trustedValue);
    }

    /**
     * @ngdoc method
     * @name $sceDelegate#valueOf
     *
     * @description
     * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs
     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link
     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.
     *
     * If the passed parameter is not a value that had been returned by {@link
     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.
     *
     * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}
     *      call or anything else.
     * @returns {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns
     *     `value` unchanged.
     */
    function valueOf(maybeTrusted) {
      if (maybeTrusted instanceof trustedValueHolderBase) {
        return maybeTrusted.$$unwrapTrustedValue();
      } else {
        return maybeTrusted;
      }
    }

    /**
     * @ngdoc method
     * @name $sceDelegate#getTrusted
     *
     * @description
     * Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and
     * returns the originally supplied value if the queried context type is a supertype of the
     * created type.  If this condition isn't satisfied, throws an exception.
     *
     * <div class="alert alert-danger">
     * Disabling auto-escaping is extremely dangerous, it usually creates a Cross Site Scripting
     * (XSS) vulnerability in your application.
     * </div>
     *
     * @param {string} type The kind of context in which this value is to be used.
     * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} call.
     * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.
     */
    function getTrusted(type, maybeTrusted) {
      if (maybeTrusted === null || isUndefined(maybeTrusted) || maybeTrusted === '') {
        return maybeTrusted;
      }
      var constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
      if (constructor && maybeTrusted instanceof constructor) {
        return maybeTrusted.$$unwrapTrustedValue();
      }
      // If we get here, then we may only take one of two actions.
      // 1. sanitize the value for the requested type, or
      // 2. throw an exception.
      if (type === SCE_CONTEXTS.RESOURCE_URL) {
        if (isResourceUrlAllowedByPolicy(maybeTrusted)) {
          return maybeTrusted;
        } else {
          throw $sceMinErr('insecurl',
              'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}',
              maybeTrusted.toString());
        }
      } else if (type === SCE_CONTEXTS.HTML) {
        return htmlSanitizer(maybeTrusted);
      }
      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
    }

    return { trustAs: trustAs,
             getTrusted: getTrusted,
             valueOf: valueOf };
  }];
}


/**
 * @ngdoc provider
 * @name $sceProvider
 * @this
 *
 * @description
 *
 * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.
 * -   enable/disable Strict Contextual Escaping (SCE) in a module
 * -   override the default implementation with a custom delegate
 *
 * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.
 */

/**
 * @ngdoc service
 * @name $sce
 * @kind function
 *
 * @description
 *
 * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.
 *
 * # Strict Contextual Escaping
 *
 * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain
 * contexts to result in a value that is marked as safe to use for that context.  One example of
 * such a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer
 * to these contexts as privileged or SCE contexts.
 *
 * As of version 1.2, Angular ships with SCE enabled by default.
 *
 * Note:  When enabled (the default), IE<11 in quirks mode is not supported.  In this mode, IE<11 allow
 * one to execute arbitrary javascript by the use of the expression() syntax.  Refer
 * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.
 * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`
 * to the top of your HTML document.
 *
 * SCE assists in writing code in a way that (a) is secure by default and (b) makes auditing for
 * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.
 *
 * Here's an example of a binding in a privileged context:
 *
 * ```
 * <input ng-model="userHtml" aria-label="User input">
 * <div ng-bind-html="userHtml"></div>
 * ```
 *
 * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE
 * disabled, this application allows the user to render arbitrary HTML into the DIV.
 * In a more realistic example, one may be rendering user comments, blog articles, etc. via
 * bindings.  (HTML is just one example of a context where rendering user controlled input creates
 * security vulnerabilities.)
 *
 * For the case of HTML, you might use a library, either on the client side, or on the server side,
 * to sanitize unsafe HTML before binding to the value and rendering it in the document.
 *
 * How would you ensure that every place that used these types of bindings was bound to a value that
 * was sanitized by your library (or returned as safe for rendering by your server?)  How can you
 * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some
 * properties/fields and forgot to update the binding to the sanitized value?
 *
 * To be secure by default, you want to ensure that any such bindings are disallowed unless you can
 * determine that something explicitly says it's safe to use a value for binding in that
 * context.  You can then audit your code (a simple grep would do) to ensure that this is only done
 * for those values that you can easily tell are safe - because they were received from your server,
 * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps
 * allowing only the files in a specific directory to do this.  Ensuring that the internal API
 * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.
 *
 * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}
 * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to
 * obtain values that will be accepted by SCE / privileged contexts.
 *
 *
 * ## How does it work?
 *
 * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted
 * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link
 * ng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the
 * {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.
 *
 * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link
 * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly
 * simplified):
 *
 * ```
 * var ngBindHtmlDirective = ['$sce', function($sce) {
 *   return function(scope, element, attr) {
 *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {
 *       element.html(value || '');
 *     });
 *   };
 * }];
 * ```
 *
 * ## Impact on loading templates
 *
 * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as
 * `templateUrl`'s specified by {@link guide/directive directives}.
 *
 * By default, Angular only loads templates from the same domain and protocol as the application
 * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl
 * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or
 * protocols, you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist
 * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.
 *
 * *Please note*:
 * The browser's
 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
 * policy apply in addition to this and may further restrict whether the template is successfully
 * loaded.  This means that without the right CORS policy, loading templates from a different domain
 * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some
 * browsers.
 *
 * ## This feels like too much overhead
 *
 * It's important to remember that SCE only applies to interpolation expressions.
 *
 * If your expressions are constant literals, they're automatically trusted and you don't need to
 * call `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.
 * `<div ng-bind-html="'<b>implicitly trusted</b>'"></div>`) just works.
 *
 * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them
 * through {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.
 *
 * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load
 * templates in `ng-include` from your application's domain without having to even know about SCE.
 * It blocks loading templates from other domains or loading templates over http from an https
 * served document.  You can change these by setting your own custom {@link
 * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link
 * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.
 *
 * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an
 * application that's secure and can be audited to verify that with much more ease than bolting
 * security onto an application later.
 *
 * <a name="contexts"></a>
 * ## What trusted context types are supported?
 *
 * | Context             | Notes          |
 * |---------------------|----------------|
 * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |
 * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |
 * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |
 * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG`, `VIDEO`, `AUDIO`, `SOURCE`, and `TRACK` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
 * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |
 *
 * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name="resourceUrlPatternItem"></a>
 *
 *  Each element in these arrays must be one of the following:
 *
 *  - **'self'**
 *    - The special **string**, `'self'`, can be used to match against all URLs of the **same
 *      domain** as the application document using the **same protocol**.
 *  - **String** (except the special value `'self'`)
 *    - The string is matched against the full *normalized / absolute URL* of the resource
 *      being tested (substring matches are not good enough.)
 *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters
 *      match themselves.
 *    - `*`: matches zero or more occurrences of any character other than one of the following 6
 *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and '`;`'.  It's a useful wildcard for use
 *      in a whitelist.
 *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not
 *      appropriate for use in a scheme, domain, etc. as it would match too much.  (e.g.
 *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might
 *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.
 *      http://foo.example.com/templates/**).
 *  - **RegExp** (*see caveat below*)
 *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax
 *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to
 *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should
 *      have good test coverage).  For instance, the use of `.` in the regex is correct only in a
 *      small number of cases.  A `.` character in the regex used when matching the scheme or a
 *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It
 *      is highly recommended to use the string patterns and only fall back to regular expressions
 *      as a last resort.
 *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is
 *      matched against the **entire** *normalized / absolute URL* of the resource being tested
 *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags
 *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.
 *    - If you are generating your JavaScript from some other templating engine (not
 *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),
 *      remember to escape your regular expression (and be aware that you might need more than
 *      one level of escaping depending on your templating engine and the way you interpolated
 *      the value.)  Do make use of your platform's escaping mechanism as it might be good
 *      enough before coding your own.  E.g. Ruby has
 *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)
 *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).
 *      Javascript lacks a similar built in function for escaping.  Take a look at Google
 *      Closure library's [goog.string.regExpEscape(s)](
 *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).
 *
 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.
 *
 * ## Show me an example using SCE.
 *
 * <example module="mySceApp" deps="angular-sanitize.js" name="sce-service">
 * <file name="index.html">
 *   <div ng-controller="AppController as myCtrl">
 *     <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>
 *     <b>User comments</b><br>
 *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when
 *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an
 *     exploit.
 *     <div class="well">
 *       <div ng-repeat="userComment in myCtrl.userComments">
 *         <b>{{userComment.name}}</b>:
 *         <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>
 *         <br>
 *       </div>
 *     </div>
 *   </div>
 * </file>
 *
 * <file name="script.js">
 *   angular.module('mySceApp', ['ngSanitize'])
 *     .controller('AppController', ['$http', '$templateCache', '$sce',
 *       function AppController($http, $templateCache, $sce) {
 *         var self = this;
 *         $http.get('test_data.json', {cache: $templateCache}).then(function(response) {
 *           self.userComments = response.data;
 *         });
 *         self.explicitlyTrustedHtml = $sce.trustAsHtml(
 *             '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
 *             'sanitization.&quot;">Hover over this text.</span>');
 *       }]);
 * </file>
 *
 * <file name="test_data.json">
 * [
 *   { "name": "Alice",
 *     "htmlComment":
 *         "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"
 *   },
 *   { "name": "Bob",
 *     "htmlComment": "<i>Yes!</i>  Am I the only other one?"
 *   }
 * ]
 * </file>
 *
 * <file name="protractor.js" type="protractor">
 *   describe('SCE doc demo', function() {
 *     it('should sanitize untrusted values', function() {
 *       expect(element.all(by.css('.htmlComment')).first().getAttribute('innerHTML'))
 *           .toBe('<span>Is <i>anyone</i> reading this?</span>');
 *     });
 *
 *     it('should NOT sanitize explicitly trusted values', function() {
 *       expect(element(by.id('explicitlyTrustedHtml')).getAttribute('innerHTML')).toBe(
 *           '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
 *           'sanitization.&quot;">Hover over this text.</span>');
 *     });
 *   });
 * </file>
 * </example>
 *
 *
 *
 * ## Can I disable SCE completely?
 *
 * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits
 * for little coding overhead.  It will be much harder to take an SCE disabled application and
 * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE
 * for cases where you have a lot of existing code that was written before SCE was introduced and
 * you're migrating them a module at a time.
 *
 * That said, here's how you can completely disable SCE:
 *
 * ```
 * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {
 *   // Completely disable SCE.  For demonstration purposes only!
 *   // Do not use in new projects.
 *   $sceProvider.enabled(false);
 * });
 * ```
 *
 */

function $SceProvider() {
  var enabled = true;

  /**
   * @ngdoc method
   * @name $sceProvider#enabled
   * @kind function
   *
   * @param {boolean=} value If provided, then enables/disables SCE.
   * @return {boolean} true if SCE is enabled, false otherwise.
   *
   * @description
   * Enables/disables SCE and returns the current value.
   */
  this.enabled = function(value) {
    if (arguments.length) {
      enabled = !!value;
    }
    return enabled;
  };


  /* Design notes on the default implementation for SCE.
   *
   * The API contract for the SCE delegate
   * -------------------------------------
   * The SCE delegate object must provide the following 3 methods:
   *
   * - trustAs(contextEnum, value)
   *     This method is used to tell the SCE service that the provided value is OK to use in the
   *     contexts specified by contextEnum.  It must return an object that will be accepted by
   *     getTrusted() for a compatible contextEnum and return this value.
   *
   * - valueOf(value)
   *     For values that were not produced by trustAs(), return them as is.  For values that were
   *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if
   *     trustAs is wrapping the given values into some type, this operation unwraps it when given
   *     such a value.
   *
   * - getTrusted(contextEnum, value)
   *     This function should return the a value that is safe to use in the context specified by
   *     contextEnum or throw and exception otherwise.
   *
   * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be
   * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For
   * instance, an implementation could maintain a registry of all trusted objects by context.  In
   * such a case, trustAs() would return the same object that was passed in.  getTrusted() would
   * return the same object passed in if it was found in the registry under a compatible context or
   * throw an exception otherwise.  An implementation might only wrap values some of the time based
   * on some criteria.  getTrusted() might return a value and not throw an exception for special
   * constants or objects even if not wrapped.  All such implementations fulfill this contract.
   *
   *
   * A note on the inheritance model for SCE contexts
   * ------------------------------------------------
   * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This
   * is purely an implementation details.
   *
   * The contract is simply this:
   *
   *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)
   *     will also succeed.
   *
   * Inheritance happens to capture this in a natural way.  In some future, we
   * may not use inheritance anymore.  That is OK because no code outside of
   * sce.js and sceSpecs.js would need to be aware of this detail.
   */

  this.$get = ['$parse', '$sceDelegate', function(
                $parse,   $sceDelegate) {
    // Support: IE 9-11 only
    // Prereq: Ensure that we're not running in IE<11 quirks mode.  In that mode, IE < 11 allow
    // the "expression(javascript expression)" syntax which is insecure.
    if (enabled && msie < 8) {
      throw $sceMinErr('iequirks',
        'Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks ' +
        'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' +
        'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');
    }

    var sce = shallowCopy(SCE_CONTEXTS);

    /**
     * @ngdoc method
     * @name $sce#isEnabled
     * @kind function
     *
     * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you
     * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.
     *
     * @description
     * Returns a boolean indicating if SCE is enabled.
     */
    sce.isEnabled = function() {
      return enabled;
    };
    sce.trustAs = $sceDelegate.trustAs;
    sce.getTrusted = $sceDelegate.getTrusted;
    sce.valueOf = $sceDelegate.valueOf;

    if (!enabled) {
      sce.trustAs = sce.getTrusted = function(type, value) { return value; };
      sce.valueOf = identity;
    }

    /**
     * @ngdoc method
     * @name $sce#parseAs
     *
     * @description
     * Converts Angular {@link guide/expression expression} into a function.  This is like {@link
     * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it
     * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,
     * *result*)}
     *
     * @param {string} type The kind of SCE context in which this result will be used.
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */
    sce.parseAs = function sceParseAs(type, expr) {
      var parsed = $parse(expr);
      if (parsed.literal && parsed.constant) {
        return parsed;
      } else {
        return $parse(expr, function(value) {
          return sce.getTrusted(type, value);
        });
      }
    };

    /**
     * @ngdoc method
     * @name $sce#trustAs
     *
     * @description
     * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,
     * returns an object that is trusted by angular for use in specified strict contextual
     * escaping contexts (such as ng-bind-html, ng-include, any src attribute
     * interpolation, any dom event binding attribute interpolation such as for onclick,  etc.)
     * that uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual
     * escaping.
     *
     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
     *   resourceUrl, html, js and css.
     * @param {*} value The value that that should be considered trusted/safe.
     * @returns {*} A value that can be used to stand in for the provided `value` in places
     * where Angular expects a $sce.trustAs() return value.
     */

    /**
     * @ngdoc method
     * @name $sce#trustAsHtml
     *
     * @description
     * Shorthand method.  `$sce.trustAsHtml(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedHtml
     *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name $sce#trustAsUrl
     *
     * @description
     * Shorthand method.  `$sce.trustAsUrl(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedUrl
     *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name $sce#trustAsResourceUrl
     *
     * @description
     * Shorthand method.  `$sce.trustAsResourceUrl(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl
     *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the return
     *     value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name $sce#trustAsJs
     *
     * @description
     * Shorthand method.  `$sce.trustAsJs(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedJs
     *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name $sce#getTrusted
     *
     * @description
     * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,
     * takes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the
     * originally supplied value if the queried context type is a supertype of the created type.
     * If this condition isn't satisfied, throws an exception.
     *
     * @param {string} type The kind of context in which this value is to be used.
     * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}
     *                         call.
     * @returns {*} The value the was originally provided to
     *              {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.
     *              Otherwise, throws an exception.
     */

    /**
     * @ngdoc method
     * @name $sce#getTrustedHtml
     *
     * @description
     * Shorthand method.  `$sce.getTrustedHtml(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`
     */

    /**
     * @ngdoc method
     * @name $sce#getTrustedCss
     *
     * @description
     * Shorthand method.  `$sce.getTrustedCss(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`
     */

    /**
     * @ngdoc method
     * @name $sce#getTrustedUrl
     *
     * @description
     * Shorthand method.  `$sce.getTrustedUrl(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`
     */

    /**
     * @ngdoc method
     * @name $sce#getTrustedResourceUrl
     *
     * @description
     * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}
     *
     * @param {*} value The value to pass to `$sceDelegate.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`
     */

    /**
     * @ngdoc method
     * @name $sce#getTrustedJs
     *
     * @description
     * Shorthand method.  `$sce.getTrustedJs(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`
     */

    /**
     * @ngdoc method
     * @name $sce#parseAsHtml
     *
     * @description
     * Shorthand method.  `$sce.parseAsHtml(expression string)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name $sce#parseAsCss
     *
     * @description
     * Shorthand method.  `$sce.parseAsCss(value)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name $sce#parseAsUrl
     *
     * @description
     * Shorthand method.  `$sce.parseAsUrl(value)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name $sce#parseAsResourceUrl
     *
     * @description
     * Shorthand method.  `$sce.parseAsResourceUrl(value)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name $sce#parseAsJs
     *
     * @description
     * Shorthand method.  `$sce.parseAsJs(value)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    // Shorthand delegations.
    var parse = sce.parseAs,
        getTrusted = sce.getTrusted,
        trustAs = sce.trustAs;

    forEach(SCE_CONTEXTS, function(enumValue, name) {
      var lName = lowercase(name);
      sce[snakeToCamel('parse_as_' + lName)] = function(expr) {
        return parse(enumValue, expr);
      };
      sce[snakeToCamel('get_trusted_' + lName)] = function(value) {
        return getTrusted(enumValue, value);
      };
      sce[snakeToCamel('trust_as_' + lName)] = function(value) {
        return trustAs(enumValue, value);
      };
    });

    return sce;
  }];
}

/* exported $SnifferProvider */

/**
 * !!! This is an undocumented "private" service !!!
 *
 * @name $sniffer
 * @requires $window
 * @requires $document
 * @this
 *
 * @property {boolean} history Does the browser support html5 history api ?
 * @property {boolean} transitions Does the browser support CSS transition events ?
 * @property {boolean} animations Does the browser support CSS animation events ?
 *
 * @description
 * This is very simple implementation of testing browser's features.
 */
function $SnifferProvider() {
  this.$get = ['$window', '$document', function($window, $document) {
    var eventSupport = {},
        // Chrome Packaged Apps are not allowed to access `history.pushState`.
        // If not sandboxed, they can be detected by the presence of `chrome.app.runtime`
        // (see https://developer.chrome.com/apps/api_index). If sandboxed, they can be detected by
        // the presence of an extension runtime ID and the absence of other Chrome runtime APIs
        // (see https://developer.chrome.com/apps/manifest/sandbox).
        // (NW.js apps have access to Chrome APIs, but do support `history`.)
        isNw = $window.nw && $window.nw.process,
        isChromePackagedApp =
            !isNw &&
            $window.chrome &&
            ($window.chrome.app && $window.chrome.app.runtime ||
                !$window.chrome.app && $window.chrome.runtime && $window.chrome.runtime.id),
        hasHistoryPushState = !isChromePackagedApp && $window.history && $window.history.pushState,
        android =
          toInt((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]),
        boxee = /Boxee/i.test(($window.navigator || {}).userAgent),
        document = $document[0] || {},
        bodyStyle = document.body && document.body.style,
        transitions = false,
        animations = false;

    if (bodyStyle) {
      // Support: Android <5, Blackberry Browser 10, default Chrome in Android 4.4.x
      // Mentioned browsers need a -webkit- prefix for transitions & animations.
      transitions = !!('transition' in bodyStyle || 'webkitTransition' in bodyStyle);
      animations = !!('animation' in bodyStyle || 'webkitAnimation' in bodyStyle);
    }


    return {
      // Android has history.pushState, but it does not update location correctly
      // so let's not use the history API at all.
      // http://code.google.com/p/android/issues/detail?id=17471
      // https://github.com/angular/angular.js/issues/904

      // older webkit browser (533.9) on Boxee box has exactly the same problem as Android has
      // so let's not use the history API also
      // We are purposefully using `!(android < 4)` to cover the case when `android` is undefined
      history: !!(hasHistoryPushState && !(android < 4) && !boxee),
      hasEvent: function(event) {
        // Support: IE 9-11 only
        // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have
        // it. In particular the event is not fired when backspace or delete key are pressed or
        // when cut operation is performed.
        // IE10+ implements 'input' event but it erroneously fires under various situations,
        // e.g. when placeholder changes, or a form is focused.
        if (event === 'input' && msie) return false;

        if (isUndefined(eventSupport[event])) {
          var divElm = document.createElement('div');
          eventSupport[event] = 'on' + event in divElm;
        }

        return eventSupport[event];
      },
      csp: csp(),
      transitions: transitions,
      animations: animations,
      android: android
    };
  }];
}

var $templateRequestMinErr = minErr('$compile');

/**
 * @ngdoc provider
 * @name $templateRequestProvider
 * @this
 *
 * @description
 * Used to configure the options passed to the {@link $http} service when making a template request.
 *
 * For example, it can be used for specifying the "Accept" header that is sent to the server, when
 * requesting a template.
 */
function $TemplateRequestProvider() {

  var httpOptions;

  /**
   * @ngdoc method
   * @name $templateRequestProvider#httpOptions
   * @description
   * The options to be passed to the {@link $http} service when making the request.
   * You can use this to override options such as the "Accept" header for template requests.
   *
   * The {@link $templateRequest} will set the `cache` and the `transformResponse` properties of the
   * options if not overridden here.
   *
   * @param {string=} value new value for the {@link $http} options.
   * @returns {string|self} Returns the {@link $http} options when used as getter and self if used as setter.
   */
  this.httpOptions = function(val) {
    if (val) {
      httpOptions = val;
      return this;
    }
    return httpOptions;
  };

  /**
   * @ngdoc service
   * @name $templateRequest
   *
   * @description
   * The `$templateRequest` service runs security checks then downloads the provided template using
   * `$http` and, upon success, stores the contents inside of `$templateCache`. If the HTTP request
   * fails or the response data of the HTTP request is empty, a `$compile` error will be thrown (the
   * exception can be thwarted by setting the 2nd parameter of the function to true). Note that the
   * contents of `$templateCache` are trusted, so the call to `$sce.getTrustedUrl(tpl)` is omitted
   * when `tpl` is of type string and `$templateCache` has the matching entry.
   *
   * If you want to pass custom options to the `$http` service, such as setting the Accept header you
   * can configure this via {@link $templateRequestProvider#httpOptions}.
   *
   * @param {string|TrustedResourceUrl} tpl The HTTP request template URL
   * @param {boolean=} ignoreRequestError Whether or not to ignore the exception when the request fails or the template is empty
   *
   * @return {Promise} a promise for the HTTP response data of the given URL.
   *
   * @property {number} totalPendingRequests total amount of pending template requests being downloaded.
   */
  this.$get = ['$exceptionHandler', '$templateCache', '$http', '$q', '$sce',
    function($exceptionHandler, $templateCache, $http, $q, $sce) {

      function handleRequestFn(tpl, ignoreRequestError) {
        handleRequestFn.totalPendingRequests++;

        // We consider the template cache holds only trusted templates, so
        // there's no need to go through whitelisting again for keys that already
        // are included in there. This also makes Angular accept any script
        // directive, no matter its name. However, we still need to unwrap trusted
        // types.
        if (!isString(tpl) || isUndefined($templateCache.get(tpl))) {
          tpl = $sce.getTrustedResourceUrl(tpl);
        }

        var transformResponse = $http.defaults && $http.defaults.transformResponse;

        if (isArray(transformResponse)) {
          transformResponse = transformResponse.filter(function(transformer) {
            return transformer !== defaultHttpResponseTransform;
          });
        } else if (transformResponse === defaultHttpResponseTransform) {
          transformResponse = null;
        }

        return $http.get(tpl, extend({
            cache: $templateCache,
            transformResponse: transformResponse
          }, httpOptions))
          .finally(function() {
            handleRequestFn.totalPendingRequests--;
          })
          .then(function(response) {
            $templateCache.put(tpl, response.data);
            return response.data;
          }, handleError);

        function handleError(resp) {
          if (!ignoreRequestError) {
            resp = $templateRequestMinErr('tpload',
                'Failed to load template: {0} (HTTP status: {1} {2})',
                tpl, resp.status, resp.statusText);

            $exceptionHandler(resp);
          }

          return $q.reject(resp);
        }
      }

      handleRequestFn.totalPendingRequests = 0;

      return handleRequestFn;
    }
  ];
}

/** @this */
function $$TestabilityProvider() {
  this.$get = ['$rootScope', '$browser', '$location',
       function($rootScope,   $browser,   $location) {

    /**
     * @name $testability
     *
     * @description
     * The private $$testability service provides a collection of methods for use when debugging
     * or by automated test and debugging tools.
     */
    var testability = {};

    /**
     * @name $$testability#findBindings
     *
     * @description
     * Returns an array of elements that are bound (via ng-bind or {{}})
     * to expressions matching the input.
     *
     * @param {Element} element The element root to search from.
     * @param {string} expression The binding expression to match.
     * @param {boolean} opt_exactMatch If true, only returns exact matches
     *     for the expression. Filters and whitespace are ignored.
     */
    testability.findBindings = function(element, expression, opt_exactMatch) {
      var bindings = element.getElementsByClassName('ng-binding');
      var matches = [];
      forEach(bindings, function(binding) {
        var dataBinding = angular.element(binding).data('$binding');
        if (dataBinding) {
          forEach(dataBinding, function(bindingName) {
            if (opt_exactMatch) {
              var matcher = new RegExp('(^|\\s)' + escapeForRegexp(expression) + '(\\s|\\||$)');
              if (matcher.test(bindingName)) {
                matches.push(binding);
              }
            } else {
              if (bindingName.indexOf(expression) !== -1) {
                matches.push(binding);
              }
            }
          });
        }
      });
      return matches;
    };

    /**
     * @name $$testability#findModels
     *
     * @description
     * Returns an array of elements that are two-way found via ng-model to
     * expressions matching the input.
     *
     * @param {Element} element The element root to search from.
     * @param {string} expression The model expression to match.
     * @param {boolean} opt_exactMatch If true, only returns exact matches
     *     for the expression.
     */
    testability.findModels = function(element, expression, opt_exactMatch) {
      var prefixes = ['ng-', 'data-ng-', 'ng\\:'];
      for (var p = 0; p < prefixes.length; ++p) {
        var attributeEquals = opt_exactMatch ? '=' : '*=';
        var selector = '[' + prefixes[p] + 'model' + attributeEquals + '"' + expression + '"]';
        var elements = element.querySelectorAll(selector);
        if (elements.length) {
          return elements;
        }
      }
    };

    /**
     * @name $$testability#getLocation
     *
     * @description
     * Shortcut for getting the location in a browser agnostic way. Returns
     *     the path, search, and hash. (e.g. /path?a=b#hash)
     */
    testability.getLocation = function() {
      return $location.url();
    };

    /**
     * @name $$testability#setLocation
     *
     * @description
     * Shortcut for navigating to a location without doing a full page reload.
     *
     * @param {string} url The location url (path, search and hash,
     *     e.g. /path?a=b#hash) to go to.
     */
    testability.setLocation = function(url) {
      if (url !== $location.url()) {
        $location.url(url);
        $rootScope.$digest();
      }
    };

    /**
     * @name $$testability#whenStable
     *
     * @description
     * Calls the callback when $timeout and $http requests are completed.
     *
     * @param {function} callback
     */
    testability.whenStable = function(callback) {
      $browser.notifyWhenNoOutstandingRequests(callback);
    };

    return testability;
  }];
}

/** @this */
function $TimeoutProvider() {
  this.$get = ['$rootScope', '$browser', '$q', '$$q', '$exceptionHandler',
       function($rootScope,   $browser,   $q,   $$q,   $exceptionHandler) {

    var deferreds = {};


     /**
      * @ngdoc service
      * @name $timeout
      *
      * @description
      * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch
      * block and delegates any exceptions to
      * {@link ng.$exceptionHandler $exceptionHandler} service.
      *
      * The return value of calling `$timeout` is a promise, which will be resolved when
      * the delay has passed and the timeout function, if provided, is executed.
      *
      * To cancel a timeout request, call `$timeout.cancel(promise)`.
      *
      * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to
      * synchronously flush the queue of deferred functions.
      *
      * If you only want a promise that will be resolved after some specified delay
      * then you can call `$timeout` without the `fn` function.
      *
      * @param {function()=} fn A function, whose execution should be delayed.
      * @param {number=} [delay=0] Delay in milliseconds.
      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
      * @param {...*=} Pass additional parameters to the executed function.
      * @returns {Promise} Promise that will be resolved when the timeout is reached. The promise
      *   will be resolved with the return value of the `fn` function.
      *
      */
    function timeout(fn, delay, invokeApply) {
      if (!isFunction(fn)) {
        invokeApply = delay;
        delay = fn;
        fn = noop;
      }

      var args = sliceArgs(arguments, 3),
          skipApply = (isDefined(invokeApply) && !invokeApply),
          deferred = (skipApply ? $$q : $q).defer(),
          promise = deferred.promise,
          timeoutId;

      timeoutId = $browser.defer(function() {
        try {
          deferred.resolve(fn.apply(null, args));
        } catch (e) {
          deferred.reject(e);
          $exceptionHandler(e);
        } finally {
          delete deferreds[promise.$$timeoutId];
        }

        if (!skipApply) $rootScope.$apply();
      }, delay);

      promise.$$timeoutId = timeoutId;
      deferreds[timeoutId] = deferred;

      return promise;
    }


     /**
      * @ngdoc method
      * @name $timeout#cancel
      *
      * @description
      * Cancels a task associated with the `promise`. As a result of this, the promise will be
      * resolved with a rejection.
      *
      * @param {Promise=} promise Promise returned by the `$timeout` function.
      * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
      *   canceled.
      */
    timeout.cancel = function(promise) {
      if (promise && promise.$$timeoutId in deferreds) {
        // Timeout cancels should not report an unhandled promise.
        deferreds[promise.$$timeoutId].promise.catch(noop);
        deferreds[promise.$$timeoutId].reject('canceled');
        delete deferreds[promise.$$timeoutId];
        return $browser.defer.cancel(promise.$$timeoutId);
      }
      return false;
    };

    return timeout;
  }];
}

// NOTE:  The usage of window and document instead of $window and $document here is
// deliberate.  This service depends on the specific behavior of anchor nodes created by the
// browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and
// cause us to break tests.  In addition, when the browser resolves a URL for XHR, it
// doesn't know about mocked locations and resolves URLs to the real document - which is
// exactly the behavior needed here.  There is little value is mocking these out for this
// service.
var urlParsingNode = window.document.createElement('a');
var originUrl = urlResolve(window.location.href);


/**
 *
 * Implementation Notes for non-IE browsers
 * ----------------------------------------
 * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,
 * results both in the normalizing and parsing of the URL.  Normalizing means that a relative
 * URL will be resolved into an absolute URL in the context of the application document.
 * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related
 * properties are all populated to reflect the normalized URL.  This approach has wide
 * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See
 * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
 *
 * Implementation Notes for IE
 * ---------------------------
 * IE <= 10 normalizes the URL when assigned to the anchor node similar to the other
 * browsers.  However, the parsed components will not be set if the URL assigned did not specify
 * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We
 * work around that by performing the parsing in a 2nd step by taking a previously normalized
 * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the
 * properties such as protocol, hostname, port, etc.
 *
 * References:
 *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
 *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
 *   http://url.spec.whatwg.org/#urlutils
 *   https://github.com/angular/angular.js/pull/2902
 *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/
 *
 * @kind function
 * @param {string} url The URL to be parsed.
 * @description Normalizes and parses a URL.
 * @returns {object} Returns the normalized URL as a dictionary.
 *
 *   | member name   | Description    |
 *   |---------------|----------------|
 *   | href          | A normalized version of the provided URL if it was not an absolute URL |
 *   | protocol      | The protocol including the trailing colon                              |
 *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |
 *   | search        | The search params, minus the question mark                             |
 *   | hash          | The hash string, minus the hash symbol
 *   | hostname      | The hostname
 *   | port          | The port, without ":"
 *   | pathname      | The pathname, beginning with "/"
 *
 */
function urlResolve(url) {
  var href = url;

  // Support: IE 9-11 only
  if (msie) {
    // Normalize before parse.  Refer Implementation Notes on why this is
    // done in two steps on IE.
    urlParsingNode.setAttribute('href', href);
    href = urlParsingNode.href;
  }

  urlParsingNode.setAttribute('href', href);

  // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
  return {
    href: urlParsingNode.href,
    protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
    host: urlParsingNode.host,
    search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
    hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
    hostname: urlParsingNode.hostname,
    port: urlParsingNode.port,
    pathname: (urlParsingNode.pathname.charAt(0) === '/')
      ? urlParsingNode.pathname
      : '/' + urlParsingNode.pathname
  };
}

/**
 * Parse a request URL and determine whether this is a same-origin request as the application document.
 *
 * @param {string|object} requestUrl The url of the request as a string that will be resolved
 * or a parsed URL object.
 * @returns {boolean} Whether the request is for the same origin as the application document.
 */
function urlIsSameOrigin(requestUrl) {
  var parsed = (isString(requestUrl)) ? urlResolve(requestUrl) : requestUrl;
  return (parsed.protocol === originUrl.protocol &&
          parsed.host === originUrl.host);
}

/**
 * @ngdoc service
 * @name $window
 * @this
 *
 * @description
 * A reference to the browser's `window` object. While `window`
 * is globally available in JavaScript, it causes testability problems, because
 * it is a global variable. In angular we always refer to it through the
 * `$window` service, so it may be overridden, removed or mocked for testing.
 *
 * Expressions, like the one defined for the `ngClick` directive in the example
 * below, are evaluated with respect to the current scope.  Therefore, there is
 * no risk of inadvertently coding in a dependency on a global value in such an
 * expression.
 *
 * @example
   <example module="windowExample" name="window-service">
     <file name="index.html">
       <script>
         angular.module('windowExample', [])
           .controller('ExampleController', ['$scope', '$window', function($scope, $window) {
             $scope.greeting = 'Hello, World!';
             $scope.doGreeting = function(greeting) {
               $window.alert(greeting);
             };
           }]);
       </script>
       <div ng-controller="ExampleController">
         <input type="text" ng-model="greeting" aria-label="greeting" />
         <button ng-click="doGreeting(greeting)">ALERT</button>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
      it('should display the greeting in the input box', function() {
       element(by.model('greeting')).sendKeys('Hello, E2E Tests');
       // If we click the button it will block the test runner
       // element(':button').click();
      });
     </file>
   </example>
 */
function $WindowProvider() {
  this.$get = valueFn(window);
}

/**
 * @name $$cookieReader
 * @requires $document
 *
 * @description
 * This is a private service for reading cookies used by $http and ngCookies
 *
 * @return {Object} a key/value map of the current cookies
 */
function $$CookieReader($document) {
  var rawDocument = $document[0] || {};
  var lastCookies = {};
  var lastCookieString = '';

  function safeGetCookie(rawDocument) {
    try {
      return rawDocument.cookie || '';
    } catch (e) {
      return '';
    }
  }

  function safeDecodeURIComponent(str) {
    try {
      return decodeURIComponent(str);
    } catch (e) {
      return str;
    }
  }

  return function() {
    var cookieArray, cookie, i, index, name;
    var currentCookieString = safeGetCookie(rawDocument);

    if (currentCookieString !== lastCookieString) {
      lastCookieString = currentCookieString;
      cookieArray = lastCookieString.split('; ');
      lastCookies = {};

      for (i = 0; i < cookieArray.length; i++) {
        cookie = cookieArray[i];
        index = cookie.indexOf('=');
        if (index > 0) { //ignore nameless cookies
          name = safeDecodeURIComponent(cookie.substring(0, index));
          // the first value that is seen for a cookie is the most
          // specific one.  values for the same cookie name that
          // follow are for less specific paths.
          if (isUndefined(lastCookies[name])) {
            lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));
          }
        }
      }
    }
    return lastCookies;
  };
}

$$CookieReader.$inject = ['$document'];

/** @this */
function $$CookieReaderProvider() {
  this.$get = $$CookieReader;
}

/* global currencyFilter: true,
 dateFilter: true,
 filterFilter: true,
 jsonFilter: true,
 limitToFilter: true,
 lowercaseFilter: true,
 numberFilter: true,
 orderByFilter: true,
 uppercaseFilter: true,
 */

/**
 * @ngdoc provider
 * @name $filterProvider
 * @description
 *
 * Filters are just functions which transform input to an output. However filters need to be
 * Dependency Injected. To achieve this a filter definition consists of a factory function which is
 * annotated with dependencies and is responsible for creating a filter function.
 *
 * <div class="alert alert-warning">
 * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
 * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
 * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
 * (`myapp_subsection_filterx`).
 * </div>
 *
 * ```js
 *   // Filter registration
 *   function MyModule($provide, $filterProvider) {
 *     // create a service to demonstrate injection (not always needed)
 *     $provide.value('greet', function(name){
 *       return 'Hello ' + name + '!';
 *     });
 *
 *     // register a filter factory which uses the
 *     // greet service to demonstrate DI.
 *     $filterProvider.register('greet', function(greet){
 *       // return the filter function which uses the greet service
 *       // to generate salutation
 *       return function(text) {
 *         // filters need to be forgiving so check input validity
 *         return text && greet(text) || text;
 *       };
 *     });
 *   }
 * ```
 *
 * The filter function is registered with the `$injector` under the filter name suffix with
 * `Filter`.
 *
 * ```js
 *   it('should be the same instance', inject(
 *     function($filterProvider) {
 *       $filterProvider.register('reverse', function(){
 *         return ...;
 *       });
 *     },
 *     function($filter, reverseFilter) {
 *       expect($filter('reverse')).toBe(reverseFilter);
 *     });
 * ```
 *
 *
 * For more information about how angular filters work, and how to create your own filters, see
 * {@link guide/filter Filters} in the Angular Developer Guide.
 */

/**
 * @ngdoc service
 * @name $filter
 * @kind function
 * @description
 * Filters are used for formatting data displayed to the user.
 *
 * They can be used in view templates, controllers or services.Angular comes
 * with a collection of [built-in filters](api/ng/filter), but it is easy to
 * define your own as well.
 *
 * The general syntax in templates is as follows:
 *
 * ```html
 * {{ expression [| filter_name[:parameter_value] ... ] }}
 * ```
 *
 * @param {String} name Name of the filter function to retrieve
 * @return {Function} the filter function
 * @example
   <example name="$filter" module="filterExample">
     <file name="index.html">
       <div ng-controller="MainCtrl">
        <h3>{{ originalText }}</h3>
        <h3>{{ filteredText }}</h3>
       </div>
     </file>

     <file name="script.js">
      angular.module('filterExample', [])
      .controller('MainCtrl', function($scope, $filter) {
        $scope.originalText = 'hello';
        $scope.filteredText = $filter('uppercase')($scope.originalText);
      });
     </file>
   </example>
  */
$FilterProvider.$inject = ['$provide'];
/** @this */
function $FilterProvider($provide) {
  var suffix = 'Filter';

  /**
   * @ngdoc method
   * @name $filterProvider#register
   * @param {string|Object} name Name of the filter function, or an object map of filters where
   *    the keys are the filter names and the values are the filter factories.
   *
   *    <div class="alert alert-warning">
   *    **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
   *    Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
   *    your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
   *    (`myapp_subsection_filterx`).
   *    </div>
    * @param {Function} factory If the first argument was a string, a factory function for the filter to be registered.
   * @returns {Object} Registered filter instance, or if a map of filters was provided then a map
   *    of the registered filter instances.
   */
  function register(name, factory) {
    if (isObject(name)) {
      var filters = {};
      forEach(name, function(filter, key) {
        filters[key] = register(key, filter);
      });
      return filters;
    } else {
      return $provide.factory(name + suffix, factory);
    }
  }
  this.register = register;

  this.$get = ['$injector', function($injector) {
    return function(name) {
      return $injector.get(name + suffix);
    };
  }];

  ////////////////////////////////////////

  /* global
    currencyFilter: false,
    dateFilter: false,
    filterFilter: false,
    jsonFilter: false,
    limitToFilter: false,
    lowercaseFilter: false,
    numberFilter: false,
    orderByFilter: false,
    uppercaseFilter: false
  */

  register('currency', currencyFilter);
  register('date', dateFilter);
  register('filter', filterFilter);
  register('json', jsonFilter);
  register('limitTo', limitToFilter);
  register('lowercase', lowercaseFilter);
  register('number', numberFilter);
  register('orderBy', orderByFilter);
  register('uppercase', uppercaseFilter);
}

/**
 * @ngdoc filter
 * @name filter
 * @kind function
 *
 * @description
 * Selects a subset of items from `array` and returns it as a new array.
 *
 * @param {Array} array The source array.
 * @param {string|Object|function()} expression The predicate to be used for selecting items from
 *   `array`.
 *
 *   Can be one of:
 *
 *   - `string`: The string is used for matching against the contents of the `array`. All strings or
 *     objects with string properties in `array` that match this string will be returned. This also
 *     applies to nested object properties.
 *     The predicate can be negated by prefixing the string with `!`.
 *
 *   - `Object`: A pattern object can be used to filter specific properties on objects contained
 *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items
 *     which have property `name` containing "M" and property `phone` containing "1". A special
 *     property name (`$` by default) can be used (e.g. as in `{$: "text"}`) to accept a match
 *     against any property of the object or its nested object properties. That's equivalent to the
 *     simple substring match with a `string` as described above. The special property name can be
 *     overwritten, using the `anyPropertyKey` parameter.
 *     The predicate can be negated by prefixing the string with `!`.
 *     For example `{name: "!M"}` predicate will return an array of items which have property `name`
 *     not containing "M".
 *
 *     Note that a named property will match properties on the same level only, while the special
 *     `$` property will match properties on the same level or deeper. E.g. an array item like
 *     `{name: {first: 'John', last: 'Doe'}}` will **not** be matched by `{name: 'John'}`, but
 *     **will** be matched by `{$: 'John'}`.
 *
 *   - `function(value, index, array)`: A predicate function can be used to write arbitrary filters.
 *     The function is called for each element of the array, with the element, its index, and
 *     the entire array itself as arguments.
 *
 *     The final result is an array of those elements that the predicate returned true for.
 *
 * @param {function(actual, expected)|true|false} [comparator] Comparator which is used in
 *     determining if the expected value (from the filter expression) and actual value (from
 *     the object in the array) should be considered a match.
 *
 *   Can be one of:
 *
 *   - `function(actual, expected)`:
 *     The function will be given the object value and the predicate value to compare and
 *     should return true if both values should be considered equal.
 *
 *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(actual, expected)}`.
 *     This is essentially strict comparison of expected and actual.
 *
 *   - `false`: A short hand for a function which will look for a substring match in a case
 *     insensitive way. Primitive values are converted to strings. Objects are not compared against
 *     primitives, unless they have a custom `toString` method (e.g. `Date` objects).
 *
 *
 *   Defaults to `false`.
 *
 * @param {string} [anyPropertyKey] The special property name that matches against any property.
 *     By default `$`.
 *
 * @example
   <example name="filter-filter">
     <file name="index.html">
       <div ng-init="friends = [{name:'John', phone:'555-1276'},
                                {name:'Mary', phone:'800-BIG-MARY'},
                                {name:'Mike', phone:'555-4321'},
                                {name:'Adam', phone:'555-5678'},
                                {name:'Julie', phone:'555-8765'},
                                {name:'Juliette', phone:'555-5678'}]"></div>

       <label>Search: <input ng-model="searchText"></label>
       <table id="searchTextResults">
         <tr><th>Name</th><th>Phone</th></tr>
         <tr ng-repeat="friend in friends | filter:searchText">
           <td>{{friend.name}}</td>
           <td>{{friend.phone}}</td>
         </tr>
       </table>
       <hr>
       <label>Any: <input ng-model="search.$"></label> <br>
       <label>Name only <input ng-model="search.name"></label><br>
       <label>Phone only <input ng-model="search.phone"></label><br>
       <label>Equality <input type="checkbox" ng-model="strict"></label><br>
       <table id="searchObjResults">
         <tr><th>Name</th><th>Phone</th></tr>
         <tr ng-repeat="friendObj in friends | filter:search:strict">
           <td>{{friendObj.name}}</td>
           <td>{{friendObj.phone}}</td>
         </tr>
       </table>
     </file>
     <file name="protractor.js" type="protractor">
       var expectFriendNames = function(expectedNames, key) {
         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {
           arr.forEach(function(wd, i) {
             expect(wd.getText()).toMatch(expectedNames[i]);
           });
         });
       };

       it('should search across all fields when filtering with a string', function() {
         var searchText = element(by.model('searchText'));
         searchText.clear();
         searchText.sendKeys('m');
         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');

         searchText.clear();
         searchText.sendKeys('76');
         expectFriendNames(['John', 'Julie'], 'friend');
       });

       it('should search in specific fields when filtering with a predicate object', function() {
         var searchAny = element(by.model('search.$'));
         searchAny.clear();
         searchAny.sendKeys('i');
         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');
       });
       it('should use a equal comparison when comparator is true', function() {
         var searchName = element(by.model('search.name'));
         var strict = element(by.model('strict'));
         searchName.clear();
         searchName.sendKeys('Julie');
         strict.click();
         expectFriendNames(['Julie'], 'friendObj');
       });
     </file>
   </example>
 */

function filterFilter() {
  return function(array, expression, comparator, anyPropertyKey) {
    if (!isArrayLike(array)) {
      if (array == null) {
        return array;
      } else {
        throw minErr('filter')('notarray', 'Expected array but received: {0}', array);
      }
    }

    anyPropertyKey = anyPropertyKey || '$';
    var expressionType = getTypeForFilter(expression);
    var predicateFn;
    var matchAgainstAnyProp;

    switch (expressionType) {
      case 'function':
        predicateFn = expression;
        break;
      case 'boolean':
      case 'null':
      case 'number':
      case 'string':
        matchAgainstAnyProp = true;
        // falls through
      case 'object':
        predicateFn = createPredicateFn(expression, comparator, anyPropertyKey, matchAgainstAnyProp);
        break;
      default:
        return array;
    }

    return Array.prototype.filter.call(array, predicateFn);
  };
}

// Helper functions for `filterFilter`
function createPredicateFn(expression, comparator, anyPropertyKey, matchAgainstAnyProp) {
  var shouldMatchPrimitives = isObject(expression) && (anyPropertyKey in expression);
  var predicateFn;

  if (comparator === true) {
    comparator = equals;
  } else if (!isFunction(comparator)) {
    comparator = function(actual, expected) {
      if (isUndefined(actual)) {
        // No substring matching against `undefined`
        return false;
      }
      if ((actual === null) || (expected === null)) {
        // No substring matching against `null`; only match against `null`
        return actual === expected;
      }
      if (isObject(expected) || (isObject(actual) && !hasCustomToString(actual))) {
        // Should not compare primitives against objects, unless they have custom `toString` method
        return false;
      }

      actual = lowercase('' + actual);
      expected = lowercase('' + expected);
      return actual.indexOf(expected) !== -1;
    };
  }

  predicateFn = function(item) {
    if (shouldMatchPrimitives && !isObject(item)) {
      return deepCompare(item, expression[anyPropertyKey], comparator, anyPropertyKey, false);
    }
    return deepCompare(item, expression, comparator, anyPropertyKey, matchAgainstAnyProp);
  };

  return predicateFn;
}

function deepCompare(actual, expected, comparator, anyPropertyKey, matchAgainstAnyProp, dontMatchWholeObject) {
  var actualType = getTypeForFilter(actual);
  var expectedType = getTypeForFilter(expected);

  if ((expectedType === 'string') && (expected.charAt(0) === '!')) {
    return !deepCompare(actual, expected.substring(1), comparator, anyPropertyKey, matchAgainstAnyProp);
  } else if (isArray(actual)) {
    // In case `actual` is an array, consider it a match
    // if ANY of it's items matches `expected`
    return actual.some(function(item) {
      return deepCompare(item, expected, comparator, anyPropertyKey, matchAgainstAnyProp);
    });
  }

  switch (actualType) {
    case 'object':
      var key;
      if (matchAgainstAnyProp) {
        for (key in actual) {
          if ((key.charAt(0) !== '$') && deepCompare(actual[key], expected, comparator, anyPropertyKey, true)) {
            return true;
          }
        }
        return dontMatchWholeObject ? false : deepCompare(actual, expected, comparator, anyPropertyKey, false);
      } else if (expectedType === 'object') {
        for (key in expected) {
          var expectedVal = expected[key];
          if (isFunction(expectedVal) || isUndefined(expectedVal)) {
            continue;
          }

          var matchAnyProperty = key === anyPropertyKey;
          var actualVal = matchAnyProperty ? actual : actual[key];
          if (!deepCompare(actualVal, expectedVal, comparator, anyPropertyKey, matchAnyProperty, matchAnyProperty)) {
            return false;
          }
        }
        return true;
      } else {
        return comparator(actual, expected);
      }
    case 'function':
      return false;
    default:
      return comparator(actual, expected);
  }
}

// Used for easily differentiating between `null` and actual `object`
function getTypeForFilter(val) {
  return (val === null) ? 'null' : typeof val;
}

var MAX_DIGITS = 22;
var DECIMAL_SEP = '.';
var ZERO_CHAR = '0';

/**
 * @ngdoc filter
 * @name currency
 * @kind function
 *
 * @description
 * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default
 * symbol for current locale is used.
 *
 * @param {number} amount Input to filter.
 * @param {string=} symbol Currency symbol or identifier to be displayed.
 * @param {number=} fractionSize Number of decimal places to round the amount to, defaults to default max fraction size for current locale
 * @returns {string} Formatted number.
 *
 *
 * @example
   <example module="currencyExample" name="currency-filter">
     <file name="index.html">
       <script>
         angular.module('currencyExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.amount = 1234.56;
           }]);
       </script>
       <div ng-controller="ExampleController">
         <input type="number" ng-model="amount" aria-label="amount"> <br>
         default currency symbol ($): <span id="currency-default">{{amount | currency}}</span><br>
         custom currency identifier (USD$): <span id="currency-custom">{{amount | currency:"USD$"}}</span><br>
         no fractions (0): <span id="currency-no-fractions">{{amount | currency:"USD$":0}}</span>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should init with 1234.56', function() {
         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');
         expect(element(by.id('currency-custom')).getText()).toBe('USD$1,234.56');
         expect(element(by.id('currency-no-fractions')).getText()).toBe('USD$1,235');
       });
       it('should update', function() {
         if (browser.params.browser === 'safari') {
           // Safari does not understand the minus key. See
           // https://github.com/angular/protractor/issues/481
           return;
         }
         element(by.model('amount')).clear();
         element(by.model('amount')).sendKeys('-1234');
         expect(element(by.id('currency-default')).getText()).toBe('-$1,234.00');
         expect(element(by.id('currency-custom')).getText()).toBe('-USD$1,234.00');
         expect(element(by.id('currency-no-fractions')).getText()).toBe('-USD$1,234');
       });
     </file>
   </example>
 */
currencyFilter.$inject = ['$locale'];
function currencyFilter($locale) {
  var formats = $locale.NUMBER_FORMATS;
  return function(amount, currencySymbol, fractionSize) {
    if (isUndefined(currencySymbol)) {
      currencySymbol = formats.CURRENCY_SYM;
    }

    if (isUndefined(fractionSize)) {
      fractionSize = formats.PATTERNS[1].maxFrac;
    }

    // if null or undefined pass it through
    return (amount == null)
        ? amount
        : formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize).
            replace(/\u00A4/g, currencySymbol);
  };
}

/**
 * @ngdoc filter
 * @name number
 * @kind function
 *
 * @description
 * Formats a number as text.
 *
 * If the input is null or undefined, it will just be returned.
 * If the input is infinite (Infinity or -Infinity), the Infinity symbol '∞' or '-∞' is returned, respectively.
 * If the input is not a number an empty string is returned.
 *
 *
 * @param {number|string} number Number to format.
 * @param {(number|string)=} fractionSize Number of decimal places to round the number to.
 * If this is not provided then the fraction size is computed from the current locale's number
 * formatting pattern. In the case of the default locale, it will be 3.
 * @returns {string} Number rounded to `fractionSize` appropriately formatted based on the current
 *                   locale (e.g., in the en_US locale it will have "." as the decimal separator and
 *                   include "," group separators after each third digit).
 *
 * @example
   <example module="numberFilterExample" name="number-filter">
     <file name="index.html">
       <script>
         angular.module('numberFilterExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.val = 1234.56789;
           }]);
       </script>
       <div ng-controller="ExampleController">
         <label>Enter number: <input ng-model='val'></label><br>
         Default formatting: <span id='number-default'>{{val | number}}</span><br>
         No fractions: <span>{{val | number:0}}</span><br>
         Negative number: <span>{{-val | number:4}}</span>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should format numbers', function() {
         expect(element(by.id('number-default')).getText()).toBe('1,234.568');
         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');
         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');
       });

       it('should update', function() {
         element(by.model('val')).clear();
         element(by.model('val')).sendKeys('3374.333');
         expect(element(by.id('number-default')).getText()).toBe('3,374.333');
         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');
         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');
      });
     </file>
   </example>
 */
numberFilter.$inject = ['$locale'];
function numberFilter($locale) {
  var formats = $locale.NUMBER_FORMATS;
  return function(number, fractionSize) {

    // if null or undefined pass it through
    return (number == null)
        ? number
        : formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP,
                       fractionSize);
  };
}

/**
 * Parse a number (as a string) into three components that can be used
 * for formatting the number.
 *
 * (Significant bits of this parse algorithm came from https://github.com/MikeMcl/big.js/)
 *
 * @param  {string} numStr The number to parse
 * @return {object} An object describing this number, containing the following keys:
 *  - d : an array of digits containing leading zeros as necessary
 *  - i : the number of the digits in `d` that are to the left of the decimal point
 *  - e : the exponent for numbers that would need more than `MAX_DIGITS` digits in `d`
 *
 */
function parse(numStr) {
  var exponent = 0, digits, numberOfIntegerDigits;
  var i, j, zeros;

  // Decimal point?
  if ((numberOfIntegerDigits = numStr.indexOf(DECIMAL_SEP)) > -1) {
    numStr = numStr.replace(DECIMAL_SEP, '');
  }

  // Exponential form?
  if ((i = numStr.search(/e/i)) > 0) {
    // Work out the exponent.
    if (numberOfIntegerDigits < 0) numberOfIntegerDigits = i;
    numberOfIntegerDigits += +numStr.slice(i + 1);
    numStr = numStr.substring(0, i);
  } else if (numberOfIntegerDigits < 0) {
    // There was no decimal point or exponent so it is an integer.
    numberOfIntegerDigits = numStr.length;
  }

  // Count the number of leading zeros.
  for (i = 0; numStr.charAt(i) === ZERO_CHAR; i++) { /* empty */ }

  if (i === (zeros = numStr.length)) {
    // The digits are all zero.
    digits = [0];
    numberOfIntegerDigits = 1;
  } else {
    // Count the number of trailing zeros
    zeros--;
    while (numStr.charAt(zeros) === ZERO_CHAR) zeros--;

    // Trailing zeros are insignificant so ignore them
    numberOfIntegerDigits -= i;
    digits = [];
    // Convert string to array of digits without leading/trailing zeros.
    for (j = 0; i <= zeros; i++, j++) {
      digits[j] = +numStr.charAt(i);
    }
  }

  // If the number overflows the maximum allowed digits then use an exponent.
  if (numberOfIntegerDigits > MAX_DIGITS) {
    digits = digits.splice(0, MAX_DIGITS - 1);
    exponent = numberOfIntegerDigits - 1;
    numberOfIntegerDigits = 1;
  }

  return { d: digits, e: exponent, i: numberOfIntegerDigits };
}

/**
 * Round the parsed number to the specified number of decimal places
 * This function changed the parsedNumber in-place
 */
function roundNumber(parsedNumber, fractionSize, minFrac, maxFrac) {
    var digits = parsedNumber.d;
    var fractionLen = digits.length - parsedNumber.i;

    // determine fractionSize if it is not specified; `+fractionSize` converts it to a number
    fractionSize = (isUndefined(fractionSize)) ? Math.min(Math.max(minFrac, fractionLen), maxFrac) : +fractionSize;

    // The index of the digit to where rounding is to occur
    var roundAt = fractionSize + parsedNumber.i;
    var digit = digits[roundAt];

    if (roundAt > 0) {
      // Drop fractional digits beyond `roundAt`
      digits.splice(Math.max(parsedNumber.i, roundAt));

      // Set non-fractional digits beyond `roundAt` to 0
      for (var j = roundAt; j < digits.length; j++) {
        digits[j] = 0;
      }
    } else {
      // We rounded to zero so reset the parsedNumber
      fractionLen = Math.max(0, fractionLen);
      parsedNumber.i = 1;
      digits.length = Math.max(1, roundAt = fractionSize + 1);
      digits[0] = 0;
      for (var i = 1; i < roundAt; i++) digits[i] = 0;
    }

    if (digit >= 5) {
      if (roundAt - 1 < 0) {
        for (var k = 0; k > roundAt; k--) {
          digits.unshift(0);
          parsedNumber.i++;
        }
        digits.unshift(1);
        parsedNumber.i++;
      } else {
        digits[roundAt - 1]++;
      }
    }

    // Pad out with zeros to get the required fraction length
    for (; fractionLen < Math.max(0, fractionSize); fractionLen++) digits.push(0);


    // Do any carrying, e.g. a digit was rounded up to 10
    var carry = digits.reduceRight(function(carry, d, i, digits) {
      d = d + carry;
      digits[i] = d % 10;
      return Math.floor(d / 10);
    }, 0);
    if (carry) {
      digits.unshift(carry);
      parsedNumber.i++;
    }
}

/**
 * Format a number into a string
 * @param  {number} number       The number to format
 * @param  {{
 *           minFrac, // the minimum number of digits required in the fraction part of the number
 *           maxFrac, // the maximum number of digits required in the fraction part of the number
 *           gSize,   // number of digits in each group of separated digits
 *           lgSize,  // number of digits in the last group of digits before the decimal separator
 *           negPre,  // the string to go in front of a negative number (e.g. `-` or `(`))
 *           posPre,  // the string to go in front of a positive number
 *           negSuf,  // the string to go after a negative number (e.g. `)`)
 *           posSuf   // the string to go after a positive number
 *         }} pattern
 * @param  {string} groupSep     The string to separate groups of number (e.g. `,`)
 * @param  {string} decimalSep   The string to act as the decimal separator (e.g. `.`)
 * @param  {[type]} fractionSize The size of the fractional part of the number
 * @return {string}              The number formatted as a string
 */
function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {

  if (!(isString(number) || isNumber(number)) || isNaN(number)) return '';

  var isInfinity = !isFinite(number);
  var isZero = false;
  var numStr = Math.abs(number) + '',
      formattedText = '',
      parsedNumber;

  if (isInfinity) {
    formattedText = '\u221e';
  } else {
    parsedNumber = parse(numStr);

    roundNumber(parsedNumber, fractionSize, pattern.minFrac, pattern.maxFrac);

    var digits = parsedNumber.d;
    var integerLen = parsedNumber.i;
    var exponent = parsedNumber.e;
    var decimals = [];
    isZero = digits.reduce(function(isZero, d) { return isZero && !d; }, true);

    // pad zeros for small numbers
    while (integerLen < 0) {
      digits.unshift(0);
      integerLen++;
    }

    // extract decimals digits
    if (integerLen > 0) {
      decimals = digits.splice(integerLen, digits.length);
    } else {
      decimals = digits;
      digits = [0];
    }

    // format the integer digits with grouping separators
    var groups = [];
    if (digits.length >= pattern.lgSize) {
      groups.unshift(digits.splice(-pattern.lgSize, digits.length).join(''));
    }
    while (digits.length > pattern.gSize) {
      groups.unshift(digits.splice(-pattern.gSize, digits.length).join(''));
    }
    if (digits.length) {
      groups.unshift(digits.join(''));
    }
    formattedText = groups.join(groupSep);

    // append the decimal digits
    if (decimals.length) {
      formattedText += decimalSep + decimals.join('');
    }

    if (exponent) {
      formattedText += 'e+' + exponent;
    }
  }
  if (number < 0 && !isZero) {
    return pattern.negPre + formattedText + pattern.negSuf;
  } else {
    return pattern.posPre + formattedText + pattern.posSuf;
  }
}

function padNumber(num, digits, trim, negWrap) {
  var neg = '';
  if (num < 0 || (negWrap && num <= 0)) {
    if (negWrap) {
      num = -num + 1;
    } else {
      num = -num;
      neg = '-';
    }
  }
  num = '' + num;
  while (num.length < digits) num = ZERO_CHAR + num;
  if (trim) {
    num = num.substr(num.length - digits);
  }
  return neg + num;
}


function dateGetter(name, size, offset, trim, negWrap) {
  offset = offset || 0;
  return function(date) {
    var value = date['get' + name]();
    if (offset > 0 || value > -offset) {
      value += offset;
    }
    if (value === 0 && offset === -12) value = 12;
    return padNumber(value, size, trim, negWrap);
  };
}

function dateStrGetter(name, shortForm, standAlone) {
  return function(date, formats) {
    var value = date['get' + name]();
    var propPrefix = (standAlone ? 'STANDALONE' : '') + (shortForm ? 'SHORT' : '');
    var get = uppercase(propPrefix + name);

    return formats[get][value];
  };
}

function timeZoneGetter(date, formats, offset) {
  var zone = -1 * offset;
  var paddedZone = (zone >= 0) ? '+' : '';

  paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) +
                padNumber(Math.abs(zone % 60), 2);

  return paddedZone;
}

function getFirstThursdayOfYear(year) {
    // 0 = index of January
    var dayOfWeekOnFirst = (new Date(year, 0, 1)).getDay();
    // 4 = index of Thursday (+1 to account for 1st = 5)
    // 11 = index of *next* Thursday (+1 account for 1st = 12)
    return new Date(year, 0, ((dayOfWeekOnFirst <= 4) ? 5 : 12) - dayOfWeekOnFirst);
}

function getThursdayThisWeek(datetime) {
    return new Date(datetime.getFullYear(), datetime.getMonth(),
      // 4 = index of Thursday
      datetime.getDate() + (4 - datetime.getDay()));
}

function weekGetter(size) {
   return function(date) {
      var firstThurs = getFirstThursdayOfYear(date.getFullYear()),
         thisThurs = getThursdayThisWeek(date);

      var diff = +thisThurs - +firstThurs,
         result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week

      return padNumber(result, size);
   };
}

function ampmGetter(date, formats) {
  return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];
}

function eraGetter(date, formats) {
  return date.getFullYear() <= 0 ? formats.ERAS[0] : formats.ERAS[1];
}

function longEraGetter(date, formats) {
  return date.getFullYear() <= 0 ? formats.ERANAMES[0] : formats.ERANAMES[1];
}

var DATE_FORMATS = {
  yyyy: dateGetter('FullYear', 4, 0, false, true),
    yy: dateGetter('FullYear', 2, 0, true, true),
     y: dateGetter('FullYear', 1, 0, false, true),
  MMMM: dateStrGetter('Month'),
   MMM: dateStrGetter('Month', true),
    MM: dateGetter('Month', 2, 1),
     M: dateGetter('Month', 1, 1),
  LLLL: dateStrGetter('Month', false, true),
    dd: dateGetter('Date', 2),
     d: dateGetter('Date', 1),
    HH: dateGetter('Hours', 2),
     H: dateGetter('Hours', 1),
    hh: dateGetter('Hours', 2, -12),
     h: dateGetter('Hours', 1, -12),
    mm: dateGetter('Minutes', 2),
     m: dateGetter('Minutes', 1),
    ss: dateGetter('Seconds', 2),
     s: dateGetter('Seconds', 1),
     // while ISO 8601 requires fractions to be prefixed with `.` or `,`
     // we can be just safely rely on using `sss` since we currently don't support single or two digit fractions
   sss: dateGetter('Milliseconds', 3),
  EEEE: dateStrGetter('Day'),
   EEE: dateStrGetter('Day', true),
     a: ampmGetter,
     Z: timeZoneGetter,
    ww: weekGetter(2),
     w: weekGetter(1),
     G: eraGetter,
     GG: eraGetter,
     GGG: eraGetter,
     GGGG: longEraGetter
};

var DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,
    NUMBER_STRING = /^-?\d+$/;

/**
 * @ngdoc filter
 * @name date
 * @kind function
 *
 * @description
 *   Formats `date` to a string based on the requested `format`.
 *
 *   `format` string can be composed of the following elements:
 *
 *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)
 *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
 *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)
 *   * `'MMMM'`: Month in year (January-December)
 *   * `'MMM'`: Month in year (Jan-Dec)
 *   * `'MM'`: Month in year, padded (01-12)
 *   * `'M'`: Month in year (1-12)
 *   * `'LLLL'`: Stand-alone month in year (January-December)
 *   * `'dd'`: Day in month, padded (01-31)
 *   * `'d'`: Day in month (1-31)
 *   * `'EEEE'`: Day in Week,(Sunday-Saturday)
 *   * `'EEE'`: Day in Week, (Sun-Sat)
 *   * `'HH'`: Hour in day, padded (00-23)
 *   * `'H'`: Hour in day (0-23)
 *   * `'hh'`: Hour in AM/PM, padded (01-12)
 *   * `'h'`: Hour in AM/PM, (1-12)
 *   * `'mm'`: Minute in hour, padded (00-59)
 *   * `'m'`: Minute in hour (0-59)
 *   * `'ss'`: Second in minute, padded (00-59)
 *   * `'s'`: Second in minute (0-59)
 *   * `'sss'`: Millisecond in second, padded (000-999)
 *   * `'a'`: AM/PM marker
 *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)
 *   * `'ww'`: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year
 *   * `'w'`: Week of year (0-53). Week 1 is the week with the first Thursday of the year
 *   * `'G'`, `'GG'`, `'GGG'`: The abbreviated form of the era string (e.g. 'AD')
 *   * `'GGGG'`: The long form of the era string (e.g. 'Anno Domini')
 *
 *   `format` string can also be one of the following predefined
 *   {@link guide/i18n localizable formats}:
 *
 *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale
 *     (e.g. Sep 3, 2010 12:05:08 PM)
 *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)
 *   * `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale
 *     (e.g. Friday, September 3, 2010)
 *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)
 *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)
 *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)
 *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)
 *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)
 *
 *   `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.
 *   `"h 'in the morning'"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence
 *   (e.g. `"h 'o''clock'"`).
 *
 * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or
 *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its
 *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is
 *    specified in the string input, the time is considered to be in the local timezone.
 * @param {string=} format Formatting rules (see Description). If not specified,
 *    `mediumDate` is used.
 * @param {string=} timezone Timezone to be used for formatting. It understands UTC/GMT and the
 *    continental US time zone abbreviations, but for general use, use a time zone offset, for
 *    example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
 *    If not specified, the timezone of the browser will be used.
 * @returns {string} Formatted string or the input if input is not recognized as date/millis.
 *
 * @example
   <example name="filter-date">
     <file name="index.html">
       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:
           <span>{{1288323623006 | date:'medium'}}</span><br>
       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:
          <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>
       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:
          <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>
       <span ng-non-bindable>{{1288323623006 | date:"MM/dd/yyyy 'at' h:mma"}}</span>:
          <span>{{'1288323623006' | date:"MM/dd/yyyy 'at' h:mma"}}</span><br>
     </file>
     <file name="protractor.js" type="protractor">
       it('should format date', function() {
         expect(element(by.binding("1288323623006 | date:'medium'")).getText()).
            toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);
         expect(element(by.binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).getText()).
            toMatch(/2010-10-2\d \d{2}:\d{2}:\d{2} (-|\+)?\d{4}/);
         expect(element(by.binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).getText()).
            toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);
         expect(element(by.binding("'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"")).getText()).
            toMatch(/10\/2\d\/2010 at \d{1,2}:\d{2}(AM|PM)/);
       });
     </file>
   </example>
 */
dateFilter.$inject = ['$locale'];
function dateFilter($locale) {


  var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
                     // 1        2       3         4          5          6          7          8  9     10      11
  function jsonStringToDate(string) {
    var match;
    if ((match = string.match(R_ISO8601_STR))) {
      var date = new Date(0),
          tzHour = 0,
          tzMin  = 0,
          dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear,
          timeSetter = match[8] ? date.setUTCHours : date.setHours;

      if (match[9]) {
        tzHour = toInt(match[9] + match[10]);
        tzMin = toInt(match[9] + match[11]);
      }
      dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));
      var h = toInt(match[4] || 0) - tzHour;
      var m = toInt(match[5] || 0) - tzMin;
      var s = toInt(match[6] || 0);
      var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
      timeSetter.call(date, h, m, s, ms);
      return date;
    }
    return string;
  }


  return function(date, format, timezone) {
    var text = '',
        parts = [],
        fn, match;

    format = format || 'mediumDate';
    format = $locale.DATETIME_FORMATS[format] || format;
    if (isString(date)) {
      date = NUMBER_STRING.test(date) ? toInt(date) : jsonStringToDate(date);
    }

    if (isNumber(date)) {
      date = new Date(date);
    }

    if (!isDate(date) || !isFinite(date.getTime())) {
      return date;
    }

    while (format) {
      match = DATE_FORMATS_SPLIT.exec(format);
      if (match) {
        parts = concat(parts, match, 1);
        format = parts.pop();
      } else {
        parts.push(format);
        format = null;
      }
    }

    var dateTimezoneOffset = date.getTimezoneOffset();
    if (timezone) {
      dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
      date = convertTimezoneToLocal(date, timezone, true);
    }
    forEach(parts, function(value) {
      fn = DATE_FORMATS[value];
      text += fn ? fn(date, $locale.DATETIME_FORMATS, dateTimezoneOffset)
                 : value === '\'\'' ? '\'' : value.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
    });

    return text;
  };
}


/**
 * @ngdoc filter
 * @name json
 * @kind function
 *
 * @description
 *   Allows you to convert a JavaScript object into JSON string.
 *
 *   This filter is mostly useful for debugging. When using the double curly {{value}} notation
 *   the binding is automatically converted to JSON.
 *
 * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.
 * @param {number=} spacing The number of spaces to use per indentation, defaults to 2.
 * @returns {string} JSON string.
 *
 *
 * @example
   <example name="filter-json">
     <file name="index.html">
       <pre id="default-spacing">{{ {'name':'value'} | json }}</pre>
       <pre id="custom-spacing">{{ {'name':'value'} | json:4 }}</pre>
     </file>
     <file name="protractor.js" type="protractor">
       it('should jsonify filtered objects', function() {
         expect(element(by.id('default-spacing')).getText()).toMatch(/\{\n {2}"name": ?"value"\n}/);
         expect(element(by.id('custom-spacing')).getText()).toMatch(/\{\n {4}"name": ?"value"\n}/);
       });
     </file>
   </example>
 *
 */
function jsonFilter() {
  return function(object, spacing) {
    if (isUndefined(spacing)) {
        spacing = 2;
    }
    return toJson(object, spacing);
  };
}


/**
 * @ngdoc filter
 * @name lowercase
 * @kind function
 * @description
 * Converts string to lowercase.
 * @see angular.lowercase
 */
var lowercaseFilter = valueFn(lowercase);


/**
 * @ngdoc filter
 * @name uppercase
 * @kind function
 * @description
 * Converts string to uppercase.
 * @see angular.uppercase
 */
var uppercaseFilter = valueFn(uppercase);

/**
 * @ngdoc filter
 * @name limitTo
 * @kind function
 *
 * @description
 * Creates a new array or string containing only a specified number of elements. The elements are
 * taken from either the beginning or the end of the source array, string or number, as specified by
 * the value and sign (positive or negative) of `limit`. Other array-like objects are also supported
 * (e.g. array subclasses, NodeLists, jqLite/jQuery collections etc). If a number is used as input,
 * it is converted to a string.
 *
 * @param {Array|ArrayLike|string|number} input - Array/array-like, string or number to be limited.
 * @param {string|number} limit - The length of the returned array or string. If the `limit` number
 *     is positive, `limit` number of items from the beginning of the source array/string are copied.
 *     If the number is negative, `limit` number  of items from the end of the source array/string
 *     are copied. The `limit` will be trimmed if it exceeds `array.length`. If `limit` is undefined,
 *     the input will be returned unchanged.
 * @param {(string|number)=} begin - Index at which to begin limitation. As a negative index,
 *     `begin` indicates an offset from the end of `input`. Defaults to `0`.
 * @returns {Array|string} A new sub-array or substring of length `limit` or less if the input had
 *     less than `limit` elements.
 *
 * @example
   <example module="limitToExample" name="limit-to-filter">
     <file name="index.html">
       <script>
         angular.module('limitToExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.numbers = [1,2,3,4,5,6,7,8,9];
             $scope.letters = "abcdefghi";
             $scope.longNumber = 2345432342;
             $scope.numLimit = 3;
             $scope.letterLimit = 3;
             $scope.longNumberLimit = 3;
           }]);
       </script>
       <div ng-controller="ExampleController">
         <label>
            Limit {{numbers}} to:
            <input type="number" step="1" ng-model="numLimit">
         </label>
         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>
         <label>
            Limit {{letters}} to:
            <input type="number" step="1" ng-model="letterLimit">
         </label>
         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>
         <label>
            Limit {{longNumber}} to:
            <input type="number" step="1" ng-model="longNumberLimit">
         </label>
         <p>Output long number: {{ longNumber | limitTo:longNumberLimit }}</p>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       var numLimitInput = element(by.model('numLimit'));
       var letterLimitInput = element(by.model('letterLimit'));
       var longNumberLimitInput = element(by.model('longNumberLimit'));
       var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));
       var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));
       var limitedLongNumber = element(by.binding('longNumber | limitTo:longNumberLimit'));

       it('should limit the number array to first three items', function() {
         expect(numLimitInput.getAttribute('value')).toBe('3');
         expect(letterLimitInput.getAttribute('value')).toBe('3');
         expect(longNumberLimitInput.getAttribute('value')).toBe('3');
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');
         expect(limitedLetters.getText()).toEqual('Output letters: abc');
         expect(limitedLongNumber.getText()).toEqual('Output long number: 234');
       });

       // There is a bug in safari and protractor that doesn't like the minus key
       // it('should update the output when -3 is entered', function() {
       //   numLimitInput.clear();
       //   numLimitInput.sendKeys('-3');
       //   letterLimitInput.clear();
       //   letterLimitInput.sendKeys('-3');
       //   longNumberLimitInput.clear();
       //   longNumberLimitInput.sendKeys('-3');
       //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');
       //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');
       //   expect(limitedLongNumber.getText()).toEqual('Output long number: 342');
       // });

       it('should not exceed the maximum size of input array', function() {
         numLimitInput.clear();
         numLimitInput.sendKeys('100');
         letterLimitInput.clear();
         letterLimitInput.sendKeys('100');
         longNumberLimitInput.clear();
         longNumberLimitInput.sendKeys('100');
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');
         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');
         expect(limitedLongNumber.getText()).toEqual('Output long number: 2345432342');
       });
     </file>
   </example>
*/
function limitToFilter() {
  return function(input, limit, begin) {
    if (Math.abs(Number(limit)) === Infinity) {
      limit = Number(limit);
    } else {
      limit = toInt(limit);
    }
    if (isNumberNaN(limit)) return input;

    if (isNumber(input)) input = input.toString();
    if (!isArrayLike(input)) return input;

    begin = (!begin || isNaN(begin)) ? 0 : toInt(begin);
    begin = (begin < 0) ? Math.max(0, input.length + begin) : begin;

    if (limit >= 0) {
      return sliceFn(input, begin, begin + limit);
    } else {
      if (begin === 0) {
        return sliceFn(input, limit, input.length);
      } else {
        return sliceFn(input, Math.max(0, begin + limit), begin);
      }
    }
  };
}

function sliceFn(input, begin, end) {
  if (isString(input)) return input.slice(begin, end);

  return slice.call(input, begin, end);
}

/**
 * @ngdoc filter
 * @name orderBy
 * @kind function
 *
 * @description
 * Returns an array containing the items from the specified `collection`, ordered by a `comparator`
 * function based on the values computed using the `expression` predicate.
 *
 * For example, `[{id: 'foo'}, {id: 'bar'}] | orderBy:'id'` would result in
 * `[{id: 'bar'}, {id: 'foo'}]`.
 *
 * The `collection` can be an Array or array-like object (e.g. NodeList, jQuery object, TypedArray,
 * String, etc).
 *
 * The `expression` can be a single predicate, or a list of predicates each serving as a tie-breaker
 * for the preceding one. The `expression` is evaluated against each item and the output is used
 * for comparing with other items.
 *
 * You can change the sorting order by setting `reverse` to `true`. By default, items are sorted in
 * ascending order.
 *
 * The comparison is done using the `comparator` function. If none is specified, a default, built-in
 * comparator is used (see below for details - in a nutshell, it compares numbers numerically and
 * strings alphabetically).
 *
 * ### Under the hood
 *
 * Ordering the specified `collection` happens in two phases:
 *
 * 1. All items are passed through the predicate (or predicates), and the returned values are saved
 *    along with their type (`string`, `number` etc). For example, an item `{label: 'foo'}`, passed
 *    through a predicate that extracts the value of the `label` property, would be transformed to:
 *    ```
 *    {
 *      value: 'foo',
 *      type: 'string',
 *      index: ...
 *    }
 *    ```
 * 2. The comparator function is used to sort the items, based on the derived values, types and
 *    indices.
 *
 * If you use a custom comparator, it will be called with pairs of objects of the form
 * `{value: ..., type: '...', index: ...}` and is expected to return `0` if the objects are equal
 * (as far as the comparator is concerned), `-1` if the 1st one should be ranked higher than the
 * second, or `1` otherwise.
 *
 * In order to ensure that the sorting will be deterministic across platforms, if none of the
 * specified predicates can distinguish between two items, `orderBy` will automatically introduce a
 * dummy predicate that returns the item's index as `value`.
 * (If you are using a custom comparator, make sure it can handle this predicate as well.)
 *
 * Finally, in an attempt to simplify things, if a predicate returns an object as the extracted
 * value for an item, `orderBy` will try to convert that object to a primitive value, before passing
 * it to the comparator. The following rules govern the conversion:
 *
 * 1. If the object has a `valueOf()` method that returns a primitive, its return value will be
 *    used instead.<br />
 *    (If the object has a `valueOf()` method that returns another object, then the returned object
 *    will be used in subsequent steps.)
 * 2. If the object has a custom `toString()` method (i.e. not the one inherited from `Object`) that
 *    returns a primitive, its return value will be used instead.<br />
 *    (If the object has a `toString()` method that returns another object, then the returned object
 *    will be used in subsequent steps.)
 * 3. No conversion; the object itself is used.
 *
 * ### The default comparator
 *
 * The default, built-in comparator should be sufficient for most usecases. In short, it compares
 * numbers numerically, strings alphabetically (and case-insensitively), for objects falls back to
 * using their index in the original collection, and sorts values of different types by type.
 *
 * More specifically, it follows these steps to determine the relative order of items:
 *
 * 1. If the compared values are of different types, compare the types themselves alphabetically.
 * 2. If both values are of type `string`, compare them alphabetically in a case- and
 *    locale-insensitive way.
 * 3. If both values are objects, compare their indices instead.
 * 4. Otherwise, return:
 *    -  `0`, if the values are equal (by strict equality comparison, i.e. using `===`).
 *    - `-1`, if the 1st value is "less than" the 2nd value (compared using the `<` operator).
 *    -  `1`, otherwise.
 *
 * **Note:** If you notice numbers not being sorted as expected, make sure they are actually being
 *           saved as numbers and not strings.
 * **Note:** For the purpose of sorting, `null` values are treated as the string `'null'` (i.e.
 *           `type: 'string'`, `value: 'null'`). This may cause unexpected sort order relative to
 *           other values.
 *
 * @param {Array|ArrayLike} collection - The collection (array or array-like object) to sort.
 * @param {(Function|string|Array.<Function|string>)=} expression - A predicate (or list of
 *    predicates) to be used by the comparator to determine the order of elements.
 *
 *    Can be one of:
 *
 *    - `Function`: A getter function. This function will be called with each item as argument and
 *      the return value will be used for sorting.
 *    - `string`: An Angular expression. This expression will be evaluated against each item and the
 *      result will be used for sorting. For example, use `'label'` to sort by a property called
 *      `label` or `'label.substring(0, 3)'` to sort by the first 3 characters of the `label`
 *      property.<br />
 *      (The result of a constant expression is interpreted as a property name to be used for
 *      comparison. For example, use `'"special name"'` (note the extra pair of quotes) to sort by a
 *      property called `special name`.)<br />
 *      An expression can be optionally prefixed with `+` or `-` to control the sorting direction,
 *      ascending or descending. For example, `'+label'` or `'-label'`. If no property is provided,
 *      (e.g. `'+'` or `'-'`), the collection element itself is used in comparisons.
 *    - `Array`: An array of function and/or string predicates. If a predicate cannot determine the
 *      relative order of two items, the next predicate is used as a tie-breaker.
 *
 * **Note:** If the predicate is missing or empty then it defaults to `'+'`.
 *
 * @param {boolean=} reverse - If `true`, reverse the sorting order.
 * @param {(Function)=} comparator - The comparator function used to determine the relative order of
 *    value pairs. If omitted, the built-in comparator will be used.
 *
 * @returns {Array} - The sorted array.
 *
 *
 * @example
 * ### Ordering a table with `ngRepeat`
 *
 * The example below demonstrates a simple {@link ngRepeat ngRepeat}, where the data is sorted by
 * age in descending order (expression is set to `'-age'`). The `comparator` is not set, which means
 * it defaults to the built-in comparator.
 *
   <example name="orderBy-static" module="orderByExample1">
     <file name="index.html">
       <div ng-controller="ExampleController">
         <table class="friends">
           <tr>
             <th>Name</th>
             <th>Phone Number</th>
             <th>Age</th>
           </tr>
           <tr ng-repeat="friend in friends | orderBy:'-age'">
             <td>{{friend.name}}</td>
             <td>{{friend.phone}}</td>
             <td>{{friend.age}}</td>
           </tr>
         </table>
       </div>
     </file>
     <file name="script.js">
       angular.module('orderByExample1', [])
         .controller('ExampleController', ['$scope', function($scope) {
           $scope.friends = [
             {name: 'John',   phone: '555-1212',  age: 10},
             {name: 'Mary',   phone: '555-9876',  age: 19},
             {name: 'Mike',   phone: '555-4321',  age: 21},
             {name: 'Adam',   phone: '555-5678',  age: 35},
             {name: 'Julie',  phone: '555-8765',  age: 29}
           ];
         }]);
     </file>
     <file name="style.css">
       .friends {
         border-collapse: collapse;
       }

       .friends th {
         border-bottom: 1px solid;
       }
       .friends td, .friends th {
         border-left: 1px solid;
         padding: 5px 10px;
       }
       .friends td:first-child, .friends th:first-child {
         border-left: none;
       }
     </file>
     <file name="protractor.js" type="protractor">
       // Element locators
       var names = element.all(by.repeater('friends').column('friend.name'));

       it('should sort friends by age in reverse order', function() {
         expect(names.get(0).getText()).toBe('Adam');
         expect(names.get(1).getText()).toBe('Julie');
         expect(names.get(2).getText()).toBe('Mike');
         expect(names.get(3).getText()).toBe('Mary');
         expect(names.get(4).getText()).toBe('John');
       });
     </file>
   </example>
 * <hr />
 *
 * @example
 * ### Changing parameters dynamically
 *
 * All parameters can be changed dynamically. The next example shows how you can make the columns of
 * a table sortable, by binding the `expression` and `reverse` parameters to scope properties.
 *
   <example name="orderBy-dynamic" module="orderByExample2">
     <file name="index.html">
       <div ng-controller="ExampleController">
         <pre>Sort by = {{propertyName}}; reverse = {{reverse}}</pre>
         <hr/>
         <button ng-click="propertyName = null; reverse = false">Set to unsorted</button>
         <hr/>
         <table class="friends">
           <tr>
             <th>
               <button ng-click="sortBy('name')">Name</button>
               <span class="sortorder" ng-show="propertyName === 'name'" ng-class="{reverse: reverse}"></span>
             </th>
             <th>
               <button ng-click="sortBy('phone')">Phone Number</button>
               <span class="sortorder" ng-show="propertyName === 'phone'" ng-class="{reverse: reverse}"></span>
             </th>
             <th>
               <button ng-click="sortBy('age')">Age</button>
               <span class="sortorder" ng-show="propertyName === 'age'" ng-class="{reverse: reverse}"></span>
             </th>
           </tr>
           <tr ng-repeat="friend in friends | orderBy:propertyName:reverse">
             <td>{{friend.name}}</td>
             <td>{{friend.phone}}</td>
             <td>{{friend.age}}</td>
           </tr>
         </table>
       </div>
     </file>
     <file name="script.js">
       angular.module('orderByExample2', [])
         .controller('ExampleController', ['$scope', function($scope) {
           var friends = [
             {name: 'John',   phone: '555-1212',  age: 10},
             {name: 'Mary',   phone: '555-9876',  age: 19},
             {name: 'Mike',   phone: '555-4321',  age: 21},
             {name: 'Adam',   phone: '555-5678',  age: 35},
             {name: 'Julie',  phone: '555-8765',  age: 29}
           ];

           $scope.propertyName = 'age';
           $scope.reverse = true;
           $scope.friends = friends;

           $scope.sortBy = function(propertyName) {
             $scope.reverse = ($scope.propertyName === propertyName) ? !$scope.reverse : false;
             $scope.propertyName = propertyName;
           };
         }]);
     </file>
     <file name="style.css">
       .friends {
         border-collapse: collapse;
       }

       .friends th {
         border-bottom: 1px solid;
       }
       .friends td, .friends th {
         border-left: 1px solid;
         padding: 5px 10px;
       }
       .friends td:first-child, .friends th:first-child {
         border-left: none;
       }

       .sortorder:after {
         content: '\25b2';   // BLACK UP-POINTING TRIANGLE
       }
       .sortorder.reverse:after {
         content: '\25bc';   // BLACK DOWN-POINTING TRIANGLE
       }
     </file>
     <file name="protractor.js" type="protractor">
       // Element locators
       var unsortButton = element(by.partialButtonText('unsorted'));
       var nameHeader = element(by.partialButtonText('Name'));
       var phoneHeader = element(by.partialButtonText('Phone'));
       var ageHeader = element(by.partialButtonText('Age'));
       var firstName = element(by.repeater('friends').column('friend.name').row(0));
       var lastName = element(by.repeater('friends').column('friend.name').row(4));

       it('should sort friends by some property, when clicking on the column header', function() {
         expect(firstName.getText()).toBe('Adam');
         expect(lastName.getText()).toBe('John');

         phoneHeader.click();
         expect(firstName.getText()).toBe('John');
         expect(lastName.getText()).toBe('Mary');

         nameHeader.click();
         expect(firstName.getText()).toBe('Adam');
         expect(lastName.getText()).toBe('Mike');

         ageHeader.click();
         expect(firstName.getText()).toBe('John');
         expect(lastName.getText()).toBe('Adam');
       });

       it('should sort friends in reverse order, when clicking on the same column', function() {
         expect(firstName.getText()).toBe('Adam');
         expect(lastName.getText()).toBe('John');

         ageHeader.click();
         expect(firstName.getText()).toBe('John');
         expect(lastName.getText()).toBe('Adam');

         ageHeader.click();
         expect(firstName.getText()).toBe('Adam');
         expect(lastName.getText()).toBe('John');
       });

       it('should restore the original order, when clicking "Set to unsorted"', function() {
         expect(firstName.getText()).toBe('Adam');
         expect(lastName.getText()).toBe('John');

         unsortButton.click();
         expect(firstName.getText()).toBe('John');
         expect(lastName.getText()).toBe('Julie');
       });
     </file>
   </example>
 * <hr />
 *
 * @example
 * ### Using `orderBy` inside a controller
 *
 * It is also possible to call the `orderBy` filter manually, by injecting `orderByFilter`, and
 * calling it with the desired parameters. (Alternatively, you could inject the `$filter` factory
 * and retrieve the `orderBy` filter with `$filter('orderBy')`.)
 *
   <example name="orderBy-call-manually" module="orderByExample3">
     <file name="index.html">
       <div ng-controller="ExampleController">
         <pre>Sort by = {{propertyName}}; reverse = {{reverse}}</pre>
         <hr/>
         <button ng-click="sortBy(null)">Set to unsorted</button>
         <hr/>
         <table class="friends">
           <tr>
             <th>
               <button ng-click="sortBy('name')">Name</button>
               <span class="sortorder" ng-show="propertyName === 'name'" ng-class="{reverse: reverse}"></span>
             </th>
             <th>
               <button ng-click="sortBy('phone')">Phone Number</button>
               <span class="sortorder" ng-show="propertyName === 'phone'" ng-class="{reverse: reverse}"></span>
             </th>
             <th>
               <button ng-click="sortBy('age')">Age</button>
               <span class="sortorder" ng-show="propertyName === 'age'" ng-class="{reverse: reverse}"></span>
             </th>
           </tr>
           <tr ng-repeat="friend in friends">
             <td>{{friend.name}}</td>
             <td>{{friend.phone}}</td>
             <td>{{friend.age}}</td>
           </tr>
         </table>
       </div>
     </file>
     <file name="script.js">
       angular.module('orderByExample3', [])
         .controller('ExampleController', ['$scope', 'orderByFilter', function($scope, orderBy) {
           var friends = [
             {name: 'John',   phone: '555-1212',  age: 10},
             {name: 'Mary',   phone: '555-9876',  age: 19},
             {name: 'Mike',   phone: '555-4321',  age: 21},
             {name: 'Adam',   phone: '555-5678',  age: 35},
             {name: 'Julie',  phone: '555-8765',  age: 29}
           ];

           $scope.propertyName = 'age';
           $scope.reverse = true;
           $scope.friends = orderBy(friends, $scope.propertyName, $scope.reverse);

           $scope.sortBy = function(propertyName) {
             $scope.reverse = (propertyName !== null && $scope.propertyName === propertyName)
                 ? !$scope.reverse : false;
             $scope.propertyName = propertyName;
             $scope.friends = orderBy(friends, $scope.propertyName, $scope.reverse);
           };
         }]);
     </file>
     <file name="style.css">
       .friends {
         border-collapse: collapse;
       }

       .friends th {
         border-bottom: 1px solid;
       }
       .friends td, .friends th {
         border-left: 1px solid;
         padding: 5px 10px;
       }
       .friends td:first-child, .friends th:first-child {
         border-left: none;
       }

       .sortorder:after {
         content: '\25b2';   // BLACK UP-POINTING TRIANGLE
       }
       .sortorder.reverse:after {
         content: '\25bc';   // BLACK DOWN-POINTING TRIANGLE
       }
     </file>
     <file name="protractor.js" type="protractor">
       // Element locators
       var unsortButton = element(by.partialButtonText('unsorted'));
       var nameHeader = element(by.partialButtonText('Name'));
       var phoneHeader = element(by.partialButtonText('Phone'));
       var ageHeader = element(by.partialButtonText('Age'));
       var firstName = element(by.repeater('friends').column('friend.name').row(0));
       var lastName = element(by.repeater('friends').column('friend.name').row(4));

       it('should sort friends by some property, when clicking on the column header', function() {
         expect(firstName.getText()).toBe('Adam');
         expect(lastName.getText()).toBe('John');

         phoneHeader.click();
         expect(firstName.getText()).toBe('John');
         expect(lastName.getText()).toBe('Mary');

         nameHeader.click();
         expect(firstName.getText()).toBe('Adam');
         expect(lastName.getText()).toBe('Mike');

         ageHeader.click();
         expect(firstName.getText()).toBe('John');
         expect(lastName.getText()).toBe('Adam');
       });

       it('should sort friends in reverse order, when clicking on the same column', function() {
         expect(firstName.getText()).toBe('Adam');
         expect(lastName.getText()).toBe('John');

         ageHeader.click();
         expect(firstName.getText()).toBe('John');
         expect(lastName.getText()).toBe('Adam');

         ageHeader.click();
         expect(firstName.getText()).toBe('Adam');
         expect(lastName.getText()).toBe('John');
       });

       it('should restore the original order, when clicking "Set to unsorted"', function() {
         expect(firstName.getText()).toBe('Adam');
         expect(lastName.getText()).toBe('John');

         unsortButton.click();
         expect(firstName.getText()).toBe('John');
         expect(lastName.getText()).toBe('Julie');
       });
     </file>
   </example>
 * <hr />
 *
 * @example
 * ### Using a custom comparator
 *
 * If you have very specific requirements about the way items are sorted, you can pass your own
 * comparator function. For example, you might need to compare some strings in a locale-sensitive
 * way. (When specifying a custom comparator, you also need to pass a value for the `reverse`
 * argument - passing `false` retains the default sorting order, i.e. ascending.)
 *
   <example name="orderBy-custom-comparator" module="orderByExample4">
     <file name="index.html">
       <div ng-controller="ExampleController">
         <div class="friends-container custom-comparator">
           <h3>Locale-sensitive Comparator</h3>
           <table class="friends">
             <tr>
               <th>Name</th>
               <th>Favorite Letter</th>
             </tr>
             <tr ng-repeat="friend in friends | orderBy:'favoriteLetter':false:localeSensitiveComparator">
               <td>{{friend.name}}</td>
               <td>{{friend.favoriteLetter}}</td>
             </tr>
           </table>
         </div>
         <div class="friends-container default-comparator">
           <h3>Default Comparator</h3>
           <table class="friends">
             <tr>
               <th>Name</th>
               <th>Favorite Letter</th>
             </tr>
             <tr ng-repeat="friend in friends | orderBy:'favoriteLetter'">
               <td>{{friend.name}}</td>
               <td>{{friend.favoriteLetter}}</td>
             </tr>
           </table>
         </div>
       </div>
     </file>
     <file name="script.js">
       angular.module('orderByExample4', [])
         .controller('ExampleController', ['$scope', function($scope) {
           $scope.friends = [
             {name: 'John',   favoriteLetter: 'Ä'},
             {name: 'Mary',   favoriteLetter: 'Ü'},
             {name: 'Mike',   favoriteLetter: 'Ö'},
             {name: 'Adam',   favoriteLetter: 'H'},
             {name: 'Julie',  favoriteLetter: 'Z'}
           ];

           $scope.localeSensitiveComparator = function(v1, v2) {
             // If we don't get strings, just compare by index
             if (v1.type !== 'string' || v2.type !== 'string') {
               return (v1.index < v2.index) ? -1 : 1;
             }

             // Compare strings alphabetically, taking locale into account
             return v1.value.localeCompare(v2.value);
           };
         }]);
     </file>
     <file name="style.css">
       .friends-container {
         display: inline-block;
         margin: 0 30px;
       }

       .friends {
         border-collapse: collapse;
       }

       .friends th {
         border-bottom: 1px solid;
       }
       .friends td, .friends th {
         border-left: 1px solid;
         padding: 5px 10px;
       }
       .friends td:first-child, .friends th:first-child {
         border-left: none;
       }
     </file>
     <file name="protractor.js" type="protractor">
       // Element locators
       var container = element(by.css('.custom-comparator'));
       var names = container.all(by.repeater('friends').column('friend.name'));

       it('should sort friends by favorite letter (in correct alphabetical order)', function() {
         expect(names.get(0).getText()).toBe('John');
         expect(names.get(1).getText()).toBe('Adam');
         expect(names.get(2).getText()).toBe('Mike');
         expect(names.get(3).getText()).toBe('Mary');
         expect(names.get(4).getText()).toBe('Julie');
       });
     </file>
   </example>
 *
 */
orderByFilter.$inject = ['$parse'];
function orderByFilter($parse) {
  return function(array, sortPredicate, reverseOrder, compareFn) {

    if (array == null) return array;
    if (!isArrayLike(array)) {
      throw minErr('orderBy')('notarray', 'Expected array but received: {0}', array);
    }

    if (!isArray(sortPredicate)) { sortPredicate = [sortPredicate]; }
    if (sortPredicate.length === 0) { sortPredicate = ['+']; }

    var predicates = processPredicates(sortPredicate);

    var descending = reverseOrder ? -1 : 1;

    // Define the `compare()` function. Use a default comparator if none is specified.
    var compare = isFunction(compareFn) ? compareFn : defaultCompare;

    // The next three lines are a version of a Swartzian Transform idiom from Perl
    // (sometimes called the Decorate-Sort-Undecorate idiom)
    // See https://en.wikipedia.org/wiki/Schwartzian_transform
    var compareValues = Array.prototype.map.call(array, getComparisonObject);
    compareValues.sort(doComparison);
    array = compareValues.map(function(item) { return item.value; });

    return array;

    function getComparisonObject(value, index) {
      // NOTE: We are adding an extra `tieBreaker` value based on the element's index.
      // This will be used to keep the sort stable when none of the input predicates can
      // distinguish between two elements.
      return {
        value: value,
        tieBreaker: {value: index, type: 'number', index: index},
        predicateValues: predicates.map(function(predicate) {
          return getPredicateValue(predicate.get(value), index);
        })
      };
    }

    function doComparison(v1, v2) {
      for (var i = 0, ii = predicates.length; i < ii; i++) {
        var result = compare(v1.predicateValues[i], v2.predicateValues[i]);
        if (result) {
          return result * predicates[i].descending * descending;
        }
      }

      return compare(v1.tieBreaker, v2.tieBreaker) * descending;
    }
  };

  function processPredicates(sortPredicates) {
    return sortPredicates.map(function(predicate) {
      var descending = 1, get = identity;

      if (isFunction(predicate)) {
        get = predicate;
      } else if (isString(predicate)) {
        if ((predicate.charAt(0) === '+' || predicate.charAt(0) === '-')) {
          descending = predicate.charAt(0) === '-' ? -1 : 1;
          predicate = predicate.substring(1);
        }
        if (predicate !== '') {
          get = $parse(predicate);
          if (get.constant) {
            var key = get();
            get = function(value) { return value[key]; };
          }
        }
      }
      return {get: get, descending: descending};
    });
  }

  function isPrimitive(value) {
    switch (typeof value) {
      case 'number': /* falls through */
      case 'boolean': /* falls through */
      case 'string':
        return true;
      default:
        return false;
    }
  }

  function objectValue(value) {
    // If `valueOf` is a valid function use that
    if (isFunction(value.valueOf)) {
      value = value.valueOf();
      if (isPrimitive(value)) return value;
    }
    // If `toString` is a valid function and not the one from `Object.prototype` use that
    if (hasCustomToString(value)) {
      value = value.toString();
      if (isPrimitive(value)) return value;
    }

    return value;
  }

  function getPredicateValue(value, index) {
    var type = typeof value;
    if (value === null) {
      type = 'string';
      value = 'null';
    } else if (type === 'object') {
      value = objectValue(value);
    }
    return {value: value, type: type, index: index};
  }

  function defaultCompare(v1, v2) {
    var result = 0;
    var type1 = v1.type;
    var type2 = v2.type;

    if (type1 === type2) {
      var value1 = v1.value;
      var value2 = v2.value;

      if (type1 === 'string') {
        // Compare strings case-insensitively
        value1 = value1.toLowerCase();
        value2 = value2.toLowerCase();
      } else if (type1 === 'object') {
        // For basic objects, use the position of the object
        // in the collection instead of the value
        if (isObject(value1)) value1 = v1.index;
        if (isObject(value2)) value2 = v2.index;
      }

      if (value1 !== value2) {
        result = value1 < value2 ? -1 : 1;
      }
    } else {
      result = type1 < type2 ? -1 : 1;
    }

    return result;
  }
}

function ngDirective(directive) {
  if (isFunction(directive)) {
    directive = {
      link: directive
    };
  }
  directive.restrict = directive.restrict || 'AC';
  return valueFn(directive);
}

/**
 * @ngdoc directive
 * @name a
 * @restrict E
 *
 * @description
 * Modifies the default behavior of the html a tag so that the default action is prevented when
 * the href attribute is empty.
 *
 * For dynamically creating `href` attributes for a tags, see the {@link ng.ngHref `ngHref`} directive.
 */
var htmlAnchorDirective = valueFn({
  restrict: 'E',
  compile: function(element, attr) {
    if (!attr.href && !attr.xlinkHref) {
      return function(scope, element) {
        // If the linked element is not an anchor tag anymore, do nothing
        if (element[0].nodeName.toLowerCase() !== 'a') return;

        // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
        var href = toString.call(element.prop('href')) === '[object SVGAnimatedString]' ?
                   'xlink:href' : 'href';
        element.on('click', function(event) {
          // if we have no href url, then don't navigate anywhere.
          if (!element.attr(href)) {
            event.preventDefault();
          }
        });
      };
    }
  }
});

/**
 * @ngdoc directive
 * @name ngHref
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in an href attribute will
 * make the link go to the wrong URL if the user clicks it before
 * Angular has a chance to replace the `{{hash}}` markup with its
 * value. Until Angular replaces the markup the link will be broken
 * and will most likely return a 404 error. The `ngHref` directive
 * solves this problem.
 *
 * The wrong way to write it:
 * ```html
 * <a href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
 * ```
 *
 * The correct way to write it:
 * ```html
 * <a ng-href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
 * ```
 *
 * @element A
 * @param {template} ngHref any string which can contain `{{}}` markup.
 *
 * @example
 * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes
 * in links and their different behaviors:
    <example name="ng-href">
      <file name="index.html">
        <input ng-model="value" /><br />
        <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />
        <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />
        <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />
        <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />
        <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />
        <a id="link-6" ng-href="{{value}}">link</a> (link, change location)
      </file>
      <file name="protractor.js" type="protractor">
        it('should execute ng-click but not reload when href without value', function() {
          element(by.id('link-1')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('1');
          expect(element(by.id('link-1')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click but not reload when href empty string', function() {
          element(by.id('link-2')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('2');
          expect(element(by.id('link-2')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click and change url when ng-href specified', function() {
          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\/123$/);

          element(by.id('link-3')).click();

          // At this point, we navigate away from an Angular page, so we need
          // to use browser.driver to get the base webdriver.

          browser.wait(function() {
            return browser.driver.getCurrentUrl().then(function(url) {
              return url.match(/\/123$/);
            });
          }, 5000, 'page should navigate to /123');
        });

        it('should execute ng-click but not reload when href empty string and name specified', function() {
          element(by.id('link-4')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('4');
          expect(element(by.id('link-4')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click but not reload when no href but name specified', function() {
          element(by.id('link-5')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('5');
          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);
        });

        it('should only change url when only ng-href', function() {
          element(by.model('value')).clear();
          element(by.model('value')).sendKeys('6');
          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\/6$/);

          element(by.id('link-6')).click();

          // At this point, we navigate away from an Angular page, so we need
          // to use browser.driver to get the base webdriver.
          browser.wait(function() {
            return browser.driver.getCurrentUrl().then(function(url) {
              return url.match(/\/6$/);
            });
          }, 5000, 'page should navigate to /6');
        });
      </file>
    </example>
 */

/**
 * @ngdoc directive
 * @name ngSrc
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in a `src` attribute doesn't
 * work right: The browser will fetch from the URL with the literal
 * text `{{hash}}` until Angular replaces the expression inside
 * `{{hash}}`. The `ngSrc` directive solves this problem.
 *
 * The buggy way to write it:
 * ```html
 * <img src="http://www.gravatar.com/avatar/{{hash}}" alt="Description"/>
 * ```
 *
 * The correct way to write it:
 * ```html
 * <img ng-src="http://www.gravatar.com/avatar/{{hash}}" alt="Description" />
 * ```
 *
 * @element IMG
 * @param {template} ngSrc any string which can contain `{{}}` markup.
 */

/**
 * @ngdoc directive
 * @name ngSrcset
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't
 * work right: The browser will fetch from the URL with the literal
 * text `{{hash}}` until Angular replaces the expression inside
 * `{{hash}}`. The `ngSrcset` directive solves this problem.
 *
 * The buggy way to write it:
 * ```html
 * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description"/>
 * ```
 *
 * The correct way to write it:
 * ```html
 * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description" />
 * ```
 *
 * @element IMG
 * @param {template} ngSrcset any string which can contain `{{}}` markup.
 */

/**
 * @ngdoc directive
 * @name ngDisabled
 * @restrict A
 * @priority 100
 *
 * @description
 *
 * This directive sets the `disabled` attribute on the element (typically a form control,
 * e.g. `input`, `button`, `select` etc.) if the
 * {@link guide/expression expression} inside `ngDisabled` evaluates to truthy.
 *
 * A special directive is necessary because we cannot use interpolation inside the `disabled`
 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
 *
 * @example
    <example name="ng-disabled">
      <file name="index.html">
        <label>Click me to toggle: <input type="checkbox" ng-model="checked"></label><br/>
        <button ng-model="button" ng-disabled="checked">Button</button>
      </file>
      <file name="protractor.js" type="protractor">
        it('should toggle button', function() {
          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();
          element(by.model('checked')).click();
          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element INPUT
 * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,
 *     then the `disabled` attribute will be set on the element
 */


/**
 * @ngdoc directive
 * @name ngChecked
 * @restrict A
 * @priority 100
 *
 * @description
 * Sets the `checked` attribute on the element, if the expression inside `ngChecked` is truthy.
 *
 * Note that this directive should not be used together with {@link ngModel `ngModel`},
 * as this can lead to unexpected behavior.
 *
 * A special directive is necessary because we cannot use interpolation inside the `checked`
 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
 *
 * @example
    <example name="ng-checked">
      <file name="index.html">
        <label>Check me to check both: <input type="checkbox" ng-model="master"></label><br/>
        <input id="checkSlave" type="checkbox" ng-checked="master" aria-label="Slave input">
      </file>
      <file name="protractor.js" type="protractor">
        it('should check both checkBoxes', function() {
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();
          element(by.model('master')).click();
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element INPUT
 * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,
 *     then the `checked` attribute will be set on the element
 */


/**
 * @ngdoc directive
 * @name ngReadonly
 * @restrict A
 * @priority 100
 *
 * @description
 *
 * Sets the `readonly` attribute on the element, if the expression inside `ngReadonly` is truthy.
 * Note that `readonly` applies only to `input` elements with specific types. [See the input docs on
 * MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) for more information.
 *
 * A special directive is necessary because we cannot use interpolation inside the `readonly`
 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
 *
 * @example
    <example name="ng-readonly">
      <file name="index.html">
        <label>Check me to make text readonly: <input type="checkbox" ng-model="checked"></label><br/>
        <input type="text" ng-readonly="checked" value="I'm Angular" aria-label="Readonly field" />
      </file>
      <file name="protractor.js" type="protractor">
        it('should toggle readonly attr', function() {
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeFalsy();
          element(by.model('checked')).click();
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element INPUT
 * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,
 *     then special attribute "readonly" will be set on the element
 */


/**
 * @ngdoc directive
 * @name ngSelected
 * @restrict A
 * @priority 100
 *
 * @description
 *
 * Sets the `selected` attribute on the element, if the expression inside `ngSelected` is truthy.
 *
 * A special directive is necessary because we cannot use interpolation inside the `selected`
 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
 *
 * <div class="alert alert-warning">
 *   **Note:** `ngSelected` does not interact with the `select` and `ngModel` directives, it only
 *   sets the `selected` attribute on the element. If you are using `ngModel` on the select, you
 *   should not use `ngSelected` on the options, as `ngModel` will set the select value and
 *   selected options.
 * </div>
 *
 * @example
    <example name="ng-selected">
      <file name="index.html">
        <label>Check me to select: <input type="checkbox" ng-model="selected"></label><br/>
        <select aria-label="ngSelected demo">
          <option>Hello!</option>
          <option id="greet" ng-selected="selected">Greetings!</option>
        </select>
      </file>
      <file name="protractor.js" type="protractor">
        it('should select Greetings!', function() {
          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();
          element(by.model('selected')).click();
          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element OPTION
 * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,
 *     then special attribute "selected" will be set on the element
 */

/**
 * @ngdoc directive
 * @name ngOpen
 * @restrict A
 * @priority 100
 *
 * @description
 *
 * Sets the `open` attribute on the element, if the expression inside `ngOpen` is truthy.
 *
 * A special directive is necessary because we cannot use interpolation inside the `open`
 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
 *
 * ## A note about browser compatibility
 *
 * Edge, Firefox, and Internet Explorer do not support the `details` element, it is
 * recommended to use {@link ng.ngShow} and {@link ng.ngHide} instead.
 *
 * @example
     <example name="ng-open">
       <file name="index.html">
         <label>Check me check multiple: <input type="checkbox" ng-model="open"></label><br/>
         <details id="details" ng-open="open">
            <summary>Show/Hide me</summary>
         </details>
       </file>
       <file name="protractor.js" type="protractor">
         it('should toggle open', function() {
           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();
           element(by.model('open')).click();
           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();
         });
       </file>
     </example>
 *
 * @element DETAILS
 * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,
 *     then special attribute "open" will be set on the element
 */

var ngAttributeAliasDirectives = {};

// boolean attrs are evaluated
forEach(BOOLEAN_ATTR, function(propName, attrName) {
  // binding to multiple is not supported
  if (propName === 'multiple') return;

  function defaultLinkFn(scope, element, attr) {
    scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {
      attr.$set(attrName, !!value);
    });
  }

  var normalized = directiveNormalize('ng-' + attrName);
  var linkFn = defaultLinkFn;

  if (propName === 'checked') {
    linkFn = function(scope, element, attr) {
      // ensuring ngChecked doesn't interfere with ngModel when both are set on the same input
      if (attr.ngModel !== attr[normalized]) {
        defaultLinkFn(scope, element, attr);
      }
    };
  }

  ngAttributeAliasDirectives[normalized] = function() {
    return {
      restrict: 'A',
      priority: 100,
      link: linkFn
    };
  };
});

// aliased input attrs are evaluated
forEach(ALIASED_ATTR, function(htmlAttr, ngAttr) {
  ngAttributeAliasDirectives[ngAttr] = function() {
    return {
      priority: 100,
      link: function(scope, element, attr) {
        //special case ngPattern when a literal regular expression value
        //is used as the expression (this way we don't have to watch anything).
        if (ngAttr === 'ngPattern' && attr.ngPattern.charAt(0) === '/') {
          var match = attr.ngPattern.match(REGEX_STRING_REGEXP);
          if (match) {
            attr.$set('ngPattern', new RegExp(match[1], match[2]));
            return;
          }
        }

        scope.$watch(attr[ngAttr], function ngAttrAliasWatchAction(value) {
          attr.$set(ngAttr, value);
        });
      }
    };
  };
});

// ng-src, ng-srcset, ng-href are interpolated
forEach(['src', 'srcset', 'href'], function(attrName) {
  var normalized = directiveNormalize('ng-' + attrName);
  ngAttributeAliasDirectives[normalized] = function() {
    return {
      priority: 99, // it needs to run after the attributes are interpolated
      link: function(scope, element, attr) {
        var propName = attrName,
            name = attrName;

        if (attrName === 'href' &&
            toString.call(element.prop('href')) === '[object SVGAnimatedString]') {
          name = 'xlinkHref';
          attr.$attr[name] = 'xlink:href';
          propName = null;
        }

        attr.$observe(normalized, function(value) {
          if (!value) {
            if (attrName === 'href') {
              attr.$set(name, null);
            }
            return;
          }

          attr.$set(name, value);

          // Support: IE 9-11 only
          // On IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist
          // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need
          // to set the property as well to achieve the desired effect.
          // We use attr[attrName] value since $set can sanitize the url.
          if (msie && propName) element.prop(propName, attr[name]);
        });
      }
    };
  };
});

/* global -nullFormCtrl, -PENDING_CLASS, -SUBMITTED_CLASS
 */
var nullFormCtrl = {
  $addControl: noop,
  $$renameControl: nullFormRenameControl,
  $removeControl: noop,
  $setValidity: noop,
  $setDirty: noop,
  $setPristine: noop,
  $setSubmitted: noop
},
PENDING_CLASS = 'ng-pending',
SUBMITTED_CLASS = 'ng-submitted';

function nullFormRenameControl(control, name) {
  control.$name = name;
}

/**
 * @ngdoc type
 * @name form.FormController
 *
 * @property {boolean} $pristine True if user has not interacted with the form yet.
 * @property {boolean} $dirty True if user has already interacted with the form.
 * @property {boolean} $valid True if all of the containing forms and controls are valid.
 * @property {boolean} $invalid True if at least one containing control or form is invalid.
 * @property {boolean} $pending True if at least one containing control or form is pending.
 * @property {boolean} $submitted True if user has submitted the form even if its invalid.
 *
 * @property {Object} $error Is an object hash, containing references to controls or
 *  forms with failing validators, where:
 *
 *  - keys are validation tokens (error names),
 *  - values are arrays of controls or forms that have a failing validator for given error name.
 *
 *  Built-in validation tokens:
 *
 *  - `email`
 *  - `max`
 *  - `maxlength`
 *  - `min`
 *  - `minlength`
 *  - `number`
 *  - `pattern`
 *  - `required`
 *  - `url`
 *  - `date`
 *  - `datetimelocal`
 *  - `time`
 *  - `week`
 *  - `month`
 *
 * @description
 * `FormController` keeps track of all its controls and nested forms as well as the state of them,
 * such as being valid/invalid or dirty/pristine.
 *
 * Each {@link ng.directive:form form} directive creates an instance
 * of `FormController`.
 *
 */
//asks for $scope to fool the BC controller module
FormController.$inject = ['$element', '$attrs', '$scope', '$animate', '$interpolate'];
function FormController($element, $attrs, $scope, $animate, $interpolate) {
  this.$$controls = [];

  // init state
  this.$error = {};
  this.$$success = {};
  this.$pending = undefined;
  this.$name = $interpolate($attrs.name || $attrs.ngForm || '')($scope);
  this.$dirty = false;
  this.$pristine = true;
  this.$valid = true;
  this.$invalid = false;
  this.$submitted = false;
  this.$$parentForm = nullFormCtrl;

  this.$$element = $element;
  this.$$animate = $animate;

  setupValidity(this);
}

FormController.prototype = {
  /**
   * @ngdoc method
   * @name form.FormController#$rollbackViewValue
   *
   * @description
   * Rollback all form controls pending updates to the `$modelValue`.
   *
   * Updates may be pending by a debounced event or because the input is waiting for a some future
   * event defined in `ng-model-options`. This method is typically needed by the reset button of
   * a form that uses `ng-model-options` to pend updates.
   */
  $rollbackViewValue: function() {
    forEach(this.$$controls, function(control) {
      control.$rollbackViewValue();
    });
  },

  /**
   * @ngdoc method
   * @name form.FormController#$commitViewValue
   *
   * @description
   * Commit all form controls pending updates to the `$modelValue`.
   *
   * Updates may be pending by a debounced event or because the input is waiting for a some future
   * event defined in `ng-model-options`. This method is rarely needed as `NgModelController`
   * usually handles calling this in response to input events.
   */
  $commitViewValue: function() {
    forEach(this.$$controls, function(control) {
      control.$commitViewValue();
    });
  },

  /**
   * @ngdoc method
   * @name form.FormController#$addControl
   * @param {object} control control object, either a {@link form.FormController} or an
   * {@link ngModel.NgModelController}
   *
   * @description
   * Register a control with the form. Input elements using ngModelController do this automatically
   * when they are linked.
   *
   * Note that the current state of the control will not be reflected on the new parent form. This
   * is not an issue with normal use, as freshly compiled and linked controls are in a `$pristine`
   * state.
   *
   * However, if the method is used programmatically, for example by adding dynamically created controls,
   * or controls that have been previously removed without destroying their corresponding DOM element,
   * it's the developers responsibility to make sure the current state propagates to the parent form.
   *
   * For example, if an input control is added that is already `$dirty` and has `$error` properties,
   * calling `$setDirty()` and `$validate()` afterwards will propagate the state to the parent form.
   */
  $addControl: function(control) {
    // Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored
    // and not added to the scope.  Now we throw an error.
    assertNotHasOwnProperty(control.$name, 'input');
    this.$$controls.push(control);

    if (control.$name) {
      this[control.$name] = control;
    }

    control.$$parentForm = this;
  },

  // Private API: rename a form control
  $$renameControl: function(control, newName) {
    var oldName = control.$name;

    if (this[oldName] === control) {
      delete this[oldName];
    }
    this[newName] = control;
    control.$name = newName;
  },

  /**
   * @ngdoc method
   * @name form.FormController#$removeControl
   * @param {object} control control object, either a {@link form.FormController} or an
   * {@link ngModel.NgModelController}
   *
   * @description
   * Deregister a control from the form.
   *
   * Input elements using ngModelController do this automatically when they are destroyed.
   *
   * Note that only the removed control's validation state (`$errors`etc.) will be removed from the
   * form. `$dirty`, `$submitted` states will not be changed, because the expected behavior can be
   * different from case to case. For example, removing the only `$dirty` control from a form may or
   * may not mean that the form is still `$dirty`.
   */
  $removeControl: function(control) {
    if (control.$name && this[control.$name] === control) {
      delete this[control.$name];
    }
    forEach(this.$pending, function(value, name) {
      // eslint-disable-next-line no-invalid-this
      this.$setValidity(name, null, control);
    }, this);
    forEach(this.$error, function(value, name) {
      // eslint-disable-next-line no-invalid-this
      this.$setValidity(name, null, control);
    }, this);
    forEach(this.$$success, function(value, name) {
      // eslint-disable-next-line no-invalid-this
      this.$setValidity(name, null, control);
    }, this);

    arrayRemove(this.$$controls, control);
    control.$$parentForm = nullFormCtrl;
  },

  /**
   * @ngdoc method
   * @name form.FormController#$setDirty
   *
   * @description
   * Sets the form to a dirty state.
   *
   * This method can be called to add the 'ng-dirty' class and set the form to a dirty
   * state (ng-dirty class). This method will also propagate to parent forms.
   */
  $setDirty: function() {
    this.$$animate.removeClass(this.$$element, PRISTINE_CLASS);
    this.$$animate.addClass(this.$$element, DIRTY_CLASS);
    this.$dirty = true;
    this.$pristine = false;
    this.$$parentForm.$setDirty();
  },

  /**
   * @ngdoc method
   * @name form.FormController#$setPristine
   *
   * @description
   * Sets the form to its pristine state.
   *
   * This method sets the form's `$pristine` state to true, the `$dirty` state to false, removes
   * the `ng-dirty` class and adds the `ng-pristine` class. Additionally, it sets the `$submitted`
   * state to false.
   *
   * This method will also propagate to all the controls contained in this form.
   *
   * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after
   * saving or resetting it.
   */
  $setPristine: function() {
    this.$$animate.setClass(this.$$element, PRISTINE_CLASS, DIRTY_CLASS + ' ' + SUBMITTED_CLASS);
    this.$dirty = false;
    this.$pristine = true;
    this.$submitted = false;
    forEach(this.$$controls, function(control) {
      control.$setPristine();
    });
  },

  /**
   * @ngdoc method
   * @name form.FormController#$setUntouched
   *
   * @description
   * Sets the form to its untouched state.
   *
   * This method can be called to remove the 'ng-touched' class and set the form controls to their
   * untouched state (ng-untouched class).
   *
   * Setting a form controls back to their untouched state is often useful when setting the form
   * back to its pristine state.
   */
  $setUntouched: function() {
    forEach(this.$$controls, function(control) {
      control.$setUntouched();
    });
  },

  /**
   * @ngdoc method
   * @name form.FormController#$setSubmitted
   *
   * @description
   * Sets the form to its submitted state.
   */
  $setSubmitted: function() {
    this.$$animate.addClass(this.$$element, SUBMITTED_CLASS);
    this.$submitted = true;
    this.$$parentForm.$setSubmitted();
  }
};

/**
 * @ngdoc method
 * @name form.FormController#$setValidity
 *
 * @description
 * Sets the validity of a form control.
 *
 * This method will also propagate to parent forms.
 */
addSetValidityMethod({
  clazz: FormController,
  set: function(object, property, controller) {
    var list = object[property];
    if (!list) {
      object[property] = [controller];
    } else {
      var index = list.indexOf(controller);
      if (index === -1) {
        list.push(controller);
      }
    }
  },
  unset: function(object, property, controller) {
    var list = object[property];
    if (!list) {
      return;
    }
    arrayRemove(list, controller);
    if (list.length === 0) {
      delete object[property];
    }
  }
});

/**
 * @ngdoc directive
 * @name ngForm
 * @restrict EAC
 *
 * @description
 * Nestable alias of {@link ng.directive:form `form`} directive. HTML
 * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a
 * sub-group of controls needs to be determined.
 *
 * Note: the purpose of `ngForm` is to group controls,
 * but not to be a replacement for the `<form>` tag with all of its capabilities
 * (e.g. posting to the server, ...).
 *
 * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into
 *                       related scope, under this name.
 *
 */

 /**
 * @ngdoc directive
 * @name form
 * @restrict E
 *
 * @description
 * Directive that instantiates
 * {@link form.FormController FormController}.
 *
 * If the `name` attribute is specified, the form controller is published onto the current scope under
 * this name.
 *
 * # Alias: {@link ng.directive:ngForm `ngForm`}
 *
 * In Angular, forms can be nested. This means that the outer form is valid when all of the child
 * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so
 * Angular provides the {@link ng.directive:ngForm `ngForm`} directive, which behaves identically to
 * `form` but can be nested. Nested forms can be useful, for example, if the validity of a sub-group
 * of controls needs to be determined.
 *
 * # CSS classes
 *  - `ng-valid` is set if the form is valid.
 *  - `ng-invalid` is set if the form is invalid.
 *  - `ng-pending` is set if the form is pending.
 *  - `ng-pristine` is set if the form is pristine.
 *  - `ng-dirty` is set if the form is dirty.
 *  - `ng-submitted` is set if the form was submitted.
 *
 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
 *
 *
 * # Submitting a form and preventing the default action
 *
 * Since the role of forms in client-side Angular applications is different than in classical
 * roundtrip apps, it is desirable for the browser not to translate the form submission into a full
 * page reload that sends the data to the server. Instead some javascript logic should be triggered
 * to handle the form submission in an application-specific way.
 *
 * For this reason, Angular prevents the default action (form submission to the server) unless the
 * `<form>` element has an `action` attribute specified.
 *
 * You can use one of the following two ways to specify what javascript method should be called when
 * a form is submitted:
 *
 * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element
 * - {@link ng.directive:ngClick ngClick} directive on the first
  *  button or input field of type submit (input[type=submit])
 *
 * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}
 * or {@link ng.directive:ngClick ngClick} directives.
 * This is because of the following form submission rules in the HTML specification:
 *
 * - If a form has only one input field then hitting enter in this field triggers form submit
 * (`ngSubmit`)
 * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter
 * doesn't trigger submit
 * - if a form has one or more input fields and one or more buttons or input[type=submit] then
 * hitting enter in any of the input fields will trigger the click handler on the *first* button or
 * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)
 *
 * Any pending `ngModelOptions` changes will take place immediately when an enclosing form is
 * submitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
 * to have access to the updated model.
 *
 * ## Animation Hooks
 *
 * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.
 * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any
 * other validations that are performed within the form. Animations in ngForm are similar to how
 * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well
 * as JS animations.
 *
 * The following example shows a simple way to utilize CSS transitions to style a form element
 * that has been rendered as invalid after it has been validated:
 *
 * <pre>
 * //be sure to include ngAnimate as a module to hook into more
 * //advanced animations
 * .my-form {
 *   transition:0.5s linear all;
 *   background: white;
 * }
 * .my-form.ng-invalid {
 *   background: red;
 *   color:white;
 * }
 * </pre>
 *
 * @example
    <example name="ng-form" deps="angular-animate.js" animations="true" fixBase="true" module="formExample">
      <file name="index.html">
       <script>
         angular.module('formExample', [])
           .controller('FormController', ['$scope', function($scope) {
             $scope.userType = 'guest';
           }]);
       </script>
       <style>
        .my-form {
          transition:all linear 0.5s;
          background: transparent;
        }
        .my-form.ng-invalid {
          background: red;
        }
       </style>
       <form name="myForm" ng-controller="FormController" class="my-form">
         userType: <input name="input" ng-model="userType" required>
         <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>
         <code>userType = {{userType}}</code><br>
         <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br>
         <code>myForm.input.$error = {{myForm.input.$error}}</code><br>
         <code>myForm.$valid = {{myForm.$valid}}</code><br>
         <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br>
        </form>
      </file>
      <file name="protractor.js" type="protractor">
        it('should initialize to model', function() {
          var userType = element(by.binding('userType'));
          var valid = element(by.binding('myForm.input.$valid'));

          expect(userType.getText()).toContain('guest');
          expect(valid.getText()).toContain('true');
        });

        it('should be invalid if empty', function() {
          var userType = element(by.binding('userType'));
          var valid = element(by.binding('myForm.input.$valid'));
          var userInput = element(by.model('userType'));

          userInput.clear();
          userInput.sendKeys('');

          expect(userType.getText()).toEqual('userType =');
          expect(valid.getText()).toContain('false');
        });
      </file>
    </example>
 *
 * @param {string=} name Name of the form. If specified, the form controller will be published into
 *                       related scope, under this name.
 */
var formDirectiveFactory = function(isNgForm) {
  return ['$timeout', '$parse', function($timeout, $parse) {
    var formDirective = {
      name: 'form',
      restrict: isNgForm ? 'EAC' : 'E',
      require: ['form', '^^?form'], //first is the form's own ctrl, second is an optional parent form
      controller: FormController,
      compile: function ngFormCompile(formElement, attr) {
        // Setup initial state of the control
        formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS);

        var nameAttr = attr.name ? 'name' : (isNgForm && attr.ngForm ? 'ngForm' : false);

        return {
          pre: function ngFormPreLink(scope, formElement, attr, ctrls) {
            var controller = ctrls[0];

            // if `action` attr is not present on the form, prevent the default action (submission)
            if (!('action' in attr)) {
              // we can't use jq events because if a form is destroyed during submission the default
              // action is not prevented. see #1238
              //
              // IE 9 is not affected because it doesn't fire a submit event and try to do a full
              // page reload if the form was destroyed by submission of the form via a click handler
              // on a button in the form. Looks like an IE9 specific bug.
              var handleFormSubmission = function(event) {
                scope.$apply(function() {
                  controller.$commitViewValue();
                  controller.$setSubmitted();
                });

                event.preventDefault();
              };

              formElement[0].addEventListener('submit', handleFormSubmission);

              // unregister the preventDefault listener so that we don't not leak memory but in a
              // way that will achieve the prevention of the default action.
              formElement.on('$destroy', function() {
                $timeout(function() {
                  formElement[0].removeEventListener('submit', handleFormSubmission);
                }, 0, false);
              });
            }

            var parentFormCtrl = ctrls[1] || controller.$$parentForm;
            parentFormCtrl.$addControl(controller);

            var setter = nameAttr ? getSetter(controller.$name) : noop;

            if (nameAttr) {
              setter(scope, controller);
              attr.$observe(nameAttr, function(newValue) {
                if (controller.$name === newValue) return;
                setter(scope, undefined);
                controller.$$parentForm.$$renameControl(controller, newValue);
                setter = getSetter(controller.$name);
                setter(scope, controller);
              });
            }
            formElement.on('$destroy', function() {
              controller.$$parentForm.$removeControl(controller);
              setter(scope, undefined);
              extend(controller, nullFormCtrl); //stop propagating child destruction handlers upwards
            });
          }
        };
      }
    };

    return formDirective;

    function getSetter(expression) {
      if (expression === '') {
        //create an assignable expression, so forms with an empty name can be renamed later
        return $parse('this[""]').assign;
      }
      return $parse(expression).assign || noop;
    }
  }];
};

var formDirective = formDirectiveFactory();
var ngFormDirective = formDirectiveFactory(true);



// helper methods
function setupValidity(instance) {
  instance.$$classCache = {};
  instance.$$classCache[INVALID_CLASS] = !(instance.$$classCache[VALID_CLASS] = instance.$$element.hasClass(VALID_CLASS));
}
function addSetValidityMethod(context) {
  var clazz = context.clazz,
      set = context.set,
      unset = context.unset;

  clazz.prototype.$setValidity = function(validationErrorKey, state, controller) {
    if (isUndefined(state)) {
      createAndSet(this, '$pending', validationErrorKey, controller);
    } else {
      unsetAndCleanup(this, '$pending', validationErrorKey, controller);
    }
    if (!isBoolean(state)) {
      unset(this.$error, validationErrorKey, controller);
      unset(this.$$success, validationErrorKey, controller);
    } else {
      if (state) {
        unset(this.$error, validationErrorKey, controller);
        set(this.$$success, validationErrorKey, controller);
      } else {
        set(this.$error, validationErrorKey, controller);
        unset(this.$$success, validationErrorKey, controller);
      }
    }
    if (this.$pending) {
      cachedToggleClass(this, PENDING_CLASS, true);
      this.$valid = this.$invalid = undefined;
      toggleValidationCss(this, '', null);
    } else {
      cachedToggleClass(this, PENDING_CLASS, false);
      this.$valid = isObjectEmpty(this.$error);
      this.$invalid = !this.$valid;
      toggleValidationCss(this, '', this.$valid);
    }

    // re-read the state as the set/unset methods could have
    // combined state in this.$error[validationError] (used for forms),
    // where setting/unsetting only increments/decrements the value,
    // and does not replace it.
    var combinedState;
    if (this.$pending && this.$pending[validationErrorKey]) {
      combinedState = undefined;
    } else if (this.$error[validationErrorKey]) {
      combinedState = false;
    } else if (this.$$success[validationErrorKey]) {
      combinedState = true;
    } else {
      combinedState = null;
    }

    toggleValidationCss(this, validationErrorKey, combinedState);
    this.$$parentForm.$setValidity(validationErrorKey, combinedState, this);
  };

  function createAndSet(ctrl, name, value, controller) {
    if (!ctrl[name]) {
      ctrl[name] = {};
    }
    set(ctrl[name], value, controller);
  }

  function unsetAndCleanup(ctrl, name, value, controller) {
    if (ctrl[name]) {
      unset(ctrl[name], value, controller);
    }
    if (isObjectEmpty(ctrl[name])) {
      ctrl[name] = undefined;
    }
  }

  function cachedToggleClass(ctrl, className, switchValue) {
    if (switchValue && !ctrl.$$classCache[className]) {
      ctrl.$$animate.addClass(ctrl.$$element, className);
      ctrl.$$classCache[className] = true;
    } else if (!switchValue && ctrl.$$classCache[className]) {
      ctrl.$$animate.removeClass(ctrl.$$element, className);
      ctrl.$$classCache[className] = false;
    }
  }

  function toggleValidationCss(ctrl, validationErrorKey, isValid) {
    validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';

    cachedToggleClass(ctrl, VALID_CLASS + validationErrorKey, isValid === true);
    cachedToggleClass(ctrl, INVALID_CLASS + validationErrorKey, isValid === false);
  }
}

function isObjectEmpty(obj) {
  if (obj) {
    for (var prop in obj) {
      if (obj.hasOwnProperty(prop)) {
        return false;
      }
    }
  }
  return true;
}

/* global
  VALID_CLASS: false,
  INVALID_CLASS: false,
  PRISTINE_CLASS: false,
  DIRTY_CLASS: false,
  ngModelMinErr: false
*/

// Regex code was initially obtained from SO prior to modification: https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime#answer-3143231
var ISO_DATE_REGEXP = /^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/;
// See valid URLs in RFC3987 (http://tools.ietf.org/html/rfc3987)
// Note: We are being more lenient, because browsers are too.
//   1. Scheme
//   2. Slashes
//   3. Username
//   4. Password
//   5. Hostname
//   6. Port
//   7. Path
//   8. Query
//   9. Fragment
//                 1111111111111111 222   333333    44444        55555555555555555555555     666     77777777     8888888     999
var URL_REGEXP = /^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:/?#]+|\[[a-f\d:]+])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i;
// eslint-disable-next-line max-len
var EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;
var NUMBER_REGEXP = /^\s*(-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/;
var DATE_REGEXP = /^(\d{4,})-(\d{2})-(\d{2})$/;
var DATETIMELOCAL_REGEXP = /^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;
var WEEK_REGEXP = /^(\d{4,})-W(\d\d)$/;
var MONTH_REGEXP = /^(\d{4,})-(\d\d)$/;
var TIME_REGEXP = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;

var PARTIAL_VALIDATION_EVENTS = 'keydown wheel mousedown';
var PARTIAL_VALIDATION_TYPES = createMap();
forEach('date,datetime-local,month,time,week'.split(','), function(type) {
  PARTIAL_VALIDATION_TYPES[type] = true;
});

var inputType = {

  /**
   * @ngdoc input
   * @name input[text]
   *
   * @description
   * Standard HTML text input with angular data binding, inherited by most of the `input` elements.
   *
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Adds `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
   *    any length.
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
   *    that contains the regular expression body that will be converted to a regular expression
   *    as in the ngPattern directive.
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
   *    If the expression evaluates to a RegExp object, then this is used directly.
   *    If the expression evaluates to a string, then it will be converted to a RegExp
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
   *    `new RegExp('^abc$')`.<br />
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
   *    start at the index of the last search's match, thus not taking the whole input value into
   *    account.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
   *    This parameter is ignored for input[type=password] controls, which will never trim the
   *    input.
   *
   * @example
      <example name="text-input-directive" module="textInputExample">
        <file name="index.html">
         <script>
           angular.module('textInputExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.example = {
                 text: 'guest',
                 word: /^\s*\w*\s*$/
               };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           <label>Single word:
             <input type="text" name="input" ng-model="example.text"
                    ng-pattern="example.word" required ng-trim="false">
           </label>
           <div role="alert">
             <span class="error" ng-show="myForm.input.$error.required">
               Required!</span>
             <span class="error" ng-show="myForm.input.$error.pattern">
               Single word only!</span>
           </div>
           <code>text = {{example.text}}</code><br/>
           <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br/>
           <code>myForm.input.$error = {{myForm.input.$error}}</code><br/>
           <code>myForm.$valid = {{myForm.$valid}}</code><br/>
           <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          var text = element(by.binding('example.text'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('example.text'));

          it('should initialize to model', function() {
            expect(text.getText()).toContain('guest');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');

            expect(text.getText()).toEqual('text =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if multi word', function() {
            input.clear();
            input.sendKeys('hello world');

            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */
  'text': textInputType,

    /**
     * @ngdoc input
     * @name input[date]
     *
     * @description
     * Input with date validation and transformation. In browsers that do not yet support
     * the HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601
     * date format (yyyy-MM-dd), for example: `2009-01-06`. Since many
     * modern browsers do not yet support this input type, it is important to provide cues to users on the
     * expected input format via a placeholder or label.
     *
     * The model must always be a Date object, otherwise Angular will throw an error.
     * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
     *
     * The timezone to be used to read/write the `Date` instance in the model can be defined using
     * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
     *
     * @param {string} ngModel Assignable angular expression to data-bind to.
     * @param {string=} name Property name of the form under which the control is published.
     * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
     *   valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute
     *   (e.g. `min="{{minDate | date:'yyyy-MM-dd'}}"`). Note that `min` will also add native HTML5
     *   constraint validation.
     * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
     *   a valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute
     *   (e.g. `max="{{maxDate | date:'yyyy-MM-dd'}}"`). Note that `max` will also add native HTML5
     *   constraint validation.
     * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO date string
     *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
     * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO date string
     *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
     * @param {string=} required Sets `required` validation error key if the value is not entered.
     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
     *    `required` when you want to data-bind to the `required` attribute.
     * @param {string=} ngChange Angular expression to be executed when input changes due to user
     *    interaction with the input element.
     *
     * @example
     <example name="date-input-directive" module="dateInputExample">
     <file name="index.html">
       <script>
          angular.module('dateInputExample', [])
            .controller('DateController', ['$scope', function($scope) {
              $scope.example = {
                value: new Date(2013, 9, 22)
              };
            }]);
       </script>
       <form name="myForm" ng-controller="DateController as dateCtrl">
          <label for="exampleInput">Pick a date in 2013:</label>
          <input type="date" id="exampleInput" name="input" ng-model="example.value"
              placeholder="yyyy-MM-dd" min="2013-01-01" max="2013-12-31" required />
          <div role="alert">
            <span class="error" ng-show="myForm.input.$error.required">
                Required!</span>
            <span class="error" ng-show="myForm.input.$error.date">
                Not a valid date!</span>
           </div>
           <tt>value = {{example.value | date: "yyyy-MM-dd"}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
       </form>
     </file>
     <file name="protractor.js" type="protractor">
        var value = element(by.binding('example.value | date: "yyyy-MM-dd"'));
        var valid = element(by.binding('myForm.input.$valid'));

        // currently protractor/webdriver does not support
        // sending keys to all known HTML5 input controls
        // for various browsers (see https://github.com/angular/protractor/issues/562).
        function setInput(val) {
          // set the value of the element and force validation.
          var scr = "var ipt = document.getElementById('exampleInput'); " +
          "ipt.value = '" + val + "';" +
          "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
          browser.executeScript(scr);
        }

        it('should initialize to model', function() {
          expect(value.getText()).toContain('2013-10-22');
          expect(valid.getText()).toContain('myForm.input.$valid = true');
        });

        it('should be invalid if empty', function() {
          setInput('');
          expect(value.getText()).toEqual('value =');
          expect(valid.getText()).toContain('myForm.input.$valid = false');
        });

        it('should be invalid if over max', function() {
          setInput('2015-01-01');
          expect(value.getText()).toContain('');
          expect(valid.getText()).toContain('myForm.input.$valid = false');
        });
     </file>
     </example>
     */
  'date': createDateInputType('date', DATE_REGEXP,
         createDateParser(DATE_REGEXP, ['yyyy', 'MM', 'dd']),
         'yyyy-MM-dd'),

   /**
    * @ngdoc input
    * @name input[datetime-local]
    *
    * @description
    * Input with datetime validation and transformation. In browsers that do not yet support
    * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
    * local datetime format (yyyy-MM-ddTHH:mm:ss), for example: `2010-12-28T14:57:00`.
    *
    * The model must always be a Date object, otherwise Angular will throw an error.
    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
    *
    * The timezone to be used to read/write the `Date` instance in the model can be defined using
    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
    *
    * @param {string} ngModel Assignable angular expression to data-bind to.
    * @param {string=} name Property name of the form under which the control is published.
    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation
    *   inside this attribute (e.g. `min="{{minDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).
    *   Note that `min` will also add native HTML5 constraint validation.
    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation
    *   inside this attribute (e.g. `max="{{maxDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).
    *   Note that `max` will also add native HTML5 constraint validation.
    * @param {(date|string)=} ngMin Sets the `min` validation error key to the Date / ISO datetime string
    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
    * @param {(date|string)=} ngMax Sets the `max` validation error key to the Date / ISO datetime string
    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
    * @param {string=} required Sets `required` validation error key if the value is not entered.
    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
    *    `required` when you want to data-bind to the `required` attribute.
    * @param {string=} ngChange Angular expression to be executed when input changes due to user
    *    interaction with the input element.
    *
    * @example
    <example name="datetimelocal-input-directive" module="dateExample">
    <file name="index.html">
      <script>
        angular.module('dateExample', [])
          .controller('DateController', ['$scope', function($scope) {
            $scope.example = {
              value: new Date(2010, 11, 28, 14, 57)
            };
          }]);
      </script>
      <form name="myForm" ng-controller="DateController as dateCtrl">
        <label for="exampleInput">Pick a date between in 2013:</label>
        <input type="datetime-local" id="exampleInput" name="input" ng-model="example.value"
            placeholder="yyyy-MM-ddTHH:mm:ss" min="2001-01-01T00:00:00" max="2013-12-31T00:00:00" required />
        <div role="alert">
          <span class="error" ng-show="myForm.input.$error.required">
              Required!</span>
          <span class="error" ng-show="myForm.input.$error.datetimelocal">
              Not a valid date!</span>
        </div>
        <tt>value = {{example.value | date: "yyyy-MM-ddTHH:mm:ss"}}</tt><br/>
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
      </form>
    </file>
    <file name="protractor.js" type="protractor">
      var value = element(by.binding('example.value | date: "yyyy-MM-ddTHH:mm:ss"'));
      var valid = element(by.binding('myForm.input.$valid'));

      // currently protractor/webdriver does not support
      // sending keys to all known HTML5 input controls
      // for various browsers (https://github.com/angular/protractor/issues/562).
      function setInput(val) {
        // set the value of the element and force validation.
        var scr = "var ipt = document.getElementById('exampleInput'); " +
        "ipt.value = '" + val + "';" +
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
        browser.executeScript(scr);
      }

      it('should initialize to model', function() {
        expect(value.getText()).toContain('2010-12-28T14:57:00');
        expect(valid.getText()).toContain('myForm.input.$valid = true');
      });

      it('should be invalid if empty', function() {
        setInput('');
        expect(value.getText()).toEqual('value =');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });

      it('should be invalid if over max', function() {
        setInput('2015-01-01T23:59:00');
        expect(value.getText()).toContain('');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });
    </file>
    </example>
    */
  'datetime-local': createDateInputType('datetimelocal', DATETIMELOCAL_REGEXP,
      createDateParser(DATETIMELOCAL_REGEXP, ['yyyy', 'MM', 'dd', 'HH', 'mm', 'ss', 'sss']),
      'yyyy-MM-ddTHH:mm:ss.sss'),

  /**
   * @ngdoc input
   * @name input[time]
   *
   * @description
   * Input with time validation and transformation. In browsers that do not yet support
   * the HTML5 time input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
   * local time format (HH:mm:ss), for example: `14:57:00`. Model must be a Date object. This binding will always output a
   * Date object to the model of January 1, 1970, or local date `new Date(1970, 0, 1, HH, mm, ss)`.
   *
   * The model must always be a Date object, otherwise Angular will throw an error.
   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
   *
   * The timezone to be used to read/write the `Date` instance in the model can be defined using
   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this
   *   attribute (e.g. `min="{{minTime | date:'HH:mm:ss'}}"`). Note that `min` will also add
   *   native HTML5 constraint validation.
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this
   *   attribute (e.g. `max="{{maxTime | date:'HH:mm:ss'}}"`). Note that `max` will also add
   *   native HTML5 constraint validation.
   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO time string the
   *   `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO time string the
   *   `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
   <example name="time-input-directive" module="timeExample">
   <file name="index.html">
     <script>
      angular.module('timeExample', [])
        .controller('DateController', ['$scope', function($scope) {
          $scope.example = {
            value: new Date(1970, 0, 1, 14, 57, 0)
          };
        }]);
     </script>
     <form name="myForm" ng-controller="DateController as dateCtrl">
        <label for="exampleInput">Pick a time between 8am and 5pm:</label>
        <input type="time" id="exampleInput" name="input" ng-model="example.value"
            placeholder="HH:mm:ss" min="08:00:00" max="17:00:00" required />
        <div role="alert">
          <span class="error" ng-show="myForm.input.$error.required">
              Required!</span>
          <span class="error" ng-show="myForm.input.$error.time">
              Not a valid date!</span>
        </div>
        <tt>value = {{example.value | date: "HH:mm:ss"}}</tt><br/>
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
     </form>
   </file>
   <file name="protractor.js" type="protractor">
      var value = element(by.binding('example.value | date: "HH:mm:ss"'));
      var valid = element(by.binding('myForm.input.$valid'));

      // currently protractor/webdriver does not support
      // sending keys to all known HTML5 input controls
      // for various browsers (https://github.com/angular/protractor/issues/562).
      function setInput(val) {
        // set the value of the element and force validation.
        var scr = "var ipt = document.getElementById('exampleInput'); " +
        "ipt.value = '" + val + "';" +
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
        browser.executeScript(scr);
      }

      it('should initialize to model', function() {
        expect(value.getText()).toContain('14:57:00');
        expect(valid.getText()).toContain('myForm.input.$valid = true');
      });

      it('should be invalid if empty', function() {
        setInput('');
        expect(value.getText()).toEqual('value =');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });

      it('should be invalid if over max', function() {
        setInput('23:59:00');
        expect(value.getText()).toContain('');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });
   </file>
   </example>
   */
  'time': createDateInputType('time', TIME_REGEXP,
      createDateParser(TIME_REGEXP, ['HH', 'mm', 'ss', 'sss']),
     'HH:mm:ss.sss'),

   /**
    * @ngdoc input
    * @name input[week]
    *
    * @description
    * Input with week-of-the-year validation and transformation to Date. In browsers that do not yet support
    * the HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
    * week format (yyyy-W##), for example: `2013-W02`.
    *
    * The model must always be a Date object, otherwise Angular will throw an error.
    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
    *
    * The timezone to be used to read/write the `Date` instance in the model can be defined using
    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
    *
    * @param {string} ngModel Assignable angular expression to data-bind to.
    * @param {string=} name Property name of the form under which the control is published.
    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this
    *   attribute (e.g. `min="{{minWeek | date:'yyyy-Www'}}"`). Note that `min` will also add
    *   native HTML5 constraint validation.
    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this
    *   attribute (e.g. `max="{{maxWeek | date:'yyyy-Www'}}"`). Note that `max` will also add
    *   native HTML5 constraint validation.
    * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string
    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
    * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string
    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
    * @param {string=} required Sets `required` validation error key if the value is not entered.
    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
    *    `required` when you want to data-bind to the `required` attribute.
    * @param {string=} ngChange Angular expression to be executed when input changes due to user
    *    interaction with the input element.
    *
    * @example
    <example name="week-input-directive" module="weekExample">
    <file name="index.html">
      <script>
      angular.module('weekExample', [])
        .controller('DateController', ['$scope', function($scope) {
          $scope.example = {
            value: new Date(2013, 0, 3)
          };
        }]);
      </script>
      <form name="myForm" ng-controller="DateController as dateCtrl">
        <label>Pick a date between in 2013:
          <input id="exampleInput" type="week" name="input" ng-model="example.value"
                 placeholder="YYYY-W##" min="2012-W32"
                 max="2013-W52" required />
        </label>
        <div role="alert">
          <span class="error" ng-show="myForm.input.$error.required">
              Required!</span>
          <span class="error" ng-show="myForm.input.$error.week">
              Not a valid date!</span>
        </div>
        <tt>value = {{example.value | date: "yyyy-Www"}}</tt><br/>
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
      </form>
    </file>
    <file name="protractor.js" type="protractor">
      var value = element(by.binding('example.value | date: "yyyy-Www"'));
      var valid = element(by.binding('myForm.input.$valid'));

      // currently protractor/webdriver does not support
      // sending keys to all known HTML5 input controls
      // for various browsers (https://github.com/angular/protractor/issues/562).
      function setInput(val) {
        // set the value of the element and force validation.
        var scr = "var ipt = document.getElementById('exampleInput'); " +
        "ipt.value = '" + val + "';" +
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
        browser.executeScript(scr);
      }

      it('should initialize to model', function() {
        expect(value.getText()).toContain('2013-W01');
        expect(valid.getText()).toContain('myForm.input.$valid = true');
      });

      it('should be invalid if empty', function() {
        setInput('');
        expect(value.getText()).toEqual('value =');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });

      it('should be invalid if over max', function() {
        setInput('2015-W01');
        expect(value.getText()).toContain('');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });
    </file>
    </example>
    */
  'week': createDateInputType('week', WEEK_REGEXP, weekParser, 'yyyy-Www'),

  /**
   * @ngdoc input
   * @name input[month]
   *
   * @description
   * Input with month validation and transformation. In browsers that do not yet support
   * the HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
   * month format (yyyy-MM), for example: `2009-01`.
   *
   * The model must always be a Date object, otherwise Angular will throw an error.
   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
   * If the model is not set to the first of the month, the next view to model update will set it
   * to the first of the month.
   *
   * The timezone to be used to read/write the `Date` instance in the model can be defined using
   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this
   *   attribute (e.g. `min="{{minMonth | date:'yyyy-MM'}}"`). Note that `min` will also add
   *   native HTML5 constraint validation.
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this
   *   attribute (e.g. `max="{{maxMonth | date:'yyyy-MM'}}"`). Note that `max` will also add
   *   native HTML5 constraint validation.
   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string
   *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string
   *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.

   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
   <example name="month-input-directive" module="monthExample">
   <file name="index.html">
     <script>
      angular.module('monthExample', [])
        .controller('DateController', ['$scope', function($scope) {
          $scope.example = {
            value: new Date(2013, 9, 1)
          };
        }]);
     </script>
     <form name="myForm" ng-controller="DateController as dateCtrl">
       <label for="exampleInput">Pick a month in 2013:</label>
       <input id="exampleInput" type="month" name="input" ng-model="example.value"
          placeholder="yyyy-MM" min="2013-01" max="2013-12" required />
       <div role="alert">
         <span class="error" ng-show="myForm.input.$error.required">
            Required!</span>
         <span class="error" ng-show="myForm.input.$error.month">
            Not a valid month!</span>
       </div>
       <tt>value = {{example.value | date: "yyyy-MM"}}</tt><br/>
       <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
       <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
       <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
       <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
     </form>
   </file>
   <file name="protractor.js" type="protractor">
      var value = element(by.binding('example.value | date: "yyyy-MM"'));
      var valid = element(by.binding('myForm.input.$valid'));

      // currently protractor/webdriver does not support
      // sending keys to all known HTML5 input controls
      // for various browsers (https://github.com/angular/protractor/issues/562).
      function setInput(val) {
        // set the value of the element and force validation.
        var scr = "var ipt = document.getElementById('exampleInput'); " +
        "ipt.value = '" + val + "';" +
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
        browser.executeScript(scr);
      }

      it('should initialize to model', function() {
        expect(value.getText()).toContain('2013-10');
        expect(valid.getText()).toContain('myForm.input.$valid = true');
      });

      it('should be invalid if empty', function() {
        setInput('');
        expect(value.getText()).toEqual('value =');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });

      it('should be invalid if over max', function() {
        setInput('2015-01');
        expect(value.getText()).toContain('');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });
   </file>
   </example>
   */
  'month': createDateInputType('month', MONTH_REGEXP,
     createDateParser(MONTH_REGEXP, ['yyyy', 'MM']),
     'yyyy-MM'),

  /**
   * @ngdoc input
   * @name input[number]
   *
   * @description
   * Text input with number validation and transformation. Sets the `number` validation
   * error if not a valid number.
   *
   * <div class="alert alert-warning">
   * The model must always be of type `number` otherwise Angular will throw an error.
   * Be aware that a string containing a number is not enough. See the {@link ngModel:numfmt}
   * error docs for more information and an example of how to convert your model if necessary.
   * </div>
   *
   * ## Issues with HTML5 constraint validation
   *
   * In browsers that follow the
   * [HTML5 specification](https://html.spec.whatwg.org/multipage/forms.html#number-state-%28type=number%29),
   * `input[number]` does not work as expected with {@link ngModelOptions `ngModelOptions.allowInvalid`}.
   * If a non-number is entered in the input, the browser will report the value as an empty string,
   * which means the view / model values in `ngModel` and subsequently the scope value
   * will also be an empty string.
   *
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
   *    Can be interpolated.
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
   *    Can be interpolated.
   * @param {string=} ngMin Like `min`, sets the `min` validation error key if the value entered is less than `ngMin`,
   *    but does not trigger HTML5 native validation. Takes an expression.
   * @param {string=} ngMax Like `max`, sets the `max` validation error key if the value entered is greater than `ngMax`,
   *    but does not trigger HTML5 native validation. Takes an expression.
   * @param {string=} step Sets the `step` validation error key if the value entered does not fit the `step` constraint.
   *    Can be interpolated.
   * @param {string=} ngStep Like `step`, sets the `step` validation error key if the value entered does not fit the `ngStep` constraint,
   *    but does not trigger HTML5 native validation. Takes an expression.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
   *    any length.
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
   *    that contains the regular expression body that will be converted to a regular expression
   *    as in the ngPattern directive.
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
   *    If the expression evaluates to a RegExp object, then this is used directly.
   *    If the expression evaluates to a string, then it will be converted to a RegExp
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
   *    `new RegExp('^abc$')`.<br />
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
   *    start at the index of the last search's match, thus not taking the whole input value into
   *    account.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="number-input-directive" module="numberExample">
        <file name="index.html">
         <script>
           angular.module('numberExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.example = {
                 value: 12
               };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           <label>Number:
             <input type="number" name="input" ng-model="example.value"
                    min="0" max="99" required>
          </label>
           <div role="alert">
             <span class="error" ng-show="myForm.input.$error.required">
               Required!</span>
             <span class="error" ng-show="myForm.input.$error.number">
               Not valid number!</span>
           </div>
           <tt>value = {{example.value}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          var value = element(by.binding('example.value'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('example.value'));

          it('should initialize to model', function() {
            expect(value.getText()).toContain('12');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');
            expect(value.getText()).toEqual('value =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if over max', function() {
            input.clear();
            input.sendKeys('123');
            expect(value.getText()).toEqual('value =');
            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */
  'number': numberInputType,


  /**
   * @ngdoc input
   * @name input[url]
   *
   * @description
   * Text input with URL validation. Sets the `url` validation error key if the content is not a
   * valid URL.
   *
   * <div class="alert alert-warning">
   * **Note:** `input[url]` uses a regex to validate urls that is derived from the regex
   * used in Chromium. If you need stricter validation, you can use `ng-pattern` or modify
   * the built-in validators (see the {@link guide/forms Forms guide})
   * </div>
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
   *    any length.
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
   *    that contains the regular expression body that will be converted to a regular expression
   *    as in the ngPattern directive.
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
   *    If the expression evaluates to a RegExp object, then this is used directly.
   *    If the expression evaluates to a string, then it will be converted to a RegExp
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
   *    `new RegExp('^abc$')`.<br />
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
   *    start at the index of the last search's match, thus not taking the whole input value into
   *    account.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="url-input-directive" module="urlExample">
        <file name="index.html">
         <script>
           angular.module('urlExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.url = {
                 text: 'http://google.com'
               };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           <label>URL:
             <input type="url" name="input" ng-model="url.text" required>
           <label>
           <div role="alert">
             <span class="error" ng-show="myForm.input.$error.required">
               Required!</span>
             <span class="error" ng-show="myForm.input.$error.url">
               Not valid url!</span>
           </div>
           <tt>text = {{url.text}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
           <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          var text = element(by.binding('url.text'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('url.text'));

          it('should initialize to model', function() {
            expect(text.getText()).toContain('http://google.com');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');

            expect(text.getText()).toEqual('text =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if not url', function() {
            input.clear();
            input.sendKeys('box');

            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */
  'url': urlInputType,


  /**
   * @ngdoc input
   * @name input[email]
   *
   * @description
   * Text input with email validation. Sets the `email` validation error key if not a valid email
   * address.
   *
   * <div class="alert alert-warning">
   * **Note:** `input[email]` uses a regex to validate email addresses that is derived from the regex
   * used in Chromium. If you need stricter validation (e.g. requiring a top-level domain), you can
   * use `ng-pattern` or modify the built-in validators (see the {@link guide/forms Forms guide})
   * </div>
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
   *    any length.
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
   *    that contains the regular expression body that will be converted to a regular expression
   *    as in the ngPattern directive.
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
   *    If the expression evaluates to a RegExp object, then this is used directly.
   *    If the expression evaluates to a string, then it will be converted to a RegExp
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
   *    `new RegExp('^abc$')`.<br />
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
   *    start at the index of the last search's match, thus not taking the whole input value into
   *    account.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="email-input-directive" module="emailExample">
        <file name="index.html">
         <script>
           angular.module('emailExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.email = {
                 text: 'me@example.com'
               };
             }]);
         </script>
           <form name="myForm" ng-controller="ExampleController">
             <label>Email:
               <input type="email" name="input" ng-model="email.text" required>
             </label>
             <div role="alert">
               <span class="error" ng-show="myForm.input.$error.required">
                 Required!</span>
               <span class="error" ng-show="myForm.input.$error.email">
                 Not valid email!</span>
             </div>
             <tt>text = {{email.text}}</tt><br/>
             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
             <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>
           </form>
         </file>
        <file name="protractor.js" type="protractor">
          var text = element(by.binding('email.text'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('email.text'));

          it('should initialize to model', function() {
            expect(text.getText()).toContain('me@example.com');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');
            expect(text.getText()).toEqual('text =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if not email', function() {
            input.clear();
            input.sendKeys('xxx');

            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */
  'email': emailInputType,


  /**
   * @ngdoc input
   * @name input[radio]
   *
   * @description
   * HTML radio button.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string} value The value to which the `ngModel` expression should be set when selected.
   *    Note that `value` only supports `string` values, i.e. the scope model needs to be a string,
   *    too. Use `ngValue` if you need complex models (`number`, `object`, ...).
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   * @param {string} ngValue Angular expression to which `ngModel` will be be set when the radio
   *    is selected. Should be used instead of the `value` attribute if you need
   *    a non-string `ngModel` (`boolean`, `array`, ...).
   *
   * @example
      <example name="radio-input-directive" module="radioExample">
        <file name="index.html">
         <script>
           angular.module('radioExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.color = {
                 name: 'blue'
               };
               $scope.specialValue = {
                 "id": "12345",
                 "value": "green"
               };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           <label>
             <input type="radio" ng-model="color.name" value="red">
             Red
           </label><br/>
           <label>
             <input type="radio" ng-model="color.name" ng-value="specialValue">
             Green
           </label><br/>
           <label>
             <input type="radio" ng-model="color.name" value="blue">
             Blue
           </label><br/>
           <tt>color = {{color.name | json}}</tt><br/>
          </form>
          Note that `ng-value="specialValue"` sets radio item's value to be the value of `$scope.specialValue`.
        </file>
        <file name="protractor.js" type="protractor">
          it('should change state', function() {
            var inputs = element.all(by.model('color.name'));
            var color = element(by.binding('color.name'));

            expect(color.getText()).toContain('blue');

            inputs.get(0).click();
            expect(color.getText()).toContain('red');

            inputs.get(1).click();
            expect(color.getText()).toContain('green');
          });
        </file>
      </example>
   */
  'radio': radioInputType,

  /**
   * @ngdoc input
   * @name input[range]
   *
   * @description
   * Native range input with validation and transformation.
   *
   * The model for the range input must always be a `Number`.
   *
   * IE9 and other browsers that do not support the `range` type fall back
   * to a text input without any default values for `min`, `max` and `step`. Model binding,
   * validation and number parsing are nevertheless supported.
   *
   * Browsers that support range (latest Chrome, Safari, Firefox, Edge) treat `input[range]`
   * in a way that never allows the input to hold an invalid value. That means:
   * - any non-numerical value is set to `(max + min) / 2`.
   * - any numerical value that is less than the current min val, or greater than the current max val
   * is set to the min / max val respectively.
   * - additionally, the current `step` is respected, so the nearest value that satisfies a step
   * is used.
   *
   * See the [HTML Spec on input[type=range]](https://www.w3.org/TR/html5/forms.html#range-state-(type=range))
   * for more info.
   *
   * This has the following consequences for Angular:
   *
   * Since the element value should always reflect the current model value, a range input
   * will set the bound ngModel expression to the value that the browser has set for the
   * input element. For example, in the following input `<input type="range" ng-model="model.value">`,
   * if the application sets `model.value = null`, the browser will set the input to `'50'`.
   * Angular will then set the model to `50`, to prevent input and model value being out of sync.
   *
   * That means the model for range will immediately be set to `50` after `ngModel` has been
   * initialized. It also means a range input can never have the required error.
   *
   * This does not only affect changes to the model value, but also to the values of the `min`,
   * `max`, and `step` attributes. When these change in a way that will cause the browser to modify
   * the input value, Angular will also update the model value.
   *
   * Automatic value adjustment also means that a range input element can never have the `required`,
   * `min`, or `max` errors.
   *
   * However, `step` is currently only fully implemented by Firefox. Other browsers have problems
   * when the step value changes dynamically - they do not adjust the element value correctly, but
   * instead may set the `stepMismatch` error. If that's the case, the Angular will set the `step`
   * error on the input, and set the model to `undefined`.
   *
   * Note that `input[range]` is not compatible with`ngMax`, `ngMin`, and `ngStep`, because they do
   * not set the `min` and `max` attributes, which means that the browser won't automatically adjust
   * the input value based on their values, and will always assume min = 0, max = 100, and step = 1.
   *
   * @param {string}  ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} min Sets the `min` validation to ensure that the value entered is greater
   *                  than `min`. Can be interpolated.
   * @param {string=} max Sets the `max` validation to ensure that the value entered is less than `max`.
   *                  Can be interpolated.
   * @param {string=} step Sets the `step` validation to ensure that the value entered matches the `step`
   *                  Can be interpolated.
   * @param {string=} ngChange Angular expression to be executed when the ngModel value changes due
   *                  to user interaction with the input element.
   * @param {expression=} ngChecked If the expression is truthy, then the `checked` attribute will be set on the
   *                      element. **Note** : `ngChecked` should not be used alongside `ngModel`.
   *                      Checkout {@link ng.directive:ngChecked ngChecked} for usage.
   *
   * @example
      <example name="range-input-directive" module="rangeExample">
        <file name="index.html">
          <script>
            angular.module('rangeExample', [])
              .controller('ExampleController', ['$scope', function($scope) {
                $scope.value = 75;
                $scope.min = 10;
                $scope.max = 90;
              }]);
          </script>
          <form name="myForm" ng-controller="ExampleController">

            Model as range: <input type="range" name="range" ng-model="value" min="{{min}}"  max="{{max}}">
            <hr>
            Model as number: <input type="number" ng-model="value"><br>
            Min: <input type="number" ng-model="min"><br>
            Max: <input type="number" ng-model="max"><br>
            value = <code>{{value}}</code><br/>
            myForm.range.$valid = <code>{{myForm.range.$valid}}</code><br/>
            myForm.range.$error = <code>{{myForm.range.$error}}</code>
          </form>
        </file>
      </example>

   * ## Range Input with ngMin & ngMax attributes

   * @example
      <example name="range-input-directive-ng" module="rangeExample">
        <file name="index.html">
          <script>
            angular.module('rangeExample', [])
              .controller('ExampleController', ['$scope', function($scope) {
                $scope.value = 75;
                $scope.min = 10;
                $scope.max = 90;
              }]);
          </script>
          <form name="myForm" ng-controller="ExampleController">
            Model as range: <input type="range" name="range" ng-model="value" ng-min="min" ng-max="max">
            <hr>
            Model as number: <input type="number" ng-model="value"><br>
            Min: <input type="number" ng-model="min"><br>
            Max: <input type="number" ng-model="max"><br>
            value = <code>{{value}}</code><br/>
            myForm.range.$valid = <code>{{myForm.range.$valid}}</code><br/>
            myForm.range.$error = <code>{{myForm.range.$error}}</code>
          </form>
        </file>
      </example>

   */
  'range': rangeInputType,

  /**
   * @ngdoc input
   * @name input[checkbox]
   *
   * @description
   * HTML checkbox.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {expression=} ngTrueValue The value to which the expression should be set when selected.
   * @param {expression=} ngFalseValue The value to which the expression should be set when not selected.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="checkbox-input-directive" module="checkboxExample">
        <file name="index.html">
         <script>
           angular.module('checkboxExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.checkboxModel = {
                value1 : true,
                value2 : 'YES'
              };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           <label>Value1:
             <input type="checkbox" ng-model="checkboxModel.value1">
           </label><br/>
           <label>Value2:
             <input type="checkbox" ng-model="checkboxModel.value2"
                    ng-true-value="'YES'" ng-false-value="'NO'">
            </label><br/>
           <tt>value1 = {{checkboxModel.value1}}</tt><br/>
           <tt>value2 = {{checkboxModel.value2}}</tt><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          it('should change state', function() {
            var value1 = element(by.binding('checkboxModel.value1'));
            var value2 = element(by.binding('checkboxModel.value2'));

            expect(value1.getText()).toContain('true');
            expect(value2.getText()).toContain('YES');

            element(by.model('checkboxModel.value1')).click();
            element(by.model('checkboxModel.value2')).click();

            expect(value1.getText()).toContain('false');
            expect(value2.getText()).toContain('NO');
          });
        </file>
      </example>
   */
  'checkbox': checkboxInputType,

  'hidden': noop,
  'button': noop,
  'submit': noop,
  'reset': noop,
  'file': noop
};

function stringBasedInputType(ctrl) {
  ctrl.$formatters.push(function(value) {
    return ctrl.$isEmpty(value) ? value : value.toString();
  });
}

function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
  stringBasedInputType(ctrl);
}

function baseInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  var type = lowercase(element[0].type);

  // In composition mode, users are still inputting intermediate text buffer,
  // hold the listener until composition is done.
  // More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent
  if (!$sniffer.android) {
    var composing = false;

    element.on('compositionstart', function() {
      composing = true;
    });

    element.on('compositionend', function() {
      composing = false;
      listener();
    });
  }

  var timeout;

  var listener = function(ev) {
    if (timeout) {
      $browser.defer.cancel(timeout);
      timeout = null;
    }
    if (composing) return;
    var value = element.val(),
        event = ev && ev.type;

    // By default we will trim the value
    // If the attribute ng-trim exists we will avoid trimming
    // If input type is 'password', the value is never trimmed
    if (type !== 'password' && (!attr.ngTrim || attr.ngTrim !== 'false')) {
      value = trim(value);
    }

    // If a control is suffering from bad input (due to native validators), browsers discard its
    // value, so it may be necessary to revalidate (by calling $setViewValue again) even if the
    // control's value is the same empty value twice in a row.
    if (ctrl.$viewValue !== value || (value === '' && ctrl.$$hasNativeValidators)) {
      ctrl.$setViewValue(value, event);
    }
  };

  // if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the
  // input event on backspace, delete or cut
  if ($sniffer.hasEvent('input')) {
    element.on('input', listener);
  } else {
    var deferListener = function(ev, input, origValue) {
      if (!timeout) {
        timeout = $browser.defer(function() {
          timeout = null;
          if (!input || input.value !== origValue) {
            listener(ev);
          }
        });
      }
    };

    element.on('keydown', /** @this */ function(event) {
      var key = event.keyCode;

      // ignore
      //    command            modifiers                   arrows
      if (key === 91 || (15 < key && key < 19) || (37 <= key && key <= 40)) return;

      deferListener(event, this, this.value);
    });

    // if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it
    if ($sniffer.hasEvent('paste')) {
      element.on('paste cut', deferListener);
    }
  }

  // if user paste into input using mouse on older browser
  // or form autocomplete on newer browser, we need "change" event to catch it
  element.on('change', listener);

  // Some native input types (date-family) have the ability to change validity without
  // firing any input/change events.
  // For these event types, when native validators are present and the browser supports the type,
  // check for validity changes on various DOM events.
  if (PARTIAL_VALIDATION_TYPES[type] && ctrl.$$hasNativeValidators && type === attr.type) {
    element.on(PARTIAL_VALIDATION_EVENTS, /** @this */ function(ev) {
      if (!timeout) {
        var validity = this[VALIDITY_STATE_PROPERTY];
        var origBadInput = validity.badInput;
        var origTypeMismatch = validity.typeMismatch;
        timeout = $browser.defer(function() {
          timeout = null;
          if (validity.badInput !== origBadInput || validity.typeMismatch !== origTypeMismatch) {
            listener(ev);
          }
        });
      }
    });
  }

  ctrl.$render = function() {
    // Workaround for Firefox validation #12102.
    var value = ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue;
    if (element.val() !== value) {
      element.val(value);
    }
  };
}

function weekParser(isoWeek, existingDate) {
  if (isDate(isoWeek)) {
    return isoWeek;
  }

  if (isString(isoWeek)) {
    WEEK_REGEXP.lastIndex = 0;
    var parts = WEEK_REGEXP.exec(isoWeek);
    if (parts) {
      var year = +parts[1],
          week = +parts[2],
          hours = 0,
          minutes = 0,
          seconds = 0,
          milliseconds = 0,
          firstThurs = getFirstThursdayOfYear(year),
          addDays = (week - 1) * 7;

      if (existingDate) {
        hours = existingDate.getHours();
        minutes = existingDate.getMinutes();
        seconds = existingDate.getSeconds();
        milliseconds = existingDate.getMilliseconds();
      }

      return new Date(year, 0, firstThurs.getDate() + addDays, hours, minutes, seconds, milliseconds);
    }
  }

  return NaN;
}

function createDateParser(regexp, mapping) {
  return function(iso, date) {
    var parts, map;

    if (isDate(iso)) {
      return iso;
    }

    if (isString(iso)) {
      // When a date is JSON'ified to wraps itself inside of an extra
      // set of double quotes. This makes the date parsing code unable
      // to match the date string and parse it as a date.
      if (iso.charAt(0) === '"' && iso.charAt(iso.length - 1) === '"') {
        iso = iso.substring(1, iso.length - 1);
      }
      if (ISO_DATE_REGEXP.test(iso)) {
        return new Date(iso);
      }
      regexp.lastIndex = 0;
      parts = regexp.exec(iso);

      if (parts) {
        parts.shift();
        if (date) {
          map = {
            yyyy: date.getFullYear(),
            MM: date.getMonth() + 1,
            dd: date.getDate(),
            HH: date.getHours(),
            mm: date.getMinutes(),
            ss: date.getSeconds(),
            sss: date.getMilliseconds() / 1000
          };
        } else {
          map = { yyyy: 1970, MM: 1, dd: 1, HH: 0, mm: 0, ss: 0, sss: 0 };
        }

        forEach(parts, function(part, index) {
          if (index < mapping.length) {
            map[mapping[index]] = +part;
          }
        });
        return new Date(map.yyyy, map.MM - 1, map.dd, map.HH, map.mm, map.ss || 0, map.sss * 1000 || 0);
      }
    }

    return NaN;
  };
}

function createDateInputType(type, regexp, parseDate, format) {
  return function dynamicDateInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter) {
    badInputChecker(scope, element, attr, ctrl);
    baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
    var timezone = ctrl && ctrl.$options.getOption('timezone');
    var previousDate;

    ctrl.$$parserName = type;
    ctrl.$parsers.push(function(value) {
      if (ctrl.$isEmpty(value)) return null;
      if (regexp.test(value)) {
        // Note: We cannot read ctrl.$modelValue, as there might be a different
        // parser/formatter in the processing chain so that the model
        // contains some different data format!
        var parsedDate = parseDate(value, previousDate);
        if (timezone) {
          parsedDate = convertTimezoneToLocal(parsedDate, timezone);
        }
        return parsedDate;
      }
      return undefined;
    });

    ctrl.$formatters.push(function(value) {
      if (value && !isDate(value)) {
        throw ngModelMinErr('datefmt', 'Expected `{0}` to be a date', value);
      }
      if (isValidDate(value)) {
        previousDate = value;
        if (previousDate && timezone) {
          previousDate = convertTimezoneToLocal(previousDate, timezone, true);
        }
        return $filter('date')(value, format, timezone);
      } else {
        previousDate = null;
        return '';
      }
    });

    if (isDefined(attr.min) || attr.ngMin) {
      var minVal;
      ctrl.$validators.min = function(value) {
        return !isValidDate(value) || isUndefined(minVal) || parseDate(value) >= minVal;
      };
      attr.$observe('min', function(val) {
        minVal = parseObservedDateValue(val);
        ctrl.$validate();
      });
    }

    if (isDefined(attr.max) || attr.ngMax) {
      var maxVal;
      ctrl.$validators.max = function(value) {
        return !isValidDate(value) || isUndefined(maxVal) || parseDate(value) <= maxVal;
      };
      attr.$observe('max', function(val) {
        maxVal = parseObservedDateValue(val);
        ctrl.$validate();
      });
    }

    function isValidDate(value) {
      // Invalid Date: getTime() returns NaN
      return value && !(value.getTime && value.getTime() !== value.getTime());
    }

    function parseObservedDateValue(val) {
      return isDefined(val) && !isDate(val) ? parseDate(val) || undefined : val;
    }
  };
}

function badInputChecker(scope, element, attr, ctrl) {
  var node = element[0];
  var nativeValidation = ctrl.$$hasNativeValidators = isObject(node.validity);
  if (nativeValidation) {
    ctrl.$parsers.push(function(value) {
      var validity = element.prop(VALIDITY_STATE_PROPERTY) || {};
      return validity.badInput || validity.typeMismatch ? undefined : value;
    });
  }
}

function numberFormatterParser(ctrl) {
  ctrl.$$parserName = 'number';
  ctrl.$parsers.push(function(value) {
    if (ctrl.$isEmpty(value))      return null;
    if (NUMBER_REGEXP.test(value)) return parseFloat(value);
    return undefined;
  });

  ctrl.$formatters.push(function(value) {
    if (!ctrl.$isEmpty(value)) {
      if (!isNumber(value)) {
        throw ngModelMinErr('numfmt', 'Expected `{0}` to be a number', value);
      }
      value = value.toString();
    }
    return value;
  });
}

function parseNumberAttrVal(val) {
  if (isDefined(val) && !isNumber(val)) {
    val = parseFloat(val);
  }
  return !isNumberNaN(val) ? val : undefined;
}

function isNumberInteger(num) {
  // See http://stackoverflow.com/questions/14636536/how-to-check-if-a-variable-is-an-integer-in-javascript#14794066
  // (minus the assumption that `num` is a number)

  // eslint-disable-next-line no-bitwise
  return (num | 0) === num;
}

function countDecimals(num) {
  var numString = num.toString();
  var decimalSymbolIndex = numString.indexOf('.');

  if (decimalSymbolIndex === -1) {
    if (-1 < num && num < 1) {
      // It may be in the exponential notation format (`1e-X`)
      var match = /e-(\d+)$/.exec(numString);

      if (match) {
        return Number(match[1]);
      }
    }

    return 0;
  }

  return numString.length - decimalSymbolIndex - 1;
}

function isValidForStep(viewValue, stepBase, step) {
  // At this point `stepBase` and `step` are expected to be non-NaN values
  // and `viewValue` is expected to be a valid stringified number.
  var value = Number(viewValue);

  var isNonIntegerValue = !isNumberInteger(value);
  var isNonIntegerStepBase = !isNumberInteger(stepBase);
  var isNonIntegerStep = !isNumberInteger(step);

  // Due to limitations in Floating Point Arithmetic (e.g. `0.3 - 0.2 !== 0.1` or
  // `0.5 % 0.1 !== 0`), we need to convert all numbers to integers.
  if (isNonIntegerValue || isNonIntegerStepBase || isNonIntegerStep) {
    var valueDecimals = isNonIntegerValue ? countDecimals(value) : 0;
    var stepBaseDecimals = isNonIntegerStepBase ? countDecimals(stepBase) : 0;
    var stepDecimals = isNonIntegerStep ? countDecimals(step) : 0;

    var decimalCount = Math.max(valueDecimals, stepBaseDecimals, stepDecimals);
    var multiplier = Math.pow(10, decimalCount);

    value = value * multiplier;
    stepBase = stepBase * multiplier;
    step = step * multiplier;

    if (isNonIntegerValue) value = Math.round(value);
    if (isNonIntegerStepBase) stepBase = Math.round(stepBase);
    if (isNonIntegerStep) step = Math.round(step);
  }

  return (value - stepBase) % step === 0;
}

function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  badInputChecker(scope, element, attr, ctrl);
  numberFormatterParser(ctrl);
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);

  var minVal;
  var maxVal;

  if (isDefined(attr.min) || attr.ngMin) {
    ctrl.$validators.min = function(value) {
      return ctrl.$isEmpty(value) || isUndefined(minVal) || value >= minVal;
    };

    attr.$observe('min', function(val) {
      minVal = parseNumberAttrVal(val);
      // TODO(matsko): implement validateLater to reduce number of validations
      ctrl.$validate();
    });
  }

  if (isDefined(attr.max) || attr.ngMax) {
    ctrl.$validators.max = function(value) {
      return ctrl.$isEmpty(value) || isUndefined(maxVal) || value <= maxVal;
    };

    attr.$observe('max', function(val) {
      maxVal = parseNumberAttrVal(val);
      // TODO(matsko): implement validateLater to reduce number of validations
      ctrl.$validate();
    });
  }

  if (isDefined(attr.step) || attr.ngStep) {
    var stepVal;
    ctrl.$validators.step = function(modelValue, viewValue) {
      return ctrl.$isEmpty(viewValue) || isUndefined(stepVal) ||
             isValidForStep(viewValue, minVal || 0, stepVal);
    };

    attr.$observe('step', function(val) {
      stepVal = parseNumberAttrVal(val);
      // TODO(matsko): implement validateLater to reduce number of validations
      ctrl.$validate();
    });
  }
}

function rangeInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  badInputChecker(scope, element, attr, ctrl);
  numberFormatterParser(ctrl);
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);

  var supportsRange = ctrl.$$hasNativeValidators && element[0].type === 'range',
      minVal = supportsRange ? 0 : undefined,
      maxVal = supportsRange ? 100 : undefined,
      stepVal = supportsRange ? 1 : undefined,
      validity = element[0].validity,
      hasMinAttr = isDefined(attr.min),
      hasMaxAttr = isDefined(attr.max),
      hasStepAttr = isDefined(attr.step);

  var originalRender = ctrl.$render;

  ctrl.$render = supportsRange && isDefined(validity.rangeUnderflow) && isDefined(validity.rangeOverflow) ?
    //Browsers that implement range will set these values automatically, but reading the adjusted values after
    //$render would cause the min / max validators to be applied with the wrong value
    function rangeRender() {
      originalRender();
      ctrl.$setViewValue(element.val());
    } :
    originalRender;

  if (hasMinAttr) {
    ctrl.$validators.min = supportsRange ?
      // Since all browsers set the input to a valid value, we don't need to check validity
      function noopMinValidator() { return true; } :
      // non-support browsers validate the min val
      function minValidator(modelValue, viewValue) {
        return ctrl.$isEmpty(viewValue) || isUndefined(minVal) || viewValue >= minVal;
      };

    setInitialValueAndObserver('min', minChange);
  }

  if (hasMaxAttr) {
    ctrl.$validators.max = supportsRange ?
      // Since all browsers set the input to a valid value, we don't need to check validity
      function noopMaxValidator() { return true; } :
      // non-support browsers validate the max val
      function maxValidator(modelValue, viewValue) {
        return ctrl.$isEmpty(viewValue) || isUndefined(maxVal) || viewValue <= maxVal;
      };

    setInitialValueAndObserver('max', maxChange);
  }

  if (hasStepAttr) {
    ctrl.$validators.step = supportsRange ?
      function nativeStepValidator() {
        // Currently, only FF implements the spec on step change correctly (i.e. adjusting the
        // input element value to a valid value). It's possible that other browsers set the stepMismatch
        // validity error instead, so we can at least report an error in that case.
        return !validity.stepMismatch;
      } :
      // ngStep doesn't set the setp attr, so the browser doesn't adjust the input value as setting step would
      function stepValidator(modelValue, viewValue) {
        return ctrl.$isEmpty(viewValue) || isUndefined(stepVal) ||
               isValidForStep(viewValue, minVal || 0, stepVal);
      };

    setInitialValueAndObserver('step', stepChange);
  }

  function setInitialValueAndObserver(htmlAttrName, changeFn) {
    // interpolated attributes set the attribute value only after a digest, but we need the
    // attribute value when the input is first rendered, so that the browser can adjust the
    // input value based on the min/max value
    element.attr(htmlAttrName, attr[htmlAttrName]);
    attr.$observe(htmlAttrName, changeFn);
  }

  function minChange(val) {
    minVal = parseNumberAttrVal(val);
    // ignore changes before model is initialized
    if (isNumberNaN(ctrl.$modelValue)) {
      return;
    }

    if (supportsRange) {
      var elVal = element.val();
      // IE11 doesn't set the el val correctly if the minVal is greater than the element value
      if (minVal > elVal) {
        elVal = minVal;
        element.val(elVal);
      }
      ctrl.$setViewValue(elVal);
    } else {
      // TODO(matsko): implement validateLater to reduce number of validations
      ctrl.$validate();
    }
  }

  function maxChange(val) {
    maxVal = parseNumberAttrVal(val);
    // ignore changes before model is initialized
    if (isNumberNaN(ctrl.$modelValue)) {
      return;
    }

    if (supportsRange) {
      var elVal = element.val();
      // IE11 doesn't set the el val correctly if the maxVal is less than the element value
      if (maxVal < elVal) {
        element.val(maxVal);
        // IE11 and Chrome don't set the value to the minVal when max < min
        elVal = maxVal < minVal ? minVal : maxVal;
      }
      ctrl.$setViewValue(elVal);
    } else {
      // TODO(matsko): implement validateLater to reduce number of validations
      ctrl.$validate();
    }
  }

  function stepChange(val) {
    stepVal = parseNumberAttrVal(val);
    // ignore changes before model is initialized
    if (isNumberNaN(ctrl.$modelValue)) {
      return;
    }

    // Some browsers don't adjust the input value correctly, but set the stepMismatch error
    if (supportsRange && ctrl.$viewValue !== element.val()) {
      ctrl.$setViewValue(element.val());
    } else {
      // TODO(matsko): implement validateLater to reduce number of validations
      ctrl.$validate();
    }
  }
}

function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  // Note: no badInputChecker here by purpose as `url` is only a validation
  // in browsers, i.e. we can always read out input.value even if it is not valid!
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
  stringBasedInputType(ctrl);

  ctrl.$$parserName = 'url';
  ctrl.$validators.url = function(modelValue, viewValue) {
    var value = modelValue || viewValue;
    return ctrl.$isEmpty(value) || URL_REGEXP.test(value);
  };
}

function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  // Note: no badInputChecker here by purpose as `url` is only a validation
  // in browsers, i.e. we can always read out input.value even if it is not valid!
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
  stringBasedInputType(ctrl);

  ctrl.$$parserName = 'email';
  ctrl.$validators.email = function(modelValue, viewValue) {
    var value = modelValue || viewValue;
    return ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value);
  };
}

function radioInputType(scope, element, attr, ctrl) {
  var doTrim = !attr.ngTrim || trim(attr.ngTrim) !== 'false';
  // make the name unique, if not defined
  if (isUndefined(attr.name)) {
    element.attr('name', nextUid());
  }

  var listener = function(ev) {
    var value;
    if (element[0].checked) {
      value = attr.value;
      if (doTrim) {
        value = trim(value);
      }
      ctrl.$setViewValue(value, ev && ev.type);
    }
  };

  element.on('click', listener);

  ctrl.$render = function() {
    var value = attr.value;
    if (doTrim) {
      value = trim(value);
    }
    element[0].checked = (value === ctrl.$viewValue);
  };

  attr.$observe('value', ctrl.$render);
}

function parseConstantExpr($parse, context, name, expression, fallback) {
  var parseFn;
  if (isDefined(expression)) {
    parseFn = $parse(expression);
    if (!parseFn.constant) {
      throw ngModelMinErr('constexpr', 'Expected constant expression for `{0}`, but saw ' +
                                   '`{1}`.', name, expression);
    }
    return parseFn(context);
  }
  return fallback;
}

function checkboxInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {
  var trueValue = parseConstantExpr($parse, scope, 'ngTrueValue', attr.ngTrueValue, true);
  var falseValue = parseConstantExpr($parse, scope, 'ngFalseValue', attr.ngFalseValue, false);

  var listener = function(ev) {
    ctrl.$setViewValue(element[0].checked, ev && ev.type);
  };

  element.on('click', listener);

  ctrl.$render = function() {
    element[0].checked = ctrl.$viewValue;
  };

  // Override the standard `$isEmpty` because the $viewValue of an empty checkbox is always set to `false`
  // This is because of the parser below, which compares the `$modelValue` with `trueValue` to convert
  // it to a boolean.
  ctrl.$isEmpty = function(value) {
    return value === false;
  };

  ctrl.$formatters.push(function(value) {
    return equals(value, trueValue);
  });

  ctrl.$parsers.push(function(value) {
    return value ? trueValue : falseValue;
  });
}


/**
 * @ngdoc directive
 * @name textarea
 * @restrict E
 *
 * @description
 * HTML textarea element control with angular data-binding. The data-binding and validation
 * properties of this element are exactly the same as those of the
 * {@link ng.directive:input input element}.
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required Sets `required` validation error key if the value is not entered.
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
 *    `required` when you want to data-bind to the `required` attribute.
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
 *    minlength.
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
 *    length.
 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
 *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
 *    If the expression evaluates to a RegExp object, then this is used directly.
 *    If the expression evaluates to a string, then it will be converted to a RegExp
 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
 *    `new RegExp('^abc$')`.<br />
 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
 *    start at the index of the last search's match, thus not taking the whole input value into
 *    account.
 * @param {string=} ngChange Angular expression to be executed when input changes due to user
 *    interaction with the input element.
 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
 *
 * @knownIssue
 *
 * When specifying the `placeholder` attribute of `<textarea>`, Internet Explorer will temporarily
 * insert the placeholder value as the textarea's content. If the placeholder value contains
 * interpolation (`{{ ... }}`), an error will be logged in the console when Angular tries to update
 * the value of the by-then-removed text node. This doesn't affect the functionality of the
 * textarea, but can be undesirable.
 *
 * You can work around this Internet Explorer issue by using `ng-attr-placeholder` instead of
 * `placeholder` on textareas, whenever you need interpolation in the placeholder value. You can
 * find more details on `ngAttr` in the
 * [Interpolation](guide/interpolation#-ngattr-for-binding-to-arbitrary-attributes) section of the
 * Developer Guide.
 */


/**
 * @ngdoc directive
 * @name input
 * @restrict E
 *
 * @description
 * HTML input element control. When used together with {@link ngModel `ngModel`}, it provides data-binding,
 * input state control, and validation.
 * Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.
 *
 * <div class="alert alert-warning">
 * **Note:** Not every feature offered is available for all input types.
 * Specifically, data binding and event handling via `ng-model` is unsupported for `input[file]`.
 * </div>
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required Sets `required` validation error key if the value is not entered.
 * @param {boolean=} ngRequired Sets `required` attribute if set to true
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
 *    minlength.
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
 *    length.
 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
 *    value does not match a RegExp found by evaluating the Angular expression given in the attribute value.
 *    If the expression evaluates to a RegExp object, then this is used directly.
 *    If the expression evaluates to a string, then it will be converted to a RegExp
 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
 *    `new RegExp('^abc$')`.<br />
 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
 *    start at the index of the last search's match, thus not taking the whole input value into
 *    account.
 * @param {string=} ngChange Angular expression to be executed when input changes due to user
 *    interaction with the input element.
 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
 *    This parameter is ignored for input[type=password] controls, which will never trim the
 *    input.
 *
 * @example
    <example name="input-directive" module="inputExample">
      <file name="index.html">
       <script>
          angular.module('inputExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.user = {name: 'guest', last: 'visitor'};
            }]);
       </script>
       <div ng-controller="ExampleController">
         <form name="myForm">
           <label>
              User name:
              <input type="text" name="userName" ng-model="user.name" required>
           </label>
           <div role="alert">
             <span class="error" ng-show="myForm.userName.$error.required">
              Required!</span>
           </div>
           <label>
              Last name:
              <input type="text" name="lastName" ng-model="user.last"
              ng-minlength="3" ng-maxlength="10">
           </label>
           <div role="alert">
             <span class="error" ng-show="myForm.lastName.$error.minlength">
               Too short!</span>
             <span class="error" ng-show="myForm.lastName.$error.maxlength">
               Too long!</span>
           </div>
         </form>
         <hr>
         <tt>user = {{user}}</tt><br/>
         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br/>
         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br/>
         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br/>
         <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br/>
         <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br/>
         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br/>
       </div>
      </file>
      <file name="protractor.js" type="protractor">
        var user = element(by.exactBinding('user'));
        var userNameValid = element(by.binding('myForm.userName.$valid'));
        var lastNameValid = element(by.binding('myForm.lastName.$valid'));
        var lastNameError = element(by.binding('myForm.lastName.$error'));
        var formValid = element(by.binding('myForm.$valid'));
        var userNameInput = element(by.model('user.name'));
        var userLastInput = element(by.model('user.last'));

        it('should initialize to model', function() {
          expect(user.getText()).toContain('{"name":"guest","last":"visitor"}');
          expect(userNameValid.getText()).toContain('true');
          expect(formValid.getText()).toContain('true');
        });

        it('should be invalid if empty when required', function() {
          userNameInput.clear();
          userNameInput.sendKeys('');

          expect(user.getText()).toContain('{"last":"visitor"}');
          expect(userNameValid.getText()).toContain('false');
          expect(formValid.getText()).toContain('false');
        });

        it('should be valid if empty when min length is set', function() {
          userLastInput.clear();
          userLastInput.sendKeys('');

          expect(user.getText()).toContain('{"name":"guest","last":""}');
          expect(lastNameValid.getText()).toContain('true');
          expect(formValid.getText()).toContain('true');
        });

        it('should be invalid if less than required min length', function() {
          userLastInput.clear();
          userLastInput.sendKeys('xx');

          expect(user.getText()).toContain('{"name":"guest"}');
          expect(lastNameValid.getText()).toContain('false');
          expect(lastNameError.getText()).toContain('minlength');
          expect(formValid.getText()).toContain('false');
        });

        it('should be invalid if longer than max length', function() {
          userLastInput.clear();
          userLastInput.sendKeys('some ridiculously long name');

          expect(user.getText()).toContain('{"name":"guest"}');
          expect(lastNameValid.getText()).toContain('false');
          expect(lastNameError.getText()).toContain('maxlength');
          expect(formValid.getText()).toContain('false');
        });
      </file>
    </example>
 */
var inputDirective = ['$browser', '$sniffer', '$filter', '$parse',
    function($browser, $sniffer, $filter, $parse) {
  return {
    restrict: 'E',
    require: ['?ngModel'],
    link: {
      pre: function(scope, element, attr, ctrls) {
        if (ctrls[0]) {
          (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrls[0], $sniffer,
                                                              $browser, $filter, $parse);
        }
      }
    }
  };
}];



var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/;
/**
 * @ngdoc directive
 * @name ngValue
 *
 * @description
 * Binds the given expression to the value of the element.
 *
 * It is mainly used on {@link input[radio] `input[radio]`} and option elements,
 * so that when the element is selected, the {@link ngModel `ngModel`} of that element (or its
 * {@link select `select`} parent element) is set to the bound value. It is especially useful
 * for dynamically generated lists using {@link ngRepeat `ngRepeat`}, as shown below.
 *
 * It can also be used to achieve one-way binding of a given expression to an input element
 * such as an `input[text]` or a `textarea`, when that element does not use ngModel.
 *
 * @element input
 * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute
 * and `value` property of the element.
 *
 * @example
    <example name="ngValue-directive" module="valueExample">
      <file name="index.html">
       <script>
          angular.module('valueExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.names = ['pizza', 'unicorns', 'robots'];
              $scope.my = { favorite: 'unicorns' };
            }]);
       </script>
        <form ng-controller="ExampleController">
          <h2>Which is your favorite?</h2>
            <label ng-repeat="name in names" for="{{name}}">
              {{name}}
              <input type="radio"
                     ng-model="my.favorite"
                     ng-value="name"
                     id="{{name}}"
                     name="favorite">
            </label>
          <div>You chose {{my.favorite}}</div>
        </form>
      </file>
      <file name="protractor.js" type="protractor">
        var favorite = element(by.binding('my.favorite'));

        it('should initialize to model', function() {
          expect(favorite.getText()).toContain('unicorns');
        });
        it('should bind the values to the inputs', function() {
          element.all(by.model('my.favorite')).get(0).click();
          expect(favorite.getText()).toContain('pizza');
        });
      </file>
    </example>
 */
var ngValueDirective = function() {
  /**
   *  inputs use the value attribute as their default value if the value property is not set.
   *  Once the value property has been set (by adding input), it will not react to changes to
   *  the value attribute anymore. Setting both attribute and property fixes this behavior, and
   *  makes it possible to use ngValue as a sort of one-way bind.
   */
  function updateElementValue(element, attr, value) {
    // Support: IE9 only
    // In IE9 values are converted to string (e.g. `input.value = null` results in `input.value === 'null'`).
    var propValue = isDefined(value) ? value : (msie === 9) ? '' : null;
    element.prop('value', propValue);
    attr.$set('value', value);
  }

  return {
    restrict: 'A',
    priority: 100,
    compile: function(tpl, tplAttr) {
      if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {
        return function ngValueConstantLink(scope, elm, attr) {
          var value = scope.$eval(attr.ngValue);
          updateElementValue(elm, attr, value);
        };
      } else {
        return function ngValueLink(scope, elm, attr) {
          scope.$watch(attr.ngValue, function valueWatchAction(value) {
            updateElementValue(elm, attr, value);
          });
        };
      }
    }
  };
};

/**
 * @ngdoc directive
 * @name ngBind
 * @restrict AC
 *
 * @description
 * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element
 * with the value of a given expression, and to update the text content when the value of that
 * expression changes.
 *
 * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like
 * `{{ expression }}` which is similar but less verbose.
 *
 * It is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily
 * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an
 * element attribute, it makes the bindings invisible to the user while the page is loading.
 *
 * An alternative solution to this problem would be using the
 * {@link ng.directive:ngCloak ngCloak} directive.
 *
 *
 * @element ANY
 * @param {expression} ngBind {@link guide/expression Expression} to evaluate.
 *
 * @example
 * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.
   <example module="bindExample" name="ng-bind">
     <file name="index.html">
       <script>
         angular.module('bindExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.name = 'Whirled';
           }]);
       </script>
       <div ng-controller="ExampleController">
         <label>Enter name: <input type="text" ng-model="name"></label><br>
         Hello <span ng-bind="name"></span>!
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-bind', function() {
         var nameInput = element(by.model('name'));

         expect(element(by.binding('name')).getText()).toBe('Whirled');
         nameInput.clear();
         nameInput.sendKeys('world');
         expect(element(by.binding('name')).getText()).toBe('world');
       });
     </file>
   </example>
 */
var ngBindDirective = ['$compile', function($compile) {
  return {
    restrict: 'AC',
    compile: function ngBindCompile(templateElement) {
      $compile.$$addBindingClass(templateElement);
      return function ngBindLink(scope, element, attr) {
        $compile.$$addBindingInfo(element, attr.ngBind);
        element = element[0];
        scope.$watch(attr.ngBind, function ngBindWatchAction(value) {
          element.textContent = stringify(value);
        });
      };
    }
  };
}];


/**
 * @ngdoc directive
 * @name ngBindTemplate
 *
 * @description
 * The `ngBindTemplate` directive specifies that the element
 * text content should be replaced with the interpolation of the template
 * in the `ngBindTemplate` attribute.
 * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`
 * expressions. This directive is needed since some HTML elements
 * (such as TITLE and OPTION) cannot contain SPAN elements.
 *
 * @element ANY
 * @param {string} ngBindTemplate template of form
 *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.
 *
 * @example
 * Try it here: enter text in text box and watch the greeting change.
   <example module="bindExample" name="ng-bind-template">
     <file name="index.html">
       <script>
         angular.module('bindExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.salutation = 'Hello';
             $scope.name = 'World';
           }]);
       </script>
       <div ng-controller="ExampleController">
        <label>Salutation: <input type="text" ng-model="salutation"></label><br>
        <label>Name: <input type="text" ng-model="name"></label><br>
        <pre ng-bind-template="{{salutation}} {{name}}!"></pre>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-bind', function() {
         var salutationElem = element(by.binding('salutation'));
         var salutationInput = element(by.model('salutation'));
         var nameInput = element(by.model('name'));

         expect(salutationElem.getText()).toBe('Hello World!');

         salutationInput.clear();
         salutationInput.sendKeys('Greetings');
         nameInput.clear();
         nameInput.sendKeys('user');

         expect(salutationElem.getText()).toBe('Greetings user!');
       });
     </file>
   </example>
 */
var ngBindTemplateDirective = ['$interpolate', '$compile', function($interpolate, $compile) {
  return {
    compile: function ngBindTemplateCompile(templateElement) {
      $compile.$$addBindingClass(templateElement);
      return function ngBindTemplateLink(scope, element, attr) {
        var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));
        $compile.$$addBindingInfo(element, interpolateFn.expressions);
        element = element[0];
        attr.$observe('ngBindTemplate', function(value) {
          element.textContent = isUndefined(value) ? '' : value;
        });
      };
    }
  };
}];


/**
 * @ngdoc directive
 * @name ngBindHtml
 *
 * @description
 * Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default,
 * the resulting HTML content will be sanitized using the {@link ngSanitize.$sanitize $sanitize} service.
 * To utilize this functionality, ensure that `$sanitize` is available, for example, by including {@link
 * ngSanitize} in your module's dependencies (not in core Angular). In order to use {@link ngSanitize}
 * in your module's dependencies, you need to include "angular-sanitize.js" in your application.
 *
 * You may also bypass sanitization for values you know are safe. To do so, bind to
 * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example
 * under {@link ng.$sce#show-me-an-example-using-sce- Strict Contextual Escaping (SCE)}.
 *
 * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you
 * will have an exception (instead of an exploit.)
 *
 * @element ANY
 * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.
 *
 * @example

   <example module="bindHtmlExample" deps="angular-sanitize.js" name="ng-bind-html">
     <file name="index.html">
       <div ng-controller="ExampleController">
        <p ng-bind-html="myHTML"></p>
       </div>
     </file>

     <file name="script.js">
       angular.module('bindHtmlExample', ['ngSanitize'])
         .controller('ExampleController', ['$scope', function($scope) {
           $scope.myHTML =
              'I am an <code>HTML</code>string with ' +
              '<a href="#">links!</a> and other <em>stuff</em>';
         }]);
     </file>

     <file name="protractor.js" type="protractor">
       it('should check ng-bind-html', function() {
         expect(element(by.binding('myHTML')).getText()).toBe(
             'I am an HTMLstring with links! and other stuff');
       });
     </file>
   </example>
 */
var ngBindHtmlDirective = ['$sce', '$parse', '$compile', function($sce, $parse, $compile) {
  return {
    restrict: 'A',
    compile: function ngBindHtmlCompile(tElement, tAttrs) {
      var ngBindHtmlGetter = $parse(tAttrs.ngBindHtml);
      var ngBindHtmlWatch = $parse(tAttrs.ngBindHtml, function sceValueOf(val) {
        // Unwrap the value to compare the actual inner safe value, not the wrapper object.
        return $sce.valueOf(val);
      });
      $compile.$$addBindingClass(tElement);

      return function ngBindHtmlLink(scope, element, attr) {
        $compile.$$addBindingInfo(element, attr.ngBindHtml);

        scope.$watch(ngBindHtmlWatch, function ngBindHtmlWatchAction() {
          // The watched value is the unwrapped value. To avoid re-escaping, use the direct getter.
          var value = ngBindHtmlGetter(scope);
          element.html($sce.getTrustedHtml(value) || '');
        });
      };
    }
  };
}];

/**
 * @ngdoc directive
 * @name ngChange
 *
 * @description
 * Evaluate the given expression when the user changes the input.
 * The expression is evaluated immediately, unlike the JavaScript onchange event
 * which only triggers at the end of a change (usually, when the user leaves the
 * form element or presses the return key).
 *
 * The `ngChange` expression is only evaluated when a change in the input value causes
 * a new value to be committed to the model.
 *
 * It will not be evaluated:
 * * if the value returned from the `$parsers` transformation pipeline has not changed
 * * if the input has continued to be invalid since the model will stay `null`
 * * if the model is changed programmatically and not by a change to the input value
 *
 *
 * Note, this directive requires `ngModel` to be present.
 *
 * @element input
 * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change
 * in input value.
 *
 * @example
 * <example name="ngChange-directive" module="changeExample">
 *   <file name="index.html">
 *     <script>
 *       angular.module('changeExample', [])
 *         .controller('ExampleController', ['$scope', function($scope) {
 *           $scope.counter = 0;
 *           $scope.change = function() {
 *             $scope.counter++;
 *           };
 *         }]);
 *     </script>
 *     <div ng-controller="ExampleController">
 *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />
 *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />
 *       <label for="ng-change-example2">Confirmed</label><br />
 *       <tt>debug = {{confirmed}}</tt><br/>
 *       <tt>counter = {{counter}}</tt><br/>
 *     </div>
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     var counter = element(by.binding('counter'));
 *     var debug = element(by.binding('confirmed'));
 *
 *     it('should evaluate the expression if changing from view', function() {
 *       expect(counter.getText()).toContain('0');
 *
 *       element(by.id('ng-change-example1')).click();
 *
 *       expect(counter.getText()).toContain('1');
 *       expect(debug.getText()).toContain('true');
 *     });
 *
 *     it('should not evaluate the expression if changing from model', function() {
 *       element(by.id('ng-change-example2')).click();

 *       expect(counter.getText()).toContain('0');
 *       expect(debug.getText()).toContain('true');
 *     });
 *   </file>
 * </example>
 */
var ngChangeDirective = valueFn({
  restrict: 'A',
  require: 'ngModel',
  link: function(scope, element, attr, ctrl) {
    ctrl.$viewChangeListeners.push(function() {
      scope.$eval(attr.ngChange);
    });
  }
});

/* exported
  ngClassDirective,
  ngClassEvenDirective,
  ngClassOddDirective
*/

function classDirective(name, selector) {
  name = 'ngClass' + name;
  var indexWatchExpression;

  return ['$parse', function($parse) {
    return {
      restrict: 'AC',
      link: function(scope, element, attr) {
        var expression = attr[name].trim();
        var isOneTime = (expression.charAt(0) === ':') && (expression.charAt(1) === ':');

        var watchInterceptor = isOneTime ? toFlatValue : toClassString;
        var watchExpression = $parse(expression, watchInterceptor);
        var watchAction = isOneTime ? ngClassOneTimeWatchAction : ngClassWatchAction;

        var classCounts = element.data('$classCounts');
        var oldModulo = true;
        var oldClassString;

        if (!classCounts) {
          // Use createMap() to prevent class assumptions involving property
          // names in Object.prototype
          classCounts = createMap();
          element.data('$classCounts', classCounts);
        }

        if (name !== 'ngClass') {
          if (!indexWatchExpression) {
            indexWatchExpression = $parse('$index', function moduloTwo($index) {
              // eslint-disable-next-line no-bitwise
              return $index & 1;
            });
          }

          scope.$watch(indexWatchExpression, ngClassIndexWatchAction);
        }

        scope.$watch(watchExpression, watchAction, isOneTime);

        function addClasses(classString) {
          classString = digestClassCounts(split(classString), 1);
          attr.$addClass(classString);
        }

        function removeClasses(classString) {
          classString = digestClassCounts(split(classString), -1);
          attr.$removeClass(classString);
        }

        function updateClasses(oldClassString, newClassString) {
          var oldClassArray = split(oldClassString);
          var newClassArray = split(newClassString);

          var toRemoveArray = arrayDifference(oldClassArray, newClassArray);
          var toAddArray = arrayDifference(newClassArray, oldClassArray);

          var toRemoveString = digestClassCounts(toRemoveArray, -1);
          var toAddString = digestClassCounts(toAddArray, 1);

          attr.$addClass(toAddString);
          attr.$removeClass(toRemoveString);
        }

        function digestClassCounts(classArray, count) {
          var classesToUpdate = [];

          forEach(classArray, function(className) {
            if (count > 0 || classCounts[className]) {
              classCounts[className] = (classCounts[className] || 0) + count;
              if (classCounts[className] === +(count > 0)) {
                classesToUpdate.push(className);
              }
            }
          });

          return classesToUpdate.join(' ');
        }

        function ngClassIndexWatchAction(newModulo) {
          // This watch-action should run before the `ngClass[OneTime]WatchAction()`, thus it
          // adds/removes `oldClassString`. If the `ngClass` expression has changed as well, the
          // `ngClass[OneTime]WatchAction()` will update the classes.
          if (newModulo === selector) {
            addClasses(oldClassString);
          } else {
            removeClasses(oldClassString);
          }

          oldModulo = newModulo;
        }

        function ngClassOneTimeWatchAction(newClassValue) {
          var newClassString = toClassString(newClassValue);

          if (newClassString !== oldClassString) {
            ngClassWatchAction(newClassString);
          }
        }

        function ngClassWatchAction(newClassString) {
          if (oldModulo === selector) {
            updateClasses(oldClassString, newClassString);
          }

          oldClassString = newClassString;
        }
      }
    };
  }];

  // Helpers
  function arrayDifference(tokens1, tokens2) {
    if (!tokens1 || !tokens1.length) return [];
    if (!tokens2 || !tokens2.length) return tokens1;

    var values = [];

    outer:
    for (var i = 0; i < tokens1.length; i++) {
      var token = tokens1[i];
      for (var j = 0; j < tokens2.length; j++) {
        if (token === tokens2[j]) continue outer;
      }
      values.push(token);
    }

    return values;
  }

  function split(classString) {
    return classString && classString.split(' ');
  }

  function toClassString(classValue) {
    var classString = classValue;

    if (isArray(classValue)) {
      classString = classValue.map(toClassString).join(' ');
    } else if (isObject(classValue)) {
      classString = Object.keys(classValue).
        filter(function(key) { return classValue[key]; }).
        join(' ');
    }

    return classString;
  }

  function toFlatValue(classValue) {
    var flatValue = classValue;

    if (isArray(classValue)) {
      flatValue = classValue.map(toFlatValue);
    } else if (isObject(classValue)) {
      var hasUndefined = false;

      flatValue = Object.keys(classValue).filter(function(key) {
        var value = classValue[key];

        if (!hasUndefined && isUndefined(value)) {
          hasUndefined = true;
        }

        return value;
      });

      if (hasUndefined) {
        // Prevent the `oneTimeLiteralWatchInterceptor` from unregistering
        // the watcher, by including at least one `undefined` value.
        flatValue.push(undefined);
      }
    }

    return flatValue;
  }
}

/**
 * @ngdoc directive
 * @name ngClass
 * @restrict AC
 *
 * @description
 * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding
 * an expression that represents all classes to be added.
 *
 * The directive operates in three different ways, depending on which of three types the expression
 * evaluates to:
 *
 * 1. If the expression evaluates to a string, the string should be one or more space-delimited class
 * names.
 *
 * 2. If the expression evaluates to an object, then for each key-value pair of the
 * object with a truthy value the corresponding key is used as a class name.
 *
 * 3. If the expression evaluates to an array, each element of the array should either be a string as in
 * type 1 or an object as in type 2. This means that you can mix strings and objects together in an array
 * to give you more control over what CSS classes appear. See the code below for an example of this.
 *
 *
 * The directive won't add duplicate classes if a particular class was already set.
 *
 * When the expression changes, the previously added classes are removed and only then are the
 * new classes added.
 *
 * @knownIssue
 * You should not use {@link guide/interpolation interpolation} in the value of the `class`
 * attribute, when using the `ngClass` directive on the same element.
 * See {@link guide/interpolation#known-issues here} for more info.
 *
 * @animations
 * | Animation                        | Occurs                              |
 * |----------------------------------|-------------------------------------|
 * | {@link ng.$animate#addClass addClass}       | just before the class is applied to the element   |
 * | {@link ng.$animate#removeClass removeClass} | just before the class is removed from the element |
 *
 * @element ANY
 * @param {expression} ngClass {@link guide/expression Expression} to eval. The result
 *   of the evaluation can be a string representing space delimited class
 *   names, an array, or a map of class names to boolean values. In the case of a map, the
 *   names of the properties whose values are truthy will be added as css classes to the
 *   element.
 *
 * @example Example that demonstrates basic bindings via ngClass directive.
   <example name="ng-class">
     <file name="index.html">
       <p ng-class="{strike: deleted, bold: important, 'has-error': error}">Map Syntax Example</p>
       <label>
          <input type="checkbox" ng-model="deleted">
          deleted (apply "strike" class)
       </label><br>
       <label>
          <input type="checkbox" ng-model="important">
          important (apply "bold" class)
       </label><br>
       <label>
          <input type="checkbox" ng-model="error">
          error (apply "has-error" class)
       </label>
       <hr>
       <p ng-class="style">Using String Syntax</p>
       <input type="text" ng-model="style"
              placeholder="Type: bold strike red" aria-label="Type: bold strike red">
       <hr>
       <p ng-class="[style1, style2, style3]">Using Array Syntax</p>
       <input ng-model="style1"
              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red"><br>
       <input ng-model="style2"
              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 2"><br>
       <input ng-model="style3"
              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 3"><br>
       <hr>
       <p ng-class="[style4, {orange: warning}]">Using Array and Map Syntax</p>
       <input ng-model="style4" placeholder="Type: bold, strike" aria-label="Type: bold, strike"><br>
       <label><input type="checkbox" ng-model="warning"> warning (apply "orange" class)</label>
     </file>
     <file name="style.css">
       .strike {
           text-decoration: line-through;
       }
       .bold {
           font-weight: bold;
       }
       .red {
           color: red;
       }
       .has-error {
           color: red;
           background-color: yellow;
       }
       .orange {
           color: orange;
       }
     </file>
     <file name="protractor.js" type="protractor">
       var ps = element.all(by.css('p'));

       it('should let you toggle the class', function() {

         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);
         expect(ps.first().getAttribute('class')).not.toMatch(/has-error/);

         element(by.model('important')).click();
         expect(ps.first().getAttribute('class')).toMatch(/bold/);

         element(by.model('error')).click();
         expect(ps.first().getAttribute('class')).toMatch(/has-error/);
       });

       it('should let you toggle string example', function() {
         expect(ps.get(1).getAttribute('class')).toBe('');
         element(by.model('style')).clear();
         element(by.model('style')).sendKeys('red');
         expect(ps.get(1).getAttribute('class')).toBe('red');
       });

       it('array example should have 3 classes', function() {
         expect(ps.get(2).getAttribute('class')).toBe('');
         element(by.model('style1')).sendKeys('bold');
         element(by.model('style2')).sendKeys('strike');
         element(by.model('style3')).sendKeys('red');
         expect(ps.get(2).getAttribute('class')).toBe('bold strike red');
       });

       it('array with map example should have 2 classes', function() {
         expect(ps.last().getAttribute('class')).toBe('');
         element(by.model('style4')).sendKeys('bold');
         element(by.model('warning')).click();
         expect(ps.last().getAttribute('class')).toBe('bold orange');
       });
     </file>
   </example>

   ## Animations

   The example below demonstrates how to perform animations using ngClass.

   <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-class">
     <file name="index.html">
      <input id="setbtn" type="button" value="set" ng-click="myVar='my-class'">
      <input id="clearbtn" type="button" value="clear" ng-click="myVar=''">
      <br>
      <span class="base-class" ng-class="myVar">Sample Text</span>
     </file>
     <file name="style.css">
       .base-class {
         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
       }

       .base-class.my-class {
         color: red;
         font-size:3em;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class', function() {
         expect(element(by.css('.base-class')).getAttribute('class')).not.
           toMatch(/my-class/);

         element(by.id('setbtn')).click();

         expect(element(by.css('.base-class')).getAttribute('class')).
           toMatch(/my-class/);

         element(by.id('clearbtn')).click();

         expect(element(by.css('.base-class')).getAttribute('class')).not.
           toMatch(/my-class/);
       });
     </file>
   </example>


   ## ngClass and pre-existing CSS3 Transitions/Animations
   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder
   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure
   to view the step by step details of {@link $animate#addClass $animate.addClass} and
   {@link $animate#removeClass $animate.removeClass}.
 */
var ngClassDirective = classDirective('', true);

/**
 * @ngdoc directive
 * @name ngClassOdd
 * @restrict AC
 *
 * @description
 * The `ngClassOdd` and `ngClassEven` directives work exactly as
 * {@link ng.directive:ngClass ngClass}, except they work in
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
 *
 * This directive can be applied only within the scope of an
 * {@link ng.directive:ngRepeat ngRepeat}.
 *
 * @element ANY
 * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result
 *   of the evaluation can be a string representing space delimited class names or an array.
 *
 * @example
   <example name="ng-class-odd">
     <file name="index.html">
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
          <li ng-repeat="name in names">
           <span ng-class-odd="'odd'" ng-class-even="'even'">
             {{name}}
           </span>
          </li>
        </ol>
     </file>
     <file name="style.css">
       .odd {
         color: red;
       }
       .even {
         color: blue;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class-odd and ng-class-even', function() {
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
           toMatch(/odd/);
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
           toMatch(/even/);
       });
     </file>
   </example>
 */
var ngClassOddDirective = classDirective('Odd', 0);

/**
 * @ngdoc directive
 * @name ngClassEven
 * @restrict AC
 *
 * @description
 * The `ngClassOdd` and `ngClassEven` directives work exactly as
 * {@link ng.directive:ngClass ngClass}, except they work in
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
 *
 * This directive can be applied only within the scope of an
 * {@link ng.directive:ngRepeat ngRepeat}.
 *
 * @element ANY
 * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The
 *   result of the evaluation can be a string representing space delimited class names or an array.
 *
 * @example
   <example name="ng-class-even">
     <file name="index.html">
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
          <li ng-repeat="name in names">
           <span ng-class-odd="'odd'" ng-class-even="'even'">
             {{name}} &nbsp; &nbsp; &nbsp;
           </span>
          </li>
        </ol>
     </file>
     <file name="style.css">
       .odd {
         color: red;
       }
       .even {
         color: blue;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class-odd and ng-class-even', function() {
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
           toMatch(/odd/);
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
           toMatch(/even/);
       });
     </file>
   </example>
 */
var ngClassEvenDirective = classDirective('Even', 1);

/**
 * @ngdoc directive
 * @name ngCloak
 * @restrict AC
 *
 * @description
 * The `ngCloak` directive is used to prevent the Angular html template from being briefly
 * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this
 * directive to avoid the undesirable flicker effect caused by the html template display.
 *
 * The directive can be applied to the `<body>` element, but the preferred usage is to apply
 * multiple `ngCloak` directives to small portions of the page to permit progressive rendering
 * of the browser view.
 *
 * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and
 * `angular.min.js`.
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
 *
 * ```css
 * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
 *   display: none !important;
 * }
 * ```
 *
 * When this css rule is loaded by the browser, all html elements (including their children) that
 * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive
 * during the compilation of the template it deletes the `ngCloak` element attribute, making
 * the compiled element visible.
 *
 * For the best result, the `angular.js` script must be loaded in the head section of the html
 * document; alternatively, the css rule above must be included in the external stylesheet of the
 * application.
 *
 * @element ANY
 *
 * @example
   <example name="ng-cloak">
     <file name="index.html">
        <div id="template1" ng-cloak>{{ 'hello' }}</div>
        <div id="template2" class="ng-cloak">{{ 'world' }}</div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should remove the template directive and css class', function() {
         expect($('#template1').getAttribute('ng-cloak')).
           toBeNull();
         expect($('#template2').getAttribute('ng-cloak')).
           toBeNull();
       });
     </file>
   </example>
 *
 */
var ngCloakDirective = ngDirective({
  compile: function(element, attr) {
    attr.$set('ngCloak', undefined);
    element.removeClass('ng-cloak');
  }
});

/**
 * @ngdoc directive
 * @name ngController
 *
 * @description
 * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular
 * supports the principles behind the Model-View-Controller design pattern.
 *
 * MVC components in angular:
 *
 * * Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties
 *   are accessed through bindings.
 * * View — The template (HTML with data bindings) that is rendered into the View.
 * * Controller — The `ngController` directive specifies a Controller class; the class contains business
 *   logic behind the application to decorate the scope with functions and values
 *
 * Note that you can also attach controllers to the DOM by declaring it in a route definition
 * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller
 * again using `ng-controller` in the template itself.  This will cause the controller to be attached
 * and executed twice.
 *
 * @element ANY
 * @scope
 * @priority 500
 * @param {expression} ngController Name of a constructor function registered with the current
 * {@link ng.$controllerProvider $controllerProvider} or an {@link guide/expression expression}
 * that on the current scope evaluates to a constructor function.
 *
 * The controller instance can be published into a scope property by specifying
 * `ng-controller="as propertyName"`.
 *
 * If the current `$controllerProvider` is configured to use globals (via
 * {@link ng.$controllerProvider#allowGlobals `$controllerProvider.allowGlobals()` }), this may
 * also be the name of a globally accessible constructor function (deprecated, not recommended).
 *
 * @example
 * Here is a simple form for editing user contact information. Adding, removing, clearing, and
 * greeting are methods declared on the controller (see source tab). These methods can
 * easily be called from the angular markup. Any changes to the data are automatically reflected
 * in the View without the need for a manual update.
 *
 * Two different declaration styles are included below:
 *
 * * one binds methods and properties directly onto the controller using `this`:
 * `ng-controller="SettingsController1 as settings"`
 * * one injects `$scope` into the controller:
 * `ng-controller="SettingsController2"`
 *
 * The second option is more common in the Angular community, and is generally used in boilerplates
 * and in this guide. However, there are advantages to binding properties directly to the controller
 * and avoiding scope.
 *
 * * Using `controller as` makes it obvious which controller you are accessing in the template when
 * multiple controllers apply to an element.
 * * If you are writing your controllers as classes you have easier access to the properties and
 * methods, which will appear on the scope, from inside the controller code.
 * * Since there is always a `.` in the bindings, you don't have to worry about prototypal
 * inheritance masking primitives.
 *
 * This example demonstrates the `controller as` syntax.
 *
 * <example name="ngControllerAs" module="controllerAsExample">
 *   <file name="index.html">
 *    <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">
 *      <label>Name: <input type="text" ng-model="settings.name"/></label>
 *      <button ng-click="settings.greet()">greet</button><br/>
 *      Contact:
 *      <ul>
 *        <li ng-repeat="contact in settings.contacts">
 *          <select ng-model="contact.type" aria-label="Contact method" id="select_{{$index}}">
 *             <option>phone</option>
 *             <option>email</option>
 *          </select>
 *          <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
 *          <button ng-click="settings.clearContact(contact)">clear</button>
 *          <button ng-click="settings.removeContact(contact)" aria-label="Remove">X</button>
 *        </li>
 *        <li><button ng-click="settings.addContact()">add</button></li>
 *     </ul>
 *    </div>
 *   </file>
 *   <file name="app.js">
 *    angular.module('controllerAsExample', [])
 *      .controller('SettingsController1', SettingsController1);
 *
 *    function SettingsController1() {
 *      this.name = 'John Smith';
 *      this.contacts = [
 *        {type: 'phone', value: '408 555 1212'},
 *        {type: 'email', value: 'john.smith@example.org'}
 *      ];
 *    }
 *
 *    SettingsController1.prototype.greet = function() {
 *      alert(this.name);
 *    };
 *
 *    SettingsController1.prototype.addContact = function() {
 *      this.contacts.push({type: 'email', value: 'yourname@example.org'});
 *    };
 *
 *    SettingsController1.prototype.removeContact = function(contactToRemove) {
 *     var index = this.contacts.indexOf(contactToRemove);
 *      this.contacts.splice(index, 1);
 *    };
 *
 *    SettingsController1.prototype.clearContact = function(contact) {
 *      contact.type = 'phone';
 *      contact.value = '';
 *    };
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     it('should check controller as', function() {
 *       var container = element(by.id('ctrl-as-exmpl'));
 *         expect(container.element(by.model('settings.name'))
 *           .getAttribute('value')).toBe('John Smith');
 *
 *       var firstRepeat =
 *           container.element(by.repeater('contact in settings.contacts').row(0));
 *       var secondRepeat =
 *           container.element(by.repeater('contact in settings.contacts').row(1));
 *
 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('408 555 1212');
 *
 *       expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('john.smith@example.org');
 *
 *       firstRepeat.element(by.buttonText('clear')).click();
 *
 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('');
 *
 *       container.element(by.buttonText('add')).click();
 *
 *       expect(container.element(by.repeater('contact in settings.contacts').row(2))
 *           .element(by.model('contact.value'))
 *           .getAttribute('value'))
 *           .toBe('yourname@example.org');
 *     });
 *   </file>
 * </example>
 *
 * This example demonstrates the "attach to `$scope`" style of controller.
 *
 * <example name="ngController" module="controllerExample">
 *  <file name="index.html">
 *   <div id="ctrl-exmpl" ng-controller="SettingsController2">
 *     <label>Name: <input type="text" ng-model="name"/></label>
 *     <button ng-click="greet()">greet</button><br/>
 *     Contact:
 *     <ul>
 *       <li ng-repeat="contact in contacts">
 *         <select ng-model="contact.type" id="select_{{$index}}">
 *            <option>phone</option>
 *            <option>email</option>
 *         </select>
 *         <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
 *         <button ng-click="clearContact(contact)">clear</button>
 *         <button ng-click="removeContact(contact)">X</button>
 *       </li>
 *       <li>[ <button ng-click="addContact()">add</button> ]</li>
 *    </ul>
 *   </div>
 *  </file>
 *  <file name="app.js">
 *   angular.module('controllerExample', [])
 *     .controller('SettingsController2', ['$scope', SettingsController2]);
 *
 *   function SettingsController2($scope) {
 *     $scope.name = 'John Smith';
 *     $scope.contacts = [
 *       {type:'phone', value:'408 555 1212'},
 *       {type:'email', value:'john.smith@example.org'}
 *     ];
 *
 *     $scope.greet = function() {
 *       alert($scope.name);
 *     };
 *
 *     $scope.addContact = function() {
 *       $scope.contacts.push({type:'email', value:'yourname@example.org'});
 *     };
 *
 *     $scope.removeContact = function(contactToRemove) {
 *       var index = $scope.contacts.indexOf(contactToRemove);
 *       $scope.contacts.splice(index, 1);
 *     };
 *
 *     $scope.clearContact = function(contact) {
 *       contact.type = 'phone';
 *       contact.value = '';
 *     };
 *   }
 *  </file>
 *  <file name="protractor.js" type="protractor">
 *    it('should check controller', function() {
 *      var container = element(by.id('ctrl-exmpl'));
 *
 *      expect(container.element(by.model('name'))
 *          .getAttribute('value')).toBe('John Smith');
 *
 *      var firstRepeat =
 *          container.element(by.repeater('contact in contacts').row(0));
 *      var secondRepeat =
 *          container.element(by.repeater('contact in contacts').row(1));
 *
 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('408 555 1212');
 *      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('john.smith@example.org');
 *
 *      firstRepeat.element(by.buttonText('clear')).click();
 *
 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('');
 *
 *      container.element(by.buttonText('add')).click();
 *
 *      expect(container.element(by.repeater('contact in contacts').row(2))
 *          .element(by.model('contact.value'))
 *          .getAttribute('value'))
 *          .toBe('yourname@example.org');
 *    });
 *  </file>
 *</example>

 */
var ngControllerDirective = [function() {
  return {
    restrict: 'A',
    scope: true,
    controller: '@',
    priority: 500
  };
}];

/**
 * @ngdoc directive
 * @name ngCsp
 *
 * @restrict A
 * @element ANY
 * @description
 *
 * Angular has some features that can conflict with certain restrictions that are applied when using
 * [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) rules.
 *
 * If you intend to implement CSP with these rules then you must tell Angular not to use these
 * features.
 *
 * This is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.
 *
 *
 * The following default rules in CSP affect Angular:
 *
 * * The use of `eval()`, `Function(string)` and similar functions to dynamically create and execute
 * code from strings is forbidden. Angular makes use of this in the {@link $parse} service to
 * provide a 30% increase in the speed of evaluating Angular expressions. (This CSP rule can be
 * disabled with the CSP keyword `unsafe-eval`, but it is generally not recommended as it would
 * weaken the protections offered by CSP.)
 *
 * * The use of inline resources, such as inline `<script>` and `<style>` elements, are forbidden.
 * This prevents apps from injecting custom styles directly into the document. Angular makes use of
 * this to include some CSS rules (e.g. {@link ngCloak} and {@link ngHide}). To make these
 * directives work when a CSP rule is blocking inline styles, you must link to the `angular-csp.css`
 * in your HTML manually. (This CSP rule can be disabled with the CSP keyword `unsafe-inline`, but
 * it is generally not recommended as it would weaken the protections offered by CSP.)
 *
 * If you do not provide `ngCsp` then Angular tries to autodetect if CSP is blocking dynamic code
 * creation from strings (e.g., `unsafe-eval` not specified in CSP header) and automatically
 * deactivates this feature in the {@link $parse} service. This autodetection, however, triggers a
 * CSP error to be logged in the console:
 *
 * ```
 * Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of
 * script in the following Content Security Policy directive: "default-src 'self'". Note that
 * 'script-src' was not explicitly set, so 'default-src' is used as a fallback.
 * ```
 *
 * This error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`
 * directive on an element of the HTML document that appears before the `<script>` tag that loads
 * the `angular.js` file.
 *
 * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*
 *
 * You can specify which of the CSP related Angular features should be deactivated by providing
 * a value for the `ng-csp` attribute. The options are as follows:
 *
 * * no-inline-style: this stops Angular from injecting CSS styles into the DOM
 *
 * * no-unsafe-eval: this stops Angular from optimizing $parse with unsafe eval of strings
 *
 * You can use these values in the following combinations:
 *
 *
 * * No declaration means that Angular will assume that you can do inline styles, but it will do
 * a runtime check for unsafe-eval. E.g. `<body>`. This is backwardly compatible with previous
 * versions of Angular.
 *
 * * A simple `ng-csp` (or `data-ng-csp`) attribute will tell Angular to deactivate both inline
 * styles and unsafe eval. E.g. `<body ng-csp>`. This is backwardly compatible with previous
 * versions of Angular.
 *
 * * Specifying only `no-unsafe-eval` tells Angular that we must not use eval, but that we can
 * inject inline styles. E.g. `<body ng-csp="no-unsafe-eval">`.
 *
 * * Specifying only `no-inline-style` tells Angular that we must not inject styles, but that we can
 * run eval - no automatic check for unsafe eval will occur. E.g. `<body ng-csp="no-inline-style">`
 *
 * * Specifying both `no-unsafe-eval` and `no-inline-style` tells Angular that we must not inject
 * styles nor use eval, which is the same as an empty: ng-csp.
 * E.g.`<body ng-csp="no-inline-style;no-unsafe-eval">`
 *
 * @example
 * This example shows how to apply the `ngCsp` directive to the `html` tag.
   ```html
     <!doctype html>
     <html ng-app ng-csp>
     ...
     ...
     </html>
   ```
  * @example
      <!-- Note: the `.csp` suffix in the example name triggers CSP mode in our http server! -->
      <example name="example.csp" module="cspExample" ng-csp="true">
        <file name="index.html">
          <div ng-controller="MainController as ctrl">
            <div>
              <button ng-click="ctrl.inc()" id="inc">Increment</button>
              <span id="counter">
                {{ctrl.counter}}
              </span>
            </div>

            <div>
              <button ng-click="ctrl.evil()" id="evil">Evil</button>
              <span id="evilError">
                {{ctrl.evilError}}
              </span>
            </div>
          </div>
        </file>
        <file name="script.js">
           angular.module('cspExample', [])
             .controller('MainController', function MainController() {
                this.counter = 0;
                this.inc = function() {
                  this.counter++;
                };
                this.evil = function() {
                  try {
                    eval('1+2'); // eslint-disable-line no-eval
                  } catch (e) {
                    this.evilError = e.message;
                  }
                };
              });
        </file>
        <file name="protractor.js" type="protractor">
          var util, webdriver;

          var incBtn = element(by.id('inc'));
          var counter = element(by.id('counter'));
          var evilBtn = element(by.id('evil'));
          var evilError = element(by.id('evilError'));

          function getAndClearSevereErrors() {
            return browser.manage().logs().get('browser').then(function(browserLog) {
              return browserLog.filter(function(logEntry) {
                return logEntry.level.value > webdriver.logging.Level.WARNING.value;
              });
            });
          }

          function clearErrors() {
            getAndClearSevereErrors();
          }

          function expectNoErrors() {
            getAndClearSevereErrors().then(function(filteredLog) {
              expect(filteredLog.length).toEqual(0);
              if (filteredLog.length) {
                console.log('browser console errors: ' + util.inspect(filteredLog));
              }
            });
          }

          function expectError(regex) {
            getAndClearSevereErrors().then(function(filteredLog) {
              var found = false;
              filteredLog.forEach(function(log) {
                if (log.message.match(regex)) {
                  found = true;
                }
              });
              if (!found) {
                throw new Error('expected an error that matches ' + regex);
              }
            });
          }

          beforeEach(function() {
            util = require('util');
            webdriver = require('selenium-webdriver');
          });

          // For now, we only test on Chrome,
          // as Safari does not load the page with Protractor's injected scripts,
          // and Firefox webdriver always disables content security policy (#6358)
          if (browser.params.browser !== 'chrome') {
            return;
          }

          it('should not report errors when the page is loaded', function() {
            // clear errors so we are not dependent on previous tests
            clearErrors();
            // Need to reload the page as the page is already loaded when
            // we come here
            browser.driver.getCurrentUrl().then(function(url) {
              browser.get(url);
            });
            expectNoErrors();
          });

          it('should evaluate expressions', function() {
            expect(counter.getText()).toEqual('0');
            incBtn.click();
            expect(counter.getText()).toEqual('1');
            expectNoErrors();
          });

          it('should throw and report an error when using "eval"', function() {
            evilBtn.click();
            expect(evilError.getText()).toMatch(/Content Security Policy/);
            expectError(/Content Security Policy/);
          });
        </file>
      </example>
  */

// `ngCsp` is not implemented as a proper directive any more, because we need it be processed while
// we bootstrap the app (before `$parse` is instantiated). For this reason, we just have the `csp()`
// fn that looks for the `ng-csp` attribute anywhere in the current doc.

/**
 * @ngdoc directive
 * @name ngClick
 *
 * @description
 * The ngClick directive allows you to specify custom behavior when
 * an element is clicked.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon
 * click. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example name="ng-click">
     <file name="index.html">
      <button ng-click="count = count + 1" ng-init="count=0">
        Increment
      </button>
      <span>
        count: {{count}}
      </span>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-click', function() {
         expect(element(by.binding('count')).getText()).toMatch('0');
         element(by.css('button')).click();
         expect(element(by.binding('count')).getText()).toMatch('1');
       });
     </file>
   </example>
 */
/*
 * A collection of directives that allows creation of custom event handlers that are defined as
 * angular expressions and are compiled and executed within the current scope.
 */
var ngEventDirectives = {};

// For events that might fire synchronously during DOM manipulation
// we need to execute their event handlers asynchronously using $evalAsync,
// so that they are not executed in an inconsistent state.
var forceAsyncEvents = {
  'blur': true,
  'focus': true
};
forEach(
  'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '),
  function(eventName) {
    var directiveName = directiveNormalize('ng-' + eventName);
    ngEventDirectives[directiveName] = ['$parse', '$rootScope', function($parse, $rootScope) {
      return {
        restrict: 'A',
        compile: function($element, attr) {
          // NOTE:
          // We expose the powerful `$event` object on the scope that provides access to the Window,
          // etc. This is OK, because expressions are not sandboxed any more (and the expression
          // sandbox was never meant to be a security feature anyway).
          var fn = $parse(attr[directiveName]);
          return function ngEventHandler(scope, element) {
            element.on(eventName, function(event) {
              var callback = function() {
                fn(scope, {$event: event});
              };
              if (forceAsyncEvents[eventName] && $rootScope.$$phase) {
                scope.$evalAsync(callback);
              } else {
                scope.$apply(callback);
              }
            });
          };
        }
      };
    }];
  }
);

/**
 * @ngdoc directive
 * @name ngDblclick
 *
 * @description
 * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon
 * a dblclick. (The Event object is available as `$event`)
 *
 * @example
   <example name="ng-dblclick">
     <file name="index.html">
      <button ng-dblclick="count = count + 1" ng-init="count=0">
        Increment (on double click)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngMousedown
 *
 * @description
 * The ngMousedown directive allows you to specify custom behavior on mousedown event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon
 * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example name="ng-mousedown">
     <file name="index.html">
      <button ng-mousedown="count = count + 1" ng-init="count=0">
        Increment (on mouse down)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngMouseup
 *
 * @description
 * Specify custom behavior on mouseup event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon
 * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example name="ng-mouseup">
     <file name="index.html">
      <button ng-mouseup="count = count + 1" ng-init="count=0">
        Increment (on mouse up)
      </button>
      count: {{count}}
     </file>
   </example>
 */

/**
 * @ngdoc directive
 * @name ngMouseover
 *
 * @description
 * Specify custom behavior on mouseover event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon
 * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example name="ng-mouseover">
     <file name="index.html">
      <button ng-mouseover="count = count + 1" ng-init="count=0">
        Increment (when mouse is over)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngMouseenter
 *
 * @description
 * Specify custom behavior on mouseenter event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon
 * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example name="ng-mouseenter">
     <file name="index.html">
      <button ng-mouseenter="count = count + 1" ng-init="count=0">
        Increment (when mouse enters)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngMouseleave
 *
 * @description
 * Specify custom behavior on mouseleave event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon
 * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example name="ng-mouseleave">
     <file name="index.html">
      <button ng-mouseleave="count = count + 1" ng-init="count=0">
        Increment (when mouse leaves)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngMousemove
 *
 * @description
 * Specify custom behavior on mousemove event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon
 * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example name="ng-mousemove">
     <file name="index.html">
      <button ng-mousemove="count = count + 1" ng-init="count=0">
        Increment (when mouse moves)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngKeydown
 *
 * @description
 * Specify custom behavior on keydown event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon
 * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example name="ng-keydown">
     <file name="index.html">
      <input ng-keydown="count = count + 1" ng-init="count=0">
      key down count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngKeyup
 *
 * @description
 * Specify custom behavior on keyup event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon
 * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example name="ng-keyup">
     <file name="index.html">
       <p>Typing in the input box below updates the key count</p>
       <input ng-keyup="count = count + 1" ng-init="count=0"> key up count: {{count}}

       <p>Typing in the input box below updates the keycode</p>
       <input ng-keyup="event=$event">
       <p>event keyCode: {{ event.keyCode }}</p>
       <p>event altKey: {{ event.altKey }}</p>
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngKeypress
 *
 * @description
 * Specify custom behavior on keypress event.
 *
 * @element ANY
 * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon
 * keypress. ({@link guide/expression#-event- Event object is available as `$event`}
 * and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example name="ng-keypress">
     <file name="index.html">
      <input ng-keypress="count = count + 1" ng-init="count=0">
      key press count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngSubmit
 *
 * @description
 * Enables binding angular expressions to onsubmit events.
 *
 * Additionally it prevents the default action (which for form means sending the request to the
 * server and reloading the current page), but only if the form does not contain `action`,
 * `data-action`, or `x-action` attributes.
 *
 * <div class="alert alert-warning">
 * **Warning:** Be careful not to cause "double-submission" by using both the `ngClick` and
 * `ngSubmit` handlers together. See the
 * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}
 * for a detailed discussion of when `ngSubmit` may be triggered.
 * </div>
 *
 * @element form
 * @priority 0
 * @param {expression} ngSubmit {@link guide/expression Expression} to eval.
 * ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example module="submitExample" name="ng-submit">
     <file name="index.html">
      <script>
        angular.module('submitExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.list = [];
            $scope.text = 'hello';
            $scope.submit = function() {
              if ($scope.text) {
                $scope.list.push(this.text);
                $scope.text = '';
              }
            };
          }]);
      </script>
      <form ng-submit="submit()" ng-controller="ExampleController">
        Enter text and hit enter:
        <input type="text" ng-model="text" name="text" />
        <input type="submit" id="submit" value="Submit" />
        <pre>list={{list}}</pre>
      </form>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-submit', function() {
         expect(element(by.binding('list')).getText()).toBe('list=[]');
         element(by.css('#submit')).click();
         expect(element(by.binding('list')).getText()).toContain('hello');
         expect(element(by.model('text')).getAttribute('value')).toBe('');
       });
       it('should ignore empty strings', function() {
         expect(element(by.binding('list')).getText()).toBe('list=[]');
         element(by.css('#submit')).click();
         element(by.css('#submit')).click();
         expect(element(by.binding('list')).getText()).toContain('hello');
        });
     </file>
   </example>
 */

/**
 * @ngdoc directive
 * @name ngFocus
 *
 * @description
 * Specify custom behavior on focus event.
 *
 * Note: As the `focus` event is executed synchronously when calling `input.focus()`
 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
 * during an `$apply` to ensure a consistent state.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon
 * focus. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 */

/**
 * @ngdoc directive
 * @name ngBlur
 *
 * @description
 * Specify custom behavior on blur event.
 *
 * A [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when
 * an element has lost focus.
 *
 * Note: As the `blur` event is executed synchronously also during DOM manipulations
 * (e.g. removing a focussed input),
 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
 * during an `$apply` to ensure a consistent state.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon
 * blur. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 */

/**
 * @ngdoc directive
 * @name ngCopy
 *
 * @description
 * Specify custom behavior on copy event.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon
 * copy. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example name="ng-copy">
     <file name="index.html">
      <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">
      copied: {{copied}}
     </file>
   </example>
 */

/**
 * @ngdoc directive
 * @name ngCut
 *
 * @description
 * Specify custom behavior on cut event.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon
 * cut. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example name="ng-cut">
     <file name="index.html">
      <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">
      cut: {{cut}}
     </file>
   </example>
 */

/**
 * @ngdoc directive
 * @name ngPaste
 *
 * @description
 * Specify custom behavior on paste event.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon
 * paste. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example name="ng-paste">
     <file name="index.html">
      <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>
      pasted: {{paste}}
     </file>
   </example>
 */

/**
 * @ngdoc directive
 * @name ngIf
 * @restrict A
 * @multiElement
 *
 * @description
 * The `ngIf` directive removes or recreates a portion of the DOM tree based on an
 * {expression}. If the expression assigned to `ngIf` evaluates to a false
 * value then the element is removed from the DOM, otherwise a clone of the
 * element is reinserted into the DOM.
 *
 * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the
 * element in the DOM rather than changing its visibility via the `display` css property.  A common
 * case when this difference is significant is when using css selectors that rely on an element's
 * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.
 *
 * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope
 * is created when the element is restored.  The scope created within `ngIf` inherits from
 * its parent scope using
 * [prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).
 * An important implication of this is if `ngModel` is used within `ngIf` to bind to
 * a javascript primitive defined in the parent scope. In this case any modifications made to the
 * variable within the child scope will override (hide) the value in the parent scope.
 *
 * Also, `ngIf` recreates elements using their compiled state. An example of this behavior
 * is if an element's class attribute is directly modified after it's compiled, using something like
 * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element
 * the added class will be lost because the original compiled state is used to regenerate the element.
 *
 * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`
 * and `leave` effects.
 *
 * @animations
 * | Animation                        | Occurs                               |
 * |----------------------------------|-------------------------------------|
 * | {@link ng.$animate#enter enter}  | just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container |
 * | {@link ng.$animate#leave leave}  | just before the `ngIf` contents are removed from the DOM |
 *
 * @element ANY
 * @scope
 * @priority 600
 * @param {expression} ngIf If the {@link guide/expression expression} is falsy then
 *     the element is removed from the DOM tree. If it is truthy a copy of the compiled
 *     element is added to the DOM tree.
 *
 * @example
  <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-if">
    <file name="index.html">
      <label>Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /></label><br/>
      Show when checked:
      <span ng-if="checked" class="animate-if">
        This is removed when the checkbox is unchecked.
      </span>
    </file>
    <file name="animations.css">
      .animate-if {
        background:white;
        border:1px solid black;
        padding:10px;
      }

      .animate-if.ng-enter, .animate-if.ng-leave {
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
      }

      .animate-if.ng-enter,
      .animate-if.ng-leave.ng-leave-active {
        opacity:0;
      }

      .animate-if.ng-leave,
      .animate-if.ng-enter.ng-enter-active {
        opacity:1;
      }
    </file>
  </example>
 */
var ngIfDirective = ['$animate', '$compile', function($animate, $compile) {
  return {
    multiElement: true,
    transclude: 'element',
    priority: 600,
    terminal: true,
    restrict: 'A',
    $$tlb: true,
    link: function($scope, $element, $attr, ctrl, $transclude) {
        var block, childScope, previousElements;
        $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {

          if (value) {
            if (!childScope) {
              $transclude(function(clone, newScope) {
                childScope = newScope;
                clone[clone.length++] = $compile.$$createComment('end ngIf', $attr.ngIf);
                // Note: We only need the first/last node of the cloned nodes.
                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
                // by a directive with templateUrl when its template arrives.
                block = {
                  clone: clone
                };
                $animate.enter(clone, $element.parent(), $element);
              });
            }
          } else {
            if (previousElements) {
              previousElements.remove();
              previousElements = null;
            }
            if (childScope) {
              childScope.$destroy();
              childScope = null;
            }
            if (block) {
              previousElements = getBlockNodes(block.clone);
              $animate.leave(previousElements).done(function(response) {
                if (response !== false) previousElements = null;
              });
              block = null;
            }
          }
        });
    }
  };
}];

/**
 * @ngdoc directive
 * @name ngInclude
 * @restrict ECA
 *
 * @description
 * Fetches, compiles and includes an external HTML fragment.
 *
 * By default, the template URL is restricted to the same domain and protocol as the
 * application document. This is done by calling {@link $sce#getTrustedResourceUrl
 * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols
 * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or
 * {@link $sce#trustAsResourceUrl wrap them} as trusted values. Refer to Angular's {@link
 * ng.$sce Strict Contextual Escaping}.
 *
 * In addition, the browser's
 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
 * policy may further restrict whether the template is successfully loaded.
 * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`
 * access on some browsers.
 *
 * @animations
 * | Animation                        | Occurs                              |
 * |----------------------------------|-------------------------------------|
 * | {@link ng.$animate#enter enter}  | when the expression changes, on the new include |
 * | {@link ng.$animate#leave leave}  | when the expression changes, on the old include |
 *
 * The enter and leave animation occur concurrently.
 *
 * @scope
 * @priority 400
 *
 * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,
 *                 make sure you wrap it in **single** quotes, e.g. `src="'myPartialTemplate.html'"`.
 * @param {string=} onload Expression to evaluate when a new partial is loaded.
 *                  <div class="alert alert-warning">
 *                  **Note:** When using onload on SVG elements in IE11, the browser will try to call
 *                  a function with the name on the window element, which will usually throw a
 *                  "function is undefined" error. To fix this, you can instead use `data-onload` or a
 *                  different form that {@link guide/directive#normalization matches} `onload`.
 *                  </div>
   *
 * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll
 *                  $anchorScroll} to scroll the viewport after the content is loaded.
 *
 *                  - If the attribute is not set, disable scrolling.
 *                  - If the attribute is set without value, enable scrolling.
 *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.
 *
 * @example
  <example module="includeExample" deps="angular-animate.js" animations="true" name="ng-include">
    <file name="index.html">
     <div ng-controller="ExampleController">
       <select ng-model="template" ng-options="t.name for t in templates">
        <option value="">(blank)</option>
       </select>
       url of the template: <code>{{template.url}}</code>
       <hr/>
       <div class="slide-animate-container">
         <div class="slide-animate" ng-include="template.url"></div>
       </div>
     </div>
    </file>
    <file name="script.js">
      angular.module('includeExample', ['ngAnimate'])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.templates =
            [{ name: 'template1.html', url: 'template1.html'},
             { name: 'template2.html', url: 'template2.html'}];
          $scope.template = $scope.templates[0];
        }]);
     </file>
    <file name="template1.html">
      Content of template1.html
    </file>
    <file name="template2.html">
      Content of template2.html
    </file>
    <file name="animations.css">
      .slide-animate-container {
        position:relative;
        background:white;
        border:1px solid black;
        height:40px;
        overflow:hidden;
      }

      .slide-animate {
        padding:10px;
      }

      .slide-animate.ng-enter, .slide-animate.ng-leave {
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

        position:absolute;
        top:0;
        left:0;
        right:0;
        bottom:0;
        display:block;
        padding:10px;
      }

      .slide-animate.ng-enter {
        top:-50px;
      }
      .slide-animate.ng-enter.ng-enter-active {
        top:0;
      }

      .slide-animate.ng-leave {
        top:0;
      }
      .slide-animate.ng-leave.ng-leave-active {
        top:50px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var templateSelect = element(by.model('template'));
      var includeElem = element(by.css('[ng-include]'));

      it('should load template1.html', function() {
        expect(includeElem.getText()).toMatch(/Content of template1.html/);
      });

      it('should load template2.html', function() {
        if (browser.params.browser === 'firefox') {
          // Firefox can't handle using selects
          // See https://github.com/angular/protractor/issues/480
          return;
        }
        templateSelect.click();
        templateSelect.all(by.css('option')).get(2).click();
        expect(includeElem.getText()).toMatch(/Content of template2.html/);
      });

      it('should change to blank', function() {
        if (browser.params.browser === 'firefox') {
          // Firefox can't handle using selects
          return;
        }
        templateSelect.click();
        templateSelect.all(by.css('option')).get(0).click();
        expect(includeElem.isPresent()).toBe(false);
      });
    </file>
  </example>
 */


/**
 * @ngdoc event
 * @name ngInclude#$includeContentRequested
 * @eventType emit on the scope ngInclude was declared in
 * @description
 * Emitted every time the ngInclude content is requested.
 *
 * @param {Object} angularEvent Synthetic event object.
 * @param {String} src URL of content to load.
 */


/**
 * @ngdoc event
 * @name ngInclude#$includeContentLoaded
 * @eventType emit on the current ngInclude scope
 * @description
 * Emitted every time the ngInclude content is reloaded.
 *
 * @param {Object} angularEvent Synthetic event object.
 * @param {String} src URL of content to load.
 */


/**
 * @ngdoc event
 * @name ngInclude#$includeContentError
 * @eventType emit on the scope ngInclude was declared in
 * @description
 * Emitted when a template HTTP request yields an erroneous response (status < 200 || status > 299)
 *
 * @param {Object} angularEvent Synthetic event object.
 * @param {String} src URL of content to load.
 */
var ngIncludeDirective = ['$templateRequest', '$anchorScroll', '$animate',
                  function($templateRequest,   $anchorScroll,   $animate) {
  return {
    restrict: 'ECA',
    priority: 400,
    terminal: true,
    transclude: 'element',
    controller: angular.noop,
    compile: function(element, attr) {
      var srcExp = attr.ngInclude || attr.src,
          onloadExp = attr.onload || '',
          autoScrollExp = attr.autoscroll;

      return function(scope, $element, $attr, ctrl, $transclude) {
        var changeCounter = 0,
            currentScope,
            previousElement,
            currentElement;

        var cleanupLastIncludeContent = function() {
          if (previousElement) {
            previousElement.remove();
            previousElement = null;
          }
          if (currentScope) {
            currentScope.$destroy();
            currentScope = null;
          }
          if (currentElement) {
            $animate.leave(currentElement).done(function(response) {
              if (response !== false) previousElement = null;
            });
            previousElement = currentElement;
            currentElement = null;
          }
        };

        scope.$watch(srcExp, function ngIncludeWatchAction(src) {
          var afterAnimation = function(response) {
            if (response !== false && isDefined(autoScrollExp) &&
              (!autoScrollExp || scope.$eval(autoScrollExp))) {
                $anchorScroll();
            }
          };
          var thisChangeId = ++changeCounter;

          if (src) {
            //set the 2nd param to true to ignore the template request error so that the inner
            //contents and scope can be cleaned up.
            $templateRequest(src, true).then(function(response) {
              if (scope.$$destroyed) return;

              if (thisChangeId !== changeCounter) return;
              var newScope = scope.$new();
              ctrl.template = response;

              // Note: This will also link all children of ng-include that were contained in the original
              // html. If that content contains controllers, ... they could pollute/change the scope.
              // However, using ng-include on an element with additional content does not make sense...
              // Note: We can't remove them in the cloneAttchFn of $transclude as that
              // function is called before linking the content, which would apply child
              // directives to non existing elements.
              var clone = $transclude(newScope, function(clone) {
                cleanupLastIncludeContent();
                $animate.enter(clone, null, $element).done(afterAnimation);
              });

              currentScope = newScope;
              currentElement = clone;

              currentScope.$emit('$includeContentLoaded', src);
              scope.$eval(onloadExp);
            }, function() {
              if (scope.$$destroyed) return;

              if (thisChangeId === changeCounter) {
                cleanupLastIncludeContent();
                scope.$emit('$includeContentError', src);
              }
            });
            scope.$emit('$includeContentRequested', src);
          } else {
            cleanupLastIncludeContent();
            ctrl.template = null;
          }
        });
      };
    }
  };
}];

// This directive is called during the $transclude call of the first `ngInclude` directive.
// It will replace and compile the content of the element with the loaded template.
// We need this directive so that the element content is already filled when
// the link function of another directive on the same element as ngInclude
// is called.
var ngIncludeFillContentDirective = ['$compile',
  function($compile) {
    return {
      restrict: 'ECA',
      priority: -400,
      require: 'ngInclude',
      link: function(scope, $element, $attr, ctrl) {
        if (toString.call($element[0]).match(/SVG/)) {
          // WebKit: https://bugs.webkit.org/show_bug.cgi?id=135698 --- SVG elements do not
          // support innerHTML, so detect this here and try to generate the contents
          // specially.
          $element.empty();
          $compile(jqLiteBuildFragment(ctrl.template, window.document).childNodes)(scope,
              function namespaceAdaptedClone(clone) {
            $element.append(clone);
          }, {futureParentElement: $element});
          return;
        }

        $element.html(ctrl.template);
        $compile($element.contents())(scope);
      }
    };
  }];

/**
 * @ngdoc directive
 * @name ngInit
 * @restrict AC
 *
 * @description
 * The `ngInit` directive allows you to evaluate an expression in the
 * current scope.
 *
 * <div class="alert alert-danger">
 * This directive can be abused to add unnecessary amounts of logic into your templates.
 * There are only a few appropriate uses of `ngInit`, such as for aliasing special properties of
 * {@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below; and for injecting data via
 * server side scripting. Besides these few cases, you should use {@link guide/controller controllers}
 * rather than `ngInit` to initialize values on a scope.
 * </div>
 *
 * <div class="alert alert-warning">
 * **Note**: If you have assignment in `ngInit` along with a {@link ng.$filter `filter`}, make
 * sure you have parentheses to ensure correct operator precedence:
 * <pre class="prettyprint">
 * `<div ng-init="test1 = ($index | toString)"></div>`
 * </pre>
 * </div>
 *
 * @priority 450
 *
 * @element ANY
 * @param {expression} ngInit {@link guide/expression Expression} to eval.
 *
 * @example
   <example module="initExample" name="ng-init">
     <file name="index.html">
   <script>
     angular.module('initExample', [])
       .controller('ExampleController', ['$scope', function($scope) {
         $scope.list = [['a', 'b'], ['c', 'd']];
       }]);
   </script>
   <div ng-controller="ExampleController">
     <div ng-repeat="innerList in list" ng-init="outerIndex = $index">
       <div ng-repeat="value in innerList" ng-init="innerIndex = $index">
          <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>
       </div>
     </div>
   </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should alias index positions', function() {
         var elements = element.all(by.css('.example-init'));
         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');
         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');
         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');
         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');
       });
     </file>
   </example>
 */
var ngInitDirective = ngDirective({
  priority: 450,
  compile: function() {
    return {
      pre: function(scope, element, attrs) {
        scope.$eval(attrs.ngInit);
      }
    };
  }
});

/**
 * @ngdoc directive
 * @name ngList
 *
 * @description
 * Text input that converts between a delimited string and an array of strings. The default
 * delimiter is a comma followed by a space - equivalent to `ng-list=", "`. You can specify a custom
 * delimiter as the value of the `ngList` attribute - for example, `ng-list=" | "`.
 *
 * The behaviour of the directive is affected by the use of the `ngTrim` attribute.
 * * If `ngTrim` is set to `"false"` then whitespace around both the separator and each
 *   list item is respected. This implies that the user of the directive is responsible for
 *   dealing with whitespace but also allows you to use whitespace as a delimiter, such as a
 *   tab or newline character.
 * * Otherwise whitespace around the delimiter is ignored when splitting (although it is respected
 *   when joining the list items back together) and whitespace around each list item is stripped
 *   before it is added to the model.
 *
 * ### Example with Validation
 *
 * <example name="ngList-directive" module="listExample">
 *   <file name="app.js">
 *      angular.module('listExample', [])
 *        .controller('ExampleController', ['$scope', function($scope) {
 *          $scope.names = ['morpheus', 'neo', 'trinity'];
 *        }]);
 *   </file>
 *   <file name="index.html">
 *    <form name="myForm" ng-controller="ExampleController">
 *      <label>List: <input name="namesInput" ng-model="names" ng-list required></label>
 *      <span role="alert">
 *        <span class="error" ng-show="myForm.namesInput.$error.required">
 *        Required!</span>
 *      </span>
 *      <br>
 *      <tt>names = {{names}}</tt><br/>
 *      <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>
 *      <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>
 *      <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
 *      <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
 *     </form>
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     var listInput = element(by.model('names'));
 *     var names = element(by.exactBinding('names'));
 *     var valid = element(by.binding('myForm.namesInput.$valid'));
 *     var error = element(by.css('span.error'));
 *
 *     it('should initialize to model', function() {
 *       expect(names.getText()).toContain('["morpheus","neo","trinity"]');
 *       expect(valid.getText()).toContain('true');
 *       expect(error.getCssValue('display')).toBe('none');
 *     });
 *
 *     it('should be invalid if empty', function() {
 *       listInput.clear();
 *       listInput.sendKeys('');
 *
 *       expect(names.getText()).toContain('');
 *       expect(valid.getText()).toContain('false');
 *       expect(error.getCssValue('display')).not.toBe('none');
 *     });
 *   </file>
 * </example>
 *
 * ### Example - splitting on newline
 * <example name="ngList-directive-newlines">
 *   <file name="index.html">
 *    <textarea ng-model="list" ng-list="&#10;" ng-trim="false"></textarea>
 *    <pre>{{ list | json }}</pre>
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     it("should split the text by newlines", function() {
 *       var listInput = element(by.model('list'));
 *       var output = element(by.binding('list | json'));
 *       listInput.sendKeys('abc\ndef\nghi');
 *       expect(output.getText()).toContain('[\n  "abc",\n  "def",\n  "ghi"\n]');
 *     });
 *   </file>
 * </example>
 *
 * @element input
 * @param {string=} ngList optional delimiter that should be used to split the value.
 */
var ngListDirective = function() {
  return {
    restrict: 'A',
    priority: 100,
    require: 'ngModel',
    link: function(scope, element, attr, ctrl) {
      var ngList = attr.ngList || ', ';
      var trimValues = attr.ngTrim !== 'false';
      var separator = trimValues ? trim(ngList) : ngList;

      var parse = function(viewValue) {
        // If the viewValue is invalid (say required but empty) it will be `undefined`
        if (isUndefined(viewValue)) return;

        var list = [];

        if (viewValue) {
          forEach(viewValue.split(separator), function(value) {
            if (value) list.push(trimValues ? trim(value) : value);
          });
        }

        return list;
      };

      ctrl.$parsers.push(parse);
      ctrl.$formatters.push(function(value) {
        if (isArray(value)) {
          return value.join(ngList);
        }

        return undefined;
      });

      // Override the standard $isEmpty because an empty array means the input is empty.
      ctrl.$isEmpty = function(value) {
        return !value || !value.length;
      };
    }
  };
};

/* global VALID_CLASS: true,
  INVALID_CLASS: true,
  PRISTINE_CLASS: true,
  DIRTY_CLASS: true,
  UNTOUCHED_CLASS: true,
  TOUCHED_CLASS: true,
  PENDING_CLASS: true,
  addSetValidityMethod: true,
  setupValidity: true,
  defaultModelOptions: false
*/


var VALID_CLASS = 'ng-valid',
    INVALID_CLASS = 'ng-invalid',
    PRISTINE_CLASS = 'ng-pristine',
    DIRTY_CLASS = 'ng-dirty',
    UNTOUCHED_CLASS = 'ng-untouched',
    TOUCHED_CLASS = 'ng-touched',
    EMPTY_CLASS = 'ng-empty',
    NOT_EMPTY_CLASS = 'ng-not-empty';

var ngModelMinErr = minErr('ngModel');

/**
 * @ngdoc type
 * @name ngModel.NgModelController
 *
 * @property {*} $viewValue The actual value from the control's view. For `input` elements, this is a
 * String. See {@link ngModel.NgModelController#$setViewValue} for information about when the $viewValue
 * is set.
 * @property {*} $modelValue The value in the model that the control is bound to.
 * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever
       the control reads value from the DOM. The functions are called in array order, each passing
       its return value through to the next. The last return value is forwarded to the
       {@link ngModel.NgModelController#$validators `$validators`} collection.

Parsers are used to sanitize / convert the {@link ngModel.NgModelController#$viewValue
`$viewValue`}.

Returning `undefined` from a parser means a parse error occurred. In that case,
no {@link ngModel.NgModelController#$validators `$validators`} will run and the `ngModel`
will be set to `undefined` unless {@link ngModelOptions `ngModelOptions.allowInvalid`}
is set to `true`. The parse error is stored in `ngModel.$error.parse`.

 *
 * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever
       the model value changes. The functions are called in reverse array order, each passing the value through to the
       next. The last return value is used as the actual DOM value.
       Used to format / convert values for display in the control.
 * ```js
 * function formatter(value) {
 *   if (value) {
 *     return value.toUpperCase();
 *   }
 * }
 * ngModel.$formatters.push(formatter);
 * ```
 *
 * @property {Object.<string, function>} $validators A collection of validators that are applied
 *      whenever the model value changes. The key value within the object refers to the name of the
 *      validator while the function refers to the validation operation. The validation operation is
 *      provided with the model value as an argument and must return a true or false value depending
 *      on the response of that validation.
 *
 * ```js
 * ngModel.$validators.validCharacters = function(modelValue, viewValue) {
 *   var value = modelValue || viewValue;
 *   return /[0-9]+/.test(value) &&
 *          /[a-z]+/.test(value) &&
 *          /[A-Z]+/.test(value) &&
 *          /\W+/.test(value);
 * };
 * ```
 *
 * @property {Object.<string, function>} $asyncValidators A collection of validations that are expected to
 *      perform an asynchronous validation (e.g. a HTTP request). The validation function that is provided
 *      is expected to return a promise when it is run during the model validation process. Once the promise
 *      is delivered then the validation status will be set to true when fulfilled and false when rejected.
 *      When the asynchronous validators are triggered, each of the validators will run in parallel and the model
 *      value will only be updated once all validators have been fulfilled. As long as an asynchronous validator
 *      is unfulfilled, its key will be added to the controllers `$pending` property. Also, all asynchronous validators
 *      will only run once all synchronous validators have passed.
 *
 * Please note that if $http is used then it is important that the server returns a success HTTP response code
 * in order to fulfill the validation and a status level of `4xx` in order to reject the validation.
 *
 * ```js
 * ngModel.$asyncValidators.uniqueUsername = function(modelValue, viewValue) {
 *   var value = modelValue || viewValue;
 *
 *   // Lookup user by username
 *   return $http.get('/api/users/' + value).
 *      then(function resolved() {
 *        //username exists, this means validation fails
 *        return $q.reject('exists');
 *      }, function rejected() {
 *        //username does not exist, therefore this validation passes
 *        return true;
 *      });
 * };
 * ```
 *
 * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the
 *     view value has changed. It is called with no arguments, and its return value is ignored.
 *     This can be used in place of additional $watches against the model value.
 *
 * @property {Object} $error An object hash with all failing validator ids as keys.
 * @property {Object} $pending An object hash with all pending validator ids as keys.
 *
 * @property {boolean} $untouched True if control has not lost focus yet.
 * @property {boolean} $touched True if control has lost focus.
 * @property {boolean} $pristine True if user has not interacted with the control yet.
 * @property {boolean} $dirty True if user has already interacted with the control.
 * @property {boolean} $valid True if there is no error.
 * @property {boolean} $invalid True if at least one error on the control.
 * @property {string} $name The name attribute of the control.
 *
 * @description
 *
 * `NgModelController` provides API for the {@link ngModel `ngModel`} directive.
 * The controller contains services for data-binding, validation, CSS updates, and value formatting
 * and parsing. It purposefully does not contain any logic which deals with DOM rendering or
 * listening to DOM events.
 * Such DOM related logic should be provided by other directives which make use of
 * `NgModelController` for data-binding to control elements.
 * Angular provides this DOM logic for most {@link input `input`} elements.
 * At the end of this page you can find a {@link ngModel.NgModelController#custom-control-example
 * custom control example} that uses `ngModelController` to bind to `contenteditable` elements.
 *
 * @example
 * ### Custom Control Example
 * This example shows how to use `NgModelController` with a custom control to achieve
 * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)
 * collaborate together to achieve the desired result.
 *
 * `contenteditable` is an HTML5 attribute, which tells the browser to let the element
 * contents be edited in place by the user.
 *
 * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}
 * module to automatically remove "bad" content like inline event listener (e.g. `<span onclick="...">`).
 * However, as we are using `$sce` the model can still decide to provide unsafe content if it marks
 * that content using the `$sce` service.
 *
 * <example name="NgModelController" module="customControl" deps="angular-sanitize.js">
    <file name="style.css">
      [contenteditable] {
        border: 1px solid black;
        background-color: white;
        min-height: 20px;
      }

      .ng-invalid {
        border: 1px solid red;
      }

    </file>
    <file name="script.js">
      angular.module('customControl', ['ngSanitize']).
        directive('contenteditable', ['$sce', function($sce) {
          return {
            restrict: 'A', // only activate on element attribute
            require: '?ngModel', // get a hold of NgModelController
            link: function(scope, element, attrs, ngModel) {
              if (!ngModel) return; // do nothing if no ng-model

              // Specify how UI should be updated
              ngModel.$render = function() {
                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));
              };

              // Listen for change events to enable binding
              element.on('blur keyup change', function() {
                scope.$evalAsync(read);
              });
              read(); // initialize

              // Write data to the model
              function read() {
                var html = element.html();
                // When we clear the content editable the browser leaves a <br> behind
                // If strip-br attribute is provided then we strip this out
                if (attrs.stripBr && html === '<br>') {
                  html = '';
                }
                ngModel.$setViewValue(html);
              }
            }
          };
        }]);
    </file>
    <file name="index.html">
      <form name="myForm">
       <div contenteditable
            name="myWidget" ng-model="userContent"
            strip-br="true"
            required>Change me!</div>
        <span ng-show="myForm.myWidget.$error.required">Required!</span>
       <hr>
       <textarea ng-model="userContent" aria-label="Dynamic textarea"></textarea>
      </form>
    </file>
    <file name="protractor.js" type="protractor">
    it('should data-bind and become invalid', function() {
      if (browser.params.browser === 'safari' || browser.params.browser === 'firefox') {
        // SafariDriver can't handle contenteditable
        // and Firefox driver can't clear contenteditables very well
        return;
      }
      var contentEditable = element(by.css('[contenteditable]'));
      var content = 'Change me!';

      expect(contentEditable.getText()).toEqual(content);

      contentEditable.clear();
      contentEditable.sendKeys(protractor.Key.BACK_SPACE);
      expect(contentEditable.getText()).toEqual('');
      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);
    });
    </file>
 * </example>
 *
 *
 */
NgModelController.$inject = ['$scope', '$exceptionHandler', '$attrs', '$element', '$parse', '$animate', '$timeout', '$q', '$interpolate'];
function NgModelController($scope, $exceptionHandler, $attr, $element, $parse, $animate, $timeout, $q, $interpolate) {
  this.$viewValue = Number.NaN;
  this.$modelValue = Number.NaN;
  this.$$rawModelValue = undefined; // stores the parsed modelValue / model set from scope regardless of validity.
  this.$validators = {};
  this.$asyncValidators = {};
  this.$parsers = [];
  this.$formatters = [];
  this.$viewChangeListeners = [];
  this.$untouched = true;
  this.$touched = false;
  this.$pristine = true;
  this.$dirty = false;
  this.$valid = true;
  this.$invalid = false;
  this.$error = {}; // keep invalid keys here
  this.$$success = {}; // keep valid keys here
  this.$pending = undefined; // keep pending keys here
  this.$name = $interpolate($attr.name || '', false)($scope);
  this.$$parentForm = nullFormCtrl;
  this.$options = defaultModelOptions;

  this.$$parsedNgModel = $parse($attr.ngModel);
  this.$$parsedNgModelAssign = this.$$parsedNgModel.assign;
  this.$$ngModelGet = this.$$parsedNgModel;
  this.$$ngModelSet = this.$$parsedNgModelAssign;
  this.$$pendingDebounce = null;
  this.$$parserValid = undefined;

  this.$$currentValidationRunId = 0;

  this.$$scope = $scope;
  this.$$attr = $attr;
  this.$$element = $element;
  this.$$animate = $animate;
  this.$$timeout = $timeout;
  this.$$parse = $parse;
  this.$$q = $q;
  this.$$exceptionHandler = $exceptionHandler;

  setupValidity(this);
  setupModelWatcher(this);
}

NgModelController.prototype = {
  $$initGetterSetters: function() {
    if (this.$options.getOption('getterSetter')) {
      var invokeModelGetter = this.$$parse(this.$$attr.ngModel + '()'),
          invokeModelSetter = this.$$parse(this.$$attr.ngModel + '($$$p)');

      this.$$ngModelGet = function($scope) {
        var modelValue = this.$$parsedNgModel($scope);
        if (isFunction(modelValue)) {
          modelValue = invokeModelGetter($scope);
        }
        return modelValue;
      };
      this.$$ngModelSet = function($scope, newValue) {
        if (isFunction(this.$$parsedNgModel($scope))) {
          invokeModelSetter($scope, {$$$p: newValue});
        } else {
          this.$$parsedNgModelAssign($scope, newValue);
        }
      };
    } else if (!this.$$parsedNgModel.assign) {
      throw ngModelMinErr('nonassign', 'Expression \'{0}\' is non-assignable. Element: {1}',
          this.$$attr.ngModel, startingTag(this.$$element));
    }
  },


  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$render
   *
   * @description
   * Called when the view needs to be updated. It is expected that the user of the ng-model
   * directive will implement this method.
   *
   * The `$render()` method is invoked in the following situations:
   *
   * * `$rollbackViewValue()` is called.  If we are rolling back the view value to the last
   *   committed value then `$render()` is called to update the input control.
   * * The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and
   *   the `$viewValue` are different from last time.
   *
   * Since `ng-model` does not do a deep watch, `$render()` is only invoked if the values of
   * `$modelValue` and `$viewValue` are actually different from their previous values. If `$modelValue`
   * or `$viewValue` are objects (rather than a string or number) then `$render()` will not be
   * invoked if you only change a property on the objects.
   */
  $render: noop,

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$isEmpty
   *
   * @description
   * This is called when we need to determine if the value of an input is empty.
   *
   * For instance, the required directive does this to work out if the input has data or not.
   *
   * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.
   *
   * You can override this for input directives whose concept of being empty is different from the
   * default. The `checkboxInputType` directive does this because in its case a value of `false`
   * implies empty.
   *
   * @param {*} value The value of the input to check for emptiness.
   * @returns {boolean} True if `value` is "empty".
   */
  $isEmpty: function(value) {
    // eslint-disable-next-line no-self-compare
    return isUndefined(value) || value === '' || value === null || value !== value;
  },

  $$updateEmptyClasses: function(value) {
    if (this.$isEmpty(value)) {
      this.$$animate.removeClass(this.$$element, NOT_EMPTY_CLASS);
      this.$$animate.addClass(this.$$element, EMPTY_CLASS);
    } else {
      this.$$animate.removeClass(this.$$element, EMPTY_CLASS);
      this.$$animate.addClass(this.$$element, NOT_EMPTY_CLASS);
    }
  },

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setPristine
   *
   * @description
   * Sets the control to its pristine state.
   *
   * This method can be called to remove the `ng-dirty` class and set the control to its pristine
   * state (`ng-pristine` class). A model is considered to be pristine when the control
   * has not been changed from when first compiled.
   */
  $setPristine: function() {
    this.$dirty = false;
    this.$pristine = true;
    this.$$animate.removeClass(this.$$element, DIRTY_CLASS);
    this.$$animate.addClass(this.$$element, PRISTINE_CLASS);
  },

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setDirty
   *
   * @description
   * Sets the control to its dirty state.
   *
   * This method can be called to remove the `ng-pristine` class and set the control to its dirty
   * state (`ng-dirty` class). A model is considered to be dirty when the control has been changed
   * from when first compiled.
   */
  $setDirty: function() {
    this.$dirty = true;
    this.$pristine = false;
    this.$$animate.removeClass(this.$$element, PRISTINE_CLASS);
    this.$$animate.addClass(this.$$element, DIRTY_CLASS);
    this.$$parentForm.$setDirty();
  },

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setUntouched
   *
   * @description
   * Sets the control to its untouched state.
   *
   * This method can be called to remove the `ng-touched` class and set the control to its
   * untouched state (`ng-untouched` class). Upon compilation, a model is set as untouched
   * by default, however this function can be used to restore that state if the model has
   * already been touched by the user.
   */
  $setUntouched: function() {
    this.$touched = false;
    this.$untouched = true;
    this.$$animate.setClass(this.$$element, UNTOUCHED_CLASS, TOUCHED_CLASS);
  },

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setTouched
   *
   * @description
   * Sets the control to its touched state.
   *
   * This method can be called to remove the `ng-untouched` class and set the control to its
   * touched state (`ng-touched` class). A model is considered to be touched when the user has
   * first focused the control element and then shifted focus away from the control (blur event).
   */
  $setTouched: function() {
    this.$touched = true;
    this.$untouched = false;
    this.$$animate.setClass(this.$$element, TOUCHED_CLASS, UNTOUCHED_CLASS);
  },

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$rollbackViewValue
   *
   * @description
   * Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,
   * which may be caused by a pending debounced event or because the input is waiting for some
   * future event.
   *
   * If you have an input that uses `ng-model-options` to set up debounced updates or updates that
   * depend on special events such as `blur`, there can be a period when the `$viewValue` is out of
   * sync with the ngModel's `$modelValue`.
   *
   * In this case, you can use `$rollbackViewValue()` to manually cancel the debounced / future update
   * and reset the input to the last committed view value.
   *
   * It is also possible that you run into difficulties if you try to update the ngModel's `$modelValue`
   * programmatically before these debounced/future events have resolved/occurred, because Angular's
   * dirty checking mechanism is not able to tell whether the model has actually changed or not.
   *
   * The `$rollbackViewValue()` method should be called before programmatically changing the model of an
   * input which may have such events pending. This is important in order to make sure that the
   * input field will be updated with the new model value and any pending operations are cancelled.
   *
   * <example name="ng-model-cancel-update" module="cancel-update-example">
   *   <file name="app.js">
   *     angular.module('cancel-update-example', [])
   *
   *     .controller('CancelUpdateController', ['$scope', function($scope) {
   *       $scope.model = {value1: '', value2: ''};
   *
   *       $scope.setEmpty = function(e, value, rollback) {
   *         if (e.keyCode === 27) {
   *           e.preventDefault();
   *           if (rollback) {
   *             $scope.myForm[value].$rollbackViewValue();
   *           }
   *           $scope.model[value] = '';
   *         }
   *       };
   *     }]);
   *   </file>
   *   <file name="index.html">
   *     <div ng-controller="CancelUpdateController">
   *       <p>Both of these inputs are only updated if they are blurred. Hitting escape should
   *       empty them. Follow these steps and observe the difference:</p>
   *       <ol>
   *         <li>Type something in the input. You will see that the model is not yet updated</li>
   *         <li>Press the Escape key.
   *           <ol>
   *             <li> In the first example, nothing happens, because the model is already '', and no
   *             update is detected. If you blur the input, the model will be set to the current view.
   *             </li>
   *             <li> In the second example, the pending update is cancelled, and the input is set back
   *             to the last committed view value (''). Blurring the input does nothing.
   *             </li>
   *           </ol>
   *         </li>
   *       </ol>
   *
   *       <form name="myForm" ng-model-options="{ updateOn: 'blur' }">
   *         <div>
   *           <p id="inputDescription1">Without $rollbackViewValue():</p>
   *           <input name="value1" aria-describedby="inputDescription1" ng-model="model.value1"
   *                  ng-keydown="setEmpty($event, 'value1')">
   *           value1: "{{ model.value1 }}"
   *         </div>
   *
   *         <div>
   *           <p id="inputDescription2">With $rollbackViewValue():</p>
   *           <input name="value2" aria-describedby="inputDescription2" ng-model="model.value2"
   *                  ng-keydown="setEmpty($event, 'value2', true)">
   *           value2: "{{ model.value2 }}"
   *         </div>
   *       </form>
   *     </div>
   *   </file>
       <file name="style.css">
          div {
            display: table-cell;
          }
          div:nth-child(1) {
            padding-right: 30px;
          }

        </file>
   * </example>
   */
  $rollbackViewValue: function() {
    this.$$timeout.cancel(this.$$pendingDebounce);
    this.$viewValue = this.$$lastCommittedViewValue;
    this.$render();
  },

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$validate
   *
   * @description
   * Runs each of the registered validators (first synchronous validators and then
   * asynchronous validators).
   * If the validity changes to invalid, the model will be set to `undefined`,
   * unless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.
   * If the validity changes to valid, it will set the model to the last available valid
   * `$modelValue`, i.e. either the last parsed value or the last value set from the scope.
   */
  $validate: function() {
    // ignore $validate before model is initialized
    if (isNumberNaN(this.$modelValue)) {
      return;
    }

    var viewValue = this.$$lastCommittedViewValue;
    // Note: we use the $$rawModelValue as $modelValue might have been
    // set to undefined during a view -> model update that found validation
    // errors. We can't parse the view here, since that could change
    // the model although neither viewValue nor the model on the scope changed
    var modelValue = this.$$rawModelValue;

    var prevValid = this.$valid;
    var prevModelValue = this.$modelValue;

    var allowInvalid = this.$options.getOption('allowInvalid');

    var that = this;
    this.$$runValidators(modelValue, viewValue, function(allValid) {
      // If there was no change in validity, don't update the model
      // This prevents changing an invalid modelValue to undefined
      if (!allowInvalid && prevValid !== allValid) {
        // Note: Don't check this.$valid here, as we could have
        // external validators (e.g. calculated on the server),
        // that just call $setValidity and need the model value
        // to calculate their validity.
        that.$modelValue = allValid ? modelValue : undefined;

        if (that.$modelValue !== prevModelValue) {
          that.$$writeModelToScope();
        }
      }
    });
  },

  $$runValidators: function(modelValue, viewValue, doneCallback) {
    this.$$currentValidationRunId++;
    var localValidationRunId = this.$$currentValidationRunId;
    var that = this;

    // check parser error
    if (!processParseErrors()) {
      validationDone(false);
      return;
    }
    if (!processSyncValidators()) {
      validationDone(false);
      return;
    }
    processAsyncValidators();

    function processParseErrors() {
      var errorKey = that.$$parserName || 'parse';
      if (isUndefined(that.$$parserValid)) {
        setValidity(errorKey, null);
      } else {
        if (!that.$$parserValid) {
          forEach(that.$validators, function(v, name) {
            setValidity(name, null);
          });
          forEach(that.$asyncValidators, function(v, name) {
            setValidity(name, null);
          });
        }
        // Set the parse error last, to prevent unsetting it, should a $validators key == parserName
        setValidity(errorKey, that.$$parserValid);
        return that.$$parserValid;
      }
      return true;
    }

    function processSyncValidators() {
      var syncValidatorsValid = true;
      forEach(that.$validators, function(validator, name) {
        var result = Boolean(validator(modelValue, viewValue));
        syncValidatorsValid = syncValidatorsValid && result;
        setValidity(name, result);
      });
      if (!syncValidatorsValid) {
        forEach(that.$asyncValidators, function(v, name) {
          setValidity(name, null);
        });
        return false;
      }
      return true;
    }

    function processAsyncValidators() {
      var validatorPromises = [];
      var allValid = true;
      forEach(that.$asyncValidators, function(validator, name) {
        var promise = validator(modelValue, viewValue);
        if (!isPromiseLike(promise)) {
          throw ngModelMinErr('nopromise',
            'Expected asynchronous validator to return a promise but got \'{0}\' instead.', promise);
        }
        setValidity(name, undefined);
        validatorPromises.push(promise.then(function() {
          setValidity(name, true);
        }, function() {
          allValid = false;
          setValidity(name, false);
        }));
      });
      if (!validatorPromises.length) {
        validationDone(true);
      } else {
        that.$$q.all(validatorPromises).then(function() {
          validationDone(allValid);
        }, noop);
      }
    }

    function setValidity(name, isValid) {
      if (localValidationRunId === that.$$currentValidationRunId) {
        that.$setValidity(name, isValid);
      }
    }

    function validationDone(allValid) {
      if (localValidationRunId === that.$$currentValidationRunId) {

        doneCallback(allValid);
      }
    }
  },

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$commitViewValue
   *
   * @description
   * Commit a pending update to the `$modelValue`.
   *
   * Updates may be pending by a debounced event or because the input is waiting for a some future
   * event defined in `ng-model-options`. this method is rarely needed as `NgModelController`
   * usually handles calling this in response to input events.
   */
  $commitViewValue: function() {
    var viewValue = this.$viewValue;

    this.$$timeout.cancel(this.$$pendingDebounce);

    // If the view value has not changed then we should just exit, except in the case where there is
    // a native validator on the element. In this case the validation state may have changed even though
    // the viewValue has stayed empty.
    if (this.$$lastCommittedViewValue === viewValue && (viewValue !== '' || !this.$$hasNativeValidators)) {
      return;
    }
    this.$$updateEmptyClasses(viewValue);
    this.$$lastCommittedViewValue = viewValue;

    // change to dirty
    if (this.$pristine) {
      this.$setDirty();
    }
    this.$$parseAndValidate();
  },

  $$parseAndValidate: function() {
    var viewValue = this.$$lastCommittedViewValue;
    var modelValue = viewValue;
    var that = this;

    this.$$parserValid = isUndefined(modelValue) ? undefined : true;

    if (this.$$parserValid) {
      for (var i = 0; i < this.$parsers.length; i++) {
        modelValue = this.$parsers[i](modelValue);
        if (isUndefined(modelValue)) {
          this.$$parserValid = false;
          break;
        }
      }
    }
    if (isNumberNaN(this.$modelValue)) {
      // this.$modelValue has not been touched yet...
      this.$modelValue = this.$$ngModelGet(this.$$scope);
    }
    var prevModelValue = this.$modelValue;
    var allowInvalid = this.$options.getOption('allowInvalid');
    this.$$rawModelValue = modelValue;

    if (allowInvalid) {
      this.$modelValue = modelValue;
      writeToModelIfNeeded();
    }

    // Pass the $$lastCommittedViewValue here, because the cached viewValue might be out of date.
    // This can happen if e.g. $setViewValue is called from inside a parser
    this.$$runValidators(modelValue, this.$$lastCommittedViewValue, function(allValid) {
      if (!allowInvalid) {
        // Note: Don't check this.$valid here, as we could have
        // external validators (e.g. calculated on the server),
        // that just call $setValidity and need the model value
        // to calculate their validity.
        that.$modelValue = allValid ? modelValue : undefined;
        writeToModelIfNeeded();
      }
    });

    function writeToModelIfNeeded() {
      if (that.$modelValue !== prevModelValue) {
        that.$$writeModelToScope();
      }
    }
  },

  $$writeModelToScope: function() {
    this.$$ngModelSet(this.$$scope, this.$modelValue);
    forEach(this.$viewChangeListeners, function(listener) {
      try {
        listener();
      } catch (e) {
        // eslint-disable-next-line no-invalid-this
        this.$$exceptionHandler(e);
      }
    }, this);
  },

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setViewValue
   *
   * @description
   * Update the view value.
   *
   * This method should be called when a control wants to change the view value; typically,
   * this is done from within a DOM event handler. For example, the {@link ng.directive:input input}
   * directive calls it when the value of the input changes and {@link ng.directive:select select}
   * calls it when an option is selected.
   *
   * When `$setViewValue` is called, the new `value` will be staged for committing through the `$parsers`
   * and `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged
   * value sent directly for processing, finally to be applied to `$modelValue` and then the
   * **expression** specified in the `ng-model` attribute. Lastly, all the registered change listeners,
   * in the `$viewChangeListeners` list, are called.
   *
   * In case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`
   * and the `default` trigger is not listed, all those actions will remain pending until one of the
   * `updateOn` events is triggered on the DOM element.
   * All these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}
   * directive is used with a custom debounce for this particular event.
   * Note that a `$digest` is only triggered once the `updateOn` events are fired, or if `debounce`
   * is specified, once the timer runs out.
   *
   * When used with standard inputs, the view value will always be a string (which is in some cases
   * parsed into another type, such as a `Date` object for `input[date]`.)
   * However, custom controls might also pass objects to this method. In this case, we should make
   * a copy of the object before passing it to `$setViewValue`. This is because `ngModel` does not
   * perform a deep watch of objects, it only looks for a change of identity. If you only change
   * the property of the object then ngModel will not realize that the object has changed and
   * will not invoke the `$parsers` and `$validators` pipelines. For this reason, you should
   * not change properties of the copy once it has been passed to `$setViewValue`.
   * Otherwise you may cause the model value on the scope to change incorrectly.
   *
   * <div class="alert alert-info">
   * In any case, the value passed to the method should always reflect the current value
   * of the control. For example, if you are calling `$setViewValue` for an input element,
   * you should pass the input DOM value. Otherwise, the control and the scope model become
   * out of sync. It's also important to note that `$setViewValue` does not call `$render` or change
   * the control's DOM value in any way. If we want to change the control's DOM value
   * programmatically, we should update the `ngModel` scope expression. Its new value will be
   * picked up by the model controller, which will run it through the `$formatters`, `$render` it
   * to update the DOM, and finally call `$validate` on it.
   * </div>
   *
   * @param {*} value value from the view.
   * @param {string} trigger Event that triggered the update.
   */
  $setViewValue: function(value, trigger) {
    this.$viewValue = value;
    if (this.$options.getOption('updateOnDefault')) {
      this.$$debounceViewValueCommit(trigger);
    }
  },

  $$debounceViewValueCommit: function(trigger) {
    var debounceDelay = this.$options.getOption('debounce');

    if (isNumber(debounceDelay[trigger])) {
      debounceDelay = debounceDelay[trigger];
    } else if (isNumber(debounceDelay['default'])) {
      debounceDelay = debounceDelay['default'];
    }

    this.$$timeout.cancel(this.$$pendingDebounce);
    var that = this;
    if (debounceDelay > 0) { // this fails if debounceDelay is an object
      this.$$pendingDebounce = this.$$timeout(function() {
        that.$commitViewValue();
      }, debounceDelay);
    } else if (this.$$scope.$root.$$phase) {
      this.$commitViewValue();
    } else {
      this.$$scope.$apply(function() {
        that.$commitViewValue();
      });
    }
  },

  /**
   * @ngdoc method
   *
   * @name ngModel.NgModelController#$overrideModelOptions
   *
   * @description
   *
   * Override the current model options settings programmatically.
   *
   * The previous `ModelOptions` value will not be modified. Instead, a
   * new `ModelOptions` object will inherit from the previous one overriding
   * or inheriting settings that are defined in the given parameter.
   *
   * See {@link ngModelOptions} for information about what options can be specified
   * and how model option inheritance works.
   *
   * @param {Object} options a hash of settings to override the previous options
   *
   */
  $overrideModelOptions: function(options) {
    this.$options = this.$options.createChild(options);
  }
};

function setupModelWatcher(ctrl) {
  // model -> value
  // Note: we cannot use a normal scope.$watch as we want to detect the following:
  // 1. scope value is 'a'
  // 2. user enters 'b'
  // 3. ng-change kicks in and reverts scope value to 'a'
  //    -> scope value did not change since the last digest as
  //       ng-change executes in apply phase
  // 4. view should be changed back to 'a'
  ctrl.$$scope.$watch(function ngModelWatch() {
    var modelValue = ctrl.$$ngModelGet(ctrl.$$scope);

    // if scope model value and ngModel value are out of sync
    // TODO(perf): why not move this to the action fn?
    if (modelValue !== ctrl.$modelValue &&
       // checks for NaN is needed to allow setting the model to NaN when there's an asyncValidator
        // eslint-disable-next-line no-self-compare
       (ctrl.$modelValue === ctrl.$modelValue || modelValue === modelValue)
    ) {
      ctrl.$modelValue = ctrl.$$rawModelValue = modelValue;
      ctrl.$$parserValid = undefined;

      var formatters = ctrl.$formatters,
          idx = formatters.length;

      var viewValue = modelValue;
      while (idx--) {
        viewValue = formatters[idx](viewValue);
      }
      if (ctrl.$viewValue !== viewValue) {
        ctrl.$$updateEmptyClasses(viewValue);
        ctrl.$viewValue = ctrl.$$lastCommittedViewValue = viewValue;
        ctrl.$render();

        // It is possible that model and view value have been updated during render
        ctrl.$$runValidators(ctrl.$modelValue, ctrl.$viewValue, noop);
      }
    }

    return modelValue;
  });
}

/**
 * @ngdoc method
 * @name ngModel.NgModelController#$setValidity
 *
 * @description
 * Change the validity state, and notify the form.
 *
 * This method can be called within $parsers/$formatters or a custom validation implementation.
 * However, in most cases it should be sufficient to use the `ngModel.$validators` and
 * `ngModel.$asyncValidators` collections which will call `$setValidity` automatically.
 *
 * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be assigned
 *        to either `$error[validationErrorKey]` or `$pending[validationErrorKey]`
 *        (for unfulfilled `$asyncValidators`), so that it is available for data-binding.
 *        The `validationErrorKey` should be in camelCase and will get converted into dash-case
 *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`
 *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .
 * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending (undefined),
 *                          or skipped (null). Pending is used for unfulfilled `$asyncValidators`.
 *                          Skipped is used by Angular when validators do not run because of parse errors and
 *                          when `$asyncValidators` do not run because any of the `$validators` failed.
 */
addSetValidityMethod({
  clazz: NgModelController,
  set: function(object, property) {
    object[property] = true;
  },
  unset: function(object, property) {
    delete object[property];
  }
});


/**
 * @ngdoc directive
 * @name ngModel
 *
 * @element input
 * @priority 1
 *
 * @description
 * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a
 * property on the scope using {@link ngModel.NgModelController NgModelController},
 * which is created and exposed by this directive.
 *
 * `ngModel` is responsible for:
 *
 * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`
 *   require.
 * - Providing validation behavior (i.e. required, number, email, url).
 * - Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).
 * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`, `ng-touched`,
 *   `ng-untouched`, `ng-empty`, `ng-not-empty`) including animations.
 * - Registering the control with its parent {@link ng.directive:form form}.
 *
 * Note: `ngModel` will try to bind to the property given by evaluating the expression on the
 * current scope. If the property doesn't already exist on this scope, it will be created
 * implicitly and added to the scope.
 *
 * For best practices on using `ngModel`, see:
 *
 *  - [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)
 *
 * For basic examples, how to use `ngModel`, see:
 *
 *  - {@link ng.directive:input input}
 *    - {@link input[text] text}
 *    - {@link input[checkbox] checkbox}
 *    - {@link input[radio] radio}
 *    - {@link input[number] number}
 *    - {@link input[email] email}
 *    - {@link input[url] url}
 *    - {@link input[date] date}
 *    - {@link input[datetime-local] datetime-local}
 *    - {@link input[time] time}
 *    - {@link input[month] month}
 *    - {@link input[week] week}
 *  - {@link ng.directive:select select}
 *  - {@link ng.directive:textarea textarea}
 *
 * # Complex Models (objects or collections)
 *
 * By default, `ngModel` watches the model by reference, not value. This is important to know when
 * binding inputs to models that are objects (e.g. `Date`) or collections (e.g. arrays). If only properties of the
 * object or collection change, `ngModel` will not be notified and so the input will not be  re-rendered.
 *
 * The model must be assigned an entirely new object or collection before a re-rendering will occur.
 *
 * Some directives have options that will cause them to use a custom `$watchCollection` on the model expression
 * - for example, `ngOptions` will do so when a `track by` clause is included in the comprehension expression or
 * if the select is given the `multiple` attribute.
 *
 * The `$watchCollection()` method only does a shallow comparison, meaning that changing properties deeper than the
 * first level of the object (or only changing the properties of an item in the collection if it's an array) will still
 * not trigger a re-rendering of the model.
 *
 * # CSS classes
 * The following CSS classes are added and removed on the associated input/select/textarea element
 * depending on the validity of the model.
 *
 *  - `ng-valid`: the model is valid
 *  - `ng-invalid`: the model is invalid
 *  - `ng-valid-[key]`: for each valid key added by `$setValidity`
 *  - `ng-invalid-[key]`: for each invalid key added by `$setValidity`
 *  - `ng-pristine`: the control hasn't been interacted with yet
 *  - `ng-dirty`: the control has been interacted with
 *  - `ng-touched`: the control has been blurred
 *  - `ng-untouched`: the control hasn't been blurred
 *  - `ng-pending`: any `$asyncValidators` are unfulfilled
 *  - `ng-empty`: the view does not contain a value or the value is deemed "empty", as defined
 *     by the {@link ngModel.NgModelController#$isEmpty} method
 *  - `ng-not-empty`: the view contains a non-empty value
 *
 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
 *
 * ## Animation Hooks
 *
 * Animations within models are triggered when any of the associated CSS classes are added and removed
 * on the input element which is attached to the model. These classes include: `.ng-pristine`, `.ng-dirty`,
 * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.
 * The animations that are triggered within ngModel are similar to how they work in ngClass and
 * animations can be hooked into using CSS transitions, keyframes as well as JS animations.
 *
 * The following example shows a simple way to utilize CSS transitions to style an input element
 * that has been rendered as invalid after it has been validated:
 *
 * <pre>
 * //be sure to include ngAnimate as a module to hook into more
 * //advanced animations
 * .my-input {
 *   transition:0.5s linear all;
 *   background: white;
 * }
 * .my-input.ng-invalid {
 *   background: red;
 *   color:white;
 * }
 * </pre>
 *
 * @example
 * <example deps="angular-animate.js" animations="true" fixBase="true" module="inputExample" name="ng-model">
     <file name="index.html">
       <script>
        angular.module('inputExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.val = '1';
          }]);
       </script>
       <style>
         .my-input {
           transition:all linear 0.5s;
           background: transparent;
         }
         .my-input.ng-invalid {
           color:white;
           background: red;
         }
       </style>
       <p id="inputDescription">
        Update input to see transitions when valid/invalid.
        Integer is a valid value.
       </p>
       <form name="testForm" ng-controller="ExampleController">
         <input ng-model="val" ng-pattern="/^\d+$/" name="anim" class="my-input"
                aria-describedby="inputDescription" />
       </form>
     </file>
 * </example>
 *
 * ## Binding to a getter/setter
 *
 * Sometimes it's helpful to bind `ngModel` to a getter/setter function.  A getter/setter is a
 * function that returns a representation of the model when called with zero arguments, and sets
 * the internal state of a model when called with an argument. It's sometimes useful to use this
 * for models that have an internal representation that's different from what the model exposes
 * to the view.
 *
 * <div class="alert alert-success">
 * **Best Practice:** It's best to keep getters fast because Angular is likely to call them more
 * frequently than other parts of your code.
 * </div>
 *
 * You use this behavior by adding `ng-model-options="{ getterSetter: true }"` to an element that
 * has `ng-model` attached to it. You can also add `ng-model-options="{ getterSetter: true }"` to
 * a `<form>`, which will enable this behavior for all `<input>`s within it. See
 * {@link ng.directive:ngModelOptions `ngModelOptions`} for more.
 *
 * The following example shows how to use `ngModel` with a getter/setter:
 *
 * @example
 * <example name="ngModel-getter-setter" module="getterSetterExample">
     <file name="index.html">
       <div ng-controller="ExampleController">
         <form name="userForm">
           <label>Name:
             <input type="text" name="userName"
                    ng-model="user.name"
                    ng-model-options="{ getterSetter: true }" />
           </label>
         </form>
         <pre>user.name = <span ng-bind="user.name()"></span></pre>
       </div>
     </file>
     <file name="app.js">
       angular.module('getterSetterExample', [])
         .controller('ExampleController', ['$scope', function($scope) {
           var _name = 'Brian';
           $scope.user = {
             name: function(newName) {
              // Note that newName can be undefined for two reasons:
              // 1. Because it is called as a getter and thus called with no arguments
              // 2. Because the property should actually be set to undefined. This happens e.g. if the
              //    input is invalid
              return arguments.length ? (_name = newName) : _name;
             }
           };
         }]);
     </file>
 * </example>
 */
var ngModelDirective = ['$rootScope', function($rootScope) {
  return {
    restrict: 'A',
    require: ['ngModel', '^?form', '^?ngModelOptions'],
    controller: NgModelController,
    // Prelink needs to run before any input directive
    // so that we can set the NgModelOptions in NgModelController
    // before anyone else uses it.
    priority: 1,
    compile: function ngModelCompile(element) {
      // Setup initial state of the control
      element.addClass(PRISTINE_CLASS).addClass(UNTOUCHED_CLASS).addClass(VALID_CLASS);

      return {
        pre: function ngModelPreLink(scope, element, attr, ctrls) {
          var modelCtrl = ctrls[0],
              formCtrl = ctrls[1] || modelCtrl.$$parentForm,
              optionsCtrl = ctrls[2];

          if (optionsCtrl) {
            modelCtrl.$options = optionsCtrl.$options;
          }

          modelCtrl.$$initGetterSetters();

          // notify others, especially parent forms
          formCtrl.$addControl(modelCtrl);

          attr.$observe('name', function(newValue) {
            if (modelCtrl.$name !== newValue) {
              modelCtrl.$$parentForm.$$renameControl(modelCtrl, newValue);
            }
          });

          scope.$on('$destroy', function() {
            modelCtrl.$$parentForm.$removeControl(modelCtrl);
          });
        },
        post: function ngModelPostLink(scope, element, attr, ctrls) {
          var modelCtrl = ctrls[0];
          if (modelCtrl.$options.getOption('updateOn')) {
            element.on(modelCtrl.$options.getOption('updateOn'), function(ev) {
              modelCtrl.$$debounceViewValueCommit(ev && ev.type);
            });
          }

          function setTouched() {
            modelCtrl.$setTouched();
          }

          element.on('blur', function() {
            if (modelCtrl.$touched) return;

            if ($rootScope.$$phase) {
              scope.$evalAsync(setTouched);
            } else {
              scope.$apply(setTouched);
            }
          });
        }
      };
    }
  };
}];

/* exported defaultModelOptions */
var defaultModelOptions;
var DEFAULT_REGEXP = /(\s+|^)default(\s+|$)/;

/**
 * @ngdoc type
 * @name ModelOptions
 * @description
 * A container for the options set by the {@link ngModelOptions} directive
 */
function ModelOptions(options) {
  this.$$options = options;
}

ModelOptions.prototype = {

  /**
   * @ngdoc method
   * @name ModelOptions#getOption
   * @param {string} name the name of the option to retrieve
   * @returns {*} the value of the option
   * @description
   * Returns the value of the given option
   */
  getOption: function(name) {
    return this.$$options[name];
  },

  /**
   * @ngdoc method
   * @name ModelOptions#createChild
   * @param {Object} options a hash of options for the new child that will override the parent's options
   * @return {ModelOptions} a new `ModelOptions` object initialized with the given options.
   */
  createChild: function(options) {
    var inheritAll = false;

    // make a shallow copy
    options = extend({}, options);

    // Inherit options from the parent if specified by the value `"$inherit"`
    forEach(options, /* @this */ function(option, key) {
      if (option === '$inherit') {
        if (key === '*') {
          inheritAll = true;
        } else {
          options[key] = this.$$options[key];
          // `updateOn` is special so we must also inherit the `updateOnDefault` option
          if (key === 'updateOn') {
            options.updateOnDefault = this.$$options.updateOnDefault;
          }
        }
      } else {
        if (key === 'updateOn') {
          // If the `updateOn` property contains the `default` event then we have to remove
          // it from the event list and set the `updateOnDefault` flag.
          options.updateOnDefault = false;
          options[key] = trim(option.replace(DEFAULT_REGEXP, function() {
            options.updateOnDefault = true;
            return ' ';
          }));
        }
      }
    }, this);

    if (inheritAll) {
      // We have a property of the form: `"*": "$inherit"`
      delete options['*'];
      defaults(options, this.$$options);
    }

    // Finally add in any missing defaults
    defaults(options, defaultModelOptions.$$options);

    return new ModelOptions(options);
  }
};


defaultModelOptions = new ModelOptions({
  updateOn: '',
  updateOnDefault: true,
  debounce: 0,
  getterSetter: false,
  allowInvalid: false,
  timezone: null
});


/**
 * @ngdoc directive
 * @name ngModelOptions
 *
 * @description
 * This directive allows you to modify the behaviour of {@link ngModel} directives within your
 * application. You can specify an `ngModelOptions` directive on any element. All {@link ngModel}
 * directives will use the options of their nearest `ngModelOptions` ancestor.
 *
 * The `ngModelOptions` settings are found by evaluating the value of the attribute directive as
 * an Angular expression. This expression should evaluate to an object, whose properties contain
 * the settings. For example: `<div "ng-model-options"="{ debounce: 100 }"`.
 *
 * ## Inheriting Options
 *
 * You can specify that an `ngModelOptions` setting should be inherited from a parent `ngModelOptions`
 * directive by giving it the value of `"$inherit"`.
 * Then it will inherit that setting from the first `ngModelOptions` directive found by traversing up the
 * DOM tree. If there is no ancestor element containing an `ngModelOptions` directive then default settings
 * will be used.
 *
 * For example given the following fragment of HTML
 *
 *
 * ```html
 * <div ng-model-options="{ allowInvalid: true, debounce: 200 }">
 *   <form ng-model-options="{ updateOn: 'blur', allowInvalid: '$inherit' }">
 *     <input ng-model-options="{ updateOn: 'default', allowInvalid: '$inherit' }" />
 *   </form>
 * </div>
 * ```
 *
 * the `input` element will have the following settings
 *
 * ```js
 * { allowInvalid: true, updateOn: 'default', debounce: 0 }
 * ```
 *
 * Notice that the `debounce` setting was not inherited and used the default value instead.
 *
 * You can specify that all undefined settings are automatically inherited from an ancestor by
 * including a property with key of `"*"` and value of `"$inherit"`.
 *
 * For example given the following fragment of HTML
 *
 *
 * ```html
 * <div ng-model-options="{ allowInvalid: true, debounce: 200 }">
 *   <form ng-model-options="{ updateOn: 'blur', "*": '$inherit' }">
 *     <input ng-model-options="{ updateOn: 'default', "*": '$inherit' }" />
 *   </form>
 * </div>
 * ```
 *
 * the `input` element will have the following settings
 *
 * ```js
 * { allowInvalid: true, updateOn: 'default', debounce: 200 }
 * ```
 *
 * Notice that the `debounce` setting now inherits the value from the outer `<div>` element.
 *
 * If you are creating a reusable component then you should be careful when using `"*": "$inherit"`
 * since you may inadvertently inherit a setting in the future that changes the behavior of your component.
 *
 *
 * ## Triggering and debouncing model updates
 *
 * The `updateOn` and `debounce` properties allow you to specify a custom list of events that will
 * trigger a model update and/or a debouncing delay so that the actual update only takes place when
 * a timer expires; this timer will be reset after another change takes place.
 *
 * Given the nature of `ngModelOptions`, the value displayed inside input fields in the view might
 * be different from the value in the actual model. This means that if you update the model you
 * should also invoke {@link ngModel.NgModelController#$rollbackViewValue} on the relevant input field in
 * order to make sure it is synchronized with the model and that any debounced action is canceled.
 *
 * The easiest way to reference the control's {@link ngModel.NgModelController#$rollbackViewValue}
 * method is by making sure the input is placed inside a form that has a `name` attribute. This is
 * important because `form` controllers are published to the related scope under the name in their
 * `name` attribute.
 *
 * Any pending changes will take place immediately when an enclosing form is submitted via the
 * `submit` event. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
 * to have access to the updated model.
 *
 * The following example shows how to override immediate updates. Changes on the inputs within the
 * form will update the model only when the control loses focus (blur event). If `escape` key is
 * pressed while the input field is focused, the value is reset to the value in the current model.
 *
 * <example name="ngModelOptions-directive-blur" module="optionsExample">
 *   <file name="index.html">
 *     <div ng-controller="ExampleController">
 *       <form name="userForm">
 *         <label>
 *           Name:
 *           <input type="text" name="userName"
 *                  ng-model="user.name"
 *                  ng-model-options="{ updateOn: 'blur' }"
 *                  ng-keyup="cancel($event)" />
 *         </label><br />
 *         <label>
 *           Other data:
 *           <input type="text" ng-model="user.data" />
 *         </label><br />
 *       </form>
 *       <pre>user.name = <span ng-bind="user.name"></span></pre>
 *     </div>
 *   </file>
 *   <file name="app.js">
 *     angular.module('optionsExample', [])
 *       .controller('ExampleController', ['$scope', function($scope) {
 *         $scope.user = { name: 'say', data: '' };
 *
 *         $scope.cancel = function(e) {
 *           if (e.keyCode === 27) {
 *             $scope.userForm.userName.$rollbackViewValue();
 *           }
 *         };
 *       }]);
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     var model = element(by.binding('user.name'));
 *     var input = element(by.model('user.name'));
 *     var other = element(by.model('user.data'));
 *
 *     it('should allow custom events', function() {
 *       input.sendKeys(' hello');
 *       input.click();
 *       expect(model.getText()).toEqual('say');
 *       other.click();
 *       expect(model.getText()).toEqual('say hello');
 *     });
 *
 *     it('should $rollbackViewValue when model changes', function() {
 *       input.sendKeys(' hello');
 *       expect(input.getAttribute('value')).toEqual('say hello');
 *       input.sendKeys(protractor.Key.ESCAPE);
 *       expect(input.getAttribute('value')).toEqual('say');
 *       other.click();
 *       expect(model.getText()).toEqual('say');
 *     });
 *   </file>
 * </example>
 *
 * The next example shows how to debounce model changes. Model will be updated only 1 sec after last change.
 * If the `Clear` button is pressed, any debounced action is canceled and the value becomes empty.
 *
 * <example name="ngModelOptions-directive-debounce" module="optionsExample">
 *   <file name="index.html">
 *     <div ng-controller="ExampleController">
 *       <form name="userForm">
 *         Name:
 *         <input type="text" name="userName"
 *                ng-model="user.name"
 *                ng-model-options="{ debounce: 1000 }" />
 *         <button ng-click="userForm.userName.$rollbackViewValue(); user.name=''">Clear</button><br />
 *       </form>
 *       <pre>user.name = <span ng-bind="user.name"></span></pre>
 *     </div>
 *   </file>
 *   <file name="app.js">
 *     angular.module('optionsExample', [])
 *       .controller('ExampleController', ['$scope', function($scope) {
 *         $scope.user = { name: 'say' };
 *       }]);
 *   </file>
 * </example>
 *
 * ## Model updates and validation
 *
 * The default behaviour in `ngModel` is that the model value is set to `undefined` when the
 * validation determines that the value is invalid. By setting the `allowInvalid` property to true,
 * the model will still be updated even if the value is invalid.
 *
 *
 * ## Connecting to the scope
 *
 * By setting the `getterSetter` property to true you are telling ngModel that the `ngModel` expression
 * on the scope refers to a "getter/setter" function rather than the value itself.
 *
 * The following example shows how to bind to getter/setters:
 *
 * <example name="ngModelOptions-directive-getter-setter" module="getterSetterExample">
 *   <file name="index.html">
 *     <div ng-controller="ExampleController">
 *       <form name="userForm">
 *         <label>
 *           Name:
 *           <input type="text" name="userName"
 *                  ng-model="user.name"
 *                  ng-model-options="{ getterSetter: true }" />
 *         </label>
 *       </form>
 *       <pre>user.name = <span ng-bind="user.name()"></span></pre>
 *     </div>
 *   </file>
 *   <file name="app.js">
 *     angular.module('getterSetterExample', [])
 *       .controller('ExampleController', ['$scope', function($scope) {
 *         var _name = 'Brian';
 *         $scope.user = {
 *           name: function(newName) {
 *             return angular.isDefined(newName) ? (_name = newName) : _name;
 *           }
 *         };
 *       }]);
 *   </file>
 * </example>
 *
 *
 * ## Specifying timezones
 *
 * You can specify the timezone that date/time input directives expect by providing its name in the
 * `timezone` property.
 *
 * @param {Object} ngModelOptions options to apply to {@link ngModel} directives on this element and
 *   and its descendents. Valid keys are:
 *   - `updateOn`: string specifying which event should the input be bound to. You can set several
 *     events using an space delimited list. There is a special event called `default` that
 *     matches the default events belonging to the control.
 *   - `debounce`: integer value which contains the debounce model update value in milliseconds. A
 *     value of 0 triggers an immediate update. If an object is supplied instead, you can specify a
 *     custom value for each event. For example:
 *     ```
 *     ng-model-options="{
 *       updateOn: 'default blur',
 *       debounce: { 'default': 500, 'blur': 0 }
 *     }"
 *     ```
 *   - `allowInvalid`: boolean value which indicates that the model can be set with values that did
 *     not validate correctly instead of the default behavior of setting the model to undefined.
 *   - `getterSetter`: boolean value which determines whether or not to treat functions bound to
 *     `ngModel` as getters/setters.
 *   - `timezone`: Defines the timezone to be used to read/write the `Date` instance in the model for
 *     `<input type="date" />`, `<input type="time" />`, ... . It understands UTC/GMT and the
 *     continental US time zone abbreviations, but for general use, use a time zone offset, for
 *     example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
 *     If not specified, the timezone of the browser will be used.
 *
 */
var ngModelOptionsDirective = function() {
  NgModelOptionsController.$inject = ['$attrs', '$scope'];
  function NgModelOptionsController($attrs, $scope) {
    this.$$attrs = $attrs;
    this.$$scope = $scope;
  }
  NgModelOptionsController.prototype = {
    $onInit: function() {
      var parentOptions = this.parentCtrl ? this.parentCtrl.$options : defaultModelOptions;
      var modelOptionsDefinition = this.$$scope.$eval(this.$$attrs.ngModelOptions);

      this.$options = parentOptions.createChild(modelOptionsDefinition);
    }
  };

  return {
    restrict: 'A',
    // ngModelOptions needs to run before ngModel and input directives
    priority: 10,
    require: {parentCtrl: '?^^ngModelOptions'},
    bindToController: true,
    controller: NgModelOptionsController
  };
};


// shallow copy over values from `src` that are not already specified on `dst`
function defaults(dst, src) {
  forEach(src, function(value, key) {
    if (!isDefined(dst[key])) {
      dst[key] = value;
    }
  });
}

/**
 * @ngdoc directive
 * @name ngNonBindable
 * @restrict AC
 * @priority 1000
 *
 * @description
 * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current
 * DOM element. This is useful if the element contains what appears to be Angular directives and
 * bindings but which should be ignored by Angular. This could be the case if you have a site that
 * displays snippets of code, for instance.
 *
 * @element ANY
 *
 * @example
 * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,
 * but the one wrapped in `ngNonBindable` is left alone.
 *
 * @example
    <example name="ng-non-bindable">
      <file name="index.html">
        <div>Normal: {{1 + 2}}</div>
        <div ng-non-bindable>Ignored: {{1 + 2}}</div>
      </file>
      <file name="protractor.js" type="protractor">
       it('should check ng-non-bindable', function() {
         expect(element(by.binding('1 + 2')).getText()).toContain('3');
         expect(element.all(by.css('div')).last().getText()).toMatch(/1 \+ 2/);
       });
      </file>
    </example>
 */
var ngNonBindableDirective = ngDirective({ terminal: true, priority: 1000 });

/* exported ngOptionsDirective */

/* global jqLiteRemove */

var ngOptionsMinErr = minErr('ngOptions');

/**
 * @ngdoc directive
 * @name ngOptions
 * @restrict A
 *
 * @description
 *
 * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`
 * elements for the `<select>` element using the array or object obtained by evaluating the
 * `ngOptions` comprehension expression.
 *
 * In many cases, {@link ng.directive:ngRepeat ngRepeat} can be used on `<option>` elements instead of
 * `ngOptions` to achieve a similar result. However, `ngOptions` provides some benefits:
 * - more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
 * comprehension expression
 * - reduced memory consumption by not creating a new scope for each repeated instance
 * - increased render speed by creating the options in a documentFragment instead of individually
 *
 * When an item in the `<select>` menu is selected, the array element or object property
 * represented by the selected option will be bound to the model identified by the `ngModel`
 * directive.
 *
 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
 * option. See example below for demonstration.
 *
 * ## Complex Models (objects or collections)
 *
 * By default, `ngModel` watches the model by reference, not value. This is important to know when
 * binding the select to a model that is an object or a collection.
 *
 * One issue occurs if you want to preselect an option. For example, if you set
 * the model to an object that is equal to an object in your collection, `ngOptions` won't be able to set the selection,
 * because the objects are not identical. So by default, you should always reference the item in your collection
 * for preselections, e.g.: `$scope.selected = $scope.collection[3]`.
 *
 * Another solution is to use a `track by` clause, because then `ngOptions` will track the identity
 * of the item not by reference, but by the result of the `track by` expression. For example, if your
 * collection items have an id property, you would `track by item.id`.
 *
 * A different issue with objects or collections is that ngModel won't detect if an object property or
 * a collection item changes. For that reason, `ngOptions` additionally watches the model using
 * `$watchCollection`, when the expression contains a `track by` clause or the the select has the `multiple` attribute.
 * This allows ngOptions to trigger a re-rendering of the options even if the actual object/collection
 * has not changed identity, but only a property on the object or an item in the collection changes.
 *
 * Note that `$watchCollection` does a shallow comparison of the properties of the object (or the items in the collection
 * if the model is an array). This means that changing a property deeper than the first level inside the
 * object/collection will not trigger a re-rendering.
 *
 * ## `select` **`as`**
 *
 * Using `select` **`as`** will bind the result of the `select` expression to the model, but
 * the value of the `<select>` and `<option>` html elements will be either the index (for array data sources)
 * or property name (for object data sources) of the value within the collection. If a **`track by`** expression
 * is used, the result of that expression will be set as the value of the `option` and `select` elements.
 *
 *
 * ### `select` **`as`** and **`track by`**
 *
 * <div class="alert alert-warning">
 * Be careful when using `select` **`as`** and **`track by`** in the same expression.
 * </div>
 *
 * Given this array of items on the $scope:
 *
 * ```js
 * $scope.items = [{
 *   id: 1,
 *   label: 'aLabel',
 *   subItem: { name: 'aSubItem' }
 * }, {
 *   id: 2,
 *   label: 'bLabel',
 *   subItem: { name: 'bSubItem' }
 * }];
 * ```
 *
 * This will work:
 *
 * ```html
 * <select ng-options="item as item.label for item in items track by item.id" ng-model="selected"></select>
 * ```
 * ```js
 * $scope.selected = $scope.items[0];
 * ```
 *
 * but this will not work:
 *
 * ```html
 * <select ng-options="item.subItem as item.label for item in items track by item.id" ng-model="selected"></select>
 * ```
 * ```js
 * $scope.selected = $scope.items[0].subItem;
 * ```
 *
 * In both examples, the **`track by`** expression is applied successfully to each `item` in the
 * `items` array. Because the selected option has been set programmatically in the controller, the
 * **`track by`** expression is also applied to the `ngModel` value. In the first example, the
 * `ngModel` value is `items[0]` and the **`track by`** expression evaluates to `items[0].id` with
 * no issue. In the second example, the `ngModel` value is `items[0].subItem` and the **`track by`**
 * expression evaluates to `items[0].subItem.id` (which is undefined). As a result, the model value
 * is not matched against any `<option>` and the `<select>` appears as having no selected value.
 *
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required The control is considered valid only if value is entered.
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
 *    `required` when you want to data-bind to the `required` attribute.
 * @param {comprehension_expression=} ngOptions in one of the following forms:
 *
 *   * for array data sources:
 *     * `label` **`for`** `value` **`in`** `array`
 *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`
 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array`
 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array`
 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
 *     * `label` **`for`** `value` **`in`** `array` | orderBy:`orderexpr` **`track by`** `trackexpr`
 *        (for including a filter with `track by`)
 *   * for object data sources:
 *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
 *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
 *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`
 *     * `label` **`disable when`** `disable` **`for (`**`key`**`,`** `value`**`) in`** `object`
 *     * `select` **`as`** `label` **`group by`** `group`
 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
 *     * `select` **`as`** `label` **`disable when`** `disable`
 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
 *
 * Where:
 *
 *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.
 *   * `value`: local variable which will refer to each item in the `array` or each property value
 *      of `object` during iteration.
 *   * `key`: local variable which will refer to a property name in `object` during iteration.
 *   * `label`: The result of this expression will be the label for `<option>` element. The
 *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).
 *   * `select`: The result of this expression will be bound to the model of the parent `<select>`
 *      element. If not specified, `select` expression will default to `value`.
 *   * `group`: The result of this expression will be used to group options using the `<optgroup>`
 *      DOM element.
 *   * `disable`: The result of this expression will be used to disable the rendered `<option>`
 *      element. Return `true` to disable.
 *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be
 *      used to identify the objects in the array. The `trackexpr` will most likely refer to the
 *     `value` variable (e.g. `value.propertyName`). With this the selection is preserved
 *      even when the options are recreated (e.g. reloaded from the server).
 *
 * @example
    <example module="selectExample" name="select">
      <file name="index.html">
        <script>
        angular.module('selectExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.colors = [
              {name:'black', shade:'dark'},
              {name:'white', shade:'light', notAnOption: true},
              {name:'red', shade:'dark'},
              {name:'blue', shade:'dark', notAnOption: true},
              {name:'yellow', shade:'light', notAnOption: false}
            ];
            $scope.myColor = $scope.colors[2]; // red
          }]);
        </script>
        <div ng-controller="ExampleController">
          <ul>
            <li ng-repeat="color in colors">
              <label>Name: <input ng-model="color.name"></label>
              <label><input type="checkbox" ng-model="color.notAnOption"> Disabled?</label>
              <button ng-click="colors.splice($index, 1)" aria-label="Remove">X</button>
            </li>
            <li>
              <button ng-click="colors.push({})">add</button>
            </li>
          </ul>
          <hr/>
          <label>Color (null not allowed):
            <select ng-model="myColor" ng-options="color.name for color in colors"></select>
          </label><br/>
          <label>Color (null allowed):
          <span  class="nullable">
            <select ng-model="myColor" ng-options="color.name for color in colors">
              <option value="">-- choose color --</option>
            </select>
          </span></label><br/>

          <label>Color grouped by shade:
            <select ng-model="myColor" ng-options="color.name group by color.shade for color in colors">
            </select>
          </label><br/>

          <label>Color grouped by shade, with some disabled:
            <select ng-model="myColor"
                  ng-options="color.name group by color.shade disable when color.notAnOption for color in colors">
            </select>
          </label><br/>



          Select <button ng-click="myColor = { name:'not in list', shade: 'other' }">bogus</button>.
          <br/>
          <hr/>
          Currently selected: {{ {selected_color:myColor} }}
          <div style="border:solid 1px black; height:20px"
               ng-style="{'background-color':myColor.name}">
          </div>
        </div>
      </file>
      <file name="protractor.js" type="protractor">
         it('should check ng-options', function() {
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');
           element.all(by.model('myColor')).first().click();
           element.all(by.css('select[ng-model="myColor"] option')).first().click();
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');
           element(by.css('.nullable select[ng-model="myColor"]')).click();
           element.all(by.css('.nullable select[ng-model="myColor"] option')).first().click();
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');
         });
      </file>
    </example>
 */

/* eslint-disable max-len */
//                     //00001111111111000000000002222222222000000000000000000000333333333300000000000000000000000004444444444400000000000005555555555555000000000666666666666600000007777777777777000000000000000888888888800000000000000000009999999999
var NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([$\w][$\w]*)|(?:\(\s*([$\w][$\w]*)\s*,\s*([$\w][$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/;
                        // 1: value expression (valueFn)
                        // 2: label expression (displayFn)
                        // 3: group by expression (groupByFn)
                        // 4: disable when expression (disableWhenFn)
                        // 5: array item variable name
                        // 6: object item key variable name
                        // 7: object item value variable name
                        // 8: collection expression
                        // 9: track by expression
/* eslint-enable */


var ngOptionsDirective = ['$compile', '$document', '$parse', function($compile, $document, $parse) {

  function parseOptionsExpression(optionsExp, selectElement, scope) {

    var match = optionsExp.match(NG_OPTIONS_REGEXP);
    if (!(match)) {
      throw ngOptionsMinErr('iexp',
        'Expected expression in form of ' +
        '\'_select_ (as _label_)? for (_key_,)?_value_ in _collection_\'' +
        ' but got \'{0}\'. Element: {1}',
        optionsExp, startingTag(selectElement));
    }

    // Extract the parts from the ngOptions expression

    // The variable name for the value of the item in the collection
    var valueName = match[5] || match[7];
    // The variable name for the key of the item in the collection
    var keyName = match[6];

    // An expression that generates the viewValue for an option if there is a label expression
    var selectAs = / as /.test(match[0]) && match[1];
    // An expression that is used to track the id of each object in the options collection
    var trackBy = match[9];
    // An expression that generates the viewValue for an option if there is no label expression
    var valueFn = $parse(match[2] ? match[1] : valueName);
    var selectAsFn = selectAs && $parse(selectAs);
    var viewValueFn = selectAsFn || valueFn;
    var trackByFn = trackBy && $parse(trackBy);

    // Get the value by which we are going to track the option
    // if we have a trackFn then use that (passing scope and locals)
    // otherwise just hash the given viewValue
    var getTrackByValueFn = trackBy ?
                              function(value, locals) { return trackByFn(scope, locals); } :
                              function getHashOfValue(value) { return hashKey(value); };
    var getTrackByValue = function(value, key) {
      return getTrackByValueFn(value, getLocals(value, key));
    };

    var displayFn = $parse(match[2] || match[1]);
    var groupByFn = $parse(match[3] || '');
    var disableWhenFn = $parse(match[4] || '');
    var valuesFn = $parse(match[8]);

    var locals = {};
    var getLocals = keyName ? function(value, key) {
      locals[keyName] = key;
      locals[valueName] = value;
      return locals;
    } : function(value) {
      locals[valueName] = value;
      return locals;
    };


    function Option(selectValue, viewValue, label, group, disabled) {
      this.selectValue = selectValue;
      this.viewValue = viewValue;
      this.label = label;
      this.group = group;
      this.disabled = disabled;
    }

    function getOptionValuesKeys(optionValues) {
      var optionValuesKeys;

      if (!keyName && isArrayLike(optionValues)) {
        optionValuesKeys = optionValues;
      } else {
        // if object, extract keys, in enumeration order, unsorted
        optionValuesKeys = [];
        for (var itemKey in optionValues) {
          if (optionValues.hasOwnProperty(itemKey) && itemKey.charAt(0) !== '$') {
            optionValuesKeys.push(itemKey);
          }
        }
      }
      return optionValuesKeys;
    }

    return {
      trackBy: trackBy,
      getTrackByValue: getTrackByValue,
      getWatchables: $parse(valuesFn, function(optionValues) {
        // Create a collection of things that we would like to watch (watchedArray)
        // so that they can all be watched using a single $watchCollection
        // that only runs the handler once if anything changes
        var watchedArray = [];
        optionValues = optionValues || [];

        var optionValuesKeys = getOptionValuesKeys(optionValues);
        var optionValuesLength = optionValuesKeys.length;
        for (var index = 0; index < optionValuesLength; index++) {
          var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];
          var value = optionValues[key];

          var locals = getLocals(value, key);
          var selectValue = getTrackByValueFn(value, locals);
          watchedArray.push(selectValue);

          // Only need to watch the displayFn if there is a specific label expression
          if (match[2] || match[1]) {
            var label = displayFn(scope, locals);
            watchedArray.push(label);
          }

          // Only need to watch the disableWhenFn if there is a specific disable expression
          if (match[4]) {
            var disableWhen = disableWhenFn(scope, locals);
            watchedArray.push(disableWhen);
          }
        }
        return watchedArray;
      }),

      getOptions: function() {

        var optionItems = [];
        var selectValueMap = {};

        // The option values were already computed in the `getWatchables` fn,
        // which must have been called to trigger `getOptions`
        var optionValues = valuesFn(scope) || [];
        var optionValuesKeys = getOptionValuesKeys(optionValues);
        var optionValuesLength = optionValuesKeys.length;

        for (var index = 0; index < optionValuesLength; index++) {
          var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];
          var value = optionValues[key];
          var locals = getLocals(value, key);
          var viewValue = viewValueFn(scope, locals);
          var selectValue = getTrackByValueFn(viewValue, locals);
          var label = displayFn(scope, locals);
          var group = groupByFn(scope, locals);
          var disabled = disableWhenFn(scope, locals);
          var optionItem = new Option(selectValue, viewValue, label, group, disabled);

          optionItems.push(optionItem);
          selectValueMap[selectValue] = optionItem;
        }

        return {
          items: optionItems,
          selectValueMap: selectValueMap,
          getOptionFromViewValue: function(value) {
            return selectValueMap[getTrackByValue(value)];
          },
          getViewValueFromOption: function(option) {
            // If the viewValue could be an object that may be mutated by the application,
            // we need to make a copy and not return the reference to the value on the option.
            return trackBy ? copy(option.viewValue) : option.viewValue;
          }
        };
      }
    };
  }


  // we can't just jqLite('<option>') since jqLite is not smart enough
  // to create it in <select> and IE barfs otherwise.
  var optionTemplate = window.document.createElement('option'),
      optGroupTemplate = window.document.createElement('optgroup');

    function ngOptionsPostLink(scope, selectElement, attr, ctrls) {

      var selectCtrl = ctrls[0];
      var ngModelCtrl = ctrls[1];
      var multiple = attr.multiple;

      // The emptyOption allows the application developer to provide their own custom "empty"
      // option when the viewValue does not match any of the option values.
      for (var i = 0, children = selectElement.children(), ii = children.length; i < ii; i++) {
        if (children[i].value === '') {
          selectCtrl.hasEmptyOption = true;
          selectCtrl.emptyOption = children.eq(i);
          break;
        }
      }

      var providedEmptyOption = !!selectCtrl.emptyOption;

      var unknownOption = jqLite(optionTemplate.cloneNode(false));
      unknownOption.val('?');

      var options;
      var ngOptions = parseOptionsExpression(attr.ngOptions, selectElement, scope);
      // This stores the newly created options before they are appended to the select.
      // Since the contents are removed from the fragment when it is appended,
      // we only need to create it once.
      var listFragment = $document[0].createDocumentFragment();

      // Overwrite the implementation. ngOptions doesn't use hashes
      selectCtrl.generateUnknownOptionValue = function(val) {
        return '?';
      };

      // Update the controller methods for multiple selectable options
      if (!multiple) {

        selectCtrl.writeValue = function writeNgOptionsValue(value) {
          var selectedOption = options.selectValueMap[selectElement.val()];
          var option = options.getOptionFromViewValue(value);

          // Make sure to remove the selected attribute from the previously selected option
          // Otherwise, screen readers might get confused
          if (selectedOption) selectedOption.element.removeAttribute('selected');

          if (option) {
            // Don't update the option when it is already selected.
            // For example, the browser will select the first option by default. In that case,
            // most properties are set automatically - except the `selected` attribute, which we
            // set always

            if (selectElement[0].value !== option.selectValue) {
              selectCtrl.removeUnknownOption();
              selectCtrl.unselectEmptyOption();

              selectElement[0].value = option.selectValue;
              option.element.selected = true;
            }

            option.element.setAttribute('selected', 'selected');
          } else {

            if (providedEmptyOption) {
              selectCtrl.selectEmptyOption();
            } else if (selectCtrl.unknownOption.parent().length) {
              selectCtrl.updateUnknownOption(value);
            } else {
              selectCtrl.renderUnknownOption(value);
            }
          }
        };

        selectCtrl.readValue = function readNgOptionsValue() {

          var selectedOption = options.selectValueMap[selectElement.val()];

          if (selectedOption && !selectedOption.disabled) {
            selectCtrl.unselectEmptyOption();
            selectCtrl.removeUnknownOption();
            return options.getViewValueFromOption(selectedOption);
          }
          return null;
        };

        // If we are using `track by` then we must watch the tracked value on the model
        // since ngModel only watches for object identity change
        // FIXME: When a user selects an option, this watch will fire needlessly
        if (ngOptions.trackBy) {
          scope.$watch(
            function() { return ngOptions.getTrackByValue(ngModelCtrl.$viewValue); },
            function() { ngModelCtrl.$render(); }
          );
        }

      } else {

        selectCtrl.writeValue = function writeNgOptionsMultiple(values) {
          // Only set `<option>.selected` if necessary, in order to prevent some browsers from
          // scrolling to `<option>` elements that are outside the `<select>` element's viewport.

          var selectedOptions = values && values.map(getAndUpdateSelectedOption) || [];

          options.items.forEach(function(option) {
            if (option.element.selected && !includes(selectedOptions, option)) {
              option.element.selected = false;
            }
          });
        };


        selectCtrl.readValue = function readNgOptionsMultiple() {
          var selectedValues = selectElement.val() || [],
              selections = [];

          forEach(selectedValues, function(value) {
            var option = options.selectValueMap[value];
            if (option && !option.disabled) selections.push(options.getViewValueFromOption(option));
          });

          return selections;
        };

        // If we are using `track by` then we must watch these tracked values on the model
        // since ngModel only watches for object identity change
        if (ngOptions.trackBy) {

          scope.$watchCollection(function() {
            if (isArray(ngModelCtrl.$viewValue)) {
              return ngModelCtrl.$viewValue.map(function(value) {
                return ngOptions.getTrackByValue(value);
              });
            }
          }, function() {
            ngModelCtrl.$render();
          });

        }
      }

      if (providedEmptyOption) {

        // we need to remove it before calling selectElement.empty() because otherwise IE will
        // remove the label from the element. wtf?
        selectCtrl.emptyOption.remove();

        // compile the element since there might be bindings in it
        $compile(selectCtrl.emptyOption)(scope);

        if (selectCtrl.emptyOption[0].nodeType === NODE_TYPE_COMMENT) {
          // This means the empty option has currently no actual DOM node, probably because
          // it has been modified by a transclusion directive.
          selectCtrl.hasEmptyOption = false;

          // Redefine the registerOption function, which will catch
          // options that are added by ngIf etc. (rendering of the node is async because of
          // lazy transclusion)
          selectCtrl.registerOption = function(optionScope, optionEl) {
            if (optionEl.val() === '') {
              selectCtrl.hasEmptyOption = true;
              selectCtrl.emptyOption = optionEl;
              selectCtrl.emptyOption.removeClass('ng-scope');
              // This ensures the new empty option is selected if previously no option was selected
              ngModelCtrl.$render();

              optionEl.on('$destroy', function() {
                selectCtrl.hasEmptyOption = false;
                selectCtrl.emptyOption = undefined;
              });
            }
          };

        } else {
          // remove the class, which is added automatically because we recompile the element and it
          // becomes the compilation root
          selectCtrl.emptyOption.removeClass('ng-scope');
        }

      }

      selectElement.empty();

      // We need to do this here to ensure that the options object is defined
      // when we first hit it in writeNgOptionsValue
      updateOptions();

      // We will re-render the option elements if the option values or labels change
      scope.$watchCollection(ngOptions.getWatchables, updateOptions);

      // ------------------------------------------------------------------ //

      function addOptionElement(option, parent) {
        var optionElement = optionTemplate.cloneNode(false);
        parent.appendChild(optionElement);
        updateOptionElement(option, optionElement);
      }

      function getAndUpdateSelectedOption(viewValue) {
        var option = options.getOptionFromViewValue(viewValue);
        var element = option && option.element;

        if (element && !element.selected) element.selected = true;

        return option;
      }

      function updateOptionElement(option, element) {
        option.element = element;
        element.disabled = option.disabled;
        // NOTE: The label must be set before the value, otherwise IE10/11/EDGE create unresponsive
        // selects in certain circumstances when multiple selects are next to each other and display
        // the option list in listbox style, i.e. the select is [multiple], or specifies a [size].
        // See https://github.com/angular/angular.js/issues/11314 for more info.
        // This is unfortunately untestable with unit / e2e tests
        if (option.label !== element.label) {
          element.label = option.label;
          element.textContent = option.label;
        }
        element.value = option.selectValue;
      }

      function updateOptions() {
        var previousValue = options && selectCtrl.readValue();

        // We must remove all current options, but cannot simply set innerHTML = null
        // since the providedEmptyOption might have an ngIf on it that inserts comments which we
        // must preserve.
        // Instead, iterate over the current option elements and remove them or their optgroup
        // parents
        if (options) {

          for (var i = options.items.length - 1; i >= 0; i--) {
            var option = options.items[i];
            if (isDefined(option.group)) {
              jqLiteRemove(option.element.parentNode);
            } else {
              jqLiteRemove(option.element);
            }
          }
        }

        options = ngOptions.getOptions();

        var groupElementMap = {};

        // Ensure that the empty option is always there if it was explicitly provided
        if (providedEmptyOption) {
          selectElement.prepend(selectCtrl.emptyOption);
        }

        options.items.forEach(function addOption(option) {
          var groupElement;

          if (isDefined(option.group)) {

            // This option is to live in a group
            // See if we have already created this group
            groupElement = groupElementMap[option.group];

            if (!groupElement) {

              groupElement = optGroupTemplate.cloneNode(false);
              listFragment.appendChild(groupElement);

              // Update the label on the group element
              // "null" is special cased because of Safari
              groupElement.label = option.group === null ? 'null' : option.group;

              // Store it for use later
              groupElementMap[option.group] = groupElement;
            }

            addOptionElement(option, groupElement);

          } else {

            // This option is not in a group
            addOptionElement(option, listFragment);
          }
        });

        selectElement[0].appendChild(listFragment);

        ngModelCtrl.$render();

        // Check to see if the value has changed due to the update to the options
        if (!ngModelCtrl.$isEmpty(previousValue)) {
          var nextValue = selectCtrl.readValue();
          var isNotPrimitive = ngOptions.trackBy || multiple;
          if (isNotPrimitive ? !equals(previousValue, nextValue) : previousValue !== nextValue) {
            ngModelCtrl.$setViewValue(nextValue);
            ngModelCtrl.$render();
          }
        }

      }
  }

  return {
    restrict: 'A',
    terminal: true,
    require: ['select', 'ngModel'],
    link: {
      pre: function ngOptionsPreLink(scope, selectElement, attr, ctrls) {
        // Deactivate the SelectController.register method to prevent
        // option directives from accidentally registering themselves
        // (and unwanted $destroy handlers etc.)
        ctrls[0].registerOption = noop;
      },
      post: ngOptionsPostLink
    }
  };
}];

/**
 * @ngdoc directive
 * @name ngPluralize
 * @restrict EA
 *
 * @description
 * `ngPluralize` is a directive that displays messages according to en-US localization rules.
 * These rules are bundled with angular.js, but can be overridden
 * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive
 * by specifying the mappings between
 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
 * and the strings to be displayed.
 *
 * # Plural categories and explicit number rules
 * There are two
 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
 * in Angular's default en-US locale: "one" and "other".
 *
 * While a plural category may match many numbers (for example, in en-US locale, "other" can match
 * any number that is not 1), an explicit number rule can only match one number. For example, the
 * explicit number rule for "3" matches the number 3. There are examples of plural categories
 * and explicit number rules throughout the rest of this documentation.
 *
 * # Configuring ngPluralize
 * You configure ngPluralize by providing 2 attributes: `count` and `when`.
 * You can also provide an optional attribute, `offset`.
 *
 * The value of the `count` attribute can be either a string or an {@link guide/expression
 * Angular expression}; these are evaluated on the current scope for its bound value.
 *
 * The `when` attribute specifies the mappings between plural categories and the actual
 * string to be displayed. The value of the attribute should be a JSON object.
 *
 * The following example shows how to configure ngPluralize:
 *
 * ```html
 * <ng-pluralize count="personCount"
                 when="{'0': 'Nobody is viewing.',
 *                      'one': '1 person is viewing.',
 *                      'other': '{} people are viewing.'}">
 * </ng-pluralize>
 *```
 *
 * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not
 * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"
 * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for
 * other numbers, for example 12, so that instead of showing "12 people are viewing", you can
 * show "a dozen people are viewing".
 *
 * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted
 * into pluralized strings. In the previous example, Angular will replace `{}` with
 * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder
 * for <span ng-non-bindable>{{numberExpression}}</span>.
 *
 * If no rule is defined for a category, then an empty string is displayed and a warning is generated.
 * Note that some locales define more categories than `one` and `other`. For example, fr-fr defines `few` and `many`.
 *
 * # Configuring ngPluralize with offset
 * The `offset` attribute allows further customization of pluralized text, which can result in
 * a better user experience. For example, instead of the message "4 people are viewing this document",
 * you might display "John, Kate and 2 others are viewing this document".
 * The offset attribute allows you to offset a number by any desired value.
 * Let's take a look at an example:
 *
 * ```html
 * <ng-pluralize count="personCount" offset=2
 *               when="{'0': 'Nobody is viewing.',
 *                      '1': '{{person1}} is viewing.',
 *                      '2': '{{person1}} and {{person2}} are viewing.',
 *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',
 *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
 * </ng-pluralize>
 * ```
 *
 * Notice that we are still using two plural categories(one, other), but we added
 * three explicit number rules 0, 1 and 2.
 * When one person, perhaps John, views the document, "John is viewing" will be shown.
 * When three people view the document, no explicit number rule is found, so
 * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.
 * In this case, plural category 'one' is matched and "John, Mary and one other person are viewing"
 * is shown.
 *
 * Note that when you specify offsets, you must provide explicit number rules for
 * numbers from 0 up to and including the offset. If you use an offset of 3, for example,
 * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for
 * plural categories "one" and "other".
 *
 * @param {string|expression} count The variable to be bound to.
 * @param {string} when The mapping between plural category to its corresponding strings.
 * @param {number=} offset Offset to deduct from the total number.
 *
 * @example
    <example module="pluralizeExample" name="ng-pluralize">
      <file name="index.html">
        <script>
          angular.module('pluralizeExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.person1 = 'Igor';
              $scope.person2 = 'Misko';
              $scope.personCount = 1;
            }]);
        </script>
        <div ng-controller="ExampleController">
          <label>Person 1:<input type="text" ng-model="person1" value="Igor" /></label><br/>
          <label>Person 2:<input type="text" ng-model="person2" value="Misko" /></label><br/>
          <label>Number of People:<input type="text" ng-model="personCount" value="1" /></label><br/>

          <!--- Example with simple pluralization rules for en locale --->
          Without Offset:
          <ng-pluralize count="personCount"
                        when="{'0': 'Nobody is viewing.',
                               'one': '1 person is viewing.',
                               'other': '{} people are viewing.'}">
          </ng-pluralize><br>

          <!--- Example with offset --->
          With Offset(2):
          <ng-pluralize count="personCount" offset=2
                        when="{'0': 'Nobody is viewing.',
                               '1': '{{person1}} is viewing.',
                               '2': '{{person1}} and {{person2}} are viewing.',
                               'one': '{{person1}}, {{person2}} and one other person are viewing.',
                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
          </ng-pluralize>
        </div>
      </file>
      <file name="protractor.js" type="protractor">
        it('should show correct pluralized string', function() {
          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);
          var withOffset = element.all(by.css('ng-pluralize')).get(1);
          var countInput = element(by.model('personCount'));

          expect(withoutOffset.getText()).toEqual('1 person is viewing.');
          expect(withOffset.getText()).toEqual('Igor is viewing.');

          countInput.clear();
          countInput.sendKeys('0');

          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');
          expect(withOffset.getText()).toEqual('Nobody is viewing.');

          countInput.clear();
          countInput.sendKeys('2');

          expect(withoutOffset.getText()).toEqual('2 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');

          countInput.clear();
          countInput.sendKeys('3');

          expect(withoutOffset.getText()).toEqual('3 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');

          countInput.clear();
          countInput.sendKeys('4');

          expect(withoutOffset.getText()).toEqual('4 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');
        });
        it('should show data-bound names', function() {
          var withOffset = element.all(by.css('ng-pluralize')).get(1);
          var personCount = element(by.model('personCount'));
          var person1 = element(by.model('person1'));
          var person2 = element(by.model('person2'));
          personCount.clear();
          personCount.sendKeys('4');
          person1.clear();
          person1.sendKeys('Di');
          person2.clear();
          person2.sendKeys('Vojta');
          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');
        });
      </file>
    </example>
 */
var ngPluralizeDirective = ['$locale', '$interpolate', '$log', function($locale, $interpolate, $log) {
  var BRACE = /{}/g,
      IS_WHEN = /^when(Minus)?(.+)$/;

  return {
    link: function(scope, element, attr) {
      var numberExp = attr.count,
          whenExp = attr.$attr.when && element.attr(attr.$attr.when), // we have {{}} in attrs
          offset = attr.offset || 0,
          whens = scope.$eval(whenExp) || {},
          whensExpFns = {},
          startSymbol = $interpolate.startSymbol(),
          endSymbol = $interpolate.endSymbol(),
          braceReplacement = startSymbol + numberExp + '-' + offset + endSymbol,
          watchRemover = angular.noop,
          lastCount;

      forEach(attr, function(expression, attributeName) {
        var tmpMatch = IS_WHEN.exec(attributeName);
        if (tmpMatch) {
          var whenKey = (tmpMatch[1] ? '-' : '') + lowercase(tmpMatch[2]);
          whens[whenKey] = element.attr(attr.$attr[attributeName]);
        }
      });
      forEach(whens, function(expression, key) {
        whensExpFns[key] = $interpolate(expression.replace(BRACE, braceReplacement));

      });

      scope.$watch(numberExp, function ngPluralizeWatchAction(newVal) {
        var count = parseFloat(newVal);
        var countIsNaN = isNumberNaN(count);

        if (!countIsNaN && !(count in whens)) {
          // If an explicit number rule such as 1, 2, 3... is defined, just use it.
          // Otherwise, check it against pluralization rules in $locale service.
          count = $locale.pluralCat(count - offset);
        }

        // If both `count` and `lastCount` are NaN, we don't need to re-register a watch.
        // In JS `NaN !== NaN`, so we have to explicitly check.
        if ((count !== lastCount) && !(countIsNaN && isNumberNaN(lastCount))) {
          watchRemover();
          var whenExpFn = whensExpFns[count];
          if (isUndefined(whenExpFn)) {
            if (newVal != null) {
              $log.debug('ngPluralize: no rule defined for \'' + count + '\' in ' + whenExp);
            }
            watchRemover = noop;
            updateElementText();
          } else {
            watchRemover = scope.$watch(whenExpFn, updateElementText);
          }
          lastCount = count;
        }
      });

      function updateElementText(newText) {
        element.text(newText || '');
      }
    }
  };
}];

/* exported ngRepeatDirective */

/**
 * @ngdoc directive
 * @name ngRepeat
 * @multiElement
 *
 * @description
 * The `ngRepeat` directive instantiates a template once per item from a collection. Each template
 * instance gets its own scope, where the given loop variable is set to the current collection item,
 * and `$index` is set to the item index or key.
 *
 * Special properties are exposed on the local scope of each template instance, including:
 *
 * | Variable  | Type            | Details                                                                     |
 * |-----------|-----------------|-----------------------------------------------------------------------------|
 * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |
 * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |
 * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |
 * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |
 * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |
 * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |
 *
 * <div class="alert alert-info">
 *   Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.
 *   This may be useful when, for instance, nesting ngRepeats.
 * </div>
 *
 *
 * # Iterating over object properties
 *
 * It is possible to get `ngRepeat` to iterate over the properties of an object using the following
 * syntax:
 *
 * ```js
 * <div ng-repeat="(key, value) in myObj"> ... </div>
 * ```
 *
 * However, there are a few limitations compared to array iteration:
 *
 * - The JavaScript specification does not define the order of keys
 *   returned for an object, so Angular relies on the order returned by the browser
 *   when running `for key in myObj`. Browsers generally follow the strategy of providing
 *   keys in the order in which they were defined, although there are exceptions when keys are deleted
 *   and reinstated. See the
 *   [MDN page on `delete` for more info](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Cross-browser_notes).
 *
 * - `ngRepeat` will silently *ignore* object keys starting with `$`, because
 *   it's a prefix used by Angular for public (`$`) and private (`$$`) properties.
 *
 * - The built-in filters {@link ng.orderBy orderBy} and {@link ng.filter filter} do not work with
 *   objects, and will throw an error if used with one.
 *
 * If you are hitting any of these limitations, the recommended workaround is to convert your object into an array
 * that is sorted into the order that you prefer before providing it to `ngRepeat`. You could
 * do this with a filter such as [toArrayFilter](http://ngmodules.org/modules/angular-toArrayFilter)
 * or implement a `$watch` on the object yourself.
 *
 *
 * # Tracking and Duplicates
 *
 * `ngRepeat` uses {@link $rootScope.Scope#$watchCollection $watchCollection} to detect changes in
 * the collection. When a change happens, `ngRepeat` then makes the corresponding changes to the DOM:
 *
 * * When an item is added, a new instance of the template is added to the DOM.
 * * When an item is removed, its template instance is removed from the DOM.
 * * When items are reordered, their respective templates are reordered in the DOM.
 *
 * To minimize creation of DOM elements, `ngRepeat` uses a function
 * to "keep track" of all items in the collection and their corresponding DOM elements.
 * For example, if an item is added to the collection, `ngRepeat` will know that all other items
 * already have DOM elements, and will not re-render them.
 *
 * The default tracking function (which tracks items by their identity) does not allow
 * duplicate items in arrays. This is because when there are duplicates, it is not possible
 * to maintain a one-to-one mapping between collection items and DOM elements.
 *
 * If you do need to repeat duplicate items, you can substitute the default tracking behavior
 * with your own using the `track by` expression.
 *
 * For example, you may track items by the index of each item in the collection, using the
 * special scope property `$index`:
 * ```html
 *    <div ng-repeat="n in [42, 42, 43, 43] track by $index">
 *      {{n}}
 *    </div>
 * ```
 *
 * You may also use arbitrary expressions in `track by`, including references to custom functions
 * on the scope:
 * ```html
 *    <div ng-repeat="n in [42, 42, 43, 43] track by myTrackingFunction(n)">
 *      {{n}}
 *    </div>
 * ```
 *
 * <div class="alert alert-success">
 * If you are working with objects that have a unique identifier property, you should track
 * by this identifier instead of the object instance. Should you reload your data later, `ngRepeat`
 * will not have to rebuild the DOM elements for items it has already rendered, even if the
 * JavaScript objects in the collection have been substituted for new ones. For large collections,
 * this significantly improves rendering performance. If you don't have a unique identifier,
 * `track by $index` can also provide a performance boost.
 * </div>
 *
 * ```html
 *    <div ng-repeat="model in collection track by model.id">
 *      {{model.name}}
 *    </div>
 * ```
 *
 * <br />
 * <div class="alert alert-warning">
 * Avoid using `track by $index` when the repeated template contains
 * {@link guide/expression#one-time-binding one-time bindings}. In such cases, the `nth` DOM
 * element will always be matched with the `nth` item of the array, so the bindings on that element
 * will not be updated even when the corresponding item changes, essentially causing the view to get
 * out-of-sync with the underlying data.
 * </div>
 *
 * When no `track by` expression is provided, it is equivalent to tracking by the built-in
 * `$id` function, which tracks items by their identity:
 * ```html
 *    <div ng-repeat="obj in collection track by $id(obj)">
 *      {{obj.prop}}
 *    </div>
 * ```
 *
 * <br />
 * <div class="alert alert-warning">
 * **Note:** `track by` must always be the last expression:
 * </div>
 * ```
 *    <div ng-repeat="model in collection | orderBy: 'id' as filtered_result track by model.id">
 *      {{model.name}}
 *    </div>
 * ```
 *
 *
 * # Special repeat start and end points
 * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
 * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
 * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
 * up to and including the ending HTML tag where **ng-repeat-end** is placed.
 *
 * The example below makes use of this feature:
 * ```html
 *   <header ng-repeat-start="item in items">
 *     Header {{ item }}
 *   </header>
 *   <div class="body">
 *     Body {{ item }}
 *   </div>
 *   <footer ng-repeat-end>
 *     Footer {{ item }}
 *   </footer>
 * ```
 *
 * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:
 * ```html
 *   <header>
 *     Header A
 *   </header>
 *   <div class="body">
 *     Body A
 *   </div>
 *   <footer>
 *     Footer A
 *   </footer>
 *   <header>
 *     Header B
 *   </header>
 *   <div class="body">
 *     Body B
 *   </div>
 *   <footer>
 *     Footer B
 *   </footer>
 * ```
 *
 * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
 * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).
 *
 * @animations
 * | Animation                        | Occurs                              |
 * |----------------------------------|-------------------------------------|
 * | {@link ng.$animate#enter enter} | when a new item is added to the list or when an item is revealed after a filter |
 * | {@link ng.$animate#leave leave} | when an item is removed from the list or when an item is filtered out |
 * | {@link ng.$animate#move move } | when an adjacent item is filtered out causing a reorder or when the item contents are reordered |
 *
 * See the example below for defining CSS animations with ngRepeat.
 *
 * @element ANY
 * @scope
 * @priority 1000
 * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These
 *   formats are currently supported:
 *
 *   * `variable in expression` – where variable is the user defined loop variable and `expression`
 *     is a scope expression giving the collection to enumerate.
 *
 *     For example: `album in artist.albums`.
 *
 *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,
 *     and `expression` is the scope expression giving the collection to enumerate.
 *
 *     For example: `(name, age) in {'adam':10, 'amalie':12}`.
 *
 *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking expression
 *     which can be used to associate the objects in the collection with the DOM elements. If no tracking expression
 *     is specified, ng-repeat associates elements by identity. It is an error to have
 *     more than one tracking expression value resolve to the same key. (This would mean that two distinct objects are
 *     mapped to the same DOM element, which is not possible.)
 *
 *     Note that the tracking expression must come last, after any filters, and the alias expression.
 *
 *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements
 *     will be associated by item identity in the array.
 *
 *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique
 *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements
 *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM
 *     element in the same way in the DOM.
 *
 *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
 *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`
 *     property is same.
 *
 *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
 *     to items in conjunction with a tracking expression.
 *
 *   * `variable in expression as alias_expression` – You can also provide an optional alias expression which will then store the
 *     intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message
 *     when a filter is active on the repeater, but the filtered result set is empty.
 *
 *     For example: `item in items | filter:x as results` will store the fragment of the repeated items as `results`, but only after
 *     the items have been processed through the filter.
 *
 *     Please note that `as [variable name] is not an operator but rather a part of ngRepeat micro-syntax so it can be used only at the end
 *     (and not as operator, inside an expression).
 *
 *     For example: `item in items | filter : x | orderBy : order | limitTo : limit as results` .
 *
 * @example
 * This example uses `ngRepeat` to display a list of people. A filter is used to restrict the displayed
 * results by name or by age. New (entering) and removed (leaving) items are animated.
  <example module="ngRepeat" name="ngRepeat" deps="angular-animate.js" animations="true" name="ng-repeat">
    <file name="index.html">
      <div ng-controller="repeatController">
        I have {{friends.length}} friends. They are:
        <input type="search" ng-model="q" placeholder="filter friends..." aria-label="filter friends" />
        <ul class="example-animate-container">
          <li class="animate-repeat" ng-repeat="friend in friends | filter:q as results">
            [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.
          </li>
          <li class="animate-repeat" ng-if="results.length === 0">
            <strong>No results found...</strong>
          </li>
        </ul>
      </div>
    </file>
    <file name="script.js">
      angular.module('ngRepeat', ['ngAnimate']).controller('repeatController', function($scope) {
        $scope.friends = [
          {name:'John', age:25, gender:'boy'},
          {name:'Jessie', age:30, gender:'girl'},
          {name:'Johanna', age:28, gender:'girl'},
          {name:'Joy', age:15, gender:'girl'},
          {name:'Mary', age:28, gender:'girl'},
          {name:'Peter', age:95, gender:'boy'},
          {name:'Sebastian', age:50, gender:'boy'},
          {name:'Erika', age:27, gender:'girl'},
          {name:'Patrick', age:40, gender:'boy'},
          {name:'Samantha', age:60, gender:'girl'}
        ];
      });
    </file>
    <file name="animations.css">
      .example-animate-container {
        background:white;
        border:1px solid black;
        list-style:none;
        margin:0;
        padding:0 10px;
      }

      .animate-repeat {
        line-height:30px;
        list-style:none;
        box-sizing:border-box;
      }

      .animate-repeat.ng-move,
      .animate-repeat.ng-enter,
      .animate-repeat.ng-leave {
        transition:all linear 0.5s;
      }

      .animate-repeat.ng-leave.ng-leave-active,
      .animate-repeat.ng-move,
      .animate-repeat.ng-enter {
        opacity:0;
        max-height:0;
      }

      .animate-repeat.ng-leave,
      .animate-repeat.ng-move.ng-move-active,
      .animate-repeat.ng-enter.ng-enter-active {
        opacity:1;
        max-height:30px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var friends = element.all(by.repeater('friend in friends'));

      it('should render initial data set', function() {
        expect(friends.count()).toBe(10);
        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');
        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');
        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');
        expect(element(by.binding('friends.length')).getText())
            .toMatch("I have 10 friends. They are:");
      });

       it('should update repeater when filter predicate changes', function() {
         expect(friends.count()).toBe(10);

         element(by.model('q')).sendKeys('ma');

         expect(friends.count()).toBe(2);
         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');
         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');
       });
      </file>
    </example>
 */
var ngRepeatDirective = ['$parse', '$animate', '$compile', function($parse, $animate, $compile) {
  var NG_REMOVED = '$$NG_REMOVED';
  var ngRepeatMinErr = minErr('ngRepeat');

  var updateScope = function(scope, index, valueIdentifier, value, keyIdentifier, key, arrayLength) {
    // TODO(perf): generate setters to shave off ~40ms or 1-1.5%
    scope[valueIdentifier] = value;
    if (keyIdentifier) scope[keyIdentifier] = key;
    scope.$index = index;
    scope.$first = (index === 0);
    scope.$last = (index === (arrayLength - 1));
    scope.$middle = !(scope.$first || scope.$last);
    // eslint-disable-next-line no-bitwise
    scope.$odd = !(scope.$even = (index & 1) === 0);
  };

  var getBlockStart = function(block) {
    return block.clone[0];
  };

  var getBlockEnd = function(block) {
    return block.clone[block.clone.length - 1];
  };


  return {
    restrict: 'A',
    multiElement: true,
    transclude: 'element',
    priority: 1000,
    terminal: true,
    $$tlb: true,
    compile: function ngRepeatCompile($element, $attr) {
      var expression = $attr.ngRepeat;
      var ngRepeatEndComment = $compile.$$createComment('end ngRepeat', expression);

      var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);

      if (!match) {
        throw ngRepeatMinErr('iexp', 'Expected expression in form of \'_item_ in _collection_[ track by _id_]\' but got \'{0}\'.',
            expression);
      }

      var lhs = match[1];
      var rhs = match[2];
      var aliasAs = match[3];
      var trackByExp = match[4];

      match = lhs.match(/^(?:(\s*[$\w]+)|\(\s*([$\w]+)\s*,\s*([$\w]+)\s*\))$/);

      if (!match) {
        throw ngRepeatMinErr('iidexp', '\'_item_\' in \'_item_ in _collection_\' should be an identifier or \'(_key_, _value_)\' expression, but got \'{0}\'.',
            lhs);
      }
      var valueIdentifier = match[3] || match[1];
      var keyIdentifier = match[2];

      if (aliasAs && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs) ||
          /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(aliasAs))) {
        throw ngRepeatMinErr('badident', 'alias \'{0}\' is invalid --- must be a valid JS identifier which is not a reserved name.',
          aliasAs);
      }

      var trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn;
      var hashFnLocals = {$id: hashKey};

      if (trackByExp) {
        trackByExpGetter = $parse(trackByExp);
      } else {
        trackByIdArrayFn = function(key, value) {
          return hashKey(value);
        };
        trackByIdObjFn = function(key) {
          return key;
        };
      }

      return function ngRepeatLink($scope, $element, $attr, ctrl, $transclude) {

        if (trackByExpGetter) {
          trackByIdExpFn = function(key, value, index) {
            // assign key, value, and $index to the locals so that they can be used in hash functions
            if (keyIdentifier) hashFnLocals[keyIdentifier] = key;
            hashFnLocals[valueIdentifier] = value;
            hashFnLocals.$index = index;
            return trackByExpGetter($scope, hashFnLocals);
          };
        }

        // Store a list of elements from previous run. This is a hash where key is the item from the
        // iterator, and the value is objects with following properties.
        //   - scope: bound scope
        //   - element: previous element.
        //   - index: position
        //
        // We are using no-proto object so that we don't need to guard against inherited props via
        // hasOwnProperty.
        var lastBlockMap = createMap();

        //watch props
        $scope.$watchCollection(rhs, function ngRepeatAction(collection) {
          var index, length,
              previousNode = $element[0],     // node that cloned nodes should be inserted after
                                              // initialized to the comment node anchor
              nextNode,
              // Same as lastBlockMap but it has the current state. It will become the
              // lastBlockMap on the next iteration.
              nextBlockMap = createMap(),
              collectionLength,
              key, value, // key/value of iteration
              trackById,
              trackByIdFn,
              collectionKeys,
              block,       // last object information {scope, element, id}
              nextBlockOrder,
              elementsToRemove;

          if (aliasAs) {
            $scope[aliasAs] = collection;
          }

          if (isArrayLike(collection)) {
            collectionKeys = collection;
            trackByIdFn = trackByIdExpFn || trackByIdArrayFn;
          } else {
            trackByIdFn = trackByIdExpFn || trackByIdObjFn;
            // if object, extract keys, in enumeration order, unsorted
            collectionKeys = [];
            for (var itemKey in collection) {
              if (hasOwnProperty.call(collection, itemKey) && itemKey.charAt(0) !== '$') {
                collectionKeys.push(itemKey);
              }
            }
          }

          collectionLength = collectionKeys.length;
          nextBlockOrder = new Array(collectionLength);

          // locate existing items
          for (index = 0; index < collectionLength; index++) {
            key = (collection === collectionKeys) ? index : collectionKeys[index];
            value = collection[key];
            trackById = trackByIdFn(key, value, index);
            if (lastBlockMap[trackById]) {
              // found previously seen block
              block = lastBlockMap[trackById];
              delete lastBlockMap[trackById];
              nextBlockMap[trackById] = block;
              nextBlockOrder[index] = block;
            } else if (nextBlockMap[trackById]) {
              // if collision detected. restore lastBlockMap and throw an error
              forEach(nextBlockOrder, function(block) {
                if (block && block.scope) lastBlockMap[block.id] = block;
              });
              throw ngRepeatMinErr('dupes',
                  'Duplicates in a repeater are not allowed. Use \'track by\' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}',
                  expression, trackById, value);
            } else {
              // new never before seen block
              nextBlockOrder[index] = {id: trackById, scope: undefined, clone: undefined};
              nextBlockMap[trackById] = true;
            }
          }

          // remove leftover items
          for (var blockKey in lastBlockMap) {
            block = lastBlockMap[blockKey];
            elementsToRemove = getBlockNodes(block.clone);
            $animate.leave(elementsToRemove);
            if (elementsToRemove[0].parentNode) {
              // if the element was not removed yet because of pending animation, mark it as deleted
              // so that we can ignore it later
              for (index = 0, length = elementsToRemove.length; index < length; index++) {
                elementsToRemove[index][NG_REMOVED] = true;
              }
            }
            block.scope.$destroy();
          }

          // we are not using forEach for perf reasons (trying to avoid #call)
          for (index = 0; index < collectionLength; index++) {
            key = (collection === collectionKeys) ? index : collectionKeys[index];
            value = collection[key];
            block = nextBlockOrder[index];

            if (block.scope) {
              // if we have already seen this object, then we need to reuse the
              // associated scope/element

              nextNode = previousNode;

              // skip nodes that are already pending removal via leave animation
              do {
                nextNode = nextNode.nextSibling;
              } while (nextNode && nextNode[NG_REMOVED]);

              if (getBlockStart(block) !== nextNode) {
                // existing item which got moved
                $animate.move(getBlockNodes(block.clone), null, previousNode);
              }
              previousNode = getBlockEnd(block);
              updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
            } else {
              // new item which we don't know about
              $transclude(function ngRepeatTransclude(clone, scope) {
                block.scope = scope;
                // http://jsperf.com/clone-vs-createcomment
                var endNode = ngRepeatEndComment.cloneNode(false);
                clone[clone.length++] = endNode;

                $animate.enter(clone, null, previousNode);
                previousNode = endNode;
                // Note: We only need the first/last node of the cloned nodes.
                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
                // by a directive with templateUrl when its template arrives.
                block.clone = clone;
                nextBlockMap[block.id] = block;
                updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
              });
            }
          }
          lastBlockMap = nextBlockMap;
        });
      };
    }
  };
}];

var NG_HIDE_CLASS = 'ng-hide';
var NG_HIDE_IN_PROGRESS_CLASS = 'ng-hide-animate';
/**
 * @ngdoc directive
 * @name ngShow
 * @multiElement
 *
 * @description
 * The `ngShow` directive shows or hides the given HTML element based on the expression provided to
 * the `ngShow` attribute.
 *
 * The element is shown or hidden by removing or adding the `.ng-hide` CSS class onto the element.
 * The `.ng-hide` CSS class is predefined in AngularJS and sets the display style to none (using an
 * `!important` flag). For CSP mode please add `angular-csp.css` to your HTML file (see
 * {@link ng.directive:ngCsp ngCsp}).
 *
 * ```html
 * <!-- when $scope.myValue is truthy (element is visible) -->
 * <div ng-show="myValue"></div>
 *
 * <!-- when $scope.myValue is falsy (element is hidden) -->
 * <div ng-show="myValue" class="ng-hide"></div>
 * ```
 *
 * When the `ngShow` expression evaluates to a falsy value then the `.ng-hide` CSS class is added
 * to the class attribute on the element causing it to become hidden. When truthy, the `.ng-hide`
 * CSS class is removed from the element causing the element not to appear hidden.
 *
 * ## Why is `!important` used?
 *
 * You may be wondering why `!important` is used for the `.ng-hide` CSS class. This is because the
 * `.ng-hide` selector can be easily overridden by heavier selectors. For example, something as
 * simple as changing the display style on a HTML list item would make hidden elements appear
 * visible. This also becomes a bigger issue when dealing with CSS frameworks.
 *
 * By using `!important`, the show and hide behavior will work as expected despite any clash between
 * CSS selector specificity (when `!important` isn't used with any conflicting styles). If a
 * developer chooses to override the styling to change how to hide an element then it is just a
 * matter of using `!important` in their own CSS code.
 *
 * ### Overriding `.ng-hide`
 *
 * By default, the `.ng-hide` class will style the element with `display: none !important`. If you
 * wish to change the hide behavior with `ngShow`/`ngHide`, you can simply overwrite the styles for
 * the `.ng-hide` CSS class. Note that the selector that needs to be used is actually
 * `.ng-hide:not(.ng-hide-animate)` to cope with extra animation classes that can be added.
 *
 * ```css
 * .ng-hide:not(.ng-hide-animate) {
 *   /&#42; These are just alternative ways of hiding an element &#42;/
 *   display: block!important;
 *   position: absolute;
 *   top: -9999px;
 *   left: -9999px;
 * }
 * ```
 *
 * By default you don't need to override anything in CSS and the animations will work around the
 * display style.
 *
 * ## A note about animations with `ngShow`
 *
 * Animations in `ngShow`/`ngHide` work with the show and hide events that are triggered when the
 * directive expression is true and false. This system works like the animation system present with
 * `ngClass` except that you must also include the `!important` flag to override the display
 * property so that the elements are not actually hidden during the animation.
 *
 * ```css
 * /&#42; A working example can be found at the bottom of this page. &#42;/
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
 *   transition: all 0.5s linear;
 * }
 *
 * .my-element.ng-hide-add { ... }
 * .my-element.ng-hide-add.ng-hide-add-active { ... }
 * .my-element.ng-hide-remove { ... }
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
 * ```
 *
 * Keep in mind that, as of AngularJS version 1.3, there is no need to change the display property
 * to block during animation states - ngAnimate will automatically handle the style toggling for you.
 *
 * @animations
 * | Animation                                           | Occurs                                                                                                        |
 * |-----------------------------------------------------|---------------------------------------------------------------------------------------------------------------|
 * | {@link $animate#addClass addClass} `.ng-hide`       | After the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden. |
 * | {@link $animate#removeClass removeClass} `.ng-hide` | After the `ngShow` expression evaluates to a truthy value and just before contents are set to visible.        |
 *
 * @element ANY
 * @param {expression} ngShow If the {@link guide/expression expression} is truthy/falsy then the
 *                            element is shown/hidden respectively.
 *
 * @example
 * A simple example, animating the element's opacity:
 *
  <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-show-simple">
    <file name="index.html">
      Show: <input type="checkbox" ng-model="checked" aria-label="Toggle ngShow"><br />
      <div class="check-element animate-show-hide" ng-show="checked">
        I show up when your checkbox is checked.
      </div>
    </file>
    <file name="animations.css">
      .animate-show-hide.ng-hide {
        opacity: 0;
      }

      .animate-show-hide.ng-hide-add,
      .animate-show-hide.ng-hide-remove {
        transition: all linear 0.5s;
      }

      .check-element {
        border: 1px solid black;
        opacity: 1;
        padding: 10px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      it('should check ngShow', function() {
        var checkbox = element(by.model('checked'));
        var checkElem = element(by.css('.check-element'));

        expect(checkElem.isDisplayed()).toBe(false);
        checkbox.click();
        expect(checkElem.isDisplayed()).toBe(true);
      });
    </file>
  </example>
 *
 * <hr />
 * @example
 * A more complex example, featuring different show/hide animations:
 *
  <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-show-complex">
    <file name="index.html">
      Show: <input type="checkbox" ng-model="checked" aria-label="Toggle ngShow"><br />
      <div class="check-element funky-show-hide" ng-show="checked">
        I show up when your checkbox is checked.
      </div>
    </file>
    <file name="animations.css">
      body {
        overflow: hidden;
        perspective: 1000px;
      }

      .funky-show-hide.ng-hide-add {
        transform: rotateZ(0);
        transform-origin: right;
        transition: all 0.5s ease-in-out;
      }

      .funky-show-hide.ng-hide-add.ng-hide-add-active {
        transform: rotateZ(-135deg);
      }

      .funky-show-hide.ng-hide-remove {
        transform: rotateY(90deg);
        transform-origin: left;
        transition: all 0.5s ease;
      }

      .funky-show-hide.ng-hide-remove.ng-hide-remove-active {
        transform: rotateY(0);
      }

      .check-element {
        border: 1px solid black;
        opacity: 1;
        padding: 10px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      it('should check ngShow', function() {
        var checkbox = element(by.model('checked'));
        var checkElem = element(by.css('.check-element'));

        expect(checkElem.isDisplayed()).toBe(false);
        checkbox.click();
        expect(checkElem.isDisplayed()).toBe(true);
      });
    </file>
  </example>
 */
var ngShowDirective = ['$animate', function($animate) {
  return {
    restrict: 'A',
    multiElement: true,
    link: function(scope, element, attr) {
      scope.$watch(attr.ngShow, function ngShowWatchAction(value) {
        // we're adding a temporary, animation-specific class for ng-hide since this way
        // we can control when the element is actually displayed on screen without having
        // to have a global/greedy CSS selector that breaks when other animations are run.
        // Read: https://github.com/angular/angular.js/issues/9103#issuecomment-58335845
        $animate[value ? 'removeClass' : 'addClass'](element, NG_HIDE_CLASS, {
          tempClasses: NG_HIDE_IN_PROGRESS_CLASS
        });
      });
    }
  };
}];


/**
 * @ngdoc directive
 * @name ngHide
 * @multiElement
 *
 * @description
 * The `ngHide` directive shows or hides the given HTML element based on the expression provided to
 * the `ngHide` attribute.
 *
 * The element is shown or hidden by removing or adding the `.ng-hide` CSS class onto the element.
 * The `.ng-hide` CSS class is predefined in AngularJS and sets the display style to none (using an
 * `!important` flag). For CSP mode please add `angular-csp.css` to your HTML file (see
 * {@link ng.directive:ngCsp ngCsp}).
 *
 * ```html
 * <!-- when $scope.myValue is truthy (element is hidden) -->
 * <div ng-hide="myValue" class="ng-hide"></div>
 *
 * <!-- when $scope.myValue is falsy (element is visible) -->
 * <div ng-hide="myValue"></div>
 * ```
 *
 * When the `ngHide` expression evaluates to a truthy value then the `.ng-hide` CSS class is added
 * to the class attribute on the element causing it to become hidden. When falsy, the `.ng-hide`
 * CSS class is removed from the element causing the element not to appear hidden.
 *
 * ## Why is `!important` used?
 *
 * You may be wondering why `!important` is used for the `.ng-hide` CSS class. This is because the
 * `.ng-hide` selector can be easily overridden by heavier selectors. For example, something as
 * simple as changing the display style on a HTML list item would make hidden elements appear
 * visible. This also becomes a bigger issue when dealing with CSS frameworks.
 *
 * By using `!important`, the show and hide behavior will work as expected despite any clash between
 * CSS selector specificity (when `!important` isn't used with any conflicting styles). If a
 * developer chooses to override the styling to change how to hide an element then it is just a
 * matter of using `!important` in their own CSS code.
 *
 * ### Overriding `.ng-hide`
 *
 * By default, the `.ng-hide` class will style the element with `display: none !important`. If you
 * wish to change the hide behavior with `ngShow`/`ngHide`, you can simply overwrite the styles for
 * the `.ng-hide` CSS class. Note that the selector that needs to be used is actually
 * `.ng-hide:not(.ng-hide-animate)` to cope with extra animation classes that can be added.
 *
 * ```css
 * .ng-hide:not(.ng-hide-animate) {
 *   /&#42; These are just alternative ways of hiding an element &#42;/
 *   display: block!important;
 *   position: absolute;
 *   top: -9999px;
 *   left: -9999px;
 * }
 * ```
 *
 * By default you don't need to override in CSS anything and the animations will work around the
 * display style.
 *
 * ## A note about animations with `ngHide`
 *
 * Animations in `ngShow`/`ngHide` work with the show and hide events that are triggered when the
 * directive expression is true and false. This system works like the animation system present with
 * `ngClass` except that you must also include the `!important` flag to override the display
 * property so that the elements are not actually hidden during the animation.
 *
 * ```css
 * /&#42; A working example can be found at the bottom of this page. &#42;/
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
 *   transition: all 0.5s linear;
 * }
 *
 * .my-element.ng-hide-add { ... }
 * .my-element.ng-hide-add.ng-hide-add-active { ... }
 * .my-element.ng-hide-remove { ... }
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
 * ```
 *
 * Keep in mind that, as of AngularJS version 1.3, there is no need to change the display property
 * to block during animation states - ngAnimate will automatically handle the style toggling for you.
 *
 * @animations
 * | Animation                                           | Occurs                                                                                                     |
 * |-----------------------------------------------------|------------------------------------------------------------------------------------------------------------|
 * | {@link $animate#addClass addClass} `.ng-hide`       | After the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden.  |
 * | {@link $animate#removeClass removeClass} `.ng-hide` | After the `ngHide` expression evaluates to a non truthy value and just before contents are set to visible. |
 *
 *
 * @element ANY
 * @param {expression} ngHide If the {@link guide/expression expression} is truthy/falsy then the
 *                            element is hidden/shown respectively.
 *
 * @example
 * A simple example, animating the element's opacity:
 *
  <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-hide-simple">
    <file name="index.html">
      Hide: <input type="checkbox" ng-model="checked" aria-label="Toggle ngHide"><br />
      <div class="check-element animate-show-hide" ng-hide="checked">
        I hide when your checkbox is checked.
      </div>
    </file>
    <file name="animations.css">
      .animate-show-hide.ng-hide {
        opacity: 0;
      }

      .animate-show-hide.ng-hide-add,
      .animate-show-hide.ng-hide-remove {
        transition: all linear 0.5s;
      }

      .check-element {
        border: 1px solid black;
        opacity: 1;
        padding: 10px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      it('should check ngHide', function() {
        var checkbox = element(by.model('checked'));
        var checkElem = element(by.css('.check-element'));

        expect(checkElem.isDisplayed()).toBe(true);
        checkbox.click();
        expect(checkElem.isDisplayed()).toBe(false);
      });
    </file>
  </example>
 *
 * <hr />
 * @example
 * A more complex example, featuring different show/hide animations:
 *
  <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-hide-complex">
    <file name="index.html">
      Hide: <input type="checkbox" ng-model="checked" aria-label="Toggle ngHide"><br />
      <div class="check-element funky-show-hide" ng-hide="checked">
        I hide when your checkbox is checked.
      </div>
    </file>
    <file name="animations.css">
      body {
        overflow: hidden;
        perspective: 1000px;
      }

      .funky-show-hide.ng-hide-add {
        transform: rotateZ(0);
        transform-origin: right;
        transition: all 0.5s ease-in-out;
      }

      .funky-show-hide.ng-hide-add.ng-hide-add-active {
        transform: rotateZ(-135deg);
      }

      .funky-show-hide.ng-hide-remove {
        transform: rotateY(90deg);
        transform-origin: left;
        transition: all 0.5s ease;
      }

      .funky-show-hide.ng-hide-remove.ng-hide-remove-active {
        transform: rotateY(0);
      }

      .check-element {
        border: 1px solid black;
        opacity: 1;
        padding: 10px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      it('should check ngHide', function() {
        var checkbox = element(by.model('checked'));
        var checkElem = element(by.css('.check-element'));

        expect(checkElem.isDisplayed()).toBe(true);
        checkbox.click();
        expect(checkElem.isDisplayed()).toBe(false);
      });
    </file>
  </example>
 */
var ngHideDirective = ['$animate', function($animate) {
  return {
    restrict: 'A',
    multiElement: true,
    link: function(scope, element, attr) {
      scope.$watch(attr.ngHide, function ngHideWatchAction(value) {
        // The comment inside of the ngShowDirective explains why we add and
        // remove a temporary class for the show/hide animation
        $animate[value ? 'addClass' : 'removeClass'](element,NG_HIDE_CLASS, {
          tempClasses: NG_HIDE_IN_PROGRESS_CLASS
        });
      });
    }
  };
}];

/**
 * @ngdoc directive
 * @name ngStyle
 * @restrict AC
 *
 * @description
 * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.
 *
 * @knownIssue
 * You should not use {@link guide/interpolation interpolation} in the value of the `style`
 * attribute, when using the `ngStyle` directive on the same element.
 * See {@link guide/interpolation#known-issues here} for more info.
 *
 * @element ANY
 * @param {expression} ngStyle
 *
 * {@link guide/expression Expression} which evals to an
 * object whose keys are CSS style names and values are corresponding values for those CSS
 * keys.
 *
 * Since some CSS style names are not valid keys for an object, they must be quoted.
 * See the 'background-color' style in the example below.
 *
 * @example
   <example name="ng-style">
     <file name="index.html">
        <input type="button" value="set color" ng-click="myStyle={color:'red'}">
        <input type="button" value="set background" ng-click="myStyle={'background-color':'blue'}">
        <input type="button" value="clear" ng-click="myStyle={}">
        <br/>
        <span ng-style="myStyle">Sample Text</span>
        <pre>myStyle={{myStyle}}</pre>
     </file>
     <file name="style.css">
       span {
         color: black;
       }
     </file>
     <file name="protractor.js" type="protractor">
       var colorSpan = element(by.css('span'));

       it('should check ng-style', function() {
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
         element(by.css('input[value=\'set color\']')).click();
         expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');
         element(by.css('input[value=clear]')).click();
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
       });
     </file>
   </example>
 */
var ngStyleDirective = ngDirective(function(scope, element, attr) {
  scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {
    if (oldStyles && (newStyles !== oldStyles)) {
      forEach(oldStyles, function(val, style) { element.css(style, '');});
    }
    if (newStyles) element.css(newStyles);
  }, true);
});

/**
 * @ngdoc directive
 * @name ngSwitch
 * @restrict EA
 *
 * @description
 * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.
 * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location
 * as specified in the template.
 *
 * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it
 * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element
 * matches the value obtained from the evaluated expression. In other words, you define a container element
 * (where you place the directive), place an expression on the **`on="..."` attribute**
 * (or the **`ng-switch="..."` attribute**), define any inner elements inside of the directive and place
 * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on
 * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
 * attribute is displayed.
 *
 * <div class="alert alert-info">
 * Be aware that the attribute values to match against cannot be expressions. They are interpreted
 * as literal string values to match against.
 * For example, **`ng-switch-when="someVal"`** will match against the string `"someVal"` not against the
 * value of the expression `$scope.someVal`.
 * </div>

 * @animations
 * | Animation                        | Occurs                              |
 * |----------------------------------|-------------------------------------|
 * | {@link ng.$animate#enter enter}  | after the ngSwitch contents change and the matched child element is placed inside the container |
 * | {@link ng.$animate#leave leave}  | after the ngSwitch contents change and just before the former contents are removed from the DOM |
 *
 * @usage
 *
 * ```
 * <ANY ng-switch="expression">
 *   <ANY ng-switch-when="matchValue1">...</ANY>
 *   <ANY ng-switch-when="matchValue2">...</ANY>
 *   <ANY ng-switch-default>...</ANY>
 * </ANY>
 * ```
 *
 *
 * @scope
 * @priority 1200
 * @param {*} ngSwitch|on expression to match against <code>ng-switch-when</code>.
 * On child elements add:
 *
 * * `ngSwitchWhen`: the case statement to match against. If match then this
 *   case will be displayed. If the same match appears multiple times, all the
 *   elements will be displayed. It is possible to associate multiple values to
 *   the same `ngSwitchWhen` by defining the optional attribute
 *   `ngSwitchWhenSeparator`. The separator will be used to split the value of
 *   the `ngSwitchWhen` attribute into multiple tokens, and the element will show
 *   if any of the `ngSwitch` evaluates to any of these tokens.
 * * `ngSwitchDefault`: the default case when no other case match. If there
 *   are multiple default cases, all of them will be displayed when no other
 *   case match.
 *
 *
 * @example
  <example module="switchExample" deps="angular-animate.js" animations="true" name="ng-switch">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <select ng-model="selection" ng-options="item for item in items">
        </select>
        <code>selection={{selection}}</code>
        <hr/>
        <div class="animate-switch-container"
          ng-switch on="selection">
            <div class="animate-switch" ng-switch-when="settings|options" ng-switch-when-separator="|">Settings Div</div>
            <div class="animate-switch" ng-switch-when="home">Home Span</div>
            <div class="animate-switch" ng-switch-default>default</div>
        </div>
      </div>
    </file>
    <file name="script.js">
      angular.module('switchExample', ['ngAnimate'])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.items = ['settings', 'home', 'options', 'other'];
          $scope.selection = $scope.items[0];
        }]);
    </file>
    <file name="animations.css">
      .animate-switch-container {
        position:relative;
        background:white;
        border:1px solid black;
        height:40px;
        overflow:hidden;
      }

      .animate-switch {
        padding:10px;
      }

      .animate-switch.ng-animate {
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

        position:absolute;
        top:0;
        left:0;
        right:0;
        bottom:0;
      }

      .animate-switch.ng-leave.ng-leave-active,
      .animate-switch.ng-enter {
        top:-50px;
      }
      .animate-switch.ng-leave,
      .animate-switch.ng-enter.ng-enter-active {
        top:0;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var switchElem = element(by.css('[ng-switch]'));
      var select = element(by.model('selection'));

      it('should start in settings', function() {
        expect(switchElem.getText()).toMatch(/Settings Div/);
      });
      it('should change to home', function() {
        select.all(by.css('option')).get(1).click();
        expect(switchElem.getText()).toMatch(/Home Span/);
      });
      it('should change to settings via "options"', function() {
        select.all(by.css('option')).get(2).click();
        expect(switchElem.getText()).toMatch(/Settings Div/);
      });
      it('should select default', function() {
        select.all(by.css('option')).get(3).click();
        expect(switchElem.getText()).toMatch(/default/);
      });
    </file>
  </example>
 */
var ngSwitchDirective = ['$animate', '$compile', function($animate, $compile) {
  return {
    require: 'ngSwitch',

    // asks for $scope to fool the BC controller module
    controller: ['$scope', function NgSwitchController() {
     this.cases = {};
    }],
    link: function(scope, element, attr, ngSwitchController) {
      var watchExpr = attr.ngSwitch || attr.on,
          selectedTranscludes = [],
          selectedElements = [],
          previousLeaveAnimations = [],
          selectedScopes = [];

      var spliceFactory = function(array, index) {
          return function(response) {
            if (response !== false) array.splice(index, 1);
          };
      };

      scope.$watch(watchExpr, function ngSwitchWatchAction(value) {
        var i, ii;

        // Start with the last, in case the array is modified during the loop
        while (previousLeaveAnimations.length) {
          $animate.cancel(previousLeaveAnimations.pop());
        }

        for (i = 0, ii = selectedScopes.length; i < ii; ++i) {
          var selected = getBlockNodes(selectedElements[i].clone);
          selectedScopes[i].$destroy();
          var runner = previousLeaveAnimations[i] = $animate.leave(selected);
          runner.done(spliceFactory(previousLeaveAnimations, i));
        }

        selectedElements.length = 0;
        selectedScopes.length = 0;

        if ((selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?'])) {
          forEach(selectedTranscludes, function(selectedTransclude) {
            selectedTransclude.transclude(function(caseElement, selectedScope) {
              selectedScopes.push(selectedScope);
              var anchor = selectedTransclude.element;
              caseElement[caseElement.length++] = $compile.$$createComment('end ngSwitchWhen');
              var block = { clone: caseElement };

              selectedElements.push(block);
              $animate.enter(caseElement, anchor.parent(), anchor);
            });
          });
        }
      });
    }
  };
}];

var ngSwitchWhenDirective = ngDirective({
  transclude: 'element',
  priority: 1200,
  require: '^ngSwitch',
  multiElement: true,
  link: function(scope, element, attrs, ctrl, $transclude) {

    var cases = attrs.ngSwitchWhen.split(attrs.ngSwitchWhenSeparator).sort().filter(
      // Filter duplicate cases
      function(element, index, array) { return array[index - 1] !== element; }
    );

    forEach(cases, function(whenCase) {
      ctrl.cases['!' + whenCase] = (ctrl.cases['!' + whenCase] || []);
      ctrl.cases['!' + whenCase].push({ transclude: $transclude, element: element });
    });
  }
});

var ngSwitchDefaultDirective = ngDirective({
  transclude: 'element',
  priority: 1200,
  require: '^ngSwitch',
  multiElement: true,
  link: function(scope, element, attr, ctrl, $transclude) {
    ctrl.cases['?'] = (ctrl.cases['?'] || []);
    ctrl.cases['?'].push({ transclude: $transclude, element: element });
   }
});

/**
 * @ngdoc directive
 * @name ngTransclude
 * @restrict EAC
 *
 * @description
 * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
 *
 * You can specify that you want to insert a named transclusion slot, instead of the default slot, by providing the slot name
 * as the value of the `ng-transclude` or `ng-transclude-slot` attribute.
 *
 * If the transcluded content is not empty (i.e. contains one or more DOM nodes, including whitespace text nodes), any existing
 * content of this element will be removed before the transcluded content is inserted.
 * If the transcluded content is empty (or only whitespace), the existing content is left intact. This lets you provide fallback
 * content in the case that no transcluded content is provided.
 *
 * @element ANY
 *
 * @param {string} ngTransclude|ngTranscludeSlot the name of the slot to insert at this point. If this is not provided, is empty
 *                                               or its value is the same as the name of the attribute then the default slot is used.
 *
 * @example
 * ### Basic transclusion
 * This example demonstrates basic transclusion of content into a component directive.
 * <example name="simpleTranscludeExample" module="transcludeExample">
 *   <file name="index.html">
 *     <script>
 *       angular.module('transcludeExample', [])
 *        .directive('pane', function(){
 *           return {
 *             restrict: 'E',
 *             transclude: true,
 *             scope: { title:'@' },
 *             template: '<div style="border: 1px solid black;">' +
 *                         '<div style="background-color: gray">{{title}}</div>' +
 *                         '<ng-transclude></ng-transclude>' +
 *                       '</div>'
 *           };
 *       })
 *       .controller('ExampleController', ['$scope', function($scope) {
 *         $scope.title = 'Lorem Ipsum';
 *         $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
 *       }]);
 *     </script>
 *     <div ng-controller="ExampleController">
 *       <input ng-model="title" aria-label="title"> <br/>
 *       <textarea ng-model="text" aria-label="text"></textarea> <br/>
 *       <pane title="{{title}}"><span>{{text}}</span></pane>
 *     </div>
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *      it('should have transcluded', function() {
 *        var titleElement = element(by.model('title'));
 *        titleElement.clear();
 *        titleElement.sendKeys('TITLE');
 *        var textElement = element(by.model('text'));
 *        textElement.clear();
 *        textElement.sendKeys('TEXT');
 *        expect(element(by.binding('title')).getText()).toEqual('TITLE');
 *        expect(element(by.binding('text')).getText()).toEqual('TEXT');
 *      });
 *   </file>
 * </example>
 *
 * @example
 * ### Transclude fallback content
 * This example shows how to use `NgTransclude` with fallback content, that
 * is displayed if no transcluded content is provided.
 *
 * <example module="transcludeFallbackContentExample" name="ng-transclude">
 * <file name="index.html">
 * <script>
 * angular.module('transcludeFallbackContentExample', [])
 * .directive('myButton', function(){
 *             return {
 *               restrict: 'E',
 *               transclude: true,
 *               scope: true,
 *               template: '<button style="cursor: pointer;">' +
 *                           '<ng-transclude>' +
 *                             '<b style="color: red;">Button1</b>' +
 *                           '</ng-transclude>' +
 *                         '</button>'
 *             };
 *         });
 * </script>
 * <!-- fallback button content -->
 * <my-button id="fallback"></my-button>
 * <!-- modified button content -->
 * <my-button id="modified">
 *   <i style="color: green;">Button2</i>
 * </my-button>
 * </file>
 * <file name="protractor.js" type="protractor">
 * it('should have different transclude element content', function() {
 *          expect(element(by.id('fallback')).getText()).toBe('Button1');
 *          expect(element(by.id('modified')).getText()).toBe('Button2');
 *        });
 * </file>
 * </example>
 *
 * @example
 * ### Multi-slot transclusion
 * This example demonstrates using multi-slot transclusion in a component directive.
 * <example name="multiSlotTranscludeExample" module="multiSlotTranscludeExample">
 *   <file name="index.html">
 *    <style>
 *      .title, .footer {
 *        background-color: gray
 *      }
 *    </style>
 *    <div ng-controller="ExampleController">
 *      <input ng-model="title" aria-label="title"> <br/>
 *      <textarea ng-model="text" aria-label="text"></textarea> <br/>
 *      <pane>
 *        <pane-title><a ng-href="{{link}}">{{title}}</a></pane-title>
 *        <pane-body><p>{{text}}</p></pane-body>
 *      </pane>
 *    </div>
 *   </file>
 *   <file name="app.js">
 *    angular.module('multiSlotTranscludeExample', [])
 *     .directive('pane', function() {
 *        return {
 *          restrict: 'E',
 *          transclude: {
 *            'title': '?paneTitle',
 *            'body': 'paneBody',
 *            'footer': '?paneFooter'
 *          },
 *          template: '<div style="border: 1px solid black;">' +
 *                      '<div class="title" ng-transclude="title">Fallback Title</div>' +
 *                      '<div ng-transclude="body"></div>' +
 *                      '<div class="footer" ng-transclude="footer">Fallback Footer</div>' +
 *                    '</div>'
 *        };
 *    })
 *    .controller('ExampleController', ['$scope', function($scope) {
 *      $scope.title = 'Lorem Ipsum';
 *      $scope.link = 'https://google.com';
 *      $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
 *    }]);
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *      it('should have transcluded the title and the body', function() {
 *        var titleElement = element(by.model('title'));
 *        titleElement.clear();
 *        titleElement.sendKeys('TITLE');
 *        var textElement = element(by.model('text'));
 *        textElement.clear();
 *        textElement.sendKeys('TEXT');
 *        expect(element(by.css('.title')).getText()).toEqual('TITLE');
 *        expect(element(by.binding('text')).getText()).toEqual('TEXT');
 *        expect(element(by.css('.footer')).getText()).toEqual('Fallback Footer');
 *      });
 *   </file>
 * </example>
 */
var ngTranscludeMinErr = minErr('ngTransclude');
var ngTranscludeDirective = ['$compile', function($compile) {
  return {
    restrict: 'EAC',
    terminal: true,
    compile: function ngTranscludeCompile(tElement) {

      // Remove and cache any original content to act as a fallback
      var fallbackLinkFn = $compile(tElement.contents());
      tElement.empty();

      return function ngTranscludePostLink($scope, $element, $attrs, controller, $transclude) {

        if (!$transclude) {
          throw ngTranscludeMinErr('orphan',
          'Illegal use of ngTransclude directive in the template! ' +
          'No parent directive that requires a transclusion found. ' +
          'Element: {0}',
          startingTag($element));
        }


        // If the attribute is of the form: `ng-transclude="ng-transclude"` then treat it like the default
        if ($attrs.ngTransclude === $attrs.$attr.ngTransclude) {
          $attrs.ngTransclude = '';
        }
        var slotName = $attrs.ngTransclude || $attrs.ngTranscludeSlot;

        // If the slot is required and no transclusion content is provided then this call will throw an error
        $transclude(ngTranscludeCloneAttachFn, null, slotName);

        // If the slot is optional and no transclusion content is provided then use the fallback content
        if (slotName && !$transclude.isSlotFilled(slotName)) {
          useFallbackContent();
        }

        function ngTranscludeCloneAttachFn(clone, transcludedScope) {
          if (clone.length && notWhitespace(clone)) {
            $element.append(clone);
          } else {
            useFallbackContent();
            // There is nothing linked against the transcluded scope since no content was available,
            // so it should be safe to clean up the generated scope.
            transcludedScope.$destroy();
          }
        }

        function useFallbackContent() {
          // Since this is the fallback content rather than the transcluded content,
          // we link against the scope of this directive rather than the transcluded scope
          fallbackLinkFn($scope, function(clone) {
            $element.append(clone);
          });
        }

        function notWhitespace(nodes) {
          for (var i = 0, ii = nodes.length; i < ii; i++) {
            var node = nodes[i];
            if (node.nodeType !== NODE_TYPE_TEXT || node.nodeValue.trim()) {
              return true;
            }
          }
        }
      };
    }
  };
}];

/**
 * @ngdoc directive
 * @name script
 * @restrict E
 *
 * @description
 * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the
 * template can be used by {@link ng.directive:ngInclude `ngInclude`},
 * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the
 * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be
 * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.
 *
 * @param {string} type Must be set to `'text/ng-template'`.
 * @param {string} id Cache name of the template.
 *
 * @example
  <example  name="script-tag">
    <file name="index.html">
      <script type="text/ng-template" id="/tpl.html">
        Content of the template.
      </script>

      <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>
      <div id="tpl-content" ng-include src="currentTpl"></div>
    </file>
    <file name="protractor.js" type="protractor">
      it('should load template defined inside script tag', function() {
        element(by.css('#tpl-link')).click();
        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);
      });
    </file>
  </example>
 */
var scriptDirective = ['$templateCache', function($templateCache) {
  return {
    restrict: 'E',
    terminal: true,
    compile: function(element, attr) {
      if (attr.type === 'text/ng-template') {
        var templateUrl = attr.id,
            text = element[0].text;

        $templateCache.put(templateUrl, text);
      }
    }
  };
}];

/* exported selectDirective, optionDirective */

var noopNgModelController = { $setViewValue: noop, $render: noop };

/**
 * @ngdoc type
 * @name  select.SelectController
 * @description
 * The controller for the `<select>` directive. This provides support for reading
 * and writing the selected value(s) of the control and also coordinates dynamically
 * added `<option>` elements, perhaps by an `ngRepeat` directive.
 */
var SelectController =
        ['$element', '$scope', /** @this */ function($element, $scope) {

  var self = this,
      optionsMap = new NgMap();

  self.selectValueMap = {}; // Keys are the hashed values, values the original values

  // If the ngModel doesn't get provided then provide a dummy noop version to prevent errors
  self.ngModelCtrl = noopNgModelController;
  self.multiple = false;

  // The "unknown" option is one that is prepended to the list if the viewValue
  // does not match any of the options. When it is rendered the value of the unknown
  // option is '? XXX ?' where XXX is the hashKey of the value that is not known.
  //
  // We can't just jqLite('<option>') since jqLite is not smart enough
  // to create it in <select> and IE barfs otherwise.
  self.unknownOption = jqLite(window.document.createElement('option'));

  // The empty option is an option with the value '' that te application developer can
  // provide inside the select. When the model changes to a value that doesn't match an option,
  // it is selected - so if an empty option is provided, no unknown option is generated.
  // However, the empty option is not removed when the model matches an option. It is always selectable
  // and indicates that a "null" selection has been made.
  self.hasEmptyOption = false;
  self.emptyOption = undefined;

  self.renderUnknownOption = function(val) {
    var unknownVal = self.generateUnknownOptionValue(val);
    self.unknownOption.val(unknownVal);
    $element.prepend(self.unknownOption);
    setOptionAsSelected(self.unknownOption);
    $element.val(unknownVal);
  };

  self.updateUnknownOption = function(val) {
    var unknownVal = self.generateUnknownOptionValue(val);
    self.unknownOption.val(unknownVal);
    setOptionAsSelected(self.unknownOption);
    $element.val(unknownVal);
  };

  self.generateUnknownOptionValue = function(val) {
    return '? ' + hashKey(val) + ' ?';
  };

  self.removeUnknownOption = function() {
    if (self.unknownOption.parent()) self.unknownOption.remove();
  };

  self.selectEmptyOption = function() {
    if (self.emptyOption) {
      $element.val('');
      setOptionAsSelected(self.emptyOption);
    }
  };

  self.unselectEmptyOption = function() {
    if (self.hasEmptyOption) {
      self.emptyOption.removeAttr('selected');
    }
  };

  $scope.$on('$destroy', function() {
    // disable unknown option so that we don't do work when the whole select is being destroyed
    self.renderUnknownOption = noop;
  });

  // Read the value of the select control, the implementation of this changes depending
  // upon whether the select can have multiple values and whether ngOptions is at work.
  self.readValue = function readSingleValue() {
    var val = $element.val();
    // ngValue added option values are stored in the selectValueMap, normal interpolations are not
    var realVal = val in self.selectValueMap ? self.selectValueMap[val] : val;

    if (self.hasOption(realVal)) {
      return realVal;
    }

    return null;
  };


  // Write the value to the select control, the implementation of this changes depending
  // upon whether the select can have multiple values and whether ngOptions is at work.
  self.writeValue = function writeSingleValue(value) {
    // Make sure to remove the selected attribute from the previously selected option
    // Otherwise, screen readers might get confused
    var currentlySelectedOption = $element[0].options[$element[0].selectedIndex];
    if (currentlySelectedOption) currentlySelectedOption.removeAttribute('selected');

    if (self.hasOption(value)) {
      self.removeUnknownOption();

      var hashedVal = hashKey(value);
      $element.val(hashedVal in self.selectValueMap ? hashedVal : value);

      // Set selected attribute and property on selected option for screen readers
      var selectedOption = $element[0].options[$element[0].selectedIndex];
      setOptionAsSelected(jqLite(selectedOption));
    } else {
      if (value == null && self.emptyOption) {
        self.removeUnknownOption();
        self.selectEmptyOption();
      } else if (self.unknownOption.parent().length) {
        self.updateUnknownOption(value);
      } else {
        self.renderUnknownOption(value);
      }
    }
  };


  // Tell the select control that an option, with the given value, has been added
  self.addOption = function(value, element) {
    // Skip comment nodes, as they only pollute the `optionsMap`
    if (element[0].nodeType === NODE_TYPE_COMMENT) return;

    assertNotHasOwnProperty(value, '"option value"');
    if (value === '') {
      self.hasEmptyOption = true;
      self.emptyOption = element;
    }
    var count = optionsMap.get(value) || 0;
    optionsMap.set(value, count + 1);
    // Only render at the end of a digest. This improves render performance when many options
    // are added during a digest and ensures all relevant options are correctly marked as selected
    scheduleRender();
  };

  // Tell the select control that an option, with the given value, has been removed
  self.removeOption = function(value) {
    var count = optionsMap.get(value);
    if (count) {
      if (count === 1) {
        optionsMap.delete(value);
        if (value === '') {
          self.hasEmptyOption = false;
          self.emptyOption = undefined;
        }
      } else {
        optionsMap.set(value, count - 1);
      }
    }
  };

  // Check whether the select control has an option matching the given value
  self.hasOption = function(value) {
    return !!optionsMap.get(value);
  };


  var renderScheduled = false;
  function scheduleRender() {
    if (renderScheduled) return;
    renderScheduled = true;
    $scope.$$postDigest(function() {
      renderScheduled = false;
      self.ngModelCtrl.$render();
    });
  }

  var updateScheduled = false;
  function scheduleViewValueUpdate(renderAfter) {
    if (updateScheduled) return;

    updateScheduled = true;

    $scope.$$postDigest(function() {
      if ($scope.$$destroyed) return;

      updateScheduled = false;
      self.ngModelCtrl.$setViewValue(self.readValue());
      if (renderAfter) self.ngModelCtrl.$render();
    });
  }


  self.registerOption = function(optionScope, optionElement, optionAttrs, interpolateValueFn, interpolateTextFn) {

    if (optionAttrs.$attr.ngValue) {
      // The value attribute is set by ngValue
      var oldVal, hashedVal = NaN;
      optionAttrs.$observe('value', function valueAttributeObserveAction(newVal) {

        var removal;
        var previouslySelected = optionElement.prop('selected');

        if (isDefined(hashedVal)) {
          self.removeOption(oldVal);
          delete self.selectValueMap[hashedVal];
          removal = true;
        }

        hashedVal = hashKey(newVal);
        oldVal = newVal;
        self.selectValueMap[hashedVal] = newVal;
        self.addOption(newVal, optionElement);
        // Set the attribute directly instead of using optionAttrs.$set - this stops the observer
        // from firing a second time. Other $observers on value will also get the result of the
        // ngValue expression, not the hashed value
        optionElement.attr('value', hashedVal);

        if (removal && previouslySelected) {
          scheduleViewValueUpdate();
        }

      });
    } else if (interpolateValueFn) {
      // The value attribute is interpolated
      optionAttrs.$observe('value', function valueAttributeObserveAction(newVal) {
        // This method is overwritten in ngOptions and has side-effects!
        self.readValue();

        var removal;
        var previouslySelected = optionElement.prop('selected');

        if (isDefined(oldVal)) {
          self.removeOption(oldVal);
          removal = true;
        }
        oldVal = newVal;
        self.addOption(newVal, optionElement);

        if (removal && previouslySelected) {
          scheduleViewValueUpdate();
        }
      });
    } else if (interpolateTextFn) {
      // The text content is interpolated
      optionScope.$watch(interpolateTextFn, function interpolateWatchAction(newVal, oldVal) {
        optionAttrs.$set('value', newVal);
        var previouslySelected = optionElement.prop('selected');
        if (oldVal !== newVal) {
          self.removeOption(oldVal);
        }
        self.addOption(newVal, optionElement);

        if (oldVal && previouslySelected) {
          scheduleViewValueUpdate();
        }
      });
    } else {
      // The value attribute is static
      self.addOption(optionAttrs.value, optionElement);
    }


    optionAttrs.$observe('disabled', function(newVal) {

      // Since model updates will also select disabled options (like ngOptions),
      // we only have to handle options becoming disabled, not enabled

      if (newVal === 'true' || newVal && optionElement.prop('selected')) {
        if (self.multiple) {
          scheduleViewValueUpdate(true);
        } else {
          self.ngModelCtrl.$setViewValue(null);
          self.ngModelCtrl.$render();
        }
      }
    });

    optionElement.on('$destroy', function() {
      var currentValue = self.readValue();
      var removeValue = optionAttrs.value;

      self.removeOption(removeValue);
      scheduleRender();

      if (self.multiple && currentValue && currentValue.indexOf(removeValue) !== -1 ||
          currentValue === removeValue
      ) {
        // When multiple (selected) options are destroyed at the same time, we don't want
        // to run a model update for each of them. Instead, run a single update in the $$postDigest
        scheduleViewValueUpdate(true);
      }
    });
  };

  function setOptionAsSelected(optionEl) {
    optionEl.prop('selected', true); // needed for IE
    optionEl.attr('selected', true);
  }
}];

/**
 * @ngdoc directive
 * @name select
 * @restrict E
 *
 * @description
 * HTML `select` element with angular data-binding.
 *
 * The `select` directive is used together with {@link ngModel `ngModel`} to provide data-binding
 * between the scope and the `<select>` control (including setting default values).
 * It also handles dynamic `<option>` elements, which can be added using the {@link ngRepeat `ngRepeat}` or
 * {@link ngOptions `ngOptions`} directives.
 *
 * When an item in the `<select>` menu is selected, the value of the selected option will be bound
 * to the model identified by the `ngModel` directive. With static or repeated options, this is
 * the content of the `value` attribute or the textContent of the `<option>`, if the value attribute is missing.
 * Value and textContent can be interpolated.
 *
 * ## Matching model and option values
 *
 * In general, the match between the model and an option is evaluated by strictly comparing the model
 * value against the value of the available options.
 *
 * If you are setting the option value with the option's `value` attribute, or textContent, the
 * value will always be a `string` which means that the model value must also be a string.
 * Otherwise the `select` directive cannot match them correctly.
 *
 * To bind the model to a non-string value, you can use one of the following strategies:
 * - the {@link ng.ngOptions `ngOptions`} directive
 *   ({@link ng.select#using-select-with-ngoptions-and-setting-a-default-value})
 * - the {@link ng.ngValue `ngValue`} directive, which allows arbitrary expressions to be
 *   option values ({@link ng.select#using-ngvalue-to-bind-the-model-to-an-array-of-objects Example})
 * - model $parsers / $formatters to convert the string value
 *   ({@link ng.select#binding-select-to-a-non-string-value-via-ngmodel-parsing-formatting Example})
 *
 * If the viewValue of `ngModel` does not match any of the options, then the control
 * will automatically add an "unknown" option, which it then removes when the mismatch is resolved.
 *
 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
 * option. See example below for demonstration.
 *
 * ## Choosing between `ngRepeat` and `ngOptions`
 *
 * In many cases, `ngRepeat` can be used on `<option>` elements instead of {@link ng.directive:ngOptions
 * ngOptions} to achieve a similar result. However, `ngOptions` provides some benefits:
 * - more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
 * comprehension expression
 * - reduced memory consumption by not creating a new scope for each repeated instance
 * - increased render speed by creating the options in a documentFragment instead of individually
 *
 * Specifically, select with repeated options slows down significantly starting at 2000 options in
 * Chrome and Internet Explorer / Edge.
 *
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} multiple Allows multiple options to be selected. The selected values will be
 *     bound to the model as an array.
 * @param {string=} required Sets `required` validation error key if the value is not entered.
 * @param {string=} ngRequired Adds required attribute and required validation constraint to
 * the element when the ngRequired expression evaluates to true. Use ngRequired instead of required
 * when you want to data-bind to the required attribute.
 * @param {string=} ngChange Angular expression to be executed when selected option(s) changes due to user
 *    interaction with the select element.
 * @param {string=} ngOptions sets the options that the select is populated with and defines what is
 * set on the model on selection. See {@link ngOptions `ngOptions`}.
 *
 * @example
 * ### Simple `select` elements with static options
 *
 * <example name="static-select" module="staticSelect">
 * <file name="index.html">
 * <div ng-controller="ExampleController">
 *   <form name="myForm">
 *     <label for="singleSelect"> Single select: </label><br>
 *     <select name="singleSelect" ng-model="data.singleSelect">
 *       <option value="option-1">Option 1</option>
 *       <option value="option-2">Option 2</option>
 *     </select><br>
 *
 *     <label for="singleSelect"> Single select with "not selected" option and dynamic option values: </label><br>
 *     <select name="singleSelect" id="singleSelect" ng-model="data.singleSelect">
 *       <option value="">---Please select---</option> <!-- not selected / blank option -->
 *       <option value="{{data.option1}}">Option 1</option> <!-- interpolation -->
 *       <option value="option-2">Option 2</option>
 *     </select><br>
 *     <button ng-click="forceUnknownOption()">Force unknown option</button><br>
 *     <tt>singleSelect = {{data.singleSelect}}</tt>
 *
 *     <hr>
 *     <label for="multipleSelect"> Multiple select: </label><br>
 *     <select name="multipleSelect" id="multipleSelect" ng-model="data.multipleSelect" multiple>
 *       <option value="option-1">Option 1</option>
 *       <option value="option-2">Option 2</option>
 *       <option value="option-3">Option 3</option>
 *     </select><br>
 *     <tt>multipleSelect = {{data.multipleSelect}}</tt><br/>
 *   </form>
 * </div>
 * </file>
 * <file name="app.js">
 *  angular.module('staticSelect', [])
 *    .controller('ExampleController', ['$scope', function($scope) {
 *      $scope.data = {
 *       singleSelect: null,
 *       multipleSelect: [],
 *       option1: 'option-1'
 *      };
 *
 *      $scope.forceUnknownOption = function() {
 *        $scope.data.singleSelect = 'nonsense';
 *      };
 *   }]);
 * </file>
 *</example>
 *
 * ### Using `ngRepeat` to generate `select` options
 * <example name="select-ngrepeat" module="ngrepeatSelect">
 * <file name="index.html">
 * <div ng-controller="ExampleController">
 *   <form name="myForm">
 *     <label for="repeatSelect"> Repeat select: </label>
 *     <select name="repeatSelect" id="repeatSelect" ng-model="data.model">
 *       <option ng-repeat="option in data.availableOptions" value="{{option.id}}">{{option.name}}</option>
 *     </select>
 *   </form>
 *   <hr>
 *   <tt>model = {{data.model}}</tt><br/>
 * </div>
 * </file>
 * <file name="app.js">
 *  angular.module('ngrepeatSelect', [])
 *    .controller('ExampleController', ['$scope', function($scope) {
 *      $scope.data = {
 *       model: null,
 *       availableOptions: [
 *         {id: '1', name: 'Option A'},
 *         {id: '2', name: 'Option B'},
 *         {id: '3', name: 'Option C'}
 *       ]
 *      };
 *   }]);
 * </file>
 *</example>
 *
 * ### Using `ngValue` to bind the model to an array of objects
 * <example name="select-ngvalue" module="ngvalueSelect">
 * <file name="index.html">
 * <div ng-controller="ExampleController">
 *   <form name="myForm">
 *     <label for="ngvalueselect"> ngvalue select: </label>
 *     <select size="6" name="ngvalueselect" ng-model="data.model" multiple>
 *       <option ng-repeat="option in data.availableOptions" ng-value="option.value">{{option.name}}</option>
 *     </select>
 *   </form>
 *   <hr>
 *   <pre>model = {{data.model | json}}</pre><br/>
 * </div>
 * </file>
 * <file name="app.js">
 *  angular.module('ngvalueSelect', [])
 *    .controller('ExampleController', ['$scope', function($scope) {
 *      $scope.data = {
 *       model: null,
 *       availableOptions: [
           {value: 'myString', name: 'string'},
           {value: 1, name: 'integer'},
           {value: true, name: 'boolean'},
           {value: null, name: 'null'},
           {value: {prop: 'value'}, name: 'object'},
           {value: ['a'], name: 'array'}
 *       ]
 *      };
 *   }]);
 * </file>
 *</example>
 *
 * ### Using `select` with `ngOptions` and setting a default value
 * See the {@link ngOptions ngOptions documentation} for more `ngOptions` usage examples.
 *
 * <example name="select-with-default-values" module="defaultValueSelect">
 * <file name="index.html">
 * <div ng-controller="ExampleController">
 *   <form name="myForm">
 *     <label for="mySelect">Make a choice:</label>
 *     <select name="mySelect" id="mySelect"
 *       ng-options="option.name for option in data.availableOptions track by option.id"
 *       ng-model="data.selectedOption"></select>
 *   </form>
 *   <hr>
 *   <tt>option = {{data.selectedOption}}</tt><br/>
 * </div>
 * </file>
 * <file name="app.js">
 *  angular.module('defaultValueSelect', [])
 *    .controller('ExampleController', ['$scope', function($scope) {
 *      $scope.data = {
 *       availableOptions: [
 *         {id: '1', name: 'Option A'},
 *         {id: '2', name: 'Option B'},
 *         {id: '3', name: 'Option C'}
 *       ],
 *       selectedOption: {id: '3', name: 'Option C'} //This sets the default value of the select in the ui
 *       };
 *   }]);
 * </file>
 *</example>
 *
 *
 * ### Binding `select` to a non-string value via `ngModel` parsing / formatting
 *
 * <example name="select-with-non-string-options" module="nonStringSelect">
 *   <file name="index.html">
 *     <select ng-model="model.id" convert-to-number>
 *       <option value="0">Zero</option>
 *       <option value="1">One</option>
 *       <option value="2">Two</option>
 *     </select>
 *     {{ model }}
 *   </file>
 *   <file name="app.js">
 *     angular.module('nonStringSelect', [])
 *       .run(function($rootScope) {
 *         $rootScope.model = { id: 2 };
 *       })
 *       .directive('convertToNumber', function() {
 *         return {
 *           require: 'ngModel',
 *           link: function(scope, element, attrs, ngModel) {
 *             ngModel.$parsers.push(function(val) {
 *               return parseInt(val, 10);
 *             });
 *             ngModel.$formatters.push(function(val) {
 *               return '' + val;
 *             });
 *           }
 *         };
 *       });
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     it('should initialize to model', function() {
 *       expect(element(by.model('model.id')).$('option:checked').getText()).toEqual('Two');
 *     });
 *   </file>
 * </example>
 *
 */
var selectDirective = function() {

  return {
    restrict: 'E',
    require: ['select', '?ngModel'],
    controller: SelectController,
    priority: 1,
    link: {
      pre: selectPreLink,
      post: selectPostLink
    }
  };

  function selectPreLink(scope, element, attr, ctrls) {

      var selectCtrl = ctrls[0];
      var ngModelCtrl = ctrls[1];

      // if ngModel is not defined, we don't need to do anything but set the registerOption
      // function to noop, so options don't get added internally
      if (!ngModelCtrl) {
        selectCtrl.registerOption = noop;
        return;
      }


      selectCtrl.ngModelCtrl = ngModelCtrl;

      // When the selected item(s) changes we delegate getting the value of the select control
      // to the `readValue` method, which can be changed if the select can have multiple
      // selected values or if the options are being generated by `ngOptions`
      element.on('change', function() {
        selectCtrl.removeUnknownOption();
        scope.$apply(function() {
          ngModelCtrl.$setViewValue(selectCtrl.readValue());
        });
      });

      // If the select allows multiple values then we need to modify how we read and write
      // values from and to the control; also what it means for the value to be empty and
      // we have to add an extra watch since ngModel doesn't work well with arrays - it
      // doesn't trigger rendering if only an item in the array changes.
      if (attr.multiple) {
        selectCtrl.multiple = true;

        // Read value now needs to check each option to see if it is selected
        selectCtrl.readValue = function readMultipleValue() {
          var array = [];
          forEach(element.find('option'), function(option) {
            if (option.selected && !option.disabled) {
              var val = option.value;
              array.push(val in selectCtrl.selectValueMap ? selectCtrl.selectValueMap[val] : val);
            }
          });
          return array;
        };

        // Write value now needs to set the selected property of each matching option
        selectCtrl.writeValue = function writeMultipleValue(value) {
          forEach(element.find('option'), function(option) {
            option.selected = !!value && (includes(value, option.value) ||
                                          includes(value, selectCtrl.selectValueMap[option.value]));
          });
        };

        // we have to do it on each watch since ngModel watches reference, but
        // we need to work of an array, so we need to see if anything was inserted/removed
        var lastView, lastViewRef = NaN;
        scope.$watch(function selectMultipleWatch() {
          if (lastViewRef === ngModelCtrl.$viewValue && !equals(lastView, ngModelCtrl.$viewValue)) {
            lastView = shallowCopy(ngModelCtrl.$viewValue);
            ngModelCtrl.$render();
          }
          lastViewRef = ngModelCtrl.$viewValue;
        });

        // If we are a multiple select then value is now a collection
        // so the meaning of $isEmpty changes
        ngModelCtrl.$isEmpty = function(value) {
          return !value || value.length === 0;
        };

      }
    }

    function selectPostLink(scope, element, attrs, ctrls) {
      // if ngModel is not defined, we don't need to do anything
      var ngModelCtrl = ctrls[1];
      if (!ngModelCtrl) return;

      var selectCtrl = ctrls[0];

      // We delegate rendering to the `writeValue` method, which can be changed
      // if the select can have multiple selected values or if the options are being
      // generated by `ngOptions`.
      // This must be done in the postLink fn to prevent $render to be called before
      // all nodes have been linked correctly.
      ngModelCtrl.$render = function() {
        selectCtrl.writeValue(ngModelCtrl.$viewValue);
      };
    }
};


// The option directive is purely designed to communicate the existence (or lack of)
// of dynamically created (and destroyed) option elements to their containing select
// directive via its controller.
var optionDirective = ['$interpolate', function($interpolate) {
  return {
    restrict: 'E',
    priority: 100,
    compile: function(element, attr) {
      var interpolateValueFn, interpolateTextFn;

      if (isDefined(attr.ngValue)) {
        // Will be handled by registerOption
      } else if (isDefined(attr.value)) {
        // If the value attribute is defined, check if it contains an interpolation
        interpolateValueFn = $interpolate(attr.value, true);
      } else {
        // If the value attribute is not defined then we fall back to the
        // text content of the option element, which may be interpolated
        interpolateTextFn = $interpolate(element.text(), true);
        if (!interpolateTextFn) {
          attr.$set('value', element.text());
        }
      }

      return function(scope, element, attr) {
        // This is an optimization over using ^^ since we don't want to have to search
        // all the way to the root of the DOM for every single option element
        var selectCtrlName = '$selectController',
            parent = element.parent(),
            selectCtrl = parent.data(selectCtrlName) ||
              parent.parent().data(selectCtrlName); // in case we are in optgroup

        if (selectCtrl) {
          selectCtrl.registerOption(scope, element, attr, interpolateValueFn, interpolateTextFn);
        }
      };
    }
  };
}];

/**
 * @ngdoc directive
 * @name ngRequired
 * @restrict A
 *
 * @description
 *
 * ngRequired adds the required {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
 * It is most often used for {@link input `input`} and {@link select `select`} controls, but can also be
 * applied to custom controls.
 *
 * The directive sets the `required` attribute on the element if the Angular expression inside
 * `ngRequired` evaluates to true. A special directive for setting `required` is necessary because we
 * cannot use interpolation inside `required`. See the {@link guide/interpolation interpolation guide}
 * for more info.
 *
 * The validator will set the `required` error key to true if the `required` attribute is set and
 * calling {@link ngModel.NgModelController#$isEmpty `NgModelController.$isEmpty`} with the
 * {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`} returns `true`. For example, the
 * `$isEmpty()` implementation for `input[text]` checks the length of the `$viewValue`. When developing
 * custom controls, `$isEmpty()` can be overwritten to account for a $viewValue that is not string-based.
 *
 * @example
 * <example name="ngRequiredDirective" module="ngRequiredExample">
 *   <file name="index.html">
 *     <script>
 *       angular.module('ngRequiredExample', [])
 *         .controller('ExampleController', ['$scope', function($scope) {
 *           $scope.required = true;
 *         }]);
 *     </script>
 *     <div ng-controller="ExampleController">
 *       <form name="form">
 *         <label for="required">Toggle required: </label>
 *         <input type="checkbox" ng-model="required" id="required" />
 *         <br>
 *         <label for="input">This input must be filled if `required` is true: </label>
 *         <input type="text" ng-model="model" id="input" name="input" ng-required="required" /><br>
 *         <hr>
 *         required error set? = <code>{{form.input.$error.required}}</code><br>
 *         model = <code>{{model}}</code>
 *       </form>
 *     </div>
 *   </file>
 *   <file name="protractor.js" type="protractor">
       var required = element(by.binding('form.input.$error.required'));
       var model = element(by.binding('model'));
       var input = element(by.id('input'));

       it('should set the required error', function() {
         expect(required.getText()).toContain('true');

         input.sendKeys('123');
         expect(required.getText()).not.toContain('true');
         expect(model.getText()).toContain('123');
       });
 *   </file>
 * </example>
 */
var requiredDirective = function() {
  return {
    restrict: 'A',
    require: '?ngModel',
    link: function(scope, elm, attr, ctrl) {
      if (!ctrl) return;
      attr.required = true; // force truthy in case we are on non input element

      ctrl.$validators.required = function(modelValue, viewValue) {
        return !attr.required || !ctrl.$isEmpty(viewValue);
      };

      attr.$observe('required', function() {
        ctrl.$validate();
      });
    }
  };
};

/**
 * @ngdoc directive
 * @name ngPattern
 *
 * @description
 *
 * ngPattern adds the pattern {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
 *
 * The validator sets the `pattern` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
 * does not match a RegExp which is obtained by evaluating the Angular expression given in the
 * `ngPattern` attribute value:
 * * If the expression evaluates to a RegExp object, then this is used directly.
 * * If the expression evaluates to a string, then it will be converted to a RegExp after wrapping it
 * in `^` and `$` characters. For instance, `"abc"` will be converted to `new RegExp('^abc$')`.
 *
 * <div class="alert alert-info">
 * **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
 * start at the index of the last search's match, thus not taking the whole input value into
 * account.
 * </div>
 *
 * <div class="alert alert-info">
 * **Note:** This directive is also added when the plain `pattern` attribute is used, with two
 * differences:
 * <ol>
 *   <li>
 *     `ngPattern` does not set the `pattern` attribute and therefore HTML5 constraint validation is
 *     not available.
 *   </li>
 *   <li>
 *     The `ngPattern` attribute must be an expression, while the `pattern` value must be
 *     interpolated.
 *   </li>
 * </ol>
 * </div>
 *
 * @example
 * <example name="ngPatternDirective" module="ngPatternExample">
 *   <file name="index.html">
 *     <script>
 *       angular.module('ngPatternExample', [])
 *         .controller('ExampleController', ['$scope', function($scope) {
 *           $scope.regex = '\\d+';
 *         }]);
 *     </script>
 *     <div ng-controller="ExampleController">
 *       <form name="form">
 *         <label for="regex">Set a pattern (regex string): </label>
 *         <input type="text" ng-model="regex" id="regex" />
 *         <br>
 *         <label for="input">This input is restricted by the current pattern: </label>
 *         <input type="text" ng-model="model" id="input" name="input" ng-pattern="regex" /><br>
 *         <hr>
 *         input valid? = <code>{{form.input.$valid}}</code><br>
 *         model = <code>{{model}}</code>
 *       </form>
 *     </div>
 *   </file>
 *   <file name="protractor.js" type="protractor">
       var model = element(by.binding('model'));
       var input = element(by.id('input'));

       it('should validate the input with the default pattern', function() {
         input.sendKeys('aaa');
         expect(model.getText()).not.toContain('aaa');

         input.clear().then(function() {
           input.sendKeys('123');
           expect(model.getText()).toContain('123');
         });
       });
 *   </file>
 * </example>
 */
var patternDirective = function() {
  return {
    restrict: 'A',
    require: '?ngModel',
    link: function(scope, elm, attr, ctrl) {
      if (!ctrl) return;

      var regexp, patternExp = attr.ngPattern || attr.pattern;
      attr.$observe('pattern', function(regex) {
        if (isString(regex) && regex.length > 0) {
          regex = new RegExp('^' + regex + '$');
        }

        if (regex && !regex.test) {
          throw minErr('ngPattern')('noregexp',
            'Expected {0} to be a RegExp but was {1}. Element: {2}', patternExp,
            regex, startingTag(elm));
        }

        regexp = regex || undefined;
        ctrl.$validate();
      });

      ctrl.$validators.pattern = function(modelValue, viewValue) {
        // HTML5 pattern constraint validates the input value, so we validate the viewValue
        return ctrl.$isEmpty(viewValue) || isUndefined(regexp) || regexp.test(viewValue);
      };
    }
  };
};

/**
 * @ngdoc directive
 * @name ngMaxlength
 *
 * @description
 *
 * ngMaxlength adds the maxlength {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
 *
 * The validator sets the `maxlength` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
 * is longer than the integer obtained by evaluating the Angular expression given in the
 * `ngMaxlength` attribute value.
 *
 * <div class="alert alert-info">
 * **Note:** This directive is also added when the plain `maxlength` attribute is used, with two
 * differences:
 * <ol>
 *   <li>
 *     `ngMaxlength` does not set the `maxlength` attribute and therefore HTML5 constraint
 *     validation is not available.
 *   </li>
 *   <li>
 *     The `ngMaxlength` attribute must be an expression, while the `maxlength` value must be
 *     interpolated.
 *   </li>
 * </ol>
 * </div>
 *
 * @example
 * <example name="ngMaxlengthDirective" module="ngMaxlengthExample">
 *   <file name="index.html">
 *     <script>
 *       angular.module('ngMaxlengthExample', [])
 *         .controller('ExampleController', ['$scope', function($scope) {
 *           $scope.maxlength = 5;
 *         }]);
 *     </script>
 *     <div ng-controller="ExampleController">
 *       <form name="form">
 *         <label for="maxlength">Set a maxlength: </label>
 *         <input type="number" ng-model="maxlength" id="maxlength" />
 *         <br>
 *         <label for="input">This input is restricted by the current maxlength: </label>
 *         <input type="text" ng-model="model" id="input" name="input" ng-maxlength="maxlength" /><br>
 *         <hr>
 *         input valid? = <code>{{form.input.$valid}}</code><br>
 *         model = <code>{{model}}</code>
 *       </form>
 *     </div>
 *   </file>
 *   <file name="protractor.js" type="protractor">
       var model = element(by.binding('model'));
       var input = element(by.id('input'));

       it('should validate the input with the default maxlength', function() {
         input.sendKeys('abcdef');
         expect(model.getText()).not.toContain('abcdef');

         input.clear().then(function() {
           input.sendKeys('abcde');
           expect(model.getText()).toContain('abcde');
         });
       });
 *   </file>
 * </example>
 */
var maxlengthDirective = function() {
  return {
    restrict: 'A',
    require: '?ngModel',
    link: function(scope, elm, attr, ctrl) {
      if (!ctrl) return;

      var maxlength = -1;
      attr.$observe('maxlength', function(value) {
        var intVal = toInt(value);
        maxlength = isNumberNaN(intVal) ? -1 : intVal;
        ctrl.$validate();
      });
      ctrl.$validators.maxlength = function(modelValue, viewValue) {
        return (maxlength < 0) || ctrl.$isEmpty(viewValue) || (viewValue.length <= maxlength);
      };
    }
  };
};

/**
 * @ngdoc directive
 * @name ngMinlength
 *
 * @description
 *
 * ngMinlength adds the minlength {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
 *
 * The validator sets the `minlength` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
 * is shorter than the integer obtained by evaluating the Angular expression given in the
 * `ngMinlength` attribute value.
 *
 * <div class="alert alert-info">
 * **Note:** This directive is also added when the plain `minlength` attribute is used, with two
 * differences:
 * <ol>
 *   <li>
 *     `ngMinlength` does not set the `minlength` attribute and therefore HTML5 constraint
 *     validation is not available.
 *   </li>
 *   <li>
 *     The `ngMinlength` value must be an expression, while the `minlength` value must be
 *     interpolated.
 *   </li>
 * </ol>
 * </div>
 *
 * @example
 * <example name="ngMinlengthDirective" module="ngMinlengthExample">
 *   <file name="index.html">
 *     <script>
 *       angular.module('ngMinlengthExample', [])
 *         .controller('ExampleController', ['$scope', function($scope) {
 *           $scope.minlength = 3;
 *         }]);
 *     </script>
 *     <div ng-controller="ExampleController">
 *       <form name="form">
 *         <label for="minlength">Set a minlength: </label>
 *         <input type="number" ng-model="minlength" id="minlength" />
 *         <br>
 *         <label for="input">This input is restricted by the current minlength: </label>
 *         <input type="text" ng-model="model" id="input" name="input" ng-minlength="minlength" /><br>
 *         <hr>
 *         input valid? = <code>{{form.input.$valid}}</code><br>
 *         model = <code>{{model}}</code>
 *       </form>
 *     </div>
 *   </file>
 *   <file name="protractor.js" type="protractor">
       var model = element(by.binding('model'));
       var input = element(by.id('input'));

       it('should validate the input with the default minlength', function() {
         input.sendKeys('ab');
         expect(model.getText()).not.toContain('ab');

         input.sendKeys('abc');
         expect(model.getText()).toContain('abc');
       });
 *   </file>
 * </example>
 */
var minlengthDirective = function() {
  return {
    restrict: 'A',
    require: '?ngModel',
    link: function(scope, elm, attr, ctrl) {
      if (!ctrl) return;

      var minlength = 0;
      attr.$observe('minlength', function(value) {
        minlength = toInt(value) || 0;
        ctrl.$validate();
      });
      ctrl.$validators.minlength = function(modelValue, viewValue) {
        return ctrl.$isEmpty(viewValue) || viewValue.length >= minlength;
      };
    }
  };
};

if (window.angular.bootstrap) {
  // AngularJS is already loaded, so we can return here...
  if (window.console) {
    console.log('WARNING: Tried to load angular more than once.');
  }
  return;
}

// try to bind to jquery now so that one can write jqLite(fn)
// but we will rebind on bootstrap again.
bindJQuery();

publishExternalAPI(angular);

angular.module("ngLocale", [], ["$provide", function($provide) {
var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
function getDecimals(n) {
  n = n + '';
  var i = n.indexOf('.');
  return (i == -1) ? 0 : n.length - i - 1;
}

function getVF(n, opt_precision) {
  var v = opt_precision;

  if (undefined === v) {
    v = Math.min(getDecimals(n), 3);
  }

  var base = Math.pow(10, v);
  var f = ((n * base) | 0) % base;
  return {v: v, f: f};
}

$provide.value("$locale", {
  "DATETIME_FORMATS": {
    "AMPMS": [
      "AM",
      "PM"
    ],
    "DAY": [
      "Sunday",
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday",
      "Saturday"
    ],
    "ERANAMES": [
      "Before Christ",
      "Anno Domini"
    ],
    "ERAS": [
      "BC",
      "AD"
    ],
    "FIRSTDAYOFWEEK": 6,
    "MONTH": [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December"
    ],
    "SHORTDAY": [
      "Sun",
      "Mon",
      "Tue",
      "Wed",
      "Thu",
      "Fri",
      "Sat"
    ],
    "SHORTMONTH": [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec"
    ],
    "STANDALONEMONTH": [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December"
    ],
    "WEEKENDRANGE": [
      5,
      6
    ],
    "fullDate": "EEEE, MMMM d, y",
    "longDate": "MMMM d, y",
    "medium": "MMM d, y h:mm:ss a",
    "mediumDate": "MMM d, y",
    "mediumTime": "h:mm:ss a",
    "short": "M/d/yy h:mm a",
    "shortDate": "M/d/yy",
    "shortTime": "h:mm a"
  },
  "NUMBER_FORMATS": {
    "CURRENCY_SYM": "$",
    "DECIMAL_SEP": ".",
    "GROUP_SEP": ",",
    "PATTERNS": [
      {
        "gSize": 3,
        "lgSize": 3,
        "maxFrac": 3,
        "minFrac": 0,
        "minInt": 1,
        "negPre": "-",
        "negSuf": "",
        "posPre": "",
        "posSuf": ""
      },
      {
        "gSize": 3,
        "lgSize": 3,
        "maxFrac": 2,
        "minFrac": 2,
        "minInt": 1,
        "negPre": "-\u00a4",
        "negSuf": "",
        "posPre": "\u00a4",
        "posSuf": ""
      }
    ]
  },
  "id": "en-us",
  "localeID": "en_US",
  "pluralCat": function(n, opt_precision) {  var i = n | 0;  var vf = getVF(n, opt_precision);  if (i == 1 && vf.v == 0) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
});
}]);

  jqLite(function() {
    angularInit(window.document, bootstrap);
  });

})(window);

!window.angular.$$csp().noInlineStyle && window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(111);
module.exports = angular;


/***/ }),
/* 113 */,
/* 114 */,
/* 115 */,
/* 116 */,
/* 117 */,
/* 118 */,
/* 119 */,
/* 120 */,
/* 121 */,
/* 122 */,
/* 123 */,
/* 124 */,
/* 125 */,
/* 126 */,
/* 127 */,
/* 128 */,
/* 129 */,
/* 130 */,
/* 131 */,
/* 132 */,
/* 133 */,
/* 134 */,
/* 135 */,
/* 136 */,
/* 137 */,
/* 138 */,
/* 139 */,
/* 140 */,
/* 141 */,
/* 142 */,
/* 143 */,
/* 144 */,
/* 145 */,
/* 146 */,
/* 147 */,
/* 148 */,
/* 149 */,
/* 150 */,
/* 151 */,
/* 152 */,
/* 153 */,
/* 154 */,
/* 155 */,
/* 156 */,
/* 157 */,
/* 158 */,
/* 159 */,
/* 160 */,
/* 161 */,
/* 162 */,
/* 163 */,
/* 164 */,
/* 165 */,
/* 166 */,
/* 167 */,
/* 168 */,
/* 169 */,
/* 170 */,
/* 171 */,
/* 172 */,
/* 173 */,
/* 174 */,
/* 175 */,
/* 176 */,
/* 177 */,
/* 178 */,
/* 179 */,
/* 180 */,
/* 181 */,
/* 182 */,
/* 183 */,
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(17);
var ObjectUnsubscribedError_1 = __webpack_require__(75);
/**
 * @class BehaviorSubject<T>
 */
var BehaviorSubject = (function (_super) {
    __extends(BehaviorSubject, _super);
    function BehaviorSubject(_value) {
        _super.call(this);
        this._value = _value;
    }
    Object.defineProperty(BehaviorSubject.prototype, "value", {
        get: function () {
            return this.getValue();
        },
        enumerable: true,
        configurable: true
    });
    BehaviorSubject.prototype._subscribe = function (subscriber) {
        var subscription = _super.prototype._subscribe.call(this, subscriber);
        if (subscription && !subscription.closed) {
            subscriber.next(this._value);
        }
        return subscription;
    };
    BehaviorSubject.prototype.getValue = function () {
        if (this.hasError) {
            throw this.thrownError;
        }
        else if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        else {
            return this._value;
        }
    };
    BehaviorSubject.prototype.next = function (value) {
        _super.prototype.next.call(this, this._value = value);
    };
    return BehaviorSubject;
}(Subject_1.Subject));
exports.BehaviorSubject = BehaviorSubject;
//# sourceMappingURL=BehaviorSubject.js.map

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(5);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var InnerSubscriber = (function (_super) {
    __extends(InnerSubscriber, _super);
    function InnerSubscriber(parent, outerValue, outerIndex) {
        _super.call(this);
        this.parent = parent;
        this.outerValue = outerValue;
        this.outerIndex = outerIndex;
        this.index = 0;
    }
    InnerSubscriber.prototype._next = function (value) {
        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
    };
    InnerSubscriber.prototype._error = function (error) {
        this.parent.notifyError(error, this);
        this.unsubscribe();
    };
    InnerSubscriber.prototype._complete = function () {
        this.parent.notifyComplete(this);
        this.unsubscribe();
    };
    return InnerSubscriber;
}(Subscriber_1.Subscriber));
exports.InnerSubscriber = InnerSubscriber;
//# sourceMappingURL=InnerSubscriber.js.map

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(3);
/**
 * Represents a push-based event or value that an {@link Observable} can emit.
 * This class is particularly useful for operators that manage notifications,
 * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and
 * others. Besides wrapping the actual delivered value, it also annotates it
 * with metadata of, for instance, what type of push message it is (`next`,
 * `error`, or `complete`).
 *
 * @see {@link materialize}
 * @see {@link dematerialize}
 * @see {@link observeOn}
 *
 * @class Notification<T>
 */
var Notification = (function () {
    function Notification(kind, value, error) {
        this.kind = kind;
        this.value = value;
        this.error = error;
        this.hasValue = kind === 'N';
    }
    /**
     * Delivers to the given `observer` the value wrapped by this Notification.
     * @param {Observer} observer
     * @return
     */
    Notification.prototype.observe = function (observer) {
        switch (this.kind) {
            case 'N':
                return observer.next && observer.next(this.value);
            case 'E':
                return observer.error && observer.error(this.error);
            case 'C':
                return observer.complete && observer.complete();
        }
    };
    /**
     * Given some {@link Observer} callbacks, deliver the value represented by the
     * current Notification to the correctly corresponding callback.
     * @param {function(value: T): void} next An Observer `next` callback.
     * @param {function(err: any): void} [error] An Observer `error` callback.
     * @param {function(): void} [complete] An Observer `complete` callback.
     * @return {any}
     */
    Notification.prototype.do = function (next, error, complete) {
        var kind = this.kind;
        switch (kind) {
            case 'N':
                return next && next(this.value);
            case 'E':
                return error && error(this.error);
            case 'C':
                return complete && complete();
        }
    };
    /**
     * Takes an Observer or its individual callback functions, and calls `observe`
     * or `do` methods accordingly.
     * @param {Observer|function(value: T): void} nextOrObserver An Observer or
     * the `next` callback.
     * @param {function(err: any): void} [error] An Observer `error` callback.
     * @param {function(): void} [complete] An Observer `complete` callback.
     * @return {any}
     */
    Notification.prototype.accept = function (nextOrObserver, error, complete) {
        if (nextOrObserver && typeof nextOrObserver.next === 'function') {
            return this.observe(nextOrObserver);
        }
        else {
            return this.do(nextOrObserver, error, complete);
        }
    };
    /**
     * Returns a simple Observable that just delivers the notification represented
     * by this Notification instance.
     * @return {any}
     */
    Notification.prototype.toObservable = function () {
        var kind = this.kind;
        switch (kind) {
            case 'N':
                return Observable_1.Observable.of(this.value);
            case 'E':
                return Observable_1.Observable.throw(this.error);
            case 'C':
                return Observable_1.Observable.empty();
        }
        throw new Error('unexpected notification kind value');
    };
    /**
     * A shortcut to create a Notification instance of the type `next` from a
     * given value.
     * @param {T} value The `next` value.
     * @return {Notification<T>} The "next" Notification representing the
     * argument.
     */
    Notification.createNext = function (value) {
        if (typeof value !== 'undefined') {
            return new Notification('N', value);
        }
        return this.undefinedValueNotification;
    };
    /**
     * A shortcut to create a Notification instance of the type `error` from a
     * given error.
     * @param {any} [err] The `error` error.
     * @return {Notification<T>} The "error" Notification representing the
     * argument.
     */
    Notification.createError = function (err) {
        return new Notification('E', undefined, err);
    };
    /**
     * A shortcut to create a Notification instance of the type `complete`.
     * @return {Notification<any>} The valueless "complete" Notification.
     */
    Notification.createComplete = function () {
        return this.completeNotification;
    };
    Notification.completeNotification = new Notification('C');
    Notification.undefinedValueNotification = new Notification('N', undefined);
    return Notification;
}());
exports.Notification = Notification;
//# sourceMappingURL=Notification.js.map

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscription_1 = __webpack_require__(31);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SubjectSubscription = (function (_super) {
    __extends(SubjectSubscription, _super);
    function SubjectSubscription(subject, subscriber) {
        _super.call(this);
        this.subject = subject;
        this.subscriber = subscriber;
        this.closed = false;
    }
    SubjectSubscription.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.closed = true;
        var subject = this.subject;
        var observers = subject.observers;
        this.subject = null;
        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
            return;
        }
        var subscriberIndex = observers.indexOf(this.subscriber);
        if (subscriberIndex !== -1) {
            observers.splice(subscriberIndex, 1);
        }
    };
    return SubjectSubscription;
}(Subscription_1.Subscription));
exports.SubjectSubscription = SubjectSubscription;
//# sourceMappingURL=SubjectSubscription.js.map

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(3);
var ScalarObservable_1 = __webpack_require__(72);
var EmptyObservable_1 = __webpack_require__(70);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var ArrayLikeObservable = (function (_super) {
    __extends(ArrayLikeObservable, _super);
    function ArrayLikeObservable(arrayLike, scheduler) {
        _super.call(this);
        this.arrayLike = arrayLike;
        this.scheduler = scheduler;
        if (!scheduler && arrayLike.length === 1) {
            this._isScalar = true;
            this.value = arrayLike[0];
        }
    }
    ArrayLikeObservable.create = function (arrayLike, scheduler) {
        var length = arrayLike.length;
        if (length === 0) {
            return new EmptyObservable_1.EmptyObservable();
        }
        else if (length === 1) {
            return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);
        }
        else {
            return new ArrayLikeObservable(arrayLike, scheduler);
        }
    };
    ArrayLikeObservable.dispatch = function (state) {
        var arrayLike = state.arrayLike, index = state.index, length = state.length, subscriber = state.subscriber;
        if (subscriber.closed) {
            return;
        }
        if (index >= length) {
            subscriber.complete();
            return;
        }
        subscriber.next(arrayLike[index]);
        state.index = index + 1;
        this.schedule(state);
    };
    ArrayLikeObservable.prototype._subscribe = function (subscriber) {
        var index = 0;
        var _a = this, arrayLike = _a.arrayLike, scheduler = _a.scheduler;
        var length = arrayLike.length;
        if (scheduler) {
            return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {
                arrayLike: arrayLike, index: index, length: length, subscriber: subscriber
            });
        }
        else {
            for (var i = 0; i < length && !subscriber.closed; i++) {
                subscriber.next(arrayLike[i]);
            }
            subscriber.complete();
        }
    };
    return ArrayLikeObservable;
}(Observable_1.Observable));
exports.ArrayLikeObservable = ArrayLikeObservable;
//# sourceMappingURL=ArrayLikeObservable.js.map

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(17);
var Observable_1 = __webpack_require__(3);
var Subscriber_1 = __webpack_require__(5);
var Subscription_1 = __webpack_require__(31);
/**
 * @class ConnectableObservable<T>
 */
var ConnectableObservable = (function (_super) {
    __extends(ConnectableObservable, _super);
    function ConnectableObservable(source, subjectFactory) {
        _super.call(this);
        this.source = source;
        this.subjectFactory = subjectFactory;
        this._refCount = 0;
    }
    ConnectableObservable.prototype._subscribe = function (subscriber) {
        return this.getSubject().subscribe(subscriber);
    };
    ConnectableObservable.prototype.getSubject = function () {
        var subject = this._subject;
        if (!subject || subject.isStopped) {
            this._subject = this.subjectFactory();
        }
        return this._subject;
    };
    ConnectableObservable.prototype.connect = function () {
        var connection = this._connection;
        if (!connection) {
            connection = this._connection = new Subscription_1.Subscription();
            connection.add(this.source
                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
            if (connection.closed) {
                this._connection = null;
                connection = Subscription_1.Subscription.EMPTY;
            }
            else {
                this._connection = connection;
            }
        }
        return connection;
    };
    ConnectableObservable.prototype.refCount = function () {
        return this.lift(new RefCountOperator(this));
    };
    return ConnectableObservable;
}(Observable_1.Observable));
exports.ConnectableObservable = ConnectableObservable;
exports.connectableObservableDescriptor = {
    operator: { value: null },
    _refCount: { value: 0, writable: true },
    _subscribe: { value: ConnectableObservable.prototype._subscribe },
    getSubject: { value: ConnectableObservable.prototype.getSubject },
    connect: { value: ConnectableObservable.prototype.connect },
    refCount: { value: ConnectableObservable.prototype.refCount }
};
var ConnectableSubscriber = (function (_super) {
    __extends(ConnectableSubscriber, _super);
    function ConnectableSubscriber(destination, connectable) {
        _super.call(this, destination);
        this.connectable = connectable;
    }
    ConnectableSubscriber.prototype._error = function (err) {
        this._unsubscribe();
        _super.prototype._error.call(this, err);
    };
    ConnectableSubscriber.prototype._complete = function () {
        this._unsubscribe();
        _super.prototype._complete.call(this);
    };
    ConnectableSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (connectable) {
            this.connectable = null;
            var connection = connectable._connection;
            connectable._refCount = 0;
            connectable._subject = null;
            connectable._connection = null;
            if (connection) {
                connection.unsubscribe();
            }
        }
    };
    return ConnectableSubscriber;
}(Subject_1.SubjectSubscriber));
var RefCountOperator = (function () {
    function RefCountOperator(connectable) {
        this.connectable = connectable;
    }
    RefCountOperator.prototype.call = function (subscriber, source) {
        var connectable = this.connectable;
        connectable._refCount++;
        var refCounter = new RefCountSubscriber(subscriber, connectable);
        var subscription = source.subscribe(refCounter);
        if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
        }
        return subscription;
    };
    return RefCountOperator;
}());
var RefCountSubscriber = (function (_super) {
    __extends(RefCountSubscriber, _super);
    function RefCountSubscriber(destination, connectable) {
        _super.call(this, destination);
        this.connectable = connectable;
    }
    RefCountSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (!connectable) {
            this.connection = null;
            return;
        }
        this.connectable = null;
        var refCount = connectable._refCount;
        if (refCount <= 0) {
            this.connection = null;
            return;
        }
        connectable._refCount = refCount - 1;
        if (refCount > 1) {
            this.connection = null;
            return;
        }
        ///
        // Compare the local RefCountSubscriber's connection Subscription to the
        // connection Subscription on the shared ConnectableObservable. In cases
        // where the ConnectableObservable source synchronously emits values, and
        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,
        // execution continues to here before the RefCountOperator has a chance to
        // supply the RefCountSubscriber with the shared connection Subscription.
        // For example:
        // ```
        // Observable.range(0, 10)
        //   .publish()
        //   .refCount()
        //   .take(5)
        //   .subscribe();
        // ```
        // In order to account for this case, RefCountSubscriber should only dispose
        // the ConnectableObservable's shared connection Subscription if the
        // connection Subscription exists, *and* either:
        //   a. RefCountSubscriber doesn't have a reference to the shared connection
        //      Subscription yet, or,
        //   b. RefCountSubscriber's connection Subscription reference is identical
        //      to the shared connection Subscription
        ///
        var connection = this.connection;
        var sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) {
            sharedConnection.unsubscribe();
        }
    };
    return RefCountSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=ConnectableObservable.js.map

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isArray_1 = __webpack_require__(77);
var isArrayLike_1 = __webpack_require__(78);
var isPromise_1 = __webpack_require__(81);
var PromiseObservable_1 = __webpack_require__(71);
var IteratorObservable_1 = __webpack_require__(191);
var ArrayObservable_1 = __webpack_require__(51);
var ArrayLikeObservable_1 = __webpack_require__(188);
var iterator_1 = __webpack_require__(53);
var Observable_1 = __webpack_require__(3);
var observeOn_1 = __webpack_require__(205);
var observable_1 = __webpack_require__(32);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var FromObservable = (function (_super) {
    __extends(FromObservable, _super);
    function FromObservable(ish, scheduler) {
        _super.call(this, null);
        this.ish = ish;
        this.scheduler = scheduler;
    }
    /**
     * Creates an Observable from an Array, an array-like object, a Promise, an
     * iterable object, or an Observable-like object.
     *
     * <span class="informal">Converts almost anything to an Observable.</span>
     *
     * <img src="./img/from.png" width="100%">
     *
     * Convert various other objects and data types into Observables. `from`
     * converts a Promise or an array-like or an
     * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)
     * object into an Observable that emits the items in that promise or array or
     * iterable. A String, in this context, is treated as an array of characters.
     * Observable-like objects (contains a function named with the ES2015 Symbol
     * for Observable) can also be converted through this operator.
     *
     * @example <caption>Converts an array to an Observable</caption>
     * var array = [10, 20, 30];
     * var result = Rx.Observable.from(array);
     * result.subscribe(x => console.log(x));
     *
     * // Results in the following:
     * // 10 20 30
     *
     * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>
     * function* generateDoubles(seed) {
     *   var i = seed;
     *   while (true) {
     *     yield i;
     *     i = 2 * i; // double it
     *   }
     * }
     *
     * var iterator = generateDoubles(3);
     * var result = Rx.Observable.from(iterator).take(10);
     * result.subscribe(x => console.log(x));
     *
     * // Results in the following:
     * // 3 6 12 24 48 96 192 384 768 1536
     *
     * @see {@link create}
     * @see {@link fromEvent}
     * @see {@link fromEventPattern}
     * @see {@link fromPromise}
     *
     * @param {ObservableInput<T>} ish A subscribable object, a Promise, an
     * Observable-like, an Array, an iterable or an array-like object to be
     * converted.
     * @param {Scheduler} [scheduler] The scheduler on which to schedule the
     * emissions of values.
     * @return {Observable<T>} The Observable whose values are originally from the
     * input object that was converted.
     * @static true
     * @name from
     * @owner Observable
     */
    FromObservable.create = function (ish, scheduler) {
        if (ish != null) {
            if (typeof ish[observable_1.$$observable] === 'function') {
                if (ish instanceof Observable_1.Observable && !scheduler) {
                    return ish;
                }
                return new FromObservable(ish, scheduler);
            }
            else if (isArray_1.isArray(ish)) {
                return new ArrayObservable_1.ArrayObservable(ish, scheduler);
            }
            else if (isPromise_1.isPromise(ish)) {
                return new PromiseObservable_1.PromiseObservable(ish, scheduler);
            }
            else if (typeof ish[iterator_1.$$iterator] === 'function' || typeof ish === 'string') {
                return new IteratorObservable_1.IteratorObservable(ish, scheduler);
            }
            else if (isArrayLike_1.isArrayLike(ish)) {
                return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);
            }
        }
        throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');
    };
    FromObservable.prototype._subscribe = function (subscriber) {
        var ish = this.ish;
        var scheduler = this.scheduler;
        if (scheduler == null) {
            return ish[observable_1.$$observable]().subscribe(subscriber);
        }
        else {
            return ish[observable_1.$$observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));
        }
    };
    return FromObservable;
}(Observable_1.Observable));
exports.FromObservable = FromObservable;
//# sourceMappingURL=FromObservable.js.map

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var root_1 = __webpack_require__(13);
var Observable_1 = __webpack_require__(3);
var iterator_1 = __webpack_require__(53);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var IteratorObservable = (function (_super) {
    __extends(IteratorObservable, _super);
    function IteratorObservable(iterator, scheduler) {
        _super.call(this);
        this.scheduler = scheduler;
        if (iterator == null) {
            throw new Error('iterator cannot be null.');
        }
        this.iterator = getIterator(iterator);
    }
    IteratorObservable.create = function (iterator, scheduler) {
        return new IteratorObservable(iterator, scheduler);
    };
    IteratorObservable.dispatch = function (state) {
        var index = state.index, hasError = state.hasError, iterator = state.iterator, subscriber = state.subscriber;
        if (hasError) {
            subscriber.error(state.error);
            return;
        }
        var result = iterator.next();
        if (result.done) {
            subscriber.complete();
            return;
        }
        subscriber.next(result.value);
        state.index = index + 1;
        if (subscriber.closed) {
            if (typeof iterator.return === 'function') {
                iterator.return();
            }
            return;
        }
        this.schedule(state);
    };
    IteratorObservable.prototype._subscribe = function (subscriber) {
        var index = 0;
        var _a = this, iterator = _a.iterator, scheduler = _a.scheduler;
        if (scheduler) {
            return scheduler.schedule(IteratorObservable.dispatch, 0, {
                index: index, iterator: iterator, subscriber: subscriber
            });
        }
        else {
            do {
                var result = iterator.next();
                if (result.done) {
                    subscriber.complete();
                    break;
                }
                else {
                    subscriber.next(result.value);
                }
                if (subscriber.closed) {
                    if (typeof iterator.return === 'function') {
                        iterator.return();
                    }
                    break;
                }
            } while (true);
        }
    };
    return IteratorObservable;
}(Observable_1.Observable));
exports.IteratorObservable = IteratorObservable;
var StringIterator = (function () {
    function StringIterator(str, idx, len) {
        if (idx === void 0) { idx = 0; }
        if (len === void 0) { len = str.length; }
        this.str = str;
        this.idx = idx;
        this.len = len;
    }
    StringIterator.prototype[iterator_1.$$iterator] = function () { return (this); };
    StringIterator.prototype.next = function () {
        return this.idx < this.len ? {
            done: false,
            value: this.str.charAt(this.idx++)
        } : {
            done: true,
            value: undefined
        };
    };
    return StringIterator;
}());
var ArrayIterator = (function () {
    function ArrayIterator(arr, idx, len) {
        if (idx === void 0) { idx = 0; }
        if (len === void 0) { len = toLength(arr); }
        this.arr = arr;
        this.idx = idx;
        this.len = len;
    }
    ArrayIterator.prototype[iterator_1.$$iterator] = function () { return this; };
    ArrayIterator.prototype.next = function () {
        return this.idx < this.len ? {
            done: false,
            value: this.arr[this.idx++]
        } : {
            done: true,
            value: undefined
        };
    };
    return ArrayIterator;
}());
function getIterator(obj) {
    var i = obj[iterator_1.$$iterator];
    if (!i && typeof obj === 'string') {
        return new StringIterator(obj);
    }
    if (!i && obj.length !== undefined) {
        return new ArrayIterator(obj);
    }
    if (!i) {
        throw new TypeError('object is not iterable');
    }
    return obj[iterator_1.$$iterator]();
}
var maxSafeInteger = Math.pow(2, 53) - 1;
function toLength(o) {
    var len = +o.length;
    if (isNaN(len)) {
        return 0;
    }
    if (len === 0 || !numberIsFinite(len)) {
        return len;
    }
    len = sign(len) * Math.floor(Math.abs(len));
    if (len <= 0) {
        return 0;
    }
    if (len > maxSafeInteger) {
        return maxSafeInteger;
    }
    return len;
}
function numberIsFinite(value) {
    return typeof value === 'number' && root_1.root.isFinite(value);
}
function sign(value) {
    var valueAsNumber = +value;
    if (valueAsNumber === 0) {
        return valueAsNumber;
    }
    if (isNaN(valueAsNumber)) {
        return valueAsNumber;
    }
    return valueAsNumber < 0 ? -1 : 1;
}
//# sourceMappingURL=IteratorObservable.js.map

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var FromObservable_1 = __webpack_require__(190);
exports.from = FromObservable_1.FromObservable.create;
//# sourceMappingURL=from.js.map

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var merge_1 = __webpack_require__(203);
exports.merge = merge_1.mergeStatic;
//# sourceMappingURL=merge.js.map

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayObservable_1 = __webpack_require__(51);
exports.of = ArrayObservable_1.ArrayObservable.of;
//# sourceMappingURL=of.js.map

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(50);
var subscribeToResult_1 = __webpack_require__(56);
/**
 * Catches errors on the observable to be handled by returning a new observable or throwing an error.
 *
 * <img src="./img/catch.png" width="100%">
 *
 * @example <caption>Continues with a different Observable when there's an error</caption>
 *
 * Observable.of(1, 2, 3, 4, 5)
 *   .map(n => {
 * 	   if (n == 4) {
 * 	     throw 'four!';
 *     }
 *	   return n;
 *   })
 *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))
 *   .subscribe(x => console.log(x));
 *   // 1, 2, 3, I, II, III, IV, V
 *
 * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>
 *
 * Observable.of(1, 2, 3, 4, 5)
 *   .map(n => {
 * 	   if (n === 4) {
 * 	     throw 'four!';
 *     }
 * 	   return n;
 *   })
 *   .catch((err, caught) => caught)
 *   .take(30)
 *   .subscribe(x => console.log(x));
 *   // 1, 2, 3, 1, 2, 3, ...
 *
 * @example <caption>Throws a new error when the source Observable throws an error</caption>
 *
 * Observable.of(1, 2, 3, 4, 5)
 *   .map(n => {
 *     if (n == 4) {
 *       throw 'four!';
 *     }
 *     return n;
 *   })
 *   .catch(err => {
 *     throw 'error in source. Details: ' + err;
 *   })
 *   .subscribe(
 *     x => console.log(x),
 *     err => console.log(err)
 *   );
 *   // 1, 2, 3, error in source. Details: four!
 *
 * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which
 *  is the source observable, in case you'd like to "retry" that observable by returning it again. Whatever observable
 *  is returned by the `selector` will be used to continue the observable chain.
 * @return {Observable} An observable that originates from either the source or the observable returned by the
 *  catch `selector` function.
 * @method catch
 * @name catch
 * @owner Observable
 */
function _catch(selector) {
    var operator = new CatchOperator(selector);
    var caught = this.lift(operator);
    return (operator.caught = caught);
}
exports._catch = _catch;
var CatchOperator = (function () {
    function CatchOperator(selector) {
        this.selector = selector;
    }
    CatchOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
    };
    return CatchOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var CatchSubscriber = (function (_super) {
    __extends(CatchSubscriber, _super);
    function CatchSubscriber(destination, selector, caught) {
        _super.call(this, destination);
        this.selector = selector;
        this.caught = caught;
    }
    // NOTE: overriding `error` instead of `_error` because we don't want
    // to have this flag this subscriber as `isStopped`. We can mimic the
    // behavior of the RetrySubscriber (from the `retry` operator), where
    // we unsubscribe from our source chain, reset our Subscriber flags,
    // then subscribe to the selector result.
    CatchSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var result = void 0;
            try {
                result = this.selector(err, this.caught);
            }
            catch (err2) {
                _super.prototype.error.call(this, err2);
                return;
            }
            this._unsubscribeAndRecycle();
            this.add(subscribeToResult_1.subscribeToResult(this, result));
        }
    };
    return CatchSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=catch.js.map

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var mergeAll_1 = __webpack_require__(52);
/* tslint:enable:max-line-length */
/**
 * Converts a higher-order Observable into a first-order Observable by
 * concatenating the inner Observables in order.
 *
 * <span class="informal">Flattens an Observable-of-Observables by putting one
 * inner Observable after the other.</span>
 *
 * <img src="./img/concatAll.png" width="100%">
 *
 * Joins every Observable emitted by the source (a higher-order Observable), in
 * a serial fashion. It subscribes to each inner Observable only after the
 * previous inner Observable has completed, and merges all of their values into
 * the returned observable.
 *
 * __Warning:__ If the source Observable emits Observables quickly and
 * endlessly, and the inner Observables it emits generally complete slower than
 * the source emits, you can run into memory issues as the incoming Observables
 * collect in an unbounded buffer.
 *
 * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set
 * to `1`.
 *
 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));
 * var firstOrder = higherOrder.concatAll();
 * firstOrder.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // (results are not concurrent)
 * // For every click on the "document" it will emit values 0 to 3 spaced
 * // on a 1000ms interval
 * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
 *
 * @see {@link combineAll}
 * @see {@link concat}
 * @see {@link concatMap}
 * @see {@link concatMapTo}
 * @see {@link exhaust}
 * @see {@link mergeAll}
 * @see {@link switch}
 * @see {@link zipAll}
 *
 * @return {Observable} An Observable emitting values from all the inner
 * Observables concatenated.
 * @method concatAll
 * @owner Observable
 */
function concatAll() {
    return this.lift(new mergeAll_1.MergeAllOperator(1));
}
exports.concatAll = concatAll;
//# sourceMappingURL=concatAll.js.map

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var mergeMap_1 = __webpack_require__(74);
/* tslint:enable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable, in a serialized fashion waiting for each one to complete before
 * merging the next.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link concatAll}.</span>
 *
 * <img src="./img/concatMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an (so-called "inner") Observable. Each new inner Observable is
 * concatenated with the previous inner Observable.
 *
 * __Warning:__ if source values arrive endlessly and faster than their
 * corresponding inner Observables can complete, it will result in memory issues
 * as inner Observables amass in an unbounded buffer waiting for their turn to
 * be subscribed to.
 *
 * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set
 * to `1`.
 *
 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));
 * result.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // (results are not concurrent)
 * // For every click on the "document" it will emit values 0 to 3 spaced
 * // on a 1000ms interval
 * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
 *
 * @see {@link concat}
 * @see {@link concatAll}
 * @see {@link concatMapTo}
 * @see {@link exhaustMap}
 * @see {@link mergeMap}
 * @see {@link switchMap}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @return {Observable} An observable of values merged from the projected
 * Observables as they were subscribed to, one at a time. Optionally, these
 * values may have been projected from a passed `projectResult` argument.
 * @return {Observable} An Observable that emits the result of applying the
 * projection function (and the optional `resultSelector`) to each item emitted
 * by the source Observable and taking values from each projected inner
 * Observable sequentially.
 * @method concatMap
 * @owner Observable
 */
function concatMap(project, resultSelector) {
    return this.lift(new mergeMap_1.MergeMapOperator(project, resultSelector, 1));
}
exports.concatMap = concatMap;
//# sourceMappingURL=concatMap.js.map

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(5);
/**
 * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.
 *
 * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>
 *  Observable.of(1, 2, 3, 4, 5, 6)
 *     .every(x => x < 5)
 *     .subscribe(x => console.log(x)); // -> false
 *
 * @param {function} predicate A function for determining if an item meets a specified condition.
 * @param {any} [thisArg] Optional object to use for `this` in the callback.
 * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.
 * @method every
 * @owner Observable
 */
function every(predicate, thisArg) {
    return this.lift(new EveryOperator(predicate, thisArg, this));
}
exports.every = every;
var EveryOperator = (function () {
    function EveryOperator(predicate, thisArg, source) {
        this.predicate = predicate;
        this.thisArg = thisArg;
        this.source = source;
    }
    EveryOperator.prototype.call = function (observer, source) {
        return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));
    };
    return EveryOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var EverySubscriber = (function (_super) {
    __extends(EverySubscriber, _super);
    function EverySubscriber(destination, predicate, thisArg, source) {
        _super.call(this, destination);
        this.predicate = predicate;
        this.thisArg = thisArg;
        this.source = source;
        this.index = 0;
        this.thisArg = thisArg || this;
    }
    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {
        this.destination.next(everyValueMatch);
        this.destination.complete();
    };
    EverySubscriber.prototype._next = function (value) {
        var result = false;
        try {
            result = this.predicate.call(this.thisArg, value, this.index++, this.source);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (!result) {
            this.notifyComplete(false);
        }
    };
    EverySubscriber.prototype._complete = function () {
        this.notifyComplete(true);
    };
    return EverySubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=every.js.map

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(5);
/* tslint:enable:max-line-length */
/**
 * Filter items emitted by the source Observable by only emitting those that
 * satisfy a specified predicate.
 *
 * <span class="informal">Like
 * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),
 * it only emits a value from the source if it passes a criterion function.</span>
 *
 * <img src="./img/filter.png" width="100%">
 *
 * Similar to the well-known `Array.prototype.filter` method, this operator
 * takes values from the source Observable, passes them through a `predicate`
 * function and only emits those values that yielded `true`.
 *
 * @example <caption>Emit only click events whose target was a DIV element</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');
 * clicksOnDivs.subscribe(x => console.log(x));
 *
 * @see {@link distinct}
 * @see {@link distinctUntilChanged}
 * @see {@link distinctUntilKeyChanged}
 * @see {@link ignoreElements}
 * @see {@link partition}
 * @see {@link skip}
 *
 * @param {function(value: T, index: number): boolean} predicate A function that
 * evaluates each value emitted by the source Observable. If it returns `true`,
 * the value is emitted, if `false` the value is not passed to the output
 * Observable. The `index` parameter is the number `i` for the i-th source
 * emission that has happened since the subscription, starting from the number
 * `0`.
 * @param {any} [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return {Observable} An Observable of values from the source that were
 * allowed by the `predicate` function.
 * @method filter
 * @owner Observable
 */
function filter(predicate, thisArg) {
    return this.lift(new FilterOperator(predicate, thisArg));
}
exports.filter = filter;
var FilterOperator = (function () {
    function FilterOperator(predicate, thisArg) {
        this.predicate = predicate;
        this.thisArg = thisArg;
    }
    FilterOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
    };
    return FilterOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var FilterSubscriber = (function (_super) {
    __extends(FilterSubscriber, _super);
    function FilterSubscriber(destination, predicate, thisArg) {
        _super.call(this, destination);
        this.predicate = predicate;
        this.thisArg = thisArg;
        this.count = 0;
        this.predicate = predicate;
    }
    // the try catch block below is left specifically for
    // optimization and perf reasons. a tryCatcher is not necessary here.
    FilterSubscriber.prototype._next = function (value) {
        var result;
        try {
            result = this.predicate.call(this.thisArg, value, this.count++);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            this.destination.next(value);
        }
    };
    return FilterSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=filter.js.map

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(5);
var EmptyError_1 = __webpack_require__(55);
/**
 * Emits only the first value (or the first value that meets some condition)
 * emitted by the source Observable.
 *
 * <span class="informal">Emits only the first value. Or emits only the first
 * value that passes some test.</span>
 *
 * <img src="./img/first.png" width="100%">
 *
 * If called with no arguments, `first` emits the first value of the source
 * Observable, then completes. If called with a `predicate` function, `first`
 * emits the first value of the source that matches the specified condition. It
 * may also take a `resultSelector` function to produce the output value from
 * the input value, and a `defaultValue` to emit in case the source completes
 * before it is able to emit a valid value. Throws an error if `defaultValue`
 * was not provided and a matching element is not found.
 *
 * @example <caption>Emit only the first click that happens on the DOM</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.first();
 * result.subscribe(x => console.log(x));
 *
 * @example <caption>Emits the first click that happens on a DIV</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.first(ev => ev.target.tagName === 'DIV');
 * result.subscribe(x => console.log(x));
 *
 * @see {@link filter}
 * @see {@link find}
 * @see {@link take}
 *
 * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
 * callback if the Observable completes before any `next` notification was sent.
 *
 * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]
 * An optional function called with each item to test for condition matching.
 * @param {function(value: T, index: number): R} [resultSelector] A function to
 * produce the value on the output Observable based on the values
 * and the indices of the source Observable. The arguments passed to this
 * function are:
 * - `value`: the value that was emitted on the source.
 * - `index`: the "index" of the value from the source.
 * @param {R} [defaultValue] The default value emitted in case no valid value
 * was found on the source.
 * @return {Observable<T|R>} An Observable of the first item that matches the
 * condition.
 * @method first
 * @owner Observable
 */
function first(predicate, resultSelector, defaultValue) {
    return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));
}
exports.first = first;
var FirstOperator = (function () {
    function FirstOperator(predicate, resultSelector, defaultValue, source) {
        this.predicate = predicate;
        this.resultSelector = resultSelector;
        this.defaultValue = defaultValue;
        this.source = source;
    }
    FirstOperator.prototype.call = function (observer, source) {
        return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
    };
    return FirstOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var FirstSubscriber = (function (_super) {
    __extends(FirstSubscriber, _super);
    function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {
        _super.call(this, destination);
        this.predicate = predicate;
        this.resultSelector = resultSelector;
        this.defaultValue = defaultValue;
        this.source = source;
        this.index = 0;
        this.hasCompleted = false;
        this._emitted = false;
    }
    FirstSubscriber.prototype._next = function (value) {
        var index = this.index++;
        if (this.predicate) {
            this._tryPredicate(value, index);
        }
        else {
            this._emit(value, index);
        }
    };
    FirstSubscriber.prototype._tryPredicate = function (value, index) {
        var result;
        try {
            result = this.predicate(value, index, this.source);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            this._emit(value, index);
        }
    };
    FirstSubscriber.prototype._emit = function (value, index) {
        if (this.resultSelector) {
            this._tryResultSelector(value, index);
            return;
        }
        this._emitFinal(value);
    };
    FirstSubscriber.prototype._tryResultSelector = function (value, index) {
        var result;
        try {
            result = this.resultSelector(value, index);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this._emitFinal(result);
    };
    FirstSubscriber.prototype._emitFinal = function (value) {
        var destination = this.destination;
        if (!this._emitted) {
            this._emitted = true;
            destination.next(value);
            destination.complete();
            this.hasCompleted = true;
        }
    };
    FirstSubscriber.prototype._complete = function () {
        var destination = this.destination;
        if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {
            destination.next(this.defaultValue);
            destination.complete();
        }
        else if (!this.hasCompleted) {
            destination.error(new EmptyError_1.EmptyError);
        }
    };
    return FirstSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=first.js.map

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(5);
var EmptyError_1 = __webpack_require__(55);
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits only the last item emitted by the source Observable.
 * It optionally takes a predicate function as a parameter, in which case, rather than emitting
 * the last item from the source Observable, the resulting Observable will emit the last item
 * from the source Observable that satisfies the predicate.
 *
 * <img src="./img/last.png" width="100%">
 *
 * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
 * callback if the Observable completes before any `next` notification was sent.
 * @param {function} predicate - The condition any source emitted item has to satisfy.
 * @return {Observable} An Observable that emits only the last item satisfying the given condition
 * from the source, or an NoSuchElementException if no such items are emitted.
 * @throws - Throws if no items that match the predicate are emitted by the source Observable.
 * @method last
 * @owner Observable
 */
function last(predicate, resultSelector, defaultValue) {
    return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));
}
exports.last = last;
var LastOperator = (function () {
    function LastOperator(predicate, resultSelector, defaultValue, source) {
        this.predicate = predicate;
        this.resultSelector = resultSelector;
        this.defaultValue = defaultValue;
        this.source = source;
    }
    LastOperator.prototype.call = function (observer, source) {
        return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
    };
    return LastOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var LastSubscriber = (function (_super) {
    __extends(LastSubscriber, _super);
    function LastSubscriber(destination, predicate, resultSelector, defaultValue, source) {
        _super.call(this, destination);
        this.predicate = predicate;
        this.resultSelector = resultSelector;
        this.defaultValue = defaultValue;
        this.source = source;
        this.hasValue = false;
        this.index = 0;
        if (typeof defaultValue !== 'undefined') {
            this.lastValue = defaultValue;
            this.hasValue = true;
        }
    }
    LastSubscriber.prototype._next = function (value) {
        var index = this.index++;
        if (this.predicate) {
            this._tryPredicate(value, index);
        }
        else {
            if (this.resultSelector) {
                this._tryResultSelector(value, index);
                return;
            }
            this.lastValue = value;
            this.hasValue = true;
        }
    };
    LastSubscriber.prototype._tryPredicate = function (value, index) {
        var result;
        try {
            result = this.predicate(value, index, this.source);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            if (this.resultSelector) {
                this._tryResultSelector(value, index);
                return;
            }
            this.lastValue = value;
            this.hasValue = true;
        }
    };
    LastSubscriber.prototype._tryResultSelector = function (value, index) {
        var result;
        try {
            result = this.resultSelector(value, index);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.lastValue = result;
        this.hasValue = true;
    };
    LastSubscriber.prototype._complete = function () {
        var destination = this.destination;
        if (this.hasValue) {
            destination.next(this.lastValue);
            destination.complete();
        }
        else {
            destination.error(new EmptyError_1.EmptyError);
        }
    };
    return LastSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=last.js.map

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(5);
/**
 * Applies a given `project` function to each value emitted by the source
 * Observable, and emits the resulting values as an Observable.
 *
 * <span class="informal">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),
 * it passes each source value through a transformation function to get
 * corresponding output values.</span>
 *
 * <img src="./img/map.png" width="100%">
 *
 * Similar to the well known `Array.prototype.map` function, this operator
 * applies a projection to each value and emits that projection in the output
 * Observable.
 *
 * @example <caption>Map every every click to the clientX position of that click</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var positions = clicks.map(ev => ev.clientX);
 * positions.subscribe(x => console.log(x));
 *
 * @see {@link mapTo}
 * @see {@link pluck}
 *
 * @param {function(value: T, index: number): R} project The function to apply
 * to each `value` emitted by the source Observable. The `index` parameter is
 * the number `i` for the i-th emission that has happened since the
 * subscription, starting from the number `0`.
 * @param {any} [thisArg] An optional argument to define what `this` is in the
 * `project` function.
 * @return {Observable<R>} An Observable that emits the values from the source
 * Observable transformed by the given `project` function.
 * @method map
 * @owner Observable
 */
function map(project, thisArg) {
    if (typeof project !== 'function') {
        throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
    }
    return this.lift(new MapOperator(project, thisArg));
}
exports.map = map;
var MapOperator = (function () {
    function MapOperator(project, thisArg) {
        this.project = project;
        this.thisArg = thisArg;
    }
    MapOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
    };
    return MapOperator;
}());
exports.MapOperator = MapOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MapSubscriber = (function (_super) {
    __extends(MapSubscriber, _super);
    function MapSubscriber(destination, project, thisArg) {
        _super.call(this, destination);
        this.project = project;
        this.count = 0;
        this.thisArg = thisArg || this;
    }
    // NOTE: This looks unoptimized, but it's actually purposefully NOT
    // using try/catch optimizations.
    MapSubscriber.prototype._next = function (value) {
        var result;
        try {
            result = this.project.call(this.thisArg, value, this.count++);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return MapSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=map.js.map

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(3);
var ArrayObservable_1 = __webpack_require__(51);
var mergeAll_1 = __webpack_require__(52);
var isScheduler_1 = __webpack_require__(82);
/* tslint:enable:max-line-length */
/**
 * Creates an output Observable which concurrently emits all values from every
 * given input Observable.
 *
 * <span class="informal">Flattens multiple Observables together by blending
 * their values into one Observable.</span>
 *
 * <img src="./img/merge.png" width="100%">
 *
 * `merge` subscribes to each given input Observable (either the source or an
 * Observable given as argument), and simply forwards (without doing any
 * transformation) all the values from all the input Observables to the output
 * Observable. The output Observable only completes once all input Observables
 * have completed. Any error delivered by an input Observable will be immediately
 * emitted on the output Observable.
 *
 * @example <caption>Merge together two Observables: 1s interval and clicks</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var timer = Rx.Observable.interval(1000);
 * var clicksOrTimer = clicks.merge(timer);
 * clicksOrTimer.subscribe(x => console.log(x));
 *
 * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>
 * var timer1 = Rx.Observable.interval(1000).take(10);
 * var timer2 = Rx.Observable.interval(2000).take(6);
 * var timer3 = Rx.Observable.interval(500).take(10);
 * var concurrent = 2; // the argument
 * var merged = timer1.merge(timer2, timer3, concurrent);
 * merged.subscribe(x => console.log(x));
 *
 * @see {@link mergeAll}
 * @see {@link mergeMap}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 *
 * @param {ObservableInput} other An input Observable to merge with the source
 * Observable. More than one input Observables may be given as argument.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @param {Scheduler} [scheduler=null] The IScheduler to use for managing
 * concurrency of input Observables.
 * @return {Observable} An Observable that emits items that are the result of
 * every input Observable.
 * @method merge
 * @owner Observable
 */
function merge() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    return this.lift.call(mergeStatic.apply(void 0, [this].concat(observables)));
}
exports.merge = merge;
/* tslint:enable:max-line-length */
/**
 * Creates an output Observable which concurrently emits all values from every
 * given input Observable.
 *
 * <span class="informal">Flattens multiple Observables together by blending
 * their values into one Observable.</span>
 *
 * <img src="./img/merge.png" width="100%">
 *
 * `merge` subscribes to each given input Observable (as arguments), and simply
 * forwards (without doing any transformation) all the values from all the input
 * Observables to the output Observable. The output Observable only completes
 * once all input Observables have completed. Any error delivered by an input
 * Observable will be immediately emitted on the output Observable.
 *
 * @example <caption>Merge together two Observables: 1s interval and clicks</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var timer = Rx.Observable.interval(1000);
 * var clicksOrTimer = Rx.Observable.merge(clicks, timer);
 * clicksOrTimer.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // timer will emit ascending values, one every second(1000ms) to console
 * // clicks logs MouseEvents to console everytime the "document" is clicked
 * // Since the two streams are merged you see these happening
 * // as they occur.
 *
 * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>
 * var timer1 = Rx.Observable.interval(1000).take(10);
 * var timer2 = Rx.Observable.interval(2000).take(6);
 * var timer3 = Rx.Observable.interval(500).take(10);
 * var concurrent = 2; // the argument
 * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);
 * merged.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // - First timer1 and timer2 will run concurrently
 * // - timer1 will emit a value every 1000ms for 10 iterations
 * // - timer2 will emit a value every 2000ms for 6 iterations
 * // - after timer1 hits it's max iteration, timer2 will
 * //   continue, and timer3 will start to run concurrently with timer2
 * // - when timer2 hits it's max iteration it terminates, and
 * //   timer3 will continue to emit a value every 500ms until it is complete
 *
 * @see {@link mergeAll}
 * @see {@link mergeMap}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 *
 * @param {...ObservableInput} observables Input Observables to merge together.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @param {Scheduler} [scheduler=null] The IScheduler to use for managing
 * concurrency of input Observables.
 * @return {Observable} an Observable that emits items that are the result of
 * every input Observable.
 * @static true
 * @name merge
 * @owner Observable
 */
function mergeStatic() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    var concurrent = Number.POSITIVE_INFINITY;
    var scheduler = null;
    var last = observables[observables.length - 1];
    if (isScheduler_1.isScheduler(last)) {
        scheduler = observables.pop();
        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
            concurrent = observables.pop();
        }
    }
    else if (typeof last === 'number') {
        concurrent = observables.pop();
    }
    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_1.Observable) {
        return observables[0];
    }
    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new mergeAll_1.MergeAllOperator(concurrent));
}
exports.mergeStatic = mergeStatic;
//# sourceMappingURL=merge.js.map

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ConnectableObservable_1 = __webpack_require__(189);
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits the results of invoking a specified selector on items
 * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.
 *
 * <img src="./img/multicast.png" width="100%">
 *
 * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through
 * which the source sequence's elements will be multicast to the selector function
 * or Subject to push source elements into.
 * @param {Function} [selector] - Optional selector function that can use the multicasted source stream
 * as many times as needed, without causing multiple subscriptions to the source stream.
 * Subscribers to the given source will receive all notifications of the source from the
 * time of the subscription forward.
 * @return {Observable} An Observable that emits the results of invoking the selector
 * on the items emitted by a `ConnectableObservable` that shares a single subscription to
 * the underlying stream.
 * @method multicast
 * @owner Observable
 */
function multicast(subjectOrSubjectFactory, selector) {
    var subjectFactory;
    if (typeof subjectOrSubjectFactory === 'function') {
        subjectFactory = subjectOrSubjectFactory;
    }
    else {
        subjectFactory = function subjectFactory() {
            return subjectOrSubjectFactory;
        };
    }
    if (typeof selector === 'function') {
        return this.lift(new MulticastOperator(subjectFactory, selector));
    }
    var connectable = Object.create(this, ConnectableObservable_1.connectableObservableDescriptor);
    connectable.source = this;
    connectable.subjectFactory = subjectFactory;
    return connectable;
}
exports.multicast = multicast;
var MulticastOperator = (function () {
    function MulticastOperator(subjectFactory, selector) {
        this.subjectFactory = subjectFactory;
        this.selector = selector;
    }
    MulticastOperator.prototype.call = function (subscriber, source) {
        var selector = this.selector;
        var subject = this.subjectFactory();
        var subscription = selector(subject).subscribe(subscriber);
        subscription.add(source.subscribe(subject));
        return subscription;
    };
    return MulticastOperator;
}());
exports.MulticastOperator = MulticastOperator;
//# sourceMappingURL=multicast.js.map

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(5);
var Notification_1 = __webpack_require__(186);
/**
 * @see {@link Notification}
 *
 * @param scheduler
 * @param delay
 * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
 * @method observeOn
 * @owner Observable
 */
function observeOn(scheduler, delay) {
    if (delay === void 0) { delay = 0; }
    return this.lift(new ObserveOnOperator(scheduler, delay));
}
exports.observeOn = observeOn;
var ObserveOnOperator = (function () {
    function ObserveOnOperator(scheduler, delay) {
        if (delay === void 0) { delay = 0; }
        this.scheduler = scheduler;
        this.delay = delay;
    }
    ObserveOnOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
    };
    return ObserveOnOperator;
}());
exports.ObserveOnOperator = ObserveOnOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ObserveOnSubscriber = (function (_super) {
    __extends(ObserveOnSubscriber, _super);
    function ObserveOnSubscriber(destination, scheduler, delay) {
        if (delay === void 0) { delay = 0; }
        _super.call(this, destination);
        this.scheduler = scheduler;
        this.delay = delay;
    }
    ObserveOnSubscriber.dispatch = function (arg) {
        var notification = arg.notification, destination = arg.destination;
        notification.observe(destination);
        this.unsubscribe();
    };
    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
    };
    ObserveOnSubscriber.prototype._next = function (value) {
        this.scheduleMessage(Notification_1.Notification.createNext(value));
    };
    ObserveOnSubscriber.prototype._error = function (err) {
        this.scheduleMessage(Notification_1.Notification.createError(err));
    };
    ObserveOnSubscriber.prototype._complete = function () {
        this.scheduleMessage(Notification_1.Notification.createComplete());
    };
    return ObserveOnSubscriber;
}(Subscriber_1.Subscriber));
exports.ObserveOnSubscriber = ObserveOnSubscriber;
var ObserveOnMessage = (function () {
    function ObserveOnMessage(notification, destination) {
        this.notification = notification;
        this.destination = destination;
    }
    return ObserveOnMessage;
}());
exports.ObserveOnMessage = ObserveOnMessage;
//# sourceMappingURL=observeOn.js.map

/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(5);
/* tslint:enable:max-line-length */
/**
 * Applies an accumulator function over the source Observable, and returns the
 * accumulated result when the source completes, given an optional seed value.
 *
 * <span class="informal">Combines together all values emitted on the source,
 * using an accumulator function that knows how to join a new source value into
 * the accumulation from the past.</span>
 *
 * <img src="./img/reduce.png" width="100%">
 *
 * Like
 * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),
 * `reduce` applies an `accumulator` function against an accumulation and each
 * value of the source Observable (from the past) to reduce it to a single
 * value, emitted on the output Observable. Note that `reduce` will only emit
 * one value, only when the source Observable completes. It is equivalent to
 * applying operator {@link scan} followed by operator {@link last}.
 *
 * Returns an Observable that applies a specified `accumulator` function to each
 * item emitted by the source Observable. If a `seed` value is specified, then
 * that value will be used as the initial value for the accumulator. If no seed
 * value is specified, the first item of the source is used as the seed.
 *
 * @example <caption>Count the number of click events that happened in 5 seconds</caption>
 * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')
 *   .takeUntil(Rx.Observable.interval(5000));
 * var ones = clicksInFiveSeconds.mapTo(1);
 * var seed = 0;
 * var count = ones.reduce((acc, one) => acc + one, seed);
 * count.subscribe(x => console.log(x));
 *
 * @see {@link count}
 * @see {@link expand}
 * @see {@link mergeScan}
 * @see {@link scan}
 *
 * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function
 * called on each source value.
 * @param {R} [seed] The initial accumulation value.
 * @return {Observable<R>} An Observable that emits a single value that is the
 * result of accumulating the values emitted by the source Observable.
 * @method reduce
 * @owner Observable
 */
function reduce(accumulator, seed) {
    var hasSeed = false;
    // providing a seed of `undefined` *should* be valid and trigger
    // hasSeed! so don't use `seed !== undefined` checks!
    // For this reason, we have to check it here at the original call site
    // otherwise inside Operator/Subscriber we won't know if `undefined`
    // means they didn't provide anything or if they literally provided `undefined`
    if (arguments.length >= 2) {
        hasSeed = true;
    }
    return this.lift(new ReduceOperator(accumulator, seed, hasSeed));
}
exports.reduce = reduce;
var ReduceOperator = (function () {
    function ReduceOperator(accumulator, seed, hasSeed) {
        if (hasSeed === void 0) { hasSeed = false; }
        this.accumulator = accumulator;
        this.seed = seed;
        this.hasSeed = hasSeed;
    }
    ReduceOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ReduceSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
    };
    return ReduceOperator;
}());
exports.ReduceOperator = ReduceOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ReduceSubscriber = (function (_super) {
    __extends(ReduceSubscriber, _super);
    function ReduceSubscriber(destination, accumulator, seed, hasSeed) {
        _super.call(this, destination);
        this.accumulator = accumulator;
        this.hasSeed = hasSeed;
        this.index = 0;
        this.hasValue = false;
        this.acc = seed;
        if (!this.hasSeed) {
            this.index++;
        }
    }
    ReduceSubscriber.prototype._next = function (value) {
        if (this.hasValue || (this.hasValue = this.hasSeed)) {
            this._tryReduce(value);
        }
        else {
            this.acc = value;
            this.hasValue = true;
        }
    };
    ReduceSubscriber.prototype._tryReduce = function (value) {
        var result;
        try {
            result = this.accumulator(this.acc, value, this.index++);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.acc = result;
    };
    ReduceSubscriber.prototype._complete = function () {
        if (this.hasValue || this.hasSeed) {
            this.destination.next(this.acc);
        }
        this.destination.complete();
    };
    return ReduceSubscriber;
}(Subscriber_1.Subscriber));
exports.ReduceSubscriber = ReduceSubscriber;
//# sourceMappingURL=reduce.js.map

/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var multicast_1 = __webpack_require__(204);
var Subject_1 = __webpack_require__(17);
function shareSubjectFactory() {
    return new Subject_1.Subject();
}
/**
 * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one
 * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will
 * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.
 * This is an alias for .publish().refCount().
 *
 * <img src="./img/share.png" width="100%">
 *
 * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.
 * @method share
 * @owner Observable
 */
function share() {
    return multicast_1.multicast.call(this, shareSubjectFactory).refCount();
}
exports.share = share;
;
//# sourceMappingURL=share.js.map

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var root_1 = __webpack_require__(13);
/* tslint:enable:max-line-length */
/**
 * Converts an Observable sequence to a ES2015 compliant promise.
 *
 * @example
 * // Using normal ES2015
 * let source = Rx.Observable
 *   .just(42)
 *   .toPromise();
 *
 * source.then((value) => console.log('Value: %s', value));
 * // => Value: 42
 *
 * // Rejected Promise
 * // Using normal ES2015
 * let source = Rx.Observable
 *   .throw(new Error('woops'))
 *   .toPromise();
 *
 * source
 *   .then((value) => console.log('Value: %s', value))
 *   .catch((err) => console.log('Error: %s', err));
 * // => Error: Error: woops
 *
 * // Setting via the config
 * Rx.config.Promise = RSVP.Promise;
 *
 * let source = Rx.Observable
 *   .of(42)
 *   .toPromise();
 *
 * source.then((value) => console.log('Value: %s', value));
 * // => Value: 42
 *
 * // Setting via the method
 * let source = Rx.Observable
 *   .just(42)
 *   .toPromise(RSVP.Promise);
 *
 * source.then((value) => console.log('Value: %s', value));
 * // => Value: 42
 *
 * @param PromiseCtor promise The constructor of the promise. If not provided,
 * it will look for a constructor first in Rx.config.Promise then fall back to
 * the native Promise constructor if available.
 * @return {Promise<T>} An ES2015 compatible promise with the last value from
 * the observable sequence.
 * @method toPromise
 * @owner Observable
 */
function toPromise(PromiseCtor) {
    var _this = this;
    if (!PromiseCtor) {
        if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
            PromiseCtor = root_1.root.Rx.config.Promise;
        }
        else if (root_1.root.Promise) {
            PromiseCtor = root_1.root.Promise;
        }
    }
    if (!PromiseCtor) {
        throw new Error('no Promise impl found');
    }
    return new PromiseCtor(function (resolve, reject) {
        var value;
        _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
    });
}
exports.toPromise = toPromise;
//# sourceMappingURL=toPromise.js.map

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * An error thrown when one or more errors have occurred during the
 * `unsubscribe` of a {@link Subscription}.
 */
var UnsubscriptionError = (function (_super) {
    __extends(UnsubscriptionError, _super);
    function UnsubscriptionError(errors) {
        _super.call(this);
        this.errors = errors;
        var err = Error.call(this, errors ?
            errors.length + " errors occurred during unsubscription:\n  " + errors.map(function (err, i) { return ((i + 1) + ") " + err.toString()); }).join('\n  ') : '');
        this.name = err.name = 'UnsubscriptionError';
        this.stack = err.stack;
        this.message = err.message;
    }
    return UnsubscriptionError;
}(Error));
exports.UnsubscriptionError = UnsubscriptionError;
//# sourceMappingURL=UnsubscriptionError.js.map

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Subscriber_1 = __webpack_require__(5);
var rxSubscriber_1 = __webpack_require__(54);
var Observer_1 = __webpack_require__(69);
function toSubscriber(nextOrObserver, error, complete) {
    if (nextOrObserver) {
        if (nextOrObserver instanceof Subscriber_1.Subscriber) {
            return nextOrObserver;
        }
        if (nextOrObserver[rxSubscriber_1.$$rxSubscriber]) {
            return nextOrObserver[rxSubscriber_1.$$rxSubscriber]();
        }
    }
    if (!nextOrObserver && !error && !complete) {
        return new Subscriber_1.Subscriber(Observer_1.empty);
    }
    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
}
exports.toSubscriber = toSubscriber;
//# sourceMappingURL=toSubscriber.js.map

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var errorObject_1 = __webpack_require__(76);
var tryCatchTarget;
function tryCatcher() {
    try {
        return tryCatchTarget.apply(this, arguments);
    }
    catch (e) {
        errorObject_1.errorObject.e = e;
        return errorObject_1.errorObject;
    }
}
function tryCatch(fn) {
    tryCatchTarget = fn;
    return tryCatcher;
}
exports.tryCatch = tryCatch;
;
//# sourceMappingURL=tryCatch.js.map

/***/ })
]);
//# sourceMappingURL=vendor.bundle.js.map